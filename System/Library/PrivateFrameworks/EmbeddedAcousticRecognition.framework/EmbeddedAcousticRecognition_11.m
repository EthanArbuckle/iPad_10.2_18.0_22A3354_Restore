void sub_1ADC6C154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D455F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::mutex>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D455F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<std::mutex>::__on_zero_shared(uint64_t a1)
{
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

void quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::~ModelLoaderFactoryAdapter(quasar::SpeechRecognizer::ModelLoaderFactoryAdapter *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::createDecoder(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8));
}

uint64_t quasar::SpeechRecognizer::ModelLoaderFactoryAdapter::createDecodable(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8));
}

std::string *std::allocate_shared[abi:ne180100]<quasar::SpeakerCodeTraining,std::allocator<quasar::SpeakerCodeTraining>,std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,void>@<X0>(__int128 *a1@<X1>, __int128 *a2@<X2>, int *a3@<X3>, float *a4@<X4>, unsigned int *a5@<X5>, unsigned int *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, std::string::value_type *a9, char *a10, int *a11, int *a12, __int128 *a13)
{
  std::string *v21;
  std::string *result;

  v21 = (std::string *)operator new(0x138uLL);
  result = std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,std::allocator<quasar::SpeakerCodeTraining>,0>(v21, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13);
  *a8 = v21 + 1;
  a8[1] = v21;
  return result;
}

void sub_1ADC6C2AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::string &,unsigned int &,float &,unsigned int &,unsigned int &,unsigned int &,BOOL &,BOOL &,unsigned int &,unsigned int &,std::string &,std::allocator<quasar::SpeakerCodeTraining>,0>(std::string *a1, __int128 *a2, __int128 *a3, int *a4, float *a5, unsigned int *a6, unsigned int *a7, int *a8, std::string::value_type *a9, char *a10, int *a11, int *a12, __int128 *a13)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D436A8;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::SpeakerCodeTraining::SpeakerCodeTraining(a1 + 1, a2, a3, *a4, *a6, *a7, *a8, *a9, *a5, *a10, *a11, *a12, a13);
  return a1;
}

void sub_1ADC6C33C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D436A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D436A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTraining>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeakerCodeTraining::~SpeakerCodeTraining((quasar::SpeakerCodeTraining *)(a1 + 24));
}

void quasar::SpeakerCodeTraining::~SpeakerCodeTraining(quasar::SpeakerCodeTraining *this)
{
  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

quasar::SpeechRecognizerActiveConfiguration *quasar::SpeechRecognizerActiveConfiguration::SpeechRecognizerActiveConfiguration(quasar::SpeechRecognizerActiveConfiguration *this, const quasar::SpeechRecognizerActiveConfiguration *a2)
{
  uint64_t v4;

  v4 = std::__optional_copy_base<std::set<unsigned int>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this, (uint64_t)a2);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100](v4 + 32, (uint64_t)a2 + 32);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 64, (uint64_t)a2 + 64);
  std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 96, (uint64_t)a2 + 96);
  std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 128, (uint64_t)a2 + 128);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 160, (uint64_t)a2 + 160);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 192, (uint64_t)a2 + 192);
  std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100]((uint64_t)this + 224, (uint64_t)a2 + 224);
  return this;
}

void sub_1ADC6C4D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*(_BYTE *)(v1 + 216))
    std::__tree<std::string>::destroy(v7, *(char **)(v1 + 200));
  if (*(_BYTE *)(v1 + 184))
    std::__tree<std::string>::destroy(v6, *(char **)(v1 + 168));
  if (*(_BYTE *)(v1 + 152))
    std::__tree<int>::destroy(v5, *(_QWORD **)(v1 + 136));
  if (*(_BYTE *)(v1 + 120))
    std::__tree<int>::destroy(v4, *(_QWORD **)(v1 + 104));
  if (*(_BYTE *)(v1 + 88))
    std::__tree<std::string>::destroy(v3, *(char **)(v1 + 72));
  if (*(_BYTE *)(v1 + 56))
    std::__tree<std::string>::destroy(v2, *(char **)(v1 + 40));
  if (*(_BYTE *)(v1 + 24))
    std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::set<unsigned int>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADC6C5D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<unsigned int>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_1ADC6C634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<unsigned int>::insert[abi:ne180100]<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  unsigned int *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned int *v7;
  unsigned int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(v5, v6, v4 + 7, v4 + 7);
      v7 = (unsigned int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t std::__optional_copy_base<std::set<std::string>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)a1, (const void ***)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADC6C710(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t std::__optional_copy_base<std::set<BOOL>,false>::__optional_copy_base[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    std::set<BOOL>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADC6C770(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
    std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t *std::set<BOOL>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<BOOL>::insert[abi:ne180100]<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1ADC6C7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<BOOL>::insert[abi:ne180100]<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v4;
  uint64_t **v5;
  uint64_t *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<BOOL>::__emplace_hint_unique_key_args<BOOL,BOOL const&>(v5, v6, v4 + 25, v4 + 25);
      v7 = (unsigned __int8 *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (unsigned __int8 *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<BOOL>::__emplace_hint_unique_key_args<BOOL,BOOL const&>(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, _BYTE *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<BOOL>::__find_equal<BOOL>(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x20uLL);
    *((_BYTE *)v7 + 25) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<BOOL>::__find_equal<BOOL>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t *v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecogAudioBuffer,std::allocator<quasar::RecogAudioBuffer>,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, int *a3@<X3>, unsigned __int8 *a4@<X4>, __int128 *a5@<X5>, uint64_t *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, char *a9, int *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1ADC6CB30(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&,std::allocator<quasar::RecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2, int *a3, int *a4, unsigned __int8 *a5, __int128 *a6, uint64_t *a7, int *a8, char *a9, int *a10)
{
  char v12;

  a1[2] = 0;
  *a1 = &unk_1E5D42F00;
  a1[1] = 0;
  std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&>((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1ADC6CBB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::RecogAudioBuffer>::construct[abi:ne180100]<quasar::RecogAudioBuffer,unsigned int &,int &,int &,BOOL &,std::string &,std::shared_ptr<kaldi::Timer> &,int &,BOOL &,unsigned int const&>(uint64_t a1, uint64_t a2, unsigned int *a3, int *a4, int *a5, unsigned __int8 *a6, __int128 *a7, uint64_t *a8, int *a9, char *a10, int *a11)
{
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v12 = *a3;
  v13 = *a4;
  v14 = *a5;
  v15 = *a6;
  v16 = (std::__shared_weak_count *)a8[1];
  v22 = *a8;
  v23 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  quasar::RecogAudioBuffer::RecogAudioBuffer(a2, v12, v13, v14, v15 != 0, a7, &v22, *a9, *a10, *a11);
  v19 = v23;
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1ADC6CC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::SpeechRecognizer::RecogData *quasar::SpeechRecognizer::RecogData::RecogData(quasar::SpeechRecognizer::RecogData *this)
{
  uint64_t v2;

  *(_BYTE *)this = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_QWORD *)this + 27) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 197) = 0u;
  v2 = operator new();
  quasar::DecoderChainPersistentData::DecoderChainPersistentData(v2);
  std::shared_ptr<quasar::DecoderChainPersistentData>::shared_ptr[abi:ne180100]<quasar::DecoderChainPersistentData,void>((_QWORD *)this + 28, v2);
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_DWORD *)this + 64) = 0;
  return this;
}

void sub_1ADC6CD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;

  v13 = v12;
  MEMORY[0x1AF44D190](v13, 0x1000C40F7F8B94BLL);
  v15 = *(void **)(v11 + 176);
  if (v15)
  {
    *(_QWORD *)(v11 + 184) = v15;
    operator delete(v15);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 160);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 128);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 112);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11 + 48);
  a10 = (void **)(v11 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::DecoderChainPersistentData>::shared_ptr[abi:ne180100]<quasar::DecoderChainPersistentData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D46310;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADC6CE68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    MEMORY[0x1AF44D190](v1, 0x1000C40F7F8B94BLL);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1AF44D190);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::DecoderChainPersistentData *,std::shared_ptr<quasar::DecoderChainPersistentData>::__shared_ptr_default_delete<quasar::DecoderChainPersistentData,quasar::DecoderChainPersistentData>,std::allocator<quasar::DecoderChainPersistentData>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void quasar::SpeechRecognizer::RecogData::~RecogData(quasar::SpeechRecognizer::RecogData *this)
{
  void *v2;
  void **v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 240);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  v2 = (void *)*((_QWORD *)this + 22);
  if (v2)
  {
    *((_QWORD *)this + 23) = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 160);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 128);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 112);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v3 = (void **)((char *)this + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 8);
}

void std::vector<std::vector<std::string>>::__assign_with_size[abi:ne180100]<std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, unint64_t a4)
{
  uint64_t v8;
  std::vector<std::wstring> *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  __int128 **v13;
  void **v14;
  void **v15;
  void **v16;
  char v17;
  char v18;
  void **v19;

  v8 = a1 + 16;
  v9 = *(std::vector<std::wstring> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<std::string>>::__vdeallocate((void ***)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = &a2[(uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v17, (uint64_t)a2, (uint64_t)v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>((int)&v18, (uint64_t)a2, (uint64_t)a3, v9);
  v15 = v14;
  v16 = *(void ***)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 3;
      v19 = v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADC6D128(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADC6D130(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::string>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<std::string>>,std::vector<std::string>*,std::vector<std::string>*,std::vector<std::string>*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v4, *v6, v6[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v6[1] - (char *)*v6) >> 3));
      v4 = ++v11;
      v6 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADC6D250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::string>>,std::vector<std::string>*>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = **(void ****)(a1 + 16);
  v2 = **(void ****)(a1 + 8);
  while (v1 != v2)
  {
    v1 -= 3;
    v3 = v1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<std::string> *,std::vector<std::string> *,std::vector<std::string> *>(int a1, uint64_t a2, uint64_t a3, std::vector<std::wstring> *this)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((std::vector<std::wstring> *)v5 != this)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(__int128 **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 3));
      v5 += 24;
      ++this;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

uint64_t **std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t **leaf_high;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          std::string::operator=((std::string *)(v8 + 5), (const std::string *)(v9 + 5));
          *((_DWORD *)v8 + 16) = *((_DWORD *)v9 + 16);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high((uint64_t)v5, &v18, (uint64_t)(v17 + 4));
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, v17);
          v17 = v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (_QWORD *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = (_QWORD *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v12 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_multi<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(v5, (uint64_t)(a2 + 4));
      v13 = (_QWORD *)a2[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)a2[2];
          v12 = *v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADC6D4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *result;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v5 = v4;
        if (!std::less<std::pair<quasar::PronType,std::string>>::operator()[abi:ne180100](v7, a3, (uint64_t)(v4 + 4)))break;
        v4 = (_QWORD *)*v5;
        result = v5;
        if (!*v5)
          goto LABEL_9;
      }
      v4 = (_QWORD *)v5[1];
    }
    while (v4);
    result = v5 + 1;
  }
  else
  {
    result = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v5;
  return result;
}

uint64_t std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__emplace_multi<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>(uint64_t **a1, uint64_t a2)
{
  uint64_t **leaf_high;
  uint64_t v5;
  uint64_t *v6;

  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__construct_node<std::pair<std::pair<quasar::PronType,std::string> const,float> const&>((uint64_t)a1, a2, (uint64_t)&v6);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::__find_leaf_high((uint64_t)a1, &v5, (uint64_t)(v6 + 4));
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v5, leaf_high, v6);
  return v6;
}

void sub_1ADC6D608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::pair<quasar::PronType,std::string>,float>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D461F8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = (uint64_t)v4;
  if (a2)
    v5 = (_QWORD *)(a2 + 8);
  else
    v5 = 0;
  std::shared_ptr<quasar::SystemCombinationDecoder>::__enable_weak_this[abi:ne180100]<quasar::SystemCombinationDecoder,quasar::SystemCombinationDecoder,void>((uint64_t)a1, v5, a2);
  return a1;
}

void sub_1ADC6D69C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::SpeechRecognizer *,std::shared_ptr<quasar::SpeechRecognizer>::__shared_ptr_default_delete<quasar::SpeechRecognizer,quasar::SpeechRecognizer>,std::allocator<quasar::SpeechRecognizer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &unk_1E5D3CF38;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &unk_1E5D3CF38;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::operator()(_QWORD *a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD *);
  _QWORD *v3;

  v1 = a1[2];
  v2 = (uint64_t (*)(_QWORD *))a1[1];
  v3 = (_QWORD *)(a1[3] + (v1 >> 1));
  if ((v1 & 1) != 0)
    v2 = *(uint64_t (**)(_QWORD *))(*v3 + v2);
  return v2(v3);
}

uint64_t std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>,std::allocator<std::__bind<BOOL (quasar::SpeechRecognizer::*)(void),quasar::SpeechRecognizer*>>,BOOL ()(void)>::target_type()
{
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x98uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADC6D85C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar21ConfusionNetworkCacheENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43A28;
  a1[1] = 0;
  quasar::ConfusionNetworkCache::ConfusionNetworkCache((quasar::ConfusionNetworkCache *)(a1 + 3));
  return a1;
}

void sub_1ADC6D8A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ConfusionNetworkCache>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 24;
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 104));
  std::mutex::~mutex((std::mutex *)(a1 + 40));
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::default_delete<quasar::QsrTextSymbolTable>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 128);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 96);
    if (*(char *)(a2 + 95) < 0)
      operator delete(*(void **)(a2 + 72));
    if (*(char *)(a2 + 71) < 0)
      operator delete(*(void **)(a2 + 48));
    if (*(char *)(a2 + 47) < 0)
      operator delete(*(void **)(a2 + 24));
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    JUMPOUT(0x1AF44D190);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerConfig,std::allocator<quasar::SpeechRecognizerConfig>,std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x668uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADC6DAEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRecognizerConfig>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::vector<std::string> &,std::unordered_map<std::string,std::string> &,BOOL &,quasar::DecoderOptions const&,std::allocator<quasar::SpeechRecognizerConfig>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D43DA8;
  quasar::SpeechRecognizerConfig::SpeechRecognizerConfig(a1 + 3, a2, a3, a4, *a5);
  return a1;
}

void sub_1ADC6DB3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::allocator<quasar::SpeechRecognizerModelLoader>,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,void>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x1C0uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,std::allocator<quasar::SpeechRecognizerModelLoader>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADC6DB9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>,std::allocator<quasar::SpeechRecognizerModelLoader>,0>(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D446D8;
  a1[1] = 0;
  std::allocator<quasar::SpeechRecognizerModelLoader>::construct[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADC6DC00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D446D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D446D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeechRecognizerModelLoader>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeechRecognizerModelLoader::~SpeechRecognizerModelLoader((quasar::SpeechRecognizerModelLoader *)(a1 + 24));
}

uint64_t std::allocator<quasar::SpeechRecognizerModelLoader>::construct[abi:ne180100]<quasar::SpeechRecognizerModelLoader,std::shared_ptr<quasar::SpeechRecognizerConfig> &,std::unique_ptr<quasar::SpeechRecognizerModelLoader::Factory>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v4 = *a4;
  *a4 = 0;
  v6 = v4;
  quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(a2, a3, &v6);
  result = v6;
  v6 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1ADC6DCC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeDataFactory,std::allocator<quasar::LmeDataFactory>,std::string &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xAF0uLL);
  result = std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::LmeDataFactory>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC6DD28(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeDataFactory>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<quasar::LmeDataFactory>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42988;
  a1[1] = 0;
  std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string &>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADC6DD88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactory>::construct[abi:ne180100]<quasar::LmeDataFactory,std::string &>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[3];
  void **v4;

  memset(v3, 0, sizeof(v3));
  quasar::LmeDataFactory::LmeDataFactory(a2, a3, 1, 1, v3);
  v4 = (void **)v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
}

void sub_1ADC6DDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADC6DE3C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar25SpeakerCodeTrainingConfigENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D444A8;
  a1[1] = 0;
  quasar::SpeakerCodeTrainingConfig::SpeakerCodeTrainingConfig((quasar::SpeakerCodeTrainingConfig *)(a1 + 3));
  return a1;
}

void sub_1ADC6DE88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D444A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D444A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SpeakerCodeTrainingConfig>::__on_zero_shared(uint64_t a1)
{
  quasar::SpeakerCodeTrainingConfig::~SpeakerCodeTrainingConfig((void **)(a1 + 24));
}

quasar::SpeakerCodeTrainingConfig *quasar::SpeakerCodeTrainingConfig::SpeakerCodeTrainingConfig(quasar::SpeakerCodeTrainingConfig *this)
{
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_WORD *)this + 40) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 12, "Dictation");
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  return this;
}

void sub_1ADC6DF3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*(void **)(v1 + 24));
  std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void quasar::SpeakerCodeTrainingConfig::~SpeakerCodeTrainingConfig(void **this)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9MuxHelperENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9MuxHelperENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADC6DFEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar9MuxHelperENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45388;
  a1[1] = 0;
  quasar::MuxHelper::MuxHelper((quasar::MuxHelper *)(a1 + 3));
  return a1;
}

void sub_1ADC6E038(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MuxHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MuxHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::MuxHelper>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::MuxHelper>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

quasar::MuxHelper *quasar::MuxHelper::MuxHelper(quasar::MuxHelper *this)
{
  uint64_t v2;
  unsigned __int8 v4[24];
  _QWORD v5[3];
  _QWORD v6[3];
  _QWORD v7[3];
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[3];
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _QWORD v14[3];
  _QWORD v15[3];
  _QWORD v16[3];
  _QWORD v17[3];
  _QWORD v18[3];
  _QWORD v19[3];
  _QWORD v20[3];
  _QWORD v21[3];
  _QWORD v22[3];
  _QWORD v23[3];
  _QWORD v24[3];
  _QWORD v25[3];
  _QWORD v26[3];
  _QWORD v27[3];
  _QWORD v28[3];
  _QWORD v29[3];
  _QWORD v30[3];
  _QWORD v31[4];

  v31[3] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v4, "\\room-first");
  std::string::basic_string[abi:ne180100]<0>(v5, "\\room-middle");
  std::string::basic_string[abi:ne180100]<0>(v6, "\\room-last");
  std::string::basic_string[abi:ne180100]<0>(v7, "\\house-first");
  std::string::basic_string[abi:ne180100]<0>(v8, "\\house-middle");
  std::string::basic_string[abi:ne180100]<0>(v9, "\\house-last");
  std::string::basic_string[abi:ne180100]<0>(v10, "\\zone-first");
  std::string::basic_string[abi:ne180100]<0>(v11, "\\zone-middle");
  std::string::basic_string[abi:ne180100]<0>(v12, "\\zone-last");
  std::string::basic_string[abi:ne180100]<0>(v13, "\\group-first");
  std::string::basic_string[abi:ne180100]<0>(v14, "\\group-middle");
  std::string::basic_string[abi:ne180100]<0>(v15, "\\group-last");
  std::string::basic_string[abi:ne180100]<0>(v16, "\\device-first");
  std::string::basic_string[abi:ne180100]<0>(v17, "\\device-middle");
  std::string::basic_string[abi:ne180100]<0>(v18, "\\device-last");
  std::string::basic_string[abi:ne180100]<0>(v19, "\\scene-first");
  std::string::basic_string[abi:ne180100]<0>(v20, "\\scene-middle");
  std::string::basic_string[abi:ne180100]<0>(v21, "\\scene-last");
  std::string::basic_string[abi:ne180100]<0>(v22, "\\deviceNames-first");
  std::string::basic_string[abi:ne180100]<0>(v23, "\\accessory-first");
  std::string::basic_string[abi:ne180100]<0>(v24, "\\artist-first");
  std::string::basic_string[abi:ne180100]<0>(v25, "\\appMusicArtistName-first");
  std::string::basic_string[abi:ne180100]<0>(v26, "\\custom_words-first");
  std::string::basic_string[abi:ne180100]<0>(v27, "\\playlist-first");
  std::string::basic_string[abi:ne180100]<0>(v28, "\\podcastTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v29, "\\appPlaylistTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v30, "\\appAudiobookTitle-first");
  std::string::basic_string[abi:ne180100]<0>(v31, "\\appShowTitle-first");
  std::unordered_set<std::string>::unordered_set((uint64_t)this, v4, 28);
  v2 = 672;
  do
  {
    if ((char)v4[v2 - 1] < 0)
      operator delete(*(void **)&v4[v2 - 24]);
    v2 -= 24;
  }
  while (v2);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 5, "•|\\(|\\)|\"|\\[|\\]|\\{|\\}|®|,|;|\\?|\\!|\\\\");
  *((_QWORD *)this + 8) = 0;
  return this;
}

void sub_1ADC6E3C4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::MuxHelper>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a2);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::Timer,std::allocator<kaldi::Timer>,BOOL,BOOL,void>@<X0>(_BYTE *a1@<X1>, unsigned __int8 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<kaldi::Timer>::__shared_ptr_emplace[abi:ne180100]<BOOL,BOOL,std::allocator<kaldi::Timer>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADC6E4C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::Timer>::__shared_ptr_emplace[abi:ne180100]<BOOL,BOOL,std::allocator<kaldi::Timer>,0>(_QWORD *a1, _BYTE *a2, unsigned __int8 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D41BF8;
  a1[1] = 0;
  std::allocator<kaldi::Timer>::construct[abi:ne180100]<kaldi::Timer,BOOL,BOOL>((int)&v5, (kaldi::Timer *)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADC6E528(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::Timer>::construct[abi:ne180100]<kaldi::Timer,BOOL,BOOL>(int a1, kaldi::Timer *this, _BYTE *a3, unsigned __int8 *a4)
{
  int v5;

  v5 = *a4;
  *((_BYTE *)this + 24) = *a3;
  kaldi::Timer::Reset(this, (clockid_t)this);
  *((_QWORD *)this + 4) = 0;
  if (v5)
    *((_QWORD *)this + 4) = mach_absolute_time();
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xA0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADC6E5B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar26MultiChainMultiAudioBufferENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44588;
  a1[1] = 0;
  quasar::MultiChainMultiAudioBuffer::MultiChainMultiAudioBuffer((quasar::MultiChainMultiAudioBuffer *)(a1 + 3));
  return a1;
}

void sub_1ADC6E5FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44588;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44588;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::MultiChainMultiAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechRequestData,std::allocator<quasar::SpeechRequestData>,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X3>, _QWORD **a4@<X4>, _OWORD *a5@<X5>, uint64_t *a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>, char *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0xF8uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,std::allocator<quasar::SpeechRequestData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1ADC6E704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechRequestData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL,std::allocator<quasar::SpeechRequestData>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD **a5, _OWORD *a6, uint64_t *a7, char *a8, char *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = &unk_1E5D431A0;
  a1[1] = 0;
  std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1ADC6E784(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::SpeechRequestData>::construct[abi:ne180100]<quasar::SpeechRequestData,std::shared_ptr<quasar::RunAsyncParams> const&,std::shared_ptr<quasar::MultiChainMultiAudioBuffer> &,std::shared_ptr<quasar::MultiAudioBuffer>,std::vector<std::shared_ptr<quasar::LmeContainer>> const,quasar::Location &,std::shared_ptr<kaldi::Timer> &,BOOL &,BOOL>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD **a6, _OWORD *a7, uint64_t *a8, char *a9, char *a10)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v10 = (std::__shared_weak_count *)a8[1];
  v16 = *a8;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  quasar::SpeechRequestData::SpeechRequestData(a2, a3, a4, a5, a6, a7, &v16, *a9, *a10, 4uLL);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADC6E84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<quasar::SpeechRecognizer>::shared_ptr[abi:ne180100]<quasar::SpeechRecognizer,void>(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (!v3)
  {
    a1[1] = 0;
LABEL_5:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v4 = std::__shared_weak_count::lock(v3);
  a1[1] = v4;
  if (!v4)
    goto LABEL_5;
  return a1;
}

void std::__throw_bad_weak_ptr[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x1E0DE4F80] + 16;
  __cxa_throw(exception, MEMORY[0x1E0DE4E28], MEMORY[0x1E0DE43F0]);
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>(uint64_t *a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v1;
  const void *v2;
  const void **v4;

  v4 = (const void **)a1;
  v1 = std::__thread_local_data();
  v2 = *v4;
  *v4 = 0;
  pthread_setspecific(v1->__key_, v2);
  quasar::SpeechRecognizer::runSyncAndMarkEndOfRun((quasar::SpeechRecognizer *)v4[1]);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t **)&v4);
  return 0;
}

void sub_1ADC6E928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,quasar::SpeechRecognizer::runAsync(std::shared_ptr<quasar::RunAsyncParams> const&,void (*)(void *,void (*)(void *),void *),void *)::$_1>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v2 + 1));
    std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](v2, 0);
    MEMORY[0x1AF44D190](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x1AF44CD04]();
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  std::unique_lock<std::mutex> *v2;

  if (this->__owns_)
  {
    std::mutex::unlock(this->__m_);
    this->__owns_ = 0;
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    std::unique_lock<std::mutex>::lock(v2);
  }
}

void std::unique_lock<std::mutex>::lock(std::unique_lock<std::mutex> *this)
{
  std::mutex *m;
  kaldi::OnlineFeatInputItf **v3;
  _QWORD *v4;

  m = this->__m_;
  if (m)
  {
    if (!this->__owns_)
    {
      std::mutex::lock(m);
      this->__owns_ = 1;
      return;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::lock: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::lock: already locked");
  std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(v3, v4);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineBufferingInput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC6EAAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineBufferingInput>,0>(_QWORD *a1, kaldi::OnlineFeatInputItf **a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D418E8;
  kaldi::OnlineBufferingInput::OnlineBufferingInput((kaldi::OnlineBufferingInput *)(a1 + 3), *a2, 0);
  return a1;
}

void sub_1ADC6EB00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D418E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D418E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineBufferingInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,char const(&)[6],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::allocator<quasar::OnlineCacheInputFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC6EBB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<char const(&)[6],std::allocator<quasar::OnlineCacheInputFe>,0>(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D43280;
  a1[1] = 0;
  std::allocator<quasar::OnlineCacheInputFe>::construct[abi:ne180100]<quasar::OnlineCacheInputFe,char const(&)[6]>((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1ADC6EC10(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43280;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43280;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

void std::allocator<quasar::OnlineCacheInputFe>::construct[abi:ne180100]<quasar::OnlineCacheInputFe,char const(&)[6]>(int a1, uint64_t a2, char *__s)
{
  void *__p[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::OnlineCacheInputFe::OnlineCacheInputFe(a2, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1ADC6ECC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45628;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45628;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<std::queue<kaldi::CuMatrix<float>>>::__on_zero_shared(uint64_t a1)
{
  return std::deque<kaldi::CuMatrix<float>>::~deque[abi:ne180100]((_QWORD *)(a1 + 24));
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D459E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<unsigned int>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D459E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,void>@<X0>(_DWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x1B0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADC6EDD4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineFeatureMatrix>,0>(_QWORD *a1, _DWORD *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41878;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, 1);
  return a1;
}

void sub_1ADC6EE28(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41878;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41878;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix(uint64_t a1, _DWORD *a2, uint64_t a3, char a4)
{
  double v7;
  clockid_t v8;

  *(_QWORD *)a1 = &off_1E5D2A7E0;
  *(_DWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  kaldi::Matrix<float>::Matrix(a1 + 32);
  kaldi::Matrix<float>::Matrix(a1 + 72);
  v7 = kaldi::Matrix<float>::Matrix(a1 + 112);
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 156) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 168) = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a3 + 40))(a3, v7);
  *(_BYTE *)(a1 + 169) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
  *(_BYTE *)(a1 + 200) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 176), v8);
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 216) = a4;
  kaldi::Matrix<float>::Matrix(a1 + 224);
  kaldi::Matrix<float>::Matrix(a1 + 264);
  *(_QWORD *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  return a1;
}

void sub_1ADC6EF94(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  kaldi::Matrix<float>::~Matrix(v4);
  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Matrix<float>::~Matrix(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGenerator,std::allocator<quasar::SilencePosteriorGenerator>,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,void>@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,std::allocator<quasar::SilencePosteriorGenerator>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADC6F034(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &,std::allocator<quasar::SilencePosteriorGenerator>,0>(_QWORD *a1, __int128 *a2, uint64_t *a3, unsigned int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D44470;
  a1[1] = 0;
  std::allocator<quasar::SilencePosteriorGenerator>::construct[abi:ne180100]<quasar::SilencePosteriorGenerator,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &>((uint64_t)&v6, (uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1ADC6F09C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44470;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44470;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SilencePosteriorGenerator>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::SilencePosteriorGenerator>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::allocator<quasar::SilencePosteriorGenerator>::construct[abi:ne180100]<quasar::SilencePosteriorGenerator,std::shared_ptr<quasar::SilencePosteriorGeneratorConfig>,std::shared_ptr<quasar::RecogAudioBuffer> &,unsigned int &>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, unsigned int *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  __int128 v16;

  v16 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v5 = (std::__shared_weak_count *)a4[1];
  v14 = *a4;
  v15 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  quasar::SilencePosteriorGenerator::SilencePosteriorGenerator(a2, &v16, &v14, *a5, 0);
  v8 = v15;
  if (v15)
  {
    v9 = (unint64_t *)&v15->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1ADC6F1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::SilencePosteriorGenerator>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void **v6;

  v3 = (_QWORD *)(a2 + 72);
  v4 = *(_QWORD **)(a2 + 72);
  *v3 = 0;
  if (v4)
    std::default_delete<quasar::NFHatTransformer>::operator()[abi:ne180100]((uint64_t)v3, v4);
  v6 = (void **)(a2 + 48);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 32);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 16);
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ResultStreamStabilizer,std::allocator<quasar::ResultStreamStabilizer>,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,void>@<X0>(uint64_t a1@<X1>, unsigned int *a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, unsigned __int8 *a5@<X5>, unsigned __int8 *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x218uLL);
  result = std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,std::allocator<quasar::ResultStreamStabilizer>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1ADC6F2FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &,std::allocator<quasar::ResultStreamStabilizer>,0>(_QWORD *a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, unsigned __int8 *a6, unsigned __int8 *a7, uint64_t *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = &unk_1E5D43D70;
  a1[1] = 0;
  std::allocator<quasar::ResultStreamStabilizer>::construct[abi:ne180100]<quasar::ResultStreamStabilizer,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &>((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1ADC6F378(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ResultStreamStabilizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::ResultStreamStabilizer>::construct[abi:ne180100]<quasar::ResultStreamStabilizer,std::shared_ptr<quasar::RecogResultStreamBase> &,int &,int &,unsigned int &,BOOL &,BOOL &,std::shared_ptr<quasar::MuxHelper> &>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int *a5, unsigned int *a6, unsigned __int8 *a7, unsigned __int8 *a8, uint64_t *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v10 = *a4;
  v11 = *a5;
  v12 = *a6;
  v13 = *a7;
  v14 = *a8;
  v15 = (std::__shared_weak_count *)a9[1];
  v21 = *a9;
  v22 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, BOOL, BOOL, uint64_t *))quasar::ResultStreamStabilizer::ResultStreamStabilizer)(a2, a3, v10, v11, v12, v13 != 0, v14 != 0, &v21);
  v18 = v22;
  if (v22)
  {
    v19 = (unint64_t *)&v22->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1ADC6F498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4A8uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,std::allocator<quasar::DecoderChainOutput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADC6F4F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderChainOutput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &,std::allocator<quasar::DecoderChainOutput>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D43248;
  a1[1] = 0;
  std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADC6F55C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderChainOutput>::construct[abi:ne180100]<quasar::DecoderChainOutput,std::shared_ptr<quasar::SymbolTableList> &,std::shared_ptr<quasar::SpeechRequestResultData> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;

  v4 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = (std::__shared_weak_count *)a4[1];
  v16 = *a4;
  v17 = v7;
  if (v7)
  {
    v8 = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  quasar::DecoderChainOutput::DecoderChainOutput(a2, &v18, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADC6F650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar5PTreeENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x58uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar5PTreeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADC6F6A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar5PTreeENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44F28;
  a1[1] = 0;
  quasar::PTree::PTree((quasar::PTree *)(a1 + 3));
  return a1;
}

void sub_1ADC6F6EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PTree>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PTree>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::PTree>::__on_zero_shared(uint64_t a1)
{
  quasar::PTree::~PTree((quasar::PTree *)(a1 + 24));
}

char *std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>,std::__wrap_iter<std::shared_ptr<quasar::Decoder> const*>>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADC6F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = (_OWORD *)(a7 - 16);
    do
    {
      v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::weak_ptr<quasar::Decoder>>,std::reverse_iterator<std::weak_ptr<quasar::Decoder>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    v1 += 16;
  }
}

void **std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::weak_ptr<quasar::Decoder>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(_QWORD *)(a1 + 16);
  while (v1 != v2)
  {
    *(_QWORD *)(a1 + 16) = v1 - 16;
    v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v1 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

uint64_t std::vector<quasar::LmeInfo>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>,std::reverse_iterator<quasar::LmeInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 40);
      a3 -= 40;
      *(_DWORD *)(v7 - 32) = *(_DWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 40) = v8;
      v9 = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 32);
      *(_OWORD *)(v7 - 24) = v9;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::LmeInfo>,std::reverse_iterator<quasar::LmeInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 39) < 0)
      operator delete(*(void **)(v1 + 16));
    v1 += 40;
  }
}

uint64_t std::__split_buffer<quasar::LmeInfo>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::LmeInfo>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::LmeInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::set<std::string>>,std::set<std::string> const*,std::set<std::string> const*,std::set<std::string>*>(uint64_t a1, const void ***a2, const void ***a3, uint64_t *a4)
{
  uint64_t *v4;
  const void ***v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::set<std::string>::set[abi:ne180100](v4, v6);
      v6 += 3;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADC6FC94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<std::string>>,std::set<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::deque<quasar::SpeakerCodeTraining::AlignedData>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x27];
    v7 = (uint64_t)*v6 + 104 * (v5 % 0x27);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x27] + 104 * ((a1[5] + v5) % 0x27);
    if (v7 != v8)
    {
      do
      {
        kaldi::CuMatrix<float>::~CuMatrix(v7 + 48);
        kaldi::CuMatrix<float>::~CuMatrix(v7);
        v7 += 104;
        if (v7 - (_QWORD)*v6 == 4056)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 19;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 39;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::deque<quasar::SpeakerCodeTraining::AlignedData>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x27;
  v4 = v2 - 39;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFD8uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFD8uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFD8uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADC700C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::SpeakerCodeTraining::AlignedData>::construct[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  kaldi::CuMatrix<float>::CuMatrix(a2, a3, 111);
  result = kaldi::CuMatrix<float>::CuMatrix(a2 + 48, a3 + 48, 111);
  *(_BYTE *)(a2 + 96) = *(_BYTE *)(a3 + 96);
  return result;
}

void sub_1ADC7015C(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::pop_front(int64x2_t *a1)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x55uLL)) + 48 * (a1[2].i64[0] % 0x55uLL);
  (*(void (**)(unint64_t))(*(_QWORD *)v2 + 16))(v2);
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<kaldi::CuMatrix<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x55)
    a2 = 1;
  if (v2 < 0xAA)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 85;
  }
  return v4 ^ 1u;
}

uint64_t std::swap[abi:ne180100]<quasar::SpeakerCodeTraining::AlignedData>(int32x2_t *a1, int32x2_t *a2)
{
  int32x2_t v5[6];
  int32x2_t v6[6];
  __int8 v7;

  kaldi::CuMatrix<float>::CuMatrix(v5, a1, 111);
  kaldi::CuMatrix<float>::CuMatrix(v6, &a1[6], 111);
  v7 = a1[12].i8[0];
  kaldi::CuMatrix<float>::operator=(a1, a2);
  kaldi::CuMatrix<float>::operator=(a1 + 6, a2 + 6);
  a1[12].i8[0] = a2[12].i8[0];
  kaldi::CuMatrix<float>::operator=(a2, v5);
  kaldi::CuMatrix<float>::operator=(a2 + 6, v6);
  a2[12].i8[0] = v7;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v5);
}

void sub_1ADC702FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__deque_iterator<quasar::SpeakerCodeTraining::AlignedData,quasar::SpeakerCodeTraining::AlignedData*,quasar::SpeakerCodeTraining::AlignedData&,quasar::SpeakerCodeTraining::AlignedData**,long,39l>::operator+=[abi:ne180100](_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 + 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 38 - v3;
      v6 = &v2[-(v5 / 0x27)];
      *result = v6;
      v4 = *v6 + 104 * (39 * (v5 / 0x27) - v5) + 3952;
    }
    else
    {
      *result = &v2[v3 / 0x27];
      v4 = v2[v3 / 0x27] + 104 * (v3 % 0x27);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t *std::vector<std::pair<int,BOOL>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::pair<int,BOOL> const*>,std::__wrap_iter<std::pair<int,BOOL> const*>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void *__p;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;

  v5 = a2;
  if (a5 < 1)
    return v5;
  v7 = a3;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(uint64_t **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = a2 - v13;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v41 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    else
      v18 = 0;
    v32 = &v18[8 * v15];
    __p = v18;
    v38 = v32;
    v40 = &v18[8 * v17];
    v33 = 8 * a5;
    v34 = &v32[8 * a5];
    do
    {
      v35 = *v7++;
      *(_QWORD *)v32 = v35;
      v32 += 8;
      v33 -= 8;
    }
    while (v33);
    v39 = v34;
    v5 = std::vector<std::pair<int,int>>::__swap_out_circular_buffer((uint64_t **)a1, &__p, v5);
    if (v39 != v38)
      v39 += (v38 - v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = (uint64_t)(v12 - (_QWORD)a2) >> 3;
  if (v19 >= a5)
  {
    v20 = &a3[a5];
    v21 = *(_QWORD **)(v9 - 8);
LABEL_18:
    v25 = &a2[a5];
    v26 = &v21[-a5];
    v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      v27 = v21;
      do
      {
        v28 = *v26++;
        *v27++ = v28;
      }
      while ((unint64_t)v26 < v12);
    }
    *(_QWORD *)(a1 + 8) = v27;
    if (v21 != v25)
    {
      v29 = (char *)v21 - 4;
      v30 = v21 - v25;
      do
      {
        *((_DWORD *)v29 - 1) = a2[v30 - 1];
        *v29 = BYTE4(a2[v30 - 1]);
        v29 -= 8;
        --v30;
      }
      while (v30 * 8);
    }
    if (v20 != a3)
    {
      v31 = a2;
      do
      {
        *(_DWORD *)v31 = *(_DWORD *)v7;
        *((_BYTE *)v31++ + 4) = *((_BYTE *)v7++ + 4);
      }
      while (v7 != v20);
    }
    return v5;
  }
  v20 = &a3[v19];
  v21 = *(_QWORD **)(v9 - 8);
  if (v20 != a4)
  {
    v22 = v20;
    v23 = *(_QWORD **)(v9 - 8);
    do
    {
      v24 = *v22++;
      *v23++ = v24;
      ++v21;
    }
    while (v22 != a4);
  }
  *(_QWORD *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (_QWORD)a2) >= 1)
    goto LABEL_18;
  return v5;
}

void sub_1ADC705EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADC708A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC70910(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  quasar::LmeDataFactoryBase::PronSet::PronSet(this[1].__r_.__value_.__r.__words);
  return this;
}

void sub_1ADC7097C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string &,double>(uint64_t *a1, int *a2, uint64_t a3, double *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADC70AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string &,double>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, double *a5)
{
  int v7;
  float v8;
  std::string *v9;
  int v10;
  std::string __p;

  v7 = *a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    __p = *(std::string *)a4;
  v8 = *a5;
  *(_DWORD *)a2 = v7;
  v9 = (std::string *)(a2 + 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    v10 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    *(float *)(a2 + 32) = v8;
    if (v10 < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a2 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    *(float *)(a2 + 32) = v8;
  }
}

void sub_1ADC70BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::LmeDataFactoryBase::Word>::__emplace_back_slow_path<std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>(uint64_t *a1, uint64_t a2, char **a3, unsigned int *a4, uint64_t a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::LmeDataFactoryBase::Word>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer(&v16);
  return v14;
}

void sub_1ADC70CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::LmeDataFactoryBase::Word>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeDataFactoryBase::Word>::construct[abi:ne180100]<quasar::LmeDataFactoryBase::Word,std::string const&,char const*&,int,quasar::LmeDataFactoryBase::PronSet &>(uint64_t a1, uint64_t a2, uint64_t a3, char **a4, unsigned int *a5, uint64_t a6)
{
  void *__p[2];
  char v11;
  std::string v12;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v12 = *(std::string *)a3;
  std::string::basic_string[abi:ne180100]<0>(__p, *a4);
  quasar::LmeDataFactoryBase::Word::Word(a2, &v12, __p, *a5, a6);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_1ADC70DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[2];
  char v13;
  uint64_t v14;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 8) = 0;
    *((_QWORD *)v7 + 9) = 0;
    *((_QWORD *)v7 + 7) = 0;
    v13 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<std::vector<quasar::LmeDataFactoryBase::Word>>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12, 0);
  }
  return v7;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmeContainer,std::allocator<quasar::LmeContainer>,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,void>@<X0>(uint64_t *a1@<X1>, char *a2@<X2>, unsigned int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADC70EF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmeContainer>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType,std::allocator<quasar::LmeContainer>,0>(_QWORD *a1, uint64_t *a2, char *__s, unsigned int *a4)
{
  char v6;

  a1[2] = 0;
  *a1 = &unk_1E5D426B0;
  a1[1] = 0;
  std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType>((int)&v6, (uint64_t)(a1 + 3), a2, __s, a4);
  return a1;
}

void sub_1ADC70F60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::LmeContainer>::construct[abi:ne180100]<quasar::LmeContainer,std::shared_ptr<quasar::LmeData> &,char const(&)[1],quasar::LmeDataFactoryBase::LmeType>(int a1, uint64_t a2, uint64_t *a3, char *__s, unsigned int *a5)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v7 = (std::__shared_weak_count *)a3[1];
  v15 = *a3;
  v16 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  quasar::LmeContainer::LmeContainer(a2, &v15, __p, *a5);
  if (v14 < 0)
    operator delete(__p[0]);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1ADC71024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

__int128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      quasar::Token::operator=(a3, v4);
      v4 += 14;
      a3 += 224;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t std::unordered_map<std::string,quasar::LmeDataFactoryBase::PronSet>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(a1, i + 16, (__int128 *)i + 1);
  return a1;
}

void sub_1ADC71154(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)v25, 0);
  return i;
}

void sub_1ADC713D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__construct_node_hash<std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100]((std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC71448(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,quasar::LmeDataFactoryBase::PronSet>::pair[abi:ne180100](std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  std::map<std::pair<quasar::PronType,std::string>,float>::map[abi:ne180100]((uint64_t *)&this[1], (uint64_t)a2 + 24);
  return this;
}

void sub_1ADC714B8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token const*,quasar::Token const*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a4)
  {
    std::vector<quasar::Token>::__vdeallocate((void **)a1);
    if (a4 > 0x124924924924924)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5);
    if (v10 <= a4)
      v10 = a4;
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)) >= 0x92492492492492)
      v11 = 0x124924924924924;
    else
      v11 = v10;
    std::vector<quasar::Token>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5) < a4)
  {
    v13 = a2 + 32 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 5);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      quasar::Token::~Token((void **)(v16 - 224));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADC7164C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADC71654(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,quasar::LmeDataFactoryBase::PronSet>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

uint64_t quasar::SessionData::SessionData(uint64_t a1, uint64_t a2, unsigned __int8 **a3, std::string *a4, uint64_t a5, uint64_t a6, std::string *a7, std::string *a8, std::string *__str, uint64_t a10, uint64_t a11, uint64_t *a12, _DWORD *a13)
{
  int64x2_t *v21;
  _QWORD *v22;
  uint64_t *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  _OWORD *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  char *v50;
  __int128 v51;
  int64x2_t v52;
  _OWORD *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  __int128 v62;
  unint64_t v63;
  _OWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  _QWORD *v73;
  _QWORD *v74;
  char *v75;
  __int128 v76;
  int64x2_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  uint64_t v107;
  kaldi::OnlineFeatureMatrix **v108;
  uint64_t v109;
  __int128 v110;
  kaldi::OnlineFeatInputItf *v111;
  __int128 v112;
  uint64_t v113;
  std::__shared_weak_count *v114;
  __int128 v115;
  __int128 v116[8];
  __int128 v117;
  __int128 __p;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  unsigned int v126;
  void **v127;
  int64x2_t v128;
  uint64_t v129;
  uint64_t v130;

  v126 = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  v109 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  v21 = (int64x2_t *)(a1 + 32);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  v107 = a1 + 72;
  v108 = (kaldi::OnlineFeatureMatrix **)(a1 + 56);
  v22 = operator new(0x30uLL);
  v23 = a12;
  v22[2] = 0;
  *v22 = &unk_1E5D42D78;
  v22[1] = 0;
  v22[4] = 0;
  v22[5] = 0;
  v22[3] = 0;
  *(_QWORD *)(a1 + 88) = v22 + 3;
  *(_QWORD *)(a1 + 96) = v22;
  quasar::RecognizerComponents<quasar::SyncDecoder>::lookupRecognizerComponents(__str, a2, a3, a4, a5, a6, a7, a8, v116, v23);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v109, v116);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v116[0] + 1);
  if (*((_QWORD *)&v116[0] + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (!*(_QWORD *)v109)
  {
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    __p = 0u;
    v119 = 0u;
    v117 = 0u;
    memset(v116, 0, sizeof(v116));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)"Invalid recognition request parameters", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v116);
  }
  LOBYTE(v115) = 0;
  std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int const&,int const&,int const&,BOOL,void>(&v126, (int *)&a11, (int *)&a11, (BOOL *)&v115, v116);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1, v116);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v116[0] + 1);
  if (*((_QWORD *)&v116[0] + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  LODWORD(v116[0]) = v126;
  *((_QWORD *)&v116[0] + 1) = 0;
  LOBYTE(v116[1]) = 0;
  DWORD1(v116[7]) = 0;
  BYTE8(v116[7]) = 0;
  memset((char *)&v116[1] + 8, 0, 89);
  v117 = 0u;
  __p = 0u;
  *(_QWORD *)&v119 = 0;
  BYTE8(v119) = 1;
  v30 = *(uint64_t **)(*(_QWORD *)v109 + 40);
  v31 = *(uint64_t **)(*(_QWORD *)v109 + 48);
  while (v30 != v31)
  {
    v32 = *v30;
    v33 = *(_QWORD *)a1;
    v35 = *(_QWORD *)(a1 + 32);
    v34 = *(_QWORD *)(a1 + 40);
    if (v34 == v35)
    {
      v113 = 0;
      v114 = 0;
    }
    else
    {
      v113 = *(_QWORD *)(v34 - 16);
      v36 = *(std::__shared_weak_count **)(v34 - 8);
      v114 = v36;
      if (v36)
      {
        p_shared_owners = (unint64_t *)&v36->__shared_owners_;
        do
          v38 = __ldxr(p_shared_owners);
        while (__stxr(v38 + 1, p_shared_owners));
      }
    }
    quasar::FeatureExtractor::createOnlineFeInput(v32, v33, &v113);
    v39 = *(_OWORD **)(a1 + 40);
    v40 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v39 >= v40)
    {
      v41 = ((uint64_t)v39 - v21->i64[0]) >> 4;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v43 = v40 - v21->i64[0];
      if (v43 >> 3 > v42)
        v42 = v43 >> 3;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0)
        v44 = 0xFFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      v130 = a1 + 48;
      v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 48, v44);
      v47 = &v45[16 * v41];
      *(_OWORD *)v47 = v115;
      v115 = 0uLL;
      v49 = *(_QWORD **)(a1 + 32);
      v48 = *(_QWORD **)(a1 + 40);
      if (v48 == v49)
      {
        v52 = vdupq_n_s64((unint64_t)v48);
        v50 = &v45[16 * v41];
      }
      else
      {
        v50 = &v45[16 * v41];
        do
        {
          v51 = *((_OWORD *)v48 - 1);
          v48 -= 2;
          *((_OWORD *)v50 - 1) = v51;
          v50 -= 16;
          *v48 = 0;
          v48[1] = 0;
        }
        while (v48 != v49);
        v52 = *v21;
      }
      v53 = v47 + 16;
      *(_QWORD *)(a1 + 32) = v50;
      *(_QWORD *)(a1 + 40) = v47 + 16;
      v128 = v52;
      v54 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 48) = &v45[16 * v46];
      v129 = v54;
      v127 = (void **)v52.i64[0];
      std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v127);
      v55 = (std::__shared_weak_count *)*((_QWORD *)&v115 + 1);
      *(_QWORD *)(a1 + 40) = v53;
      if (v55)
      {
        v56 = (unint64_t *)&v55->__shared_owners_;
        do
          v57 = __ldaxr(v56);
        while (__stlxr(v57 - 1, v56));
        if (!v57)
        {
          ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
          std::__shared_weak_count::__release_weak(v55);
        }
      }
    }
    else
    {
      *v39 = v115;
      v115 = 0uLL;
      *(_QWORD *)(a1 + 40) = v39 + 1;
    }
    v58 = v114;
    if (v34 == v35)
    {
      if (v114)
      {
        v61 = (unint64_t *)&v114->__shared_owners_;
        do
          v60 = __ldaxr(v61);
        while (__stlxr(v60 - 1, v61));
LABEL_45:
        if (!v60)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
    }
    else if (v114)
    {
      v59 = (unint64_t *)&v114->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      goto LABEL_45;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*v30 + 16))(*v30))
    {
      v111 = *(kaldi::OnlineFeatInputItf **)(*(_QWORD *)(a1 + 40) - 16);
      std::allocate_shared[abi:ne180100]<kaldi::OnlineBufferingInput,std::allocator<kaldi::OnlineBufferingInput>,kaldi::OnlineFeatInputItf *,void>(&v111, &v112);
      v62 = v112;
      v115 = v112;
      v112 = 0uLL;
      v64 = *(_OWORD **)(a1 + 40);
      v63 = *(_QWORD *)(a1 + 48);
      if ((unint64_t)v64 >= v63)
      {
        v110 = v62;
        v66 = ((uint64_t)v64 - v21->i64[0]) >> 4;
        if ((unint64_t)(v66 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v67 = v63 - v21->i64[0];
        v68 = v67 >> 3;
        if (v67 >> 3 <= (unint64_t)(v66 + 1))
          v68 = v66 + 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF0)
          v69 = 0xFFFFFFFFFFFFFFFLL;
        else
          v69 = v68;
        v130 = a1 + 48;
        v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 48, v69);
        v72 = &v70[16 * v66];
        *(_OWORD *)v72 = v110;
        v115 = 0uLL;
        v74 = *(_QWORD **)(a1 + 32);
        v73 = *(_QWORD **)(a1 + 40);
        if (v73 == v74)
        {
          v77 = vdupq_n_s64((unint64_t)v73);
          v75 = &v70[16 * v66];
        }
        else
        {
          v75 = &v70[16 * v66];
          do
          {
            v76 = *((_OWORD *)v73 - 1);
            v73 -= 2;
            *((_OWORD *)v75 - 1) = v76;
            v75 -= 16;
            *v73 = 0;
            v73[1] = 0;
          }
          while (v73 != v74);
          v77 = *v21;
        }
        v65 = v72 + 16;
        *(_QWORD *)(a1 + 32) = v75;
        *(_QWORD *)(a1 + 40) = v72 + 16;
        v128 = v77;
        v78 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)(a1 + 48) = &v70[16 * v71];
        v129 = v78;
        v127 = (void **)v77.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v127);
      }
      else
      {
        *v64 = v62;
        v65 = v64 + 1;
        v115 = 0uLL;
      }
      *(_QWORD *)(a1 + 40) = v65;
      v79 = (std::__shared_weak_count *)*((_QWORD *)&v112 + 1);
      if (*((_QWORD *)&v112 + 1))
      {
        v80 = (unint64_t *)(*((_QWORD *)&v112 + 1) + 8);
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (!v81)
        {
          ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
          std::__shared_weak_count::__release_weak(v79);
        }
      }
    }
    v30 += 2;
  }
  *(_QWORD *)&v115 = *(_QWORD *)(*(_QWORD *)(a1 + 40) - 16);
  LOBYTE(v111) = 0;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,void>(a13, (uint64_t *)&v115, (char *)&v111, &v127);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v108, (__int128 *)&v127);
  v82 = (std::__shared_weak_count *)v128.i64[0];
  if (v128.i64[0])
  {
    v83 = (unint64_t *)(v128.i64[0] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  quasar::Decodable::createDecodable((uint64_t *)&v127, *(quasar::Decodable **)(*(_QWORD *)v109 + 64), *v108);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v107, (__int128 *)&v127);
  v85 = (std::__shared_weak_count *)v128.i64[0];
  if (v128.i64[0])
  {
    v86 = (unint64_t *)(v128.i64[0] + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SBYTE7(v119) < 0)
    operator delete((void *)__p);
  v88 = (std::__shared_weak_count *)*((_QWORD *)&v117 + 1);
  if (*((_QWORD *)&v117 + 1))
  {
    v89 = (unint64_t *)(*((_QWORD *)&v117 + 1) + 8);
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v116[6] + 1);
  if (*((_QWORD *)&v116[6] + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v116[6] + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v127 = (void **)&v116[4] + 1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v127);
  v94 = *(std::__shared_weak_count **)&v116[4];
  if (*(_QWORD *)&v116[4])
  {
    v95 = (unint64_t *)(*(_QWORD *)&v116[4] + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  v97 = *(std::__shared_weak_count **)&v116[3];
  if (*(_QWORD *)&v116[3])
  {
    v98 = (unint64_t *)(*(_QWORD *)&v116[3] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = *(std::__shared_weak_count **)&v116[2];
  if (*(_QWORD *)&v116[2])
  {
    v101 = (unint64_t *)(*(_QWORD *)&v116[2] + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = *((_QWORD *)&v116[0] + 1);
  if (*((_QWORD *)&v116[0] + 1))
  {
    v104 = (unint64_t *)(*((_QWORD *)&v116[0] + 1) + 8);
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
      (*(void (**)(uint64_t))(*(_QWORD *)v103 + 16))(v103);
  }
  return a1;
}

{
  return quasar::SessionData::SessionData(a1, a2, a3, a4, a5, a6, a7, a8, __str, a10, a11, a12, a13);
}

void sub_1ADC71E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 88);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a4);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42D78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SyncRecogResult>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SyncRecogAudioBuffer,std::allocator<quasar::SyncRecogAudioBuffer>,unsigned int const&,int const&,int const&,BOOL,void>@<X0>(unsigned int *a1@<X1>, int *a2@<X2>, int *a3@<X3>, BOOL *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int const&,int const&,BOOL,std::allocator<quasar::SyncRecogAudioBuffer>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADC72010(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__shared_ptr_emplace[abi:ne180100]<unsigned int const&,int const&,int const&,BOOL,std::allocator<quasar::SyncRecogAudioBuffer>,0>(_QWORD *a1, unsigned int *a2, int *a3, int *a4, BOOL *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D438D8;
  a1[1] = 0;
  quasar::SyncRecogAudioBuffer::SyncRecogAudioBuffer((quasar::SyncRecogAudioBuffer *)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_1ADC7206C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D438D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D438D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SyncRecogAudioBuffer>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 24))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeatureMatrix,std::allocator<kaldi::OnlineFeatureMatrix>,kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,void>@<X0>(_DWORD *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x1B0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADC72134(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeatureMatrix>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatureMatrixOptions const&,kaldi::OnlineFeatInputItf *,BOOL,std::allocator<kaldi::OnlineFeatureMatrix>,0>(_QWORD *a1, _DWORD *a2, uint64_t *a3, char *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41878;
  a1[1] = 0;
  kaldi::OnlineFeatureMatrix::OnlineFeatureMatrix((uint64_t)(a1 + 3), a2, *a3, *a4);
  return a1;
}

void sub_1ADC72188(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetworkArc<std::string>::AddElement(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  char *v20;
  _DWORD *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  int v31;

  v4 = (uint64_t *)(a1 + 8);
  v5 = *((_QWORD *)a1 + 2);
  if (v5 >= *((_QWORD *)a1 + 3))
  {
    v6 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__push_back_slow_path<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(v4, (__int128 *)a2);
  }
  else
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__construct_one_at_end[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>((uint64_t)v4, (__int128 *)a2);
    v6 = v5 + 40;
  }
  v7 = *((_QWORD *)a1 + 6);
  *((_QWORD *)a1 + 2) = v6;
  v8 = (char *)*((_QWORD *)a1 + 5);
  if ((unint64_t)v8 >= v7)
  {
    v10 = (char *)*((_QWORD *)a1 + 4);
    v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      goto LABEL_39;
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 48), v14);
      v10 = (char *)*((_QWORD *)a1 + 4);
      v8 = (char *)*((_QWORD *)a1 + 5);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = *(_DWORD *)(a2 + 24);
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *((_QWORD *)a1 + 4) = v16;
    *((_QWORD *)a1 + 5) = v9;
    *((_QWORD *)a1 + 6) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(a2 + 24);
    v9 = v8 + 4;
  }
  v19 = *((_QWORD *)a1 + 9);
  *((_QWORD *)a1 + 5) = v9;
  v20 = (char *)*((_QWORD *)a1 + 8);
  if ((unint64_t)v20 < v19)
  {
    *(_DWORD *)v20 = *(_DWORD *)(a2 + 28);
    v21 = v20 + 4;
    goto LABEL_36;
  }
  v22 = (char *)*((_QWORD *)a1 + 7);
  v23 = (v20 - v22) >> 2;
  if ((unint64_t)(v23 + 1) >> 62)
LABEL_39:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v24 = v19 - (_QWORD)v22;
  v25 = (uint64_t)(v19 - (_QWORD)v22) >> 1;
  if (v25 <= v23 + 1)
    v25 = v23 + 1;
  if (v24 >= 0x7FFFFFFFFFFFFFFCLL)
    v26 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v26 = v25;
  if (v26)
  {
    v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 72), v26);
    v22 = (char *)*((_QWORD *)a1 + 7);
    v20 = (char *)*((_QWORD *)a1 + 8);
  }
  else
  {
    v27 = 0;
  }
  v28 = &v27[4 * v23];
  v29 = &v27[4 * v26];
  *(_DWORD *)v28 = *(_DWORD *)(a2 + 28);
  v21 = v28 + 4;
  while (v20 != v22)
  {
    v30 = *((_DWORD *)v20 - 1);
    v20 -= 4;
    *((_DWORD *)v28 - 1) = v30;
    v28 -= 4;
  }
  *((_QWORD *)a1 + 7) = v28;
  *((_QWORD *)a1 + 8) = v21;
  *((_QWORD *)a1 + 9) = v29;
  if (v22)
    operator delete(v22);
LABEL_36:
  *((_QWORD *)a1 + 8) = v21;
  if (!(*a1 | *(unsigned __int8 *)(a2 + 37)))
  {
    std::function<float ()(float,float)>::operator()((uint64_t)(a1 + 80), *((float *)a1 + 1), *(float *)(a2 + 32));
    *((_DWORD *)a1 + 1) = v31;
  }
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1)
{
  *(_WORD *)a1 = 256;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  MEMORY[0x1AF44C914](a1 + 88, "<eps>");
  return a1;
}

void sub_1ADC72410(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void **v5;
  _QWORD *v7;
  uint64_t v8;

  v7 = *(_QWORD **)(v2 + 168);
  if (v7 == (_QWORD *)(v2 + 144))
  {
    v8 = 4;
    v7 = (_QWORD *)(v2 + 144);
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(v5, v2, v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v3);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_WORD *)a1 = 256;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  v5 = a1 + 88;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_BYTE *)(a1 + 136) = 0;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 144, a3);
  MEMORY[0x1AF44C914](v5, "<eps>");
  *(_BYTE *)(a1 + 1) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *a2;
    while (!*(_BYTE *)(v8 + 37))
    {
      v8 += 40;
      if (v8 == v7)
        goto LABEL_7;
    }
    *(_BYTE *)(a1 + 1) = 1;
LABEL_7:
    if (v6 != v7)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(a1, v6 + v9);
        ++v10;
        v6 = *a2;
        v9 += 40;
      }
      while (0xCCCCCCCCCCCCCCCDLL * ((a2[1] - *a2) >> 3) > v10);
    }
  }
  return a1;
}

void sub_1ADC7258C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  _QWORD *v5;
  _QWORD *v7;
  uint64_t v8;
  void *v9;

  v7 = *(_QWORD **)(v3 + 168);
  if (v7 == v5)
  {
    v8 = 4;
    v7 = v5;
  }
  else
  {
    if (!v7)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *(void **)(v3 + 112);
  if (v9)
  {
    *(_QWORD *)(v3 + 120) = v9;
    operator delete(v9);
  }
  if (*(char *)(v3 + 111) < 0)
    operator delete(*v4);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(v2);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  std::string __p;
  std::string *p_p;

  kaldi::quasar::ConfusionNetworkSlot<std::string>::GetKey(a1, a2, &__p);
  p_p = &__p;
  v4 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p);
  kaldi::quasar::ConfusionNetworkArc<std::string>::AddElement(v4 + 40, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADC72678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetKey(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  std::string *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  std::string __p;
  std::string *v24;
  _BYTE v25[80];
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 1) = (*(unsigned __int8 *)(a1 + 1) | *(unsigned __int8 *)(a2 + 37)) != 0;
  v6 = *(unsigned __int8 *)(a2 + 36);
  *(_BYTE *)a1 |= v6;
  if (v6)
  {
    if (*(char *)(a1 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 88);
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 104);
    }
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      __p = *(std::string *)a2;
    v7 = *(_QWORD *)(a1 + 168);
    if (!v7)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 48))(v7, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*(_BYTE *)(a2 + 36))
    goto LABEL_29;
  v8 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  if ((v8 & 0x80u) == 0)
    size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
  else
    size = a3->__r_.__value_.__l.__size_;
  v10 = *(unsigned __int8 *)(a1 + 111);
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 96);
  if (size != v10)
    goto LABEL_29;
  if (v11 >= 0)
    v12 = (unsigned __int8 *)(a1 + 88);
  else
    v12 = *(unsigned __int8 **)(a1 + 88);
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(a3->__r_.__value_.__l.__data_, v12, a3->__r_.__value_.__l.__size_))
      goto LABEL_29;
    goto LABEL_28;
  }
  if (!*((_BYTE *)&a3->__r_.__value_.__s + 23))
  {
LABEL_28:
    kaldi::quasar::ConfusionNetworkSlot<std::string>::ModifyEpsArcKey(a1);
    goto LABEL_29;
  }
  v13 = a3;
  while (v13->__r_.__value_.__s.__data_[0] == *v12)
  {
    v13 = (std::string *)((char *)v13 + 1);
    ++v12;
    if (!--v8)
      goto LABEL_28;
  }
LABEL_29:
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)a3))
  {
    goto LABEL_30;
  }
  v25[0] = 0;
  v17 = v26;
  memset(&v25[4], 0, 76);
  v26[0] = &unk_1E5D3CE88;
  v27 = v26;
  v24 = a3;
  v18 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&v24);
  *((_QWORD *)v18 + 5) = *(_QWORD *)v25;
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)v18 + 6);
  *((_OWORD *)v18 + 3) = *(_OWORD *)&v25[8];
  *((_QWORD *)v18 + 8) = *(_QWORD *)&v25[24];
  memset(&v25[8], 0, 24);
  v19 = (void *)*((_QWORD *)v18 + 9);
  if (v19)
  {
    *((_QWORD *)v18 + 10) = v19;
    operator delete(v19);
    *((_QWORD *)v18 + 9) = 0;
    *((_QWORD *)v18 + 10) = 0;
    *((_QWORD *)v18 + 11) = 0;
  }
  v20 = (void *)*((_QWORD *)v18 + 12);
  *(_OWORD *)(v18 + 72) = *(_OWORD *)&v25[32];
  *((_QWORD *)v18 + 11) = *(_QWORD *)&v25[48];
  memset(&v25[32], 0, 24);
  if (v20)
  {
    *((_QWORD *)v18 + 13) = v20;
    operator delete(v20);
    *((_QWORD *)v18 + 12) = 0;
    *((_QWORD *)v18 + 13) = 0;
    *((_QWORD *)v18 + 14) = 0;
  }
  *((_OWORD *)v18 + 6) = *(_OWORD *)&v25[56];
  *((_QWORD *)v18 + 14) = *(_QWORD *)&v25[72];
  memset(&v25[56], 0, 24);
  std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100]((_QWORD *)v18 + 15, (uint64_t)v26);
  if (v27 == v26)
  {
    v21 = 4;
  }
  else
  {
    if (!v27)
      goto LABEL_50;
    v21 = 5;
    v17 = v27;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v21))(v17);
LABEL_50:
  if (*(_QWORD *)&v25[56])
  {
    *(_QWORD *)&v25[64] = *(_QWORD *)&v25[56];
    operator delete(*(void **)&v25[56]);
  }
  if (*(_QWORD *)&v25[32])
  {
    *(_QWORD *)&v25[40] = *(_QWORD *)&v25[32];
    operator delete(*(void **)&v25[32]);
  }
  v24 = (std::string *)&v25[8];
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (!*(_BYTE *)(a2 + 36))
  {
    *(_QWORD *)v25 = a3;
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v25);
    std::string::operator=((std::string *)(v22 + 40), (const std::string *)a2);
LABEL_30:
    if (!*(_BYTE *)(a2 + 36))
    {
      kaldi::quasar::ConfusionNetworkSlot<std::string>::GetLabel((_QWORD *)a1, a2, (std::string *)v25);
      if (v25[23] >= 0)
        v14 = v25[23];
      else
        v14 = *(_QWORD *)&v25[8];
      if (*(char *)(a2 + 23) >= 0)
        v15 = *(unsigned __int8 *)(a2 + 23);
      else
        v15 = *(_QWORD *)(a2 + 8);
      if ((v25[23] & 0x80000000) != 0)
        operator delete(*(void **)v25);
      if (v14 < v15)
      {
        *(_QWORD *)v25 = a3;
        v16 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 48, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)v25);
        std::string::operator=((std::string *)(v16 + 40), (const std::string *)a2);
      }
    }
  }
}

void sub_1ADC72A7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

BOOL kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  std::string v6;
  void *__p[2];
  char v8;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v3 = *(_QWORD *)(a1 + 168);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v3 + 48))(__p, v3, &v6);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return v4 != 0;
}

void sub_1ADC72B88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetLabel(_QWORD *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v5;
  unsigned __int8 *v6;
  __int128 v7;
  std::string __p;
  void *v9[2];
  char v10;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v5 = a1[21];
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v5 + 48))(v9, v5, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 1, (unsigned __int8 *)v9))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 6, (unsigned __int8 *)v9);
    if (!v6)
      std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
    if ((char)v6[63] < 0)
    {
      std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v6 + 5), *((_QWORD *)v6 + 6));
    }
    else
    {
      v7 = *(_OWORD *)(v6 + 40);
      a3->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 7);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
  if (v10 < 0)
    operator delete(v9[0]);
}

void sub_1ADC72CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTopWeights(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>)
{
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  char *v13;
  int v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  int v23;
  float *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float *v28;
  unint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  int64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  unint64_t v43;
  float *v44;
  float v45;
  int v46;
  char *__p;
  char *v48;
  char *v49;
  float v50;
  char v51;

  v50 = a4;
  std::vector<float>::vector(a3, a2, &v50);
  if (*(_BYTE *)(a1 + 136))
  {
    v7 = *(uint64_t **)(a1 + 112);
    if ((uint64_t)(*(_QWORD *)(a1 + 120) - (_QWORD)v7) >> 3 >= a2)
      v8 = a2;
    else
      v8 = (uint64_t)(*(_QWORD *)(a1 + 120) - (_QWORD)v7) >> 3;
    if (v8)
    {
      v9 = (_DWORD *)*a3;
      v10 = 8 * v8;
      do
      {
        v11 = *v7++;
        *v9++ = *(_DWORD *)(v11 + 28);
        v10 -= 8;
      }
      while (v10);
    }
    return;
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  v12 = *(uint64_t **)(a1 + 24);
  if (v12)
  {
    v13 = 0;
    do
    {
      v14 = *((_DWORD *)v12 + 11);
      if (v13 >= v49)
      {
        v15 = __p;
        v16 = (v13 - __p) >> 2;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v18 = v49 - __p;
        if ((v49 - __p) >> 1 > v17)
          v17 = v18 >> 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
          v19 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v19);
          v15 = __p;
          v13 = v48;
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[4 * v16];
        *(_DWORD *)v21 = v14;
        v22 = v21 + 4;
        while (v13 != v15)
        {
          v23 = *((_DWORD *)v13 - 1);
          v13 -= 4;
          *((_DWORD *)v21 - 1) = v23;
          v21 -= 4;
        }
        __p = v21;
        v49 = &v20[4 * v19];
        if (v15)
          operator delete(v15);
        v13 = v22;
      }
      else
      {
        *(_DWORD *)v13 = v14;
        v13 += 4;
      }
      v48 = v13;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
    v24 = (float *)__p;
  }
  else
  {
    v13 = 0;
    v24 = 0;
  }
  v25 = (v13 - (char *)v24) >> 2;
  if (v13 - (char *)v24 >= 5)
  {
    v26 = (v25 - 2) >> 1;
    v27 = v26 + 1;
    v28 = &v24[v26];
    do
    {
      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>((uint64_t)v24, (uint64_t)&v51, v25, v28--);
      --v27;
    }
    while (v27);
    v24 = (float *)__p;
    v13 = v48;
    v25 = (v48 - __p) >> 2;
  }
  if (v25 >= a2)
    v29 = a2;
  else
    v29 = v25;
  if (v29)
  {
    v30 = 0;
    v31 = (_DWORD *)*a3;
    do
    {
      v32 = v13 - (char *)v24;
      if (v13 - (char *)v24 >= 5)
      {
        v33 = 0;
        v34 = v32 >> 2;
        v35 = *v24;
        v36 = (unint64_t)((v32 >> 2) - 2) >> 1;
        v37 = v24;
        do
        {
          v38 = v37;
          v37 += v33 + 1;
          v39 = 2 * v33;
          v33 = (2 * v33) | 1;
          v40 = v39 + 2;
          if (v40 < v34 && *v37 < v37[1])
          {
            ++v37;
            v33 = v40;
          }
          *v38 = *v37;
        }
        while (v33 <= v36);
        v41 = (float *)(v13 - 4);
        if (v37 != (float *)(v13 - 4))
        {
          *v37 = *v41;
          *v41 = v35;
          v42 = (char *)v37 - (char *)v24 + 4;
          if (v42 < 5)
            goto LABEL_52;
          v43 = (((unint64_t)v42 >> 2) - 2) >> 1;
          v44 = &v24[v43];
          v45 = *v44;
          v35 = *v37;
          if (*v44 >= *v37)
            goto LABEL_52;
          do
          {
            *v37 = v45;
            v37 = v44;
            if (!v43)
              break;
            v43 = (v43 - 1) >> 1;
            v44 = &v24[v43];
            v45 = *v44;
          }
          while (*v44 < v35);
        }
        *v37 = v35;
      }
LABEL_52:
      v46 = *((_DWORD *)v13 - 1);
      v13 -= 4;
      v31[v30++] = v46;
    }
    while (v30 != v29);
  }
  if (v24)
    operator delete(v24);
}

void sub_1ADC72FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  void *v12;

  if (__p)
    operator delete(__p);
  v12 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v12;
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(uint64_t a1)
{
  uint64_t *v2;
  char *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  char v20;

  v2 = (uint64_t *)(a1 + 112);
  v3 = *(char **)(a1 + 112);
  *(_QWORD *)(a1 + 120) = v3;
  v4 = *(_QWORD **)(a1 + 24);
  if (v4)
  {
    v5 = (_QWORD *)(a1 + 128);
    do
    {
      v6 = v4 + 2;
      if ((unint64_t)v3 >= *v5)
      {
        v7 = (uint64_t)&v3[-*v2] >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v8 = *v5 - *v2;
        v9 = v8 >> 2;
        if (v8 >> 2 <= (unint64_t)(v7 + 1))
          v9 = v7 + 1;
        if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
          v10 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v10 = v9;
        if (v10)
          v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 128, v10);
        else
          v11 = 0;
        v12 = &v11[8 * v7];
        *(_QWORD *)v12 = v6;
        v3 = v12 + 8;
        v14 = *(char **)(a1 + 112);
        v13 = *(char **)(a1 + 120);
        if (v13 != v14)
        {
          do
          {
            v15 = *((_QWORD *)v13 - 1);
            v13 -= 8;
            *((_QWORD *)v12 - 1) = v15;
            v12 -= 8;
          }
          while (v13 != v14);
          v13 = (char *)*v2;
        }
        *(_QWORD *)(a1 + 112) = v12;
        *(_QWORD *)(a1 + 120) = v3;
        *(_QWORD *)(a1 + 128) = &v11[8 * v10];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_QWORD *)v3 = v6;
        v3 += 8;
      }
      *(_QWORD *)(a1 + 120) = v3;
      v4 = (_QWORD *)*v4;
    }
    while (v4);
    v16 = *v2;
  }
  else
  {
    v16 = (uint64_t)v3;
  }
  v17 = 126 - 2 * __clz((uint64_t)&v3[-v16] >> 3);
  if (v3 == (char *)v16)
    v18 = 0;
  else
    v18 = v17;
  result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(v16, v3, (uint64_t)&v20, v18, 1);
  *(_BYTE *)(a1 + 136) = 1;
  return result;
}

float kaldi::quasar::ConfusionNetworkSlot<std::string>::GetTokenWeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  std::string v6;
  void *__p[2];
  char v8;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  v3 = *(_QWORD *)(a1 + 168);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(void **__return_ptr, uint64_t, std::string *))(*(_QWORD *)v3 + 48))(__p, v3, &v6);
  v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v6.__r_.__value_.__l.__data_);
    if (v4)
      return *((float *)v4 + 11);
  }
  else if (v4)
  {
    return *((float *)v4 + 11);
  }
  return 0.0;
}

void sub_1ADC73220(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkSlot<std::string>::HasTokenFromSequence(uint64_t a1, int a2)
{
  uint64_t **v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;

  v2 = *(uint64_t ***)(a1 + 24);
  if (!v2)
    return 0;
  while (1)
  {
    v4 = v2[6];
    if (v2[7] != v4 && !*((_BYTE *)v4 + 36))
      break;
LABEL_12:
    v2 = (uint64_t **)*v2;
    if (!v2)
      return 0;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, v2[9], (uint64_t)v2[10], ((char *)v2[10] - (char *)v2[9]) >> 2);
  if (v9 == v8)
  {
    if (v8)
    {
LABEL_11:
      v9 = v8;
      operator delete(v8);
    }
    goto LABEL_12;
  }
  v5 = 0;
  v6 = (v9 - v8) >> 2;
  if (v6 <= 1)
    v6 = 1;
  while (*(_DWORD *)&v8[4 * v5] != a2)
  {
    if (v6 == ++v5)
      goto LABEL_11;
  }
  v9 = v8;
  operator delete(v8);
  return 1;
}

void kaldi::quasar::ConfusionNetworkSlot<std::string>::ModifyEpsArcKey(uint64_t a1)
{
  std::string *v2;
  _QWORD *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  std::string __p;
  __int128 *v8[3];

  v2 = (std::string *)(a1 + 88);
  if (*(char *)(a1 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a1 + 88), *(_QWORD *)(a1 + 96));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 104);
  }
  std::string::append(v2, "_");
  v3 = (_QWORD *)(a1 + 8);
  while (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)v2))std::string::append(v2, "_");
  if (*(_BYTE *)a1)
  {
    v4 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)&__p);
    v8[0] = (__int128 *)&__p;
    v5 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, v8);
    v8[0] = (__int128 *)v2;
    v6 = std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v3, (unsigned __int8 *)v2, (uint64_t)&std::piecewise_construct, v8);
    *((_QWORD *)v6 + 5) = *((_QWORD *)v5 + 5);
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)v6 + 6);
    *((_OWORD *)v6 + 3) = *((_OWORD *)v5 + 3);
    *((_QWORD *)v6 + 8) = *((_QWORD *)v5 + 8);
    *((_QWORD *)v5 + 6) = 0;
    *((_QWORD *)v5 + 7) = 0;
    *((_QWORD *)v5 + 8) = 0;
    std::vector<int>::__move_assign((uint64_t)(v6 + 72), (__n128 *)(v5 + 72));
    std::vector<int>::__move_assign((uint64_t)(v6 + 96), (__n128 *)v5 + 6);
    std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100]((_QWORD *)v6 + 15, (uint64_t)(v5 + 120));
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::remove(v3, v4, (uint64_t)v8);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v8, 0);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADC73484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ConfusionNetworkArc<std::string>::~ConfusionNetworkArc(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void **v8;

  v2 = (_QWORD *)(a1 + 80);
  v3 = *(_QWORD **)(a1 + 104);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(void **)(a1 + 56);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(_QWORD *)(a1 + 40) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 8);
  std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](&v8);
  return a1;
}

uint64_t kaldi::quasar::ConfusionNetwork<std::string>::ConfusionNetwork(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  std::string v16;
  _QWORD v17[3];
  std::string *v18;

  *(_BYTE *)a1 = 1;
  v9 = a1 + 40;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](a1 + 8, a4);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v9, a5);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 72), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  v10 = *a2;
  if (a2[1] == *a2)
  {
    v14 = 0;
  }
  else
  {
    v11 = 0;
    v12 = 0;
    do
    {
      memset(&v16, 0, sizeof(v16));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v16, *(__int128 **)(v10 + v11), *(__int128 **)(v10 + v11 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v10 + v11 + 8) - *(_QWORD *)(v10 + v11)) >> 3));
      v13 = *(_QWORD *)(a1 + 32);
      if (!v13)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *))(*(_QWORD *)v13 + 48))(v17, v13, &v16);
      std::vector<std::vector<std::string>>::push_back[abi:ne180100]((uint64_t *)(a1 + 96), (uint64_t)v17);
      v18 = (std::string *)v17;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      v18 = &v16;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      ++v12;
      v10 = *a2;
      v11 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v12);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3);
  }
  if (v14 == (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2)
    *(_BYTE *)a1 = 0;
  kaldi::quasar::ConfusionNetwork<std::string>::Construct(a1);
  return a1;
}

void sub_1ADC736CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13)
{
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  void **v16;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;

  a13 = v16 + 3;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  a13 = v16;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a13);
  v18 = *v15;
  if (*v15)
  {
    v13[10] = v18;
    operator delete(v18);
  }
  v19 = (_QWORD *)v13[8];
  if (v19 == v14)
  {
    v20 = 4;
    v19 = v14;
  }
  else
  {
    if (!v19)
      goto LABEL_8;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_8:
  v21 = (_QWORD *)v13[4];
  if (v21 == a9)
  {
    v22 = 4;
    v21 = a9;
  }
  else
  {
    if (!v21)
      goto LABEL_13;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_13:
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConfusionNetwork<std::string>::Construct(uint64_t a1)
{
  uint64_t v1;
  unint64_t v3;
  int v4;
  std::string *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  std::vector<std::wstring>::pointer begin;
  unint64_t v28;
  __int128 *v29;
  std::string::size_type v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  unint64_t v39;
  int v40;
  __n128 *v41;
  uint64_t v42;
  __n128 v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  int v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t i;
  int v60;
  uint64_t j;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  void ***v75;
  uint64_t v76;
  uint64_t *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  int v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  __n128 v89;
  uint64_t v90;
  void *v91;
  _BYTE *v92;
  uint64_t v93;
  void *v94;
  char *v95;
  char *v96;
  void *__p;
  char *v98;
  char *v99;
  std::string *v100;
  std::string *v101;
  unint64_t v102;
  int v103;
  int v104;
  std::vector<std::wstring> v105;
  _BYTE v106[24];
  _BYTE *v107;
  std::string v108;
  int v109;
  int v110;
  int v111;
  __int16 v112;
  uint64_t v113;
  void *v114;
  char v115;
  void *v116;
  void *v117;
  _BYTE v118[24];
  _BYTE *v119;
  _QWORD v120[3];
  _QWORD *v121;
  void **v122[3];
  void ***v123;
  _BYTE v124[24];
  _BYTE *v125;
  _BYTE v126[24];
  _BYTE *v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  memset(&v105, 0, sizeof(v105));
  v104 = -1082130432;
  v103 = -1;
  v100 = 0;
  v101 = 0;
  v102 = 0;
  __p = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  v1 = *(_QWORD *)(a1 + 96);
  if (*(_QWORD *)(a1 + 104) == v1)
    goto LABEL_143;
  v3 = 0;
  do
  {
    memset(&v108, 0, sizeof(v108));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v108, *(__int128 **)(v1 + 24 * v3), *(__int128 **)(v1 + 24 * v3 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v1 + 24 * v3 + 8) - *(_QWORD *)(v1 + 24 * v3)) >> 3));
    if (*(_BYTE *)a1)
      v4 = 2143289344;
    else
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v3);
    if (v108.__r_.__value_.__l.__size_ != v108.__r_.__value_.__r.__words[0] && v105.__end_ == v105.__begin_)
    {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(&v105, (std::string *)v108.__r_.__value_.__l.__data_, (__int128 *)v108.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108.__r_.__value_.__l.__size_ - v108.__r_.__value_.__r.__words[0]) >> 3));
      v104 = v4;
      v103 = v3;
    }
    else
    {
      v5 = v101;
      if ((unint64_t)v101 >= v102)
      {
        v6 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v100, (__int128 **)&v108);
      }
      else
      {
        v101->__r_.__value_.__r.__words[0] = 0;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v5, (__int128 *)v108.__r_.__value_.__l.__data_, (__int128 *)v108.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v108.__r_.__value_.__l.__size_ - v108.__r_.__value_.__r.__words[0]) >> 3));
        v6 = (uint64_t)&v5[1];
      }
      v101 = (std::string *)v6;
      v7 = v98;
      if (v98 >= v99)
      {
        v9 = (char *)__p;
        v10 = (v98 - (_BYTE *)__p) >> 2;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v12 = v99 - (_BYTE *)__p;
        if ((v99 - (_BYTE *)__p) >> 1 > v11)
          v11 = v12 >> 1;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
          v13 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
        {
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v99, v13);
          v9 = (char *)__p;
          v7 = v98;
        }
        else
        {
          v14 = 0;
        }
        v15 = (int *)&v14[4 * v10];
        *v15 = v4;
        v8 = (char *)(v15 + 1);
        while (v7 != v9)
        {
          v16 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--v15 = v16;
        }
        __p = v15;
        v98 = v8;
        v99 = &v14[4 * v13];
        if (v9)
          operator delete(v9);
      }
      else
      {
        *(_DWORD *)v98 = v4;
        v8 = v7 + 4;
      }
      v98 = v8;
      v17 = v95;
      if (v95 >= v96)
      {
        v19 = (char *)v94;
        v20 = (v95 - (_BYTE *)v94) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v22 = v96 - (_BYTE *)v94;
        if ((v96 - (_BYTE *)v94) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v96, v23);
          v19 = (char *)v94;
          v17 = v95;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = v3;
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        v94 = v25;
        v95 = v18;
        v96 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v95 = v3;
        v18 = v17 + 4;
      }
      v95 = v18;
    }
    v122[0] = (void **)&v108;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v122);
    ++v3;
    v1 = *(_QWORD *)(a1 + 96);
  }
  while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 104) - v1) >> 3) > v3);
  begin = v105.__begin_;
  if (v105.__end_ == v105.__begin_)
    goto LABEL_143;
  v88.n128_u32[0] = 0;
  v28 = 0;
  do
  {
    memset(&v108, 0, sizeof(v108));
    v29 = (__int128 *)&begin[v28];
    if (*(_BYTE *)a1)
      v30 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &>((uint64_t *)&v108, v29, &v103, (int *)&v88);
    else
      v30 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &,float &>((uint64_t *)&v108, v29, &v103, (int *)&v88, &v104);
    v108.__r_.__value_.__l.__size_ = v30;
    v31 = *(_QWORD *)(a1 + 128);
    if (v31 >= *(_QWORD *)(a1 + 136))
    {
      v32 = std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__emplace_back_slow_path<std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>((uint64_t *)(a1 + 120), (uint64_t *)&v108, a1 + 40);
    }
    else
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(a1 + 136, *(_QWORD *)(a1 + 128), (uint64_t *)&v108, a1 + 40);
      v32 = v31 + 176;
      *(_QWORD *)(a1 + 128) = v31 + 176;
    }
    *(_QWORD *)(a1 + 128) = v32;
    v122[0] = (void **)&v108;
    std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100](v122);
    v28 = v88.n128_i32[0] + 1;
    ++v88.n128_u32[0];
    begin = v105.__begin_;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v105.__end_ - (char *)v105.__begin_) >> 3) > v28);
  v120[0] = &unk_1E5D3D618;
  v121 = v120;
  kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner((uint64_t)v122, (uint64_t)v120);
  v34 = v121;
  if (v121 == v120)
  {
    v35 = 4;
    v34 = v120;
    goto LABEL_59;
  }
  if (v121)
  {
    v35 = 5;
LABEL_59:
    (*(void (**)(void))(*v34 + 8 * v35))();
  }
  v91 = 0;
  v92 = 0;
  v93 = 0;
  v36 = (uint64_t)v100;
  if (v101 == v100)
    goto LABEL_128;
  v37 = 0;
  v77 = (uint64_t *)(a1 + 120);
  do
  {
    v33.n128_f32[0] = kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Align(v122, v77, (_QWORD *)(v36 + 24 * v37), &v91);
    v38 = (char *)v91;
    if (v92 != v91)
    {
      v39 = 0;
      v40 = 0;
      while (1)
      {
        v41 = (__n128 *)&v38[40 * v39];
        v42 = v41[2].n128_i64[0];
        v43 = *v41;
        v33 = v41[1];
        v90 = v42;
        v88 = v43;
        v89 = v33;
        v44 = v43.n128_u32[0] + v40;
        if (v42 <= 1)
          break;
        if ((_DWORD)v42 == 3)
        {
          v85 = 0;
          v86 = 0;
          v87 = 0;
          if (*(_BYTE *)a1)
            v55 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &>(&v85, (__int128 *)v89.n128_u64[1], (int *)v94 + v37, (int *)&v89);
          else
            v55 = std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &,float &>(&v85, (__int128 *)v89.n128_u64[1], (int *)v94 + v37, (int *)&v89, (int *)__p + v37);
          v86 = v55;
          std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v106, a1 + 40);
          kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot((uint64_t)&v108, &v85, (uint64_t)v106);
          v57 = v107;
          if (v107 == v106)
          {
            v57 = v106;
            v58 = 4;
LABEL_89:
            (*(void (**)(void))(*v57 + 8 * v58))();
          }
          else if (v107)
          {
            v58 = 5;
            goto LABEL_89;
          }
          if (*(_BYTE *)a1)
          {
            *(_DWORD *)((char *)&v80 + 3) = 0;
            LODWORD(v80) = 0;
            v78 = 0;
            v79 = 0;
            HIBYTE(v80) = 0;
            v81 = v103;
            v82 = -1;
            HIBYTE(v84) = 1;
            kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v108, (uint64_t)&v78);
            if (SHIBYTE(v80) < 0)
            {
              operator delete(v78);
              if (!v37)
                goto LABEL_108;
            }
            else if (!v37)
            {
              goto LABEL_108;
            }
            for (i = 0; i != v37; ++i)
            {
              v60 = *((_DWORD *)v94 + i);
              v79 = 0;
              v80 = 0;
              v78 = 0;
              v81 = v60;
              v82 = -1;
              HIBYTE(v84) = 1;
              kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v108, (uint64_t)&v78);
              if (SHIBYTE(v80) < 0)
                operator delete(v78);
            }
          }
          else
          {
            *(_DWORD *)((char *)&v80 + 3) = 0;
            LODWORD(v80) = 0;
            v78 = 0;
            v79 = 0;
            HIBYTE(v80) = 0;
            v81 = v103;
            v82 = -1;
            v83 = v104;
            v84 = 1;
            kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v108, (uint64_t)&v78);
            if (SHIBYTE(v80) < 0)
            {
              operator delete(v78);
              if (!v37)
                goto LABEL_108;
            }
            else if (!v37)
            {
              goto LABEL_108;
            }
            for (j = 0; j != v37; ++j)
            {
              v62 = *((_DWORD *)v94 + j);
              v63 = *((_DWORD *)__p + j);
              v79 = 0;
              v80 = 0;
              v78 = 0;
              v81 = v62;
              v82 = -1;
              v83 = v63;
              v84 = 1;
              kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement((uint64_t)&v108, (uint64_t)&v78);
              if (SHIBYTE(v80) < 0)
                operator delete(v78);
            }
          }
LABEL_108:
          v64 = v44 & ~(v44 >> 31);
          v65 = *(_QWORD *)(a1 + 120);
          if (v64 >= (int)(-1171354717 * ((unint64_t)(*(_QWORD *)(a1 + 128) - v65) >> 4)))
            v64 = -1171354717 * ((unint64_t)(*(_QWORD *)(a1 + 128) - v65) >> 4);
          std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::insert(v77, v65 + 176 * v64, (unint64_t)&v108);
          v66 = v119;
          if (v119 == v118)
          {
            v66 = v118;
            v67 = 4;
LABEL_114:
            (*(void (**)(void))(*v66 + 8 * v67))();
          }
          else if (v119)
          {
            v67 = 5;
            goto LABEL_114;
          }
          if (v116)
          {
            v117 = v116;
            operator delete(v116);
          }
          if (v115 < 0)
            operator delete(v114);
          ++v40;
          std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&v113);
          std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)&v108.__r_.__value_.__l.__size_);
          v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v85;
          std::vector<quasar::PhoneticMatchDecoderStat>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
          goto LABEL_120;
        }
        if ((_DWORD)v42 == 2)
        {
          v49 = *(_QWORD *)(a1 + 120) + 176 * v44;
          v50 = *((_DWORD *)v94 + v37);
          if (*(_BYTE *)a1)
          {
            memset(&v108, 0, sizeof(v108));
            v109 = v50;
            v110 = -1;
            HIBYTE(v112) = 1;
          }
          else
          {
            v56 = *((_DWORD *)__p + v37);
            memset(&v108, 0, sizeof(v108));
            v109 = v50;
            v110 = -1;
            v111 = v56;
            v112 = 1;
          }
          kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v49, (uint64_t)&v108);
LABEL_82:
          if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v108.__r_.__value_.__l.__data_);
        }
LABEL_120:
        ++v39;
        v38 = (char *)v91;
        if (0xCCCCCCCCCCCCCCCDLL * ((v92 - (_BYTE *)v91) >> 3) <= v39)
          goto LABEL_121;
      }
      v45 = *(_QWORD *)(a1 + 120) + 176 * v44;
      if (*(_BYTE *)a1)
      {
        v46 = *((_DWORD *)v94 + v37);
        v47 = v89.n128_u32[0];
        if (*(char *)(v89.n128_u64[1] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v89.n128_u64[1], *(_QWORD *)(v89.n128_u64[1] + 8));
        }
        else
        {
          v48 = *(_OWORD *)v89.n128_u64[1];
          v108.__r_.__value_.__r.__words[2] = *(_QWORD *)(v89.n128_u64[1] + 16);
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v48;
        }
        v109 = v46;
        v110 = v47;
        HIBYTE(v112) = 1;
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v45, (uint64_t)&v108);
      }
      else
      {
        v51 = *((_DWORD *)v94 + v37);
        v52 = v89.n128_u32[0];
        v53 = *((_DWORD *)__p + v37);
        if (*(char *)(v89.n128_u64[1] + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v108, *(const std::string::value_type **)v89.n128_u64[1], *(_QWORD *)(v89.n128_u64[1] + 8));
        }
        else
        {
          v54 = *(_OWORD *)v89.n128_u64[1];
          v108.__r_.__value_.__r.__words[2] = *(_QWORD *)(v89.n128_u64[1] + 16);
          *(_OWORD *)&v108.__r_.__value_.__l.__data_ = v54;
        }
        v109 = v51;
        v110 = v52;
        v111 = v53;
        v112 = 0;
        kaldi::quasar::ConfusionNetworkSlot<std::string>::AddArcElement(v45, (uint64_t)&v108);
      }
      goto LABEL_82;
    }
LABEL_121:
    if (!*(_BYTE *)a1)
    {
      v68 = *(_QWORD *)(a1 + 120);
      if (*(_QWORD *)(a1 + 128) != v68)
      {
        v69 = 0;
        v70 = 0;
        do
        {
          kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(v68 + v69);
          ++v70;
          v68 = *(_QWORD *)(a1 + 120);
          v69 += 176;
        }
        while (0x2E8BA2E8BA2E8BA3 * ((*(_QWORD *)(a1 + 128) - v68) >> 4) > v70);
      }
    }
    ++v37;
    v36 = (uint64_t)v100;
  }
  while (0xAAAAAAAAAAAAAAABLL * (((char *)v101 - (char *)v100) >> 3) > v37);
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
LABEL_128:
  v71 = v127;
  if (v127 == v126)
  {
    v72 = 4;
    v71 = v126;
LABEL_132:
    (*(void (**)(__n128))(*v71 + 8 * v72))(v33);
  }
  else if (v127)
  {
    v72 = 5;
    goto LABEL_132;
  }
  v73 = v125;
  if (v125 == v124)
  {
    v74 = 4;
    v73 = v124;
LABEL_137:
    (*(void (**)(__n128))(*v73 + 8 * v74))(v33);
  }
  else if (v125)
  {
    v74 = 5;
    goto LABEL_137;
  }
  v75 = v123;
  if (v123 == v122)
  {
    v76 = 4;
    v75 = v122;
LABEL_142:
    ((void (*)(__n128))(*v75)[v76])(v33);
  }
  else if (v123)
  {
    v76 = 5;
    goto LABEL_142;
  }
LABEL_143:
  if (v94)
  {
    v95 = (char *)v94;
    operator delete(v94);
  }
  if (__p)
  {
    v98 = (char *)__p;
    operator delete(__p);
  }
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
  v108.__r_.__value_.__r.__words[0] = (std::string::size_type)&v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v108);
}

void sub_1ADC741FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v62;
  uint64_t v63;

  v62 = *(_QWORD **)(v60 - 216);
  if (v62 == v59)
  {
    v63 = 4;
    v62 = (_QWORD *)(v60 - 240);
  }
  else
  {
    if (!v62)
      goto LABEL_6;
    v63 = 5;
  }
  (*(void (**)(void))(*v62 + 8 * v63))();
LABEL_6:
  if (__p)
    operator delete(__p);
  if (a40)
    operator delete(a40);
  a54 = &a43;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  a54 = &a47;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a54);
  _Unwind_Resume(a1);
}

_WORD *std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  _WORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v4 = (_WORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x2E8BA2E8BA2E8BA3 * ((a2 - *a1) >> 4);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 > 0x1745D1745D1745DLL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0xBA2E8BA2E8BA2ELL)
      v15 = 0x1745D1745D1745DLL;
    else
      v15 = v13;
    v23 = v9;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(v9, v15);
    else
      v16 = 0;
    v19 = v16;
    v20 = &v16[176 * v8];
    v21 = v20;
    v22 = &v16[176 * v15];
    std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::push_back[abi:ne180100](&v19, a3);
    v4 = (_WORD *)std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(a1, &v19, (uint64_t)v4);
    std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v19);
  }
  else if (a2 == v6)
  {
    kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(a2, a3);
    a1[1] = (uint64_t)(v4 + 88);
  }
  else
  {
    std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__move_range((uint64_t)a1, a2, v6, a2 + 176);
    if ((unint64_t)v4 <= a3)
      a3 += 176 * (a1[1] > a3);
    *v4 = *(_WORD *)a3;
    if (v4 == (_WORD *)a3)
    {
      std::string::operator=((std::string *)(v7 + 176 * v8 + 88), (const std::string *)(v7 + 176 * v8 + 88));
    }
    else
    {
      v12 = v7 + 176 * v8;
      *(_DWORD *)(v12 + 40) = *(_DWORD *)(a3 + 40);
      std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *> *>>((_QWORD *)(v12 + 8), *(uint64_t **)(a3 + 24), 0);
      *(_DWORD *)(v12 + 80) = *(_DWORD *)(a3 + 80);
      std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *> *>>((_QWORD *)(v12 + 48), *(uint64_t **)(a3 + 64), 0);
      std::string::operator=((std::string *)(v12 + 88), (const std::string *)(a3 + 88));
      std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((char *)(v12 + 112), *(char **)(a3 + 112), *(_QWORD *)(a3 + 120), (uint64_t)(*(_QWORD *)(a3 + 120) - *(_QWORD *)(a3 + 112)) >> 3);
    }
    v17 = v7 + 176 * v8;
    *(_BYTE *)(v17 + 136) = *(_BYTE *)(a3 + 136);
    std::function<std::string ()(std::string)>::operator=((_QWORD *)(v17 + 144), a3 + 144);
  }
  return v4;
}

void sub_1ADC745B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v11 + 8) = v10;
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::~Aligner(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v2 = a1 + 8;
  v3 = (_QWORD *)a1[11];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[7];
  if (v5 == a1 + 4)
  {
    v6 = 4;
    v5 = a1 + 4;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[3];
  if (v7 == a1)
  {
    v8 = 4;
    v7 = a1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<quasar::PhoneticMatchDecoderStat>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADC7493C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x98uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]<std::string const&>((std::string *)(v8 + 16), *a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC749A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

std::string *std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]<std::string const&>(std::string *this, __int128 *a2)
{
  __int128 v3;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
  }
  this[1].__r_.__value_.__s.__data_[0] = 1;
  *(_OWORD *)((char *)this[1].__r_.__value_.__r.__words + 4) = 0u;
  *(_OWORD *)((char *)&this[1].__r_.__value_.__r.__words[2] + 4) = 0u;
  *(_OWORD *)((char *)&this[2].__r_.__value_.__r.__words[1] + 4) = 0u;
  *(_OWORD *)((char *)this[3].__r_.__value_.__r.__words + 4) = 0u;
  *(_OWORD *)&this[3].__r_.__value_.__r.__words[2] = 0u;
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E5D3CE88;
  this[5].__r_.__value_.__l.__size_ = (std::string::size_type)&this[4].__r_.__value_.__l.__size_;
  return this;
}

void std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3CE88;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3CE88;
}

float std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::operator()(uint64_t a1, float *a2, float *a3)
{
  return *a2 + *a3;
}

uint64_t std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1},std::allocator<kaldi::quasar::ConfusionNetworkArc<std::string>::{lambda(float,float)#1}>,float ()(float,float)>::target_type()
{
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__construct_one_at_end[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v5;
  }
  v6 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v4 + 30) = *(_QWORD *)((char *)a2 + 30);
  *(_QWORD *)(v4 + 24) = v6;
  *(_QWORD *)(a1 + 8) = v4 + 40;
}

void sub_1ADC74B64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__push_back_slow_path<kaldi::quasar::ConfusionNetworkArcElement<std::string> const&>(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  std::string *v11;
  __int128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  std::string *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = (std::string *)&v10[40 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[40 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v11 = v18;
  }
  else
  {
    v12 = *a2;
    v11->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  v13 = &v10[40 * v4];
  v14 = *((_QWORD *)a2 + 3);
  *(_QWORD *)(v13 + 30) = *(_QWORD *)((char *)a2 + 30);
  *((_QWORD *)v13 + 3) = v14;
  v18 = (std::string *)((char *)v11 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADC74C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_OWORD *)(v7 - 40) = v8;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      v9 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 10) = *(_QWORD *)(a3 - 10);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 40;
      *((_QWORD *)&v15 + 1) -= 40;
      a3 -= 40;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkArcElement<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::PhoneticMatchDecoderStat>,std::reverse_iterator<quasar::PhoneticMatchDecoderStat*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) | 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 < v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(uint64_t result, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  float v25;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = a2 - (char *)v9;
    v13 = (a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *((_QWORD *)a2 - 1);
        v21 = *v9;
        if (*(float *)(v20 + 28) >= *(float *)(*v9 + 28))
        {
          *v9 = v20;
          *((_QWORD *)a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v9, v9 + 1, (uint64_t *)a2 - 1);
      case 4uLL:
        return _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(v9, v9 + 1, v9 + 2, (uint64_t *)a2 - 1);
      case 5uLL:
        return _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(v9, v9 + 1, v9 + 2, v9 + 3, (uint64_t *)a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != (uint64_t *)a2)
              return (uint64_t)_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEESO_EET1_SP_SP_T2_OSE_((char *)v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(&v9[v13 >> 1], v9, (uint64_t *)a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v9, &v9[v13 >> 1], (uint64_t *)a2 - 1);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v9 + 1, v15 - 1, (uint64_t *)a2 - 2);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v9 + 2, &v9[v14 + 1], (uint64_t *)a2 - 3);
            _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(float *)(*(v9 - 1) + 28) < *(float *)(*v9 + 28))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(v9, (uint64_t *)a2);
            v9 = (uint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(v9, v17);
          v9 = v17 + 1;
          result = _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(v17 + 1, (uint64_t *)a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEELb0EEEvT1_SP_SE_NS_15iterator_traitsISP_E15difference_typeEb(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = (char *)v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if ((a5 & 1) != 0)
          return (uint64_t)_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SE_(v9, (uint64_t *)a2);
        if (v9 != (uint64_t *)a2)
        {
          while (v8 + 1 != (uint64_t *)a2)
          {
            v24 = *v8;
            v23 = v8[1];
            v22 = ++v8;
            v25 = *(float *)(v23 + 28);
            if (v25 >= *(float *)(v24 + 28))
            {
              do
              {
                *v22 = v24;
                v24 = *(v22 - 2);
                --v22;
              }
              while (v25 >= *(float *)(v24 + 28));
              *v22 = v23;
            }
          }
        }
        return result;
    }
  }
}

uint64_t *_ZNSt3__116__insertion_sortB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SE_(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t *v9;

  if (result != a2)
  {
    v2 = result + 1;
    if (result + 1 != a2)
    {
      v3 = 0;
      v4 = result;
      do
      {
        v6 = *v4;
        v5 = v4[1];
        v4 = v2;
        v7 = *(float *)(v5 + 28);
        if (v7 >= *(float *)(v6 + 28))
        {
          v8 = v3;
          while (1)
          {
            *(uint64_t *)((char *)result + v8 + 8) = v6;
            if (!v8)
              break;
            v6 = *(uint64_t *)((char *)result + v8 - 8);
            v8 -= 8;
            if (v7 < *(float *)(v6 + 28))
            {
              v9 = (uint64_t *)((char *)result + v8 + 8);
              goto LABEL_10;
            }
          }
          v9 = result;
LABEL_10:
          *v9 = v5;
        }
        v2 = v4 + 1;
        v3 += 8;
      }
      while (v4 + 1 != a2);
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  uint64_t v10;

  v3 = *a2;
  v4 = *(float *)(*a2 + 28);
  v5 = *a1;
  v6 = *(float *)(*a1 + 28);
  v7 = *a3;
  v8 = *(float *)(*a3 + 28);
  if (v4 >= v6)
  {
    if (v8 >= v4)
    {
      *a1 = v7;
      *a3 = v5;
    }
    else
    {
      *a1 = v3;
      *a2 = v5;
      if (*(float *)(*a3 + 28) >= v6)
      {
        *a2 = *a3;
        *a3 = v5;
        return 2;
      }
    }
  }
  else
  {
    if (v8 < v4)
      return 0;
    *a2 = v7;
    *a3 = v3;
    v10 = *a1;
    if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
    {
      *a1 = *a2;
      *a2 = v10;
      return 2;
    }
  }
  return 1;
}

uint64_t *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  float v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v3 = *(float *)(*a1 + 28);
  if (v3 >= *(float *)(*(a2 - 1) + 28))
  {
    v5 = a1;
    do
    {
      v6 = v5[1];
      ++v5;
    }
    while (v3 < *(float *)(v6 + 28));
  }
  else
  {
    v4 = a1 + 1;
    do
    {
      v5 = v4;
      if (v4 >= a2)
        break;
      ++v4;
    }
    while (v3 < *(float *)(*v5 + 28));
  }
  if (v5 < a2)
  {
    do
      v7 = *--a2;
    while (v3 >= *(float *)(v7 + 28));
  }
  if (v5 < a2)
  {
    v8 = *v5;
    v9 = *a2;
    do
    {
      *v5 = v9;
      *a2 = v8;
      do
      {
        v10 = v5[1];
        ++v5;
        v8 = v10;
      }
      while (v3 < *(float *)(v10 + 28));
      do
      {
        v11 = *--a2;
        v9 = v11;
      }
      while (v3 >= *(float *)(v11 + 28));
    }
    while (v5 < a2);
  }
  if (v5 - 1 != a1)
    *a1 = *(v5 - 1);
  *(v5 - 1) = v2;
  return v5;
}

_QWORD *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> **,kaldi::quasar::ConfusionNetworkSlot<std::string>::SortArcs(void)::{lambda(std::_ClassicAlgPolicy &,std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> ** &)#1} &>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = 0;
  v3 = *a1;
  v4 = *(float *)(*a1 + 28);
  do
    v5 = a1[++v2];
  while (*(float *)(v5 + 28) >= v4);
  v6 = (unint64_t)&a1[v2];
  v7 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v6 >= (unint64_t)a2)
        break;
      v9 = *--a2;
    }
    while (*(float *)(v9 + 28) < v4);
  }
  else
  {
    do
      v8 = *--a2;
    while (*(float *)(v8 + 28) < v4);
  }
  if (v6 < (unint64_t)a2)
  {
    v10 = *a2;
    v11 = &a1[v2];
    v12 = a2;
    do
    {
      *v11 = v10;
      *v12 = v5;
      do
      {
        v13 = v11[1];
        ++v11;
        v5 = v13;
      }
      while (*(float *)(v13 + 28) >= v4);
      do
      {
        v14 = *--v12;
        v10 = v14;
      }
      while (*(float *)(v14 + 28) < v4);
    }
    while (v11 < v12);
    v7 = v11 - 1;
  }
  if (v7 != a1)
    *a1 = *v7;
  *v7 = v3;
  return v7;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEbT1_SP_SE_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(float *)(v6 + 28) >= *(float *)(*a1 + 28))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *(float *)(*v9 + 28);
    v14 = *v8;
    if (v13 >= *(float *)(*v8 + 28))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v14;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v14 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v13 < *(float *)(v14 + 28))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_12;
        }
      }
      v17 = a1;
LABEL_12:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = _ZNSt3__17__sort3B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEjT1_SP_SP_SE_(a1, a2, a3);
  v9 = *a3;
  if (*(float *)(*a4 + 28) >= *(float *)(*a3 + 28))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(float *)(*a3 + 28) >= *(float *)(*a2 + 28))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__17__sort5B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SP_SE_(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = _ZNSt3__17__sort4B8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_SP_SP_SE_(a1, a2, a3, a4);
  v11 = *a4;
  if (*(float *)(*a5 + 28) >= *(float *)(*a4 + 28))
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*(float *)(*a4 + 28) >= *(float *)(*a3 + 28))
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*(float *)(*a3 + 28) >= *(float *)(*a2 + 28))
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*(float *)(*a2 + 28) >= *(float *)(*a1 + 28))
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

char *_ZNSt3__119__partial_sort_implB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEESO_EET1_SP_SP_T2_OSE_(char *a1, char *a2, char *a3, uint64_t a4)
{
  char *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = a2 - a1;
    v9 = (a2 - a1) >> 3;
    if (a2 - a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[8 * v10];
      do
      {
        _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_((uint64_t)a1, a4, v9, v12);
        v12 -= 8;
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *(_QWORD *)v14;
        if (*(float *)(*(_QWORD *)v14 + 28) >= *(float *)(*(_QWORD *)a1 + 28))
        {
          *(_QWORD *)v14 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v15;
          _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_((uint64_t)a1, a4, v9, a1);
        }
        v14 += 8;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *(_QWORD *)a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += 8 * v17 + 8;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *(float *)(*(_QWORD *)v19 + 28) >= *(float *)(*((_QWORD *)v19 + 1) + 28))
          {
            v19 += 8;
            v17 = v22;
          }
          *(_QWORD *)v20 = *(_QWORD *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 8;
        if (v19 == v6)
        {
          *(_QWORD *)v19 = v18;
        }
        else
        {
          *(_QWORD *)v19 = *(_QWORD *)v6;
          *(_QWORD *)v6 = v18;
          _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_OSE_NS_15iterator_traitsISP_E15difference_typeE((uint64_t)a1, (uint64_t)(v19 + 8), a4, (v19 + 8 - a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t _ZNSt3__111__sift_downB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_OSE_NS_15iterator_traitsISP_E15difference_typeESP_(uint64_t result, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (_QWORD *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *(float *)(*v8 + 28) >= *(float *)(v8[1] + 28))
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      v12 = *(float *)(*a4 + 28);
      if (*(float *)(*v8 + 28) < v12)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v13 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (_QWORD *)(result + 8 * v7);
          v14 = v13 + 2;
          if (v14 < a3 && *(float *)(*v8 + 28) >= *(float *)(v8[1] + 28))
          {
            ++v8;
            v7 = v14;
          }
          v10 = *v8;
        }
        while (*(float *)(*v8 + 28) < v12);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t _ZNSt3__19__sift_upB8ne180100INS_17_ClassicAlgPolicyERZN5kaldi6quasar20ConfusionNetworkSlotINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEE8SortArcsEvEUlRT_RT0_E_PPNS_4pairIKSA_NS3_19ConfusionNetworkArcISA_EEEEEEvT1_SP_OSE_NS_15iterator_traitsISP_E15difference_typeE(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  if (a4 >= 2)
  {
    v4 = (unint64_t)(a4 - 2) >> 1;
    v5 = (_QWORD *)(result + 8 * v4);
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *v5;
    v10 = *(float *)(v8 + 28);
    if (*(float *)(*v5 + 28) >= v10)
    {
      do
      {
        *v6 = v9;
        v6 = v5;
        if (!v4)
          break;
        v4 = (v4 - 1) >> 1;
        v5 = (_QWORD *)(result + 8 * v4);
        v9 = *v5;
      }
      while (*(float *)(*v5 + 28) >= v10);
      *v6 = v7;
    }
  }
  return result;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 176;
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1, v7 - 176, v9);
      v7 = *((_QWORD *)&v16 + 1) - 176;
      *((_QWORD *)&v16 + 1) -= 176;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;

  *(_WORD *)a2 = *(_WORD *)a3;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 8, (uint64_t *)(a3 + 8));
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a2 + 48, (uint64_t *)(a3 + 48));
  v5 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a2 + 88) = v5;
  *(_QWORD *)(a3 + 88) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  *(_QWORD *)(a2 + 128) = *(_QWORD *)(a3 + 128);
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_BYTE *)(a2 + 136) = *(_BYTE *)(a3 + 136);
  return std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100](a2 + 144, a3 + 144);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t *std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::operator()[abi:ne180100](uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result[2] + 8);
  v2 = *(_QWORD *)(result[1] + 8);
  if (v1 != v2)
  {
    v3 = *result;
    do
    {
      result = (uint64_t *)std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v3, v1);
      v1 += 176;
    }
    while (v1 != v2);
  }
  return result;
}

void **std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(void **a1)
{
  std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::clear[abi:ne180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 176;
      result = std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::destroy[abi:ne180100](v4, v1 - 176);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &>(uint64_t *a1, __int128 *a2, int *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::string *v15;
  int v16;
  int v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  std::string *v23;
  char *v24;
  uint64_t *v25;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v25 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  else
    v14 = 0;
  v15 = (std::string *)&v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  v23 = v15;
  v24 = &v14[40 * v13];
  v16 = *a3;
  v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v15 = v23;
  }
  else
  {
    v18 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
  }
  v19 = &v14[40 * v6];
  *((_DWORD *)v19 + 6) = v16;
  *((_DWORD *)v19 + 7) = v17;
  v19[37] = 1;
  v23 = (std::string *)((char *)v15 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v22);
  v20 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1ADC75E70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string&,int &,int &,float &>(uint64_t *a1, __int128 *a2, int *a3, int *a4, int *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v16;
  std::string *v17;
  std::string::value_type *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v12 = 0x666666666666666;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = (std::string *)&v13[40 * v6];
  v19 = &v13[40 * v12];
  std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>((_DWORD)a1 + 16, v17, a2, a3, a4, a5);
  v18 = &v17[1].__r_.__value_.__s.__data_[16];
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1ADC75FA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>(int a1, std::string *this, __int128 *a3, int *a4, int *a5, int *a6)
{
  int v7;
  int v8;
  int v9;
  __int128 v10;

  v7 = *a4;
  v8 = *a5;
  v9 = *a6;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v10;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = v7;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = v8;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = v9;
  WORD2(this[1].__r_.__value_.__r.__words[1]) = 0;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__emplace_back_slow_path<std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  void *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;

  v4 = 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x1745D1745D1745DLL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x5D1745D1745D1746 * ((a1[2] - *a1) >> 4);
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL)
    v8 = 0x1745D1745D1745DLL;
  else
    v8 = v5;
  v16 = a1 + 2;
  if (v8)
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>((uint64_t)(a1 + 2), v8);
  else
    v9 = 0;
  v12 = v9;
  v13 = &v9[176 * v4];
  v15 = &v9[176 * v8];
  std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>((uint64_t)(a1 + 2), (uint64_t)v13, a2, a3);
  v14 = v13 + 176;
  std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(a1, &v12);
  v10 = a1[1];
  std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v12);
  return v10;
}

void sub_1ADC76144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>> &,std::function<std::string ()(std::string)> &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v8, a4);
  kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(a2, a3, (uint64_t)v8);
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1ADC76200(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3D618;
  return result;
}

void std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3D618;
}

float std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::operator()(uint64_t a1, __int16 *a2, uint64_t a3)
{
  return std::__invoke[abi:ne180100]<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>(a1 + 8, a2, a3);
}

uint64_t std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1},std::allocator<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1}>,float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>::target_type()
{
}

float std::__invoke[abi:ne180100]<kaldi::quasar::ConfusionNetwork<std::string>::Construct(void)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)#1} &,kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>(uint64_t a1, __int16 *a2, uint64_t a3)
{
  _BOOL4 HasToken;
  _QWORD *v6;
  uint64_t v7;
  float v8;
  void *__p[2];
  uint64_t v11;
  __int16 v12;
  _BYTE v13[40];
  _BYTE v14[40];
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v13, (uint64_t *)a2 + 1);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v14, (uint64_t *)a2 + 6);
  *(_OWORD *)v15 = *(_OWORD *)(a2 + 44);
  v16 = *((_QWORD *)a2 + 13);
  *((_QWORD *)a2 + 11) = 0;
  *((_QWORD *)a2 + 12) = 0;
  *(_OWORD *)v17 = *((_OWORD *)a2 + 7);
  v18 = *((_QWORD *)a2 + 16);
  *((_QWORD *)a2 + 13) = 0;
  *((_QWORD *)a2 + 14) = 0;
  *((_QWORD *)a2 + 15) = 0;
  *((_QWORD *)a2 + 16) = 0;
  v19 = *((_BYTE *)a2 + 136);
  std::__function::__value_func<std::string ()(std::string)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a2 + 72));
  *(_OWORD *)__p = *(_OWORD *)a3;
  v11 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  HasToken = kaldi::quasar::ConfusionNetworkSlot<std::string>::HasToken((uint64_t)&v12, (uint64_t)__p);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
  v6 = v21;
  if (v21 == v20)
  {
    v7 = 4;
    v6 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_8;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_8:
  if (v17[0])
  {
    v17[1] = v17[0];
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (HasToken)
    v8 = 0.0;
  else
    v8 = 1.0;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)v14);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::~__hash_table((uint64_t)v13);
  return v8;
}

void sub_1ADC7646C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  kaldi::quasar::ConfusionNetworkSlot<std::string>::~ConfusionNetworkSlot((uint64_t)&a15);
  _Unwind_Resume(a1);
}

_QWORD *std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::operator=<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(kaldi::quasar::ConfusionNetworkSlot<std::string>)#1} &,void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E5D3DCF8;
  v6 = v5;
  std::__function::__value_func<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *std::function<float ()(std::string)>::operator=<kaldi::quasar::Aligner<kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string>::Aligner(std::function<float ()(kaldi::quasar::ConfusionNetworkSlot<std::string>,std::string)>)::{lambda(std::string)#1} &,void>(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[3];
  _QWORD *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v5[0] = &off_1E5D3DCA0;
  v6 = v5;
  std::__function::__value_func<float ()(std::string)>::swap[abi:ne180100](v5, a1);
  v2 = v6;
  if (v6 == v5)
  {
    v3 = 4;
    v2 = v5;
    goto LABEL_5;
  }
  if (v6)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &>(uint64_t *a1, __int128 *a2, int *a3, int *a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  std::string *v15;
  int v16;
  int v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  std::string *v23;
  char *v24;
  uint64_t *v25;

  v5 = *a1;
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v11 = (uint64_t)(a1 + 2);
  v12 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v5) >> 3);
  if (2 * v12 > v7)
    v7 = 2 * v12;
  if (v12 >= 0x333333333333333)
    v13 = 0x666666666666666;
  else
    v13 = v7;
  v25 = a1 + 2;
  if (v13)
    v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v11, v13);
  else
    v14 = 0;
  v15 = (std::string *)&v14[40 * v6];
  v22[0] = v14;
  v22[1] = v15;
  v23 = v15;
  v24 = &v14[40 * v13];
  v16 = *a3;
  v17 = *a4;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
    v15 = v23;
  }
  else
  {
    v18 = *a2;
    v15->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v15->__r_.__value_.__l.__data_ = v18;
  }
  v19 = &v14[40 * v6];
  *((_DWORD *)v19 + 6) = v16;
  *((_DWORD *)v19 + 7) = v17;
  v19[37] = 1;
  v23 = (std::string *)((char *)v15 + 40);
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, v22);
  v20 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)v22);
  return v20;
}

void sub_1ADC76708(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__emplace_back_slow_path<std::string const&,int &,int &,float &>(uint64_t *a1, __int128 *a2, int *a3, int *a4, int *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v16;
  std::string *v17;
  std::string::value_type *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v12 = 0x666666666666666;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = (std::string *)&v13[40 * v6];
  v19 = &v13[40 * v12];
  std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>,std::string&,int &,int &,float &>((_DWORD)a1 + 16, v17, a2, a3, a4, a5);
  v18 = &v17[1].__r_.__value_.__s.__data_[16];
  std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)&v16);
  return v14;
}

void sub_1ADC7683C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PhoneticMatchDecoderStat>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1 + 16, v8, v10);
      v10 += 176;
      v8 += 176;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>((uint64_t)&v12, a2, v7, v6);
}

uint64_t std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64x2_t v24;
  uint64_t v25;
  uint64_t result;
  void *v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v11 = 1;
      else
        v11 = 0x5D1745D1745D1746 * ((v4 - *a1) >> 4);
      v12 = v11 >> 2;
      v13 = a1[4];
      v30 = v13;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>>(v13, v11);
      v15 = &v14[176 * v12];
      v17 = &v14[176 * v16];
      v18 = a1[1];
      v19 = a1[2] - v18;
      if (v19)
      {
        v20 = v19 / 176;
        v21 = &v15[176 * v20];
        v22 = 176 * v20;
        v23 = (uint64_t)v15;
        do
        {
          std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(v13, v23, v18);
          v23 += 176;
          v18 += 176;
          v22 -= 176;
        }
        while (v22);
        v24 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v24 = vdupq_n_s64(v18);
        v21 = v15;
      }
      v27 = (void *)*a1;
      *a1 = v14;
      a1[1] = v15;
      v28 = v24;
      v25 = a1[3];
      a1[2] = v21;
      a1[3] = v17;
      v29 = v25;
      std::__split_buffer<kaldi::quasar::ConfusionNetworkSlot<std::string>>::~__split_buffer(&v27);
      v4 = a1[2];
    }
    else
    {
      v6 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 4);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = v7 >> 1;
      v9 = -176 * v8;
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>((uint64_t)&v27, v5, v4, v5 - 176 * v8);
      v4 = v10;
      a1[1] += v9;
      a1[2] = v10;
    }
  }
  result = kaldi::quasar::ConfusionNetworkSlot<std::string>::ConfusionNetworkSlot(v4, a2);
  a1[2] += 176;
  return result;
}

uint64_t std::vector<kaldi::quasar::ConfusionNetworkSlot<std::string>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>,std::reverse_iterator<kaldi::quasar::ConfusionNetworkSlot<std::string>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  __int128 v12;

  for (i = 0; ; i -= 176)
  {
    v8 = a3 + i;
    if (a3 + i == a2)
      break;
    v9 = a4 + i;
    *(_WORD *)(a4 + i - 176) = *(_WORD *)(v8 - 176);
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(a4 + i - 168, (uint64_t *)(v8 - 168));
    v10 = v8 - 128;
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a4 + i - 128, (uint64_t *)v10);
    v11 = (void **)(a4 + i - 88);
    if (*(char *)(a4 + i - 65) < 0)
      operator delete(*v11);
    v12 = *(_OWORD *)(v10 + 40);
    *(_QWORD *)(v9 - 72) = *(_QWORD *)(v10 + 56);
    *(_OWORD *)v11 = v12;
    *(_BYTE *)(v10 + 63) = 0;
    *(_BYTE *)(v10 + 40) = 0;
    std::vector<int>::__move_assign(v9 - 64, (__n128 *)(v10 + 64));
    *(_BYTE *)(v9 - 40) = *(_BYTE *)(v10 + 88);
    std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100]((_QWORD *)(v9 - 32), v10 + 96);
  }
  return a3;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::clear(a1);
  v4 = *a2;
  *a2 = 0;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v8 = a2[2];
  v7 = a2 + 2;
  v6 = v8;
  v9 = *(v7 - 1);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 8) = v9;
  *(v7 - 1) = 0;
  v10 = v7[1];
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v7 + 4);
  if (v10)
  {
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v11 %= v12;
    }
    else
    {
      v11 &= v12 - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = a1 + 16;
    *v7 = 0;
    v7[1] = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

_QWORD *std::function<std::string ()(std::string)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<std::string ()(std::string)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__assign_multi<std::__hash_const_iterator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *> *>>(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  __int128 *v4;
  uint64_t v6;
  uint64_t i;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD v12[2];

  v4 = (__int128 *)a2;
  v6 = a1[1];
  if (v6)
  {
    for (i = 0; i != v6; ++i)
      *(_QWORD *)(*a1 + 8 * i) = 0;
    v8 = (_QWORD *)a1[2];
    a1[2] = 0;
    a1[3] = 0;
    if (v8)
      v9 = a2 == a3;
    else
      v9 = 1;
    if (v9)
    {
      v10 = v8;
    }
    else
    {
      do
      {
        v12[0] = v8 + 2;
        v12[1] = v8 + 5;
        std::pair<std::string &,kaldi::quasar::ConfusionNetworkArc<std::string> &>::operator=[abi:ne180100]<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>,(void *)0>((uint64_t)v12, (uint64_t)(v4 + 1));
        v10 = (_QWORD *)*v8;
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v8);
        v4 = *(__int128 **)v4;
        if (v10)
          v11 = v4 == (__int128 *)a3;
        else
          v11 = 1;
        v8 = v10;
      }
      while (!v11);
    }
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node((uint64_t)a1, v10);
  }
  while (v4 != (__int128 *)a3)
  {
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_multi<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(a1, v4 + 1);
    v4 = *(__int128 **)v4;
  }
}

void sub_1ADC76E78(void *a1)
{
  uint64_t v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__deallocate_node(v1, v2);
  __cxa_rethrow();
}

void sub_1ADC76E94(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string &,kaldi::quasar::ConfusionNetworkArc<std::string> &>::operator=[abi:ne180100]<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>,(void *)0>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  std::string::operator=(*(std::string **)a1, (const std::string *)a2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)(a2 + 24);
  if (v4 != a2 + 24)
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__assign_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v4 + 8, *(std::string **)(a2 + 32), *(__int128 **)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v4 + 32), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v4 + 56), *(char **)(a2 + 80), *(_QWORD *)(a2 + 88), (uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  }
  std::function<float ()(float,float)>::operator=((_QWORD *)(v4 + 80), a2 + 104);
  return a1;
}

void std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__assign_with_size[abi:ne180100]<kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<kaldi::quasar::ConfusionNetworkArcElement<std::string>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v10;
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v8, (__int128 *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(__str, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkArcElement<std::string>>,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*,kaldi::quasar::ConfusionNetworkArcElement<std::string>*>(v8, (__int128 *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 17) < 0)
        operator delete(*(void **)(v16 - 40));
      v16 -= 40;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADC770AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADC770B4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,kaldi::quasar::ConfusionNetworkArcElement<std::string> *,0>(std::string *__str, std::string *a2, std::string *this)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type v6;

  v4 = __str;
  if (__str == a2)
    return __str;
  v5 = a2;
  do
  {
    std::string::operator=(this, v4);
    v6 = *(std::string::size_type *)((char *)v4[1].__r_.__value_.__r.__words + 6);
    this[1].__r_.__value_.__r.__words[0] = v4[1].__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)this[1].__r_.__value_.__r.__words + 6) = v6;
    this = (std::string *)((char *)this + 40);
    v4 = (std::string *)((char *)v4 + 40);
  }
  while (v4 != v5);
  return v5;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__emplace_multi<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>(_QWORD *a1, __int128 *a2)
{
  _QWORD *inserted;
  _QWORD *v5[3];

  std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>((uint64_t)a1, a2, (uint64_t)v5);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_multi(a1, v5[0]);
  v5[0] = 0;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)v5, 0);
  return inserted;
}

void sub_1ADC7717C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__construct_node<std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>> const&>@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (char *)operator new(0x98uLL);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_QWORD *)v7 = 0;
  *((_QWORD *)v7 + 1) = 0;
  std::pair<std::string const,kaldi::quasar::ConfusionNetworkArc<std::string>>::pair[abi:ne180100]((std::string *)(v7 + 16), a2);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 16));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADC7720C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__value_func<std::string ()(std::string)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADC7738C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *,kaldi::quasar::ConfusionNetworkSlot<std::string> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  __int128 v10;
  uint64_t v11;

  if (a2 == a3)
    return a2;
  v6 = a3;
  v7 = 0;
  do
  {
    v8 = a4 + v7;
    *(_WORD *)(a4 + v7) = *(_WORD *)(a2 + v7);
    std::__hash_table<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,kaldi::quasar::ConfusionNetworkArc<std::string>>>>::__move_assign(a4 + v7 + 8, (uint64_t *)(a2 + v7 + 8));
    std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__move_assign(a4 + v7 + 48, (uint64_t *)(a2 + v7 + 48));
    v9 = (void **)(a4 + v7 + 88);
    if (*(char *)(a4 + v7 + 111) < 0)
      operator delete(*v9);
    v10 = *(_OWORD *)(a2 + v7 + 88);
    *(_QWORD *)(v8 + 104) = *(_QWORD *)(a2 + v7 + 104);
    *(_OWORD *)v9 = v10;
    *(_BYTE *)(a2 + v7 + 111) = 0;
    *(_BYTE *)(a2 + v7 + 88) = 0;
    std::vector<int>::__move_assign(v8 + 112, (__n128 *)(a2 + v7 + 112));
    *(_BYTE *)(v8 + 136) = *(_BYTE *)(a2 + v7 + 136);
    v11 = a2 + v7 + 144;
    std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100]((_QWORD *)(v8 + 144), v11);
    v7 += 176;
  }
  while (v11 + 32 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*,kaldi::quasar::ConfusionNetworkSlot<std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>::construct[abi:ne180100]<kaldi::quasar::ConfusionNetworkSlot<std::string>,kaldi::quasar::ConfusionNetworkSlot<std::string>>(a1, v4, v6);
      v6 += 176;
      v4 = v12 + 176;
      v12 += 176;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::ConfusionNetworkSlot<std::string>>,kaldi::quasar::ConfusionNetworkSlot<std::string>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

uint64_t quasar::lm::nullstream(quasar::lm *this)
{
  unint64_t v1;
  uint64_t *v3;
  char v4;
  _QWORD *v5;
  _QWORD v6[2];

  v3 = &quasar::lm::nullstream(void)::os;
  v1 = atomic_load(&quasar::lm::nullstream_flag);
  if (v1 != -1)
  {
    v6[0] = &v4;
    v6[1] = &v3;
    v5 = v6;
    std::__call_once(&quasar::lm::nullstream_flag, &v5, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::lm::nullstream(void)::$_0 &&,std::ofstream **&&>>);
  }
  return quasar::lm::nullstream(void)::os;
}

fst *quasar::lm::LogMessage::LogMessage(fst *a1, int a2, const char *a3, const char *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  _QWORD *v15;
  _QWORD *v16;

  *(_BYTE *)a1 = a2 == 5;
  if (quasar::lm::gMinimumLevel <= a2)
    v8 = (_QWORD *)fst::cerr(a1);
  else
    v8 = (_QWORD *)quasar::lm::nullstream(a1);
  *((_QWORD *)a1 + 1) = v8;
  v9 = quasar::lm::operator<<(v8, a2);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (", 2);
  v11 = strlen(a4);
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a4, v11);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
  v14 = strlen(a3);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)a3, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"():", 3);
  v16 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") ", 2);
  return a1;
}

_QWORD *quasar::lm::operator<<(_QWORD *a1, int a2)
{
  const char *v3;
  uint64_t v4;

  switch(a2)
  {
    case 1:
      v3 = "TRACE";
      goto LABEL_8;
    case 2:
      v3 = "INFO";
      v4 = 4;
      goto LABEL_9;
    case 3:
      v3 = "WARNING";
      goto LABEL_6;
    case 5:
      v3 = "FATAL";
LABEL_8:
      v4 = 5;
      goto LABEL_9;
    default:
      v3 = "UNKNOWN";
LABEL_6:
      v4 = 7;
LABEL_9:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v3, v4);
      return a1;
  }
}

void quasar::lm::LogMessage::~LogMessage(quasar::lm::LogMessage *this)
{
  const std::locale::facet *v2;
  std::runtime_error *exception;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(*((_QWORD *)this + 1) + *(_QWORD *)(**((_QWORD **)this + 1) - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*(_BYTE *)this)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "LibLM encountered a fatal error.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
}

void sub_1ADC777D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void std::__call_once_proxy[abi:ne180100]<std::tuple<quasar::lm::nullstream(void)::$_0 &&,std::ofstream **&&>>(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v1 = **(_QWORD ***)(*(_QWORD *)a1 + 8);
  v2 = (_QWORD *)operator new();
  v3 = MEMORY[0x1E0DE4FB0];
  v4 = MEMORY[0x1E0DE4FB0] + 64;
  v2[52] = MEMORY[0x1E0DE4FB0] + 64;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F48] + 16);
  *v2 = v5;
  *(_QWORD *)((char *)v2 + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24));
  std::ios_base::init(v7, v2 + 1);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *v2 = v3 + 24;
  v2[52] = v4;
  MEMORY[0x1AF44CA64](v2 + 1);
  *v1 = v2;
  std::ios_base::clear((std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)), *(_DWORD *)((char *)v2 + *(_QWORD *)(*v2 - 24) + 32) | 1);
}

void sub_1ADC778C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1AF44D094](v1 + 416);
  MEMORY[0x1AF44D190](v1, 0x10F1C4067547207);
  _Unwind_Resume(a1);
}

double quasar::OnlineEmbeddingRetranslationDecoder::OnlineEmbeddingRetranslationDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  double result;

  v2 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v2 = &off_1E5D3B2E8;
  result = 0.0;
  *(_OWORD *)(v2 + 448) = 0u;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_QWORD *)(v2 + 512) = 0;
  return result;
}

void quasar::OnlineEmbeddingRetranslationDecoder::~OnlineEmbeddingRetranslationDecoder(quasar::OnlineEmbeddingRetranslationDecoder *this)
{
  void *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D3B2E8;
  v2 = (void *)*((_QWORD *)this + 62);
  if (v2)
  {
    *((_QWORD *)this + 63) = v2;
    operator delete(v2);
  }
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 61, 0);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 60, 0);
  v3 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 456);
  std::unique_ptr<quasar::Config>::reset[abi:ne180100]((void ***)this + 56, 0);
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlineEmbeddingRetranslationDecoder::~OnlineEmbeddingRetranslationDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineEmbeddingRetranslationDecoder::finishInit(quasar::OnlineEmbeddingRetranslationDecoder *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  int KeyForWord;
  int v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  __int128 v33[17];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;

  v2 = *((_QWORD *)this + 56);
  if (*(char *)(v2 + 39) < 0)
  {
    if (!*(_QWORD *)(v2 + 24))
      goto LABEL_11;
  }
  else if (!*(_BYTE *)(v2 + 39))
  {
    goto LABEL_11;
  }
  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), v2 + 16, 4, 0, (uint64_t *)v33);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 456, v33);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v33[0] + 1);
  if (*((_QWORD *)&v33[0] + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v33[0] + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v2 = *((_QWORD *)this + 56);
LABEL_11:
  quasar::QsrTextSymbolTable::init(*(const std::string **)v2, (quasar::OnlineEmbeddingRetranslationDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  quasar::OnlineEmbeddingRetranslationDecoder::initPDecOptions(*((quasar::OnlineEmbeddingRetranslationDecoder **)this + 56), (uint64_t *)v33);
  v6 = *(_QWORD *)&v33[0];
  *(_QWORD *)&v33[0] = 0;
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 60, v6);
  v7 = *(_QWORD *)&v33[0];
  *(_QWORD *)&v33[0] = 0;
  if (v7)
  {
    v8 = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions(v7);
    MEMORY[0x1AF44D190](v8, 0x1032C40806CDC9ALL);
  }
  quasar::OnlineEmbeddingRetranslationDecoder::initPDecPartialOptions(*((uint64_t **)this + 60), (uint64_t *)v33);
  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100]((uint64_t *)this + 61, *(uint64_t *)&v33[0]);
  v9 = *((_QWORD *)this + 60);
  v10 = operator new();
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TranslationBeamSearch(v10, *(_DWORD *)v9, *(_DWORD *)(v9 + 216), 0, 0, 0, 0, 0, *(float *)(v9 + 228), -1.0, 1.0, 5.0, 1, 0, 0);
  v11 = *((_QWORD *)this + 59);
  *((_QWORD *)this + 59) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    v10 = *((_QWORD *)this + 59);
  }
  v12 = *((_QWORD *)this + 56);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v36 = 0;
  v37 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(v10, v12 + 56, v13, 1, 1, &v36);
  v14 = v37;
  if (v37)
  {
    p_shared_owners = (unint64_t *)&v37->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  kaldi::SplitStringToVector((const std::string *)(*((_QWORD *)this + 56) + 144), " ", &v34);
  v17 = (void **)((char *)this + 496);
  std::vector<int>::reserve((std::vector<unsigned int> *)((char *)this + 496), 0xAAAAAAAAAAAAAAABLL * ((v35 - v34) >> 3));
  v18 = v34;
  v19 = v35;
  if (v34 == v35)
  {
    v24 = (_DWORD *)*((_QWORD *)this + 63);
  }
  else
  {
    do
    {
      KeyForWord = quasar::OnlineEmbeddingRetranslationDecoder::getKeyForWord((uint64_t)this, v18);
      v21 = KeyForWord;
      v23 = (char *)*((_QWORD *)this + 63);
      v22 = *((_QWORD *)this + 64);
      if ((unint64_t)v23 >= v22)
      {
        v25 = (char *)*v17;
        v26 = (v23 - (_BYTE *)*v17) >> 2;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v22 - (_QWORD)v25;
        if (v28 >> 1 > v27)
          v27 = v28 >> 1;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 512, v29);
          v25 = (char *)*((_QWORD *)this + 62);
          v23 = (char *)*((_QWORD *)this + 63);
        }
        else
        {
          v30 = 0;
        }
        v31 = &v30[4 * v26];
        *(_DWORD *)v31 = v21;
        v24 = v31 + 4;
        while (v23 != v25)
        {
          v32 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *((_DWORD *)v31 - 1) = v32;
          v31 -= 4;
        }
        *((_QWORD *)this + 62) = v31;
        *((_QWORD *)this + 63) = v24;
        *((_QWORD *)this + 64) = &v30[4 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(_DWORD *)v23 = KeyForWord;
        v24 = v23 + 4;
      }
      *((_QWORD *)this + 63) = v24;
      v18 += 24;
    }
    while (v18 != v19);
  }
  if (*v17 != v24 && *(float *)(*((_QWORD *)this + 60) + 168) == 2147500000.0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"When using decoder-prompt-list, you also have to set rs_beam to prune zero-probable hypotheses.", 95);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v33);
  }
  *(_QWORD *)&v33[0] = &v34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v33);
}

void sub_1ADC77D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

std::string *quasar::OnlineEmbeddingRetranslationDecoder::initPDecOptions@<X0>(quasar::OnlineEmbeddingRetranslationDecoder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5;
  std::string *result;
  float v7;

  v5 = operator new();
  kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(v5, *((_DWORD *)this + 12), 0, *((float *)this + 22));
  *a2 = v5;
  *(_DWORD *)v5 = *((_DWORD *)this + 21);
  *(_QWORD *)(v5 + 180) = 0x53F800000;
  result = std::string::operator=((std::string *)(v5 + 264), (const std::string *)this + 8);
  *(_QWORD *)(v5 + 288) = *((_QWORD *)this + 27);
  v7 = *((float *)this + 13);
  if (v7 >= 0.0)
    *(float *)(v5 + 168) = v7;
  return result;
}

void sub_1ADC77E60(_Unwind_Exception *a1)
{
  uint64_t *v1;

  std::unique_ptr<kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::initPDecPartialOptions@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(v4, a1);
  *a2 = v4;
  *(_DWORD *)(v4 + 160) = 1;
  return result;
}

void sub_1ADC77EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40806CDC9ALL);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(uint64_t a1, uint64_t a2, int a3, char a4, char a5, uint64_t *a6)
{
  _BYTE *v12;
  kaldi::Input *v13;
  uint64_t *v14;
  char v15;
  char v16;
  char v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  char v24;
  int v25;
  _BYTE v26[15];
  unsigned __int8 v27;

  v12 = (_BYTE *)(a1 + 4928);
  std::string::operator=((std::string *)(a1 + 4904), (const std::string *)a2);
  *v12 = a4;
  v12[1] = a5;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 4936), a6);
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    v25 = 2;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadMapped((_QWORD *)a1, (uint64_t)__p);
    if (v24 < 0)
      operator delete(__p[0]);
    return 1;
  }
  v27 = 0;
  v13 = (kaldi::Input *)kaldi::Input::Input(v26, a2, &v27);
  v14 = (uint64_t *)kaldi::Input::Stream(v13);
  v15 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a1, v14, v27, 0);
  v16 = v15;
  if (kaldi::g_kaldi_verbose_level < -1)
    v17 = 1;
  else
    v17 = v15;
  if ((v17 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read model from ", 26);
    v19 = *(char *)(a2 + 23);
    if (v19 >= 0)
      v20 = a2;
    else
      v20 = *(_QWORD *)a2;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a2 + 23);
    else
      v21 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  kaldi::Input::~Input((kaldi::Input *)v26);
  return (v16 & 1) != 0;
}

void sub_1ADC78078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  kaldi::Input::~Input((kaldi::Input *)(v14 - 80));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::getKeyForWord(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD v9[34];

  result = quasar::QsrTextSymbolTable::Find(**(_QWORD **)(a1 + 448), a2);
  if (result == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not find \"", 16);
    v5 = *(char *)(a2 + 23);
    if (v5 >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    if (v5 >= 0)
      v7 = *(unsigned __int8 *)(a2 + 23);
    else
      v7 = *(_QWORD *)(a2 + 8);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v6, v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "\" in base symbol table");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return result;
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::runImpl(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, std::vector<std::wstring> **a3, uint64_t a4)
{
  uint64_t v8;
  int v10;
  void *v11[3];
  void *__p[3];
  float *v13[3];
  float v14;
  float **v15;

  quasar::OnlineEmbeddingRetranslationDecoder::processData(a1, a2, (uint64_t)a3, a4, (uint64_t)&v10);
  v8 = quasar::OnlineEmbeddingRetranslationDecoder::reportFinalResult(a1, (uint64_t)a2, a3, a4, v10, (uint64_t *)v11, __p, v13, v14);
  v15 = v13;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v11[0])
  {
    v11[1] = v11[0];
    operator delete(v11[0]);
  }
  return v8;
}

void sub_1ADC781FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::tuple<int,std::vector<int>,std::vector<int>,std::vector<kaldi::quasar::TranslationUtil::NbestElement>,float>::~tuple((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::processData(uint64_t a1@<X0>, kaldi::OnlineFeatureMatrix **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  kaldi::OnlineFeatureMatrix *v10;
  unint64_t v11;
  int i;
  int updated;
  BOOL v14;
  uint64_t v15;
  int v16;
  uint64_t v18[3];
  uint64_t v19[3];
  BOOL v20;
  int v21;
  void *__p;
  void *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  float v30;
  uint64_t v31[3];
  _BYTE *v32;
  _BYTE *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  int v38[3];

  v38[0] = 0;
  v35 = 0;
  v36 = 0;
  v37 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  memset(v31, 0, sizeof(v31));
  v30 = 0.0;
  v9 = (uint64_t)a2[2];
  v10 = *a2;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v25);
  __p = 0;
  v23 = 0;
  v24 = 0;
  v21 = 0;
  v20 = 0;
  v11 = (*(int (**)(_QWORD *))(**((_QWORD **)v10 + 2) + 16))(*((_QWORD **)v10 + 2));
  for (i = 1; ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 8))(v9, (i - 2)) & 1) == 0; ++i)
  {
    kaldi::OnlineFeatureMatrix::GetFrame(v10, i - 1, v19);
    updated = quasar::OnlineEmbeddingRetranslationDecoder::calculateCtCIdForFrameAndUpdateShortListIds(a1, (uint64_t)v19, (uint64_t)&v27);
    kaldi::OnlineFeatureMatrix::GetAedFrame(v10, i - 1, v18);
    quasar::OnlineEmbeddingRetranslationDecoder::populateShrinkedAedVecs(updated, (uint64_t)v18, &v21, (uint64_t)&v32, (char **)&__p, &v20);
    if (((v33 - v32) >> 2) % v11)
      v14 = 1;
    else
      v14 = !v20;
    if (!v14 || (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 8))(v9, (i - 1)))
    {
      v20 = 0;
      v30 = quasar::OnlineEmbeddingRetranslationDecoder::runPDec(a1, (uint64_t *)&__p, v21, (i - 1), v9, (uint64_t)&v25, (int **)&v27);
      if ((*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v9 + 8))(v9, (i - 1)))
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + 480), (uint64_t)&v25, v31, 0, 0);
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWordIds(*(_QWORD **)(a1 + 472), (uint64_t)&v35);
      quasar::OnlineEmbeddingRetranslationDecoder::reportPartialResult((quasar::QsrTextSymbolTable ***)a1, (uint64_t)a2, a3, a4, (uint64_t *)&v35);
    }
    v38[0] = i;
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJiNS_6vectorIiNS_9allocatorIiEEEES6_NS3_IN5kaldi6quasar15TranslationUtil12NbestElementENS4_ISA_EEEEfEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJiS6_S6_SC_fEJEJEJRiRS6_SG_RSC_RfEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(a5, v38, (uint64_t)&v35, (uint64_t)&v32, v31, &v30);
  if (__p)
  {
    v23 = __p;
    operator delete(__p);
  }
  v25 = &unk_1E5D25A80;
  v15 = v26;
  if (v26)
  {
    v16 = *(_DWORD *)(v26 + 56) - 1;
    *(_DWORD *)(v26 + 56) = v16;
    if (!v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v27 = v31;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  if (v32)
  {
    v33 = v32;
    operator delete(v32);
  }
  if (v35)
  {
    v36 = v35;
    operator delete(v35);
  }
}

void sub_1ADC78494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char *__p,char *a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;
  void *v28;
  void *v29;

  if (__p)
  {
    a23 = __p;
    operator delete(__p);
  }
  __p = &a26;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v28 = *(void **)(v26 - 144);
  if (v28)
  {
    *(_QWORD *)(v26 - 136) = v28;
    operator delete(v28);
  }
  v29 = *(void **)(v26 - 120);
  if (v29)
  {
    *(_QWORD *)(v26 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::reportFinalResult(uint64_t a1, uint64_t a2, std::vector<std::wstring> **a3, uint64_t a4, int a5, uint64_t *a6, _QWORD *a7, float **a8, float a9)
{
  uint64_t *value;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::vector<std::wstring> *v31;
  std::vector<std::wstring> *v32;
  char *v33;
  uint64_t *v34;
  unint64_t v35;
  float *v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  int i;
  unsigned int v41;
  uint64_t v42;
  unint64_t v43;
  unsigned int v44;
  int v45;
  float v46;
  int v47;
  uint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  int v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  uint64_t *v62;
  int v63;
  uint64_t *v67;
  int v68;
  int v69;
  void *v70;
  uint64_t v71;
  void **v72;
  uint64_t *v73;
  __int128 v74;
  std::wstring *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(a1 + 456));
  quasar::SymbolTableList::clear((quasar::SymbolTableList *)(*a3)[19].__end_cap_.__value_);
  value = (uint64_t *)(*a3)[19].__end_cap_.__value_;
  v17 = *(unint64_t **)(a1 + 448);
  v19 = *v17;
  v18 = (std::__shared_weak_count *)v17[1];
  v76 = v19;
  v77 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(value, &v76, 0, -1);
  v22 = v77;
  if (v77)
  {
    v23 = (unint64_t *)&v77->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v74);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[13].__end_, &v74);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v74);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)&(*a3)[6].__end_, &v74);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v74 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = *a3;
  LODWORD(v31[24].__begin_) = a5;
  BYTE4(v31[24].__begin_) = 1;
  quasar::OnlineEmbeddingRetranslationDecoder::getBestWords((quasar::QsrTextSymbolTable ***)a1, a6, (uint64_t)&v74);
  v32 = *a3;
  std::vector<std::string>::__vdeallocate(*a3 + 2);
  *(_OWORD *)&v32[2].__begin_ = v74;
  v32[2].__end_cap_.__value_ = v75;
  v75 = 0;
  v74 = 0uLL;
  v72 = (void **)&v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v72);
  v33 = (char *)&(*a3)[3];
  if (v33 != (char *)a6)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v33, (char *)*a6, a6[1], (a6[1] - *a6) >> 2);
  v67 = (uint64_t *)a3;
  if (*a8 == a8[1])
  {
    fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v72);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates((uint64_t)&v72);
    v47 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)&v72);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
    v48 = v73;
    *((_DWORD *)v73 + 22) = v47;
    v49 = (*(uint64_t (**)(uint64_t *))(*v48 + 24))(v48);
    v50 = 0;
    v48[1] = v49 & 0xCCFFFFF0007 | (((v49 >> 35) & 1) << 37) | v48[1] & 4;
    while (1)
    {
      if (v50 >= (uint64_t)(a7[1] - *a7) >> 2)
      {
        v52 = *a6;
        v53 = a6[1] - *a6;
        if (v50 >= v53 >> 2)
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
          LODWORD(v74) = 0;
          *((float *)&v74 + 1) = a9;
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v73, v47, (uint64_t *)&v74);
          goto LABEL_44;
        }
        v51 = 0;
      }
      else
      {
        v51 = *(_DWORD *)(*a7 + 4 * v50);
        v52 = *a6;
        v53 = a6[1] - *a6;
      }
      if (v50 >= v53 >> 2)
        v54 = 0;
      else
        v54 = *(_DWORD *)(v52 + 4 * v50);
      v55 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)&v72);
      v74 = __PAIR64__(v54, v51);
      LODWORD(v75) = v55;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(v73, v47, (float *)&v74);
      ++v50;
      v47 = v55;
    }
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v72);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::DeleteStates((uint64_t)&v72);
  v69 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)&v72);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
  v34 = v73;
  *((_DWORD *)v73 + 22) = v69;
  v35 = (*(uint64_t (**)(uint64_t *))(*v34 + 24))(v34);
  v34[1] = v35 & 0xCCFFFFF0007 | (((v35 >> 35) & 1) << 37) | v34[1] & 4;
  v68 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)&v72);
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
  *(_QWORD *)&v74 = 0;
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v73, v68, (uint64_t *)&v74);
  v36 = *a8;
  v37 = (uint64_t *)a8[1];
  if (*a8 != (float *)v37)
  {
LABEL_23:
    v38 = 0;
    v39 = 24;
    for (i = v69; ; i = v45)
    {
      if (v38 >= (uint64_t)(a7[1] - *a7) >> 2)
      {
        v42 = *(_QWORD *)v36;
        v43 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v36 + 1) - *(_QWORD *)v36) >> 4);
        if (v38 >= v43)
        {
          v46 = v36[6] + v36[7];
          *(_QWORD *)&v74 = 0;
          DWORD2(v74) = 0;
          *((float *)&v74 + 3) = v46;
          LODWORD(v75) = v68;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(v73, i, (float *)&v74);
          v36 += 68;
          if (v36 == (float *)v37)
            break;
          goto LABEL_23;
        }
        v41 = 0;
      }
      else
      {
        v41 = *(_DWORD *)(*a7 + 4 * v38);
        v42 = *(_QWORD *)v36;
        v43 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*((_QWORD *)v36 + 1) - *(_QWORD *)v36) >> 4);
      }
      if (v38 >= v43)
        v44 = 0;
      else
        v44 = *(_DWORD *)(v42 + v39);
      v45 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)&v72);
      v74 = __PAIR64__(v44, v41);
      LODWORD(v75) = v45;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v72);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc(v73, i, (float *)&v74);
      ++v38;
      v39 += 240;
    }
  }
LABEL_44:
  v56 = v67;
  fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(*(_QWORD *)(*v67 + 320), (uint64_t)&v72);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(*(_QWORD *)(*v56 + 320), *(_QWORD *)(*v56 + 152), 1);
  kaldi::quasar::DeterminizeCompactLattice(*(_QWORD *)(*v67 + 152));
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v74);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v70);
  kaldi::CompactLatticeShortestPath(*(_QWORD **)(*v56 + 152), (uint64_t)&v74, 0, (uint64_t *)(*v56 + 448));
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v74, (uint64_t)&v70, 1);
  v57 = quasar::Decoder::reportResults((uint64_t)&v70, v67, a4, a2);
  v70 = &unk_1E5D25580;
  v58 = v71;
  if (v71)
  {
    v59 = *(_DWORD *)(v71 + 56) - 1;
    *(_DWORD *)(v71 + 56) = v59;
    if (!v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  }
  *(_QWORD *)&v74 = &unk_1E5D25800;
  v60 = *((_QWORD *)&v74 + 1);
  if (*((_QWORD *)&v74 + 1))
  {
    v61 = *(_DWORD *)(*((_QWORD *)&v74 + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v74 + 1) + 56) = v61;
    if (!v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
  v72 = (void **)&unk_1E5D25580;
  v62 = v73;
  if (v73)
  {
    v63 = *((_DWORD *)v73 + 14) - 1;
    *((_DWORD *)v73 + 14) = v63;
    if (!v63)
      (*(void (**)(uint64_t *))(*v62 + 8))(v62);
  }
  return v57;
}

void sub_1ADC78B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _DWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  int v22;

  if (a16)
  {
    v22 = a16[14] - 1;
    a16[14] = v22;
    if (!v22)
      (*(void (**)(_DWORD *))(*(_QWORD *)a16 + 8))(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::tuple<int,std::vector<int>,std::vector<int>,std::vector<kaldi::quasar::TranslationUtil::NbestElement>,float>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v5;

  v5 = (void **)(a1 + 56);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&v5);
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return a1;
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::calculateCtCIdForFrameAndUpdateShortListIds(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  _QWORD **v4;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  float v11;
  uint64_t *v12;
  float v13;
  uint64_t *v14;
  uint64_t *v15;
  BOOL v16;
  float v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  int v25;
  unint64_t v26;
  int *v27;
  _DWORD *v28;
  int *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  int *v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  float v40;
  uint64_t *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  int v46;
  int v47;
  uint64_t *v48;
  _QWORD *v49;
  unint64_t v50;

  v3 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(*(_QWORD *)(a1 + 448) + 40) > v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v48, "Configured ctcShortListBeam is higher than provided frame dim");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v48);
  }
  v49 = 0;
  v50 = 0;
  v4 = &v49;
  v48 = (uint64_t *)&v49;
  v47 = 0;
  if (v3 > 0)
  {
    v8 = 0;
    do
    {
      v46 = *(_DWORD *)(*(_QWORD *)a2 + 4 * v8);
      std::__tree<std::pair<float,int>>::__emplace_multi<float,int &>(&v48, &v46, &v47);
      if (v50 > *(int *)(*(_QWORD *)(a1 + 448) + 40))
      {
        v9 = v48;
        std::__tree<std::string>::__remove_node_pointer(&v48, v48);
        operator delete(v9);
      }
      v8 = v47 + 1;
      v47 = v8;
    }
    while (v8 < *(_DWORD *)(a2 + 8));
    v10 = v48;
    if (v48 != (uint64_t *)&v49)
    {
      v11 = 0.0;
      v12 = v48;
      do
      {
        v13 = expf(*((float *)v12 + 7));
        v14 = (uint64_t *)v12[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (uint64_t *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (uint64_t *)v12[2];
            v16 = *v15 == (_QWORD)v12;
            v12 = v15;
          }
          while (!v16);
        }
        v11 = v11 + v13;
        v12 = v15;
      }
      while (v15 != (uint64_t *)&v49);
      if (v10 != (uint64_t *)&v49)
      {
        v17 = 0.0;
        v18 = (uint64_t *)&v49;
        do
        {
          if ((float)(v17 / v11) > *(float *)(*(_QWORD *)(a1 + 448) + 44))
            break;
          v19 = (uint64_t *)*v18;
          v20 = *v18;
          v21 = v18;
          if (*v18)
          {
            do
            {
              v22 = v20;
              v20 = *(_QWORD *)(v20 + 8);
            }
            while (v20);
          }
          else
          {
            do
            {
              v22 = v21[2];
              v16 = *(_QWORD *)v22 == (_QWORD)v21;
              v21 = (uint64_t *)v22;
            }
            while (v16);
          }
          if (*(int *)(v22 + 32) >= 1)
          {
            v23 = v18;
            if (v19)
            {
              do
              {
                v24 = v19;
                v19 = (uint64_t *)v19[1];
              }
              while (v19);
            }
            else
            {
              do
              {
                v24 = (uint64_t *)v23[2];
                v16 = *v24 == (_QWORD)v23;
                v23 = v24;
              }
              while (v16);
            }
            v25 = *((_DWORD *)v24 + 8) - 1;
            v27 = *(int **)(a3 + 8);
            v26 = *(_QWORD *)(a3 + 16);
            if ((unint64_t)v27 >= v26)
            {
              v29 = *(int **)a3;
              v30 = ((uint64_t)v27 - *(_QWORD *)a3) >> 2;
              v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v32 = v26 - (_QWORD)v29;
              if (v32 >> 1 > v31)
                v31 = v32 >> 1;
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                v33 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v33 = v31;
              if (v33)
              {
                v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a3 + 16, v33);
                v29 = *(int **)a3;
                v27 = *(int **)(a3 + 8);
              }
              else
              {
                v34 = 0;
              }
              v35 = (int *)&v34[4 * v30];
              *v35 = v25;
              v28 = v35 + 1;
              while (v27 != v29)
              {
                v36 = *--v27;
                *--v35 = v36;
              }
              *(_QWORD *)a3 = v35;
              *(_QWORD *)(a3 + 8) = v28;
              *(_QWORD *)(a3 + 16) = &v34[4 * v33];
              if (v29)
                operator delete(v29);
            }
            else
            {
              *v27 = v25;
              v28 = v27 + 1;
            }
            *(_QWORD *)(a3 + 8) = v28;
            v19 = (uint64_t *)*v18;
          }
          v37 = v19;
          v38 = v18;
          if (v19)
          {
            do
            {
              v39 = (uint64_t)v37;
              v37 = (uint64_t *)v37[1];
            }
            while (v37);
          }
          else
          {
            do
            {
              v39 = v38[2];
              v16 = *(_QWORD *)v39 == (_QWORD)v38;
              v38 = (uint64_t *)v39;
            }
            while (v16);
          }
          v40 = expf(*(float *)(v39 + 28));
          if (v19)
          {
            do
            {
              v41 = v19;
              v19 = (uint64_t *)v19[1];
            }
            while (v19);
          }
          else
          {
            do
            {
              v41 = (uint64_t *)v18[2];
              v16 = *v41 == (_QWORD)v18;
              v18 = v41;
            }
            while (v16);
          }
          v17 = v17 + v40;
          v18 = v41;
        }
        while (v41 != v48);
      }
    }
  }
  if (v49)
  {
    v42 = v49;
    do
    {
      v43 = v42;
      v42 = (_QWORD *)v42[1];
    }
    while (v42);
  }
  else
  {
    do
    {
      v43 = v4[2];
      v16 = *v43 == (_QWORD)v4;
      v4 = (_QWORD **)v43;
    }
    while (v16);
  }
  v44 = *((unsigned int *)v43 + 8);
  std::__tree<int>::destroy((uint64_t)&v48, v49);
  return v44;
}

void sub_1ADC78FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::populateShrinkedAedVecs(int a1, uint64_t a2, int *a3, uint64_t a4, char **a5, BOOL *a6)
{
  int v12;
  float v13;
  unint64_t v14;
  char *v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;

  v12 = *a3;
  if (*a3)
  {
    if (*(_DWORD *)(*(_QWORD *)(a4 + 8) - 4) == a1)
    {
      kaldi::VectorBase<float>::AddVec<float>((uint64_t)(a5[1] - 24), (const float **)a2, 1.0);
      goto LABEL_23;
    }
    if (v12 >= 1)
    {
      v13 = 1.0 / (double)v12;
      kaldi::VectorBase<float>::Scale((uint64_t)(a5[1] - 24), v13);
    }
  }
  *a3 = 0;
  v14 = (unint64_t)a5[2];
  v15 = a5[1];
  if ((unint64_t)v15 >= v14)
  {
    v17 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a5) >> 3);
    v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (_QWORD)*a5) >> 3);
    if (2 * v19 > v18)
      v18 = 2 * v19;
    if (v19 >= 0x555555555555555)
      v20 = 0xAAAAAAAAAAAAAAALL;
    else
      v20 = v18;
    if (v20)
      v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a5 + 2), v20);
    else
      v21 = 0;
    v22 = &v21[24 * v17];
    v23 = &v21[24 * v20];
    *(_QWORD *)v22 = 0;
    *((_QWORD *)v22 + 1) = 0;
    *((_QWORD *)v22 + 2) = 0;
    *(_QWORD *)v22 = *(_QWORD *)a2;
    *((_DWORD *)v22 + 2) = *(_DWORD *)(a2 + 8);
    v16 = v22 + 24;
    v25 = *a5;
    v24 = a5[1];
    if (v24 != *a5)
    {
      do
      {
        *((_QWORD *)v22 - 3) = 0;
        *((_QWORD *)v22 - 2) = 0;
        v22 -= 24;
        *((_QWORD *)v22 + 2) = 0;
        v26 = *((_QWORD *)v24 - 3);
        v24 -= 24;
        *(_QWORD *)v22 = v26;
        *((_DWORD *)v22 + 2) = *((_DWORD *)v24 + 2);
      }
      while (v24 != v25);
      v24 = *a5;
    }
    *a5 = v22;
    a5[1] = v16;
    a5[2] = v23;
    if (v24)
      operator delete(v24);
  }
  else
  {
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = *(_QWORD *)a2;
    *((_DWORD *)v15 + 2) = *(_DWORD *)(a2 + 8);
    v16 = v15 + 24;
  }
  a5[1] = v16;
LABEL_23:
  ++*a3;
  v27 = *(_QWORD *)(a4 + 16);
  v28 = *(_DWORD **)(a4 + 8);
  if ((unint64_t)v28 >= v27)
  {
    v30 = *(_DWORD **)a4;
    v31 = ((uint64_t)v28 - *(_QWORD *)a4) >> 2;
    v32 = v31 + 1;
    if ((unint64_t)(v31 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v33 = v27 - (_QWORD)v30;
    if (v33 >> 1 > v32)
      v32 = v33 >> 1;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
      v34 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v34);
      v30 = *(_DWORD **)a4;
      v28 = *(_DWORD **)(a4 + 8);
    }
    else
    {
      v35 = 0;
    }
    v36 = &v35[4 * v31];
    v37 = &v35[4 * v34];
    *(_DWORD *)v36 = a1;
    v29 = v36 + 4;
    while (v28 != v30)
    {
      v38 = *--v28;
      *((_DWORD *)v36 - 1) = v38;
      v36 -= 4;
    }
    *(_QWORD *)a4 = v36;
    *(_QWORD *)(a4 + 8) = v29;
    *(_QWORD *)(a4 + 16) = v37;
    if (v30)
      operator delete(v30);
  }
  else
  {
    *v28 = a1;
    v29 = v28 + 1;
  }
  *(_QWORD *)(a4 + 8) = v29;
  *a6 = (*a6 | a1) != 0;
}

float quasar::OnlineEmbeddingRetranslationDecoder::runPDec(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int **a7)
{
  uint64_t v12;
  int *v13;
  uint64_t v14;
  float v15;
  _BYTE v17[48];

  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 8))(a5, a4))
    v12 = 480;
  else
    v12 = 488;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + v12), a6);
  std::__sort<std::__less<int,int> &,int *>();
  v13 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>(*a7, a7[1]);
  if (a7[1] != v13)
    a7[1] = v13;
  quasar::OnlineEmbeddingRetranslationDecoder::prepareShrinkedEmbeddings(a1, a2, a3, (uint64_t)v17);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadEmbeddings<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(*(_QWORD *)(a1 + 472), *(_QWORD *)(a1 + v12), (uint64_t)v17, a7);
  v14 = *(_QWORD *)(a1 + 472);
  if (v14 + 5840 != a1 + 496)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v14 + 5840), *(char **)(a1 + 496), *(_QWORD *)(a1 + 504), (uint64_t)(*(_QWORD *)(a1 + 504) - *(_QWORD *)(a1 + 496)) >> 2);
    v14 = *(_QWORD *)(a1 + 472);
  }
  v15 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(v14, *(_QWORD *)(a1 + v12), **(_DWORD **)(a1 + v12), 1);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v17);
  return v15;
}

void sub_1ADC793BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::LatticeToNbest<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  _BOOL4 v23;
  uint64_t *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  float v28;
  float v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  _QWORD **v79;
  _QWORD *v80;
  _QWORD **v81;
  BOOL v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type size;
  std::string *v87;
  std::string *v88;
  char *v89;
  std::string::size_type v90;
  float v91;
  float v92;
  _DWORD *v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t result;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  int v104;
  _BYTE *v105;
  std::string __p;
  float v108;
  float v109;
  std::string::size_type v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD v114[3];
  char v115[96];
  std::string v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[8];
  __int128 v123;
  _QWORD v124[8];
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _BYTE *v128;
  uint64_t v129;
  unsigned int v130;
  void *__src;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  std::string *v135;
  unint64_t v136;
  _QWORD **v137;
  _QWORD *v138[2];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  std::string::size_type v144;
  void *v145[3];
  int32x2_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  float v152;
  int v153;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v150);
  v10 = *(_DWORD *)(a2 + 172);
  if (v10 <= 0)
    v10 = *(_DWORD *)(a2 + 160);
  v146 = vdup_n_s32(0x7F800000u);
  v148 = 0;
  v149 = 0;
  v147 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a3, (uint64_t)&v150, v10 + 1, 0, 0, (uint64_t *)&v146, -1, 0);
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, (uint64_t)&v144, 0.00097656);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v142);
  v140 = 0;
  v139 = 0;
  v141 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, &v139);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 560);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)&v137);
  v12 = v140;
  v13 = v139;
  if (v140 == v139 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Didn't extract any paths from the lattice", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    v12 = v140;
    v13 = v139;
  }
  if (v12 != v13)
  {
    v14 = 0;
    v105 = (_BYTE *)(a1 + 5236);
    v101 = a4;
    do
    {
      v15 = (_QWORD *)(v13 + 16 * v14);
      fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)v15, (uint64_t)&__p, 0.00097656);
      v144 = __p.__r_.__value_.__r.__words[0];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v145, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
      v102 = v14;
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v135 = 0;
      v134 = 0;
      v136 = 0;
      v16 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
      v17 = 0;
      v132 = 0;
      __src = 0;
      v104 = 1;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      v133 = 0;
      v21 = 0.0;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&__p, v15, v16);
        LODWORD(v125) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
        LODWORD(v116.__r_.__value_.__l.__data_) = __p.__r_.__value_.__l.__data_;
        v153 = 2139095040;
        v152 = INFINITY;
        v22.n128_u32[0] = (unsigned __int32)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ == INFINITY)
        {
          v22.n128_u32[0] = v125;
          v23 = *(float *)&v125 == v152;
        }
        else
        {
          v23 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if (!v23)
          break;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48))
          v24 = 0;
        else
          v24 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48);
        v125 = *v24;
        v126 = v24[1];
        v128 = 0;
        v129 = 0;
        v127 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v127, (const void *)v24[2], v24[3], (v24[3] - v24[2]) >> 2);
        v16 = *((unsigned int *)v24 + 10);
        v130 = v16;
        if ((v125 & 0x80000000) != 0)
        {
          v104 = -(int)v125;
          LODWORD(v125) = 0;
        }
        v25 = HIDWORD(v125);
        if (!HIDWORD(v125))
        {
          v29 = *((float *)&v126 + 1);
          v28 = *(float *)&v126;
          v18 = v18 + *(float *)&v126;
          v19 = v19 + *((float *)&v126 + 1);
          goto LABEL_137;
        }
        v26 = v132;
        if ((unint64_t)v132 >= v133)
        {
          v30 = __src;
          v31 = ((char *)v132 - (_BYTE *)__src) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v133 - (_QWORD)__src;
          if ((uint64_t)(v133 - (_QWORD)__src) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v34);
            v26 = v132;
            v30 = __src;
            v25 = HIDWORD(v125);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v25;
          v27 = v36 + 4;
          while (v26 != v30)
          {
            v37 = *--v26;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          __src = v36;
          v132 = v27;
          v133 = (unint64_t)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v132 = HIDWORD(v125);
          v27 = v26 + 1;
        }
        v132 = v27;
        memset(&v116, 0, sizeof(v116));
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        memset(v122, 0, sizeof(v122));
        v123 = 0u;
        memset(v124, 0, 60);
        v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122[1], 1uLL);
        v40 = (char *)v122[0];
        v41 = (char *)*((_QWORD *)&v121 + 1);
        *v39 = v125;
        v42 = v39 + 1;
        v43 = v39;
        while (v40 != v41)
        {
          v44 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *--v43 = v44;
        }
        *((_QWORD *)&v121 + 1) = v43;
        v122[0] = v39 + 1;
        v122[1] = &v39[v38];
        if (v41)
          operator delete(v41);
        v122[0] = v42;
        v45 = (char *)v124[5];
        if (v124[5] >= v124[6])
        {
          v47 = (char *)v124[4];
          v48 = (uint64_t)(v124[5] - v124[4]) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = v124[6] - v124[4];
          if ((uint64_t)(v124[6] - v124[4]) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[6], v51);
            v45 = (char *)v124[5];
            v47 = (char *)v124[4];
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = HIDWORD(v125);
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          v124[4] = v53;
          v124[5] = v46;
          v124[6] = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v124[5] = HIDWORD(v125);
          v46 = v45 + 4;
        }
        v124[5] = v46;
        v55 = HIDWORD(v126);
        v56 = (char *)v124[2];
        if (v124[2] >= v124[3])
        {
          v58 = (char *)v124[1];
          v59 = (uint64_t)(v124[2] - v124[1]) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = v124[3] - v124[1];
          if ((uint64_t)(v124[3] - v124[1]) >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[3], v62);
            v56 = (char *)v124[2];
            v58 = (char *)v124[1];
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[4 * v59];
          *(_DWORD *)v64 = v55;
          v57 = v64 + 4;
          while (v56 != v58)
          {
            v65 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
          v124[1] = v64;
          v124[2] = v57;
          v124[3] = &v63[4 * v62];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *(_DWORD *)v124[2] = HIDWORD(v126);
          v57 = v56 + 4;
        }
        v124[2] = v57;
        v122[6] = v122[5];
        memset(&__p, 0, sizeof(__p));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v127, (uint64_t)v128, (v128 - (_BYTE *)v127) >> 2);
        if (v122[5])
        {
          v122[6] = v122[5];
          operator delete((void *)v122[5]);
        }
        *(std::string *)&v122[5] = __p;
        v66 = (char *)*((_QWORD *)&v123 + 1);
        if (*((_QWORD *)&v123 + 1) >= v124[0])
        {
          v68 = (char *)v123;
          v69 = (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 2;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v71 = v124[0] - v123;
          if ((uint64_t)(v124[0] - v123) >> 1 > v70)
            v70 = v71 >> 1;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v124, v72);
            v66 = (char *)*((_QWORD *)&v123 + 1);
            v68 = (char *)v123;
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[4 * v69];
          *(_DWORD *)v74 = v17;
          v67 = v74 + 4;
          while (v66 != v68)
          {
            v75 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(_QWORD *)&v123 = v74;
          *((_QWORD *)&v123 + 1) = v67;
          v124[0] = &v73[4 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          **((_DWORD **)&v123 + 1) = v17;
          v67 = v66 + 4;
        }
        *((_QWORD *)&v123 + 1) = v67;
        v29 = *((float *)&v126 + 1);
        v28 = *(float *)&v126;
        *(_QWORD *)&v121 = v126;
        v117 = HIDWORD(v125) - 1;
        if (HIDWORD(v125) == *(_DWORD *)(a1 + 5184) + 1)
        {
          v76 = *(unsigned __int8 *)(a2 + 307);
          v77 = *(_BYTE *)(a2 + 307) == 0;
          if (a5 && *v105 && !*(_BYTE *)(a2 + 307))
          {
            if (!*(_BYTE *)(a1 + 5240)
              || !kaldi::quasar::PhraseBook::Find(*(_QWORD **)(a1 + 392), *a5 + 24 * (int)v125, (uint64_t)&v116))
            {
              std::string::operator=(&v116, (const std::string *)(*a5 + 24 * (int)v125));
            }
            if (v11)
            {
              v78 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 96))(v11, &v116);
              if (v78 != -1)
                v117 = v78 - 1;
            }
            goto LABEL_114;
          }
          if (a6 && *v105)
          {
            v89 = *(char **)a6;
            v117 = *(_DWORD *)(*(_QWORD *)a6 + 4 * (int)v125);
            if (!v76)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11, *(int *)&v89[4 * (int)v125] + 1);
              goto LABEL_111;
            }
            goto LABEL_114;
          }
        }
        else
        {
          v77 = *(_BYTE *)(a2 + 307) == 0;
        }
        if (v11 && v77)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11);
LABEL_111:
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          v116 = __p;
        }
LABEL_114:
        v79 = v137;
        if (v137 != v138)
        {
          while (*((_DWORD *)v79 + 7) != v117)
          {
            v80 = v79[1];
            if (v80)
            {
              do
              {
                v81 = (_QWORD **)v80;
                v80 = (_QWORD *)*v80;
              }
              while (v80);
            }
            else
            {
              do
              {
                v81 = (_QWORD **)v79[2];
                v82 = *v81 == v79;
                v79 = v81;
              }
              while (!v82);
            }
            v79 = v81;
            if (v81 == v138)
              goto LABEL_133;
          }
          if (v79 != v138)
          {
            if (kaldi::g_kaldi_verbose_level >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown replacement disabled for: ", 34);
              v83 = (_QWORD *)std::ostream::operator<<();
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" / ", 3);
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v85 = &v116;
              else
                v85 = (std::string *)v116.__r_.__value_.__r.__words[0];
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
              else
                size = v116.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, size);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            MEMORY[0x1AF44C914](&v116, "");
            v117 = *(_DWORD *)(a1 + 5184);
          }
        }
LABEL_133:
        v87 = v135;
        if ((unint64_t)v135 >= v136)
        {
          v88 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v134, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
        }
        else
        {
          kaldi::quasar::TranslationUtil::PathElement::PathElement(v135, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
          v88 = v87 + 10;
        }
        ++v17;
        v135 = v88;
        v16 = v130;
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v116);
LABEL_137:
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v21 = v21 + v29;
        v20 = v20 + v28;
      }
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(*v15 + 32))(&__p, v15, v16, v22);
      v90 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&__p, v134, (uint64_t)v135, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v135 - v134) >> 4));
      v108 = v20 + *(float *)&v90;
      v109 = v21 + *((float *)&v90 + 1);
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&v116, v15, v16);
      v92 = *((float *)v116.__r_.__value_.__r.__words + 1);
      v91 = *(float *)&v116.__r_.__value_.__l.__data_;
      v110 = v116.__r_.__value_.__r.__words[0];
      if (v116.__r_.__value_.__l.__size_)
      {
        v116.__r_.__value_.__r.__words[2] = v116.__r_.__value_.__l.__size_;
        operator delete((void *)v116.__r_.__value_.__l.__size_);
        v92 = *((float *)&v110 + 1);
        v91 = *(float *)&v110;
      }
      *(float *)&v110 = v18 + v91;
      *((float *)&v110 + 1) = v19 + v92;
      v112 = v104;
      if (a5)
        kaldi::JoinVectorToString<std::string>(a5, " ", (uint64_t)&v113);
      if (a6)
      {
        if (v114 != (_QWORD *)a6)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v114, *(char **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
        v111 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
        v93 = (_DWORD *)v114[0];
        v94 = (_DWORD *)v114[1];
        while (v93 != v94)
          ++*v93++;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v115, (char *)__src, (uint64_t)v132, ((char *)v132 - (_BYTE *)__src) >> 2);
      v95 = v101[1];
      if (v95 >= v101[2])
      {
        v96 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v101, (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v101[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
        v96 = v95 + 272;
        v101[1] = v95 + 272;
      }
      v101[1] = v96;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      if (__src)
      {
        v132 = __src;
        operator delete(__src);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 = v102 + 1;
      v13 = v139;
    }
    while (v102 + 1 != (v140 - v139) >> 4);
  }
  std::__tree<int>::destroy((uint64_t)&v137, v138[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v142 = &unk_1E5D25A80;
  v97 = v143;
  if (v143)
  {
    v98 = *(_DWORD *)(v143 + 56) - 1;
    *(_DWORD *)(v143 + 56) = v98;
    if (!v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  }
  if (v145[0])
  {
    v145[1] = v145[0];
    operator delete(v145[0]);
  }
  v150 = &unk_1E5D25A80;
  result = v151;
  if (v151)
  {
    v100 = *(_DWORD *)(v151 + 56) - 1;
    *(_DWORD *)(v151 + 56) = v100;
    if (!v100)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADC7A028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  int v35;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (_QWORD *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  *(_QWORD *)(v29 - 240) = &unk_1E5D25A80;
  v31 = *(_DWORD **)(v29 - 232);
  if (v31)
  {
    v32 = v31[14] - 1;
    v31[14] = v32;
    if (!v32)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  }
  v33 = *(void **)(v29 - 216);
  if (v33)
  {
    *(_QWORD *)(v29 - 208) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v29 - 160) = &unk_1E5D25A80;
  v34 = *(_DWORD **)(v29 - 152);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::GetCurrentBestWordIds(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  _DWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  _DWORD *v21;
  unint64_t v23;
  int v24;
  BOOL v25;

  v4 = (_QWORD *)a1[723];
  if (v4 == (_QWORD *)a1[724])
    v5 = (unsigned int *)(a1 + 729);
  else
    v5 = (unsigned int *)(*v4 + 32);
  v6 = *v5;
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)a2;
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    if ((int)v6 >= 1)
    {
      v8 = (_QWORD *)(a2 + 16);
      v9 = a1[726];
      do
      {
        v10 = (_DWORD *)(v9 + 8 * v6 + 4);
        if ((unint64_t)v7 >= *v8)
        {
          v11 = *(_DWORD **)a2;
          v12 = ((uint64_t)v7 - *(_QWORD *)a2) >> 2;
          v13 = v12 + 1;
          if ((unint64_t)(v12 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v14 = *v8 - (_QWORD)v11;
          if (v14 >> 1 > v13)
            v13 = v14 >> 1;
          if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
            v15 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
          {
            v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
            v11 = *(_DWORD **)a2;
            v7 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[4 * v12];
          *(_DWORD *)v17 = *v10;
          v18 = v17 + 4;
          while (v7 != v11)
          {
            v19 = *--v7;
            *((_DWORD *)v17 - 1) = v19;
            v17 -= 4;
          }
          *(_QWORD *)a2 = v17;
          *(_QWORD *)(a2 + 8) = v18;
          *(_QWORD *)(a2 + 16) = &v16[4 * v15];
          if (v11)
            operator delete(v11);
          v7 = v18;
        }
        else
        {
          *v7++ = *v10;
        }
        *(_QWORD *)(a2 + 8) = v7;
        v9 = a1[726];
        v6 = *(unsigned int *)(v9 + 8 * v6);
      }
      while ((int)v6 > 0);
      v20 = *(_DWORD **)a2;
      v21 = v7 - 1;
      if (*(_DWORD **)a2 != v7 && v21 > v20)
      {
        v23 = (unint64_t)(v20 + 1);
        do
        {
          v24 = *(_DWORD *)(v23 - 4);
          *(_DWORD *)(v23 - 4) = *v21;
          *v21-- = v24;
          v25 = v23 >= (unint64_t)v21;
          v23 += 4;
        }
        while (!v25);
      }
    }
  }
}

void quasar::OnlineEmbeddingRetranslationDecoder::reportPartialResult(quasar::QsrTextSymbolTable ***a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  void **v8;
  void *__p;
  char v10;
  _QWORD v11[3];
  _QWORD v12[3];
  _QWORD v13[3];
  _BYTE v14[24];

  if (*(_BYTE *)(a2 + 561))
  {
    v6 = *(_QWORD *)(*(_QWORD *)a3 + 560);
    quasar::OnlineEmbeddingRetranslationDecoder::getBestWords(a1, a5, (uint64_t)v14);
    v7 = *(unsigned int *)(*(_QWORD *)a4 + 12);
    memset(v13, 0, sizeof(v13));
    memset(v12, 0, sizeof(v12));
    memset(v11, 0, sizeof(v11));
    LOBYTE(v8) = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, "▁");
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD *, _QWORD *, _QWORD *, _WORD, void ***))(*(_QWORD *)v6 + 24))(v6, v14, v7, 1, 0, 0, v13, v12, v11, 0, &v8);
    if (v10 < 0)
      operator delete(__p);
    v8 = (void **)v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    v8 = (void **)v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    v8 = (void **)v13;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v8);
    v8 = (void **)v14;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

void sub_1ADC7A484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  if (a19 < 0)
    operator delete(__p);
  a13 = &a20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = (char *)(v23 - 80);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  a13 = (char *)(v23 - 56);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void **quasar::OnlineEmbeddingRetranslationDecoder::registerParams(void ***this, quasar::SystemConfig *a2)
{
  quasar::Config *v4;

  v4 = (quasar::Config *)operator new();
  quasar::Config::Config(v4, a2);
  return std::unique_ptr<quasar::Config>::reset[abi:ne180100](this + 56, (void **)v4);
}

void sub_1ADC7A53C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40C82A61FELL);
  _Unwind_Resume(a1);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Init<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  int v19;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18);
  }
  *(_QWORD *)(a1 + 5712) = a3;
  kaldi::quasar::Encdec::Start(*(_QWORD *)(a1 + 136), *(_DWORD *)(a2 + 312), (const std::string *)(a2 + 112));
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 224))(*(_QWORD *)(a1 + 5712));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 5712) + 176))(*(_QWORD *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 5720) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  v8 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 5760) = 0x3F8000004F000000;
  if (v8 == 1)
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare((uint64_t)&v18, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(_QWORD *)(a1 + 5768) = v18;
  *(_DWORD *)(a1 + 5776) = v19;
  *(_QWORD *)(a1 + 5792) = *(_QWORD *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  v9 = *(_QWORD **)(a1 + 5136);
  v10 = *(_QWORD **)(a1 + 5128);
  if (v9 != v10)
  {
    v11 = v9 - 6;
    v12 = v9 - 6;
    do
    {
      v13 = *v12;
      v12 -= 6;
      (*(void (**)(_QWORD *))(v13 + 16))(v11);
      v14 = v11 == v10;
      v11 = v12;
    }
    while (!v14);
  }
  *(_QWORD *)(a1 + 5136) = v10;
  v15 = *(_QWORD *)(a1 + 5160);
  v16 = *(_QWORD *)(a1 + 5152);
  while (v15 != v16)
    v15 = kaldi::Matrix<float>::~Matrix(v15 - 40);
  *(_QWORD *)(a1 + 5160) = v16;
  result = 0.0;
  *(_QWORD *)(a1 + 5832) = 0;
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
  return result;
}

void sub_1ADC7A778(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineEmbeddingRetranslationDecoder::prepareShrinkedEmbeddings@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  float v12;
  _QWORD v14[3];
  uint64_t v15[2];
  int v16;

  if (!a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Provided aedVecBackCount is 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v15, -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3), 512, 1, 0);
  v8 = *a2;
  if (a2[1] != *a2)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v15, v8 + v9, v10++);
      v8 = *a2;
      v9 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) > v10);
  }
  v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)v15);
  v14[2] = 0;
  v14[0] = v15[0] + 4 * v16 * (v11 - 1);
  v14[1] = kaldi::MatrixBase<float>::NumCols((uint64_t)v15);
  v12 = 1.0 / (double)a3;
  kaldi::VectorBase<float>::Scale((uint64_t)v14, v12);
  kaldi::MatrixBase<float>::Scale((uint64_t)v15, *(float *)(*(_QWORD *)(a1 + 448) + 224));
  *(_OWORD *)(a4 + 24) = 0u;
  *(_OWORD *)(a4 + 8) = 0u;
  *(_QWORD *)a4 = &unk_1E5D34170;
  *(_BYTE *)(a4 + 40) = 0;
  kaldi::CuMatrix<float>::Swap(a4, v15);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v15);
}

void sub_1ADC7A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix(v5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadEmbeddings<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[3];
  void *__p;
  void *v13;
  uint64_t v14;

  v8 = *(_QWORD *)(a1 + 136);
  v9 = *(unsigned int *)(a2 + 288);
  v10 = *(unsigned int *)(a2 + 292);
  __p = 0;
  v13 = 0;
  v14 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v11);
  kaldi::quasar::Encdec::ConstrainSoftmax(v8, a2 + 264, v9, v10, a4, (int **)&__p, v11);
  std::__tree<int>::destroy((uint64_t)v11, (_QWORD *)v11[1]);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  kaldi::quasar::Encdec::ResetHistoryState(*(kaldi::quasar::Encdec **)(a1 + 136));
  kaldi::quasar::Encdec::StartFeedforward(*(_QWORD *)(a1 + 136), a3, 0, 1);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(a1, a2, 0, 0.0);
}

void sub_1ADC7AA20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Write<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v6;
  clockid_t v7;
  uint64_t v8;
  int v9;
  int32x2_t *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::vector<int> *v16;
  std::vector<int> *v17;
  int *end;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  int *v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  std::vector<unsigned int> *v54;
  std::vector<unsigned int> *v55;
  unint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int VocabWordIdx;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  float v79;
  int v80;
  int v81;
  int v82;
  char v83;
  int v84;
  int v85;
  float v86;
  float v87;
  int v88;
  float v89;
  uint64_t v90;
  unint64_t v91;
  float v92;
  float v93;
  char *v94;
  unint64_t v95;
  unint64_t v96;
  char *v97;
  void *v98;
  uint64_t v99;
  uint64_t *v100;
  char *v101;
  int v102;
  uint64_t *v103;
  void *v104;
  float v105;
  int SoftmaxEosId;
  int v107;
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  char *v111;
  std::vector<int> *v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  std::vector<int> *v117;
  char *v118;
  float v119;
  int v120;
  float v121;
  float v122;
  float v123;
  float v124;
  int v125;
  std::vector<int> *v126;
  std::vector<int> *v127;
  int v128;
  float v129;
  float v130;
  float v131;
  float v132;
  BOOL v133;
  int64_t v134;
  unint64_t v135;
  float v136;
  std::vector<int> *v137;
  char v138;
  float v139;
  char *v140;
  int *v141;
  int *v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  int v146;
  int v147;
  BOOL v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  int v152;
  char *v153;
  unsigned int v154;
  unsigned int v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  int v164;
  unint64_t v165;
  int v166;
  uint64_t v167;
  int v168;
  _QWORD *v169;
  float v170;
  int v171;
  float v172;
  float v173;
  float v174;
  uint64_t v175;
  uint64_t v176;
  float v177;
  float v178;
  _BYTE *v179;
  _BYTE *v180;
  uint64_t v181;
  uint64_t v182;
  float v183;
  float *v184;
  float *v185;
  uint64_t v186;
  uint64_t v187;
  float *v188;
  uint64_t v189;
  unint64_t v190;
  float *v191;
  float v192;
  float v193;
  float *v194;
  char *v195;
  float *v196;
  int32x2_t v197;
  int v198;
  int v199;
  _DWORD *v200;
  int v201;
  float v202;
  float v203;
  char v204;
  uint64_t v206;
  char *v207;
  void *v208;
  int64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  uint64_t *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t v220;
  void *v221;
  int v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  float v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  __n128 v246;
  _BOOL4 v247;
  uint64_t v248;
  char v249;
  void **v250;
  int v251;
  int v252;
  _QWORD *v254;
  void **v255;
  uint64_t v256;
  _QWORD *v257;
  _QWORD *v258;
  int v259;
  int *v260;
  unint64_t v261;
  _DWORD *v262;
  int *v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  unint64_t v267;
  char *v268;
  int *v269;
  int v270;
  uint64_t v271;
  int v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  float v276;
  int v277;
  char *v278;
  int64_t v279;
  uint64_t v280;
  _QWORD *v281;
  int32x2_t *v282;
  int32x2_t *v283;
  _QWORD *v285;
  uint64_t v286;
  _BOOL4 v287;
  uint64_t v288;
  int v289;
  BOOL v290;
  unsigned __int8 *v291;
  int32x2_t v293;
  void *v294;
  void *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  void *v299;
  uint64_t v300;
  void *v301[2];
  __int128 v302;
  void *v303;
  _BYTE *v304;
  uint64_t v305;
  void *v306[2];
  __int128 v307;
  unint64_t v308;
  void *v309;
  void *v310;
  uint64_t v311;
  _DWORD v312[2];
  void *v313;
  void *v314;
  uint64_t v315;
  void *v316;
  _BYTE *v317;
  uint64_t v318;
  _OWORD v319[2];
  int v320;
  unint64_t v321;
  __int128 v322;
  __int128 v323;
  int v324;
  void *v325;
  _BYTE *v326;
  uint64_t v327;
  std::vector<int> *v328;
  char *v329;
  unint64_t v330;
  void *v331[2];
  __int128 v332;
  int v333;
  void *v334;
  _BYTE *v335;
  uint64_t v336;
  std::vector<int> *v337;
  std::vector<int> *v338;
  std::vector<int> *v339;
  void *__src;
  void *v341;
  unint64_t v342;
  _BYTE __p[40];
  __int128 v344;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v341 = 0;
  __src = 0;
  v342 = 0;
  v338 = 0;
  v337 = 0;
  v339 = 0;
  v335 = 0;
  v334 = 0;
  v336 = 0;
  std::priority_queue<float>::push((uint64_t)&v334, &kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    v8 = *(_QWORD *)(a1 + 136);
    if (!*(_BYTE *)(v8 + 2164) || !*(_BYTE *)(v8 + 2165))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  v287 = (*(_QWORD *)(a2 + 200) || *(_QWORD *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  if (a3 >= 1)
  {
    v280 = 0;
    v291 = (unsigned __int8 *)(a1 + 5238);
    v9 = *(_DWORD *)(a2 + 188);
    v286 = *(int *)(a1 + 5836);
    v279 = v286 + a3;
    v283 = (int32x2_t *)(a1 + 4976);
    v282 = (int32x2_t *)(a1 + 5024);
    v10 = (int32x2_t *)(a1 + 5072);
    v11 = 1.0;
    v12 = 0x4F0000004F000000;
    v276 = 2147500000.0;
    v13 = 0x4F0000004F000000;
    v277 = v9;
    v278 = (char *)(a1 + 5784);
    while (1)
    {
      v14 = *(_QWORD *)(a1 + 5784);
      v15 = *(_QWORD *)(a1 + 5792);
      if (v14 == v15)
        goto LABEL_323;
      if ((v9 != 1) | v280 & 1)
      {
        if (v9 == 2)
        {
          if (*(float *)v334 < v276)
            goto LABEL_323;
        }
        else if (v9 || SHIDWORD(v280) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_323;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(_BYTE *)(*(_QWORD *)v14 + 200))
        goto LABEL_323;
      v16 = v337;
      v17 = v338;
      if (v338 != v337)
      {
        do
        {
          end = v17[-2].__end_;
          if (end)
          {
            v17[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          v17 = (std::vector<int> *)((char *)v17 - 56);
        }
        while (v17 != v16);
        v15 = *(_QWORD *)(a1 + 5792);
        v14 = *(_QWORD *)(a1 + 5784);
      }
      v338 = v16;
      *(_OWORD *)v331 = 0u;
      v332 = 0u;
      v333 = 1065353216;
      if (v15 != v14)
      {
        v19 = 0;
        do
        {
          LODWORD(v321) = 0;
          LODWORD(v321) = **(_DWORD **)(v14 + 8 * v19);
          *(_QWORD *)__p = &v321;
          v20 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v331, (int *)&v321, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
          v21 = v20;
          v22 = (unint64_t *)v20[4];
          v23 = (uint64_t)(v20 + 5);
          v24 = v20[5];
          if ((unint64_t)v22 >= v24)
          {
            v26 = (unint64_t *)v20[3];
            v27 = v22 - v26;
            if ((unint64_t)(v27 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v28 = v24 - (_QWORD)v26;
            v29 = (uint64_t)(v24 - (_QWORD)v26) >> 2;
            if (v29 <= v27 + 1)
              v29 = v27 + 1;
            if (v28 >= 0x7FFFFFFFFFFFFFF8)
              v30 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v30 = v29;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v23, v30);
              v26 = (unint64_t *)v21[3];
              v22 = (unint64_t *)v21[4];
            }
            else
            {
              v31 = 0;
            }
            v32 = (unint64_t *)&v31[8 * v27];
            *v32 = v19;
            v25 = v32 + 1;
            while (v22 != v26)
            {
              v33 = *--v22;
              *--v32 = v33;
            }
            v21[3] = v32;
            v21[4] = v25;
            v21[5] = &v31[8 * v30];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v22 = v19;
            v25 = v22 + 1;
          }
          v21[4] = v25;
          ++v19;
          v14 = *(_QWORD *)(a1 + 5784);
        }
        while (v19 < (*(_QWORD *)(a1 + 5792) - v14) >> 3);
        v34 = (_QWORD *)v332;
        if ((_QWORD)v332)
        {
LABEL_45:
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v283, (v34[4] - v34[3]) >> 3, 1, 0, 0);
          v35 = (_QWORD *)v34[3];
          v36 = (_QWORD *)v34[4];
          if (v35 != v36)
          {
            v37 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              v38 = *(_QWORD *)(*(_QWORD *)(a1 + 5784) + 8 * *v35);
              if (v286 >= 1 && *(_DWORD *)(v38 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              v39 = *(_QWORD *)(v38 + 56);
              v40 = *(_QWORD *)(v38 + 64);
              v41 = v40 - v39;
              if (v40 != v39)
              {
                v42 = 0;
                v43 = v41 >> 2;
                if (v43 <= 1)
                  v43 = 1;
                v44 = *(_QWORD *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * v37;
                do
                {
                  *(float *)(v44 + 4 * v42) = (float)*(int *)(v39 + 4 * v42);
                  ++v42;
                }
                while (v43 != v42);
              }
              kaldi::quasar::Encdec::SetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t **)(v38 + 8), v37++, (v34[4] - v34[3]) >> 3);
              ++v35;
            }
            while (v35 != v36);
          }
          kaldi::quasar::Encdec::Feedforward(*(_QWORD *)(a1 + 136), (uint64_t)v283, v282);
          v288 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v10, (v34[4] - v34[3]) >> 3, v288, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v282, (int *)v10, 111);
          v45 = (_QWORD *)v34[3];
          v281 = v34;
          v285 = (_QWORD *)v34[4];
          if (v45 == v285)
            goto LABEL_194;
          v46 = 0;
          while (1)
          {
            v47 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *v45);
            kaldi::quasar::Encdec::GetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t)(v47 + 2), v46);
            ++*(_DWORD *)(a1 + 5216);
            v306[0] = 0;
            v306[1] = 0;
            *(_QWORD *)&v307 = 0;
            v48 = (uint64_t *)(v47 + 52);
            v49 = *((_QWORD *)v47 + 27);
            if (v49 >= *((_QWORD *)v47 + 28))
            {
              v50 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v48, (uint64_t)v306);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v48, (uint64_t)v306);
              v50 = v49 + 24;
            }
            *((_QWORD *)v47 + 27) = v50;
            v329 = 0;
            v328 = 0;
            v330 = 0;
            v51 = *(_QWORD *)(a1 + 136);
            v52 = *(_QWORD *)(v51 + 2168);
            if (v52 == *(_QWORD *)(v51 + 2176))
              v53 = -1;
            else
              v53 = *(_DWORD *)(v52 + 4 * v46);
            v289 = v53;
            v326 = 0;
            v325 = 0;
            v327 = 0;
            kaldi::quasar::Encdec::GetAlignmentProbabilities(v51, (uint64_t)&v325, v46);
            if (*(_BYTE *)(*(_QWORD *)(a1 + 136) + 1504))
              v289 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v47) + ~v289;
            if (*(float *)(a2 + 320) != 0.0)
            {
              *(_QWORD *)__p = v47 + 10;
              v54 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v47 + 20), v47 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
              v55 = v54 + 1;
              v56 = (unint64_t)((char *)v54[1].__end_ - (char *)v54[1].__begin_) >> 2;
              if (v289 + 1 > (int)v56)
                LODWORD(v56) = v289 + 1;
              std::vector<int>::resize(v54 + 1, (int)v56);
              if ((int)v55->__begin_[v289] >= 1)
              {
                *(_QWORD *)__p = v47 + 10;
                v57 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v47 + 40), v47 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
                ++*((_DWORD *)v57 + 5);
              }
              *(_QWORD *)__p = v47 + 10;
              v58 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v47 + 30), v47 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
              ++*((_DWORD *)v58 + 5);
              ++v55->__begin_[v289];
            }
            if (*(_BYTE *)(a1 + 5673))
            {
              v322 = 0u;
              v323 = 0u;
              v321 = (unint64_t)&unk_1E5D34170;
              LOBYTE(v324) = 0;
              v59 = *(_QWORD *)(a1 + 5136);
              v60 = *(_QWORD *)(a1 + 5128);
              if (v59 >= *(_QWORD *)(a1 + 5144))
              {
                v61 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)&v321);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(_QWORD *)(a1 + 5136), &v321, 111);
                v61 = v59 + 48;
                *(_QWORD *)(a1 + 5136) = v59 + 48;
              }
              *(_QWORD *)(a1 + 5136) = v61;
              v62 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v319, a1 + 5072, v46, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(__p, v319, 111, v62);
              v63 = *(_QWORD *)(a1 + 5160);
              if (v63 >= *(_QWORD *)(a1 + 5168))
              {
                v64 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)__p);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(_QWORD *)(a1 + 5160), __p);
                v64 = v63 + 40;
                *(_QWORD *)(a1 + 5160) = v63 + 40;
              }
              *(_QWORD *)(a1 + 5160) = v64;
              kaldi::Matrix<float>::~Matrix((uint64_t)__p);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v319);
              if (kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Not implemented", 15);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              }
              v289 = -1431655765 * ((v59 - v60) >> 4);
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v321);
            }
            if (*(_DWORD *)(a2 + 184) != 2)
              break;
            v65 = *(_QWORD *)(a2 + 208);
            v66 = v47[9];
            *((_QWORD *)&v323 + 1) = 0;
            (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v65 + 136))(v65, v66, &v321);
            v67 = -1;
            while (1)
            {
              if (!v321)
              {
                if (*((_QWORD *)&v323 + 1) >= *((_QWORD *)&v322 + 1))
                  goto LABEL_159;
LABEL_94:
                v68 = (*(_DWORD *)(v322 + 16 * *((_QWORD *)&v323 + 1)) - 1);
LABEL_95:
                v67 = *(_DWORD *)(v322 + 16 * *((_QWORD *)&v323 + 1) + 12);
                goto LABEL_96;
              }
              if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v321 + 24))(v321))
                break;
              if (!v321)
                goto LABEL_94;
              v68 = (*(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v321 + 32))() - 1);
              if (!v321)
                goto LABEL_95;
              v67 = *(_DWORD *)((*(uint64_t (**)(unint64_t))(*(_QWORD *)v321 + 32))(v321) + 12);
              if (v321)
              {
                v69 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v321 + 32))(v321);
                goto LABEL_97;
              }
LABEL_96:
              v69 = v322 + 16 * *((_QWORD *)&v323 + 1);
LABEL_97:
              v70 = *(_DWORD *)(v69 + 8);
              VocabWordIdx = kaldi::quasar::Encdec::GetVocabWordIdx(*(kaldi::quasar::Encdec **)(a1 + 136), v68);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v46
                                         + 4 * (int)v68);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v67;
              LODWORD(v344) = v70;
              v72 = v329;
              if ((unint64_t)v329 >= v330)
              {
                v74 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v328, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v329 = *(_QWORD *)__p;
                *((_QWORD *)v72 + 2) = 0;
                *((_QWORD *)v72 + 3) = 0;
                *((_QWORD *)v72 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v72 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v73 = *(_QWORD *)&__p[32];
                *((_DWORD *)v72 + 10) = v344;
                *((_QWORD *)v72 + 4) = v73;
                v74 = (uint64_t *)(v72 + 48);
              }
              v329 = (char *)v74;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v321)
                (*(void (**)(unint64_t))(*(_QWORD *)v321 + 40))(v321);
              else
                ++*((_QWORD *)&v323 + 1);
            }
            if (v321)
            {
              (*(void (**)(void))(*(_QWORD *)v321 + 8))();
              goto LABEL_161;
            }
LABEL_159:
            if ((_QWORD)v323)
              --*(_DWORD *)v323;
LABEL_161:
            *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v47[9]);
            LODWORD(v321) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              v105 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v47[9]);
              SoftmaxEosId = kaldi::quasar::Encdec::GetSoftmaxEosId(*(kaldi::quasar::Encdec **)(a1 + 136));
              v107 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v46
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v107;
              *(_DWORD *)&__p[36] = v67;
              *(float *)&v344 = v105;
              v108 = v329;
              if ((unint64_t)v329 >= v330)
              {
                v110 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v328, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v329 = *(_QWORD *)__p;
                *((_QWORD *)v108 + 2) = 0;
                *((_QWORD *)v108 + 3) = 0;
                *((_QWORD *)v108 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v108 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v109 = *(_QWORD *)&__p[32];
                *((_DWORD *)v108 + 10) = v344;
                *((_QWORD *)v108 + 4) = v109;
                v110 = (uint64_t *)(v108 + 48);
              }
              v329 = (char *)v110;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v328, (uint64_t)v329, (uint64_t)__p, 0xAAAAAAAAAAAAAAABLL * ((v329 - (char *)v328) >> 4));
LABEL_168:
            v111 = v329;
            v112 = v328;
            if (!*(_BYTE *)(a1 + 5239))
            {
              v113 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v329 - (char *)v328) >> 4));
              if (v329 == (char *)v328)
                v114 = 0;
              else
                v114 = v113;
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(v328, (uint64_t *)v329, (uint64_t)__p, v114, 1);
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v328, (uint64_t)&v328[2 * *(int *)(a2 + 160)], (uint64_t)v329);
              v111 = v329;
              v112 = v328;
            }
            if (v111 == (char *)v112 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              v117 = v328;
              v118 = v329;
              goto LABEL_190;
            }
            v115 = *(_QWORD *)(a1 + 5840);
            v116 = *(int *)(a1 + 5836);
            v117 = v328;
            v118 = v329;
            if (v116 >= (*(_QWORD *)(a1 + 5848) - v115) >> 2)
            {
LABEL_190:
              while (v117 != (std::vector<int> *)v118)
              {
                v119 = *(float *)(a1 + 5764);
                v120 = *v291;
                v121 = *(float *)&v117->__begin_;
                v122 = logf(*(float *)&v117->__begin_);
                if (!v120)
                  v122 = v121;
                v123 = -(float)(v119 * v122);
                v124 = *(float *)(a2 + 180) * *(float *)&v117[1].__end_cap_.__value_;
                v125 = (int)v117[1].__end_;
                *(float *)__p = v124 + (float)(v123 + (float)(*((float *)v47 + 11) + *((float *)v47 + 12)));
                *(float *)&__p[4] = v123;
                *(float *)&__p[8] = v124;
                *(_DWORD *)&__p[12] = v289;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v325, (uint64_t)v326, (v326 - (_BYTE *)v325) >> 2);
                LODWORD(v344) = v125;
                DWORD1(v344) = HIDWORD(v117[1].__end_);
                *((_QWORD *)&v344 + 1) = *v45;
                v126 = v338;
                if (v338 >= v339)
                {
                  v127 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement const&>((uint64_t *)&v337, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v338->__begin_ = *(_OWORD *)__p;
                  v126[1].__begin_ = 0;
                  v126[1].__end_ = 0;
                  v126->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v126->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(_QWORD *)&__p[24] - *(_QWORD *)&__p[16]) >> 2);
                  *(_OWORD *)&v126[1].__end_cap_.__value_ = v344;
                  v127 = (std::vector<int> *)((char *)v126 + 56);
                }
                v338 = v127;
                if (*(_QWORD *)&__p[16])
                {
                  *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v117 += 2;
              }
            }
            else if (v329 != (char *)v328)
            {
              if (LODWORD(v328[1].__end_) != *(_DWORD *)(v115 + 4 * v116))
                *(_QWORD *)(a1 + 5848) = v115;
              goto LABEL_190;
            }
            if (v325)
            {
              v326 = v325;
              operator delete(v325);
            }
            *(_QWORD *)__p = &v328;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v306);
            ++v46;
            if (++v45 == v285)
            {
LABEL_194:
              v34 = (_QWORD *)*v281;
              v10 = (int32x2_t *)(a1 + 5072);
              if (!*v281)
                goto LABEL_195;
              goto LABEL_45;
            }
          }
          v75 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v47);
          if (!(_DWORD)v288)
            goto LABEL_168;
          v76 = 0;
          LODWORD(v77) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v75 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(a2 + 236))));
          if ((int)v77 <= 1)
            v77 = 1;
          else
            v77 = v77;
          if (v286 >= v77)
            v78 = a4;
          else
            v78 = 0;
          while (1)
          {
            v79 = *(float *)(*(_QWORD *)(a1 + 5072) + 4 * (int)v46 * *(_DWORD *)(a1 + 5088) + 4 * v76);
            v80 = kaldi::quasar::Encdec::GetVocabWordIdx(*(kaldi::quasar::Encdec **)(a1 + 136), v76);
            v81 = v80;
            v82 = *(_DWORD *)(a1 + 5180);
            if (v80 == v82)
              v83 = v78;
            else
              v83 = 1;
            if ((v83 & 1) == 0)
            {
              if (!*v45)
              {
                v87 = *(float *)(a1 + 5764);
                v88 = *v291;
                v89 = logf(v79);
                if (!v88)
                  v89 = v79;
                *(float *)(a1 + 5760) = -(float)(v87 * v89);
                *(_DWORD *)(a1 + 5720) = v47[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_155;
            }
            if (v80 == *(_DWORD *)(a1 + 5184) && *(_BYTE *)(*(_QWORD *)(a1 + 136) + 1505))
              goto LABEL_155;
            if (v287)
            {
              if (v80 != v82)
              {
                if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a2 + 200) + 32))(*(_QWORD *)(a2 + 200), v47[9], (v80 + 1), __p) & 1) == 0)
                {
                  v84 = *(_DWORD *)(a1 + 5184);
                  if (v84 < 0
                    || ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a2 + 200) + 32))(*(_QWORD *)(a2 + 200), v47[9], (v84 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_155;
                  }
                }
                v85 = *(_DWORD *)&__p[12];
                v86 = *(float *)&__p[8];
                goto LABEL_132;
              }
              *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 200) + 16))(*(_QWORD *)(a2 + 200), v47[9]);
              LODWORD(v321) = 2139095040;
              if (*(float *)__p == INFINITY)
                goto LABEL_155;
              v86 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 200) + 16))(*(_QWORD *)(a2 + 200), v47[9]);
            }
            else
            {
              v86 = 0.0;
            }
            v85 = -1;
LABEL_132:
            if (*(_DWORD *)(a2 + 184) == 5)
            {
              v90 = *(_QWORD *)(a1 + 5840);
              v91 = *(int *)(a1 + 5836);
              if (v91 < (*(_QWORD *)(a1 + 5848) - v90) >> 2)
              {
                v92 = *(float *)(a2 + 180);
                v93 = (v11 - v92) * v79;
                if (*(_DWORD *)(v90 + 4 * v91) != v81)
                  v92 = -0.0;
                v79 = v92 + v93;
              }
            }
            if (*(_BYTE *)(a1 + 5239))
            {
              v94 = v329;
              v95 = 0xAAAAAAAAAAAAAAABLL * ((v329 - (char *)v328) >> 4);
              v96 = *(int *)(a2 + 160);
              if (v95 == v96 && v79 > *(float *)&v328->__begin_)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v328, (uint64_t)v329, (uint64_t)__p, v95);
                v97 = v329;
                v98 = (void *)*((_QWORD *)v329 - 5);
                if (v98)
                {
                  *((_QWORD *)v329 - 4) = v98;
                  operator delete(v98);
                }
                v94 = v97 - 48;
                v329 = v94;
                v96 = *(int *)(a2 + 160);
                v95 = 0xAAAAAAAAAAAAAAABLL * ((v94 - (char *)v328) >> 4);
              }
              if (v95 >= v96)
                goto LABEL_155;
              *(float *)__p = v79;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v81;
              *(_DWORD *)&__p[36] = v85;
              *(float *)&v344 = v86;
              if ((unint64_t)v94 >= v330)
              {
                v100 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>((uint64_t *)&v328, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v94 = *(_QWORD *)__p;
                *((_QWORD *)v94 + 2) = 0;
                *((_QWORD *)v94 + 3) = 0;
                *((_QWORD *)v94 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v94 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v99 = *(_QWORD *)&__p[32];
                *((_DWORD *)v94 + 10) = v344;
                *((_QWORD *)v94 + 4) = v99;
                v100 = (uint64_t *)(v94 + 48);
              }
              v329 = (char *)v100;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v328, (uint64_t)v100, (uint64_t)v319, 0xAAAAAAAAAAAAAAABLL * (((char *)v100 - (char *)v328) >> 4));
              v104 = *(void **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_155;
LABEL_154:
              *(_QWORD *)&__p[16] = v104;
              operator delete(v104);
              goto LABEL_155;
            }
            *(float *)__p = v79;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v81;
            *(_DWORD *)&__p[36] = v85;
            *(float *)&v344 = v86;
            v101 = v329;
            if ((unint64_t)v329 >= v330)
            {
              v103 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>((uint64_t *)&v328, (uint64_t)__p);
              v104 = *(void **)&__p[8];
              v329 = (char *)v103;
              if (!*(_QWORD *)&__p[8])
                goto LABEL_155;
              goto LABEL_154;
            }
            *(_QWORD *)v329 = *(_QWORD *)__p;
            *((_QWORD *)v101 + 1) = 0;
            *((_QWORD *)v101 + 2) = 0;
            *((_QWORD *)v101 + 3) = 0;
            *(_OWORD *)(v101 + 8) = *(_OWORD *)&__p[8];
            *((_QWORD *)v101 + 3) = *(_QWORD *)&__p[24];
            memset(&__p[8], 0, 24);
            v102 = v344;
            *((_QWORD *)v101 + 4) = *(_QWORD *)&__p[32];
            *((_DWORD *)v101 + 10) = v102;
            v329 = v101 + 48;
LABEL_155:
            if (v288 == ++v76)
              goto LABEL_168;
          }
        }
      }
LABEL_195:
      if (v286 == v279 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v338 == v337)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(v337, (unint64_t)v338, (uint64_t)__p, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v338 - (char *)v337) >> 3)), 1);
        LODWORD(v12) = v337->__begin_;
        v128 = *(_DWORD *)(a1 + 5768);
        if (v128 == 2)
        {
          v130 = *(float *)(a1 + 5776);
          v131 = *(float *)(a1 + 5772);
          v132 = powf(v130 + (float)(unint64_t)(v286 + 1), v131);
          v129 = v132 / powf(v130 + 1.0, v131);
        }
        else
        {
          v129 = (float)(unint64_t)(v286 + 2);
          if (v128 != 1)
            v129 = 1.0;
        }
        v276 = *(float *)&v12 / v129;
      }
      memset(v319, 0, sizeof(v319));
      v320 = 1065353216;
      v133 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      v290 = v133;
      v134 = v286 + 1;
      if (*(int *)(a2 + 160) >= 1)
        break;
LABEL_310:
      v10 = (int32x2_t *)(a1 + 5072);
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        v217 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v217, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v218 = *(uint64_t **)(a1 + 5784);
      v219 = *(uint64_t **)(a1 + 5792);
      while (v218 != v219)
      {
        if (*v218)
        {
          v220 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(*v218);
          MEMORY[0x1AF44D190](v220, 0x10B0C406F3D429DLL);
        }
        ++v218;
      }
      v221 = __src;
      if (v278 == (char *)&__src)
      {
        v9 = v277;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v278, (char *)__src, (uint64_t)v341, ((_BYTE *)v341 - (_BYTE *)__src) >> 3);
        v9 = v277;
        v221 = __src;
      }
      v341 = v221;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v319);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v331);
      v286 = v134;
      if (v134 >= v279)
        goto LABEL_323;
    }
    v135 = 0;
    v136 = (float)(unint64_t)v134;
    while (1)
    {
      v137 = v337;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v338 - (char *)v337) >> 3) <= v135)
        goto LABEL_310;
      v138 = !v290;
      if (!v135)
        v138 = 1;
      if ((v138 & 1) == 0)
      {
        v139 = *((float *)&v337->__begin_ + 14 * v135);
        if ((float)(*(float *)&v12 + *(float *)(a2 + 164)) < v139
          || (float)(*(float *)&v12 * (float)(*(float *)(a2 + 168) + 1.0)) < v139)
        {
          goto LABEL_310;
        }
      }
      v140 = (char *)v337 + 56 * v135;
      v141 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *((_QWORD *)v140 + 6));
      v142 = (int *)(v140 + 40);
      if (*((_DWORD *)v140 + 10) != *(_DWORD *)(a1 + 5180))
      {
        v144 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
        if (v144 > 1)
        {
          v147 = v141[8];
          v148 = __OFSUB__(v147, 1);
          v149 = (v147 - 1);
          v145 = (_QWORD *)(a1 + 5808);
          if (((v149 & 0x80000000) != 0) != v148)
            v150 = 0;
          else
            v150 = v149 / v144;
          v321 = 0;
          v321 = *v142 + (v150 << 32);
          v159 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v319, &v321);
          v160 = *(_QWORD *)(a1 + 4960);
          v161 = *(_QWORD *)(a1 + 4952);
          if (v159)
          {
            *(_QWORD *)__p = &v321;
            v162 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v319, &v321, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
          }
          else
          {
            if (v160 == v161)
            {
              v165 = 0xCCCCCCCCCCCCCCCDLL * ((v160 - v161) >> 3);
              v166 = -1;
            }
            else
            {
              v163 = 0;
              do
              {
                v164 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
                ++v163;
                v165 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
              }
              while (v163 < v165);
              v166 = v164;
              v145 = (_QWORD *)(a1 + 5808);
            }
            v193 = *(float *)v140;
            *(_QWORD *)__p = &v321;
            v194 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v319, &v321, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
            v194[6] = v193;
            *((_DWORD *)v194 + 7) = (v166 - 1) / v165;
            v160 = *(_QWORD *)(a1 + 4960);
            v161 = *(_QWORD *)(a1 + 4952);
            *(_QWORD *)__p = &v321;
            v162 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v319, &v321, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
          }
          v146 = *v141 - 858993459 * ((unint64_t)(v160 - v161) >> 3) * *((_DWORD *)v162 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          v145 = (_QWORD *)(a1 + 5808);
          v146 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        }
        v304 = 0;
        v305 = 0;
        v303 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v303, *((const void **)&v137->__end_cap_.__value_ + 7 * v135), *((_QWORD *)&v137[1].__begin_ + 7 * v135), (uint64_t)(*((_QWORD *)&v137[1].__begin_ + 7 * v135) - *((_QWORD *)&v137->__end_cap_.__value_ + 7 * v135)) >> 2);
        *(_OWORD *)v306 = 0u;
        v307 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v306[1], v303, (uint64_t)v304, (v304 - (_BYTE *)v303) >> 2);
        if (v303)
        {
          v304 = v303;
          operator delete(v303);
        }
        v195 = (char *)v137 + 56 * v135;
        v197 = *(int32x2_t *)(v195 + 4);
        v196 = (float *)(v195 + 4);
        v306[0] = (void *)vrev64_s32(v197);
        if (*((_DWORD *)&v137->__end_ + 14 * v135 + 1) >= (signed int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v141)
                                                                      + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136)
                                                                                           + 1511)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
          v273 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v273, (uint64_t)" ", 1);
          v274 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)" ", 1);
          v275 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)" ", 1);
          kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v141);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        v198 = *v142 + 1;
        LODWORD(v321) = *((_DWORD *)&v137->__end_ + 14 * v135 + 1);
        HIDWORD(v321) = v198;
        v322 = (unint64_t)v306[0];
        v323 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)&v322 + 1, v306[1], v307, (uint64_t)(v307 - (unint64_t)v306[1]) >> 2);
        v324 = v146;
        (*(void (**)(_QWORD, _QWORD, unint64_t *))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v141[8], &v321);
        std::vector<std::pair<int,int>>::resize((uint64_t)v145, v146 + 1);
        v199 = *v142;
        v200 = (_DWORD *)(*v145 + 8 * v146);
        *v200 = v141[8];
        v200[1] = v199;
        if (*(float *)(a2 + 320) == 0.0
          || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v141 + 20, v142))
        {
          v204 = 0;
        }
        else
        {
          *(_QWORD *)__p = v140 + 40;
          v201 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v141 + 40), v142, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          *(_QWORD *)__p = v142;
          v202 = (float)v201
               / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v141 + 30), v142, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          v203 = *(float *)(a2 + 316);
          v204 = v202 > v203;
          if (v202 > v203 && kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            v204 = 1;
          }
        }
        v206 = operator new();
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::Hyp(v206, v146, *((_DWORD *)&v137[1].__end_cap_.__value_ + 14 * v135 + 1), *v142, v204, (uint64_t)v141, *v196, v196[1]);
        v207 = (char *)v341;
        v134 = v286 + 1;
        if ((unint64_t)v341 >= v342)
        {
          v209 = ((_BYTE *)v341 - (_BYTE *)__src) >> 3;
          if ((unint64_t)(v209 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v210 = (uint64_t)(v342 - (_QWORD)__src) >> 2;
          if (v210 <= v209 + 1)
            v210 = v209 + 1;
          if (v342 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
            v211 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v211 = v210;
          if (v211)
          {
            v212 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v342, v211);
            v134 = v286 + 1;
          }
          else
          {
            v212 = 0;
          }
          v213 = (uint64_t *)&v212[8 * v209];
          *v213 = v206;
          v208 = v213 + 1;
          v214 = (char *)v341;
          v215 = (char *)__src;
          if (v341 != __src)
          {
            do
            {
              v216 = *((_QWORD *)v214 - 1);
              v214 -= 8;
              *--v213 = v216;
            }
            while (v214 != v215);
            v214 = (char *)__src;
          }
          __src = v213;
          v341 = v208;
          v342 = (unint64_t)&v212[8 * v211];
          if (v214)
            operator delete(v214);
        }
        else
        {
          *(_QWORD *)v341 = v206;
          v208 = v207 + 8;
        }
        v341 = v208;
        if (*((_QWORD *)&v322 + 1))
        {
          *(_QWORD *)&v323 = *((_QWORD *)&v322 + 1);
          operator delete(*((void **)&v322 + 1));
        }
        if (v306[1])
        {
          *(void **)&v307 = v306[1];
          operator delete(v306[1]);
        }
        goto LABEL_309;
      }
      LODWORD(v143) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v141)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      v143 = (int)v143 <= 1 ? 1 : v143;
      if (v286 >= v143)
        break;
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v141 + 11), *(float32x2_t *)((char *)&v137->__begin_ + 56 * v135 + 4)));
      *(_DWORD *)(a1 + 5720) = v141[8];
      *(_DWORD *)(a1 + 5760) = *(_DWORD *)v140;
LABEL_309:
      if ((uint64_t)++v135 >= *(int *)(a2 + 160))
        goto LABEL_310;
    }
    v151 = v141[8];
    v322 = 0uLL;
    *(_QWORD *)&v323 = 0;
    if (*(_BYTE *)(a1 + 5704))
    {
      v317 = 0;
      v318 = 0;
      v316 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v316, *((const void **)&v137->__end_cap_.__value_ + 7 * v135), *((_QWORD *)&v137[1].__begin_ + 7 * v135), (uint64_t)(*((_QWORD *)&v137[1].__begin_ + 7 * v135) - *((_QWORD *)&v137->__end_cap_.__value_ + 7 * v135)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v316, (uint64_t)v317, (v317 - (_BYTE *)v316) >> 2);
      v321 = *(_QWORD *)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v322, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v316)
      {
        v317 = v316;
        operator delete(v316);
      }
      v151 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
      v152 = *v142 + 1;
      *(_DWORD *)__p = *((_DWORD *)&v137->__end_ + 14 * v135 + 1);
      *(_DWORD *)&__p[4] = v152;
      *(_QWORD *)&__p[8] = v321;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], (const void *)v322, *((uint64_t *)&v322 + 1), (uint64_t)(*((_QWORD *)&v322 + 1) - v322) >> 2);
      LODWORD(v344) = v151;
      (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v141[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v322, 0, 0, 0);
      if (*(_QWORD *)&__p[16])
      {
        *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    v153 = (char *)v137 + 56 * v135;
    v154 = *((_DWORD *)v153 + 1);
    v155 = *((_DWORD *)v153 + 2);
    v321 = __PAIR64__(v154, v155);
    v156 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
    if (v156 > 1)
    {
      v158 = ((int)v151 - 1) / v156;
      v328 = 0;
      v328 = (std::vector<int> *)(*v142 + (v158 << 32));
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v319, (unint64_t *)&v328))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v306[0] = &v328;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v319, (unint64_t *)&v328, (uint64_t)&std::piecewise_construct, (_QWORD **)v306);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        v167 = *(_QWORD *)(a1 + 5712);
        v308 = v321;
        v310 = 0;
        v311 = 0;
        v309 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, (const void *)v322, *((uint64_t *)&v322 + 1), (uint64_t)(*((_QWORD *)&v322 + 1) - v322) >> 2);
        (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v167 + 184))(v167, v151, &v308);
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        v168 = *(_DWORD *)v140;
        *(_QWORD *)__p = &v328;
        v169 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v319, (unint64_t *)&v328, (uint64_t)&std::piecewise_construct, (_QWORD **)__p);
        *((_DWORD *)v169 + 6) = v168;
        *((_DWORD *)v169 + 7) = v158;
      }
    }
    else
    {
      v157 = *(_QWORD *)(a1 + 5712);
      v312[0] = v155;
      v312[1] = v154;
      v314 = 0;
      v315 = 0;
      v313 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v313, (const void *)v322, *((uint64_t *)&v322 + 1), (uint64_t)(*((_QWORD *)&v322 + 1) - v322) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v157 + 184))(v157, v151, v312);
      if (v313)
      {
        v314 = v313;
        operator delete(v313);
      }
    }
    v170 = *(float *)v140;
    if (*(float *)v140 <= *(float *)&v13)
    {
      *(_DWORD *)(a1 + 5832) = v151;
      *(float *)&v13 = v170;
    }
    v171 = *(_DWORD *)(a1 + 5768);
    if (v171 == 2)
    {
      v173 = *(float *)(a1 + 5776);
      v174 = *(float *)(a1 + 5772);
      v175 = v12;
      v176 = v13;
      v177 = v136;
      v178 = powf(v173 + v136, v174);
      v172 = v178 / powf(v173 + 1.0, v174);
      v136 = v177;
      v13 = v176;
      v12 = v175;
      v11 = 1.0;
    }
    else
    {
      v172 = 1.0;
      if (v171 == 1)
        v172 = (float)(unint64_t)(v286 + 2);
    }
    *(float *)__p = v170 / v172;
    std::priority_queue<float>::push((uint64_t)&v334, __p);
    v179 = v335;
    v180 = v334;
    v181 = (v335 - (_BYTE *)v334) >> 2;
    if (v181 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_271:
      if ((_QWORD)v322)
      {
        *((_QWORD *)&v322 + 1) = v322;
        operator delete((void *)v322);
      }
      LOBYTE(v280) = (v135 == 0) | v280;
      ++HIDWORD(v280);
      goto LABEL_309;
    }
    if (v335 - (_BYTE *)v334 >= 5)
    {
      v182 = 0;
      v183 = *(float *)v334;
      v184 = (float *)v334;
      do
      {
        v185 = v184;
        v184 += v182 + 1;
        v186 = 2 * v182;
        v182 = (2 * v182) | 1;
        v187 = v186 + 2;
        if (v187 < v181 && *v184 < v184[1])
        {
          ++v184;
          v182 = v187;
        }
        *v185 = *v184;
      }
      while (v182 <= (uint64_t)((unint64_t)(v181 - 2) >> 1));
      v188 = (float *)(v179 - 4);
      if (v184 != (float *)(v179 - 4))
      {
        *v184 = *v188;
        *v188 = v183;
        v189 = (char *)v184 - v180 + 4;
        if (v189 < 5)
          goto LABEL_270;
        v190 = (((unint64_t)v189 >> 2) - 2) >> 1;
        v191 = (float *)&v180[4 * v190];
        v192 = *v191;
        v183 = *v184;
        if (*v191 >= *v184)
          goto LABEL_270;
        do
        {
          *v184 = v192;
          v184 = v191;
          if (!v190)
            break;
          v190 = (v190 - 1) >> 1;
          v191 = (float *)&v180[4 * v190];
          v192 = *v191;
        }
        while (*v191 < v183);
      }
      *v184 = v183;
    }
LABEL_270:
    v335 = v179 - 4;
    goto LABEL_271;
  }
  HIDWORD(v280) = 0;
  LODWORD(v13) = 1325400064;
LABEL_323:
  if (!a4)
    goto LABEL_363;
  v222 = HIDWORD(v280);
  if (!HIDWORD(v280) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
    v223 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" partial hyps to final", 22);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
  }
  v224 = *(uint64_t **)(a1 + 5784);
  v225 = *(uint64_t **)(a1 + 5792);
  if (v224 != v225)
  {
    while (1)
    {
      if (v222)
      {
        v226 = *v224;
        if (!*v224)
          goto LABEL_347;
      }
      else
      {
        v227 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        v228 = *v224;
        if (*(_BYTE *)(*v224 + 200))
        {
          v229 = *(float *)(a2 + 320);
          if (v229 == 0.0)
            v230 = -3;
          else
            v230 = -4;
          if (v229 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
            v228 = *v224;
          }
        }
        else
        {
          v230 = -3;
        }
        v231 = *(_QWORD *)(a1 + 5712);
        v232 = *(unsigned int *)(v228 + 32);
        *(_DWORD *)__p = v230;
        memset(&__p[4], 0, 36);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
        LODWORD(v344) = v227;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v231 + 208))(v231, v232, __p);
        v222 = HIDWORD(v280);
        if (*(_QWORD *)&__p[16])
        {
          *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
          operator delete(*(void **)&__p[16]);
        }
        v233 = *(_QWORD *)(a1 + 5712);
        *(_OWORD *)v301 = 0u;
        v302 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v301[1], 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v233 + 184))(v233, v227, v301);
        if (v301[1])
        {
          *(void **)&v302 = v301[1];
          operator delete(v301[1]);
        }
        v226 = *v224;
        v234 = *(float *)(*v224 + 48);
        if ((float)(*(float *)(*v224 + 44) + v234) < *(float *)&v13)
          *(float *)&v13 = *(float *)(*v224 + 44) + v234;
        ++*(_DWORD *)(a1 + 5212);
      }
      v235 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(v226);
      MEMORY[0x1AF44D190](v235, 0x10B0C406F3D429DLL);
LABEL_347:
      if (++v224 == v225)
      {
        v224 = *(uint64_t **)(a1 + 5784);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 5792) = v224;
  *(_DWORD *)(a1 + 5836) = 0;
  if (!v222 && *(_DWORD *)(a1 + 5720) != -1)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v236 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
    v237 = *(_QWORD *)(a1 + 5712);
    v238 = *(unsigned int *)(a1 + 5720);
    memset(&__p[4], 0, 36);
    *(_DWORD *)__p = -2;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
    LODWORD(v344) = v236;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v237 + 208))(v237, v238, __p);
    if (*(_QWORD *)&__p[16])
    {
      *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
      operator delete(*(void **)&__p[16]);
    }
    v239 = *(_QWORD *)(a1 + 5712);
    v297 = *(_QWORD *)(a1 + 5728);
    v299 = 0;
    v300 = 0;
    v298 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v298, *(const void **)(a1 + 5736), *(_QWORD *)(a1 + 5744), (uint64_t)(*(_QWORD *)(a1 + 5744) - *(_QWORD *)(a1 + 5736)) >> 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v239 + 184))(v239, v236, &v297);
    if (v298)
    {
      v299 = v298;
      operator delete(v298);
    }
    LODWORD(v13) = *(_DWORD *)(a1 + 5760);
    ++*(_DWORD *)(a1 + 5208);
  }
  kaldi::quasar::Encdec::Finish(*(kaldi::quasar::Encdec **)(a1 + 136), v7);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (*(_DWORD *)(a2 + 184) == 5)
  {
    *(_QWORD *)(a1 + 5848) = *(_QWORD *)(a1 + 5840);
    if (*(float *)(a2 + 180) > 0.0 && !*(_BYTE *)(a2 + 306))
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v319);
      v241 = *(_QWORD *)(a1 + 5712);
      v293 = vdup_n_s32(0x7F800000u);
      v295 = 0;
      v296 = 0;
      v294 = 0;
      fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v241, (uint64_t)v319, 1, 0, 0, (uint64_t *)&v293, -1, 0);
      v242 = (void **)(a1 + 5840);
      if (v294)
      {
        v295 = v294;
        operator delete(v294);
      }
      v243 = *((_QWORD *)&v319[0] + 1);
      v244 = *(_DWORD *)(*((_QWORD *)&v319[0] + 1) + 88);
      while (1)
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v243 + 64) + 8 * v244);
        *(_QWORD *)__p = *(_QWORD *)v245;
        memset(&__p[8], 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], *(const void **)(v245 + 8), *(_QWORD *)(v245 + 16), (uint64_t)(*(_QWORD *)(v245 + 16) - *(_QWORD *)(v245 + 8)) >> 2);
        LODWORD(v331[0]) = *(_DWORD *)&__p[4];
        LODWORD(v321) = *(_DWORD *)__p;
        LODWORD(v306[0]) = 2139095040;
        LODWORD(v328) = 2139095040;
        v246.n128_u32[0] = *(_DWORD *)__p;
        if (*(float *)__p == INFINITY)
        {
          v246.n128_u32[0] = (unsigned __int32)v331[0];
          v247 = *(float *)v331 == *(float *)&v328;
        }
        else
        {
          v247 = 0;
        }
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (!v247)
        {
          *(_QWORD *)&v319[0] = &unk_1E5D25A80;
          v271 = *((_QWORD *)&v319[0] + 1);
          if (*((_QWORD *)&v319[0] + 1))
          {
            v272 = *(_DWORD *)(*((_QWORD *)&v319[0] + 1) + 56) - 1;
            *(_DWORD *)(*((_QWORD *)&v319[0] + 1) + 56) = v272;
            if (!v272)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v271 + 8))(v271, v246);
          }
          goto LABEL_363;
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v319[0] + 1) + 64) + 8 * v244) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v319[0] + 1) + 64) + 8 * v244) + 48))
          v248 = 0;
        else
          v248 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v319[0] + 1) + 64) + 8 * v244) + 48);
        v321 = *(_QWORD *)v248;
        v322 = *(unint64_t *)(v248 + 8);
        v323 = 0uLL;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)&v322 + 1, *(const void **)(v248 + 16), *(_QWORD *)(v248 + 24), (uint64_t)(*(_QWORD *)(v248 + 24) - *(_QWORD *)(v248 + 16)) >> 2);
        v244 = *(_DWORD *)(v248 + 40);
        v324 = v244;
        if ((v321 & 0x80000000) != 0)
          LODWORD(v321) = 0;
        if (HIDWORD(v321))
          break;
LABEL_420:
        if (*((_QWORD *)&v322 + 1))
        {
          *(_QWORD *)&v323 = *((_QWORD *)&v322 + 1);
          operator delete(*((void **)&v322 + 1));
        }
        v243 = *((_QWORD *)&v319[0] + 1);
      }
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560) + 88))(v331);
      v249 = BYTE7(v332);
      if (SBYTE7(v332) < 0)
      {
        if (v331[1] != (void *)3)
          goto LABEL_393;
        v250 = (void **)v331[0];
      }
      else
      {
        if (SBYTE7(v332) != 3)
          goto LABEL_393;
        v250 = v331;
      }
      v251 = *(unsigned __int16 *)v250;
      v252 = *((unsigned __int8 *)v250 + 2);
      if (v251 == 38626 && v252 == 129)
      {
LABEL_418:
        v244 = v324;
        if (v249 < 0)
          operator delete(v331[0]);
        goto LABEL_420;
      }
LABEL_393:
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
        v254 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For 'partial_bias' lm-mode, storing token: ", 43);
        if ((SBYTE7(v332) & 0x80u) == 0)
          v255 = v331;
        else
          v255 = (void **)v331[0];
        if ((SBYTE7(v332) & 0x80u) == 0)
          v256 = BYTE7(v332);
        else
          v256 = (uint64_t)v331[1];
        v257 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v254, (uint64_t)v255, v256);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v257, (uint64_t)" (", 2);
        v258 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v259 = HIDWORD(v321) - 1;
      v260 = *(int **)(a1 + 5848);
      v261 = *(_QWORD *)(a1 + 5856);
      if ((unint64_t)v260 >= v261)
      {
        v263 = (int *)*v242;
        v264 = ((char *)v260 - (_BYTE *)*v242) >> 2;
        v265 = v264 + 1;
        if ((unint64_t)(v264 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v266 = v261 - (_QWORD)v263;
        if (v266 >> 1 > v265)
          v265 = v266 >> 1;
        if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL)
          v267 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v267 = v265;
        if (v267)
        {
          v268 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5856, v267);
          v260 = *(int **)(a1 + 5848);
          v263 = *(int **)(a1 + 5840);
        }
        else
        {
          v268 = 0;
        }
        v269 = (int *)&v268[4 * v264];
        *v269 = v259;
        v262 = v269 + 1;
        while (v260 != v263)
        {
          v270 = *--v260;
          *--v269 = v270;
        }
        *(_QWORD *)(a1 + 5840) = v269;
        *(_QWORD *)(a1 + 5848) = v262;
        *(_QWORD *)(a1 + 5856) = &v268[4 * v267];
        if (v263)
          operator delete(v263);
      }
      else
      {
        *v260 = v259;
        v262 = v260 + 1;
      }
      *(_QWORD *)(a1 + 5848) = v262;
      v249 = BYTE7(v332);
      goto LABEL_418;
    }
  }
LABEL_363:
  if (v334)
  {
    v335 = v334;
    operator delete(v334);
  }
  *(_QWORD *)__p = &v337;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    v341 = __src;
    operator delete(__src);
  }
  return *(float *)&v13;
}

void sub_1ADC7D634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v56;
  void *v57;
  void *v58;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&STACK[0x300]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x220]);
  v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1ADC7D6F0()
{
  JUMPOUT(0x1ADC7D7F0);
}

void sub_1ADC7D6F8()
{
  JUMPOUT(0x1ADC7D7F8);
}

void sub_1ADC7D730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v56;
  void *v57;
  void *v58;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1ADC7D744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v56;
  void *v57;
  void *v58;
  void *v59;

  v56 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v56;
    operator delete(v56);
  }
  if (STACK[0x220])
  {
    (*(void (**)(unint64_t))(*(_QWORD *)STACK[0x220] + 8))(STACK[0x220]);
  }
  else if (STACK[0x238])
  {
    --*(_DWORD *)STACK[0x238];
  }
  v57 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v58 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v58;
    operator delete(v58);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  v59 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v59;
    operator delete(v59);
  }
  _Unwind_Resume(a1);
}

void sub_1ADC7D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v56;
  void *v57;
  void *v58;

  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1ADC7D784);
  }
  v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  kaldi::Vector<float>::Destroy(&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x220]);
  v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void sub_1ADC7D798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55)
{
  void *v56;
  void *v57;
  void *v58;

  v56 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v56;
    operator delete(v56);
  }
  STACK[0x220] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  kaldi::Vector<float>::Destroy((uint64_t)&a55);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v57 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v57;
    operator delete(v57);
  }
  STACK[0x220] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  v58 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v58;
    operator delete(v58);
  }
  _Unwind_Resume(a1);
}

void quasar::OnlineEmbeddingRetranslationDecoder::getWordById(quasar::QsrTextSymbolTable ***this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD v5[34];

  quasar::QsrTextSymbolTable::Find(*this[56], (_QWORD *)a2);
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Could not find a word for id: ", 30);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" in base symbol table", 21);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
}

void sub_1ADC7D8E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineEmbeddingRetranslationDecoder::getBestWords(quasar::QsrTextSymbolTable ***a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::string *v15;
  std::string *v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  void *__p[2];
  std::string::size_type v21;
  std::__split_buffer<std::string> __v;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  std::vector<std::string>::reserve((std::vector<std::string> *)a3, (a2[1] - *a2) >> 2);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    do
    {
      quasar::OnlineEmbeddingRetranslationDecoder::getWordById(a1, (uint64_t)__p);
      v9 = *(_QWORD *)(a3 + 8);
      v8 = *(_QWORD *)(a3 + 16);
      if (v9 >= v8)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *(_QWORD *)a3) >> 3);
        v12 = v11 + 1;
        if (v11 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *(_QWORD *)a3) >> 3);
        if (2 * v13 > v12)
          v12 = 2 * v13;
        if (v13 >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v12;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v14)
          v15 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a3 + 16, v14);
        else
          v15 = 0;
        v16 = v15 + v11;
        __v.__first_ = v15;
        __v.__begin_ = v16;
        __v.__end_cap_.__value_ = &v15[v14];
        v17 = *(_OWORD *)__p;
        v16->__r_.__value_.__r.__words[2] = v21;
        *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
        __p[1] = 0;
        v21 = 0;
        __p[0] = 0;
        __v.__end_ = v16 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        v18 = *(_QWORD *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        v19 = SHIBYTE(v21);
        *(_QWORD *)(a3 + 8) = v18;
        if (v19 < 0)
          operator delete(__p[0]);
      }
      else
      {
        v10 = *(_OWORD *)__p;
        *(_QWORD *)(v9 + 16) = v21;
        *(_OWORD *)v9 = v10;
        *(_QWORD *)(a3 + 8) = v9 + 24;
      }
      v6 += 4;
    }
    while (v6 != v7);
  }
}

void sub_1ADC7DA94(_Unwind_Exception *__p, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, std::__split_buffer<std::wstring> *a7, ...)
{
  va_list __pa;

  va_start(__pa, a7);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__pa);
  _Unwind_Resume(__p);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2ELm3ELm4EEEEJiNS_6vectorIiNS_9allocatorIiEEEES6_NS3_IN5kaldi6quasar15TranslationUtil12NbestElementENS4_ISA_EEEEfEEC2B8ne180100IJLm0ELm1ELm2ELm3ELm4EEJiS6_S6_SC_fEJEJEJRiRS6_SG_RSC_RfEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSK_IJDpT2_EEEDpOT3_(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t *a5, _DWORD *a6)
{
  *(_DWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 8), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 32), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>((_QWORD *)(a1 + 56), *a5, a5[1], 0xF0F0F0F0F0F0F0F1 * ((a5[1] - *a5) >> 4));
  *(_DWORD *)(a1 + 80) = *a6;
  return a1;
}

void sub_1ADC7DB90(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADC7DC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xF0F0F0F0F0F0F1)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[272 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F1)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(272 * a2);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*,kaldi::quasar::TranslationUtil::NbestElement*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(a4 + v7), (const kaldi::quasar::TranslationUtil::NbestElement *)(a2 + v7));
      v7 += 272;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1ADC7DD38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 272;
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(v4 + v2));
      v2 -= 272;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void **std::unique_ptr<quasar::Config>::reset[abi:ne180100](void ***a1, void **a2)
{
  void **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    quasar::Config::~Config(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void quasar::Config::~Config(void **this)
{
  void *v2;
  void *v3;

  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v2 = this[21];
  if (v2)
  {
    this[22] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  v3 = this[15];
  if (v3)
  {
    this[16] = v3;
    operator delete(v3);
  }
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::TranslationBeamSearch(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, char a8, float a9, float a10, float a11, float a12, char a13, int a14, char a15)
{
  clockid_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  void *v35;
  uint64_t v36;
  void *v38;
  uint64_t v39;
  unsigned __int8 v40;
  void *__p[2];
  char v42;
  char v43[9];

  v43[0] = a8;
  *(_QWORD *)a1 = &unk_1E5D33AA8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_WORD *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 124) = 0x400000003;
  *(_BYTE *)(a1 + 132) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE(a1 + 152, 1, (__int128 *)__p);
  if (v42 < 0)
    operator delete(__p[0]);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>(v43, (_QWORD *)(a1 + 392));
  kaldi::quasar::NNMTTransliterator::NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408), a13);
  *(_BYTE *)(a1 + 4880) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 4856), v26);
  *(_QWORD *)(a1 + 4888) = 0;
  *(_BYTE *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 4904) = 0;
  *(_QWORD *)(a1 + 4920) = 0;
  *(_QWORD *)(a1 + 4912) = 0;
  *(_BYTE *)(a1 + 4929) = 0;
  *(_OWORD *)(a1 + 4984) = 0u;
  *(_OWORD *)(a1 + 5000) = 0u;
  *(_QWORD *)(a1 + 4968) = 0;
  *(_OWORD *)(a1 + 4936) = 0u;
  *(_OWORD *)(a1 + 4952) = 0u;
  *(_QWORD *)(a1 + 4976) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 5016) = 0;
  *(_OWORD *)(a1 + 5032) = 0u;
  *(_OWORD *)(a1 + 5048) = 0u;
  *(_QWORD *)(a1 + 5024) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 5064) = 0;
  kaldi::Matrix<float>::Matrix(a1 + 5072);
  *(_OWORD *)(a1 + 5144) = 0u;
  *(_OWORD *)(a1 + 5160) = 0u;
  *(_OWORD *)(a1 + 5112) = 0u;
  *(_OWORD *)(a1 + 5128) = 0u;
  *(_QWORD *)(a1 + 5176) = -1;
  *(_DWORD *)(a1 + 5184) = -1;
  *(_DWORD *)(a1 + 5188) = a2;
  *(float *)(a1 + 5192) = a10;
  *(_DWORD *)(a1 + 5196) = a14;
  *(float *)(a1 + 5200) = a9;
  *(_OWORD *)(a1 + 5204) = 0u;
  *(_DWORD *)(a1 + 5220) = a5;
  *(_DWORD *)(a1 + 5224) = a3;
  *(float *)(a1 + 5228) = a11;
  *(float *)(a1 + 5232) = a12;
  *(_BYTE *)(a1 + 5236) = a4;
  *(_BYTE *)(a1 + 5237) = a15;
  *(_WORD *)(a1 + 5238) = 256;
  *(_BYTE *)(a1 + 5240) = 0;
  *(_DWORD *)(a1 + 5244) = a6;
  *(_DWORD *)(a1 + 5248) = a7;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  kaldi::Matrix<float>::Matrix(a1 + 5632);
  *(_QWORD *)(a1 + 5744) = 0;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_DWORD *)(a1 + 5672) = 0;
  *(_OWORD *)(a1 + 5688) = 0u;
  *(_BYTE *)(a1 + 5704) = 0;
  *(_OWORD *)(a1 + 5784) = 0u;
  *(_OWORD *)(a1 + 5800) = 0u;
  *(_OWORD *)(a1 + 5816) = 0u;
  *(_DWORD *)(a1 + 5884) = 0;
  *(_OWORD *)(a1 + 5836) = 0u;
  *(_OWORD *)(a1 + 5852) = 0u;
  *(_OWORD *)(a1 + 5868) = 0u;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Apply BPE source : ", 19);
    v28 = *(int *)(a1 + 5244);
    if (v28 > 2)
      v29 = "";
    else
      v29 = off_1E5D48480[v28];
    std::string::basic_string[abi:ne180100]<0>(&v38, v29);
    if ((v40 & 0x80u) == 0)
      v30 = &v38;
    else
      v30 = v38;
    if ((v40 & 0x80u) == 0)
      v31 = v40;
    else
      v31 = v39;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v30, v31);
    if ((char)v40 < 0)
      operator delete(v38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Apply BPE target : ", 19);
      v33 = *(int *)(a1 + 5248);
      if (v33 > 2)
        v34 = "";
      else
        v34 = off_1E5D48480[v33];
      std::string::basic_string[abi:ne180100]<0>(&v38, v34);
      if ((v40 & 0x80u) == 0)
        v35 = &v38;
      else
        v35 = v38;
      if ((v40 & 0x80u) == 0)
        v36 = v40;
      else
        v36 = v39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)v35, v36);
      if ((char)v40 < 0)
        operator delete(v38);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
  }
  return a1;
}

void sub_1ADC7E204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, kaldi::quasar::NNMTTransliterator *a13, uint64_t a14, kaldi::quasar::BPE *a15, uint64_t a16, kaldi::quasar::InputHammer *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  void **v24;
  uint64_t v25;
  uint64_t v26;
  kaldi::nnet1::Nnet *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v32;
  void *v33;
  void **v34;
  void *v35;
  void *v36;
  void *v37;

  if (a23 < 0)
    operator delete(__p);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a24);
  v32 = *(void **)(v25 + 5864);
  if (v32)
  {
    *(_QWORD *)(v25 + 5872) = v32;
    operator delete(v32);
  }
  v33 = *(void **)(v25 + 5840);
  if (v33)
  {
    *(_QWORD *)(v25 + 5848) = v33;
    operator delete(v33);
  }
  v34 = (void **)(v25 + 5736);
  v35 = *(void **)(v25 + 5808);
  if (v35)
  {
    *(_QWORD *)(v25 + 5816) = v35;
    operator delete(v35);
  }
  v36 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v25 + 5792) = v36;
    operator delete(v36);
  }
  v37 = *v34;
  if (*v34)
  {
    *(_QWORD *)(v25 + 5744) = v37;
    operator delete(v37);
  }
  kaldi::Matrix<float>::~Matrix(v28);
  kaldi::nnet1::Nnet::~Nnet(v27);
  a24 = v25 + 5152;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  a24 = v25 + 5128;
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v26);
  kaldi::Matrix<float>::~Matrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(v30);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  a24 = v25 + 4952;
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a12);
  if (*(char *)(v29 + 47) < 0)
    operator delete(*(void **)(v25 + 4904));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator(a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  kaldi::quasar::BPE::~BPE(a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a16);
  kaldi::quasar::InputHammer::~InputHammer(a17);
  _Unwind_Resume(a1);
}

void sub_1ADC7E378()
{
  JUMPOUT(0x1ADC7E350);
}

void sub_1ADC7E380()
{
  JUMPOUT(0x1ADC7E358);
}

void sub_1ADC7E388(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADC7E360);
}

void sub_1ADC7E3A0()
{
  JUMPOUT(0x1ADC7E360);
}

void kaldi::quasar::InputHammer::~InputHammer(kaldi::quasar::InputHammer *this)
{
  void **v2;

  v2 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table((uint64_t)this + 40);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::PhraseBook,std::allocator<kaldi::quasar::PhraseBook>,BOOL &,void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::PhraseBook>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADC7E458(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__shared_ptr_emplace[abi:ne180100]<BOOL &,std::allocator<kaldi::quasar::PhraseBook>,0>(_QWORD *a1, char *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41D80;
  kaldi::quasar::PhraseBook::PhraseBook((kaldi::quasar::PhraseBook *)(a1 + 3), *a2);
  return a1;
}

void sub_1ADC7E4A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::quasar::PhraseBook>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<kaldi::quasar::PhraseBook>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

kaldi::quasar::PhraseBook *kaldi::quasar::PhraseBook::PhraseBook(kaldi::quasar::PhraseBook *this, char a2)
{
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 5, "|||");
  *((_DWORD *)this + 16) = 0;
  *((_BYTE *)this + 68) = a2;
  return this;
}

void sub_1ADC7E578(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

void kaldi::quasar::PhraseBook::PhraseBookEntry::~PhraseBookEntry(void **this)
{
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t std::allocator<kaldi::quasar::PhraseBook>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
    operator delete(*(void **)(a2 + 40));
  return std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::~__hash_table(a2);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::~TranslationBeamSearch(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &unk_1E5D33AA8;
  v2 = *(void **)(a1 + 5864);
  if (v2)
  {
    *(_QWORD *)(a1 + 5872) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 5840);
  if (v3)
  {
    *(_QWORD *)(a1 + 5848) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 5808);
  if (v4)
  {
    *(_QWORD *)(a1 + 5816) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 5784);
  if (v5)
  {
    *(_QWORD *)(a1 + 5792) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 5736);
  if (v6)
  {
    *(_QWORD *)(a1 + 5744) = v6;
    operator delete(v6);
  }
  kaldi::Matrix<float>::~Matrix(a1 + 5632);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(a1 + 5256));
  v8 = (void **)(a1 + 5152);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 5128);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 5112);
  kaldi::Matrix<float>::~Matrix(a1 + 5072);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 5024);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 4976);
  v8 = (void **)(a1 + 4952);
  std::vector<kaldi::Matrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 4936);
  if (*(char *)(a1 + 4927) < 0)
    operator delete(*(void **)(a1 + 4904));
  kaldi::quasar::NNMTTransliterator::~NNMTTransliterator((kaldi::quasar::NNMTTransliterator *)(a1 + 408));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 392);
  kaldi::quasar::BPE::~BPE((kaldi::quasar::BPE *)(a1 + 152));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 136);
  v8 = (void **)(a1 + 88);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_set<std::string>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_set<std::string>>>>::~__hash_table(a1 + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 8);
  return a1;
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ReadMapped(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  fst::MappedFile *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD v19[34];

  if (a1[639])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v19, "Already mapped from a file");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v4 = a1 + 639;
  v5 = kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>(a2, (uint64_t)a1);
  std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v4, (uint64_t)v5);
  v6 = a1[17];
  v7 = (std::__shared_weak_count *)a1[640];
  v17 = a1[639];
  v18 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  kaldi::quasar::Encdec::SetMappedFile(v6, &v17);
  v10 = v18;
  if (v18)
  {
    v11 = (unint64_t *)&v18->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"memory mapped file ", 19);
    v14 = *(char *)(a2 + 23);
    if (v14 >= 0)
      v15 = a2;
    else
      v15 = *(_QWORD *)a2;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a2 + 23);
    else
      v16 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v19);
  }
}

void sub_1ADC7EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  _BYTE *v7;
  int v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int32x2_t **v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int32x2_t *v22;
  _QWORD *v23;
  _QWORD *v24;
  int v25;
  int v26;
  int32x2_t *v27;
  int v28;
  int v29;
  std::string v31;
  std::string v32;
  uint64_t v33;
  std::__shared_weak_count *v34;

  v4 = a3;
  v7 = (_BYTE *)(a1 + 4896);
  v8 = *(unsigned __int8 *)(a1 + 4928);
  v9 = *(unsigned __int8 *)(a1 + 4929);
  v10 = *(_QWORD *)(a1 + 4936);
  v11 = *(std::__shared_weak_count **)(a1 + 4944);
  v12 = a1 + 4904;
  v33 = v10;
  v34 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(v12, a2, a3, a4, v8 != 0, v9 != 0, (uint64_t)&v33, (uint64_t *)&v32);
  v15 = (int32x2_t **)(a1 + 136);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 136, (__int128 *)&v32);
  size = (std::__shared_weak_count *)v32.__r_.__value_.__l.__size_;
  if (v32.__r_.__value_.__l.__size_)
  {
    v17 = (unint64_t *)(v32.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v19 = v34;
  if (v34)
  {
    v20 = (unint64_t *)&v34->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *v7 = 1;
  v22 = *(int32x2_t **)(a1 + 136);
  *(int32x2_t *)(a1 + 5176) = vadd_s32(v22[103], (int32x2_t)-1);
  *(_DWORD *)(a1 + 5184) = v22[104].i32[0] - 1;
  if (kaldi::g_kaldi_verbose_level < 0)
  {
    v7[342] = v22[189].i8[7];
  }
  else
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Using the special symbols ids <unk>=", 36);
    v23 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)", <s> = ", 8);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", </s> = ", 9);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
    v22 = *(int32x2_t **)(a1 + 136);
    v25 = kaldi::g_kaldi_verbose_level;
    v7[342] = v22[189].i8[7];
    if ((v25 & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Applying log to output probs ", 29);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
      v22 = *v15;
    }
  }
  if (v22[188].i8[1])
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Has BPE Model", 13);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
      v22 = *v15;
    }
    kaldi::quasar::BPE::operator=(a1 + 152, (uint64_t)&v22[71]);
    if (!*(_DWORD *)(a1 + 5244))
      *(_DWORD *)(a1 + 5244) = 1;
    if (!*(_DWORD *)(a1 + 5248))
    {
      v26 = 1;
LABEL_31:
      *(_DWORD *)(a1 + 5248) = v26;
    }
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"No embedded BPE Model", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
    }
    if (!*(_DWORD *)(a1 + 5244))
      *(_DWORD *)(a1 + 5244) = 2;
    if (!*(_DWORD *)(a1 + 5248))
    {
      v26 = 2;
      goto LABEL_31;
    }
  }
  v27 = *v15;
  if ((*v15)[297].i8[0])
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Configuring multilang decorator", 31);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
      v27 = *v15;
    }
    if (v27[300].i8[7] < 0)
    {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)&v27[298], *(_QWORD *)&v27[299]);
      v27 = *v15;
    }
    else
    {
      v32 = *(std::string *)v27[298].i8;
    }
    if (v27[303].i8[7] < 0)
      std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)&v27[301], *(_QWORD *)&v27[302]);
    else
      v31 = *(std::string *)v27[301].i8;
    v28 = kaldi::quasar::ToAddTag((uint64_t)&v32);
    v29 = kaldi::quasar::ToTagFormat(&v31);
    *(_BYTE *)(a1 + 120) = 1;
    *(_DWORD *)(a1 + 124) = v28;
    *(_DWORD *)(a1 + 128) = v29;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
  }
  if ((kaldi::PeekToken(a2, v4) & 0x80000000) == 0)
  {
    kaldi::ExpectToken(a2, v4, "<HasPhraseBook>");
    v7[344] = 0;
    kaldi::ReadBasicType<BOOL>(a2, v4, v7 + 344);
    if (v7[344])
      kaldi::quasar::PhraseBook::Read(*(_QWORD *)(a1 + 392), a2, v4);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"# PhraseBook entries ", 21);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v32);
    }
  }
  return 1;
}

void sub_1ADC7EED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::exception a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

fst::MappedFile *kaldi::ReadMapped<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  if (!v17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v27[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Read(a2, v6, v17, *((_QWORD *)v5 + 1));
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADC7F1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TMTools::GetModel<kaldi::quasar::Encdec>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t **v16;
  uint64_t *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  int v24;
  const void *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  int v32;
  const void *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t *v43;
  __int128 v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  _QWORD *v48;
  int v49;
  const void *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t **v55;
  uint64_t *v56;
  uint64_t **v57;
  std::__shared_weak_count *v58;
  uint64_t v59[35];
  __int128 v60;
  uint64_t v61;
  std::__shared_weak_count *v62;

  v61 = 0;
  v62 = 0;
  if (*(_QWORD *)a7)
    v16 = (uint64_t **)kaldi::quasar::TMTools::ModelSharing::Cache<kaldi::quasar::Encdec>(*(uint64_t ***)a7);
  else
    v16 = (uint64_t **)kaldi::quasar::Encdec::ModelFileMap(0);
  v55 = v16;
  v56 = a8;
  if ((_DWORD)a5)
  {
    v59[0] = a1;
    v17 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v16, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v59);
    v18 = (std::__shared_weak_count *)v17[8];
    if (v18)
    {
      v19 = std::__shared_weak_count::lock(v18);
      if (v19)
        v20 = v17[7];
      else
        v20 = 0;
    }
    else
    {
      v20 = 0;
      v19 = 0;
    }
    v61 = v20;
    v62 = v19;
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v21 = operator new();
  kaldi::quasar::Encdec::Encdec(v21, a1, a6, a5);
  std::shared_ptr<kaldi::quasar::Encdec>::shared_ptr[abi:ne180100]<kaldi::quasar::Encdec,void>(&v60, v21);
  if (v20)
    v22 = a5;
  else
    v22 = 0;
  kaldi::quasar::Encdec::Read(v60, a2, a3, a4, v22);
  if ((a5 & 1) == 0)
  {
    v30 = v56;
    if (kaldi::g_kaldi_verbose_level < 5)
    {
LABEL_60:
      *(_OWORD *)v30 = v60;
      goto LABEL_61;
    }
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59, 5);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Getting model for: ", 19);
    v32 = *(char *)(a1 + 23);
    if (v32 >= 0)
      v33 = (const void *)a1;
    else
      v33 = *(const void **)a1;
    if (v32 >= 0)
      v34 = *(unsigned __int8 *)(a1 + 23);
    else
      v34 = *(_QWORD *)(a1 + 8);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" (sharing disabled)", 19);
LABEL_59:
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59);
    goto LABEL_60;
  }
  if (!v20)
  {
    v36 = v60;
    v37 = *(std::__shared_weak_count **)(a7 + 8);
    v57 = *(uint64_t ***)a7;
    v58 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(p_shared_owners);
      while (__stxr(v39 + 1, p_shared_owners));
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(v36 + 536), (uint64_t *)&v57);
    v40 = v58;
    if (v58)
    {
      v41 = (unint64_t *)&v58->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    v59[0] = a1;
    v43 = std::__tree<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<kaldi::quasar::TorchEncoderDecoder>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v55, (const void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)v59);
    v44 = v60;
    if (*((_QWORD *)&v60 + 1))
    {
      v45 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 16);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = (std::__shared_weak_count *)v43[8];
    *(_OWORD *)(v43 + 7) = v44;
    v30 = v56;
    if (v47)
      std::__shared_weak_count::__release_weak(v47);
    if (kaldi::g_kaldi_verbose_level < 5)
      goto LABEL_60;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59, 5);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Getting new model for: ", 23);
    v49 = *(char *)(a1 + 23);
    if (v49 >= 0)
      v50 = (const void *)a1;
    else
      v50 = *(const void **)a1;
    if (v49 >= 0)
      v51 = *(unsigned __int8 *)(a1 + 23);
    else
      v51 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v50, v51);
    goto LABEL_59;
  }
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59, 5);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)"Getting existing model for: ", 28);
    v24 = *(char *)(a1 + 23);
    if (v24 >= 0)
      v25 = (const void *)a1;
    else
      v25 = *(const void **)a1;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a1 + 23);
    else
      v26 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v59);
  }
  *v56 = v20;
  v56[1] = (uint64_t)v19;
  v61 = 0;
  v62 = 0;
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v60 + 1);
  if (*((_QWORD *)&v60 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v60 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
LABEL_61:
  v52 = v62;
  if (v62)
  {
    v53 = (unint64_t *)&v62->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1ADC7F5CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 144);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 120);
  _Unwind_Resume(a1);
}

void kaldi::quasar::PhraseBook::Read(uint64_t a1, uint64_t *a2, int a3)
{
  int *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  std::locale::id *v17;
  const std::locale::facet *v18;
  unsigned __int8 v19;
  std::string *v20;
  std::string::size_type v21;
  uint64_t v22;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  __int128 *v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  std::string __c;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  std::string *p_c;
  __int128 *v44[2];

  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"Reading phrasebook", 18);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
  kaldi::ExpectToken(a2, a3, "<PhraseBook>");
  v6 = (int *)(a1 + 64);
  kaldi::ReadBasicType<int>(a2, a3, a1 + 64);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"num_entries ", 12);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
  v7 = *v6;
  if ((a3 & 1) == 0)
  {
    if (v7 < 1)
      goto LABEL_93;
    v16 = 0;
    v17 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    while (1)
    {
      memset(&v33, 0, sizeof(v33));
      std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
      v18 = std::locale::use_facet((const std::locale *)&v34, v17);
      v19 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v18->__vftable[2].~facet_0)(v18, 10);
      std::locale::~locale((std::locale *)&v34);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v33, v19);
      kaldi::Trim(&v33);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v33.__r_.__value_.__l.__size_ != 13)
          goto LABEL_59;
        v20 = (std::string *)v33.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) != 13)
          goto LABEL_59;
        v20 = &v33;
      }
      v21 = v20->__r_.__value_.__r.__words[0];
      v22 = *(std::string::size_type *)((char *)v20->__r_.__value_.__r.__words + 5);
      if (v21 == 0x6573617268502F3CLL && v22 == 0x3E6B6F6F42657361)
      {
        v27 = 1;
        if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) == 0)
          goto LABEL_91;
        goto LABEL_90;
      }
LABEL_59:
      memset(&v32, 0, sizeof(v32));
      kaldi::SplitStringOnString((uint64_t)&v33, (char *)(a1 + 40), (uint64_t *)&v32);
      if (((0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0]) >> 3)) & 0xFFFFFFFFFFFFFFFELL) == 2)
      {
        kaldi::Trim((std::string *)v32.__r_.__value_.__l.__data_);
        kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)v32.__r_.__value_.__l.__data_, &v31);
        kaldi::Trim((std::string *)(v32.__r_.__value_.__r.__words[0] + 24));
        if (v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0] == 72)
          kaldi::Trim((std::string *)(v32.__r_.__value_.__r.__words[0] + 48));
        if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&v31))
        {
          memset(&v34, 0, sizeof(v34));
          v44[0] = (__int128 *)&v31;
          v24 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, v44);
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v24 + 5);
          *(std::string *)(v24 + 40) = v34;
          memset(&v34, 0, sizeof(v34));
          __c.__r_.__value_.__r.__words[0] = (std::string::size_type)&v34;
          std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__c);
        }
        __c.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
        v25 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&v31, (uint64_t)&std::piecewise_construct, (__int128 **)&__c);
        v26 = (__int128 *)v32.__r_.__value_.__r.__words[0];
        if (v32.__r_.__value_.__l.__size_ - v32.__r_.__value_.__r.__words[0] == 72)
        {
          if (*(char *)(v32.__r_.__value_.__r.__words[0] + 71) < 0)
            std::string::__init_copy_ctor_external(&__c, *(const std::string::value_type **)(v32.__r_.__value_.__r.__words[0] + 48), *(_QWORD *)(v32.__r_.__value_.__r.__words[0] + 56));
          else
            __c = *(std::string *)(v32.__r_.__value_.__r.__words[0] + 48);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__c, "");
        }
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v34, (__int128 *)&v31, v26, (__int128 *)((char *)v26 + 24), (__int128 *)&__c);
        v28 = *((_QWORD *)v25 + 6);
        if (v28 >= *((_QWORD *)v25 + 7))
        {
          v29 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>((uint64_t *)v25 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
        }
        else
        {
          kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v25 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
          v29 = v28 + 120;
          *((_QWORD *)v25 + 6) = v28 + 120;
        }
        *((_QWORD *)v25 + 6) = v29;
        if (v42 < 0)
          operator delete(__p);
        if (v40 < 0)
          operator delete(v39);
        if (v38 < 0)
          operator delete(v37);
        if (v36 < 0)
          operator delete(v35);
        if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v34.__r_.__value_.__l.__data_);
        if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__c.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v31.__r_.__value_.__l.__data_);
      }
      else
      {
        --v16;
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v34);
      v27 = 0;
      if ((*((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_91;
LABEL_90:
      operator delete(v33.__r_.__value_.__l.__data_);
LABEL_91:
      if ((v27 & 1) == 0 && ++v16 < *v6)
        continue;
      goto LABEL_93;
    }
  }
  if (v7 >= 1)
  {
    v8 = 0;
    do
    {
      memset(&v32, 0, sizeof(v32));
      memset(&v31, 0, sizeof(v31));
      memset(&v33, 0, sizeof(v33));
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        v9 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v33, __c.__r_.__value_.__s.__data_[0]);
          ++v9;
        }
        while (v9 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        *v32.__r_.__value_.__l.__data_ = 0;
        v32.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v32.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v32.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        v10 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v32, __c.__r_.__value_.__s.__data_[0]);
          ++v10;
        }
        while (v10 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      {
        *v31.__r_.__value_.__l.__data_ = 0;
        v31.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v31.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
      }
      LODWORD(v34.__r_.__value_.__l.__data_) = 0;
      std::istream::read();
      if (SLODWORD(v34.__r_.__value_.__l.__data_) >= 1)
      {
        v11 = 0;
        do
        {
          __c.__r_.__value_.__s.__data_[0] = 0;
          std::istream::read();
          std::string::push_back(&v31, __c.__r_.__value_.__s.__data_[0]);
          ++v11;
        }
        while (v11 < SLODWORD(v34.__r_.__value_.__l.__data_));
      }
      kaldi::quasar::PhraseBook::PreProcess(a1, (uint64_t)&v33, &__c);
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&__c))
      {
        memset(&v34, 0, sizeof(v34));
        p_c = &__c;
        v12 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__c, (uint64_t)&std::piecewise_construct, (__int128 **)&p_c);
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate((void **)v12 + 5);
        *(std::string *)(v12 + 40) = v34;
        memset(&v34, 0, sizeof(v34));
        v44[0] = (__int128 *)&v34;
        std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)v44);
      }
      v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&__c;
      v13 = std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, (unsigned __int8 *)&__c, (uint64_t)&std::piecewise_construct, (__int128 **)&v34);
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(&v34, (__int128 *)&__c, (__int128 *)&v33, (__int128 *)&v32, (__int128 *)&v31);
      v14 = *((_QWORD *)v13 + 6);
      if (v14 >= *((_QWORD *)v13 + 7))
      {
        v15 = std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>((uint64_t *)v13 + 5, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
      }
      else
      {
        kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(*((std::string **)v13 + 6), (const kaldi::quasar::PhraseBook::PhraseBookEntry *)&v34);
        v15 = v14 + 120;
        *((_QWORD *)v13 + 6) = v14 + 120;
      }
      *((_QWORD *)v13 + 6) = v15;
      if (v42 < 0)
        operator delete(__p);
      if (v40 < 0)
        operator delete(v39);
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v34.__r_.__value_.__l.__data_);
      if (SHIBYTE(__c.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__c.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      ++v8;
    }
    while (v8 < *v6);
  }
  kaldi::ExpectToken(a2, 1, "</PhraseBook>");
LABEL_93:
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"# of keys ", 10);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v34);
  }
}

void sub_1ADC7FD9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,std::locale a33)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a33);
  _Unwind_Resume(a1);
}

void kaldi::quasar::PhraseBook::PreProcess(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  if (*(_BYTE *)(a1 + 68))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    kaldi::quasar::PhraseBook::LowerCaseUtf8(a2, a3);
  }
}

void kaldi::quasar::PhraseBook::LowerCaseUtf8(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  int32_t v3;
  void *__p;
  _BYTE *v5;
  uint64_t v6;
  UErrorCode pErrorCode;
  UChar *src[3];

  kaldi::quasar::NNMTTransliterator::UnicodeVectorFromString(a1, (uint64_t)src);
  pErrorCode = U_ZERO_ERROR;
  v3 = u_strToLower(0, 0, src[0], -1, "", &pErrorCode);
  __p = 0;
  v5 = 0;
  v6 = 0;
  std::vector<unsigned short>::resize((uint64_t)&__p, v3 + 1);
  pErrorCode = U_ZERO_ERROR;
  u_strToLower((UChar *)__p, (unint64_t)(v5 - (_BYTE *)__p) >> 1, src[0], -1, "", &pErrorCode);
  kaldi::quasar::NNMTTransliterator::StringFromUnicodeVector((const UChar **)&__p, a2);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (src[0])
  {
    src[1] = src[0];
    operator delete(src[0]);
  }
}

void sub_1ADC7FFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADC802A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x40uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_1ADC80340(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 120;
        std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__push_back_slow_path<kaldi::quasar::PhraseBook::PhraseBookEntry>(uint64_t *a1, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  std::string *v14;
  std::string *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<boost::io::detail::format_item<char,std::char_traits<char>,std::allocator<char>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (std::string *)&v10[120 * v4];
  v16 = &v10[120 * v9];
  kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(v14, a2);
  v15 = v14 + 5;
  std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADC804F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, const kaldi::quasar::PhraseBook::PhraseBookEntry *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *(_OWORD *)a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 3);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 8);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *((const std::string::value_type **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 72);
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 11);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v7;
  }
  v8 = this + 4;
  if (*((char *)a2 + 119) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = *((_OWORD *)a2 + 6);
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 14);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  return this;
}

void sub_1ADC80624(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<kaldi::quasar::PhraseBook::PhraseBookEntry>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>((uint64_t)(a1 + 2), a1[1], (const kaldi::quasar::PhraseBook::PhraseBookEntry *)a1[1], *a1, (const kaldi::quasar::PhraseBook::PhraseBookEntry *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>(uint64_t a1, uint64_t a2, const kaldi::quasar::PhraseBook::PhraseBookEntry *a3, uint64_t a4, const kaldi::quasar::PhraseBook::PhraseBookEntry *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  const kaldi::quasar::PhraseBook::PhraseBookEntry *v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  v13 = 0;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (const kaldi::quasar::PhraseBook::PhraseBookEntry *)((char *)v9 - 120);
      kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry((std::string *)(v7 - 120), v9);
      v7 = *((_QWORD *)&v15 + 1) - 120;
      *((_QWORD *)&v15 + 1) -= 120;
    }
    while (v9 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

void sub_1ADC807A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>,std::reverse_iterator<kaldi::quasar::PhraseBook::PhraseBookEntry*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::~__split_buffer(void **a1)
{
  std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<kaldi::quasar::PhraseBook::PhraseBookEntry>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 120;
    std::allocator<kaldi::quasar::PhraseBook::PhraseBookEntry>::destroy[abi:ne180100](v4, i - 120);
  }
}

std::string *kaldi::quasar::PhraseBook::PhraseBookEntry::PhraseBookEntry(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v9 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v9;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v10;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v11;
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 3, *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v12 = *a5;
    this[3].__r_.__value_.__r.__words[2] = *((_QWORD *)a5 + 2);
    *(_OWORD *)&this[3].__r_.__value_.__l.__data_ = v12;
  }
  std::string::basic_string[abi:ne180100]<0>(this[4].__r_.__value_.__r.__words, "*");
  return this;
}

void sub_1ADC809A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, uint64_t *a6, int a7, char a8)
{
  uint64_t v16;
  void *__p;
  _BYTE *v18;
  uint64_t v19;
  _DWORD v20[5];
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  int v31;
  _QWORD v32[9];
  uint64_t v33[3];

  memset(v33, 0, sizeof(v33));
  fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)v32, a1, (uint64_t)v33);
  v16 = *a6;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a6[1], a6[2], (a6[2] - a6[1]) >> 2);
  *(_QWORD *)v20 = v32;
  *(_QWORD *)&v20[3] = 0x3A800000FFFFFFFFLL;
  v21 = 0;
  v22 = a3;
  v23 = a4;
  v24 = 0;
  v25 = a5;
  v26 = a8;
  v27 = v16;
  v29 = 0;
  v30 = 0;
  v28 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v28, __p, (uint64_t)v18, (v18 - (_BYTE *)__p) >> 2);
  v31 = a7;
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, v33, (uint64_t)v20);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  fst::AutoQueue<int>::~AutoQueue(v32);
  *(_QWORD *)v20 = v33;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1ADC80B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23;

  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  fst::AutoQueue<int>::~AutoQueue(&a23);
  a13 = v23 - 104;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1@<X0>, uint64_t a2@<X8>, float a3@<S0>)
{
  float *v5;
  float *v6;
  uint64_t v7;
  unint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  char *v14;
  BOOL v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float **v23;
  void *__p;
  _BYTE *v25;
  uint64_t v26;
  float *v27;
  float *v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, (uint64_t *)&v27, 0, a3);
  v6 = v27;
  v5 = v28;
  if ((char *)v28 - (char *)v27 == 32)
  {
    if (!fst::LatticeWeightTpl<float>::Member(v27))
    {
      *(int32x2_t *)a2 = vdup_n_s32(0x7FC00000u);
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = 0;
      goto LABEL_23;
    }
    v6 = v27;
    v5 = v28;
  }
  *(int32x2_t *)a2 = vdup_n_s32(0x7F800000u);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  if (v5 != v6)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t))(*(_QWORD *)a1 + 32))(&v16, a1, v8);
      v9 = v6[v7] + *(float *)&v16;
      v10 = v6[v7 + 1] + *((float *)&v16 + 1);
      v21 = 0;
      v22 = 0;
      v20 = 0;
      v12 = *(float *)a2;
      v11 = *(float *)(a2 + 4);
      v13 = *(float *)a2 + v11;
      if (v13 >= (float)(v9 + v10))
      {
        if (v13 > (float)(v9 + v10) || (v12 >= v9 ? (v15 = v12 <= v9) : (v15 = 1), v14 = (char *)a2, !v15))
        {
          v14 = &v19;
          v11 = v10;
          v12 = v9;
        }
      }
      else
      {
        v14 = (char *)a2;
      }
      v23 = (float **)__PAIR64__(LODWORD(v11), LODWORD(v12));
      v25 = 0;
      v26 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v14 + 1), *((_QWORD *)v14 + 2), (uint64_t)(*((_QWORD *)v14 + 2) - *((_QWORD *)v14 + 1)) >> 2);
      *(_QWORD *)a2 = v23;
      if (&v23 != (float ***)a2)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 8), (char *)__p, (uint64_t)v25, (v25 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v25 = __p;
        operator delete(__p);
      }
      if (v17)
      {
        v18 = v17;
        operator delete(v17);
      }
      ++v8;
      v6 = v27;
      v7 += 8;
    }
    while (v8 < ((char *)v28 - (char *)v27) >> 5);
  }
LABEL_23:
  v23 = &v27;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
}

void sub_1ADC80D70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *a18, void *__p, uint64_t a20,uint64_t a21,char a22)
{
  a18 = &a22;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __n128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _QWORD v32[3];
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void *__p;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  _QWORD v41[3];
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  int v47;
  float v48;
  int v49;

  v5 = *a2;
  v4 = a2[1];
  if (v4 != *a2)
  {
    v6 = (void (***)(_QWORD))(v4 - 16);
    v7 = (void (***)(_QWORD))(v4 - 16);
    do
    {
      v8 = *v7;
      v7 -= 2;
      (*v8)(v6);
      v9 = v6 == (void (***)(_QWORD))v5;
      v6 = v7;
    }
    while (!v9);
  }
  a2[1] = v5;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if ((_DWORD)result == -1)
    return result;
  v11 = result;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, result);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v11);
  LODWORD(v32[0]) = HIDWORD(v35);
  LODWORD(v41[0]) = v35;
  v49 = 2139095040;
  v48 = INFINITY;
  v13 = *(float *)&v35 != INFINITY || *(float *)v32 != v48;
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::reserve(a2, v12 + v13);
  if (v13)
  {
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a2[1] - 16) + 200))(a2[1] - 16);
    v15 = a2[1];
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v44, a1, v11);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)(v15 - 16) + 184))(v15 - 16, v14, &v44);
    if (v45)
    {
      v46 = v45;
      operator delete(v45);
    }
  }
  v43 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v41);
  while (1)
  {
    result = v41[0];
    if (v41[0])
      break;
    if (v43 >= v41[2])
      goto LABEL_51;
LABEL_19:
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(a2, ((a2[1] - *a2) >> 4) + 1);
    v16 = a2[1];
    if (v41[0])
      v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41[0] + 32))(v41[0]);
    else
      v17 = v41[1] + 48 * v43;
    v19 = *(_QWORD *)(v16 - 16);
    v18 = v16 - 16;
    v20 = (*(uint64_t (**)(uint64_t))(v19 + 200))(v18);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 176))(v18, v20);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
    v22 = *(void **)(v17 + 8);
    v35 = *(_QWORD *)v17;
    __p = v22;
    v38 = 0;
    v39 = 0;
    v37 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v37, *(const void **)(v17 + 16), *(_QWORD *)(v17 + 24), (uint64_t)(*(_QWORD *)(v17 + 24) - *(_QWORD *)(v17 + 16)) >> 2);
    v40 = v21;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 208))(v18, v20, &v35);
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    v23 = *(unsigned int *)(v17 + 40);
    while ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v23))
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v23);
      v49 = HIDWORD(v35);
      LODWORD(v32[0]) = v35;
      v48 = INFINITY;
      v47 = 2139095040;
      v24.n128_u32[0] = v35;
      if (*(float *)&v35 == INFINITY)
        v24.n128_u32[0] = v47;
      if (__p)
      {
        v37 = __p;
        operator delete(__p);
      }
      v34 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *, __n128))(*(_QWORD *)a1 + 136))(a1, v23, v32, v24);
      if (v32[0])
        v25 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v32[0] + 32))(v32[0]);
      else
        v25 = v32[1] + 48 * v34;
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 200))(v18);
      v27 = *(void **)(v25 + 8);
      v35 = *(_QWORD *)v25;
      __p = v27;
      v38 = 0;
      v39 = 0;
      v37 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v37, *(const void **)(v25 + 16), *(_QWORD *)(v25 + 24), (uint64_t)(*(_QWORD *)(v25 + 24) - *(_QWORD *)(v25 + 16)) >> 2);
      v40 = v26;
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 208))(v18, v21, &v35);
      if (v37)
      {
        v38 = v37;
        operator delete(v37);
      }
      v23 = *(unsigned int *)(v25 + 40);
      if (v32[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v32[0] + 8))(v32[0]);
      }
      else if (v33)
      {
        --*v33;
      }
      v21 = v26;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v35, a1, v23);
    v49 = HIDWORD(v35);
    LODWORD(v32[0]) = v35;
    v48 = INFINITY;
    v47 = 2139095040;
    v28.n128_u32[0] = v35;
    if (*(float *)&v35 == INFINITY)
      v28.n128_u32[0] = v47;
    if (__p)
    {
      v37 = __p;
      operator delete(__p);
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(&v29, a1, v23, v28);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 184))(v18, v21, &v29);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    if (v41[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v41[0] + 40))(v41[0]);
    else
      ++v43;
  }
  if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v41[0] + 24))(v41[0]))
    goto LABEL_19;
  result = v41[0];
  if (v41[0])
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v41[0] + 8))(v41[0]);
LABEL_51:
  if (v42)
    --*v42;
  return result;
}

void sub_1ADC812FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  uint64_t v27;
  void *v29;

  v29 = *(void **)(v27 - 120);
  if (v29)
  {
    *(_QWORD *)(v27 - 112) = v29;
    operator delete(v29);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::SuppressedIds(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  void **v17[34];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string v21;

  kaldi::quasar::MultiLangDecorator::GetTags(a1 + 120, a2, a3, (uint64_t)&v21);
  v18 = 0;
  v19 = 0;
  v20 = 0;
  kaldi::SplitStringToVector(&v21, " ", 1, (uint64_t)&v18);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  v8 = v18;
  v9 = v19;
  while (v8 != v9)
  {
    LODWORD(v17[0]) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 560), v8)- 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v17, v17);
    v8 += 24;
  }
  v11 = *a4;
  v10 = a4[1];
  while (v11 != v10)
  {
    v12 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 136) + 560) + 96))(*(_QWORD *)(*(_QWORD *)(a1 + 136) + 560), v11);
    if (v12 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Token to suppress not found in symbol table: ", 45);
      v14 = *(char *)(v11 + 23);
      if (v14 >= 0)
        v15 = v11;
      else
        v15 = *(_QWORD *)v11;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(v11 + 23);
      else
        v16 = *(_QWORD *)(v11 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v17);
    }
    LODWORD(v17[0]) = v12 - 1;
    std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a5, (int *)v17, v17);
    v11 += 24;
  }
  v17[0] = (void **)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v17);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1ADC81570()
{
  uint64_t v0;

  std::__tree<int>::destroy(v0, *(_QWORD **)(v0 + 8));
  JUMPOUT(0x1ADC8158CLL);
}

BOOL kaldi::quasar::PhraseBook::Find(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  std::string __p;

  kaldi::quasar::PhraseBook::PreProcess((uint64_t)a1, a2, &__p);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*(char *)(a3 + 23) < 0)
  {
    **(_BYTE **)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    if (!v5)
      return v5 != 0;
    goto LABEL_5;
  }
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 23) = 0;
  if (v5)
LABEL_5:
    std::string::operator=((std::string *)a3, (const std::string *)(*((_QWORD *)v5 + 5) + 48));
  return v5 != 0;
}

void sub_1ADC81644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  float v19;
  void **v20;
  uint64_t *v21;
  BOOL v22;
  int v23;
  float v24;
  uint64_t v25;
  int v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  void *v43;
  void *__p;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  _QWORD v59[2];
  void *v60;
  uint64_t v61;

  v8 = *(_QWORD *)(a4 + 24);
  if (v8 == 1 && *(_BYTE *)(a4 + 35) == 0)
  {
    v43 = 0;
    __p = 0;
    *(_QWORD *)&v45 = 0;
    LODWORD(v57) = 0;
    if (fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a3, (uint64_t *)a4, &v57, (char **)&v43))fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a1, a2, &v43, v57);
    else
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    if (v43)
    {
      __p = v43;
      operator delete(v43);
    }
  }
  else if (v8)
  {
    if (*(_BYTE *)(a4 + 33)
      || (fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a3, a4), a3[1] - *a3 != 32)|| fst::LatticeWeightTpl<float>::Member((float *)*a3))
    {
      v36 = a2;
      fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst(&v60);
      fst::Reverse<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, (uint64_t *)&v60, 1);
      v57 = (void *)vdup_n_s32(0x7F800000u);
      v59[0] = 0;
      v59[1] = 0;
      v58 = 0;
      v10 = *(_QWORD *)(**(_QWORD **)(v61 + 64) + 48);
      v11 = *(_QWORD *)(**(_QWORD **)(v61 + 64) + 56) - v10;
      if (v11)
      {
        if ((unint64_t)(v11 / 48) <= 1)
          v12 = 1;
        else
          v12 = v11 / 48;
        v13 = v10 + 24;
        do
        {
          v14 = *(int *)(v13 + 16) - 1;
          if (v14 < (a3[1] - *a3) >> 5)
          {
            v52 = *(_QWORD *)(v13 - 16);
            v54 = 0;
            v55 = 0;
            v53 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v53, *(const void **)(v13 - 8), *(_QWORD *)v13, (uint64_t)(*(_QWORD *)v13 - *(_QWORD *)(v13 - 8)) >> 2);
            v15 = (float *)(*a3 + 32 * v14);
            v16 = *(float *)&v52 + *v15;
            v17 = *((float *)&v52 + 1) + v15[1];
            v41 = 0;
            v56 = 0;
            v18 = *((float *)&v57 + 1);
            LODWORD(v19) = (_DWORD)v57;
            if ((float)(*(float *)&v57 + *((float *)&v57 + 1)) >= (float)(v16 + v17))
            {
              if ((float)(*(float *)&v57 + *((float *)&v57 + 1)) > (float)(v16 + v17)
                || (*(float *)&v57 >= v16 ? (v22 = *(float *)&v57 <= v16) : (v22 = 1), v20 = &v58, v21 = v59, !v22))
              {
                v21 = &v56;
                v20 = &v41;
                v18 = v17;
                v19 = v16;
              }
            }
            else
            {
              v20 = &v58;
              v21 = v59;
            }
            v43 = (void *)__PAIR64__(LODWORD(v18), LODWORD(v19));
            v45 = 0uLL;
            __p = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *v20, *v21, (*v21 - (uint64_t)*v20) >> 2);
            v57 = v43;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v58, (char *)__p, v45, (uint64_t)(v45 - (_QWORD)__p) >> 2);
            if (__p)
            {
              *(_QWORD *)&v45 = __p;
              operator delete(__p);
            }
            if (v53)
            {
              v54 = v53;
              operator delete(v53);
            }
          }
          v13 += 48;
          --v12;
        }
        while (v12);
      }
      std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::insert(a3, *a3, (unint64_t)&v57);
      if (*(_BYTE *)(a4 + 32))
      {
        v52 = 0;
        v53 = 0;
        v54 = 0;
        v23 = *(_DWORD *)(a4 + 16);
        LOBYTE(v43) = FLAGS_fst_default_cache_gc;
        __p = (void *)FLAGS_fst_default_cache_gc_limit;
        LODWORD(v45) = v23;
        *(_QWORD *)((char *)&v45 + 4) = 0;
        BYTE12(v45) = 0;
        v46 = 0;
        v47 = 0;
        fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>(&v41, (uint64_t)&v60, (uint64_t)a3, (uint64_t)&v52, (uint64_t)&v43);
        v24 = *(float *)(a4 + 16);
        v37 = *(_QWORD *)(a4 + 40);
        v39 = 0;
        v40 = 0;
        v38 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v38, *(const void **)(a4 + 48), *(_QWORD *)(a4 + 56), (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)&v41, v36, &v52, v8, (uint64_t)&v37, *(_DWORD *)(a4 + 72), *(unsigned __int8 *)(a4 + 35), v24);
        if (v38)
        {
          v39 = v38;
          operator delete(v38);
        }
        v41 = &unk_1E5D27478;
        v25 = v42;
        if (v42)
        {
          v26 = *(_DWORD *)(v42 + 56) - 1;
          *(_DWORD *)(v42 + 56) = v26;
          if (!v26)
            (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
        }
        v43 = &v52;
        std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
      }
      else
      {
        v27 = *(float *)(a4 + 16);
        v48 = *(_QWORD *)(a4 + 40);
        v50 = 0;
        v51 = 0;
        v49 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v49, *(const void **)(a4 + 48), *(_QWORD *)(a4 + 56), (uint64_t)(*(_QWORD *)(a4 + 56) - *(_QWORD *)(a4 + 48)) >> 2);
        fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)&v60, v36, a3, v8, (uint64_t)&v48, *(_DWORD *)(a4 + 72), *(unsigned __int8 *)(a4 + 35), v27);
        if (v49)
        {
          v50 = v49;
          operator delete(v49);
        }
      }
      v28 = *a3;
      v29 = a3[1];
      v30 = *a3 + 32;
      if (v30 != v29)
      {
        v31 = *a3;
        do
        {
          v32 = v31 + 32;
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v31, v31 + 32);
          v28 += 32;
          v31 = v32;
        }
        while (v32 + 32 != v29);
        v30 = a3[1];
      }
      while (v30 != v28)
      {
        v33 = *(void **)(v30 - 24);
        if (v33)
        {
          *(_QWORD *)(v30 - 16) = v33;
          operator delete(v33);
        }
        v30 -= 32;
      }
      a3[1] = v28;
      if (v58)
      {
        v59[0] = v58;
        operator delete(v58);
      }
      v60 = &unk_1E5D24F40;
      v34 = v61;
      if (v61)
      {
        v35 = *(_DWORD *)(v61 + 56) - 1;
        *(_DWORD *)(v61 + 56) = v35;
        if (!v35)
          (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
      }
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    }
  }
}

void sub_1ADC81B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;
  _DWORD *v32;
  int v33;

  if (__p)
    operator delete(__p);
  v31 = *(void **)(v29 - 144);
  if (v31)
  {
    *(_QWORD *)(v29 - 136) = v31;
    operator delete(v31);
  }
  *(_QWORD *)(v29 - 120) = &unk_1E5D24F40;
  v32 = *(_DWORD **)(v29 - 112);
  if (v32)
  {
    v33 = v32[14] - 1;
    v32[14] = v33;
    if (!v33)
      (*(void (**)(_DWORD *))(*(_QWORD *)v32 + 8))(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21800;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1ADC82484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _BYTE *a5, _BYTE *a6)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  _DWORD *v20;
  float v21;
  float v22;
  int v23;
  float v24;
  _QWORD v25[3];
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  float v31;
  int v32;
  float v33;
  float v34;

  *a5 = 1;
  *a6 = 1;
  v12 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v12)
  {
    v13 = v12 >> 2;
    if (v13 <= 1)
      v13 = 1;
    bzero(*(void **)a3, 4 * v13);
  }
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  while (1)
  {
    result = v28;
    if (!v28)
    {
      if ((int)v30 >= v29)
        return result;
LABEL_11:
      v16 = v30;
      goto LABEL_12;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    result = v28;
    if (v15)
      break;
    if (!v28)
      goto LABEL_11;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_12:
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v16, v25);
    while (1)
    {
      if (!v25[0])
      {
        if (v27 >= v25[2])
          goto LABEL_44;
        goto LABEL_18;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v25[0] + 24))(v25[0]))
        break;
      if (v25[0])
      {
        v18 = (*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
        goto LABEL_19;
      }
LABEL_18:
      v18 = v25[1] + 48 * v27;
LABEL_19:
      v19 = *(int *)(*a2 + 4 * (int)v16);
      if ((_DWORD)v19 == *(_DWORD *)(*a2 + 4 * *(int *)(v18 + 40)))
      {
        v20 = *(_DWORD **)a3;
        if (!a4
          || (v22 = *(float *)(v18 + 8), v21 = *(float *)(v18 + 12), (float)(v22 + v21) < 0.0)
          || v22 < 0.0 && (float)(v22 + v21) <= 0.0)
        {
          v23 = 1;
          goto LABEL_25;
        }
        if ((v20[v19] | 2) == 2)
        {
          v34 = *(float *)(v18 + 8);
          v33 = v21;
          v32 = 2139095040;
          v31 = INFINITY;
          if (v22 == INFINITY && v33 == v31 || (v34 = v22, v33 = v21, v32 = 0, v31 = 0.0, v22 == 0.0) && v33 == v31)
            v23 = 2;
          else
            v23 = 3;
LABEL_25:
          v20[v19] = v23;
        }
        *a5 = 0;
      }
      v24 = *(float *)(v18 + 8);
      v17.n128_u32[0] = *(_DWORD *)(v18 + 12);
      v34 = v24;
      v33 = v17.n128_f32[0];
      v32 = 2139095040;
      v31 = INFINITY;
      if (v24 != INFINITY || v33 != v31)
      {
        v34 = v24;
        v33 = v17.n128_f32[0];
        v32 = 0;
        v31 = 0.0;
        v17.n128_f32[0] = v24;
        if (v24 != 0.0 || (v17.n128_f32[0] = v33, v33 != v31))
          *a6 = 0;
      }
      if (v25[0])
        (*(void (**)(_QWORD, __n128))(*(_QWORD *)v25[0] + 40))(v25[0], v17);
      else
        ++v27;
    }
    if (v25[0])
    {
      (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
      goto LABEL_46;
    }
LABEL_44:
    if (v26)
      --*v26;
LABEL_46:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    return (*(uint64_t (**)(void))(*(_QWORD *)v28 + 8))();
  return result;
}

void sub_1ADC82928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADC82ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::TopOrderVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 48 * v12[5];
            v18 = *(int *)(v17 + 40);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 40);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 40);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADC8320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D19940;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21800;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  return a1;
}

void fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::~ShortestFirstQueue(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D21800;
  v2 = (void *)a1[14];
  if (v2)
  {
    a1[15] = v2;
    operator delete(v2);
  }
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,false>::~Heap(a1 + 2);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Head_(uint64_t a1)
{
  return **(unsigned int **)(a1 + 80);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Enqueue_(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(a1 + 16, &v3);
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Dequeue_(uint64_t a1)
{
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Pop(a1 + 16);
}

BOOL fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Empty_(uint64_t a1)
{
  return *(_DWORD *)(a1 + 104) == 0;
}

uint64_t fst::ShortestFirstQueue<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Clear_(uint64_t result)
{
  *(_DWORD *)(result + 104) = 0;
  return result;
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(uint64_t a1, int *a2)
{
  int *v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  int *v15;
  char *v16;
  int v17;
  unint64_t v18;
  char *v19;
  _DWORD *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  char *v31;
  _DWORD *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  int v41;
  unsigned int v42;

  v5 = a1 + 64;
  v4 = *(int **)(a1 + 64);
  v6 = *(int *)(v5 + 24);
  v7 = *(int **)(v5 + 8);
  v8 = v7 - v4;
  if (v8 <= v6)
  {
    v9 = *(_QWORD *)(a1 + 80);
    if ((unint64_t)v7 >= v9)
    {
      if ((v8 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v9 - (_QWORD)v4;
      v12 = (uint64_t)(v9 - (_QWORD)v4) >> 1;
      if (v12 <= v8 + 1)
        v12 = v8 + 1;
      if (v11 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
      {
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v13);
        v4 = *(int **)(a1 + 64);
        v7 = *(int **)(a1 + 72);
      }
      else
      {
        v14 = 0;
      }
      v15 = (int *)&v14[4 * v8];
      v16 = &v14[4 * v13];
      *v15 = *a2;
      v10 = v15 + 1;
      while (v7 != v4)
      {
        v17 = *--v7;
        *--v15 = v17;
      }
      *(_QWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 72) = v10;
      *(_QWORD *)(a1 + 80) = v16;
      if (v4)
        operator delete(v4);
    }
    else
    {
      *v7 = *a2;
      v10 = v7 + 1;
    }
    v18 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 72) = v10;
    v19 = *(char **)(a1 + 24);
    if ((unint64_t)v19 >= v18)
    {
      v21 = *(char **)(a1 + 16);
      v22 = (v19 - v21) >> 2;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_53;
      v23 = v18 - (_QWORD)v21;
      v24 = (uint64_t)(v18 - (_QWORD)v21) >> 1;
      if (v24 <= v22 + 1)
        v24 = v22 + 1;
      if (v23 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 32, v25);
        v21 = *(char **)(a1 + 16);
        v19 = *(char **)(a1 + 24);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v28 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 88);
      v20 = v27 + 4;
      while (v19 != v21)
      {
        v29 = *((_DWORD *)v19 - 1);
        v19 -= 4;
        *((_DWORD *)v27 - 1) = v29;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 16) = v27;
      *(_QWORD *)(a1 + 24) = v20;
      *(_QWORD *)(a1 + 32) = v28;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_DWORD *)v19 = *(_DWORD *)(a1 + 88);
      v20 = v19 + 4;
    }
    v30 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 24) = v20;
    v31 = *(char **)(a1 + 48);
    if ((unint64_t)v31 < v30)
    {
      *(_DWORD *)v31 = *(_DWORD *)(a1 + 88);
      v32 = v31 + 4;
LABEL_51:
      *(_QWORD *)(a1 + 48) = v32;
      goto LABEL_52;
    }
    v33 = *(char **)(a1 + 40);
    v34 = (v31 - v33) >> 2;
    if (!((unint64_t)(v34 + 1) >> 62))
    {
      v35 = v30 - (_QWORD)v33;
      v36 = (uint64_t)(v30 - (_QWORD)v33) >> 1;
      if (v36 <= v34 + 1)
        v36 = v34 + 1;
      if (v35 >= 0x7FFFFFFFFFFFFFFCLL)
        v37 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v37 = v36;
      if (v37)
      {
        v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 56, v37);
        v33 = *(char **)(a1 + 40);
        v31 = *(char **)(a1 + 48);
      }
      else
      {
        v38 = 0;
      }
      v39 = &v38[4 * v34];
      v40 = &v38[4 * v37];
      *(_DWORD *)v39 = *(_DWORD *)(a1 + 88);
      v32 = v39 + 4;
      while (v31 != v33)
      {
        v41 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *((_DWORD *)v39 - 1) = v41;
        v39 -= 4;
      }
      *(_QWORD *)(a1 + 40) = v39;
      *(_QWORD *)(a1 + 48) = v32;
      *(_QWORD *)(a1 + 56) = v40;
      if (v33)
        operator delete(v33);
      goto LABEL_51;
    }
LABEL_53:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
  v4[v6] = *a2;
  *(_DWORD *)(*(_QWORD *)(a1 + 16) + 4 * *(int *)(*(_QWORD *)(a1 + 40) + 4 * *(int *)(a1 + 88))) = *(_DWORD *)(a1 + 88);
LABEL_52:
  v42 = *(_DWORD *)(a1 + 88);
  *(_DWORD *)(a1 + 88) = v42 + 1;
  return fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert((uint64_t **)a1, a2, v42);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Insert(uint64_t **a1, int *a2, unsigned int a3)
{
  uint64_t *v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;

  if ((int)a3 >= 1)
  {
    v3 = a1[8];
    v4 = **a1;
    while (1)
    {
      v5 = a3 - 1;
      v6 = (a3 - 1) >> 1;
      v7 = (float *)(v4 + 32 * *((int *)v3 + v6));
      v8 = (float *)(v4 + 32 * *a2);
      v9 = *v7 + v7[1];
      v10 = *v8 + v8[1];
      if (v9 < v10)
        break;
      if (*v7 < *v8 && v9 <= v10)
        break;
      v12 = a1[5];
      v13 = *((int *)v12 + a3);
      v14 = *((int *)v12 + v6);
      *((_DWORD *)v12 + a3) = v14;
      v15 = a1[2];
      *((_DWORD *)v15 + v14) = a3;
      *((_DWORD *)v12 + v6) = v13;
      *((_DWORD *)v15 + v13) = v6;
      LODWORD(v12) = *((_DWORD *)v3 + a3);
      *((_DWORD *)v3 + a3) = *((_DWORD *)v3 + v6);
      *((_DWORD *)v3 + v6) = (_DWORD)v12;
      a3 = v5 >> 1;
      if (v5 <= 1)
        return *((unsigned int *)a1[5] + (int)v6);
    }
  }
  LODWORD(v6) = a3;
  return *((unsigned int *)a1[5] + (int)v6);
}

uint64_t fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Pop(uint64_t a1)
{
  _DWORD *v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_DWORD **)(a1 + 64);
  v2 = *v1;
  v3 = *(int *)(a1 + 88) - 1;
  v4 = *(int **)(a1 + 40);
  v5 = *v4;
  v6 = v4[v3];
  *v4 = v6;
  v7 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(v7 + 4 * v6) = 0;
  v4[v3] = v5;
  *(_DWORD *)(v7 + 4 * v5) = v3;
  LODWORD(v4) = *v1;
  *v1 = v1[v3];
  v1[v3] = (_DWORD)v4;
  --*(_DWORD *)(a1 + 88);
  fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Heapify((uint64_t **)a1, 0);
  return v2;
}

uint64_t **fst::Heap<int,fst::StateWeightCompare<int,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,false>::Heapify(uint64_t **result, uint64_t a2)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  float *v7;
  float *v8;
  float v9;
  float v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  float *v15;
  float *v16;
  float v17;
  float v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;

  while (1)
  {
    v2 = (2 * a2) | 1;
    v3 = *((_DWORD *)result + 22);
    v4 = a2;
    if (v2 < v3)
    {
      v5 = result[8];
      v6 = **result;
      v7 = (float *)(v6 + 32 * *((int *)v5 + v2));
      v8 = (float *)(v6 + 32 * *((int *)v5 + (int)a2));
      v9 = *v7 + v7[1];
      v10 = *v8 + v8[1];
      if (v9 < v10 || (*v7 < *v8 ? (v11 = v9 <= v10) : (v11 = 0), v4 = a2, v11))
        v4 = (2 * (_DWORD)a2) | 1u;
    }
    v12 = (2 * a2 + 2);
    if ((int)v12 >= v3
      || (v13 = result[8],
          v14 = **result,
          v15 = (float *)(v14 + 32 * *((int *)v13 + (int)v12)),
          v16 = (float *)(v14 + 32 * *((int *)v13 + (int)v4)),
          v17 = *v15 + v15[1],
          v18 = *v16 + v16[1],
          v17 >= v18)
      && (v17 > v18 || *v15 >= *v16))
    {
      v12 = v4;
    }
    if ((_DWORD)v12 == (_DWORD)a2)
      break;
    v19 = result[5];
    v20 = *((int *)v19 + (int)a2);
    v21 = *((int *)v19 + (int)v12);
    *((_DWORD *)v19 + (int)a2) = v21;
    v22 = result[2];
    *((_DWORD *)v22 + v21) = a2;
    *((_DWORD *)v19 + (int)v12) = v20;
    *((_DWORD *)v22 + v20) = v12;
    v23 = result[8];
    LODWORD(v20) = *((_DWORD *)v23 + (int)a2);
    *((_DWORD *)v23 + (int)a2) = *((_DWORD *)v23 + (int)v12);
    *((_DWORD *)v23 + (int)v12) = v20;
    a2 = v12;
  }
  return result;
}

uint64_t fst::SingleShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4, char **a5)
{
  uint64_t v9;
  uint64_t v10;
  __int32 v11;
  fst *v12;
  _QWORD *v13;
  uint64_t v14;
  fst *v15;
  _QWORD *v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  _BOOL4 v49;
  float32x2_t v50;
  void *v51;
  float v52;
  float v53;
  float v54;
  float v55;
  int32x2_t *v56;
  uint64_t *v57;
  unint64_t v58;
  _BOOL4 v59;
  float v60;
  int32x2_t *v61;
  uint64_t *v62;
  int v63;
  float32x2_t *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  float *v80;
  float32x2_t v81;
  __int32 v82;
  float v83;
  float32x2_t v84;
  float32x2_t v85;
  float v86;
  int32x2_t *v87;
  BOOL v88;
  float v89;
  __n128 v90;
  _BOOL4 v91;
  float v92;
  float v93;
  float v94;
  int32x2_t *v95;
  BOOL v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  _DWORD *v102;
  uint64_t v104;
  uint64_t v105;
  float32x2_t v106;
  unint64_t v107;
  void *v108;
  _BYTE *v109;
  uint64_t v110;
  int32x2_t v111;
  void *v112;
  void *v113;
  uint64_t v114;
  void *__p[2];
  __int128 v116;
  unint64_t v117;
  float32x2_t v118;
  void *v119;
  void *v120;
  uint64_t v121;
  void *v122;
  void *v123;
  _QWORD v124[2];
  void *v125[3];
  float v126;
  int v127;
  float v128;
  float v129;

  a5[1] = *a5;
  *a4 = -1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    return 1;
  memset(v125, 0, sizeof(v125));
  v9 = *a3;
  v10 = *((unsigned int *)a3 + 3);
  v104 = *a3;
  if ((_DWORD)v10 == -1)
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    v9 = v104;
  }
  v122 = (void *)vdup_n_s32(0x7F800000u);
  v124[0] = 0;
  v124[1] = 0;
  v123 = 0;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  (*(void (**)(_QWORD))(**(_QWORD **)(v9 + 16) + 56))(*(_QWORD *)(v9 + 16));
  if (a3[3] != 1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v15 = fst::LogMessage::LogMessage((fst *)&v118, (uint64_t)__p);
    v16 = (_QWORD *)fst::cerr(v15);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"SingleShortestPath: for nshortest > 1, use ShortestPath", 55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" instead", 8);
LABEL_43:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v118);
    if (SBYTE7(v116) < 0)
      operator delete(__p[0]);
    goto LABEL_45;
  }
  v11 = *((_DWORD *)a3 + 11);
  LODWORD(__p[0]) = *((_DWORD *)a3 + 10);
  v118.i32[0] = v11;
  v111.i32[0] = 2139095040;
  LODWORD(v107) = 2139095040;
  if (*(float *)__p != INFINITY || v118.f32[0] != *(float *)&v107 || *((_DWORD *)a3 + 18) != -1)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v12 = fst::LogMessage::LogMessage((fst *)&v118, (uint64_t)__p);
    v13 = (_QWORD *)fst::cerr(v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"SingleShortestPath: weight and state thresholds not applicable", 62);
    goto LABEL_43;
  }
  v101 = a3;
  v102 = a4;
  v17 = a2[1];
  if ((int)v10 > (unint64_t)((uint64_t)(v17 - *a2) >> 5))
  {
    v18 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      __p[0] = v18;
      v116 = 0uLL;
      __p[1] = 0;
      if (v17 >= a2[2])
      {
        v19 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)__p);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)__p);
        v19 = v17 + 32;
      }
      a2[1] = v19;
      if (__p[1])
      {
        *(void **)&v116 = __p[1];
        operator delete(__p[1]);
      }
      LOBYTE(__p[0]) = 0;
      std::vector<BOOL>::push_back((uint64_t)v125, __p);
      v21 = a5[1];
      v20 = (unint64_t)a5[2];
      if ((unint64_t)v21 >= v20)
      {
        v23 = *a5;
        v24 = (v21 - *a5) >> 4;
        v25 = v24 + 1;
        if ((unint64_t)(v24 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v26 = v20 - (_QWORD)v23;
        if (v26 >> 3 > v25)
          v25 = v26 >> 3;
        if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
          v27 = 0xFFFFFFFFFFFFFFFLL;
        else
          v27 = v25;
        if (v27)
        {
          v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v27);
          v23 = *a5;
          v21 = a5[1];
        }
        else
        {
          v28 = 0;
        }
        v29 = &v28[16 * v24];
        *(_DWORD *)v29 = -1;
        *((_QWORD *)v29 + 1) = -1;
        v30 = v29;
        if (v21 != v23)
        {
          do
          {
            *((_OWORD *)v30 - 1) = *((_OWORD *)v21 - 1);
            v30 -= 16;
            v21 -= 16;
          }
          while (v21 != v23);
          v23 = *a5;
        }
        v22 = v29 + 16;
        *a5 = v30;
        a5[1] = v29 + 16;
        a5[2] = &v28[16 * v27];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_DWORD *)v21 = -1;
        *((_QWORD *)v21 + 1) = -1;
        v22 = v21 + 16;
      }
      a5[1] = v22;
      v17 = a2[1];
    }
    while ((int)v10 > (unint64_t)((uint64_t)(v17 - *a2) >> 5));
  }
  *(_OWORD *)__p = 0u;
  v116 = 0u;
  if (v17 >= a2[2])
  {
    v32 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)__p);
    v31 = v104;
  }
  else
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)__p);
    v31 = v104;
    v32 = v17 + 32;
  }
  a2[1] = v32;
  if (__p[1])
  {
    *(void **)&v116 = __p[1];
    operator delete(__p[1]);
  }
  v35 = (unint64_t)a5[2];
  v36 = a5[1];
  if ((unint64_t)v36 >= v35)
  {
    v38 = *a5;
    v39 = (v36 - *a5) >> 4;
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v41 = v35 - (_QWORD)v38;
    if (v41 >> 3 > v40)
      v40 = v41 >> 3;
    if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
      v42 = 0xFFFFFFFFFFFFFFFLL;
    else
      v42 = v40;
    if (v42)
    {
      v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(a5 + 2), v42);
      v38 = *a5;
      v36 = a5[1];
    }
    else
    {
      v43 = 0;
    }
    v44 = &v43[16 * v39];
    v45 = &v43[16 * v42];
    *(_DWORD *)v44 = -1;
    *((_QWORD *)v44 + 1) = -1;
    v37 = v44 + 16;
    if (v36 != v38)
    {
      do
      {
        *((_OWORD *)v44 - 1) = *((_OWORD *)v36 - 1);
        v44 -= 16;
        v36 -= 16;
      }
      while (v36 != v38);
      v38 = *a5;
    }
    *a5 = v44;
    a5[1] = v37;
    a5[2] = v45;
    if (v38)
      operator delete(v38);
  }
  else
  {
    *(_DWORD *)v36 = -1;
    *((_QWORD *)v36 + 1) = -1;
    v37 = v36 + 16;
  }
  a5[1] = v37;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v31 + 16) + 24))(*(_QWORD *)(v31 + 16), v10);
  LOBYTE(__p[0]) = 1;
  std::vector<BOOL>::push_back((uint64_t)v125, __p);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v104 + 16) + 48))(*(_QWORD *)(v104 + 16)) & 1) != 0)
      goto LABEL_195;
    v105 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v104 + 16) + 16))(*(_QWORD *)(v104 + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(v104 + 16) + 32))(*(_QWORD *)(v104 + 16));
    *(_QWORD *)((char *)v125[0] + (((unint64_t)(int)v105 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v105);
    v46 = *a2 + 32 * (int)v105;
    v118 = *(float32x2_t *)v46;
    v120 = 0;
    v121 = 0;
    v119 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v119, *(const void **)(v46 + 8), *(_QWORD *)(v46 + 16), (uint64_t)(*(_QWORD *)(v46 + 16) - *(_QWORD *)(v46 + 8)) >> 2);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1, v105);
    v47 = (uint64_t)(a5 + 2);
    LODWORD(v107) = HIDWORD(__p[0]);
    v111.i32[0] = (__int32)__p[0];
    v129 = INFINITY;
    v128 = INFINITY;
    v48.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p == INFINITY)
    {
      v48.n128_u32[0] = v107;
      v49 = *(float *)&v107 != v128;
    }
    else
    {
      v49 = 1;
    }
    if (__p[1])
    {
      *(void **)&v116 = __p[1];
      operator delete(__p[1]);
    }
    if (!v49)
      goto LABEL_108;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 32))(__p, a1, v105, v48);
    v50 = v118;
    v51 = __p[0];
    v111 = 0;
    v107 = 0;
    if (__p[1])
    {
      *(void **)&v116 = __p[1];
      operator delete(__p[1]);
    }
    v52 = v50.f32[0] + *(float *)&v51;
    v53 = *((float *)&v122 + 1);
    LODWORD(v54) = (_DWORD)v122;
    v55 = (float)(v50.f32[0] + *(float *)&v51) + (float)(v50.f32[1] + *((float *)&v51 + 1));
    if ((float)(*(float *)&v122 + *((float *)&v122 + 1)) >= v55)
    {
      if ((float)(*(float *)&v122 + *((float *)&v122 + 1)) > (float)(v52 + (float)(v50.f32[1] + *((float *)&v51 + 1))))
        goto LABEL_83;
      if (*(float *)&v122 >= v52)
      {
        v56 = (int32x2_t *)&v123;
        v57 = v124;
        if (*(float *)&v122 <= v52)
          goto LABEL_84;
LABEL_83:
        v57 = (uint64_t *)&v107;
        v56 = &v111;
        v53 = v50.f32[1] + *((float *)&v51 + 1);
        v54 = v50.f32[0] + *(float *)&v51;
        goto LABEL_84;
      }
    }
    v56 = (int32x2_t *)&v123;
    v57 = v124;
LABEL_84:
    __p[0] = (void *)__PAIR64__(LODWORD(v53), LODWORD(v54));
    v116 = 0uLL;
    __p[1] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)v56, *v57, (*v57 - *(_QWORD *)v56) >> 2);
    v58 = (unint64_t)v122;
    LODWORD(v128) = HIDWORD(v58);
    v48.n128_u32[0] = v58;
    v129 = *(float *)&v122;
    v126 = *((float *)__p + 1);
    v127 = (int)__p[0];
    v59 = *(float *)&v122 != *(float *)__p || v128 != v126;
    if (__p[1])
    {
      *(void **)&v116 = __p[1];
      operator delete(__p[1]);
      v48.n128_u32[0] = v122;
    }
    if (!v59)
      goto LABEL_100;
    v60 = *((float *)&v122 + 1);
    if ((float)(v48.n128_f32[0] + *((float *)&v122 + 1)) >= v55)
    {
      if ((float)(v48.n128_f32[0] + *((float *)&v122 + 1)) > v55)
        goto LABEL_96;
      if (v48.n128_f32[0] >= v52)
      {
        v61 = (int32x2_t *)&v123;
        v62 = v124;
        if (v48.n128_f32[0] <= v52)
          goto LABEL_97;
LABEL_96:
        v62 = (uint64_t *)&v107;
        v61 = &v111;
        v60 = v50.f32[1] + *((float *)&v51 + 1);
        v48.n128_f32[0] = v50.f32[0] + *(float *)&v51;
        goto LABEL_97;
      }
    }
    v61 = (int32x2_t *)&v123;
    v62 = v124;
LABEL_97:
    __p[0] = (void *)__PAIR64__(LODWORD(v60), v48.n128_u32[0]);
    v116 = 0uLL;
    __p[1] = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)v61, *v62, (*v62 - *(_QWORD *)v61) >> 2);
    v122 = __p[0];
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v123, (char *)__p[1], v116, (uint64_t)(v116 - (unint64_t)__p[1]) >> 2);
    if (__p[1])
    {
      *(void **)&v116 = __p[1];
      operator delete(__p[1]);
    }
    *v102 = v105;
    v48.n128_u32[0] = v122;
LABEL_100:
    if (*((float *)&v122 + 1) == -INFINITY
      || v48.n128_f32[0] == -INFINITY
      || (v48.n128_f32[0] == INFINITY || *((float *)&v122 + 1) == INFINITY)
      && (v48.n128_f32[0] != INFINITY || (v48.n128_u32[0] = 2139095040, *((float *)&v122 + 1) != INFINITY)))
    {
      v63 = 1;
      goto LABEL_187;
    }
    if (*((_BYTE *)v101 + 34))
    {
      v63 = 5;
      goto LABEL_187;
    }
LABEL_108:
    v117 = 0;
    (*(void (**)(uint64_t, uint64_t, void **, __n128))(*(_QWORD *)a1 + 136))(a1, v105, __p, v48);
    while (1)
    {
      if (__p[0])
      {
        if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
          goto LABEL_178;
        if (__p[0])
        {
          v64 = (float32x2_t *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
          goto LABEL_137;
        }
      }
      else if (v117 >= (unint64_t)v116)
      {
LABEL_178:
        v63 = 0;
        goto LABEL_183;
      }
      v64 = (float32x2_t *)((char *)__p[1] + 48 * v117);
LABEL_137:
      while (1)
      {
        v78 = *a2;
        v77 = a2[1];
        v79 = v64[5].i32[0];
        if (v79 < (uint64_t)(v77 - *a2) >> 5)
          break;
        v111 = vdup_n_s32(0x7F800000u);
        v113 = 0;
        v114 = 0;
        v112 = 0;
        if (v77 >= a2[2])
        {
          v65 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)&v111);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)&v111);
          v65 = v77 + 32;
        }
        a2[1] = v65;
        if (v112)
        {
          v113 = v112;
          operator delete(v112);
        }
        v111.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)v125, &v111);
        v67 = a5[1];
        v66 = (unint64_t)a5[2];
        if ((unint64_t)v67 >= v66)
        {
          v69 = *a5;
          v70 = (v67 - *a5) >> 4;
          v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = v66 - (_QWORD)v69;
          if (v72 >> 3 > v71)
            v71 = v72 >> 3;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
            v73 = 0xFFFFFFFFFFFFFFFLL;
          else
            v73 = v71;
          if (v73)
          {
            v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(v47, v73);
            v69 = *a5;
            v67 = a5[1];
          }
          else
          {
            v74 = 0;
          }
          v75 = &v74[16 * v70];
          *(_DWORD *)v75 = -1;
          *((_QWORD *)v75 + 1) = -1;
          v76 = v75;
          if (v67 != v69)
          {
            do
            {
              *((_OWORD *)v76 - 1) = *((_OWORD *)v67 - 1);
              v76 -= 16;
              v67 -= 16;
            }
            while (v67 != v69);
            v69 = *a5;
          }
          v68 = v75 + 16;
          *a5 = v76;
          a5[1] = v75 + 16;
          a5[2] = &v74[16 * v73];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_DWORD *)v67 = -1;
          *((_QWORD *)v67 + 1) = -1;
          v68 = v67 + 16;
        }
        a5[1] = v68;
      }
      v80 = (float *)(v78 + 32 * v79);
      v81 = vadd_f32(v118, v64[1]);
      v111 = (int32x2_t)v81;
      v113 = 0;
      v114 = 0;
      v112 = 0;
      v83 = *v80;
      v82 = *((_DWORD *)v80 + 1);
      v84 = (float32x2_t)vdup_lane_s32((int32x2_t)v81, 0);
      v84.f32[0] = *v80;
      v106 = v81;
      v81.i32[0] = v82;
      v85 = vadd_f32(v84, v81);
      v86 = v85.f32[1];
      if (v85.f32[0] >= v85.f32[1])
      {
        if (v85.f32[0] > v85.f32[1]
          || (v83 >= v106.f32[0] ? (v88 = v83 <= v106.f32[0]) : (v88 = 1), v87 = (int32x2_t *)(v78 + 32 * v79), !v88))
        {
          v82 = v106.i32[1];
          v83 = v106.f32[0];
          v87 = &v111;
        }
      }
      else
      {
        v87 = (int32x2_t *)(v78 + 32 * v79);
      }
      v107 = __PAIR64__(v82, LODWORD(v83));
      v109 = 0;
      v110 = 0;
      v108 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v108, *(const void **)&v87[1], *(_QWORD *)&v87[2], (uint64_t)(*(_QWORD *)&v87[2] - *(_QWORD *)&v87[1]) >> 2);
      v89 = v80[1];
      v129 = *v80;
      v128 = v89;
      v126 = *((float *)&v107 + 1);
      v127 = v107;
      v90.n128_f32[0] = v129;
      if (v129 == *(float *)&v107)
      {
        v90.n128_f32[0] = v128;
        v91 = v128 != v126;
      }
      else
      {
        v91 = 1;
      }
      if (v108)
      {
        v109 = v108;
        operator delete(v108);
      }
      if (v91)
        break;
LABEL_173:
      if (v112)
        operator delete(v112);
      v47 = (uint64_t)(a5 + 2);
      if (__p[0])
        (*(void (**)(void *, __n128))(*(_QWORD *)__p[0] + 40))(__p[0], v90);
      else
        ++v117;
    }
    v93 = *v80;
    v92 = v80[1];
    v94 = *v80 + v92;
    if (v94 >= v86)
    {
      if (v94 > v86
        || (v93 >= v106.f32[0] ? (v96 = v93 <= v106.f32[0]) : (v96 = 1), v95 = (int32x2_t *)(v78 + 32 * v79), !v96))
      {
        v92 = v106.f32[1];
        v93 = v106.f32[0];
        v95 = &v111;
      }
    }
    else
    {
      v95 = (int32x2_t *)(v78 + 32 * v79);
    }
    v107 = __PAIR64__(LODWORD(v92), LODWORD(v93));
    v109 = 0;
    v110 = 0;
    v108 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v108, *(const void **)&v95[1], *(_QWORD *)&v95[2], (uint64_t)(*(_QWORD *)&v95[2] - *(_QWORD *)&v95[1]) >> 2);
    *(_QWORD *)v80 = v107;
    if (v80 != (float *)&v107)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v78 + 32 * v79 + 8), (char *)v108, (uint64_t)v109, (v109 - (_BYTE *)v108) >> 2);
    if (v108)
    {
      v109 = v108;
      operator delete(v108);
    }
    if (fst::LatticeWeightTpl<float>::Member((float *)(v78 + 32 * v79)))
    {
      if (__p[0])
        v97 = (*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 48))(__p[0]);
      else
        v97 = v117;
      v98 = v64[5].i32[0];
      v99 = (uint64_t)&(*a5)[16 * v98];
      *(_DWORD *)v99 = v105;
      *(_QWORD *)(v99 + 8) = v97;
      v100 = **(_QWORD **)(v104 + 16);
      if (((*(_QWORD *)((char *)v125[0] + ((v98 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v98) & 1) != 0)
      {
        (*(void (**)(void))(v100 + 40))();
      }
      else
      {
        (*(void (**)(void))(v100 + 24))();
        *(_QWORD *)((char *)v125[0] + (((unint64_t)v64[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64[5].i32[0];
      }
      goto LABEL_173;
    }
    if (v112)
      operator delete(v112);
    v63 = 1;
LABEL_183:
    if (__p[0])
    {
      (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
    }
    else if (*((_QWORD *)&v116 + 1))
    {
      --**((_DWORD **)&v116 + 1);
    }
LABEL_187:
    if (v119)
    {
      v120 = v119;
      operator delete(v119);
    }
  }
  while (!v63);
  if (v63 != 5)
  {
LABEL_45:
    v14 = 0;
    goto LABEL_46;
  }
LABEL_195:
  v14 = 1;
LABEL_46:
  if (v123)
  {
    v124[0] = v123;
    operator delete(v123);
  }
  if (v125[0])
    operator delete(v125[0]);
  return v14;
}

void sub_1ADC845A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *__p,void *a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42)
{
  uint64_t v42;
  void *v44;
  void *v45;

  v44 = *(void **)(v42 - 184);
  if (v44)
  {
    *(_QWORD *)(v42 - 176) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v42 - 160);
  if (v45)
    operator delete(v45);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SingleShortestPathBacktrace<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  void *__p;
  void *v29;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v8);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v9);
  if ((_DWORD)a4 != -1)
  {
    v10 = -1;
    v11 = a4;
    LODWORD(v12) = -1;
    while (1)
    {
      v13 = v12;
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      if (v10 == -1)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v27, a1, a4);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a2 + 184))(a2, v12, &v27);
        if (__p)
        {
          v29 = __p;
          operator delete(__p);
        }
        goto LABEL_18;
      }
      v26 = 0;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v11, v24);
      v14 = *(_QWORD *)(*a3 + 16 * v10 + 8);
      if (!v24[0])
        break;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v24[0] + 64))(v24[0], v14);
      if (!v24[0])
      {
        v14 = v26;
        goto LABEL_11;
      }
      v15 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 32))(v24[0]);
LABEL_12:
      v19[0] = *(_QWORD *)v15;
      v19[1] = *(_QWORD *)(v15 + 8);
      v21 = 0;
      v22 = 0;
      v20 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v20, *(const void **)(v15 + 16), *(_QWORD *)(v15 + 24), (uint64_t)(*(_QWORD *)(v15 + 24) - *(_QWORD *)(v15 + 16)) >> 2);
      v23 = v13;
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 208))(a2, v12, v19);
      if (v20)
      {
        v21 = v20;
        operator delete(v20);
      }
      if (v24[0])
      {
        (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 8))(v24[0]);
      }
      else if (v25)
      {
        --*v25;
      }
LABEL_18:
      v10 = v11;
      v11 = *(unsigned int *)(*a3 + 16 * (int)v11);
      if ((_DWORD)v11 == -1)
        goto LABEL_21;
    }
    v26 = *(_QWORD *)(*a3 + 16 * v10 + 8);
LABEL_11:
    v15 = v24[1] + 48 * v14;
    goto LABEL_12;
  }
  v12 = 0xFFFFFFFFLL;
LABEL_21:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v12);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v17 = fst::ShortestPathProperties(v16, 0);
  return (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v17, 0x3FFFFFFF0007);
}

void sub_1ADC849F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int32x2_t v6;
  void *__p;
  void *v8;
  uint64_t v9;
  uint64_t v10[3];
  int v11;
  char v12;
  char v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v17[2];

  v10[0] = a1;
  v10[1] = (uint64_t)a2;
  v10[2] = *(_QWORD *)a3;
  v11 = *(_DWORD *)(a3 + 16);
  v12 = *(_BYTE *)(a3 + 20);
  v13 = 0;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, 29);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::ShortestDistance(v10, *(_DWORD *)(a3 + 12));
  if (BYTE12(v17[1]))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
    v6 = vdup_n_s32(0x7FC00000u);
    v8 = 0;
    v9 = 0;
    __p = 0;
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(a2, 1uLL, (uint64_t)&v6);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)v10);
}

void sub_1ADC84B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  if (__p)
    operator delete(__p);
  fst::ShortestDistanceState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~ShortestDistanceState((uint64_t)&a14);
  _Unwind_Resume(a1);
}

uint64_t fst::Reverse<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  _BOOL4 v16;
  int v17;
  unsigned int v18;
  __n128 v19;
  _BOOL4 v20;
  int *v21;
  unint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  _BOOL4 v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  char v34;
  void **v35;
  int v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v44;
  unsigned int v45;
  void **v46;
  void *v47;
  void *v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  void **v54;
  void *v55;
  _BYTE *v56;
  uint64_t *v57;
  void *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t *v61;
  void *v62;
  _BYTE *v63;
  uint64_t v64;
  void *__p;
  void *v66;
  _BYTE *v67;
  void *v68[2];
  __int128 v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _DWORD *v76;
  unint64_t v77;
  void **p_p;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  int v83;
  uint64_t v84;

  (*(void (**)(uint64_t *))(*a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 288))(a2, v7);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0))
  {
    v8 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
    (*(void (**)(uint64_t *, _QWORD))(*a2 + 248))(a2, (v8 + 1));
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v10 = 0;
  v84 = 0;
  v45 = v9;
  if ((a3 & 1) != 0)
    goto LABEL_67;
  LODWORD(v75) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v73);
  v11 = 0xFFFFFFFFLL;
  while (1)
  {
    if (v73)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 16))(v73);
      v13 = v73;
      if ((v12 & 1) != 0)
        goto LABEL_27;
      if (v73)
      {
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
        goto LABEL_11;
      }
    }
    else if ((int)v75 >= (int)v74)
    {
      goto LABEL_29;
    }
    v14 = v75;
LABEL_11:
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v14);
    LODWORD(v57) = HIDWORD(p_p);
    LODWORD(__p) = (_DWORD)p_p;
    LODWORD(v54) = 2139095040;
    LODWORD(v70) = 2139095040;
    v15.n128_u32[0] = p_p;
    if (*(float *)&p_p == INFINITY)
    {
      v15.n128_u32[0] = v57;
      v16 = *(float *)&v57 == *(float *)&v70;
    }
    else
    {
      v16 = 0;
    }
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    v17 = 2 * ((_DWORD)v11 != -1);
    v18 = (_DWORD)v11 == -1 ? v14 : -1;
    if (v16)
    {
      v17 = 4;
      v11 = v11;
    }
    else
    {
      v11 = v18;
    }
    if ((v17 | 4) != 4)
      break;
    if (v73)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v73 + 32))(v73, v15);
    else
      LODWORD(v75) = v75 + 1;
  }
  v13 = v73;
LABEL_27:
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
LABEL_29:
  if ((_DWORD)v11 != -1)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&p_p, a1, v11);
    LODWORD(__p) = HIDWORD(p_p);
    LODWORD(v73) = (_DWORD)p_p;
    LODWORD(v57) = 0;
    LODWORD(v54) = 0;
    v19.n128_u32[0] = p_p;
    if (*(float *)&p_p == 0.0)
    {
      v19.n128_u32[0] = __p;
      v20 = *(float *)&__p != *(float *)&v54;
    }
    else
    {
      v20 = 1;
    }
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
    if (!v20)
    {
      v27 = 0;
      v44 = 0;
      goto LABEL_68;
    }
    __p = 0;
    v66 = 0;
    v67 = 0;
    p_p = &__p;
    v79 = 0;
    v80 = 0;
    v81 = &v84;
    fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, (uint64_t *)&p_p, 0);
    v21 = (int *)__p;
    if (__p != v66)
    {
      v22 = 0;
      do
      {
        v23 = *v21++;
        if (v23 == *((_DWORD *)__p + (int)v11))
          ++v22;
      }
      while (v21 != v66);
      if (v22 > 1)
        goto LABEL_62;
    }
    v77 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v11, &v73);
    while (2)
    {
      while (2)
      {
        if (v73)
        {
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73);
          v25 = v73;
          if ((v24 & 1) != 0)
            goto LABEL_56;
          if (v73)
          {
            v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
            v25 = v73;
            if (*(_DWORD *)(v26 + 40) == (_DWORD)v11)
            {
              v11 = 0xFFFFFFFFLL;
LABEL_56:
              if (v25)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
                goto LABEL_60;
              }
LABEL_58:
              if (v76)
                --*v76;
LABEL_60:
              if ((_DWORD)v11 != -1)
              {
                v10 = 0x2000000000;
                goto LABEL_63;
              }
LABEL_62:
              v10 = 0;
              v11 = 0xFFFFFFFFLL;
LABEL_63:
              if (__p)
              {
                v66 = __p;
                operator delete(__p);
              }
              if ((_DWORD)v11 != -1)
              {
                v44 = v10;
                v27 = 0;
                goto LABEL_68;
              }
              goto LABEL_67;
            }
            if (v73)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
              continue;
            }
            goto LABEL_52;
          }
        }
        else if (v77 >= v75)
        {
          goto LABEL_58;
        }
        break;
      }
      if (*(_DWORD *)(v74 + 48 * v77 + 40) == (_DWORD)v11)
      {
        v11 = 0xFFFFFFFFLL;
        goto LABEL_58;
      }
LABEL_52:
      ++v77;
      continue;
    }
  }
  v10 = 0;
LABEL_67:
  v44 = v10;
  v11 = (*(uint64_t (**)(uint64_t *))(*a2 + 200))(a2);
  v27 = 1;
LABEL_68:
  v72 = 0;
  (*(void (**)(uint64_t, uint64_t *, __n128))(*(_QWORD *)a1 + 128))(a1, &v70, v19);
  while (2)
  {
    if (!v70)
    {
      if ((int)v72 >= v71)
        goto LABEL_126;
      goto LABEL_74;
    }
    if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v70 + 16))(v70))
    {
      if (v70)
      {
        v28 = (*(uint64_t (**)(void))(*(_QWORD *)v70 + 24))();
LABEL_75:
        v29 = v28 + v27;
        while ((*(int (**)(uint64_t *))(*a2 + 160))(a2) <= v29)
          (*(void (**)(uint64_t *))(*a2 + 200))(a2);
        if ((_DWORD)v28 == v45)
        {
          *(_OWORD *)v68 = 0u;
          v69 = 0u;
          (*(void (**)(uint64_t *, _QWORD, void **))(*a2 + 184))(a2, (v28 + v27), v68);
          if (v68[1])
          {
            *(void **)&v69 = v68[1];
            operator delete(v68[1]);
          }
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&__p, a1, v28);
        LODWORD(v73) = HIDWORD(__p);
        LODWORD(p_p) = (_DWORD)__p;
        LODWORD(v57) = 2139095040;
        LODWORD(v54) = 2139095040;
        v30 = *(float *)&__p != INFINITY || *(float *)&v73 != *(float *)&v54;
        if ((v27 & v30) == 1)
        {
          v61 = (uint64_t *)__p;
          v63 = 0;
          v64 = 0;
          v62 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v62, v66, (uint64_t)v67, (v67 - (_BYTE *)v66) >> 2);
          p_p = 0;
          v79 = v61;
          v81 = 0;
          v82 = 0;
          v80 = 0;
          std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v80, v62, (uint64_t)v63, (v63 - (_BYTE *)v62) >> 2);
          v83 = v28 + v27;
          if (v62)
          {
            v63 = v62;
            operator delete(v62);
          }
          (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 208))(a2, 0, &p_p);
          if (v80)
          {
            v81 = v80;
            operator delete(v80);
          }
        }
        v77 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 136))(a1, v28, &v73);
LABEL_90:
        if (v73)
        {
          if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v73 + 24))(v73))
          {
            if (v73)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
              goto LABEL_119;
            }
LABEL_117:
            if (v76)
              --*v76;
LABEL_119:
            if (v66)
            {
              v67 = v66;
              operator delete(v66);
            }
            if (v70)
              (*(void (**)(uint64_t))(*(_QWORD *)v70 + 32))(v70);
            else
              ++v72;
            continue;
          }
          if (v73)
          {
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v73 + 32))(v73);
LABEL_96:
            v32 = *(_DWORD *)(v31 + 40);
            v57 = *(uint64_t **)(v31 + 8);
            v59 = 0;
            v60 = 0;
            v58 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v58, *(const void **)(v31 + 16), *(_QWORD *)(v31 + 24), (uint64_t)(*(_QWORD *)(v31 + 24) - *(_QWORD *)(v31 + 16)) >> 2);
            v33 = (v32 + v27);
            if ((_DWORD)v33 == (_DWORD)v11)
              v34 = v27;
            else
              v34 = 1;
            if ((v34 & 1) == 0)
            {
              (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v54, a1, v11);
              p_p = v54;
              v80 = 0;
              v81 = 0;
              v79 = 0;
              std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v79, v55, (uint64_t)v56, (v56 - (_BYTE *)v55) >> 2);
              v57 = (uint64_t *)vadd_f32((float32x2_t)p_p, (float32x2_t)v57);
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v58, 0, 0, 0);
              if (v79)
              {
                v80 = v79;
                operator delete(v79);
              }
              if (v55)
              {
                v56 = v55;
                operator delete(v55);
              }
            }
            v35 = *(void ***)v31;
            v50 = v57;
            v52 = 0;
            v53 = 0;
            v51 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v51, v58, (uint64_t)v59, (v59 - (_BYTE *)v58) >> 2);
            p_p = v35;
            v79 = v50;
            v81 = 0;
            v82 = 0;
            v80 = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v80, v51, (uint64_t)v52, (v52 - (_BYTE *)v51) >> 2);
            v83 = v29;
            if (v51)
            {
              v52 = v51;
              operator delete(v51);
            }
            while (1)
            {
              v36 = (*(uint64_t (**)(uint64_t *))(*a2 + 160))(a2);
              v37 = *a2;
              if (v36 > (int)v33)
                break;
              (*(void (**)(uint64_t *))(v37 + 200))(a2);
            }
            (*(void (**)(uint64_t *, uint64_t, void ***))(v37 + 208))(a2, v33, &p_p);
            if (v80)
            {
              v81 = v80;
              operator delete(v80);
            }
            if (v58)
            {
              v59 = v58;
              operator delete(v58);
            }
            if (v73)
              (*(void (**)(uint64_t))(*(_QWORD *)v73 + 40))(v73);
            else
              ++v77;
            goto LABEL_90;
          }
        }
        else if (v77 >= v75)
        {
          goto LABEL_117;
        }
        v31 = v74 + 48 * v77;
        goto LABEL_96;
      }
LABEL_74:
      v28 = v72;
      goto LABEL_75;
    }
    break;
  }
  if (v70)
    (*(void (**)(void))(*(_QWORD *)v70 + 8))();
LABEL_126:
  (*(void (**)(uint64_t *, uint64_t))(*a2 + 176))(a2, v11);
  if ((_DWORD)v11 == v45)
    v38 = v27;
  else
    v38 = 1;
  if ((v38 & 1) == 0)
  {
    (*(void (**)(void ***__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&p_p, a1, v45);
    v46 = p_p;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v47, v79, (uint64_t)v80, ((char *)v80 - (char *)v79) >> 2);
    (*(void (**)(uint64_t *, _QWORD, void ***))(*a2 + 184))(a2, v45, &v46);
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v79)
    {
      v80 = v79;
      operator delete(v79);
    }
  }
  v39 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  v40 = v84 | v39;
  v41 = (*(uint64_t (**)(uint64_t *, uint64_t, _QWORD))(*a2 + 64))(a2, 0x3FFFFFFF0007, 0) | v44;
  v42 = fst::ReverseProperties(v40, v27);
  return (*(uint64_t (**)(uint64_t *, unint64_t, uint64_t))(*a2 + 192))(a2, v41 | v42, 0x3FFFFFFF0007);
}

void sub_1ADC85548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::insert(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v6 = a1[1];
  v9 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  if (v6 >= v9)
  {
    v10 = *a1;
    v11 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if (v11 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = (a2 - v10) >> 5;
    v13 = v8 - v10;
    v14 = v13 >> 4;
    if (v13 >> 4 <= v11)
      v14 = ((uint64_t)(v6 - *a1) >> 5) + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v15 = 0x7FFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v22 = v7;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[32 * v12];
    v20 = v19;
    v21 = &v16[32 * v15];
    std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::push_back[abi:ne180100](&v18, a3);
    v4 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, &v18, v4);
    std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>> const&>((uint64_t)a1, a3);
  }
  else
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__move_range((uint64_t)a1, a2, v6, (char *)(a2 + 32));
    if (v4 <= a3)
      a3 += 32 * (a1[1] > a3);
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v4, a3);
  }
  return v4;
}

void sub_1ADC85844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void fst::NShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t a4, uint64_t a5, int a6, int a7, float a8)
{
  fst *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  int *v42;
  char *v43;
  int v44;
  float *v45;
  float v46;
  float v47;
  float v48;
  void *v49;
  int *v50;
  int *v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  float v58;
  float v59;
  float v60;
  float v61;
  char *v62;
  char *v63;
  unint64_t v64;
  float i;
  char *v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  BOOL v76;
  float v77;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  float32x2_t *v82;
  BOOL v83;
  float *v85;
  float v86;
  BOOL v87;
  float v88;
  char *v90;
  void *v91;
  int v92;
  float32x2_t v93;
  void *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int *v98;
  uint64_t v99;
  int *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  int *v106;
  int v107;
  __n128 v108;
  float32x2_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  int *v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  int *v121;
  int v122;
  unint64_t v123;
  unint64_t v124;
  float32x2_t v125;
  int v126;
  char v127;
  int v128;
  uint64_t *v129[2];
  int v130;
  float v131;
  uint64_t *v132[2];
  int v133;
  float v134;
  void *v135;
  void *v136;
  void *v137;
  void *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  _BYTE *v142;
  _DWORD *v143;
  unint64_t v144;
  void *__p[5];
  int v146;
  void *v147[2];
  __int128 v148;
  float v149;
  float32x2_t v150;
  void *v151;
  _BYTE *v152;
  uint64_t v153;
  uint64_t *v154[2];
  int v155;
  float v156;
  uint64_t v157;
  _QWORD *v158;
  unint64_t v159;
  float32x2_t v160;
  void *v161;
  void *v162;
  uint64_t v163;
  __int128 v164;
  __int128 v165;
  char *v166;
  char *v167;
  char *v168;
  int *v169;
  int *v170;
  char *v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  float v175;
  int v176;

  if (!a4)
    return;
  if (a7 && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x400000000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v16 = fst::LogMessage::LogMessage((fst *)&v149, (uint64_t)__p);
    v17 = (_QWORD *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"NShortestPath: FST has a cycle and include_final_ties was set to true. This is not currently supported.", 103);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v149);
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    return;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v18);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v19);
  v172 = 0;
  v173 = 0;
  v174 = 0;
  v169 = 0;
  v170 = 0;
  v171 = 0;
  v166 = 0;
  v167 = 0;
  v168 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) == -1)
    goto LABEL_226;
  v22 = *a3;
  v21 = a3[1];
  if ((*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) >= (unint64_t)((v21 - v22) >> 5))
    goto LABEL_226;
  v23 = (float *)(*a3 + 32 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
  v24 = v23[1];
  *(float *)__p = *v23;
  v149 = v24;
  LODWORD(v140) = 2139095040;
  LODWORD(v135) = 2139095040;
  if (*(float *)__p == INFINITY)
  {
    v20.n128_f32[0] = v149;
    if (v149 == *(float *)&v135)
      goto LABEL_226;
  }
  v20.n128_u32[0] = *(_DWORD *)a5;
  v25 = *(float *)a5 + *(float *)(a5 + 4);
  if (v25 < 0.0)
    goto LABEL_226;
  v26 = v20.n128_f32[0] < 0.0;
  if (v25 > 0.0)
    v26 = 0;
  if (!a6 || v26)
  {
LABEL_226:
    if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 64))(a1, 4, 0, v20))
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
    goto LABEL_13;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v27);
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
  v164 = 0u;
  v165 = 0u;
  (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 184))(a2, v28, &v164);
  v128 = a6;
  v126 = a7;
  if (*((_QWORD *)&v164 + 1))
  {
    *(_QWORD *)&v165 = *((_QWORD *)&v164 + 1);
    operator delete(*((void **)&v164 + 1));
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v173 - v172) >> 3) <= (int)v28)
  {
    v29 = (void *)vdup_n_s32(0x7F800000u);
    do
    {
      LODWORD(__p[0]) = -1;
      __p[1] = v29;
      memset(&__p[2], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
      v30 = v173;
      if (v173 >= v174)
      {
        v31 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v172, (uint64_t)__p);
      }
      else
      {
        std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v172, (uint64_t)__p);
        v31 = v30 + 40;
      }
      v173 = v31;
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
        v31 = v173;
      }
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v31 - v172) >> 3) <= (int)v28);
  }
  LODWORD(__p[0]) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  memset(&__p[1], 0, 32);
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
  v32 = v172;
  v33 = v172 + 40 * (int)v28;
  *(_DWORD *)v33 = __p[0];
  *(void **)(v33 + 8) = __p[1];
  if ((void **)(v33 + 8) != &__p[1])
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v32 + 40 * (int)v28 + 16), (char *)__p[2], (uint64_t)__p[3], ((char *)__p[3] - (char *)__p[2]) >> 2);
  if (__p[2])
  {
    __p[3] = __p[2];
    operator delete(__p[2]);
  }
  v34 = v170;
  if (v170 >= (int *)v171)
  {
    v36 = v169;
    v37 = v170 - v169;
    v38 = v37 + 1;
    if ((unint64_t)(v37 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v39 = v171 - (char *)v169;
    if ((v171 - (char *)v169) >> 1 > v38)
      v38 = v39 >> 1;
    if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v38;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v171, v40);
      v36 = v169;
      v34 = v170;
    }
    else
    {
      v41 = 0;
    }
    v42 = (int *)&v41[4 * v37];
    v43 = &v41[4 * v40];
    *v42 = v28;
    v35 = v42 + 1;
    while (v34 != v36)
    {
      v44 = *--v34;
      *--v42 = v44;
    }
    v169 = v42;
    v170 = v35;
    v171 = v43;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *v170 = v28;
    v35 = v34 + 1;
  }
  v170 = v35;
  v127 = 0;
  v45 = (float *)(*a3 + 32 * (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1));
  v46 = *v45 + *(float *)a5;
  v47 = v45[1] + *(float *)(a5 + 4);
  v161 = 0;
  v162 = 0;
  v163 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v48 = v46 + v47;
  v49 = (void *)vdup_n_s32(0x7F800000u);
  do
  {
    v50 = v169;
    v51 = v170;
    if (v169 == v170)
      break;
    v154[0] = &v172;
    v154[1] = a3;
    v155 = -1;
    v156 = a8;
    if ((char *)v170 - (char *)v169 >= 5)
    {
      v52 = *v169;
      v53 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(v169, v154, (unint64_t)((char *)v170 - (char *)v169) >> 2);
      v54 = v51 - 1;
      if (v51 - 1 == v53)
      {
        *v53 = v52;
      }
      else
      {
        *v53 = *v54;
        *v54 = v52;
        std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((_BOOL8)v50, (uint64_t)(v53 + 1), v154, v53 + 1 - v50);
      }
    }
    v55 = *(v170 - 1);
    v56 = v172 + 40 * v55;
    v149 = *(float *)v56;
    v150 = *(float32x2_t *)(v56 + 8);
    v152 = 0;
    v153 = 0;
    v151 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v151, *(const void **)(v56 + 16), *(_QWORD *)(v56 + 24), (uint64_t)(*(_QWORD *)(v56 + 24) - *(_QWORD *)(v56 + 16)) >> 2);
    --v170;
    if (v149 == NAN)
    {
      *(_OWORD *)v147 = 0u;
      v148 = 0u;
      v58 = 0.0;
      v59 = 0.0;
    }
    else if (SLODWORD(v149) >= (unint64_t)((a3[1] - *a3) >> 5))
    {
      v147[0] = (void *)vdup_n_s32(0x7F800000u);
      v148 = 0uLL;
      v147[1] = 0;
      v58 = INFINITY;
      v59 = INFINITY;
    }
    else
    {
      v57 = *a3 + 32 * SLODWORD(v149);
      v147[0] = *(void **)v57;
      v148 = 0uLL;
      v147[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v147[1], *(const void **)(v57 + 8), *(_QWORD *)(v57 + 16), (uint64_t)(*(_QWORD *)(v57 + 16) - *(_QWORD *)(v57 + 8)) >> 2);
      v58 = *((float *)v147 + 1);
      v59 = *(float *)v147;
    }
    v60 = v59 + v150.f32[0];
    v61 = v60 + (float)(v58 + v150.f32[1]);
    if (v48 < v61
      || v46 < v60 && v48 <= v61
      || v128 != -1 && (*(int (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2) >= v128)
    {
      goto LABEL_208;
    }
    v62 = v166;
    v63 = v167;
    v64 = (v167 - v166) >> 2;
    for (i = v149; v64 <= SLODWORD(v149) + 1; v63 = v66)
    {
      if (v63 >= v168)
      {
        v67 = v64 + 1;
        if ((v64 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v68 = v168 - v62;
        if ((v168 - v62) >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v168, v69);
          v62 = v166;
          v63 = v167;
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v64];
        *(_DWORD *)v71 = 0;
        v66 = v71 + 4;
        while (v63 != v62)
        {
          v72 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        v166 = v71;
        v167 = v66;
        v168 = &v70[4 * v69];
        if (v62)
        {
          operator delete(v62);
          v62 = v166;
        }
        else
        {
          v62 = v71;
        }
      }
      else
      {
        *(_DWORD *)v63 = 0;
        v66 = v63 + 4;
      }
      v167 = v66;
      v64 = (v66 - v62) >> 2;
      i = v149;
    }
    if ((v126 & 1) != 0)
    {
      v73 = v158;
      v74 = LODWORD(i) + 1;
      if (v74 >= ((uint64_t)v158 - v157) >> 5)
      {
        do
        {
          __p[0] = v49;
          memset(&__p[1], 0, 24);
          if ((unint64_t)v73 >= v159)
          {
            v73 = (_QWORD *)std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(&v157, (uint64_t)__p);
          }
          else
          {
            *v73 = v49;
            v73[2] = 0;
            v73[3] = 0;
            v73[1] = 0;
            std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v73 + 1, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
            v73 += 4;
          }
          v158 = v73;
          if (__p[1])
          {
            __p[2] = __p[1];
            operator delete(__p[1]);
            v73 = v158;
          }
          v74 = SLODWORD(v149) + 1;
        }
        while (v74 >= ((uint64_t)v73 - v157) >> 5);
        v62 = v166;
      }
    }
    else
    {
      v74 = LODWORD(i) + 1;
    }
    ++*(_DWORD *)&v62[4 * v74];
    v75 = LODWORD(v149);
    if (v149 == NAN)
    {
      if ((v127 & 1) != 0)
      {
        v76 = v160.f32[0] == v150.f32[0] && v160.f32[1] == v150.f32[1];
        v77 = vabds_f32(v160.f32[0] + v160.f32[1], v150.f32[0] + v150.f32[1]);
        if (!v76 && v77 > 0.00097656)
        {
          v83 = 1;
          v127 = 1;
          goto LABEL_209;
        }
      }
      v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
      memset(__p, 0, sizeof(__p));
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
      v146 = v55;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v79, __p);
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      v75 = LODWORD(v149);
    }
    if ((v127 & 1) != 0)
      goto LABEL_115;
    if ((_DWORD)v75 == -1)
    {
      v83 = *(int *)v166 == a4;
      if (*(_DWORD *)v166 != a4 || v126 == 0)
      {
        v127 = 0;
        goto LABEL_209;
      }
      v160 = v150;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v161, (char *)v151, (uint64_t)v152, (v152 - (_BYTE *)v151) >> 2);
      v75 = LODWORD(v149);
LABEL_115:
      v127 = 1;
      if ((_DWORD)v75 == -1)
        goto LABEL_208;
      goto LABEL_119;
    }
    v127 = 0;
LABEL_119:
    v80 = (int)v75 + 1;
    v81 = *(int *)&v166[4 * v80];
    if (v126)
    {
      if (v81 == a4)
      {
        v82 = (float32x2_t *)(v157 + 32 * v80);
        *v82 = v150;
        if (v82 != &v150)
        {
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v82[1], (char *)v151, (uint64_t)v152, (v152 - (_BYTE *)v151) >> 2);
          v75 = LODWORD(v149);
        }
      }
      else if (v81 > a4)
      {
        v85 = (float *)(v157 + 32 * v80);
        v86 = v85[1];
        v87 = v150.f32[0] == *v85 && v150.f32[1] == v86;
        v88 = vabds_f32(v150.f32[0] + v150.f32[1], *v85 + v86);
        if (!v87 && v88 > 0.00097656)
          goto LABEL_208;
      }
    }
    else if (v81 > a4)
    {
      goto LABEL_208;
    }
    v144 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v75, &v140);
    while (1)
    {
      if (!v140)
      {
        if (v144 >= (unint64_t)v142)
          goto LABEL_176;
        goto LABEL_145;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v140 + 24))(v140))
        break;
      if (v140)
      {
        v90 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v140 + 32))();
        goto LABEL_146;
      }
LABEL_145:
      v90 = (char *)v141 + 48 * v144;
LABEL_146:
      v91 = *(void **)v90;
      v135 = (void *)*((_QWORD *)v90 + 1);
      v137 = 0;
      v138 = 0;
      v136 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v136, *((const void **)v90 + 2), *((_QWORD *)v90 + 3), (uint64_t)(*((_QWORD *)v90 + 3) - *((_QWORD *)v90 + 2)) >> 2);
      v92 = *((_DWORD *)v90 + 10);
      __p[0] = v91;
      __p[1] = v135;
      memset(&__p[2], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], v136, (uint64_t)v137, ((_BYTE *)v137 - (_BYTE *)v136) >> 2);
      v146 = v92;
      if (v136)
      {
        v137 = v136;
        operator delete(v136);
      }
      v93 = v150;
      v94 = __p[1];
      v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
      LODWORD(v135) = v146;
      v136 = (void *)vadd_f32(v93, (float32x2_t)v94);
      v138 = 0;
      v139 = 0;
      v137 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v137, 0, 0, 0);
      v96 = v173;
      if (v173 >= v174)
      {
        v97 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v172, (uint64_t)&v135);
      }
      else
      {
        std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v172, (uint64_t)&v135);
        v97 = v96 + 40;
      }
      v173 = v97;
      if (v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      v146 = v55;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v95, __p);
      v98 = v170;
      if (v170 >= (int *)v171)
      {
        v100 = v169;
        v101 = v170 - v169;
        v102 = v101 + 1;
        if ((unint64_t)(v101 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v103 = v171 - (char *)v169;
        if ((v171 - (char *)v169) >> 1 > v102)
          v102 = v103 >> 1;
        if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFFCLL)
          v104 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v104 = v102;
        if (v104)
        {
          v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v171, v104);
          v100 = v169;
          v98 = v170;
        }
        else
        {
          v105 = 0;
        }
        v106 = (int *)&v105[4 * v101];
        *v106 = v95;
        v99 = (uint64_t)(v106 + 1);
        while (v98 != v100)
        {
          v107 = *--v98;
          *--v106 = v107;
        }
        v169 = v106;
        v170 = (int *)v99;
        v171 = &v105[4 * v104];
        if (v100)
          operator delete(v100);
      }
      else
      {
        *v170 = v95;
        v99 = (uint64_t)(v98 + 1);
      }
      v170 = (int *)v99;
      v132[0] = &v172;
      v132[1] = a3;
      v133 = -1;
      v134 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((_BOOL8)v169, v99, v132, (v99 - (uint64_t)v169) >> 2);
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      if (v140)
        (*(void (**)(void *))(*(_QWORD *)v140 + 40))(v140);
      else
        ++v144;
    }
    if (v140)
    {
      (*(void (**)(void))(*(_QWORD *)v140 + 8))();
      goto LABEL_178;
    }
LABEL_176:
    if (v143)
      --*v143;
LABEL_178:
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(__p, a1, LODWORD(v149));
    v140 = __p[0];
    v142 = 0;
    v143 = 0;
    v141 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v141, __p[1], (uint64_t)__p[2], ((char *)__p[2] - (char *)__p[1]) >> 2);
    if (__p[1])
    {
      __p[2] = __p[1];
      operator delete(__p[1]);
    }
    LODWORD(v135) = HIDWORD(v140);
    LODWORD(__p[0]) = (_DWORD)v140;
    v176 = 2139095040;
    v175 = INFINITY;
    v108.n128_u32[0] = v140;
    if (*(float *)&v140 != INFINITY || (v108.n128_u32[0] = v135, *(float *)&v135 != v175))
    {
      v109 = v150;
      v125 = (float32x2_t)v140;
      v110 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)a2 + 200))(a2, v108);
      LODWORD(__p[0]) = -1;
      __p[1] = (void *)vadd_f32(v109, v125);
      memset(&__p[2], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], 0, 0, 0);
      v111 = v173;
      if (v173 >= v174)
      {
        v112 = std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(&v172, (uint64_t)__p);
      }
      else
      {
        std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>((uint64_t)&v172, (uint64_t)__p);
        v112 = v111 + 40;
      }
      v173 = v112;
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      __p[0] = 0;
      __p[1] = v140;
      memset(&__p[2], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[2], v141, (uint64_t)v142, (v142 - (_BYTE *)v141) >> 2);
      v146 = v55;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 208))(a2, v110, __p);
      if (__p[2])
      {
        __p[3] = __p[2];
        operator delete(__p[2]);
      }
      v113 = v170;
      if (v170 >= (int *)v171)
      {
        v115 = v169;
        v116 = v170 - v169;
        v117 = v116 + 1;
        if ((unint64_t)(v116 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v118 = v171 - (char *)v169;
        if ((v171 - (char *)v169) >> 1 > v117)
          v117 = v118 >> 1;
        if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL)
          v119 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v119 = v117;
        if (v119)
        {
          v120 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v171, v119);
          v115 = v169;
          v113 = v170;
        }
        else
        {
          v120 = 0;
        }
        v121 = (int *)&v120[4 * v116];
        *v121 = v110;
        v114 = (uint64_t)(v121 + 1);
        while (v113 != v115)
        {
          v122 = *--v113;
          *--v121 = v122;
        }
        v169 = v121;
        v170 = (int *)v114;
        v171 = &v120[4 * v119];
        if (v115)
          operator delete(v115);
      }
      else
      {
        *v170 = v110;
        v114 = (uint64_t)(v113 + 1);
      }
      v170 = (int *)v114;
      v129[0] = &v172;
      v129[1] = a3;
      v130 = -1;
      v131 = a8;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>((_BOOL8)v169, v114, v129, (v114 - (uint64_t)v169) >> 2);
    }
    if (v141)
    {
      v142 = v141;
      operator delete(v141);
    }
LABEL_208:
    v83 = 0;
LABEL_209:
    if (v147[1])
    {
      *(void **)&v148 = v147[1];
      operator delete(v147[1]);
    }
    if (v151)
    {
      v152 = v151;
      operator delete(v151);
    }
  }
  while (!v83);
  fst::Connect<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 4, 0))
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, 4, 4);
  v123 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v124 = fst::ShortestPathProperties(v123, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)a2 + 192))(a2, v124, 0x3FFFFFFF0007);
  __p[0] = &v157;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v161)
  {
    v162 = v161;
    operator delete(v161);
  }
LABEL_13:
  if (v166)
  {
    v167 = v166;
    operator delete(v166);
  }
  if (v169)
  {
    v170 = v169;
    operator delete(v169);
  }
  __p[0] = &v172;
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADC86940(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,char *a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  uint64_t v63;
  void *v65;
  void *v66;

  if (__p)
    operator delete(__p);
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a51)
  {
    a52 = (uint64_t)a51;
    operator delete(a51);
  }
  a39 = &a58;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  if (a62)
  {
    a63 = (uint64_t)a62;
    operator delete(a62);
  }
  v65 = *(void **)(v63 - 224);
  if (v65)
  {
    *(_QWORD *)(v63 - 216) = v65;
    operator delete(v65);
  }
  v66 = *(void **)(v63 - 200);
  if (v66)
  {
    *(_QWORD *)(v63 - 192) = v66;
    operator delete(v66);
  }
  a39 = (char *)(v63 - 176);
  std::vector<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a39);
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D27478;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D24F40;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

_QWORD *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = *(_QWORD *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1ADC86C60(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[32 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v15 += 32;
  std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC86D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  v15 = 0;
  if (a3 == a5)
  {
    v12 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_QWORD *)(v9 - 32);
      v9 -= 32;
      *(_QWORD *)(v7 - 24) = 0;
      v11 = (_QWORD *)(v7 - 24);
      *(v11 - 1) = v10;
      v11[1] = 0;
      v11[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      v7 = *((_QWORD *)&v17 + 1) - 32;
      *((_QWORD *)&v17 + 1) -= 32;
    }
    while (v9 != a5);
    v12 = v17;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return v12;
}

void sub_1ADC86E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::ShortestDistanceState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::ShortestDistance(uint64_t *a1, int a2)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  int32x2_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  void **v30;
  _QWORD *v31;
  int32x2_t v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, _QWORD, int32x2_t *);
  char v45;
  __n128 v46;
  __n128 v47;
  int32x2_t v48;
  float32x2_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  unint64_t i;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  float32x2_t v76;
  __int32 v77;
  float v78;
  float32x2_t v79;
  float32x2_t v80;
  float v81;
  _QWORD *v82;
  BOOL v83;
  float v85;
  BOOL v86;
  int v87;
  int v88;
  float v89;
  float v90;
  float v91;
  _QWORD *v92;
  BOOL v93;
  float *v94;
  float v95;
  float v96;
  float v97;
  int32x2_t *v98;
  uint64_t v99;
  unint64_t v100;
  _BYTE *v101;
  float32x2_t v102;
  unint64_t v103;
  void *v104;
  _BYTE *v105;
  uint64_t v106;
  int32x2_t v107;
  void *v108;
  void *v109;
  uint64_t v110;
  int32x2_t v111;
  void *__p;
  void *v113;
  _DWORD *v114;
  unint64_t v115;
  float32x2_t v116;
  void *v117;
  void *v118;
  uint64_t v119;
  float v120;

  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1) == -1)
  {
    if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
      return;
    v101 = (char *)a1 + 116;
    goto LABEL_178;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 56))(*(_QWORD *)(a1[2] + 16));
  if (!*((_BYTE *)a1 + 33))
  {
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100]((uint64_t *)a1[1]);
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a1 + 5);
    a1[9] = 0;
  }
  if (a2 == -1)
    a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 24))(*a1);
  v4 = a2;
  v5 = (uint64_t *)a1[1];
  v6 = v5 + 1;
  v7 = *v5;
  if (a2 >= (unint64_t)((v5[1] - *v5) >> 5))
  {
    v8 = vdup_n_s32(0x7F800000u);
    do
    {
      v111 = v8;
      v113 = 0;
      v114 = 0;
      __p = 0;
      v9 = v5[1];
      if (v9 >= v5[2])
      {
        v10 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v5, (uint64_t)&v111);
        v10 = v9 + 32;
      }
      *v6 = v10;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111 = v8;
      v113 = 0;
      v114 = 0;
      __p = 0;
      v11 = a1[6];
      if (v11 >= a1[7])
      {
        v12 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        v12 = v11 + 32;
      }
      a1[6] = v12;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
      v5 = (uint64_t *)a1[1];
      v6 = v5 + 1;
      v7 = *v5;
    }
    while (a2 >= (unint64_t)((v5[1] - *v5) >> 5));
  }
  if (*((_BYTE *)a1 + 33))
  {
    v13 = (char *)a1[11];
    v14 = (char *)a1[12];
    v15 = (v14 - v13) >> 2;
    if (v15 <= a2)
    {
      v16 = a1 + 13;
      do
      {
        if ((unint64_t)v14 >= *v16)
        {
          v18 = v15 + 1;
          if ((v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = *v16 - (_QWORD)v13;
          if (v19 >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a1 + 13), v20);
            v13 = (char *)a1[11];
            v14 = (char *)a1[12];
          }
          else
          {
            v21 = 0;
          }
          v22 = &v21[4 * v15];
          *(_DWORD *)v22 = -1;
          v17 = v22 + 4;
          while (v14 != v13)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *((_DWORD *)v22 - 1) = v23;
            v22 -= 4;
          }
          a1[11] = (uint64_t)v22;
          a1[12] = (uint64_t)v17;
          a1[13] = (uint64_t)&v21[4 * v20];
          if (v13)
          {
            operator delete(v13);
            v13 = (char *)a1[11];
          }
          else
          {
            v13 = v22;
          }
        }
        else
        {
          *(_DWORD *)v14 = -1;
          v17 = v14 + 4;
        }
        a1[12] = (uint64_t)v17;
        v15 = (v17 - v13) >> 2;
        v14 = v17;
      }
      while (v15 <= a2);
      v7 = *(_QWORD *)a1[1];
    }
    *(_DWORD *)&v13[4 * a2] = *((_DWORD *)a1 + 28);
  }
  v24 = v7 + 32 * a2;
  *(_QWORD *)v24 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v24 + 8), 0, 0, 0);
  v25 = a1 + 5;
  v26 = a1[5] + 32 * v4;
  *(_QWORD *)v26 = 0;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v26 + 8), 0, 0, 0);
  v27 = a1 + 8;
  v28 = *(uint64_t **)(a1[2] + 16);
  v29 = *v28;
  *(_QWORD *)(a1[8] + ((v4 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v4;
  (*(void (**)(uint64_t *, unint64_t))(v29 + 24))(v28, v4);
  v30 = (void **)(a1 + 11);
  v31 = a1 + 13;
  v101 = (char *)a1 + 116;
  v32 = vdup_n_s32(0x7F800000u);
  do
  {
    if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 48))(*(_QWORD *)(a1[2] + 16)) & 1) != 0)
      goto LABEL_174;
    v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 16))(*(_QWORD *)(a1[2] + 16));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1[2] + 16) + 32))(*(_QWORD *)(a1[2] + 16));
    while (1)
    {
      v34 = (uint64_t *)a1[1];
      v35 = v34 + 1;
      if (v33 < (unint64_t)((v34[1] - *v34) >> 5))
        break;
      v111 = v32;
      v113 = 0;
      v114 = 0;
      __p = 0;
      v36 = v34[1];
      if (v36 >= v34[2])
      {
        v37 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v34, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v34, (uint64_t)&v111);
        v37 = v36 + 32;
      }
      *v35 = v37;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111 = v32;
      v113 = 0;
      v114 = 0;
      __p = 0;
      v38 = a1[6];
      if (v38 >= a1[7])
      {
        v39 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v111);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v111);
        v39 = v38 + 32;
      }
      a1[6] = v39;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      v111.i8[0] = 0;
      std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v111);
    }
    if (*((_BYTE *)a1 + 32))
    {
      (*(void (**)(int32x2_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*a1 + 32))(&v111, *a1, v33);
      v107.i32[0] = v111.i32[1];
      v116.i32[0] = v111.i32[0];
      LODWORD(v103) = 2139095040;
      v120 = INFINITY;
      v40 = *(float *)v111.i32 != INFINITY || *(float *)v107.i32 != v120;
      if (__p)
      {
        v113 = __p;
        operator delete(__p);
      }
      if (v40)
      {
LABEL_174:
        ++*((_DWORD *)a1 + 28);
        if (!(*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a1 + 64))(*a1, 4, 0))
          return;
LABEL_178:
        *v101 = 1;
        return;
      }
    }
    *(_QWORD *)(*v27 + (((unint64_t)v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v33);
    v41 = *v25 + 32 * v33;
    v116 = *(float32x2_t *)v41;
    v118 = 0;
    v119 = 0;
    v117 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v117, *(const void **)(v41 + 8), *(_QWORD *)(v41 + 16), (uint64_t)(*(_QWORD *)(v41 + 16) - *(_QWORD *)(v41 + 8)) >> 2);
    v42 = *v25 + 32 * v33;
    *(int32x2_t *)v42 = v32;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v42 + 8), 0, 0, 0);
    v43 = *a1;
    v44 = *(void (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)*a1 + 136);
    v115 = 0;
    v44(v43, v33, &v111);
    while (1)
    {
      if (!*(_QWORD *)&v111)
      {
        if (v115 >= (unint64_t)v113)
        {
          v87 = 10;
          goto LABEL_166;
        }
LABEL_70:
        v49 = (float32x2_t *)((char *)__p + 48 * v115);
        goto LABEL_71;
      }
      v45 = (*(uint64_t (**)(int32x2_t))(**(_QWORD **)&v111 + 24))(v111);
      v48 = v111;
      if ((v45 & 1) != 0)
        break;
      if (!*(_QWORD *)&v111)
        goto LABEL_70;
      v49 = (float32x2_t *)(*(uint64_t (**)(void))(**(_QWORD **)&v111 + 32))();
LABEL_71:
      v50 = (uint64_t *)a1[1];
      v51 = v50 + 1;
      for (i = v49[5].i32[0]; i >= (v50[1] - *v50) >> 5; i = v49[5].i32[0])
      {
        v107 = v32;
        v109 = 0;
        v110 = 0;
        v108 = 0;
        v53 = v50[1];
        if (v53 >= v50[2])
        {
          v54 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v50, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v50, (uint64_t)&v107);
          v54 = v53 + 32;
        }
        *v51 = v54;
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        v107 = v32;
        v109 = 0;
        v110 = 0;
        v108 = 0;
        v55 = a1[6];
        if (v55 >= a1[7])
        {
          v56 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a1 + 5, (uint64_t)&v107);
        }
        else
        {
          std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)(a1 + 5), (uint64_t)&v107);
          v56 = v55 + 32;
        }
        a1[6] = v56;
        if (v108)
        {
          v109 = v108;
          operator delete(v108);
        }
        v107.i8[0] = 0;
        std::vector<BOOL>::push_back((uint64_t)(a1 + 8), &v107);
        v50 = (uint64_t *)a1[1];
        v51 = v50 + 1;
      }
      if (*((_BYTE *)a1 + 33))
      {
        v57 = (char *)a1[11];
        v58 = (char *)a1[12];
        v59 = (v58 - v57) >> 2;
        if (v59 <= (int)i)
        {
          do
          {
            if ((unint64_t)v58 >= *v31)
            {
              v62 = v59 + 1;
              if ((v59 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v63 = *v31 - (_QWORD)v57;
              if (v63 >> 1 > v62)
                v62 = v63 >> 1;
              if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
                v64 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v64 = v62;
              if (v64)
              {
                v65 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v31, v64);
                v57 = (char *)a1[11];
                v58 = (char *)a1[12];
              }
              else
              {
                v65 = 0;
              }
              v66 = &v65[4 * v59];
              *(_DWORD *)v66 = -1;
              v61 = v66 + 4;
              while (v58 != v57)
              {
                v67 = *((_DWORD *)v58 - 1);
                v58 -= 4;
                *((_DWORD *)v66 - 1) = v67;
                v66 -= 4;
              }
              a1[11] = (uint64_t)v66;
              a1[12] = (uint64_t)v61;
              a1[13] = (uint64_t)&v65[4 * v64];
              if (v57)
              {
                operator delete(v57);
                v57 = (char *)*v30;
              }
              else
              {
                v57 = v66;
              }
            }
            else
            {
              *(_DWORD *)v58 = -1;
              v61 = v58 + 4;
            }
            a1[12] = (uint64_t)v61;
            v59 = (v61 - v57) >> 2;
            LODWORD(i) = v49[5].i32[0];
            v58 = v61;
          }
          while (v59 <= (int)i);
          v60 = (int)i;
          v50 = (uint64_t *)a1[1];
        }
        else
        {
          v60 = (int)i;
        }
        if (*(_DWORD *)&v57[4 * v60] != *((_DWORD *)a1 + 28))
        {
          v68 = *v50 + 32 * v60;
          *(int32x2_t *)v68 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v68 + 8), 0, 0, 0);
          v69 = *v25 + 32 * v49[5].i32[0];
          *(int32x2_t *)v69 = v32;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v69 + 8), 0, 0, 0);
          v50 = (uint64_t *)a1[1];
          v70 = a1[11];
          LODWORD(i) = *((_DWORD *)a1 + 28);
          v71 = v49[5].i32[0];
          *(_QWORD *)(a1[8] + ((v71 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v71);
          *(_DWORD *)(v70 + 4 * v71) = i;
          LODWORD(i) = v49[5].i32[0];
        }
      }
      v72 = (int)i;
      v73 = *v50;
      v74 = *v50 + 32 * (int)i;
      v75 = *v25;
      v76 = vadd_f32(v116, v49[1]);
      v107 = (int32x2_t)v76;
      v109 = 0;
      v110 = 0;
      v108 = 0;
      v78 = *(float *)v74;
      v77 = *(_DWORD *)(v74 + 4);
      v79 = (float32x2_t)vdup_lane_s32((int32x2_t)v76, 0);
      v79.i32[0] = *(_DWORD *)v74;
      v102 = v76;
      v76.i32[0] = v77;
      v80 = vadd_f32(v79, v76);
      v81 = v80.f32[1];
      if (v80.f32[0] >= v80.f32[1])
      {
        if (v80.f32[0] > v80.f32[1]
          || (v78 >= v102.f32[0] ? (v83 = v78 <= v102.f32[0]) : (v83 = 1), v82 = (_QWORD *)v74, !v83))
        {
          v77 = v102.i32[1];
          v78 = v102.f32[0];
          v82 = &v107;
        }
      }
      else
      {
        v82 = (_QWORD *)v74;
      }
      v103 = __PAIR64__(v77, LODWORD(v78));
      v105 = 0;
      v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v82[1], v82[2], (uint64_t)(v82[2] - v82[1]) >> 2);
      v46.n128_u32[0] = *(_DWORD *)v74;
      v47.n128_u32[0] = *(_DWORD *)(v74 + 4);
      if (*(float *)v74 == *(float *)&v103 && v47.n128_f32[0] == *((float *)&v103 + 1))
      {
        v86 = 1;
      }
      else
      {
        v85 = v46.n128_f32[0] + v47.n128_f32[0];
        v47.n128_f32[0] = *(float *)&v103 + *((float *)&v103 + 1);
        v46.n128_f32[0] = vabds_f32(v85, *(float *)&v103 + *((float *)&v103 + 1));
        v86 = v46.n128_f32[0] <= *((float *)a1 + 7);
      }
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      if (v86)
      {
        v87 = 0;
        v88 = 1;
        v30 = (void **)(a1 + 11);
        v31 = a1 + 13;
        goto LABEL_152;
      }
      v90 = *(float *)v74;
      v89 = *(float *)(v74 + 4);
      v91 = *(float *)v74 + v89;
      if (v91 >= v81)
      {
        if (v91 > v81 || (v90 >= v102.f32[0] ? (v93 = v90 <= v102.f32[0]) : (v93 = 1), v92 = (_QWORD *)v74, !v93))
        {
          v89 = v102.f32[1];
          v90 = v102.f32[0];
          v92 = &v107;
        }
      }
      else
      {
        v92 = (_QWORD *)v74;
      }
      v103 = __PAIR64__(LODWORD(v89), LODWORD(v90));
      v105 = 0;
      v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, (const void *)v92[1], v92[2], (uint64_t)(v92[2] - v92[1]) >> 2);
      *(_QWORD *)v74 = v103;
      if ((unint64_t *)v74 != &v103)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v73 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (_BYTE *)v104) >> 2);
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      v94 = (float *)(v75 + 32 * v72);
      v96 = *v94;
      v95 = v94[1];
      v97 = *v94 + v95;
      if (v97 >= v81)
      {
        if (v97 > v81)
          goto LABEL_142;
        if (v96 >= v102.f32[0])
        {
          v98 = (int32x2_t *)(v75 + 32 * v72);
          if (v96 <= v102.f32[0])
            goto LABEL_143;
LABEL_142:
          v95 = v102.f32[1];
          v96 = v102.f32[0];
          v98 = &v107;
          goto LABEL_143;
        }
      }
      v98 = (int32x2_t *)(v75 + 32 * v72);
LABEL_143:
      v103 = __PAIR64__(LODWORD(v95), LODWORD(v96));
      v105 = 0;
      v106 = 0;
      v104 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v104, *(const void **)&v98[1], *(_QWORD *)&v98[2], (uint64_t)(*(_QWORD *)&v98[2] - *(_QWORD *)&v98[1]) >> 2);
      *(_QWORD *)v94 = v103;
      if (v94 != (float *)&v103)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v75 + 32 * v72 + 8), (char *)v104, (uint64_t)v105, (v105 - (_BYTE *)v104) >> 2);
      if (v104)
      {
        v105 = v104;
        operator delete(v104);
      }
      v31 = a1 + 13;
      if (fst::LatticeWeightTpl<float>::Member((float *)v74) && fst::LatticeWeightTpl<float>::Member(v94))
      {
        v99 = **(_QWORD **)(a1[2] + 16);
        if (((*(_QWORD *)(a1[8] + (((unint64_t)v49[5].i32[0] >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v49[5].i32[0]) & 1) != 0)
        {
          (*(void (**)(void))(v99 + 40))();
          v30 = (void **)(a1 + 11);
          v87 = 0;
          v88 = 1;
        }
        else
        {
          (*(void (**)(void))(v99 + 24))();
          v30 = (void **)(a1 + 11);
          v87 = 0;
          v100 = v49[5].i32[0];
          v88 = 1;
          *(_QWORD *)(*v27 + ((v100 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v100;
        }
      }
      else
      {
        v88 = 0;
        v87 = 1;
        *v101 = 1;
        v30 = (void **)(a1 + 11);
      }
LABEL_152:
      if (v108)
        operator delete(v108);
      v48 = v111;
      if (!v88)
        goto LABEL_163;
      if (v111)
        (*(void (**)(__n128, __n128))(**(_QWORD **)&v111 + 40))(v46, v47);
      else
        ++v115;
    }
    v87 = 10;
LABEL_163:
    if (v48)
    {
      (*(void (**)(int32x2_t, __n128, __n128))(**(_QWORD **)&v48 + 8))(v48, v46, v47);
      goto LABEL_168;
    }
LABEL_166:
    if (v114)
      --*v114;
LABEL_168:
    if (v87 == 10)
      v87 = 0;
    if (v117)
    {
      v118 = v117;
      operator delete(v117);
    }
  }
  while (!v87);
}

void sub_1ADC87AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 136);
  if (v31)
  {
    *(_QWORD *)(v29 - 128) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = a1[1];
  v5 = (v4 - *a1) >> 5;
  if (a2 <= v5)
  {
    if (a2 < v5)
    {
      v6 = *a1 + 32 * a2;
      while (v4 != v6)
      {
        v7 = *(void **)(v4 - 24);
        if (v7)
        {
          *(_QWORD *)(v4 - 16) = v7;
          operator delete(v7);
        }
        v4 -= 32;
      }
      a1[1] = v6;
    }
  }
  else
  {
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__append(a1, a2 - v5, a3);
  }
}

_QWORD *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  _QWORD *v23;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = *(result - 1);
  if (a2 <= (v8 - v9) >> 5)
  {
    if (a2)
    {
      v16 = (_QWORD *)(v9 + 8);
      v17 = 32 * a2;
      v18 = v9 + 32 * a2;
      do
      {
        *(v16 - 1) = *(_QWORD *)a3;
        v16[1] = 0;
        v16[2] = 0;
        *v16 = 0;
        result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v16, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
        v16 += 4;
        v17 -= 32;
      }
      while (v17);
    }
    else
    {
      v18 = *(result - 1);
    }
    a1[1] = v18;
  }
  else
  {
    v10 = v9 - *a1;
    v11 = a2 + (v10 >> 5);
    if (v11 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 5;
    v13 = v7 - *a1;
    if (v13 >> 4 > v11)
      v11 = v13 >> 4;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    v23 = result;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)result, v14);
    else
      v15 = 0;
    v19 = v15;
    v20 = &v15[32 * v12];
    v21 = v20;
    v22 = &v15[32 * v14];
    std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end(&v19, a2, a3);
    std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(a1, &v19);
    return (_QWORD *)std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1ADC87D50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (a2)
  {
    v6 = (_QWORD *)(v4 + 8);
    v7 = 32 * a2;
    v4 += 32 * a2;
    do
    {
      *(v6 - 1) = *(_QWORD *)a3;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
      v6 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1ADC87DEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst(_QWORD *a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(v2);
  *a1 = &unk_1E5D281F0;
  a1[1] = v2;
  return a1;
}

void sub_1ADC87E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D24F40;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 88);
}

_QWORD *fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2);
  *a3 = *(_QWORD *)v3;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v3 + 8), *(_QWORD *)(v3 + 16), (uint64_t)(*(_QWORD *)(v3 + 16) - *(_QWORD *)(v3 + 8)) >> 2);
}

unint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumArcs(uint64_t a1, int a2)
{
  return 0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 56)
                  - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48)) >> 4);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 32);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D281F0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = (*(_QWORD *)(v2 + 72) - *(_QWORD *)(v2 + 64)) >> 3;
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;

  v3 = *(_QWORD *)(result + 8);
  *a3 = 0;
  v5 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(v3 + 64) + 8 * a2) + 48);
  v4 = *v5;
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5[1] - *v5) >> 4);
  if (v5[1] == *v5)
    v4 = 0;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = 0;
  return result;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::IsMemoryMapped()
{
  return 0;
}

uint64_t fst::ImplToExpandedFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumStates(uint64_t a1)
{
  return (*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 64)) >> 3;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a1 != a2)
  {
    v4 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(v4, a2);
    v5 = *(_DWORD **)(a1 + 8);
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
    *(_QWORD *)(a1 + 8) = v4;
  }
  return a1;
}

void sub_1ADC8817C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

unint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetStart(uint64_t a1, int a2)
{
  uint64_t v4;
  unint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(v4 + 88) = a2;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  *(_QWORD *)(v4 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v4 + 8) & 4;
  return result;
}

void fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  v7 = *a3;
  v9 = 0;
  v10 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(v6, a2, (uint64_t)&v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
}

void sub_1ADC88288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = a3 & 4;
  result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), v6);
  if (result != (v6 & a2))
    result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~a3 | 4) | a3 & a2;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddState(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  v3 = fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState(v2);
  v2[1] = v2[1] & 4 | (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2) & 0x2AFFFFFF0007;
  return v3;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(uint64_t a1, int a2, float *a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  return fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::AddArc(*(_QWORD **)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1, char **a2)
{
  _QWORD *v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::DeleteStates((uint64_t)v4, a2);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0x6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteStates(uint64_t a1)
{
  _QWORD *v2;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v2 = *(_QWORD **)(a1 + 8);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::DeleteStates((uint64_t)v2);
  result = (*(uint64_t (**)(_QWORD *))(*v2 + 24))(v2);
  v2[1] = (*((_DWORD *)v2 + 2) | result) & 4 | 0x156A5A950003;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteArcs(uint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v6 = *(_QWORD **)(a1 + 8);
  fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(*(_QWORD **)(v6[8] + 8 * a2), a3);
  result = (*(uint64_t (**)(_QWORD *))(*v6 + 24))(v6);
  v6[1] = v6[1] & 4 | result & 0xA6A5A950007;
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::DeleteArcs(uint64_t a1, int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD **)(a1 + 8);
  v5 = *(_QWORD **)(v4[8] + 8 * a2);
  v5[4] = 0;
  v5[5] = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](v5 + 6);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 24))(v4);
  v4[1] = v4[1] & 4 | result & 0xA6A5A950007;
  return result;
}

void fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::ReserveStates(uint64_t a1, int a2)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(*(_QWORD *)(a1 + 8) + 64), a2);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::ReserveArcs(uint64_t a1, int a2, unint64_t a3)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  return std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 8 * a2) + 48), a3);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutableInputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutableOutputSymbols(uint64_t a1)
{
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetInputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 40);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 40) = result;
  }
  return result;
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetOutputSymbols(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v4 = *(_QWORD *)(a1 + 8);
  result = *(_QWORD *)(v4 + 48);
  if (result != a2)
  {
    if (result)
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    if (a2)
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    else
      result = 0;
    *(_QWORD *)(v4 + 48) = result;
  }
  return result;
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::InitMutableArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D21110;
  v6[3] = 0;
  result = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(a1);
  v8 = *(_QWORD *)(a1 + 8);
  v6[1] = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * a2);
  v6[2] = v8 + 8;
  *a3 = v6;
  return result;
}

void sub_1ADC88764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C402DF695F1);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D226A0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CDD0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "vector");
  std::string::operator=(v2, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950003;
  return a1;
}

void sub_1ADC88848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  unint64_t v3;

  *a1 = &unk_1E5D1FBD0;
  v2 = (_QWORD *)a1[9];
  if (v2 != (_QWORD *)a1[8])
  {
    v3 = 0;
    v2 = (_QWORD *)a1[8];
    do
    {
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(v2[v3++]);
      v2 = (_QWORD *)a1[8];
    }
    while (v3 < (uint64_t)(a1[9] - (_QWORD)v2) >> 3);
  }
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl((uint64_t)a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::HasSequentialStates()
{
  return 1;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Properties(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 8) & a2;
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(_QWORD *a1)
{
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(uint64_t a1)
{
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = &unk_1E5D226A0;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Write(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write stream method for ", 39);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

{
  fst *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;

  std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"Fst::Write: No write filename method for ", 41);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = *(char *)(v5 + 23);
  if (v6 >= 0)
    v7 = v5;
  else
    v7 = *(_QWORD *)v5;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v5 + 23);
  else
    v8 = *(_QWORD *)(v5 + 8);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, v7, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" Fst type", 9);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
  if (v12 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1ADC88AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1ADC88B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ImplToFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::operator=(uint64_t a1)
{
  fst *v2;
  _QWORD *v3;
  void *__p[2];
  char v6;
  char v7;

  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
  v2 = fst::LogMessage::LogMessage((fst *)&v7, (uint64_t)__p);
  v3 = (_QWORD *)fst::cerr(v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ImplToFst: Assignment operator disallowed", 41);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v7);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) |= 4uLL;
  return a1;
}

void sub_1ADC88C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v14 - 17));
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>,fst::MutableFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MutateCheck(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;

  if (*(int *)(*(_QWORD *)(result + 8) + 56) >= 2)
  {
    v1 = result;
    v2 = operator new();
    fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(v2, v1);
    result = *(_QWORD *)(v1 + 8);
    if (result)
    {
      v3 = *(_DWORD *)(result + 56) - 1;
      *(_DWORD *)(result + 56) = v3;
      if (!v3)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    *(_QWORD *)(v1 + 8) = v2;
  }
  return result;
}

void sub_1ADC88D34(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40637D23BDLL);
  _Unwind_Resume(a1);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  _DWORD *v16;
  std::string __p;
  _DWORD *v19;
  std::string::size_type v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;

  *(_QWORD *)a1 = &unk_1E5D226A0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)(a1 + 64) = 0;
  v6 = (_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = -1;
  *(_QWORD *)a1 = &unk_1E5D1CDD0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "vector");
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v8 = *v5;
  if (*v5 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *v5 = v9;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 != v10)
  {
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    if (v10)
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 48) = v12;
  }
  *(_DWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 1, 0))
  {
    v13 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 64), v13);
  }
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_47;
LABEL_25:
      v14 = v26;
      goto LABEL_26;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_25;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 24))();
LABEL_26:
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::AddState((_QWORD *)a1);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(&v21, a2, v14);
    fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(a1, v14, &v21);
    if (v22)
    {
      v23 = v22;
      operator delete(v22);
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v14);
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve((uint64_t *)(*(_QWORD *)(*v6 + 8 * (int)v14) + 48), v15);
    v20 = 0;
    (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)a2 + 136))(a2, v14, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v20 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_40;
LABEL_34:
        v16 = (_DWORD *)(__p.__r_.__value_.__l.__size_ + 48 * v20);
        goto LABEL_35;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (!__p.__r_.__value_.__r.__words[0])
        goto LABEL_34;
      v16 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
LABEL_35:
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(*(_QWORD **)(*v6 + 8 * (int)v14), v16);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v20;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v19)
      --*v19;
LABEL_42:
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(void))(*(_QWORD *)v24 + 8))();
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 0) | *(_QWORD *)(a1 + 8) & 4 | 3;
  return a1;
}

void sub_1ADC89108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  _QWORD *v21;

  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorFstBaseImpl(v21);
  _Unwind_Resume(a1);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  void *__p;
  _BYTE *v6;
  uint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * a2);
  v4 = *a3;
  v6 = 0;
  v7 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)v3 = v4;
  if ((uint64_t *)v3 != &v4)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v3 + 8), (char *)__p, (uint64_t)v6, (v6 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v6 = __p;
    operator delete(__p);
  }
}

void sub_1ADC89234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 48 * v6;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADC892EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  v17 = 0;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v9 = a3;
    v10 = a3;
    do
    {
      v11 = *(_QWORD *)(v10 - 48);
      v10 -= 48;
      *(_QWORD *)(v7 - 48) = v11;
      v12 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)(v7 - 32) = 0;
      v13 = v7 - 32;
      *(_QWORD *)(v7 - 40) = v12;
      *(_QWORD *)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v7 - 32), *(const void **)(v10 + 16), *(_QWORD *)(v10 + 24), (uint64_t)(*(_QWORD *)(v10 + 24) - *(_QWORD *)(v10 + 16)) >> 2);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(v9 - 8);
      v7 = *((_QWORD *)&v19 + 1) - 48;
      *((_QWORD *)&v19 + 1) -= 48;
      v9 = v10;
    }
    while (v10 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

void sub_1ADC89444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,std::reverse_iterator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(_QWORD *a1, _DWORD *a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  if (!*a2)
    ++a1[4];
  if (!a2[1])
    ++a1[5];
  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(v3, (uint64_t)a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>((uint64_t)v3, (uint64_t)a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;

  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v4 = *(_QWORD *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v4 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_DWORD *)(v4 + 40) = *(_DWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 8) = v4 + 48;
  return result;
}

void sub_1ADC89560(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[12 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADC89688(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v6;
  unint64_t v7;
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  void *__p[2];
  char v13;
  char v14;

  if (!FLAGS_fst_verify_properties)
    return fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, a3, 1);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v7 = fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, a3, 0);
  if (!fst::CompatProperties(v6, v7))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v8 = fst::LogMessage::LogMessage((fst *)&v14, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"TestProperties: stored Fst properties incorrect", 47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" (stored: props1, computed: props2)", 35);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v14);
    if (v13 < 0)
      operator delete(__p[0]);
  }
  return v7;
}

void sub_1ADC897A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t fst::ComputeProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  std::vector<unsigned int>::size_type v18;
  char v19;
  char *v20;
  int v21;
  int v22;
  unint64_t v23;
  float v24;
  float v25;
  int v26;
  std::vector<unsigned int>::pointer end;
  unsigned int *v28;
  std::vector<unsigned int>::pointer begin;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int *v35;
  unsigned int v36;
  std::vector<unsigned int>::pointer v37;
  unsigned int *v38;
  std::vector<unsigned int>::pointer v39;
  int64_t v40;
  unint64_t v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  unsigned int *v45;
  unsigned int v46;
  unint64_t v47;
  std::vector<unsigned int>::pointer v48;
  unsigned int v49;
  unint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unint64_t v53;
  std::vector<unsigned int>::pointer v54;
  unsigned int v55;
  unint64_t v56;
  unsigned int v57;
  unsigned int v58;
  __n128 v59;
  uint64_t v61;
  uint64_t v62;
  void *__p;
  void *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  std::vector<unsigned int> v70;
  std::vector<unsigned int> v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  unint64_t *v75;
  uint64_t v76;
  int v77;
  unint64_t v78;
  float v79;
  int v80;
  float v81;
  float v82;

  v7 = a1;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
  v9 = v8;
  if (!a4
    || (v10 = v8 & 0x3FFFFFFF0000 | (2 * v8) & 0x2AAAAAAA0000 | (v8 >> 1) & 0x155555550000 | 7, (a2 & ~v10) != 0))
  {
    v9 = v8 & 7;
    v78 = v9;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    if ((a2 & 0xF3C00000000) != 0 && v11)
    {
      v72 = 0;
      v73 = 0;
      v74 = 0;
      v75 = &v78;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(v7, &v72, 0);
      v9 = v78;
    }
    if ((a2 & 0xFFFFF0C3FFFFFFF8) != 0)
    {
      v12 = a2 & 0xC0000;
      v13 = 0x10425A810000;
      if ((a2 & 0xC0000) != 0)
        v13 = 0x10425A850000;
      v14 = v9 | v13;
      v15 = a2 & 0x300000;
      if ((a2 & 0x300000) != 0)
        v14 |= 0x100000uLL;
      v78 = v14;
      memset(&v71, 0, sizeof(v71));
      memset(&v70, 0, sizeof(v70));
      v69 = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 128))(v7, &v67);
      v16 = 0;
      v61 = v7;
LABEL_12:
      if (v67)
      {
        if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v67 + 16))(v67))
        {
          if (v67)
          {
            v17 = (*(uint64_t (**)(void))(*(_QWORD *)v67 + 24))();
LABEL_18:
            v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 40))(v7, v17);
            v74 = 0;
            v75 = 0;
            v76 = 0;
            v71.__end_ = v71.__begin_;
            v70.__end_ = v70.__begin_;
            if (v12)
              std::vector<int>::reserve(&v71, v18);
            if (v15)
              std::vector<int>::reserve(&v70, v18);
            v66 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 136))(v7, v17, &v62);
            v19 = 1;
            while (1)
            {
              if (v62)
              {
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v62 + 24))(v62))
                {
                  if (v62)
                  {
                    (*(void (**)(void))(*(_QWORD *)v62 + 8))();
                  }
                  else
                  {
LABEL_94:
                    if (v65)
                      --*v65;
                  }
                  v7 = v61;
                  if (v12
                    && (std::__sort<std::__less<int,int> &,int *>(),
                        (std::vector<unsigned int>::pointer)((char *)v71.__end_ - (char *)v71.__begin_) >= (std::vector<unsigned int>::pointer)5))
                  {
                    v47 = v71.__end_ - v71.__begin_;
                    if (v47 <= 2)
                      v47 = 2;
                    v48 = v71.__begin_ + 1;
                    v49 = *v71.__begin_;
                    v50 = v47 - 1;
                    while (1)
                    {
                      v52 = *v48++;
                      v51 = v52;
                      if (v52 == v49)
                        break;
                      v49 = v51;
                      if (!--v50)
                        goto LABEL_103;
                    }
                    v78 = v78 & 0xFFFFFFFFFFF3FFFFLL | 0x80000;
                    if (!v15)
                    {
LABEL_114:
                      if (v16 >= 1)
                        v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v61 + 32))(&v62, v61, v17);
                      v81 = *((float *)&v62 + 1);
                      v82 = *(float *)&v62;
                      v80 = 2139095040;
                      v79 = INFINITY;
                      if (*(float *)&v62 == INFINITY && v81 == v79)
                      {
                        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v61 + 40))(v61, v17) != 1)
                          v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
                      }
                      else
                      {
                        v81 = *((float *)&v62 + 1);
                        v82 = *(float *)&v62;
                        v80 = 0;
                        v79 = 0.0;
                        v59.n128_u32[0] = v62;
                        if (*(float *)&v62 != 0.0 || (v59.n128_f32[0] = v81, v81 != v79))
                          v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
                        ++v16;
                      }
                      if (__p)
                      {
                        v64 = __p;
                        operator delete(__p);
                      }
                      if (v74)
                      {
                        v75 = (unint64_t *)v74;
                        operator delete(v74);
                      }
                      if (v67)
                        (*(void (**)(uint64_t, __n128))(*(_QWORD *)v67 + 32))(v67, v59);
                      else
                        ++v69;
                      goto LABEL_12;
                    }
                  }
                  else
                  {
LABEL_103:
                    if (!v15)
                      goto LABEL_114;
                  }
                  std::__sort<std::__less<int,int> &,int *>();
                  if ((std::vector<unsigned int>::pointer)((char *)v70.__end_ - (char *)v70.__begin_) >= (std::vector<unsigned int>::pointer)5)
                  {
                    v53 = v70.__end_ - v70.__begin_;
                    if (v53 <= 2)
                      v53 = 2;
                    v54 = v70.__begin_ + 1;
                    v55 = *v70.__begin_;
                    v56 = v53 - 1;
                    while (1)
                    {
                      v58 = *v54++;
                      v57 = v58;
                      if (v58 == v55)
                        break;
                      v55 = v57;
                      if (!--v56)
                        goto LABEL_114;
                    }
                    v78 = v78 & 0xFFFFFFFFFFCFFFFFLL | 0x200000;
                  }
                  goto LABEL_114;
                }
                if (v62)
                {
                  v20 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v62 + 32))();
                  goto LABEL_29;
                }
              }
              else if (v66 >= (unint64_t)v64)
              {
                goto LABEL_94;
              }
              v20 = (char *)__p + 48 * v66;
LABEL_29:
              v21 = *(_DWORD *)v20;
              v22 = *(_DWORD *)v20;
              if (*(_DWORD *)v20 != *((_DWORD *)v20 + 1))
              {
                v78 = v78 & 0xFFFFFFFFFFFCFFFFLL | 0x20000;
                v22 = *((_DWORD *)v20 + 1);
              }
              if (v21 | v22)
              {
                if (v21)
                {
                  if (v22)
                    goto LABEL_35;
                  goto LABEL_39;
                }
                v23 = v78;
              }
              else
              {
                v23 = v78 & 0xFFFFFFFFFF3FFFFFLL | 0x400000;
              }
              v78 = v23 & 0xFFFFFFFFFCFFFFFFLL | 0x1000000;
              if (v22)
              {
LABEL_35:
                if ((v19 & 1) != 0)
                  goto LABEL_44;
                goto LABEL_40;
              }
LABEL_39:
              v78 = v78 & 0xFFFFFFFFF3FFFFFFLL | 0x4000000;
              if ((v19 & 1) != 0)
                goto LABEL_44;
LABEL_40:
              if (v21 < (int)v72)
                v78 = v78 & 0xFFFFFFFFCFFFFFFFLL | 0x20000000;
              if (v22 < SHIDWORD(v72))
                v78 = v78 & 0xFFFFFFFF3FFFFFFFLL | 0x80000000;
LABEL_44:
              v25 = *((float *)v20 + 2);
              v24 = *((float *)v20 + 3);
              v82 = v25;
              v81 = v24;
              v80 = 0;
              v79 = 0.0;
              if (v25 != 0.0 || v81 != v79)
              {
                v82 = v25;
                v81 = v24;
                v80 = 2139095040;
                v79 = INFINITY;
                if (v25 != INFINITY || v81 != v79)
                  v78 = v78 & 0xFFFFFFFCFFFFFFFFLL | 0x100000000;
              }
              v26 = *((_DWORD *)v20 + 10);
              if (v26 <= (int)v17)
                v78 = v78 & 0xFFFFFF3FFFFFFFFFLL | 0x8000000000;
              if (v26 != (_DWORD)v17 + 1)
                v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
              v72 = *(_QWORD *)v20;
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v73, (uint64_t)(v20 + 8));
              v77 = *((_DWORD *)v20 + 10);
              if (v12)
              {
                end = v71.__end_;
                if (v71.__end_ >= v71.__end_cap_.__value_)
                {
                  begin = v71.__begin_;
                  v30 = v71.__end_ - v71.__begin_;
                  v31 = v30 + 1;
                  if ((unint64_t)(v30 + 1) >> 62)
                    goto LABEL_143;
                  v32 = (char *)v71.__end_cap_.__value_ - (char *)v71.__begin_;
                  if (((char *)v71.__end_cap_.__value_ - (char *)v71.__begin_) >> 1 > v31)
                    v31 = v32 >> 1;
                  if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL)
                    v33 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v33 = v31;
                  if (v33)
                  {
                    v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v71.__end_cap_, v33);
                    begin = v71.__begin_;
                    end = v71.__end_;
                  }
                  else
                  {
                    v34 = 0;
                  }
                  v35 = (unsigned int *)&v34[4 * v30];
                  *v35 = *(_DWORD *)v20;
                  v28 = v35 + 1;
                  while (end != begin)
                  {
                    v36 = *--end;
                    *--v35 = v36;
                  }
                  v71.__begin_ = v35;
                  v71.__end_ = v28;
                  v71.__end_cap_.__value_ = (unsigned int *)&v34[4 * v33];
                  if (begin)
                    operator delete(begin);
                }
                else
                {
                  *v71.__end_ = *(_DWORD *)v20;
                  v28 = end + 1;
                }
                v71.__end_ = v28;
              }
              if (v15)
              {
                v37 = v70.__end_;
                if (v70.__end_ >= v70.__end_cap_.__value_)
                {
                  v39 = v70.__begin_;
                  v40 = v70.__end_ - v70.__begin_;
                  v41 = v40 + 1;
                  if ((unint64_t)(v40 + 1) >> 62)
LABEL_143:
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v42 = (char *)v70.__end_cap_.__value_ - (char *)v70.__begin_;
                  if (((char *)v70.__end_cap_.__value_ - (char *)v70.__begin_) >> 1 > v41)
                    v41 = v42 >> 1;
                  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v41;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v70.__end_cap_, v43);
                    v39 = v70.__begin_;
                    v37 = v70.__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (unsigned int *)&v44[4 * v40];
                  *v45 = *((_DWORD *)v20 + 1);
                  v38 = v45 + 1;
                  while (v37 != v39)
                  {
                    v46 = *--v37;
                    *--v45 = v46;
                  }
                  v70.__begin_ = v45;
                  v70.__end_ = v38;
                  v70.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                  if (v39)
                    operator delete(v39);
                }
                else
                {
                  *v70.__end_ = *((_DWORD *)v20 + 1);
                  v38 = v37 + 1;
                }
                v70.__end_ = v38;
              }
              if (v62)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v62 + 40))(v62);
                v19 = 0;
              }
              else
              {
                v19 = 0;
                ++v66;
              }
            }
          }
LABEL_17:
          v17 = v69;
          goto LABEL_18;
        }
        if (v67)
          (*(void (**)(void))(*(_QWORD *)v67 + 8))();
      }
      else if ((int)v69 < v68)
      {
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7) != -1
        && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
      {
        v78 = v78 & 0xFFFFCFFFFFFFFFFFLL | 0x200000000000;
      }
      if (v70.__begin_)
      {
        v70.__end_ = v70.__begin_;
        operator delete(v70.__begin_);
      }
      if (v71.__begin_)
      {
        v71.__end_ = v71.__begin_;
        operator delete(v71.__begin_);
      }
      v9 = v78;
    }
    v10 = v9 & 0x3FFFFFFF0000 | (2 * v9) & 0x2AAAAAAA0000 | (v9 >> 1) & 0x155555550000 | 7;
  }
  *a3 = v10;
  return v9;
}

void sub_1ADC8A078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  if (a27)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char inited;
  char v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  std::vector<char>::pointer begin;
  unint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  int v31;
  std::vector<char>::pointer end;
  char *v33;
  std::vector<char>::pointer v34;
  int64_t v35;
  int64_t v36;
  unint64_t v37;
  size_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  char v43;
  char v44;
  uint64_t v45;
  int v46;
  std::vector<char>::value_type v47[8];
  std::vector<char>::value_type __x[8];
  int v49;
  int v50;
  void *v51;
  _QWORD v52[6];
  _QWORD *v53;
  _OWORD v54[2];
  __int128 v55;
  std::vector<char> v56;

  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitVisit((uint64_t)a2, a1);
  v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v46 == -1)
  {
    fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
    return;
  }
  memset(&v56, 0, sizeof(v56));
  v55 = 0u;
  memset(v54, 0, sizeof(v54));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MemoryPool(&v51, 64);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v45)
    v6 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v6 = (v46 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v6 <= (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v6 < (std::vector<char>::pointer)(v56.__end_ - v56.__begin_))
      v56.__end_ = &v56.__begin_[(int)v6];
  }
  else
  {
    std::vector<char>::__append(&v56, (int)v6 - (unint64_t)(v56.__end_ - v56.__begin_), __x);
  }
  v50 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v46 >= (int)v6)
    goto LABEL_97;
  v7 = v46;
  v44 = a3;
  do
  {
    v56.__begin_[(int)v7] = 1;
    v8 = (uint64_t)v53;
    if (v53)
    {
      v53 = (_QWORD *)v53[6];
    }
    else
    {
      v8 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
      *(_QWORD *)(v8 + 48) = 0;
    }
    *(_DWORD *)v8 = v7;
    *(_QWORD *)(v8 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v7, v8 + 8);
    *(_QWORD *)v47 = v8;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(v54, v47);
    inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, v7, v7);
LABEL_16:
    v10 = inited;
    while (*((_QWORD *)&v55 + 1))
    {
      v11 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                   + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
      v12 = *(int *)v11;
      v13 = v56.__end_ - v56.__begin_;
      if (v56.__end_ - v56.__begin_ <= v12)
      {
        v6 = v12 + 1;
        v47[0] = 0;
        if (v12 + 1 <= v13)
        {
          if (v12 + 1 < v13)
            v56.__end_ = &v56.__begin_[v6];
        }
        else
        {
          std::vector<char>::__append(&v56, v12 + 1 - v13, v47);
        }
      }
      if ((v10 & 1) == 0)
        goto LABEL_33;
      v14 = v11[1];
      if (v14)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14))
          goto LABEL_33;
        v15 = v11[1];
        if (!v15)
          goto LABEL_29;
        v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 32))(v15);
LABEL_30:
        v17 = *(int *)(v16 + 40);
        begin = v56.__begin_;
        v19 = v56.__end_ - v56.__begin_;
        if (v56.__end_ - v56.__begin_ <= v17)
        {
          v6 = (v17 + 1);
          v47[0] = 0;
          if ((int)v6 <= v19)
          {
            if ((int)v6 < v19)
              v56.__end_ = &v56.__begin_[(int)v6];
          }
          else
          {
            std::vector<char>::__append(&v56, (int)v6 - v19, v47);
            v17 = *(int *)(v16 + 40);
            begin = v56.__begin_;
          }
        }
        v26 = begin[v17];
        if (v26 == 1)
        {
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::BackArc((uint64_t)a2, v12, v16);
          v25 = v11[1];
          if (v25)
            goto LABEL_50;
LABEL_51:
          ++v11[5];
        }
        else
        {
          if (v26 != 2)
          {
            begin[v17] = 1;
            v27 = (uint64_t)v53;
            if (v53)
            {
              v53 = (_QWORD *)v53[6];
            }
            else
            {
              v27 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v52, 1);
              *(_QWORD *)(v27 + 48) = 0;
            }
            *(_DWORD *)v27 = *(_DWORD *)(v16 + 40);
            *(_QWORD *)(v27 + 40) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
            *(_QWORD *)v47 = v27;
            std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(v54, v47);
            inited = fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::InitState(a2, *(_DWORD *)(v16 + 40), v7);
            goto LABEL_16;
          }
          v10 = fst::SccVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::ForwardOrCrossArc((_QWORD **)a2, v12, v16);
          v25 = v11[1];
          if (!v25)
            goto LABEL_51;
LABEL_50:
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        }
      }
      else
      {
        if (v11[5] < v11[3])
        {
LABEL_29:
          v16 = v11[2] + 48 * v11[5];
          goto LABEL_30;
        }
LABEL_33:
        v56.__begin_[v12] = 2;
        v20 = v11[1];
        if (v20)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
        }
        else
        {
          v21 = (_DWORD *)v11[4];
          if (v21)
            --*v21;
        }
        v11[6] = v53;
        v53 = v11;
        --*((_QWORD *)&v55 + 1);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v54, 1);
        if (*((_QWORD *)&v55 + 1))
        {
          v22 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v54[0] + 1)
                                      + (((unint64_t)(*((_QWORD *)&v55 + 1) + v55 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                          + 8 * ((*((_QWORD *)&v55 + 1) + v55 - 1) & 0x1FF));
          v23 = *(_DWORD *)v22;
          v24 = *(_QWORD *)(v22 + 8);
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState((uint64_t)a2, v12, v23);
          v25 = *(_QWORD *)(v22 + 8);
          if (v25)
            goto LABEL_50;
          ++*(_QWORD *)(v22 + 40);
        }
        else
        {
          fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::FinishState((uint64_t)a2, v12, -1);
        }
      }
    }
    if ((a3 & 1) != 0)
      break;
    if ((_DWORD)v7 == v46)
      v7 = 0;
    else
      v7 = (v7 + 1);
    if ((int)v7 < (int)v6)
    {
      v28 = &v56.__begin_[(int)v7];
      v29 = (int)v6 - (uint64_t)(int)v7;
      while (*v28++)
      {
        v7 = (v7 + 1);
        if (!--v29)
        {
          v7 = v6;
          break;
        }
      }
    }
    if (v45 || (_DWORD)v7 != (_DWORD)v6)
      continue;
LABEL_67:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v31 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_73;
      }
    }
    else if (v50 >= v49)
    {
      continue;
    }
    v31 = v50;
LABEL_73:
    if (v31 != (_DWORD)v6)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v50;
      goto LABEL_67;
    }
    end = v56.__end_;
    if (v56.__end_ >= v56.__end_cap_.__value_)
    {
      v34 = v56.__begin_;
      v35 = v56.__end_ - v56.__begin_;
      v36 = v56.__end_ - v56.__begin_ + 1;
      if (v36 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v37 = v56.__end_cap_.__value_ - v56.__begin_;
      if (2 * (v56.__end_cap_.__value_ - v56.__begin_) > (unint64_t)v36)
        v36 = 2 * v37;
      if (v37 >= 0x3FFFFFFFFFFFFFFFLL)
        v38 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
        v39 = (char *)operator new(v38);
      else
        v39 = 0;
      v40 = &v39[v35];
      v41 = &v39[v35];
      *v41 = 0;
      v33 = v41 + 1;
      if (end != v34)
      {
        v42 = &end[~(unint64_t)v34];
        do
        {
          v43 = *--end;
          (v42--)[(_QWORD)v39] = v43;
        }
        while (end != v34);
        end = v56.__begin_;
        v40 = v39;
      }
      v56.__begin_ = v40;
      v56.__end_ = v33;
      v56.__end_cap_.__value_ = &v39[v38];
      if (end)
        operator delete(end);
    }
    else
    {
      *v56.__end_ = 0;
      v33 = end + 1;
    }
    v56.__end_ = v33;
    v6 = (v6 + 1);
    a3 = v44;
  }
  while ((v10 & 1) != 0 && (int)v7 < (int)v6);
LABEL_97:
  fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>::FinishVisit((uint64_t)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v51 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(v52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v51);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v54);
  if (v56.__begin_)
  {
    v56.__end_ = v56.__begin_;
    operator delete(v56.__begin_);
  }
}

void sub_1ADC8A818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~MemoryPool(quasar::Bitmap *a1)
{
  *(_QWORD *)a1 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
}

{
  *(_QWORD *)a1 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((_QWORD *)a1 + 1);
  quasar::Bitmap::~Bitmap(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MemoryPool(_QWORD *a1, uint64_t a2)
{
  *a1 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::MemoryArena(a1 + 1, a2);
  a1[7] = 0;
  return a1;
}

void sub_1ADC8A924(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Size()
{
  return 48;
}

_QWORD *fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::MemoryArena(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;

  *a1 = &unk_1E5D1A790;
  a1[1] = 56 * a2;
  a1[2] = 0;
  a1[3] = a1 + 3;
  a1[4] = a1 + 3;
  a1[5] = 0;
  v3 = operator new[]();
  v4 = operator new(0x18uLL);
  v5 = (_QWORD *)a1[4];
  v6 = a1[5];
  *v4 = a1 + 3;
  v4[1] = v5;
  v4[2] = v3;
  *v5 = v4;
  a1[4] = v4;
  a1[5] = v6 + 1;
  return a1;
}

void sub_1ADC8AA0C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  _QWORD *v2;

  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(_QWORD *a1)
{
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(a1);
  JUMPOUT(0x1AF44D190);
}

{
  _QWORD *v2;
  _QWORD *i;
  uint64_t v4;

  *a1 = &unk_1E5D1A790;
  v2 = a1 + 3;
  for (i = (_QWORD *)a1[4]; i != v2; i = (_QWORD *)i[1])
  {
    v4 = i[2];
    if (v4)
      MEMORY[0x1AF44D160](v4, 0x1000C8077774924);
  }
  std::__list_imp<char *>::clear(v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

uint64_t fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::Size()
{
  return 56;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v4 = a1[2];
  v5 = a1[1];
  if (v4 == v5)
    v6 = 0;
  else
    v6 = ((v4 - v5) << 6) - 1;
  v7 = a1[5];
  v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5];
    v8 = a1[4] + v7;
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADC8AE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::ArcBuffer<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::SetFromFst<fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  _DWORD *v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  _DWORD *v28;

  (*(void (**)(uint64_t, uint64_t, uint64_t **))(*(_QWORD *)a2 + 136))(a2, a3, &v25);
  if (!v25 && (a4 & 1) == 0)
  {
    v10 = v26 + 48 * v27;
    *(_QWORD *)(a1 + 16) = v26;
    *(_QWORD *)(a1 + 24) = v10;
    if (*(_QWORD *)a1)
    {
      free(*(void **)a1);
      *(_QWORD *)a1 = 0;
    }
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3);
  v12 = a5;
  if (!a4)
    v12 = 0;
  v13 = v11 + v12;
  if (*(_QWORD *)(a1 + 8) < (unint64_t)(v11 + v12))
  {
    if (*(_QWORD *)a1)
      free(*(void **)a1);
    v24 = 0x4000;
    if (v13 > 0x4000)
      v24 = v13;
    *(_QWORD *)(a1 + 8) = v24;
    v15 = malloc_type_malloc(48 * v24, 0x108004053AFDD15uLL);
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 16) = v15;
    v14 = v15;
  }
  else
  {
    v14 = *(_QWORD **)(a1 + 16);
    v15 = *(_QWORD **)a1;
  }
  *(_QWORD *)(a1 + 24) = &v14[6 * v13];
  v16 = v25;
  v17 = v26;
  v19 = v27;
  v18 = v28;
  if (v28)
    ++*v28;
  v20 = 0;
LABEL_13:
  v15 += 6;
  while (v16)
  {
    v21 = (*(uint64_t (**)(uint64_t *))(*v16 + 24))(v16);
    v22 = *v16;
    if (v21)
    {
      (*(void (**)(uint64_t *))(v22 + 8))(v16);
      return;
    }
    v23 = (*(uint64_t (**)(uint64_t *))(v22 + 32))(v16);
LABEL_18:
    *(v15 - 6) = *(_QWORD *)v23;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v15 - 5), v23 + 8);
    *((_DWORD *)v15 - 2) = *(_DWORD *)(v23 + 40);
    if (!v16)
    {
      ++v20;
      goto LABEL_13;
    }
    v15 += 6;
    (*(void (**)(uint64_t *))(*v16 + 40))(v16);
  }
  v23 = v17 + 48 * v20;
  if (v20 < v19)
    goto LABEL_18;
  if (v18)
    --*v18;
}

void sub_1ADC8B05C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _DWORD *v2;

  if (v1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  }
  else if (v2)
  {
    --*v2;
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::WriteFst<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  _DWORD *v19;
  int v20;
  fst *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t updated;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BYTE v34[8];
  void *v35[2];
  void *v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int data;
  std::string __p[5];
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v38 = 0u;
  v37 = 0u;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)v35 = 0u;
  v6 = -1;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  v39 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v40 = -1;
  if ((*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 1, 0))
  {
    v6 = 0;
LABEL_3:
    v7 = 0;
    v40 = (int)fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)a1);
    goto LABEL_6;
  }
  v8 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v8[32] & 5) == 0)
  {
    (*(void (**)(std::string *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v8 + 5) + 32))(__p, *((_QWORD *)v8 + 5), 0, 1, 16);
    v6 = v44;
    if (v44 != -1)
      goto LABEL_3;
  }
  v7 = 1;
LABEL_6:
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1 + 64))(a1, 0x3FFFFFFF0004, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  v9 |= 3uLL;
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, 2, __p, v9, (uint64_t)v34);
  v31 = v9;
  v32 = v6;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(_QWORD *)(a1[1] + 72) - *(_QWORD *)(a1[1] + 64);
  v11 = v10 >> 3;
  if ((int)(v10 >> 3) < 1)
  {
    LODWORD(v11) = 0;
  }
  else
  {
    v33 = v7;
    v12 = 0;
    v13 = (v10 >> 3);
    do
    {
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v12);
      data = (int)__p[0].__r_.__value_.__l.__data_;
      std::ostream::write();
      data = HIDWORD(__p[0].__r_.__value_.__r.__words[0]);
      std::ostream::write();
      if (__p[0].__r_.__value_.__l.__size_)
      {
        __p[0].__r_.__value_.__r.__words[2] = __p[0].__r_.__value_.__l.__size_;
        operator delete((void *)__p[0].__r_.__value_.__l.__size_);
      }
      __p[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v12);
      std::ostream::write();
      v14 = *(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * v12);
      v16 = *(_QWORD *)(v14 + 48);
      v15 = *(_QWORD *)(v14 + 56);
      if (v15 == v16)
        v17 = 0;
      else
        v17 = *(_DWORD **)(v14 + 48);
      if (v15 != v16)
      {
        if ((unint64_t)((v15 - v16) / 48) <= 1)
          v18 = 1;
        else
          v18 = (v15 - v16) / 48;
        v19 = v17;
        do
        {
          v20 = *v19;
          v19 += 12;
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v20;
          std::ostream::write();
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[1];
          std::ostream::write();
          fst::LatticeWeightTpl<float>::Write((uint64_t)(v17 + 2), (uint64_t)a2);
          LODWORD(__p[0].__r_.__value_.__l.__data_) = v17[10];
          std::ostream::write();
          v17 = v19;
          --v18;
        }
        while (v18);
      }
      ++v12;
    }
    while (v12 != v13);
    v7 = v33;
  }
  std::ostream::flush();
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v21 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v22 = (_QWORD *)fst::cerr(v21);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"VectorFst::Write: write failed: ", 32);
    v24 = *(char *)(a3 + 23);
    if (v24 >= 0)
      v25 = a3;
    else
      v25 = *(_QWORD *)a3;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a3 + 23);
    else
      v26 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
LABEL_32:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&data);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    updated = 0;
    goto LABEL_35;
  }
  if (!v7)
  {
    if (v40 == v11)
    {
      updated = 1;
      goto LABEL_35;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v29 = fst::LogMessage::LogMessage((fst *)&data, (uint64_t)__p);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"Inconsistent number of states observed during write", 51);
    goto LABEL_32;
  }
  v40 = v11;
  std::string::basic_string[abi:ne180100]<0>(__p, "vector");
  updated = fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::UpdateFstHeader((uint64_t)a1, a2, a3, 2, __p, v31, (uint64_t)v34, v32);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_35:
  if (SHIBYTE(v37) < 0)
    operator delete(v36[1]);
  if (SHIBYTE(v36[0]) < 0)
    operator delete(v35[0]);
  return updated;
}

void sub_1ADC8B4D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a13);
  _Unwind_Resume(a1);
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader(uint64_t a1, uint64_t a2, _BYTE *a3, int a4, std::string *__str, uint64_t a6, uint64_t a7)
{
  const std::string *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  BOOL v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t result;
  BOOL v22;
  uint64_t v23;

  if (a3[24])
  {
    std::string::operator=((std::string *)(a7 + 8), __str);
    v13 = (const std::string *)fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type();
    std::string::operator=((std::string *)(a7 + 32), v13);
    *(_DWORD *)(a7 + 56) = a4;
    *(_QWORD *)(a7 + 64) = a6;
    if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
      v14 = a3[25] == 0;
    else
      v14 = 1;
    v15 = !v14;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    if (a3[26])
      v17 = v16 == 0;
    else
      v17 = 1;
    v18 = v15 | 2;
    if (v17)
      v18 = v15;
    if (a3[27])
      v18 |= 4u;
    *(_DWORD *)(a7 + 60) = v18;
    fst::FstHeader::Write();
  }
  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1))
    v19 = a3[25] == 0;
  else
    v19 = 1;
  if (!v19)
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 72))(v20, a2);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  if (result)
    v22 = a3[26] == 0;
  else
    v22 = 1;
  if (!v22)
  {
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v23 + 72))(v23, a2);
  }
  return result;
}

uint64_t fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::UpdateFstHeader(uint64_t a1, _QWORD *a2, uint64_t a3, int a4, std::string *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  fst *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  _BYTE v32[16];
  _QWORD v33[17];
  __int128 __p;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  MEMORY[0x1AF44CB90](v32);
  v16 = (char *)a2 + *(_QWORD *)(*a2 - 24);
  if ((v16[32] & 5) == 0)
  {
    v17 = *((_QWORD *)v16 + 5);
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    __p = 0u;
    v35 = 0u;
    v42 = a8;
    (*(void (**)(_QWORD *__return_ptr, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v17 + 40))(v33, v17, &__p, 16);
    if (v33[16] == -1)
      std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
  }
  MEMORY[0x1AF44CB9C](v32);
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v18 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
    v19 = (_QWORD *)fst::cerr(v18);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
    v21 = *(char *)(a3 + 23);
    if (v21 >= 0)
      v22 = a3;
    else
      v22 = *(_QWORD *)a3;
    if (v21 >= 0)
      v23 = *(unsigned __int8 *)(a3 + 23);
    else
      v23 = *(_QWORD *)(a3 + 8);
  }
  else
  {
    fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFstHeader(a1, (uint64_t)a2, (_BYTE *)a3, a4, a5, a6, a7);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v24 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v25 = (_QWORD *)fst::cerr(v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v26 = *(char *)(a3 + 23);
      if (v26 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v26 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
    else
    {
      MEMORY[0x1AF44CB90](v33, a2);
      v27 = (char *)a2 + *(_QWORD *)(*a2 - 24);
      if ((v27[32] & 5) == 0)
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v27 + 5) + 32))(&__p, *((_QWORD *)v27 + 5), 0, 2, 16);
        if (v42 == -1)
          std::ios_base::clear((std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)), *(_DWORD *)((char *)a2 + *(_QWORD *)(*a2 - 24) + 32) | 4);
      }
      MEMORY[0x1AF44CB9C](v33);
      if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0)
        return 1;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
      v28 = fst::LogMessage::LogMessage((fst *)v33, (uint64_t)&__p);
      v29 = (_QWORD *)fst::cerr(v28);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Fst::UpdateFstHeader: write failed: ", 36);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v22 = a3;
      else
        v22 = *(_QWORD *)a3;
      if (v30 >= 0)
        v23 = *(unsigned __int8 *)(a3 + 23);
      else
        v23 = *(_QWORD *)(a3 + 8);
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v22, v23);
  fst::LogMessage::~LogMessage((fst::LogMessage *)v33);
  if (SBYTE7(v35) < 0)
    operator delete((void *)__p);
  return 0;
}

void sub_1ADC8B9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  MEMORY[0x1AF44CB9C](&a12);
  _Unwind_Resume(a1);
}

uint64_t fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type()
{
  unsigned __int8 v0;
  uint64_t v2;

  if ((v0 & 1) == 0
  {
    v2 = operator new();
    fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>::Type();
    std::operator+<char>();
    fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type(void)::type = v2;
  }
  return fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>::Type(void)::type;
}

void sub_1ADC8BABC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::WriteFile(fst *a1, uint64_t a2)
{
  fst *v4;
  _QWORD *v5;
  _QWORD *v6;
  int v7;
  const std::string::value_type *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  std::string __p;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  std::string v20;
  __int16 v21;
  char v22;
  char v23;
  _BYTE v24[384];
  _QWORD v25[20];

  v25[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
    {
LABEL_5:
      std::ofstream::basic_ofstream(&v20);
      if ((v24[*(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)] & 5) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v4 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)&__p);
        v5 = (_QWORD *)fst::cerr(v4);
        v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Fst::Write: Can't open file: ", 29);
        v7 = *(char *)(a2 + 23);
        if (v7 >= 0)
          v8 = (const std::string::value_type *)a2;
        else
          v8 = *(const std::string::value_type **)a2;
        if (v7 >= 0)
          v9 = *(unsigned __int8 *)(a2 + 23);
        else
          v9 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v10 = 0;
      }
      else
      {
        v13 = FLAGS_fst_align;
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          __p = *(std::string *)a2;
        v16 = 257;
        v17 = 1;
        v18 = v13;
        v10 = (*(uint64_t (**)(fst *, std::string *, std::string *))(*(_QWORD *)a1 + 96))(a1, &v20, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v20.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F48];
      *(std::string::size_type *)((char *)v20.__r_.__value_.__r.__words
                                + *(_QWORD *)(v20.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F48]
                                                                                                  + 24);
      MEMORY[0x1AF44CA70](&v20.__r_.__value_.__r.__words[1]);
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v25);
      return v10;
    }
  }
  else if (*(_BYTE *)(a2 + 23))
  {
    goto LABEL_5;
  }
  v11 = fst::cout(a1);
  std::string::basic_string[abi:ne180100]<0>(&__p, "standard output");
  v12 = FLAGS_fst_align;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v20 = __p;
  v21 = 257;
  v22 = 1;
  v23 = v12;
  v10 = (*(uint64_t (**)(fst *, uint64_t, std::string *))(*(_QWORD *)a1 + 96))(a1, v11, &v20);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1ADC8BD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::ofstream::~ofstream(&a21);
  _Unwind_Resume(a1);
}

void fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal(_QWORD *a1, int a2, uint64_t a3)
{
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BYTE *v22;
  uint64_t v23;

  v6 = *(uint64_t **)(a1[8] + 8 * a2);
  v20 = *v6;
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v21, (const void *)v6[1], v6[2], (v6[2] - v6[1]) >> 2);
  v16 = *(_QWORD *)a3;
  v18 = 0;
  v19 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::SetFinal((uint64_t)a1, a2, &v16);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v12 = v20;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v13, v21, (uint64_t)v22, (v22 - (_BYTE *)v21) >> 2);
  v8 = *(_QWORD *)a3;
  v10 = 0;
  v11 = 0;
  v9 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v9, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  a1[1] = a1[1] & 4 | fst::SetFinalProperties<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v7, (float *)&v12, (float *)&v8);
  if (v9)
  {
    v10 = v9;
    operator delete(v9);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1ADC8BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  void *v21;

  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  v21 = *(void **)(v19 - 56);
  if (v21)
  {
    *(_QWORD *)(v19 - 48) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::VectorFstImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::AddArc(_QWORD *a1, int a2, float *a3)
{
  uint64_t v6;
  _DWORD *v7;
  unint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 56);
  if (v6 == *(_QWORD *)(*(_QWORD *)(a1[8] + 8 * a2) + 48))
    v7 = 0;
  else
    v7 = (_DWORD *)(v6 - 48);
  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  a1[1] = a1[1] & 4 | fst::AddArcProperties<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v8, a2, a3, v7);
  return fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::AddArc(*(_QWORD **)(a1[8] + 8 * a2), a3);
}

void fst::VectorFstBaseImpl<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::DeleteStates(uint64_t a1, char **a2)
{
  uint64_t *v4;
  std::vector<int>::size_type v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  std::vector<int>::pointer begin;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  int64x2_t *v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  _QWORD *v24;
  uint64_t v25;
  int64x2_t v26;
  unint64_t v27;
  uint64_t v28;
  int *v29;
  int64x2_t v30;
  int64x2_t v31;
  std::vector<int>::value_type __x;
  std::vector<int> v33;

  v4 = (uint64_t *)(a1 + 64);
  v5 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3;
  __x = 0;
  std::vector<int>::vector(&v33, v5, &__x);
  v6 = *a2;
  v7 = a2[1] - *a2;
  if (v7)
  {
    v8 = v7 >> 2;
    begin = v33.__begin_;
    if (v8 <= 1)
      v8 = 1;
    do
    {
      v10 = *(int *)v6;
      v6 += 4;
      begin[v10] = -1;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) == v11)
  {
    v13 = 0;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    do
    {
      if (v33.__begin_[v12] == -1)
      {
        fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Destroy(*(_QWORD *)(v11 + 8 * v12));
      }
      else
      {
        v33.__begin_[v12] = v13;
        if (v12 != v13)
          *(_QWORD *)(v11 + 8 * v13) = *(_QWORD *)(v11 + 8 * v12);
        ++v13;
      }
      ++v12;
      v11 = *(_QWORD *)(a1 + 64);
    }
    while (v12 < (*(_QWORD *)(a1 + 72) - v11) >> 3);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v4, v13);
  v14 = *(_QWORD *)(a1 + 64);
  if (*(_QWORD *)(a1 + 72) != v14)
  {
    v15 = 0;
    do
    {
      v16 = *(int64x2_t **)(v14 + 8 * v15);
      v17 = v16[2];
      v18 = v16[3].i64[1] - v16[3].i64[0];
      if (v18)
        v19 = v16[3].i64[0];
      else
        v19 = 0;
      if (v18)
      {
        v20 = 0;
        v21 = 0;
        v22 = (int *)(v19 + 40);
        do
        {
          v23 = v33.__begin_[*v22];
          if (v23 == -1)
          {
            v25 = *((_QWORD *)v22 - 5);
            v26.i64[0] = v25;
            v26.i64[1] = HIDWORD(v25);
            v17 = vaddq_s64(v17, vceqzq_s64(v26));
          }
          else
          {
            *v22 = v23;
            if (v20 != v21)
            {
              v30 = v17;
              v24 = (_QWORD *)(v19 + 48 * v21);
              *v24 = *((_QWORD *)v22 - 5);
              fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)(v24 + 1), (uint64_t)(v22 - 8));
              *(_DWORD *)(v19 + 48 * v21 + 40) = *v22;
              v14 = *v4;
              v17 = v30;
            }
            ++v21;
          }
          ++v20;
          v16 = *(int64x2_t **)(v14 + 8 * v15);
          v27 = 0xAAAAAAAAAAAAAAABLL * ((v16[3].i64[1] - v16[3].i64[0]) >> 4);
          v22 += 12;
        }
        while (v20 < v27);
        v31 = v17;
      }
      else
      {
        v31 = v16[2];
        v21 = 0;
        v27 = 0;
      }
      fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::DeleteArcs(v16, v27 - v21);
      v14 = *(_QWORD *)(a1 + 64);
      *(int64x2_t *)(*(_QWORD *)(v14 + 8 * v15++) + 32) = v31;
    }
    while (v15 < (*(_QWORD *)(a1 + 72) - v14) >> 3);
  }
  v28 = *(int *)(a1 + 88);
  if ((_DWORD)v28 == -1)
  {
    v29 = v33.__begin_;
    if (!v33.__begin_)
      return;
  }
  else
  {
    v29 = v33.__begin_;
    *(_DWORD *)(a1 + 88) = v33.__begin_[v28];
  }
  v33.__end_ = v29;
  operator delete(v29);
}

void sub_1ADC8C25C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::~MutableArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIteratorBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Reinit()
{
  return 0;
}

BOOL fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >= 0xAAAAAAAAAAAAAAABLL
                               * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 56)
                                          - *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)) >> 4);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Value_(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + 48 * *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 24);
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 24) = 0;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::Flags_()
{
  return 15;
}

_QWORD *std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = *(_QWORD *)a2;
  v3[2] = 0;
  v3[3] = 0;
  v3[1] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 4;
  return result;
}

void sub_1ADC8C36C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__move_range(uint64_t result, uint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = result;
  v7 = *(char **)(result + 8);
  v8 = v7 - a4;
  v9 = a2 + v7 - a4;
  v10 = v7;
  if (v9 < a3)
  {
    v12 = v7 + 8;
    do
    {
      *(v12 - 1) = *(_QWORD *)v9;
      v12[1] = 0;
      v12[2] = 0;
      *v12 = 0;
      result = (uint64_t)std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v9 + 8), *(_QWORD *)(v9 + 16), (uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 2);
      v12 += 4;
      v9 += 32;
    }
    while (v9 < a3);
    v10 = (char *)(v12 - 1);
  }
  *(_QWORD *)(v6 + 8) = v10;
  if (v7 != a4)
  {
    v13 = (uint64_t)(v7 - 32);
    v14 = 32 * (v8 >> 5);
    v15 = a2 - 32;
    do
    {
      result = fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v13, v15 + v14);
      v13 -= 32;
      v14 -= 32;
    }
    while (v14);
  }
  return result;
}

void sub_1ADC8C43C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2 - 8;
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::push_back[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _QWORD *result;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = (_QWORD *)a1[2];
  if (v4 == (_QWORD *)a1[3])
  {
    v5 = a1[1];
    v6 = v5 - *a1;
    if (v5 <= *a1)
    {
      if (v4 == (_QWORD *)*a1)
        v13 = 1;
      else
        v13 = ((uint64_t)v4 - *a1) >> 4;
      v14 = a1[4];
      v22 = a1[4];
      *(_QWORD *)&v20 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v14, v13);
      *((_QWORD *)&v20 + 1) = v20 + 32 * (v13 >> 2);
      *(_QWORD *)&v21 = *((_QWORD *)&v20 + 1);
      *((_QWORD *)&v21 + 1) = v20 + 32 * v15;
      std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end_with_size<std::move_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(&v20, a1[1], (uint64_t)(a1[2] - a1[1]) >> 5);
      v16 = v21;
      v17 = *(_OWORD *)a1;
      v18 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v20;
      *((_OWORD *)a1 + 1) = v16;
      v20 = v17;
      v21 = v18;
      std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&v20);
      v4 = (_QWORD *)a1[2];
    }
    else
    {
      v7 = v6 >> 5;
      v8 = v6 >> 5 < -1;
      v9 = (v6 >> 5) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      if ((_QWORD *)v5 == v4)
      {
        v12 = (_QWORD *)(v5 - 32 * (v10 >> 1));
      }
      else
      {
        do
        {
          fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(v5 + 32 * v11, v5);
          v5 += 32;
        }
        while ((_QWORD *)v5 != v4);
        v4 = (_QWORD *)a1[1];
        v12 = (_QWORD *)(v5 + 32 * v11);
      }
      a1[1] = &v4[4 * v11];
      a1[2] = v12;
      v4 = v12;
    }
  }
  *v4 = *(_QWORD *)a2;
  v4[2] = 0;
  v4[3] = 0;
  v4[1] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  a1[2] += 32;
  return result;
}

void sub_1ADC8C584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>,std::reverse_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>(v7, a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__split_buffer<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_at_end_with_size<std::move_iterator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = result[2];
  if (a3)
  {
    v6 = (_QWORD *)(v4 + 8);
    v7 = 32 * a3;
    v4 += 32 * a3;
    do
    {
      *(v6 - 1) = *(_QWORD *)a2;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
      v6 += 4;
      a2 += 32;
      v7 -= 32;
    }
    while (v7);
  }
  v3[2] = v4;
  return result;
}

void sub_1ADC8C6C4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 - 8;
  _Unwind_Resume(a1);
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = *(_QWORD *)v6;
      v4[2] = 0;
      v4[3] = 0;
      v4[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4 + 1, *(const void **)(v6 + 8), *(_QWORD *)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 2);
      v4 = v11 + 4;
      v11 += 4;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADC8C774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::Connect<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  unint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  void *__p;
  char *v15;
  char *v16;
  uint64_t v17[11];
  uint64_t v18;
  void *v19[3];
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  memset(v19, 0, sizeof(v19));
  v18 = 0;
  v17[0] = 0;
  v17[1] = (uint64_t)&v20;
  v17[2] = (uint64_t)v19;
  v17[3] = (uint64_t)&v18;
  fst::DfsVisit<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::SccVisitor<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, v17, 0);
  __p = 0;
  v15 = 0;
  v16 = 0;
  v2 = v21;
  if (v21)
  {
    v3 = 0;
    v4 = 0;
    do
    {
      if ((v20[v4 >> 6] & (1 << v4)) == 0 || (*((_QWORD *)v19[0] + (v4 >> 6)) & (1 << v4)) == 0)
      {
        if (v3 >= v16)
        {
          v6 = (char *)__p;
          v7 = (v3 - (_BYTE *)__p) >> 2;
          v8 = v7 + 1;
          if ((unint64_t)(v7 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v9 = v16 - (_BYTE *)__p;
          if ((v16 - (_BYTE *)__p) >> 1 > v8)
            v8 = v9 >> 1;
          if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
            v10 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v10 = v8;
          if (v10)
          {
            v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v16, v10);
            v6 = (char *)__p;
            v3 = v15;
          }
          else
          {
            v11 = 0;
          }
          v12 = &v11[4 * v7];
          *(_DWORD *)v12 = v4;
          v5 = v12 + 4;
          while (v3 != v6)
          {
            v13 = *((_DWORD *)v3 - 1);
            v3 -= 4;
            *((_DWORD *)v12 - 1) = v13;
            v12 -= 4;
          }
          __p = v12;
          v15 = v5;
          v16 = &v11[4 * v10];
          if (v6)
            operator delete(v6);
        }
        else
        {
          *(_DWORD *)v3 = v4;
          v5 = v3 + 4;
        }
        v15 = v5;
        v2 = v21;
        v3 = v5;
      }
      ++v4;
    }
    while (v2 > v4);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 216))(a1, &__p);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 192))(a1, 0x50000000000, 0x50000000000);
  if (__p)
  {
    v15 = (char *)__p;
    operator delete(__p);
  }
  if (v19[0])
    operator delete(v19[0]);
  if (v20)
    operator delete(v20);
}

void sub_1ADC8C990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;
  void *v14;

  v13 = *(void **)(v11 - 112);
  if (v13)
    operator delete(v13);
  v14 = *(void **)(v11 - 88);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__construct_one_at_end[abi:ne180100]<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)v3 = *(_DWORD *)a2;
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v3 + 16), *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 40;
  return result;
}

void sub_1ADC8CA2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__push_back_slow_path<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x333333333333333)
    v9 = 0x666666666666666;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[40 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[40 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v15 += 40;
  std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC8CB44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD v15[3];
  char v16;
  __int128 v17;
  __int128 v18;

  v7 = a7;
  *(_QWORD *)&v18 = a6;
  *((_QWORD *)&v18 + 1) = a7;
  v17 = v18;
  v15[0] = a1;
  v15[1] = &v17;
  v15[2] = &v18;
  v16 = 0;
  if (a3 == a5)
  {
    v13 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v10 = *(_DWORD *)(v9 - 40);
      v9 -= 40;
      v11 = *(_QWORD *)(v9 + 8);
      *(_QWORD *)(v7 - 24) = 0;
      v12 = (_QWORD *)(v7 - 24);
      *((_DWORD *)v12 - 4) = v10;
      *(v12 - 1) = v11;
      v12[1] = 0;
      v12[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v12, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
      v7 = *((_QWORD *)&v18 + 1) - 40;
      *((_QWORD *)&v18 + 1) -= 40;
    }
    while (v9 != a5);
    v13 = v18;
  }
  v16 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v15);
  return v13;
}

void sub_1ADC8CC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>,std::reverse_iterator<std::pair<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>,std::reverse_iterator<std::pair<int,fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

int *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3
      && fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>> &,std::__wrap_iter<int *>>(_BOOL8 result, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  int *v8;
  int *v9;
  int v10;
  int *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (int *)(result + 4 * (v4 >> 1));
    v9 = (int *)(a2 - 4);
    result = fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a3, *v8, *(_DWORD *)(a2 - 4));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (int *)(v6 + 4 * v7);
        result = fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(a3, *v8, v10);
        v9 = v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

BOOL fst::ShortestPathCompare<int,fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()(uint64_t **a1, int a2, int a3)
{
  uint64_t v6;
  int *v7;
  int *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _BOOL8 v30;
  BOOL v31;
  void *__p[2];
  __int128 v35;
  void *v36[2];
  __int128 v37;

  v6 = **a1;
  v7 = (int *)(v6 + 40 * a2);
  v8 = (int *)(v6 + 40 * a3);
  v9 = *v7;
  v10 = *((_DWORD *)a1 + 4);
  if (*v7 == v10)
  {
    *(_OWORD *)v36 = 0u;
    v37 = 0u;
  }
  else
  {
    v11 = *a1[1];
    if (v9 >= (unint64_t)((a1[1][1] - v11) >> 5))
    {
      v36[0] = (void *)vdup_n_s32(0x7F800000u);
      v37 = 0uLL;
      v36[1] = 0;
      v9 = v10;
    }
    else
    {
      v12 = v11 + 32 * v9;
      v36[0] = *(void **)v12;
      v37 = 0uLL;
      v36[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v36[1], *(const void **)(v12 + 8), *(_QWORD *)(v12 + 16), (uint64_t)(*(_QWORD *)(v12 + 16) - *(_QWORD *)(v12 + 8)) >> 2);
      v9 = *((_DWORD *)a1 + 4);
    }
  }
  v13 = *v8;
  if (*v8 == v9)
  {
    *(_OWORD *)__p = 0u;
    v35 = 0u;
    v14 = 0.0;
    v13 = v9;
    v15 = 0.0;
  }
  else
  {
    v16 = *a1[1];
    if (v13 >= (unint64_t)((a1[1][1] - v16) >> 5))
    {
      v35 = 0uLL;
      __p[1] = 0;
      v14 = INFINITY;
      v15 = INFINITY;
    }
    else
    {
      v17 = v16 + 32 * v13;
      __p[0] = *(void **)v17;
      v35 = 0uLL;
      __p[1] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], *(const void **)(v17 + 8), *(_QWORD *)(v17 + 16), (uint64_t)(*(_QWORD *)(v17 + 16) - *(_QWORD *)(v17 + 8)) >> 2);
      v14 = *((float *)__p + 1);
      v15 = *(float *)__p;
      v9 = *((_DWORD *)a1 + 4);
      v13 = *v8;
    }
  }
  v18 = v6 + 40 * a2;
  v19 = *(float *)v36 + *(float *)(v18 + 8);
  v20 = *((float *)v36 + 1) + *(float *)(v18 + 12);
  v21 = v6 + 40 * a3;
  v22 = v15 + *(float *)(v21 + 8);
  v23 = v14 + *(float *)(v21 + 12);
  v24 = v22 + v23;
  v25 = v19 + v20;
  if (*v7 == v9 && v13 != v9)
  {
    if (v24 >= v25 && (v22 >= v19 || v24 > v25) && (v19 != v22 || v20 != v23))
    {
      v30 = vabds_f32(v25, v24) <= *((float *)a1 + 5);
      goto LABEL_47;
    }
    goto LABEL_34;
  }
  if (*v7 != v9 && v13 == v9)
  {
    if (v24 < v25 || (v22 < v19 ? (v31 = v24 <= v25) : (v31 = 0), v31))
    {
      if (v19 != v22 || v20 != v23)
      {
        v30 = vabds_f32(v25, v24) > *((float *)a1 + 5);
        goto LABEL_47;
      }
    }
  }
  else if (v24 < v25 || v24 <= v25 && v22 < v19)
  {
LABEL_34:
    v30 = 1;
    goto LABEL_47;
  }
  v30 = 0;
LABEL_47:
  if (__p[1])
  {
    *(void **)&v35 = __p[1];
    operator delete(__p[1]);
  }
  if (v36[1])
  {
    *(void **)&v37 = v36[1];
    operator delete(v36[1]);
  }
  return v30;
}

void sub_1ADC8D084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DD78;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADC8D208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D27478;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

void fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~DeterminizeFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D27478;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Start(uint64_t a1)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(*(_QWORD *)(a1 + 8));
}

_QWORD *fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final(*(_QWORD *)(a1 + 8), a2, a3);
}

unint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumArcs(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumArcs(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumInputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumInputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::NumOutputEpsilons(uint64_t a1, uint64_t a2)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::NumOutputEpsilons(*(_QWORD **)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Copy(uint64_t a1, int a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst(v4, a1, a2);
  return v4;
}

void sub_1ADC8D428(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::Fst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitStateIterator(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = operator new();
  *(_QWORD *)v4 = &unk_1E5D20168;
  *(_QWORD *)(v4 + 8) = a1;
  v5 = *a1;
  *(_QWORD *)(v4 + 16) = a1[1];
  *(_DWORD *)(v4 + 24) = 0;
  result = (*(uint64_t (**)(uint64_t *))(v5 + 24))(a1);
  *(_QWORD *)v4 = &unk_1E5D1C368;
  *a2 = v4;
  return result;
}

void sub_1ADC8D4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C408BA93049);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::InitArcIterator(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  fst *v13;
  _QWORD *v14;
  uint64_t *v15;
  void *__p[2];
  char v18;
  char v19;

  v10 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a5);
  *(_QWORD *)v10 = &unk_1E5D208C8;
  *(_DWORD *)(v10 + 144) = *(_DWORD *)(a5 + 16);
  *(_QWORD *)(v10 + 152) = a3;
  *(_QWORD *)(v10 + 160) = a4;
  v11 = *(_QWORD **)(a5 + 32);
  if (!v11)
  {
    v11 = (_QWORD *)operator new();
    *v11 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  }
  a1[22] = v11;
  v12 = *(_QWORD **)(a5 + 40);
  if (!v12)
  {
    v12 = (_QWORD *)operator new();
    *v12 = 0;
    v12[2] = v12 + 1;
    v12[3] = v12 + 1;
    std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set((uint64_t)(v12 + 4), 0, v12 + 2, v12 + 3);
    v12[11] = 0;
    v12[12] = 0;
    v12[13] = 0;
  }
  a1[23] = v12;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v13 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v14 = (_QWORD *)fst::cerr(v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"DeterminizeFst: argument not an acceptor", 40);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  v15 = (uint64_t *)a1[20];
  if (v15)
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](v15);
  return a1;
}

void sub_1ADC8D6BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21EC0;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase<fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheBaseImpl(a1, a3) = &unk_1E5D21EC0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0007, 0);
  v8 = *(_DWORD *)(a3 + 24) != 1 || *(_BYTE *)(a3 + 28) != 0;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | fst::DeterminizeProperties(v6, *(_DWORD *)(a3 + 20) != 0, v8) & 0x3FFFFFFF0004;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v10 = *(_QWORD *)(a1 + 40);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 40) = v11;
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *(_QWORD *)(a1 + 48) = v14;
  }
  return a1;
}

void sub_1ADC8D8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 0x3FFFFFFF0007);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Properties(uint64_t a1, uint64_t a2)
{
  if ((a2 & 4) != 0
    && (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 136) + 64))(*(_QWORD *)(a1 + 136), 4, 0))
  {
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
  return *(_QWORD *)(a1 + 8) & a2;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Copy(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v2, a1);
  return v2;
}

void sub_1ADC8DA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C405CF36722);
  _Unwind_Resume(a1);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::Expand(_QWORD *a1, int a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  _QWORD *v9[2];

  v9[0] = 0;
  v9[1] = 0;
  v8 = (uint64_t *)v9;
  fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(a1, a2, &v8);
  v4 = v8;
  if (v8 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::AddArc((uint64_t)a1, a2, (uint64_t)(v4 + 5));
      v5 = (uint64_t *)v4[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (uint64_t *)v4[2];
          v7 = *v6 == (_QWORD)v4;
          v4 = v6;
        }
        while (!v7);
      }
      v4 = v6;
    }
    while (v6 != (uint64_t *)v9);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetArcs((uint64_t)a1, a2);
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&v8, v9[0]);
}

void sub_1ADC8DAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, _QWORD *a11)
{
  std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::destroy((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeStart(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t State;
  int v6;
  void *__p[2];
  __int128 v8;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 136) + 24))(*(_QWORD *)(a1 + 136));
  if (v2 == -1)
    return 0xFFFFFFFFLL;
  v6 = v2;
  *(_OWORD *)__p = 0u;
  v8 = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[1], 0, 0, 0);
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  *(_QWORD *)v3 = std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> const&>(v3, 0, (uint64_t)&v6);
  *(_BYTE *)(v3 + 8) = 0;
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, (float **)v3);
  if (__p[1])
  {
    *(void **)&v8 = __p[1];
    operator delete(__p[1]);
  }
  return State;
}

void sub_1ADC8DBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeFinal@<X0>(uint64_t result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  float **v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  char *v12;
  BOOL v13;
  unint64_t v14;
  void *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *__p;
  _BYTE *v27;
  uint64_t v28;

  v4 = *(float ***)(*(_QWORD *)(*(_QWORD *)(result + 184) + 88) + 8 * a2);
  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  v5 = *v4;
  if (*v4)
  {
    v6 = result;
    do
    {
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(v6 + 136) + 32))(&v18, *(_QWORD *)(v6 + 136), *((unsigned int *)v5 + 2));
      v7 = v5[4] + *(float *)&v18;
      v8 = v5[5] + *((float *)&v18 + 1);
      v23 = 0;
      v24 = 0;
      v22 = 0;
      v10 = *(float *)a3;
      v9 = *(float *)(a3 + 4);
      v11 = *(float *)a3 + v9;
      if (v11 >= (float)(v7 + v8))
      {
        if (v11 > (float)(v7 + v8) || (v10 >= v7 ? (v13 = v10 <= v7) : (v13 = 1), v12 = (char *)a3, !v13))
        {
          v12 = &v21;
          v9 = v8;
          v10 = v7;
        }
      }
      else
      {
        v12 = (char *)a3;
      }
      v25 = __PAIR64__(LODWORD(v9), LODWORD(v10));
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v12 + 1), *((_QWORD *)v12 + 2), (uint64_t)(*((_QWORD *)v12 + 2) - *((_QWORD *)v12 + 1)) >> 2);
      *(_QWORD *)a3 = v25;
      if (&v25 != (unint64_t *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v27, (v27 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      if (v19)
      {
        v20 = v19;
        operator delete(v19);
      }
      v14 = *(_QWORD *)a3;
      v16 = 0;
      v17 = 0;
      v15 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v15, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
      v25 = v14;
      v27 = 0;
      v28 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v15, (uint64_t)v16, (v16 - (_BYTE *)v15) >> 2);
      *(_QWORD *)a3 = v25;
      if (&v25 != (unint64_t *)a3)
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v27, (v27 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v27 = __p;
        operator delete(__p);
      }
      if (v15)
      {
        v16 = v15;
        operator delete(v15);
      }
      result = fst::LatticeWeightTpl<float>::Member((float *)a3);
      if ((result & 1) == 0)
        *(_QWORD *)(v6 + 8) |= 4uLL;
      v5 = *(float **)v5;
    }
    while (v5);
  }
  return result;
}

void sub_1ADC8DDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  uint64_t v23;
  void **v24;
  void *v26;

  if (__p)
    operator delete(__p);
  if (a10)
    operator delete(a10);
  v26 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v23 + 16) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &unk_1E5D226A0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B678;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 8);
  v4 = operator new();
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorCacheStore((_QWORD *)v4, (_BYTE *)a2);
  v5 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(v4 + 72) = v5 == 0;
  *(_DWORD *)(v4 + 76) = -1;
  *(_QWORD *)(v4 + 80) = 0;
  *(_BYTE *)(v4 + 88) = *(_BYTE *)a2;
  if (v5 <= 0x1FA0)
    v5 = 8096;
  *(_QWORD *)(v4 + 96) = v5;
  *(_BYTE *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v4;
  *(_BYTE *)(a1 + 128) = 1;
  return a1;
}

void sub_1ADC8DF50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  MEMORY[0x1AF44D190](v2, 0x10A0C407A9BBF1FLL);
  v4 = *(void **)(v1 + 72);
  if (v4)
    operator delete(v4);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(a1);
  JUMPOUT(0x1AF44D190);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorCacheStore(_QWORD *a1, _BYTE *a2)
{
  *(_BYTE *)a1 = *a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a1 + 4;
  a1[5] = a1 + 4;
  a1[6] = 0;
  a1[7] = 0;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  a1[7] = a1[5];
  return a1;
}

void sub_1ADC8E00C(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  void **v3;
  void **v4;
  void *v6;

  v4 = v3;
  std::__list_imp<char *>::clear(v2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 16) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &unk_1E5D1B678;
  v2 = (_QWORD *)a1[15];
  if (v2)
  {
    v3 = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorCacheStore(v2);
    MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  }
  v4 = (void *)a1[9];
  if (v4)
    operator delete(v4);
  return fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::~VectorCacheStore(_QWORD *a1)
{
  void *v2;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  std::__list_imp<char *>::clear(a1 + 4);
  v2 = (void *)a1[1];
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable(uint64_t a1, size_t a2)
{
  *(_QWORD *)(a1 + 8) = a1;
  *(_QWORD *)(a1 + 16) = a1;
  std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(a1 + 24, a2, (_QWORD *)(a1 + 8), (_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (a2)
    std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)(a1 + 80), a2);
  return a1;
}

void sub_1ADC8E130(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void *v5;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 88) = v5;
    operator delete(v5);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_set<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::unordered_set(uint64_t a1, size_t a2, _QWORD *a3, _QWORD *a4)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 32) = *a3;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(_QWORD *)(a1 + 48) = *a4;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADC8E198(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::~DeterminizeFsaImpl(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D208C8;
  v2 = (_QWORD *)a1[22];
  if (v2)
  {
    if (*v2)
      (*(void (**)(_QWORD))(*(_QWORD *)*v2 + 8))(*v2);
    MEMORY[0x1AF44D190](v2, 0x20C4093837F09);
  }
  v3 = a1[23];
  if (v3)
  {
    v4 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(v3);
    MEMORY[0x1AF44D190](v4, 0x10E0C400200E20DLL);
  }
  *a1 = &unk_1E5D21EC0;
  v5 = a1[17];
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(a1);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::~DefaultDeterminizeStateTable(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + 88;
  v2 = *(_QWORD **)(a1 + 88);
  v3 = *(_QWORD *)(v4 + 8);
  if ((int)((unint64_t)(v3 - (_QWORD)v2) >> 3) >= 1)
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear((_QWORD **)v2[v5]);
        MEMORY[0x1AF44D190](v6, 0x1020C405F07FB98);
        v2 = *(_QWORD **)(a1 + 88);
        v3 = *(_QWORD *)(a1 + 96);
      }
      ++v5;
    }
    while (v5 < (int)((unint64_t)(v3 - (_QWORD)v2) >> 3));
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 32);
  return a1;
}

void std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear(_QWORD **a1)
{
  _QWORD *i;
  _QWORD *v3;

  for (i = *a1; i; i = v3)
  {
    v3 = (_QWORD *)*i;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)a1, i);
  }
  *a1 = 0;
}

_QWORD *fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  size_t *v8;
  size_t v9;
  fst *v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  char v15;

  v4 = fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase((uint64_t)a1, a2);
  *(_QWORD *)v4 = &unk_1E5D208C8;
  *(_DWORD *)(v4 + 144) = *(_DWORD *)(a2 + 144);
  *(_QWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  v5 = (_QWORD *)operator new();
  if (a1[17])
    v6 = a1[17];
  else
    v6 = **(_QWORD **)(a2 + 176);
  *v5 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 88))(v6, 0);
  a1[22] = v5;
  v7 = (_QWORD *)operator new();
  v8 = *(size_t **)(a2 + 184);
  v9 = *v8;
  *v7 = *v8;
  fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::CompactHashBiTable((uint64_t)(v7 + 1), v9);
  a1[23] = v7;
  if (*(_QWORD *)(a2 + 160))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v15, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFsaImpl: cannot copy with out_dist vector", 52);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v15);
    if (v14 < 0)
      operator delete(__p[0]);
    a1[1] |= 4uLL;
  }
  return a1;
}

void sub_1ADC8E484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  uint64_t v20;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D21EC0;
  v20 = v18[17];
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v18);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFstImplBase(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string __str;

  *(_QWORD *)fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheBaseImpl(a1, a2, 0) = &unk_1E5D21EC0;
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 136) + 88))(*(_QWORD *)(a2 + 136), 1);
  std::string::basic_string[abi:ne180100]<0>(&__str, "determinize");
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 0xFFFFC0000000FFFFLL | (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 0x3FFFFFFF0004;
  v4 = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a1 + 40);
  if (v5 != v4)
  {
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    if (v4)
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 40) = v6;
  }
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 != v7)
  {
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    if (v7)
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    else
      v9 = 0;
    *(_QWORD *)(a1 + 48) = v9;
  }
  return a1;
}

void sub_1ADC8E66C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  if (a15 < 0)
    operator delete(__p);
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheBaseImpl(v15);
  _Unwind_Resume(a1);
}

uint64_t fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheBaseImpl(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  char v13[8];
  unint64_t v14;

  *(_QWORD *)a1 = &unk_1E5D226A0;
  *(_QWORD *)(a1 + 8) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1B678;
  *(_BYTE *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = -1;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 84) = 0u;
  *(_DWORD *)(a1 + 100) = -1;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v6 = operator new();
  v7 = *(_QWORD *)(a1 + 112);
  v13[0] = *(_BYTE *)(a1 + 104);
  v14 = v7;
  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorCacheStore((_QWORD *)v6, v13);
  v8 = v14;
  *(_BYTE *)(v6 + 72) = v14 == 0;
  *(_DWORD *)(v6 + 76) = -1;
  *(_QWORD *)(v6 + 80) = 0;
  *(_BYTE *)(v6 + 88) = v13[0];
  if (v8 <= 0x1FA0)
    v8 = 8096;
  *(_QWORD *)(v6 + 96) = v8;
  *(_BYTE *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v6;
  if (*(_BYTE *)(a2 + 128))
    v9 = 1;
  else
    v9 = a3 ^ 1;
  *(_BYTE *)(a1 + 128) = v9;
  if (((a3 ^ 1) & 1) == 0)
  {
    v10 = *(_QWORD *)(a2 + 120);
    fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::operator=(v6, v10);
    v11 = *(_OWORD *)(v10 + 104);
    *(_OWORD *)(v6 + 88) = *(_OWORD *)(v10 + 88);
    *(_OWORD *)(v6 + 104) = v11;
    *(_BYTE *)(a1 + 60) = *(_BYTE *)(a2 + 60);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    std::vector<BOOL>::operator=((void **)(a1 + 72), a2 + 72);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  }
  return a1;
}

void sub_1ADC8E814(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  MEMORY[0x1AF44D190](v3, 0x10A0C407A9BBF1FLL);
  if (*v2)
    operator delete(*v2);
  fst::FstImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::~FstImpl(v1);
  _Unwind_Resume(a1);
}

uint64_t fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::operator=(uint64_t a1, uint64_t a2)
{
  char *MutableState;

  if (a1 != a2)
  {
    fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::CopyStates((_QWORD *)a1, a2);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 40);
    *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
    *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
    if (*(_DWORD *)(a2 + 76) == -1)
      MutableState = 0;
    else
      MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
  }
  return a1;
}

void fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::CopyStates(_QWORD *a1, uint64_t a2)
{
  char **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Clear(a1);
  v4 = (char **)(a1 + 1);
  std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve((void **)a1 + 1, (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3);
  v5 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)(a2 + 16) != v5)
  {
    v6 = 0;
    do
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      if (v7)
      {
        v8 = operator new(0x50uLL);
        fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheState((uint64_t)v8, v7);
        if (*(_BYTE *)a1)
        {
          v9 = operator new(0x18uLL);
          v9[4] = v6;
          v10 = a1[4];
          *(_QWORD *)v9 = v10;
          *((_QWORD *)v9 + 1) = a1 + 4;
          *(_QWORD *)(v10 + 8) = v9;
          a1[4] = v9;
          ++a1[6];
        }
      }
      else
      {
        v8 = 0;
      }
      v12 = (_QWORD *)a1[2];
      v11 = a1[3];
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v4) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v4;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v17);
        else
          v18 = 0;
        v19 = &v18[8 * v14];
        *(_QWORD *)v19 = v8;
        v13 = v19 + 8;
        v21 = (char *)a1[1];
        v20 = (char *)a1[2];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *((_QWORD *)v19 - 1) = v22;
            v19 -= 8;
          }
          while (v20 != v21);
          v20 = *v4;
        }
        a1[1] = v19;
        a1[2] = v13;
        a1[3] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v8;
        v13 = v12 + 1;
      }
      a1[2] = v13;
      ++v6;
      v5 = *(_QWORD *)(a2 + 8);
    }
    while (v6 < (*(_QWORD *)(a2 + 16) - v5) >> 3);
  }
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::CacheState(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 8), *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v4 = *(_OWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>>((_QWORD *)(a1 + 48), v5, v6, 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4));
  *(_QWORD *)(a1 + 72) = *(unsigned int *)(a2 + 72);
  return a1;
}

void sub_1ADC8EAE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__init_with_size[abi:ne180100]<std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>,std::__wrap_iter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADC8EB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const*,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = *(_QWORD *)v6;
      v7 = *(_QWORD *)(v6 + 8);
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 8) = v7;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(v4 + 16), *(const void **)(v6 + 16), *(_QWORD *)(v6 + 24), (uint64_t)(*(_QWORD *)(v6 + 24) - *(_QWORD *)(v6 + 16)) >> 2);
      *(_DWORD *)(v4 + 40) = *(_DWORD *)(v6 + 40);
      v4 = v12 + 48;
      v12 += 48;
      v6 += 48;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADC8EC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>,fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::GetLabelMap(_QWORD *a1, int a2, uint64_t **a3)
{
  float32x2_t *v5;
  uint64_t v6;
  uint64_t v7;
  float32x2_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  __int32 v15;
  float32x2_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  _QWORD v20[3];
  _DWORD *v21;
  unint64_t v22;

  v5 = **(float32x2_t ***)(*(_QWORD *)(a1[23] + 88) + 8 * a2);
  if (!v5)
    goto LABEL_19;
  do
  {
    v6 = v5[1].u32[0];
    v7 = a1[17];
    v22 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v7 + 136))(v7, v6, v20);
    while (1)
    {
      if (!v20[0])
      {
        if (v22 >= v20[2])
          goto LABEL_16;
        goto LABEL_8;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v20[0] + 24))(v20[0]))
        break;
      if (v20[0])
      {
        v8 = (float32x2_t *)(*(uint64_t (**)(void))(*(_QWORD *)v20[0] + 32))();
        goto LABEL_9;
      }
LABEL_8:
      v8 = (float32x2_t *)(v20[1] + 48 * v22);
LABEL_9:
      v15 = v8[5].i32[0];
      v16 = vadd_f32(v5[2], v8[1]);
      v18 = 0;
      v19 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, 0, 0, 0);
      fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::FilterArc(a1[22], (int *)v8, (uint64_t)&v5[1], (uint64_t)&v15, a3);
      if (__p)
      {
        v18 = __p;
        operator delete(__p);
      }
      if (v20[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v20[0] + 40))(v20[0]);
      else
        ++v22;
    }
    if (v20[0])
    {
      (*(void (**)(void))(*(_QWORD *)v20[0] + 8))();
      goto LABEL_18;
    }
LABEL_16:
    if (v21)
      --*v21;
LABEL_18:
    v5 = (float32x2_t *)*v5;
  }
  while (v5);
LABEL_19:
  v11 = *a3;
  v9 = a3 + 1;
  v10 = v11;
  if (v11 != (uint64_t *)v9)
  {
    do
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::NormArc((uint64_t)a1, (uint64_t)(v10 + 5));
      v12 = (uint64_t *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != (uint64_t *)v9);
  }
}

void sub_1ADC8EE5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _DWORD *a17)
{
  if (a14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  else if (a17)
  {
    --*a17;
  }
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t *MutableState;
  _DWORD v7[2];
  uint64_t v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int State;

  __p = 0;
  v10 = 0;
  v11 = 0;
  v7[0] = *(_DWORD *)a3;
  v7[1] = v7[0];
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v8, a3 + 8);
  State = fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::FindState(a1, *(float ***)(a3 + 40));
  MutableState = (uint64_t *)fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::PushArc(MutableState, (uint64_t)v7);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1ADC8EF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetArcs(uint64_t a1, int a2)
{
  char *MutableState;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  int *v9;
  int v10;
  int v11;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::SetArcs(*(_QWORD *)(a1 + 120), (uint64_t)MutableState);
  v5 = *((_QWORD *)MutableState + 6);
  v6 = *((_QWORD *)MutableState + 7) - v5;
  if (v6)
  {
    v7 = v6 / 48;
    v8 = *(_DWORD *)(a1 + 68);
    if (v7 <= 1)
      v7 = 1;
    v9 = (int *)(v5 + 40);
    do
    {
      v11 = *v9;
      v9 += 12;
      v10 = v11;
      if (v11 >= v8)
      {
        v8 = v10 + 1;
        *(_DWORD *)(a1 + 68) = v10 + 1;
      }
      --v7;
    }
    while (v7);
  }
  fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(a1, a2);
  *((_DWORD *)MutableState + 18) |= 0xAu;
}

uint64_t fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::FilterArc(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  int32x2_t *v7;
  int32x2_t v8;
  _BYTE *v9;
  uint64_t *v10;
  int32x2_t v12[2];
  void *__p;
  _BYTE *v14;
  int32x2_t v15;

  v12[0] = (int32x2_t)a2;
  v7 = (int32x2_t *)std::__tree<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::__map_value_compare<int,std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>,std::less<int>,true>,std::allocator<std::__value_type<int,fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(a5, a2, (uint64_t)&std::piecewise_construct, v12);
  if (v7[5].i32[0] == -1)
  {
    fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(v12, a2);
    v7[5].i32[0] = v12[0].i32[0];
    v7[6] = v12[1];
    if (&v7[5] != v12)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v7[7], (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
    v8 = v15;
    v9 = __p;
    v7[10] = v15;
    if (v9)
    {
      v14 = v9;
      operator delete(v9);
      v8 = v7[10];
    }
    *(_BYTE *)(*(_QWORD *)&v8 + 8) = 0;
  }
  v10 = (uint64_t *)v7[10];
  *v10 = (uint64_t)std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> const&>((uint64_t)v10, *v10, a4);
  return 1;
}

void sub_1ADC8F0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::NormArc(uint64_t a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  int32x2_t *v5;
  uint64_t *v6;
  int32x2_t *v7;
  float v8;
  float v9;
  float v10;
  float v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *i;
  float v16;
  float v17;
  _QWORD *v19;
  _BOOL4 v20;
  double v21;
  uint64_t **v22;
  int32x2_t v24;
  void *__p;
  _BYTE *v26;
  uint64_t v27;

  v3 = *(uint64_t ***)(a2 + 40);
  std::forward_list<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::sort[abi:ne180100](v3);
  v22 = v3;
  v4 = *v3;
  if (!v4)
    return;
  v5 = (int32x2_t *)(a2 + 8);
  v6 = v4;
  do
  {
    fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()((float *)(a2 + 8), (float *)v6 + 4, (uint64_t)&v24);
    *v5 = v24;
    if (v5 != &v24)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 16), (char *)__p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    if (v4 == v6 || *((_DWORD *)v6 + 2) != *((_DWORD *)v4 + 2))
    {
      v13 = *v6;
      v4 = v6;
      goto LABEL_21;
    }
    v9 = *((float *)v4 + 4);
    v8 = *((float *)v4 + 5);
    v7 = (int32x2_t *)(v4 + 2);
    v10 = *((float *)v6 + 4);
    v11 = *((float *)v6 + 5);
    if ((float)(v9 + v8) >= (float)(v10 + v11))
    {
      if ((float)(v9 + v8) > (float)(v10 + v11))
        goto LABEL_13;
      if (v9 >= v10)
      {
        v12 = v4 + 2;
        if (v9 <= v10)
          goto LABEL_14;
LABEL_13:
        v8 = *((float *)v6 + 5);
        v9 = *((float *)v6 + 4);
        v12 = v6 + 2;
        goto LABEL_14;
      }
    }
    v12 = v4 + 2;
LABEL_14:
    v24 = (int32x2_t)__PAIR64__(LODWORD(v8), LODWORD(v9));
    v26 = 0;
    v27 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)v12[1], v12[2], (v12[2] - v12[1]) >> 2);
    *v7 = v24;
    if (v7 != &v24)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v4 + 24, (char *)__p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
    if (!fst::LatticeWeightTpl<float>::Member((float *)v4 + 4))
      *(_QWORD *)(a1 + 8) |= 4uLL;
    v13 = *v6;
    v14 = (_QWORD *)*v4;
    *v4 = *(_QWORD *)*v4;
    std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__delete_node[abi:ne180100]<>((int)v22, v14);
LABEL_21:
    v6 = (uint64_t *)v13;
  }
  while (v13);
  for (i = *v22; i; i = (uint64_t *)*i)
  {
    v16 = *((float *)i + 4) - *(float *)(a2 + 8);
    v17 = *((float *)i + 5) - *(float *)(a2 + 12);
    if (v16 == -INFINITY || v17 == -INFINITY)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"LatticeWeightTpl::Divide, NaN or invalid number produced. ", 58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"[dividing by zero?]  Returning zero.", 36);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v24);
      }
      v16 = INFINITY;
      v17 = INFINITY;
    }
    else
    {
      v20 = v16 == INFINITY;
      if (v17 == INFINITY)
        v20 = 1;
      if (v20)
      {
        v16 = INFINITY;
        v17 = INFINITY;
      }
    }
    *((float *)i + 4) = v16;
    *((float *)i + 5) = v17;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 24, 0, 0, 0);
    LODWORD(v21) = *(_DWORD *)(a1 + 144);
    fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Quantize((uint64_t)(i + 2), &v24, v21);
    i[2] = (uint64_t)v24;
    if (i + 2 != (uint64_t *)&v24)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)i + 24, (char *)__p, (uint64_t)v26, (v26 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v26 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADC8F3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t *fst::DeterminizeArc<fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::DeterminizeArc(int32x2_t *a1, __int32 *a2)
{
  uint64_t v3;

  a1->i32[0] = *a2;
  a1[1] = vdup_n_s32(0x7F800000u);
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = 0;
  v3 = operator new();
  *(_QWORD *)v3 = 0;
  *(_BYTE *)(v3 + 8) = -1;
  a1[5] = (int32x2_t)v3;
  return a1;
}

void sub_1ADC8F488(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 24) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

_DWORD *std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::__create_node[abi:ne180100]<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;

  v5 = operator new(0x30uLL);
  *(_QWORD *)v5 = a2;
  v5[2] = *(_DWORD *)a3;
  *((_QWORD *)v5 + 2) = *(_QWORD *)(a3 + 8);
  *((_QWORD *)v5 + 4) = 0;
  *((_QWORD *)v5 + 5) = 0;
  *((_QWORD *)v5 + 3) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v5 + 3, *(const void **)(a3 + 16), *(_QWORD *)(a3 + 24), (uint64_t)(*(_QWORD *)(a3 + 24) - *(_QWORD *)(a3 + 16)) >> 2);
  return v5;
}

void sub_1ADC8F50C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::operator()@<X0>(float *a1@<X1>, float *a2@<X2>, uint64_t a3@<X8>)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  BOOL v8;

  v4 = *a1;
  v3 = a1[1];
  v5 = *a2;
  v6 = *a1 + v3;
  v7 = *a2 + a2[1];
  if (v6 >= v7)
  {
    if (v6 > v7 || (v4 >= v5 ? (v8 = v4 <= v5) : (v8 = 1), !v8))
    {
      v3 = a2[1];
      v4 = *a2;
      a1 = a2;
    }
  }
  *(float *)a3 = v4;
  *(float *)(a3 + 4) = v3;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a3 + 8), *((const void **)a1 + 1), *((_QWORD *)a1 + 2), (uint64_t)(*((_QWORD *)a1 + 2) - *((_QWORD *)a1 + 1)) >> 2);
}

void fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>::Quantize(uint64_t a1@<X0>, int32x2_t *a2@<X8>, double a3@<D0>)
{
  float v4;
  int32x2_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  v4 = vaddv_f32(*(float32x2_t *)a1);
  v5 = (int32x2_t)0x7F0000007FLL;
  if (v4 != -INFINITY)
  {
    if (v4 == INFINITY)
      v5 = vdup_n_s32(0x7F800000u);
    else
      v5 = (int32x2_t)vmul_n_f32(vrndm_f32(vadd_f32(vdiv_f32(*(float32x2_t *)a1, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0)), (float32x2_t)0x3F0000003F000000)), *(float *)&a3);
  }
  __p = 0;
  v7 = 0;
  v8 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 16), (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2);
  *a2 = v5;
  a2[2] = 0;
  a2[3] = 0;
  a2[1] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&a2[1], __p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
}

void sub_1ADC8F654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::FindState(uint64_t a1, float **a2)
{
  uint64_t State;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v10;
  void *__p;
  void *v12;

  State = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::FindState(*(_QWORD **)(a1 + 184), (uint64_t)a2);
  v5 = State;
  if (*(_QWORD *)(a1 + 152))
  {
    v6 = *(uint64_t **)(a1 + 160);
    if ((int)State >= (unint64_t)((v6[1] - *v6) >> 5))
    {
      fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(a1, a2, (uint64_t)&v10);
      v7 = v6[1];
      if (v7 >= v6[2])
      {
        v8 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(v6, (uint64_t)&v10);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)v6, (uint64_t)&v10);
        v8 = v7 + 32;
      }
      v6[1] = v8;
      if (__p)
      {
        v12 = __p;
        operator delete(__p);
      }
    }
  }
  return v5;
}

void sub_1ADC8F720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::FindState(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Id;
  uint64_t v4;
  int v6[2];

  *(_QWORD *)v6 = a2;
  v2 = (a1[12] - a1[11]) >> 3;
  Id = fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(a1 + 1, v6, 1);
  if ((_DWORD)Id != (_DWORD)v2)
  {
    v4 = *(_QWORD *)v6;
    if (*(_QWORD *)v6)
    {
      std::__forward_list_base<fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::clear(*(_QWORD ***)v6);
      MEMORY[0x1AF44D190](v4, 0x1020C405F07FB98);
    }
  }
  return Id;
}

void fst::DeterminizeFsaImpl<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::DefaultCommonDivisor<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>,fst::DefaultDeterminizeFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>>::ComputeDistance(uint64_t a1@<X0>, float **a2@<X1>, uint64_t a3@<X8>)
{
  float *i;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  _BYTE *v16;
  BOOL v17;
  _BYTE v18[32];
  unint64_t v19;
  void *__p;
  _BYTE *v21;
  uint64_t v22;
  int32x2_t v23;
  void *v24;
  void *v25;
  uint64_t v26;

  *(int32x2_t *)a3 = vdup_n_s32(0x7F800000u);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  for (i = *a2; i; i = *(float **)i)
  {
    v6 = *((int *)i + 2);
    v7 = **(_QWORD **)(a1 + 152);
    if (v6 >= (*(_QWORD *)(*(_QWORD *)(a1 + 152) + 8) - v7) >> 5)
    {
      v23 = vdup_n_s32(0x7F800000u);
      v25 = 0;
      v26 = 0;
      v24 = 0;
      v9 = INFINITY;
      v10 = INFINITY;
    }
    else
    {
      v8 = v7 + 32 * v6;
      v23 = *(int32x2_t *)v8;
      v25 = 0;
      v26 = 0;
      v24 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v24, *(const void **)(v8 + 8), *(_QWORD *)(v8 + 16), (uint64_t)(*(_QWORD *)(v8 + 16) - *(_QWORD *)(v8 + 8)) >> 2);
      v9 = *(float *)&v23.i32[1];
      v10 = *(float *)v23.i32;
    }
    v11 = i[4] + v10;
    v12 = i[5] + v9;
    memset(&v18[8], 0, 24);
    v14 = *(float *)a3;
    v13 = *(float *)(a3 + 4);
    v15 = *(float *)a3 + v13;
    if (v15 >= (float)(v11 + v12))
    {
      if (v15 > (float)(v11 + v12) || (v14 >= v11 ? (v17 = v14 <= v11) : (v17 = 1), v16 = (_BYTE *)a3, !v17))
      {
        v16 = v18;
        v13 = v12;
        v14 = v11;
      }
    }
    else
    {
      v16 = (_BYTE *)a3;
    }
    v19 = __PAIR64__(LODWORD(v13), LODWORD(v14));
    v21 = 0;
    v22 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v16 + 1), *((_QWORD *)v16 + 2), (uint64_t)(*((_QWORD *)v16 + 2) - *((_QWORD *)v16 + 1)) >> 2);
    *(_QWORD *)a3 = v19;
    if (&v19 != (unint64_t *)a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a3 + 8), (char *)__p, (uint64_t)v21, (v21 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v21 = __p;
      operator delete(__p);
    }
    if (v24)
    {
      v25 = v24;
      operator delete(v24);
    }
  }
}

void sub_1ADC8F950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  uint64_t v19;
  void **v20;
  void *v22;

  v22 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v19 + 16) = v22;
    operator delete(v22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::FindId(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;

  a1[13] = a2;
  v6 = (uint64_t)(a1 + 3);
  v7 = std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(a1 + 3, (int *)&fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::kCurrentKey);
  if (v7)
    return *((unsigned int *)v7 + 4);
  if (!a3)
    return 0xFFFFFFFFLL;
  v9 = a1[10];
  v10 = (_QWORD *)a1[11];
  v11 = ((uint64_t)v10 - v9) >> 3;
  v23 = v11;
  v12 = a1[12];
  if ((unint64_t)v10 >= v12)
  {
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = v12 - v9;
    v15 = v14 >> 2;
    if (v14 >> 2 <= (unint64_t)(v11 + 1))
      v15 = v11 + 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v16 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v16 = v15;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 12), v16);
    else
      v17 = 0;
    v18 = &v17[8 * v11];
    v19 = &v17[8 * v16];
    *(_QWORD *)v18 = *a2;
    v13 = v18 + 8;
    v21 = (char *)a1[10];
    v20 = (char *)a1[11];
    if (v20 != v21)
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *((_QWORD *)v18 - 1) = v22;
        v18 -= 8;
      }
      while (v20 != v21);
      v20 = (char *)a1[10];
    }
    a1[10] = v18;
    a1[11] = v13;
    a1[12] = v19;
    if (v20)
      operator delete(v20);
  }
  else
  {
    *v10 = *a2;
    v13 = v10 + 1;
  }
  a1[11] = v13;
  std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(v6, (int *)&v23, &v23);
  return v23;
}

uint64_t *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::find<int>(_QWORD *a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  unint64_t v7;
  int8x8_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t **v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;

  v4 = *a2;
  if ((int)v4 < -1)
  {
    v7 = 0;
  }
  else
  {
    v5 = a1[4];
    if ((_DWORD)v4 == -1)
      v6 = *(uint64_t ****)(v5 + 104);
    else
      v6 = (uint64_t ***)(*(_QWORD *)(v5 + 80) + 8 * v4);
    v7 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v5, *v6);
  }
  v8 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v8)
    return 0;
  v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    v11 = v7;
    if (v7 >= *(_QWORD *)&v8)
      v11 = v7 % *(_QWORD *)&v8;
  }
  else
  {
    v11 = (*(_QWORD *)&v8 - 1) & v7;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12)
    return 0;
  v13 = *v12;
  if (*v12)
  {
    v14 = a1 + 6;
    do
    {
      v15 = v13[1];
      if (v15 == v7)
      {
        if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(v14, *((_DWORD *)v13 + 4), *a2) & 1) != 0)return v13;
      }
      else
      {
        if (v10 > 1)
        {
          if (v15 >= *(_QWORD *)&v8)
            v15 %= *(_QWORD *)&v8;
        }
        else
        {
          v15 &= *(_QWORD *)&v8 - 1;
        }
        if (v15 != v11)
          return 0;
      }
      v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()(uint64_t *a1, int a2, int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v6;

  if (a2 < -1 || a3 < -1)
    return a2 == a3;
  v3 = *a1;
  if (a2 == -1)
    v4 = *(uint64_t **)(v3 + 104);
  else
    v4 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a2);
  if (a3 == -1)
    v6 = *(uint64_t **)(v3 + 104);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v3 + 80) + 8 * a3);
  return fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::operator==(*v4, *v6);
}

uint64_t fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  uint64_t *i;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;

  result = *((char *)a2 + 8);
  for (i = *a2; i; i = (uint64_t *)*i)
  {
    v4 = *((_DWORD *)i + 4);
    v5 = *((_DWORD *)i + 5);
    v6 = __CFADD__(v5, v4);
    v7 = (v5 + v4);
    if (v6)
      v8 = 0x100000000;
    else
      v8 = 0;
    result ^= (2 * result) ^ (32 * *((int *)i + 2)) ^ ((unint64_t)*((int *)i + 2) >> 59) ^ (v8 | v7);
  }
  return result;
}

uint64_t fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::operator==(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (*(unsigned __int8 *)(a2 + 8) != *(unsigned __int8 *)(a1 + 8))
    return 0;
  v2 = (_QWORD *)a2;
  v3 = (_QWORD *)a1;
  while (1)
  {
    v2 = (_QWORD *)*v2;
    v3 = (_QWORD *)*v3;
    if (!v2 || v3 == 0)
      break;
    if (!fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator==((uint64_t)(v2 + 1), (uint64_t)(v3 + 1)))return 0;
  }
  return (v2 != 0) ^ (v3 == 0);
}

BOOL fst::DeterminizeElement<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::operator==(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(float *)(a1 + 8) == *(float *)(a2 + 8)
      && *(float *)(a1 + 12) == *(float *)(a2 + 12);
}

void *std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__emplace_unique_key_args<int,int const&>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ***v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;

  v7 = *a2;
  if ((int)v7 < -1)
  {
    v10 = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 32);
    if ((_DWORD)v7 == -1)
      v9 = *(uint64_t ****)(v8 + 104);
    else
      v9 = (uint64_t ***)(*(_QWORD *)(v8 + 80) + 8 * v7);
    v10 = fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey::operator()(v8, *v9);
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v3 = v10;
      if (v10 >= v11)
        v3 = v10 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual::operator()((uint64_t *)(a1 + 48), *((_DWORD *)i + 4), *a2) & 1) != 0)return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  *((_DWORD *)i + 4) = *a3;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 40);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<int,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashFunc,fst::CompactHashBiTable<int,fst::DeterminizeStateTuple<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>> *,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleKey,fst::DefaultDeterminizeStateTable<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::IntegerFilterState<signed char>>::StateTupleEqual,(fst::HSType)0>::HashEqual,std::allocator<int>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v3 = v10 % v11;
      else
        v3 = v10;
    }
    else
    {
      v3 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD *)a1;
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v24)
  {
    *(_QWORD *)i = *v24;
LABEL_44:
    *v24 = i;
    goto LABEL_45;
  }
  *(_QWORD *)i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v23 + 8 * v3) = a1 + 16;
  if (*(_QWORD *)i)
  {
    v25 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11)
        v25 %= v11;
    }
    else
    {
      v25 &= v11 - 1;
    }
    v24 = (_QWORD *)(*(_QWORD *)a1 + 8 * v25);
    goto LABEL_44;
  }
LABEL_45:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADC8FFE0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

char *fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  char *MutableState;
  char *v4;
  int v5;
  unint64_t v6;

  MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(a1, a2);
  v4 = MutableState;
  if (*(_BYTE *)(a1 + 88))
  {
    v5 = *((_DWORD *)MutableState + 18);
    if ((v5 & 4) == 0)
    {
      *((_DWORD *)MutableState + 18) = v5 | 4;
      v6 = *((_QWORD *)MutableState + 7) - *((_QWORD *)MutableState + 6) + *(_QWORD *)(a1 + 112) + 80;
      *(_QWORD *)(a1 + 112) = v6;
      *(_BYTE *)(a1 + 104) = 1;
      if (v6 > *(_QWORD *)(a1 + 96))
        fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, MutableState, 0, 0.666);
    }
  }
  return v4;
}

uint64_t fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::PushArc(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t result;

  v3 = a1 + 6;
  v4 = a1[7];
  if (v4 >= a1[8])
  {
    result = std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__push_back_slow_path<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>(v3, a2);
  }
  else
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::__construct_one_at_end[abi:ne180100]<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>> const&>((uint64_t)v3, a2);
    result = v4 + 48;
  }
  a1[7] = result;
  return result;
}

char *fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(uint64_t a1, int a2)
{
  int v3;
  char *result;
  uint64_t v5;
  char *MutableState;

  v3 = *(_DWORD *)(a1 + 76);
  if (v3 == a2)
    return *(char **)(a1 + 80);
  if (!*(_BYTE *)(a1 + 72))
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, a2 + 1);
  if (v3 == -1)
  {
    *(_DWORD *)(a1 + 76) = a2;
    MutableState = fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, 0);
    *(_QWORD *)(a1 + 80) = MutableState;
    *((_DWORD *)MutableState + 18) |= 4u;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::reserve((uint64_t *)MutableState + 6, 0x80uLL);
    return *(char **)(a1 + 80);
  }
  v5 = *(_QWORD *)(a1 + 80);
  if (*(_DWORD *)(v5 + 76))
  {
    *(_DWORD *)(v5 + 72) &= ~4u;
    *(_BYTE *)(a1 + 72) = 0;
    return fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::GetMutableState(a1, a2 + 1);
  }
  *(_DWORD *)(a1 + 76) = a2;
  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::Reset(v5);
  result = *(char **)(a1 + 80);
  *((_DWORD *)result + 18) |= 4u;
  return result;
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(uint64_t a1, char *a2, char a3, float a4)
{
  fst *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  char *MutableState;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  BOOL v26;
  fst *v27;
  _QWORD *v28;
  fst *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  void *v37[2];
  char v38;
  char v39;
  char v40;
  void *__p[2];
  char v42;

  if (*(_BYTE *)(a1 + 104))
  {
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
      v8 = fst::LogMessage::LogMessage((fst *)v37, (uint64_t)__p);
      v9 = (_QWORD *)fst::cerr(v8);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"GCCacheStore: Enter GC: object = ", 33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"(", 1);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"), free recently cached = ", 26);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)", cache size = ", 15);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", cache frac = ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", cache limit = ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)v37);
      if (v42 < 0)
        operator delete(__p[0]);
    }
    v16 = (unint64_t)(float)((float)*(unint64_t *)(a1 + 96) * a4);
    v17 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v17;
    while (v17 != a1 + 32)
    {
      v18 = *(_DWORD *)(v17 + 16);
      if (v18)
        v19 = v18 - 1;
      else
        v19 = *(_DWORD *)(a1 + 76);
      MutableState = fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>::GetMutableState(a1, v19);
      v21 = *(_QWORD *)(a1 + 112);
      if (v21 > v16 && !*((_DWORD *)MutableState + 19))
      {
        if ((a3 & 1) != 0)
        {
          if (MutableState != a2)
          {
            v22 = *((_DWORD *)MutableState + 18);
LABEL_19:
            if ((v22 & 4) != 0)
            {
              v23 = *((_QWORD *)MutableState + 7) - *((_QWORD *)MutableState + 6) + 80;
              FstCheck(v23 <= v21, "(size) <= (cache_size_)", "../libquasar/libkaldi/tools/openfst/src/include/fst/cache.h");
              *(_QWORD *)(a1 + 112) -= v23;
            }
            fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::Delete((_QWORD *)a1);
            v17 = *(_QWORD *)(a1 + 56);
            continue;
          }
        }
        else
        {
          v22 = *((_DWORD *)MutableState + 18);
          if ((v22 & 8) == 0 && MutableState != a2)
            goto LABEL_19;
        }
      }
      *((_DWORD *)MutableState + 18) &= ~8u;
      v17 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      *(_QWORD *)(a1 + 56) = v17;
    }
    if ((a3 & 1) != 0 || *(_QWORD *)(a1 + 112) <= v16)
    {
      v24 = *(_QWORD *)(a1 + 112);
      if (v16)
      {
        if (v24 > v16)
        {
          v25 = *(_QWORD *)(a1 + 96);
          do
          {
            v25 *= 2;
            v26 = v24 > 2 * v16;
            v16 *= 2;
          }
          while (v26);
          *(_QWORD *)(a1 + 96) = v25;
        }
      }
      else if (v24)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v27 = fst::LogMessage::LogMessage((fst *)&v40, (uint64_t)__p);
        v28 = (_QWORD *)fst::cerr(v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"GCCacheStore:GC: Unable to free all cached states", 49);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v40);
        if (v42 < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, a2, 1, a4);
    }
    if (FLAGS_v >= 2)
    {
      std::string::basic_string[abi:ne180100]<0>(v37, "INFO");
      v29 = fst::LogMessage::LogMessage((fst *)&v39, (uint64_t)v37);
      v30 = (_QWORD *)fst::cerr(v29);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"GCCacheStore: Exit GC: object = ", 32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"(", 1);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"), free recently cached = ", 26);
      v33 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)", cache size = ", 15);
      v34 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", cache frac = ", 15);
      v35 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", cache limit = ", 16);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"\n", 1);
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v39);
      if (v38 < 0)
        operator delete(v37[0]);
    }
  }
}

void sub_1ADC90554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a19);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::SetArcs(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetArcs((_QWORD *)a2);
  if (*(_BYTE *)(a1 + 104) && (*(_BYTE *)(a2 + 72) & 4) != 0)
  {
    v4 = *(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48) + *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v4;
    if (v4 > *(_QWORD *)(a1 + 96))
      fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GC(a1, (char *)a2, 0, 0.666);
  }
}

_QWORD *fst::DeterminizeFstImplBase<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::Final@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v7;
  void *__p;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;

  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasFinal(a1, a2) & 1) == 0)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(&v11, a1, a2);
    v7 = v11;
    v9 = 0;
    v10 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v12, (uint64_t)v13, (v13 - (_BYTE *)v12) >> 2);
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(a1, a2, &v7);
    if (__p)
    {
      v9 = __p;
      operator delete(__p);
    }
    if (v12)
    {
      v13 = v12;
      operator delete(v12);
    }
  }
  return fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final(a1, a2, a3);
}

void sub_1ADC906F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::SetFinal(uint64_t a1, int a2, uint64_t *a3)
{
  char *MutableState;
  uint64_t v5;
  void *__p;
  _BYTE *v7;
  uint64_t v8;

  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(_QWORD *)(a1 + 120), a2);
  v5 = *a3;
  v7 = 0;
  v8 = 0;
  __p = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, (const void *)a3[1], a3[2], (a3[2] - a3[1]) >> 2);
  *(_QWORD *)MutableState = v5;
  if (MutableState != (char *)&v5)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(MutableState + 8, (char *)__p, (uint64_t)v7, (v7 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v7 = __p;
    operator delete(__p);
  }
  *((_DWORD *)MutableState + 18) |= 9u;
}

void sub_1ADC907CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Final@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;

  v5 = *(_QWORD *)(a1 + 120);
  if (*(_DWORD *)(v5 + 76) == a2)
    v6 = (uint64_t *)(v5 + 80);
  else
    v6 = (uint64_t *)(*(_QWORD *)(v5 + 8) + 8 * (a2 + 1));
  v7 = *v6;
  *a3 = *(_QWORD *)v7;
  a3[2] = 0;
  a3[3] = 0;
  a3[1] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a3 + 1, *(const void **)(v7 + 8), *(_QWORD *)(v7 + 16), (uint64_t)(*(_QWORD *)(v7 + 16) - *(_QWORD *)(v7 + 8)) >> 2);
}

_QWORD *fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>::DeterminizeFst(_QWORD *a1, uint64_t a2, int a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;

  *a1 = &unk_1E5D1DD78;
  a1[1] = 0;
  v4 = *(_DWORD **)(a2 + 8);
  if (a3)
  {
    v4 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v4 + 40))(*(_QWORD *)(a2 + 8));
    v5 = (_DWORD *)a1[1];
    if (v5)
    {
      v6 = v5[14] - 1;
      v5[14] = v6;
      if (!v6)
        (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  else
  {
    ++v4[14];
  }
  a1[1] = v4;
  return a1;
}

void sub_1ADC908BC(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _DWORD *v3;

  *v1 = &unk_1E5D27478;
  v3 = (_DWORD *)v1[1];
  if (v3)
    fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::DeterminizeFst(v3);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Next_(uint64_t result)
{
  ++*(_DWORD *)(result + 24);
  return result;
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 24) = 0;
  return result;
}

void fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::~CacheStateIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::CacheStateIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Done(uint64_t a1)
{
  int v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int *v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v19;
  unint64_t v20;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 16);
  if (v2 < *(_DWORD *)(v3 + 68))
    return 0;
  v5 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v3);
  if ((int)v5 >= *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68))
    return 1;
  v6 = v5;
  do
  {
    fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ArcIterator(&v19, *(_QWORD *)(a1 + 8), v6);
    v7 = v20;
    v8 = *((_QWORD *)v19 + 6);
    v9 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v19 + 7) - v8) >> 4);
    v10 = *(_QWORD *)(a1 + 16);
    if (v20 < v9)
    {
      v11 = *(_DWORD *)(v10 + 68);
      v12 = (int *)(v8 + 48 * v20 + 40);
      do
      {
        v14 = *v12;
        v12 += 12;
        v13 = v14;
        if (v11 <= v14)
        {
          v11 = v13 + 1;
          *(_DWORD *)(v10 + 68) = v13 + 1;
        }
        ++v7;
      }
      while (v9 != v7);
      v20 = v9;
    }
    fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::SetExpandedState(v10, v6);
    v15 = *(_DWORD *)(a1 + 24);
    v16 = *(_QWORD *)(a1 + 16);
    v17 = *(_DWORD *)(v16 + 68);
    --*((_DWORD *)v19 + 19);
    v4 = v15 >= v17;
    if (v15 < v17)
      break;
    v6 = fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::MinUnexpandedState(v16);
  }
  while ((int)v6 < *(_DWORD *)(*(_QWORD *)(a1 + 16) + 68));
  return v4;
}

void sub_1ADC90A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  --*(_DWORD *)(a9 + 76);
  _Unwind_Resume(a1);
}

char **fst::ArcIterator<fst::DeterminizeFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::ArcIterator(char **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *MutableState;

  v6 = *(_QWORD *)(a2 + 8);
  a1[1] = 0;
  MutableState = fst::GCCacheStore<fst::FirstCacheStore<fst::VectorCacheStore<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>>>::GetMutableState(*(_QWORD *)(v6 + 120), a3);
  *a1 = MutableState;
  ++*((_DWORD *)MutableState + 19);
  if ((fst::CacheBaseImpl<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::DefaultCacheStore<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::HasArcs(*(_QWORD *)(a2 + 8), a3) & 1) == 0)(*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8), a3);
  return a1;
}

void sub_1ADC90AEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  --*(_DWORD *)(*(_QWORD *)v1 + 76);
  _Unwind_Resume(a1);
}

_QWORD *fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(uint64_t a1, uint64_t *a2, char a3, float a4)
{
  float *v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *result;
  int v14;
  void ***v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void ***v19;
  int v20;
  float v21;
  char v22;
  float *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  void **v28[9];

  if ((a3 & 1) == 0)
  {
    fst::AutoQueue<int>::AutoQueue<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)v28, a1, (uint64_t)a2);
    v15 = v28;
    HIDWORD(__p) = -1;
    BYTE4(v17) = 0;
    *(float *)&v17 = a4;
    fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, a2, (uint64_t)&v15);
    return fst::AutoQueue<int>::~AutoQueue(v28);
  }
  fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::VectorFst(&v26);
  fst::Reverse<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>(a1, (uint64_t *)&v26, 1);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>((uint64_t)v28, (uint64_t)&v26, (uint64_t)&v23);
  v19 = v28;
  v20 = -1;
  v22 = 0;
  v21 = a4;
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AutoQueue<int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>((uint64_t)&v26, (uint64_t *)&v23, (uint64_t)&v19);
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__clear[abi:ne180100](a2);
  v7 = v23;
  v8 = v24 - (_QWORD)v23;
  if (v24 - (_QWORD)v23 == 32)
  {
    if (!fst::LatticeWeightTpl<float>::Member(v23))
    {
      v15 = (void ***)vdup_n_s32(0x7FC00000u);
      v17 = 0;
      v18 = 0;
      __p = 0;
      std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::resize(a2, 1uLL, (uint64_t)&v15);
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
      }
      goto LABEL_16;
    }
    v7 = v23;
    v8 = v24 - (_QWORD)v23;
  }
  v9 = (a2[1] - *a2) >> 5;
  if (v9 < (v8 >> 5) - 1)
  {
    do
    {
      v10 = &v7[8 * v9];
      v15 = (void ***)*((_QWORD *)v10 + 4);
      v17 = 0;
      v18 = 0;
      __p = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *((const void **)v10 + 5), *((_QWORD *)v10 + 6), (uint64_t)(*((_QWORD *)v10 + 6) - *((_QWORD *)v10 + 5)) >> 2);
      v11 = a2[1];
      if (v11 >= a2[2])
      {
        v12 = std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__push_back_slow_path<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>(a2, (uint64_t)&v15);
      }
      else
      {
        std::vector<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>::__construct_one_at_end[abi:ne180100]<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>((uint64_t)a2, (uint64_t)&v15);
        v12 = v11 + 32;
      }
      a2[1] = v12;
      if (__p)
      {
        v17 = __p;
        operator delete(__p);
        v12 = a2[1];
      }
      v9 = (v12 - *a2) >> 5;
      v7 = v23;
    }
    while (v9 < ((v24 - (uint64_t)v23) >> 5) - 1);
  }
LABEL_16:
  fst::AutoQueue<int>::~AutoQueue(v28);
  v28[0] = (void **)&v23;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](v28);
  v26 = &unk_1E5D24F40;
  result = (_QWORD *)v27;
  if (v27)
  {
    v14 = *(_DWORD *)(v27 + 56) - 1;
    *(_DWORD *)(v27 + 56) = v14;
    if (!v14)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_1ADC90D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,char *a22)
{
  uint64_t v23;
  int v24;

  if (__p)
    operator delete(__p);
  fst::AutoQueue<int>::~AutoQueue(&a22);
  a22 = &a17;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  a20 = &unk_1E5D24F40;
  v23 = a21;
  if (a21)
  {
    v24 = *(_DWORD *)(a21 + 56) - 1;
    *(_DWORD *)(a21 + 56) = v24;
    if (!v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::AutoQueue<int>::AutoQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int *v9;
  int *v10;
  int *v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  uint64_t v28;
  fst *v29;
  _QWORD *v30;
  uint64_t v31;
  fst *v32;
  _QWORD *v33;
  uint64_t v34;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  fst *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  fst *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  fst *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  fst *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  void *__p[2];
  char v59;
  char v60;
  __int16 v61;
  void *v62[3];
  uint64_t v63[2];
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;

  *(_DWORD *)(a1 + 8) = 7;
  *(_BYTE *)(a1 + 12) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  v6 = (_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = &unk_1E5D239D8;
  v7 = (_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a2 + 64))(a2, 0x4E00000000, 0);
  if ((v8 & 0x4000000000) != 0 || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) == -1)
  {
    v21 = operator new();
    *(_DWORD *)(v21 + 8) = 5;
    *(_BYTE *)(v21 + 12) = 0;
    *(_QWORD *)v21 = &unk_1E5D1EEB0;
    *(_QWORD *)(v21 + 16) = 0xFFFFFFFF00000000;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 40) = 0;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(a1 + 16) = v21;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v22 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"AutoQueue: using state-order discipline", 39);
  }
  else if ((v8 & 0x800000000) != 0)
  {
    v25 = operator new();
    fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(v25, a2);
    *(_QWORD *)(a1 + 16) = v25;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v26 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"AutoQueue: using top-order discipline", 37);
  }
  else
  {
    if ((v8 & 0x200000000) == 0)
    {
      v66 = 0;
      v63[0] = (uint64_t)v7;
      v63[1] = 0;
      v64 = 0;
      v65 = &v66;
      fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::SccVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(a2, v63, 0);
      v9 = *(int **)(a1 + 48);
      v10 = *(int **)(a1 + 56);
      if (v9 != v10)
      {
        v11 = v9 + 1;
        if (v9 + 1 != v10)
        {
          v12 = *v9;
          v13 = v9 + 1;
          do
          {
            v15 = *v13++;
            v14 = v15;
            v16 = v12 < v15;
            if (v12 <= v15)
              v12 = v14;
            if (v16)
              v9 = v11;
            v11 = v13;
          }
          while (v13 != v10);
        }
      }
      v17 = *v9;
      v18 = *v9 + 1;
      std::vector<fst::QueueType>::vector(v62, v18);
      if (a3)
      {
        v19 = operator new();
        v20 = (_QWORD *)operator new();
        *v20 = a3;
      }
      else
      {
        v19 = 0;
        v20 = 0;
      }
      v61 = 0;
      fst::AutoQueue<int>::SccQueueType<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::NaturalLess<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>>>(a2, v7, (uint64_t)v62, v19, &v61, (_BYTE *)&v61 + 1);
      if (HIBYTE(v61))
      {
        v31 = operator new();
        *(_DWORD *)(v31 + 8) = 2;
        *(_BYTE *)(v31 + 12) = 0;
        *(_OWORD *)(v31 + 16) = 0u;
        *(_OWORD *)(v31 + 32) = 0u;
        *(_OWORD *)(v31 + 48) = 0u;
        *(_QWORD *)v31 = &unk_1E5D27B60;
        *(_QWORD *)(a1 + 16) = v31;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v32 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v33 = (_QWORD *)fst::cerr(v32);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"AutoQueue: using LIFO discipline", 32);
LABEL_30:
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
LABEL_52:
        if (v20)
          MEMORY[0x1AF44D190](v20, 0x60C40B37CB4BBLL);
        if (v19)
          MEMORY[0x1AF44D190](v19, 0xC400A2AC0F1);
        v24 = v62[0];
        if (v62[0])
        {
          v62[1] = v62[0];
          goto LABEL_58;
        }
        return a1;
      }
      if ((_BYTE)v61)
      {
        v34 = operator new();
        fst::TopOrderQueue<int>::TopOrderQueue(v34, (uint64_t)v7);
        *(_QWORD *)(a1 + 16) = v34;
        if (FLAGS_v < 2)
          goto LABEL_52;
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v35 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"AutoQueue: using top-order discipline", 37);
        goto LABEL_30;
      }
      if (FLAGS_v >= 2)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
        v37 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"AutoQueue: using SCC meta-discipline", 36);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
        if (v59 < 0)
          operator delete(__p[0]);
      }
      std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)v6, v18);
      if (v17 < 0)
      {
LABEL_51:
        v56 = operator new();
        *(_DWORD *)(v56 + 8) = 6;
        *(_BYTE *)(v56 + 12) = 0;
        *(_QWORD *)v56 = &unk_1E5D22CF0;
        *(_QWORD *)(v56 + 16) = v6;
        *(_QWORD *)(v56 + 24) = v7;
        *(_QWORD *)(v56 + 32) = 0xFFFFFFFF00000000;
        *(_QWORD *)(v56 + 48) = 0;
        *(_QWORD *)(v56 + 56) = 0;
        *(_QWORD *)(v56 + 40) = 0;
        *(_QWORD *)(a1 + 16) = v56;
        goto LABEL_52;
      }
      v39 = 0;
      while (1)
      {
        v40 = *((_DWORD *)v62[0] + v39);
        if (v40 == 3)
        {
          v44 = operator new();
          *(_DWORD *)(v44 + 8) = 3;
          *(_BYTE *)(v44 + 12) = 0;
          *(_QWORD *)v44 = &unk_1E5D21800;
          *(_OWORD *)(v44 + 16) = *(_OWORD *)v20;
          *(_OWORD *)(v44 + 32) = 0u;
          *(_OWORD *)(v44 + 48) = 0u;
          *(_OWORD *)(v44 + 64) = 0u;
          *(_OWORD *)(v44 + 80) = 0u;
          *(_OWORD *)(v44 + 92) = 0u;
          *(_QWORD *)(v44 + 120) = 0;
          *(_QWORD *)(v44 + 128) = 0;
          *(_QWORD *)(v44 + 112) = 0;
          *(_QWORD *)(*v6 + 8 * v39) = v44;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v45 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v46 = (_QWORD *)fst::cerr(v45);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"AutoQueue: SCC #", 16);
            v47 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": using shortest-first discipline", 33);
            goto LABEL_48;
          }
        }
        else if (v40 == 2)
        {
          v48 = operator new();
          *(_DWORD *)(v48 + 8) = 2;
          *(_BYTE *)(v48 + 12) = 0;
          *(_OWORD *)(v48 + 16) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          *(_OWORD *)(v48 + 48) = 0u;
          *(_QWORD *)v48 = &unk_1E5D27B60;
          *(_QWORD *)(*v6 + 8 * v39) = v48;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v49 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v50 = (_QWORD *)fst::cerr(v49);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"AutoQueue: SCC #", 16);
            v51 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)": using LIFO disciplle", 22);
            goto LABEL_48;
          }
        }
        else if (v40)
        {
          v52 = operator new();
          *(_DWORD *)(v52 + 8) = 1;
          *(_BYTE *)(v52 + 12) = 0;
          *(_OWORD *)(v52 + 16) = 0u;
          *(_OWORD *)(v52 + 32) = 0u;
          *(_OWORD *)(v52 + 48) = 0u;
          *(_QWORD *)v52 = &unk_1E5D23A28;
          *(_QWORD *)(*v6 + 8 * v39) = v52;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v53 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v54 = (_QWORD *)fst::cerr(v53);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"AutoQueue: SCC #", 16);
            v55 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": using FIFO disciplle", 22);
LABEL_48:
            fst::LogMessage::~LogMessage((fst::LogMessage *)&v60);
            if (v59 < 0)
              operator delete(__p[0]);
          }
        }
        else
        {
          *(_QWORD *)(*v6 + 8 * v39) = 0;
          if (FLAGS_v >= 3)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "INFO");
            v41 = fst::LogMessage::LogMessage((fst *)&v60, (uint64_t)__p);
            v42 = (_QWORD *)fst::cerr(v41);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"AutoQueue: SCC #", 16);
            v43 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": using trivial discipline", 26);
            goto LABEL_48;
          }
        }
        if (v18 == ++v39)
          goto LABEL_51;
      }
    }
    v28 = operator new();
    *(_DWORD *)(v28 + 8) = 2;
    *(_BYTE *)(v28 + 12) = 0;
    *(_OWORD *)(v28 + 16) = 0u;
    *(_OWORD *)(v28 + 32) = 0u;
    *(_OWORD *)(v28 + 48) = 0u;
    *(_QWORD *)v28 = &unk_1E5D27B60;
    *(_QWORD *)(a1 + 16) = v28;
    if (FLAGS_v < 2)
      return a1;
    std::string::basic_string[abi:ne180100]<0>(v63, "INFO");
    v29 = fst::LogMessage::LogMessage((fst *)v62, (uint64_t)v63);
    v30 = (_QWORD *)fst::cerr(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"AutoQueue: using LIFO discipline", 32);
  }
  fst::LogMessage::~LogMessage((fst::LogMessage *)v62);
  if (SHIBYTE(v64) < 0)
  {
    v24 = (void *)v63[0];
LABEL_58:
    operator delete(v24);
  }
  return a1;
}

void sub_1ADC915D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;
  void **v29;
  void **v30;
  void *v32;
  void *v33;

  if (a16 < 0)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  v32 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 56) = v32;
    operator delete(v32);
  }
  v33 = *v29;
  if (*v29)
  {
    *(_QWORD *)(v28 + 32) = v33;
    operator delete(v33);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::TopOrderQueue<int>::TopOrderQueue<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2)
{
  std::vector<int> *v3;
  fst *v4;
  _QWORD *v5;
  void *__p[2];
  char v8;
  char v9;
  _QWORD v10[3];
  char v11;

  *(_DWORD *)(a1 + 8) = 4;
  *(_BYTE *)(a1 + 12) = 0;
  *(_QWORD *)a1 = &unk_1E5D1CC68;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = (std::vector<int> *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  v11 = 0;
  v10[0] = a1 + 24;
  v10[1] = &v11;
  fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(a2, (uint64_t)v10, 0);
  if (!v11)
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v4 = fst::LogMessage::LogMessage((fst *)&v9, (uint64_t)__p);
    v5 = (_QWORD *)fst::cerr(v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"TopOrderQueue: fst is not acyclic.", 34);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v9);
    if (v8 < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a1 + 12) = 1;
  }
  std::vector<int>::resize(v3, (uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 2, &fst::kNoStateId);
  return a1;
}

void sub_1ADC91854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  void **v19;
  void **v20;
  void *v22;
  void *v23;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  v22 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v18 + 56) = v22;
    operator delete(v22);
  }
  v23 = *v20;
  if (*v20)
  {
    *(_QWORD *)(v18 + 32) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(a1);
}

void fst::DfsVisit<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>,fst::TopOrderVisitor<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>,fst::AnyArcFilter<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  std::vector<char>::pointer begin;
  unint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v33;
  std::vector<char>::pointer end;
  char *v35;
  std::vector<char>::pointer v36;
  int64_t v37;
  int64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char v46;
  uint64_t v47;
  int v48;
  std::vector<char>::value_type v49[8];
  std::vector<char>::value_type __x[8];
  int v51;
  int v52;
  void *v53;
  _QWORD v54[6];
  _QWORD *v55;
  _OWORD v56[2];
  __int128 v57;
  std::vector<char> v58;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  *(_QWORD *)(a2 + 16) = v6;
  **(_BYTE **)(a2 + 8) = 1;
  v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  if (v48 == -1)
  {
    fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
    return;
  }
  memset(&v58, 0, sizeof(v58));
  v57 = 0u;
  memset(v56, 0, sizeof(v56));
  fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::MemoryPool(&v53, 64);
  v47 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 1, 0);
  if (v47)
    v7 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a1);
  else
    v7 = (v48 + 1);
  __x[0] = 0;
  if ((std::vector<char>::pointer)(int)v7 <= (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
  {
    if ((std::vector<char>::pointer)(int)v7 < (std::vector<char>::pointer)(v58.__end_ - v58.__begin_))
      v58.__end_ = &v58.__begin_[(int)v7];
  }
  else
  {
    std::vector<char>::__append(&v58, (int)v7 - (unint64_t)(v58.__end_ - v58.__begin_), __x);
  }
  v52 = 0;
  (*(void (**)(uint64_t, std::vector<char>::value_type *))(*(_QWORD *)a1 + 128))(a1, __x);
  if (v48 >= (int)v7)
    goto LABEL_102;
  v8 = v48;
  v46 = a3;
  do
  {
    v58.__begin_[(int)v8] = 1;
    v9 = (uint64_t)v55;
    if (v55)
    {
      v55 = (_QWORD *)v55[6];
    }
    else
    {
      v9 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
      *(_QWORD *)(v9 + 48) = 0;
    }
    *(_DWORD *)v9 = v8;
    *(_QWORD *)(v9 + 40) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, v8, v9 + 8);
    *(_QWORD *)v49 = v9;
    std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(v56, v49);
    v10 = *((_QWORD *)&v57 + 1);
    if (!*((_QWORD *)&v57 + 1))
    {
      v11 = 1;
      if ((a3 & 1) != 0)
        break;
      goto LABEL_62;
    }
    v11 = 1;
    do
    {
      v12 = *(_QWORD **)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                   + (((unint64_t)(v10 + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                       + 8 * ((v10 + v57 - 1) & 0x1FF));
      v13 = *(int *)v12;
      v14 = v58.__end_ - v58.__begin_;
      if (v58.__end_ - v58.__begin_ <= v13)
      {
        v7 = v13 + 1;
        v49[0] = 0;
        if (v13 + 1 <= v14)
        {
          if (v13 + 1 < v14)
            v58.__end_ = &v58.__begin_[v7];
        }
        else
        {
          std::vector<char>::__append(&v58, v13 + 1 - v14, v49);
        }
      }
      if ((v11 & 1) != 0)
      {
        v15 = v12[1];
        if (v15)
        {
          if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v15 + 24))(v15))
          {
            v16 = v12[1];
            if (v16)
              v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 32))(v16);
            else
LABEL_28:
              v17 = v12[2] + 48 * v12[5];
            v18 = *(int *)(v17 + 40);
            begin = v58.__begin_;
            v20 = v58.__end_ - v58.__begin_;
            if (v58.__end_ - v58.__begin_ <= v18)
            {
              v7 = (v18 + 1);
              v49[0] = 0;
              if ((int)v7 <= v20)
              {
                if ((int)v7 < v20)
                  v58.__end_ = &v58.__begin_[(int)v7];
              }
              else
              {
                std::vector<char>::__append(&v58, (int)v7 - v20, v49);
                v18 = *(int *)(v17 + 40);
                begin = v58.__begin_;
              }
            }
            v26 = begin[v18];
            if (v26 == 1)
            {
              **(_BYTE **)(a2 + 8) = 0;
              v28 = v12[1];
              if (v28)
              {
                (*(void (**)(uint64_t))(*(_QWORD *)v28 + 40))(v28);
                v11 = 0;
              }
              else
              {
                v11 = 0;
                ++v12[5];
              }
            }
            else
            {
              if (v26 == 2)
              {
                v27 = v12[1];
                if (v27)
                  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
                else
                  ++v12[5];
              }
              else
              {
                begin[v18] = 1;
                v29 = (uint64_t)v55;
                if (v55)
                {
                  v55 = (_QWORD *)v55[6];
                }
                else
                {
                  v29 = fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::Link>::Allocate(v54, 1);
                  *(_QWORD *)(v29 + 48) = 0;
                }
                *(_DWORD *)v29 = *(_DWORD *)(v17 + 40);
                *(_QWORD *)(v29 + 40) = 0;
                (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
                *(_QWORD *)v49 = v29;
                std::deque<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *,std::allocator<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>> *>>::push_back(v56, v49);
              }
              v11 = 1;
            }
            goto LABEL_58;
          }
        }
        else if (v12[5] < v12[3])
        {
          goto LABEL_28;
        }
      }
      v58.__begin_[v13] = 2;
      v21 = v12[1];
      if (v21)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      }
      else
      {
        v22 = (_DWORD *)v12[4];
        if (v22)
          --*v22;
      }
      v12[6] = v55;
      v55 = v12;
      --*((_QWORD *)&v57 + 1);
      std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::__maybe_remove_back_spare[abi:ne180100](v56, 1);
      if (*((_QWORD *)&v57 + 1))
      {
        v23 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v56[0] + 1)
                                    + (((unint64_t)(*((_QWORD *)&v57 + 1) + v57 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((*((_QWORD *)&v57 + 1) + v57 - 1) & 0x1FF));
        v24 = *(_QWORD *)(v23 + 8);
        if (v24)
          (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
        v25 = *(_QWORD *)(v23 + 8);
        if (v25)
          (*(void (**)(uint64_t))(*(_QWORD *)v25 + 40))(v25);
        else
          ++*(_QWORD *)(v23 + 40);
      }
      else
      {
        fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishState(a2, v13);
      }
LABEL_58:
      v10 = *((_QWORD *)&v57 + 1);
    }
    while (*((_QWORD *)&v57 + 1));
    if ((a3 & 1) != 0)
      break;
LABEL_62:
    if ((_DWORD)v8 == v48)
      v8 = 0;
    else
      v8 = (v8 + 1);
    if ((int)v8 < (int)v7)
    {
      v30 = &v58.__begin_[(int)v8];
      v31 = (int)v7 - (uint64_t)(int)v8;
      while (*v30++)
      {
        v8 = (v8 + 1);
        if (!--v31)
        {
          v8 = v7;
          break;
        }
      }
    }
    if (v47 || (_DWORD)v8 != (_DWORD)v7)
      continue;
LABEL_72:
    if (*(_QWORD *)__x)
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 16))(*(_QWORD *)__x) & 1) != 0)
        continue;
      if (*(_QWORD *)__x)
      {
        v33 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)__x + 24))(*(_QWORD *)__x);
        goto LABEL_78;
      }
    }
    else if (v52 >= v51)
    {
      continue;
    }
    v33 = v52;
LABEL_78:
    if (v33 != (_DWORD)v7)
    {
      if (*(_QWORD *)__x)
        (*(void (**)(_QWORD))(**(_QWORD **)__x + 32))(*(_QWORD *)__x);
      else
        ++v52;
      goto LABEL_72;
    }
    end = v58.__end_;
    if (v58.__end_ >= v58.__end_cap_.__value_)
    {
      v36 = v58.__begin_;
      v37 = v58.__end_ - v58.__begin_;
      v38 = v58.__end_ - v58.__begin_ + 1;
      if (v38 < 0)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v39 = v58.__end_cap_.__value_ - v58.__begin_;
      if (2 * (v58.__end_cap_.__value_ - v58.__begin_) > (unint64_t)v38)
        v38 = 2 * v39;
      if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
        v40 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v40 = v38;
      if (v40)
        v41 = (char *)operator new(v40);
      else
        v41 = 0;
      v42 = &v41[v37];
      v43 = &v41[v37];
      *v43 = 0;
      v35 = v43 + 1;
      if (end != v36)
      {
        v44 = &end[~(unint64_t)v36];
        do
        {
          v45 = *--end;
          (v44--)[(_QWORD)v41] = v45;
        }
        while (end != v36);
        end = v58.__begin_;
        v42 = v41;
      }
      v58.__begin_ = v42;
      v58.__end_ = v35;
      v58.__end_cap_.__value_ = &v41[v40];
      if (end)
        operator delete(end);
    }
    else
    {
      *v58.__end_ = 0;
      v35 = end + 1;
    }
    v58.__end_ = v35;
    v7 = (v7 + 1);
    a3 = v46;
  }
  while ((v11 & 1) != 0 && (int)v8 < (int)v7);
LABEL_102:
  fst::TopOrderVisitor<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinishVisit((char ***)a2);
  if (*(_QWORD *)__x)
    (*(void (**)(_QWORD))(**(_QWORD **)__x + 8))(*(_QWORD *)__x);
  v53 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena(v54);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v53);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](v56);
  if (v58.__begin_)
  {
    v58.__end_ = v58.__begin_;
    operator delete(v58.__begin_);
  }
}

void sub_1ADC91FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  void *v11;
  void *v12;
  va_list va;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  v17 = va_arg(va2, _QWORD);
  v18 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  v20 = va_arg(va2, _QWORD);
  v21 = va_arg(va2, _QWORD);
  v12 = &unk_1E5D197D8;
  fst::MemoryArena<fst::MemoryPool<fst::DfsState<fst::ReverseArc<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::Link>::~MemoryArena((uint64_t *)va1);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((uint64_t *)va2);
  v11 = *(void **)(v9 - 112);
  if (v11)
  {
    *(_QWORD *)(v9 - 104) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADC920C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD);
  uint64_t (***v7)(_QWORD);
  uint64_t (**v8)(_QWORD);
  BOOL v9;

  v2 = result;
  v3 = result[1];
  v4 = (v3 - *result) >> 4;
  if (a2 > v4)
    return std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__append(result, a2 - v4);
  if (a2 < v4)
  {
    v5 = *result + 16 * a2;
    if (v3 != v5)
    {
      v6 = (uint64_t (***)(_QWORD))(v3 - 16);
      v7 = (uint64_t (***)(_QWORD))(v3 - 16);
      do
      {
        v8 = *v7;
        v7 -= 2;
        result = (uint64_t *)(*v8)(v6);
        v9 = v6 == (uint64_t (***)(_QWORD))v5;
        v6 = v7;
      }
      while (!v9);
    }
    v2[1] = v5;
  }
  return result;
}

uint64_t *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  v4 = a2[1];
  if (v3 != *result)
  {
    do
    {
      *(_QWORD *)(v4 - 16) = &unk_1E5D28D30;
      v4 -= 16;
      v5 = *(_QWORD *)(v3 - 8);
      *(_QWORD *)(v4 + 8) = v5;
      ++*(_DWORD *)(v5 + 56);
      v3 -= 16;
    }
    while (v3 != v2);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

_QWORD *std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__append(uint64_t *a1, unint64_t a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[2];
  char *v20;
  char *v21;
  _QWORD *v22;

  v6 = a1[2];
  result = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(result - 1);
  if (a2 <= (v6 - (uint64_t)v7) >> 4)
  {
    if (a2)
    {
      v14 = 16 * a2;
      v15 = &v7[2 * a2];
      do
      {
        result = fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v7);
        v7 += 2;
        v14 -= 16;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - *a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v22 = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)result, v12);
    else
      v13 = 0;
    v16 = &v13[16 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v20 = v16;
    v21 = &v13[16 * v12];
    v17 = 16 * a2;
    v18 = &v16[16 * a2];
    do
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v16);
      v16 += 16;
      v17 -= 16;
    }
    while (v17);
    v20 = v18;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>>::__swap_out_circular_buffer(a1, v19);
    return (_QWORD *)std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_1ADC922E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vdeallocate((void **)a1);
    if (a4 > 0x111111111111111)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xDDDDDDDDDDDDDDDELL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x88888888888888)
      v11 = 0x111111111111111;
    else
      v11 = v10;
    std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v8, a2, a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = a2 + 16 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(v8, v13, a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(a2, a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
      kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v16 - 240));
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADC9246C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADC92474(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::TranslationUtil::PathElement>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)(v3 - 240));
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,kaldi::quasar::TranslationUtil::PathElement *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      kaldi::quasar::TranslationUtil::PathElement::operator=(a3, v4);
      v4 += 240;
      a3 += 240;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t kaldi::quasar::TranslationUtil::PathElement::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (a1 == a2)
  {
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  }
  else
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 32), *(std::string **)(a2 + 32), *(__int128 **)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 3));
    std::string::operator=((std::string *)(a1 + 56), (const std::string *)(a2 + 56));
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 88), *(char **)(a2 + 88), *(_QWORD *)(a2 + 96), (uint64_t)(*(_QWORD *)(a2 + 96) - *(_QWORD *)(a2 + 88)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), *(char **)(a2 + 112), *(_QWORD *)(a2 + 120), (uint64_t)(*(_QWORD *)(a2 + 120) - *(_QWORD *)(a2 + 112)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 136), *(char **)(a2 + 136), *(_QWORD *)(a2 + 144), (uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 160), *(char **)(a2 + 160), *(_QWORD *)(a2 + 168), (uint64_t)(*(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 184), *(char **)(a2 + 184), *(_QWORD *)(a2 + 192), (uint64_t)(*(_QWORD *)(a2 + 192) - *(_QWORD *)(a2 + 184)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 208), *(char **)(a2 + 208), *(_QWORD *)(a2 + 216), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 2);
  }
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  return a1;
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(uint64_t *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x78787878787878)
    v9 = 0xF0F0F0F0F0F0F0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::quasar::TranslationUtil::NbestElement *)&v10[272 * v4];
  v16 = &v10[272 * v9];
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v14, a2);
  v15 = (char *)v14 + 272;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADC92728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>,std::reverse_iterator<kaldi::quasar::TranslationUtil::NbestElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  kaldi::quasar::TranslationUtil::NbestElement *v12;

  v10 = 0;
  v11 = a7 - 272;
  while (a3 + v10 != a5)
  {
    v12 = (kaldi::quasar::TranslationUtil::NbestElement *)(v11 + v10);
    v10 -= 272;
    kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v12, (const kaldi::quasar::TranslationUtil::NbestElement *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 272;
    kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)(i - 272));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::DecodeOptions(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)a1 = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)a2[2], a2[3]);
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_OWORD *)(a1 + 16) = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), (const std::string::value_type *)a2[5], a2[6]);
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 5);
    *(_QWORD *)(a1 + 56) = a2[7];
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), (const std::string::value_type *)a2[8], a2[9]);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), (const std::string::value_type *)a2[11], a2[12]);
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 11);
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_OWORD *)(a1 + 88) = v8;
  }
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 112), (const std::string::value_type *)a2[14], a2[15]);
  }
  else
  {
    v9 = *((_OWORD *)a2 + 7);
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_OWORD *)(a1 + 112) = v9;
  }
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 136), (const std::string::value_type *)a2[17], a2[18]);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 17);
    *(_QWORD *)(a1 + 152) = a2[19];
    *(_OWORD *)(a1 + 136) = v10;
  }
  v11 = *((_OWORD *)a2 + 12);
  v12 = *((_OWORD *)a2 + 13);
  v13 = *((_OWORD *)a2 + 14);
  v15 = *((_OWORD *)a2 + 10);
  v14 = *((_OWORD *)a2 + 11);
  *(_QWORD *)(a1 + 240) = 0;
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(_OWORD *)(a1 + 176) = v14;
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 160) = v15;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>((char *)(a1 + 240), (_QWORD *)a2[30], (_QWORD *)a2[31], (a2[31] - a2[30]) >> 4);
  if (*((char *)a2 + 287) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 264), (const std::string::value_type *)a2[33], a2[34]);
  }
  else
  {
    v16 = *(_OWORD *)(a2 + 33);
    *(_QWORD *)(a1 + 280) = a2[35];
    *(_OWORD *)(a1 + 264) = v16;
  }
  v17 = *((_OWORD *)a2 + 18);
  v18 = *((_OWORD *)a2 + 19);
  *(_DWORD *)(a1 + 320) = *((_DWORD *)a2 + 80);
  *(_OWORD *)(a1 + 288) = v17;
  *(_OWORD *)(a1 + 304) = v18;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 328), (__int128 *)a2[41], (__int128 *)a2[42], 0xAAAAAAAAAAAAAAABLL * ((a2[42] - a2[41]) >> 3));
  return a1;
}

void sub_1ADC92AA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  va_list va;

  va_start(va, a2);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v2[159] < 0)
    operator delete(*v8);
  if (v2[135] < 0)
    operator delete(*v7);
  if (v2[111] < 0)
    operator delete(*v6);
  if (v2[87] < 0)
    operator delete(*v5);
  if (v2[63] < 0)
    operator delete(*v4);
  if (v2[39] < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<kaldi::quasar::PhraseBook>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::PhraseBook>*,std::shared_ptr<kaldi::quasar::PhraseBook>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADC92BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::pair<float,int>>::__emplace_multi<float,int &>(uint64_t **a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t *v6;
  uint64_t **leaf_high;
  uint64_t v9;

  v6 = (uint64_t *)operator new(0x28uLL);
  *((_DWORD *)v6 + 7) = *a2;
  *((_DWORD *)v6 + 8) = *a3;
  leaf_high = (uint64_t **)std::__tree<std::pair<float,int>>::__find_leaf_high((uint64_t)a1, &v9, (uint64_t)v6 + 28);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, leaf_high, v6);
  return v6;
}

void sub_1ADC92C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tree<std::pair<float,int>>::__find_leaf_high(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  float v6;
  float v7;
  _QWORD *v8;

  v5 = *(uint64_t **)(a1 + 8);
  v3 = (_QWORD *)(a1 + 8);
  v4 = v5;
  if (v5)
  {
    v6 = *(float *)a3;
    do
    {
      while (1)
      {
        v3 = v4;
        v7 = *((float *)v4 + 7);
        if (v6 >= v7 && (v7 < v6 || *(_DWORD *)(a3 + 4) >= *((_DWORD *)v4 + 8)))
          break;
        v4 = (uint64_t *)*v4;
        v8 = v3;
        if (!*v3)
          goto LABEL_11;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v8 = v3 + 1;
  }
  else
  {
    v8 = v3;
  }
LABEL_11:
  *a2 = v3;
  return v8;
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::NbestCompare::NbestCompare(uint64_t a1, int a2, float a3, float a4)
{
  _QWORD *v5;
  _QWORD v7[35];

  *(_DWORD *)a1 = a2;
  *(float *)(a1 + 4) = a3;
  *(float *)(a1 + 8) = a4;
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Initializing NbestCompare. alpha: ", 34);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", sigma: ", 9);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v7);
  }
  return a1;
}

void sub_1ADC92D84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>(uint64_t a1, uint64_t a2, int a3, float a4)
{
  uint64_t (***v8)(_QWORD);
  int v9;
  uint64_t v10;
  int v11;
  uint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *(uint64_t (****)(_QWORD))(a2 + 200);
  if (v8)
    v9 = (**v8)(v8);
  else
    v9 = 0;
  if (*(_DWORD *)(a2 + 184) == 2)
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 208) + 24))(*(_QWORD *)(a2 + 208));
  v10 = operator new();
  v11 = *(_DWORD *)(a1 + 5176);
  *(_QWORD *)(v10 + 16) = 0;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(_DWORD *)(v10 + 36) = v9;
  *(_DWORD *)(v10 + 40) = v11;
  *(_DWORD *)(v10 + 44) = 0;
  *(float *)(v10 + 48) = a4;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_QWORD *)(v10 + 104) = 0;
  *(_OWORD *)(v10 + 56) = 0u;
  *(_DWORD *)(v10 + 112) = 1065353216;
  *(_OWORD *)(v10 + 120) = 0u;
  *(_OWORD *)(v10 + 136) = 0u;
  *(_DWORD *)(v10 + 152) = 1065353216;
  *(_OWORD *)(v10 + 160) = 0u;
  *(_OWORD *)(v10 + 176) = 0u;
  *(_DWORD *)(v10 + 192) = 1065353216;
  *(_BYTE *)(v10 + 200) = 0;
  *(_QWORD *)(v10 + 208) = 0;
  *(_QWORD *)(v10 + 216) = 0;
  *(_OWORD *)(v10 + 240) = 0u;
  *(_OWORD *)(v10 + 256) = 0u;
  *(_QWORD *)(v10 + 224) = 0;
  *(_QWORD *)(v10 + 232) = &unk_1E5D34170;
  *(_BYTE *)(v10 + 272) = 0;
  *(_DWORD *)v10 = a3;
  v26 = v10 + 56;
  std::back_insert_iterator<std::vector<int>>::operator=[abi:ne180100](&v26, (_DWORD *)(a1 + 5176));
  kaldi::quasar::Encdec::GetHistoryState(*(_QWORD *)(a1 + 136), v10 + 8, 0);
  v12 = *(uint64_t **)(a1 + 5792);
  v13 = *(_QWORD *)(a1 + 5800);
  if ((unint64_t)v12 >= v13)
  {
    v15 = *(_QWORD *)(a1 + 5784);
    v16 = ((uint64_t)v12 - v15) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = v13 - v15;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 5800, v19);
    else
      v20 = 0;
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v10;
    v14 = v21 + 1;
    v23 = *(char **)(a1 + 5792);
    v24 = *(char **)(a1 + 5784);
    if (v23 != v24)
    {
      do
      {
        v25 = *((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = *(char **)(a1 + 5784);
    }
    *(_QWORD *)(a1 + 5784) = v21;
    *(_QWORD *)(a1 + 5792) = v14;
    *(_QWORD *)(a1 + 5800) = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v12 = v10;
    v14 = v12 + 1;
  }
  *(_QWORD *)(a1 + 5792) = v14;
}

void std::priority_queue<float>::push(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  float *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  float *v20;
  float *v21;
  float v22;
  float v23;
  float v24;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = (float *)(v14 + 4);
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = (float *)(v6 + 1);
  }
  *(_QWORD *)(a1 + 8) = v7;
  v17 = *(_DWORD **)a1;
  v18 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v18 >= 5)
  {
    v19 = (((unint64_t)v18 >> 2) - 2) >> 1;
    v20 = (float *)&v17[v19];
    v22 = *(v7 - 1);
    v21 = v7 - 1;
    v23 = v22;
    v24 = *v20;
    if (*v20 < v22)
    {
      do
      {
        *v21 = v24;
        v21 = v20;
        if (!v19)
          break;
        v19 = (v19 - 1) >> 1;
        v20 = (float *)&v17[v19];
        v24 = *v20;
      }
      while (*v20 < v23);
      *v21 = v23;
    }
  }
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,0>(a3, *(_QWORD *)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v8 = *(void **)(v7 - 40);
        if (v8)
        {
          *(_QWORD *)(v7 - 32) = v8;
          operator delete(v8);
        }
        v7 -= 48;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v19 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v17 = v11;
  v18 = &v10[48 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 1, *(const void **)(a2 + 8), *(_QWORD *)(a2 + 16), (uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 2);
  v12 = &v10[48 * v4];
  v13 = *(_QWORD *)(a2 + 32);
  *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v12 + 4) = v13;
  v17 += 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADC932B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 48);
      a3 -= 48;
      *(_QWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v9 = *(_QWORD *)(a3 + 32);
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 16) = v9;
      v7 = *((_QWORD *)&v15 + 1) - 48;
      *((_QWORD *)&v15 + 1) -= 48;
    }
    while (a3 != a5);
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 8);
    if (v3)
    {
      *(_QWORD *)(v1 + 16) = v3;
      operator delete(v3);
    }
    v1 += 48;
  }
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 48;
    }
  }
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = a1 + 48 * (v4 >> 1);
    v8 = a2 - 48;
    v9 = *(float *)(a2 - 48);
    if (*(float *)v7 > v9)
    {
      v10 = *(_DWORD *)(a2 - 44);
      v17 = *(_OWORD *)(a2 - 40);
      v12 = *(_QWORD *)(a2 - 24);
      v11 = *(_QWORD *)(a2 - 16);
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 40) = 0;
      v18 = v11;
      v19 = *(_DWORD *)(a2 - 8);
      do
      {
        v13 = v8;
        v8 = v7;
        v14 = (_QWORD *)(v7 + 8);
        *(_QWORD *)v13 = *(_QWORD *)v7;
        std::vector<int>::__move_assign(v13 + 8, (__n128 *)(v7 + 8));
        v15 = *(_QWORD *)(v8 + 32);
        *(_DWORD *)(v13 + 40) = *(_DWORD *)(v8 + 40);
        *(_QWORD *)(v13 + 32) = v15;
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = a1 + 48 * v6;
      }
      while (*(float *)v7 > v9);
      *(float *)v8 = v9;
      *(_DWORD *)(v8 + 4) = v10;
      v16 = *(void **)(v8 + 8);
      if (v16)
      {
        *(_QWORD *)(v8 + 16) = v16;
        operator delete(v16);
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
      }
      *(_OWORD *)(v8 + 8) = v17;
      *(_QWORD *)(v8 + 24) = v12;
      *(_QWORD *)(v8 + 32) = v18;
      *(_DWORD *)(v8 + 40) = v19;
    }
  }
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[48 * v9];
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v12 = *(_QWORD *)(a2 + 32);
  *((_DWORD *)v11 + 10) = *(_DWORD *)(a2 + 40);
  *((_QWORD *)v11 + 4) = v12;
  v15[2] = v11 + 48;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADC93734(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_DWORD *)(a1 + 40);
    v11 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    v12 = v11;
    if ((_QWORD *)(a2 - 48) == v11)
    {
      *v11 = v8;
      v17 = v11 + 1;
      v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *v17 = 0;
        v12[2] = 0;
        v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      *v11 = *(_QWORD *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      v13 = *(_QWORD *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      v14 = (uint64_t)(v12 + 6);
      *(_QWORD *)(a2 - 48) = v8;
      v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(_QWORD *)(a2 - 32) = v15;
        operator delete(v15);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v7;
      *(_QWORD *)(a2 - 32) = v10;
      *(_QWORD *)(a2 - 24) = v9;
      *(_QWORD *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1ADC93898(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1;
    a1 += 48 * v5 + 48;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v10 < a3 && *(float *)a1 > *(float *)(a1 + 48))
    {
      a1 += 48;
      v5 = v10;
    }
    *(_QWORD *)v8 = *(_QWORD *)a1;
    std::vector<int>::__move_assign(v8 + 8, (__n128 *)(a1 + 8));
    v11 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(v8 + 40) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(v8 + 32) = v11;
  }
  while (v5 <= v7);
  return a1;
}

void std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(std::vector<int> *a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int> *v18;
  char v19;
  _BOOL4 v20;
  float v21;
  std::vector<int> *v22;
  uint64_t *v23;
  std::vector<int> *v24;

  v7 = a2;
  v8 = (uint64_t *)a1;
  v23 = a2;
  v24 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v8) >> 4);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *((float *)v7 - 12);
        v23 = v7 - 6;
        if (v21 > *(float *)v8)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, &v23);
        return;
      case 3uLL:
        v23 = v7 - 6;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v7 - 6);
        return;
      case 4uLL:
        v23 = v7 - 6;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v8 + 12, v7 - 6);
        return;
      case 5uLL:
        v23 = v7 - 6;
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, v8 + 6, v8 + 12, v8 + 18, v7 - 6);
        return;
      default:
        if (v10 <= 1151)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v8, (uint64_t)v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v8, (uint64_t)v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(v8, v7, (float *)v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = v7 - 6;
        if ((unint64_t)v10 < 0x1801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v8[6 * (v11 >> 1)], v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)v8, &v8[6 * (v11 >> 1)], v13);
          v14 = v23;
          v15 = 3 * v12;
          v16 = 2 * v12;
          v17 = 48 * v12 - 48;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v24[2], (uint64_t *)((char *)v24 + v17), v23 - 12);
          v16 += 2;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)&v24[4], (uint64_t *)&v24[v16], v14 - 18);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)((char *)v24 + v17), (uint64_t *)&v24[(unint64_t)(16 * v15) / 0x18], (uint64_t *)&v24[v16]);
          v22 = &v24[(unint64_t)(16 * v15) / 0x18];
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, (uint64_t **)&v22);
        }
        if ((a5 & 1) == 0)
        {
          v7 = v23;
          if (*(float *)&v24[-2].__begin_ > *(float *)&v24->__begin_)
            goto LABEL_12;
          v8 = (uint64_t *)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v24, v23);
LABEL_21:
          a5 = 0;
          v24 = (std::vector<int> *)v8;
          a4 = -v9;
          continue;
        }
        v7 = v23;
LABEL_12:
        v18 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(v24, v7);
        if ((v19 & 1) == 0)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,false>(v24, v18, a3, -v9, a5 & 1);
          v8 = (uint64_t *)&v18[2];
          goto LABEL_21;
        }
        v20 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v24, (uint64_t *)v18);
        v8 = (uint64_t *)&v18[2];
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)&v18[2], v7))
        {
          if (v20)
          {
            v24 = v18 + 2;
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v20)
        {
          v23 = (uint64_t *)v18;
          v8 = (uint64_t *)v24;
          v7 = (uint64_t *)v18;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(uint64_t *a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  __n128 result;
  __n128 v12;
  uint64_t v13;
  int v14;

  v3 = *a2;
  v2 = (uint64_t *)*a1;
  v5 = *(__n128 *)(*a1 + 8);
  v4 = (_QWORD *)(*a1 + 8);
  v12 = v5;
  v6 = *v2;
  *v4 = 0;
  v8 = v2[3];
  v7 = v2[4];
  v2[2] = 0;
  v2[3] = 0;
  v13 = v7;
  v14 = *((_DWORD *)v2 + 10);
  *v2 = *v3;
  std::vector<int>::__move_assign((uint64_t)v4, (__n128 *)(v3 + 1));
  v9 = v3[4];
  *((_DWORD *)v2 + 10) = *((_DWORD *)v3 + 10);
  v2[4] = v9;
  *v3 = v6;
  v10 = (void *)v3[1];
  if (v10)
  {
    v3[2] = (uint64_t)v10;
    operator delete(v10);
  }
  result = v12;
  *(__n128 *)(v3 + 1) = v12;
  v3[3] = v8;
  v3[4] = v13;
  *((_DWORD *)v3 + 10) = v14;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;

  if (a1 != a2)
  {
    v4 = a1 + 48;
    if (a1 + 48 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        v8 = *(float *)(v6 + 48);
        if (v8 > *(float *)v6)
        {
          v9 = *(_DWORD *)(v6 + 52);
          v10 = *(_QWORD *)(v6 + 56);
          v17 = *(_OWORD *)(v6 + 64);
          *(_QWORD *)(v6 + 64) = 0;
          *(_QWORD *)(v6 + 72) = 0;
          *(_QWORD *)(v6 + 56) = 0;
          v18 = *(_QWORD *)(v6 + 80);
          v19 = *(_DWORD *)(v6 + 88);
          v11 = v5;
          while (1)
          {
            v12 = v11;
            v13 = a1 + v11;
            *(_QWORD *)(a1 + v11 + 48) = *(_QWORD *)(a1 + v11);
            std::vector<int>::__move_assign(a1 + v11 + 56, (__n128 *)(a1 + v11 + 8));
            *(_QWORD *)(v13 + 80) = *(_QWORD *)(v13 + 32);
            *(_DWORD *)(v13 + 88) = *(_DWORD *)(v13 + 40);
            if (!v12)
              break;
            v11 = v12 - 48;
            if (*(float *)(v13 - 48) >= v8)
            {
              v14 = a1 + v12;
              goto LABEL_10;
            }
          }
          v14 = a1;
LABEL_10:
          *(float *)v14 = v8;
          *(_DWORD *)(v14 + 4) = v9;
          v15 = *(void **)(v13 + 8);
          if (v15)
          {
            *(_QWORD *)(v14 + 16) = v15;
            operator delete(v15);
            v16 = a1 + v12;
            *(_QWORD *)(v16 + 16) = 0;
            *(_QWORD *)(v16 + 24) = 0;
          }
          *(_QWORD *)(v13 + 8) = v10;
          *(_OWORD *)(v14 + 16) = v17;
          *(_QWORD *)(v13 + 32) = v18;
          *(_DWORD *)(v13 + 40) = v19;
        }
        v4 = v7 + 48;
        v5 += 48;
        v6 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  void *v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  if (result != a2)
  {
    v3 = result + 48;
    if (result + 48 != a2)
    {
      v4 = result - 48;
      do
      {
        v5 = v3;
        v6 = *(float *)(result + 48);
        if (v6 > *(float *)result)
        {
          v7 = *(_DWORD *)(result + 52);
          v13 = *(_OWORD *)(result + 56);
          v9 = *(_QWORD *)(result + 72);
          v8 = *(_QWORD *)(result + 80);
          *(_QWORD *)(result + 64) = 0;
          *(_QWORD *)(result + 72) = 0;
          *(_QWORD *)(result + 56) = 0;
          v14 = v8;
          v15 = *(_DWORD *)(result + 88);
          v10 = v4;
          do
          {
            *(_QWORD *)(v10 + 96) = *(_QWORD *)(v10 + 48);
            std::vector<int>::__move_assign(v10 + 104, (__n128 *)(v10 + 56));
            *(_QWORD *)(v10 + 128) = *(_QWORD *)(v10 + 80);
            *(_DWORD *)(v10 + 136) = *(_DWORD *)(v10 + 88);
            v11 = *(float *)v10;
            v10 -= 48;
          }
          while (v11 < v6);
          *(float *)(v10 + 96) = v6;
          *(_DWORD *)(v10 + 100) = v7;
          v12 = *(void **)(v10 + 104);
          if (v12)
          {
            *(_QWORD *)(v10 + 112) = v12;
            operator delete(v12);
          }
          *(_OWORD *)(v10 + 104) = v13;
          *(_QWORD *)(v10 + 120) = v9;
          *(_QWORD *)(v10 + 128) = v14;
          *(_DWORD *)(v10 + 136) = v15;
        }
        v3 = v5 + 48;
        v4 += 48;
        result = v5;
      }
      while (v5 + 48 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3)
{
  float v3;
  float v4;
  float **v5;
  float **v6;
  float *v8;
  float *v9;
  float *v10;

  v10 = a1;
  v8 = (float *)a3;
  v9 = (float *)a2;
  v3 = *(float *)a2;
  v4 = *(float *)a3;
  if (*(float *)a2 > *a1)
  {
    if (v4 > v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v10, (uint64_t **)&v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v10, (uint64_t **)&v9);
    if (*v8 <= *v9)
      return 1;
    v5 = &v9;
    v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)v5, (uint64_t **)v6);
    return 2;
  }
  if (v4 > v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v9, (uint64_t **)&v8);
    if (*v9 <= *v10)
      return 1;
    v5 = &v10;
    v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(std::vector<int> *this, uint64_t *a2)
{
  std::vector<int>::pointer begin;
  std::vector<int>::pointer *p_end;
  __int128 v5;
  std::vector<int>::pointer v6;
  std::vector<int>::pointer end;
  float *v8;
  float *v9;
  float v10;
  std::vector<int> *v11;
  float v12;
  float v13;
  uint64_t *v14;
  float v15;
  uint64_t v16;
  void *v17;
  __int128 v19;
  int *v20;
  std::vector<int>::pointer v21;
  int value;
  uint64_t *v23;
  float *v24;

  v23 = a2;
  begin = this->__begin_;
  p_end = &this->__end_;
  v5 = *(_OWORD *)&this->__end_;
  v6 = this[1].__begin_;
  this->__end_ = 0;
  v8 = (float *)&this[1].__end_;
  end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  v21 = end;
  value = (int)this[1].__end_cap_.__value_;
  if (*((float *)a2 - 12) >= *(float *)&begin)
  {
    v11 = this + 2;
    do
    {
      v9 = (float *)v11;
      if (v11 >= (std::vector<int> *)a2)
        break;
      v11 += 2;
    }
    while (*v9 >= *(float *)&begin);
  }
  else
  {
    v9 = (float *)this;
    do
    {
      v10 = v9[12];
      v9 += 12;
    }
    while (v10 >= *(float *)&begin);
  }
  v24 = v9;
  v19 = v5;
  if (v9 < (float *)a2)
  {
    do
    {
      v12 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v12 < *(float *)&begin);
    v23 = a2;
  }
  v20 = begin;
  if (v9 < (float *)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v24, &v23);
      begin = v20;
      v9 = v24;
      do
      {
        v13 = v9[12];
        v9 += 12;
      }
      while (v13 >= *(float *)&v20);
      v24 = v9;
      v14 = v23;
      do
      {
        v15 = *((float *)v14 - 12);
        v14 -= 6;
      }
      while (v15 < *(float *)&v20);
      v23 = v14;
    }
    while (v9 < (float *)v14);
  }
  if (v9 - 12 != (float *)this)
  {
    this->__begin_ = (std::vector<int>::pointer)*((_QWORD *)v9 - 6);
    std::vector<int>::__move_assign((uint64_t)p_end, (__n128 *)(v9 - 10));
    begin = v20;
    v16 = *((_QWORD *)v9 - 2);
    v8[2] = *(v9 - 2);
    *(_QWORD *)v8 = v16;
  }
  *((_QWORD *)v9 - 6) = begin;
  v17 = (void *)*((_QWORD *)v9 - 5);
  if (v17)
  {
    *((_QWORD *)v9 - 4) = v17;
    operator delete(v17);
  }
  *(_OWORD *)(v9 - 10) = v19;
  *((_QWORD *)v9 - 3) = v6;
  *((_QWORD *)v9 - 2) = v21;
  *((_DWORD *)v9 - 2) = value;
  return v24;
}

std::vector<int> *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &>(std::vector<int> *this, uint64_t *a2)
{
  uint64_t v4;
  std::vector<int>::pointer begin;
  std::vector<int>::pointer *p_end;
  std::vector<int>::pointer *v7;
  std::vector<int>::pointer v8;
  float v9;
  std::vector<int> *v10;
  float v11;
  float v12;
  std::vector<int> *v13;
  float v14;
  uint64_t *v15;
  float v16;
  std::vector<int>::pointer v17;
  int *v18;
  __int128 v20;
  int *v21;
  std::vector<int>::pointer end;
  int value;
  uint64_t *v24;
  std::vector<int> *v25;

  v4 = 0;
  begin = this->__begin_;
  p_end = &this->__end_;
  v20 = *(_OWORD *)&this->__end_;
  v7 = &this[1].__end_;
  end = this[1].__end_;
  value = (int)this[1].__end_cap_.__value_;
  v8 = this[1].__begin_;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  do
  {
    v9 = *(float *)&this[v4 + 2].__begin_;
    v4 += 2;
  }
  while (v9 > *(float *)&begin);
  v10 = &this[v4];
  v25 = &this[v4];
  if (v4 == 2)
  {
    do
    {
      if (v10 >= (std::vector<int> *)a2)
        break;
      v12 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v12 <= *(float *)&begin);
  }
  else
  {
    do
    {
      v11 = *((float *)a2 - 12);
      a2 -= 6;
    }
    while (v11 <= *(float *)&begin);
  }
  v24 = a2;
  v13 = &this[v4];
  v21 = begin;
  if (v10 < (std::vector<int> *)a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v25, &v24);
      begin = v21;
      v13 = v25;
      do
      {
        v14 = *(float *)&v13[2].__begin_;
        v13 += 2;
      }
      while (v14 > *(float *)&v21);
      v25 = v13;
      v15 = v24;
      do
      {
        v16 = *((float *)v15 - 12);
        v15 -= 6;
      }
      while (v16 <= *(float *)&v21);
      v24 = v15;
    }
    while (v13 < (std::vector<int> *)v15);
  }
  if (&v13[-2] != this)
  {
    this->__begin_ = v13[-2].__begin_;
    std::vector<int>::__move_assign((uint64_t)p_end, (__n128 *)&v13[-2].__end_);
    begin = v21;
    v17 = v13[-1].__end_;
    *((_DWORD *)v7 + 2) = v13[-1].__end_cap_.__value_;
    *v7 = v17;
  }
  v13[-2].__begin_ = begin;
  v18 = v13[-2].__end_;
  if (v18)
  {
    v13[-2].__end_cap_.__value_ = v18;
    operator delete(v18);
  }
  *(_OWORD *)&v13[-2].__end_ = v20;
  v13[-1].__begin_ = v8;
  LODWORD(v13[-1].__end_cap_.__value_) = value;
  v13[-1].__end_ = end;
  return v13 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  unint64_t v4;
  _BOOL8 result;
  float v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  float v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;

  v2 = a2;
  v19 = a2;
  v20 = a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - a1) >> 4);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *((float *)a2 - 12);
      v19 = a2 - 6;
      if (v6 > *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>(&v20, &v19);
        return 1;
      }
      return result;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), a2 - 6);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), a2 - 6);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96), (uint64_t *)(a1 + 144), a2 - 6);
      return 1;
    default:
      v7 = a1 + 96;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((float *)a1, (uint64_t *)(a1 + 48), (uint64_t *)(a1 + 96));
      v8 = a1 + 144;
      if ((uint64_t *)v8 == v2)
        return 1;
      v9 = 0;
      break;
  }
  while (1)
  {
    v10 = *(float *)v8;
    if (*(float *)v8 > *(float *)v7)
      break;
LABEL_14:
    v7 = v8;
    v8 += 48;
    if ((uint64_t *)v8 == v2)
      return 1;
  }
  v11 = *(_DWORD *)(v8 + 4);
  v16 = *(_OWORD *)(v8 + 8);
  v13 = *(_QWORD *)(v8 + 24);
  v12 = *(_QWORD *)(v8 + 32);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  v17 = v12;
  v18 = *(_DWORD *)(v8 + 40);
  do
  {
    v14 = v7;
    *(_QWORD *)(v7 + 48) = *(_QWORD *)v7;
    std::vector<int>::__move_assign(v7 + 56, (__n128 *)(v7 + 8));
    *(_QWORD *)(v7 + 80) = *(_QWORD *)(v7 + 32);
    *(_DWORD *)(v7 + 88) = *(_DWORD *)(v7 + 40);
    if (v7 == v20)
      break;
    v7 -= 48;
  }
  while (*(float *)(v14 - 48) < v10);
  *(float *)v14 = v10;
  *(_DWORD *)(v14 + 4) = v11;
  v15 = *(void **)(v14 + 8);
  if (v15)
  {
    *(_QWORD *)(v14 + 16) = v15;
    operator delete(v15);
  }
  *(_OWORD *)(v14 + 8) = v16;
  *(_QWORD *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 40) = v18;
  *(_QWORD *)(v14 + 32) = v17;
  if (++v9 != 8)
  {
    v2 = v19;
    goto LABEL_14;
  }
  return v8 + 48 == (_QWORD)v19;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  __n128 v8;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  float *v13;

  v12 = a2;
  v13 = a1;
  v10 = a4;
  v11 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(a1, a2, a3);
  v8.n128_u32[0] = *(_DWORD *)a4;
  if (*(float *)a4 > *(float *)a3)
  {
    v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v11, &v10);
    v8.n128_u32[0] = *(_DWORD *)v11;
    if (*(float *)v11 > *(float *)a2)
    {
      v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v12, &v11);
      v8.n128_u32[0] = *(_DWORD *)v12;
      if (*(float *)v12 > *a1)
        v8.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v13, &v12).n128_u64[0];
    }
  }
  return v8.n128_f64[0];
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(float *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  __n128 v10;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  float *v16;

  v15 = a2;
  v16 = a1;
  v13 = a4;
  v14 = a3;
  v12 = a5;
  v10.n128_f64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(a1, a2, a3, a4);
  v10.n128_u32[0] = *(_DWORD *)a5;
  if (*(float *)a5 > *(float *)a4)
  {
    v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v13, &v12);
    v10.n128_u32[0] = *(_DWORD *)v13;
    if (*(float *)v13 > *(float *)a3)
    {
      v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v14, &v13);
      v10.n128_u32[0] = *(_DWORD *)v14;
      if (*(float *)v14 > *(float *)a2)
      {
        v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v15, &v14);
        v10.n128_u32[0] = *(_DWORD *)v15;
        if (*(float *)v15 > *a1)
          v10.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v16, &v15).n128_u64[0];
      }
    }
  }
  return v10.n128_f64[0];
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t *a1, uint64_t *a2, float *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  unint64_t v14;
  float *v17;
  float *v18;

  v18 = (float *)a1;
  if (a1 != a2)
  {
    v6 = (uint64_t)a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 48;
    if ((char *)a2 - (char *)a1 >= 49)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[6 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 48;
        --v11;
      }
      while (v11);
    }
    v17 = (float *)v6;
    if ((float *)v6 == a3)
    {
      a3 = (float *)v6;
    }
    else
    {
      v13 = (float *)v6;
      do
      {
        if (*v13 > *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *&>((uint64_t *)&v17, (uint64_t **)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          v13 = v17;
        }
        v13 += 12;
        v17 = v13;
      }
      while (v13 != a3);
      v7 = (uint64_t *)v18;
      v8 = v6 - (_QWORD)v18;
    }
    if (v8 >= 49)
    {
      v14 = v8 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>((uint64_t)v7, v6, a4, v14);
        v6 -= 48;
      }
      while (v14-- > 2);
      return (uint64_t)v17;
    }
  }
  return (uint64_t)a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  float v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      v9 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      v10 = a1 + 48 * v9;
      if (0x5555555555555556 * ((a4 - a1) >> 4) + 2 < a3 && *(float *)v10 > *(float *)(v10 + 48))
      {
        v10 += 48;
        v9 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      }
      v11 = *(float *)a4;
      if (*(float *)v10 <= *(float *)a4)
      {
        v12 = *(_DWORD *)(a4 + 4);
        v21 = *(_OWORD *)(a4 + 8);
        v20 = *(_QWORD *)(a4 + 24);
        v13 = *(_QWORD *)(a4 + 32);
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        v22 = v13;
        v23 = *(_DWORD *)(a4 + 40);
        do
        {
          v14 = v5;
          v5 = v10;
          v15 = (_QWORD *)(v10 + 8);
          *(_QWORD *)v14 = *(_QWORD *)v10;
          std::vector<int>::__move_assign(v14 + 8, (__n128 *)(v10 + 8));
          v16 = *(_QWORD *)(v5 + 32);
          *(_DWORD *)(v14 + 40) = *(_DWORD *)(v5 + 40);
          *(_QWORD *)(v14 + 32) = v16;
          if (v7 < v9)
            break;
          v17 = 2 * v9;
          v9 = (2 * v9) | 1;
          v10 = a1 + 48 * v9;
          v18 = v17 + 2;
          if (v18 < a3 && *(float *)v10 > *(float *)(v10 + 48))
          {
            v10 += 48;
            v9 = v18;
          }
        }
        while (*(float *)v10 <= v11);
        *(float *)v5 = v11;
        *(_DWORD *)(v5 + 4) = v12;
        v19 = *(void **)(v5 + 8);
        if (v19)
        {
          *(_QWORD *)(v5 + 16) = v19;
          operator delete(v19);
          *v15 = 0;
          v15[1] = 0;
          v15[2] = 0;
        }
        *(_OWORD *)(v5 + 8) = v21;
        *(_QWORD *)(v5 + 24) = v20;
        *(_QWORD *)(v5 + 32) = v22;
        *(_DWORD *)(v5 + 40) = v23;
      }
    }
  }
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;

  if (a4 >= 2)
  {
    v8 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(a1 + 8);
    v10 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    v18 = *(_QWORD *)(a1 + 32);
    v19 = *(_DWORD *)(a1 + 40);
    v11 = (_QWORD *)std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, a3, a4);
    v12 = v11;
    if (v11 == (_QWORD *)(a2 - 48))
    {
      *v11 = v8;
      v17 = v11 + 1;
      v16 = (void *)v11[1];
      if (v16)
      {
        v12[2] = v16;
        operator delete(v16);
        *v17 = 0;
        v12[2] = 0;
        v12[3] = 0;
      }
      v12[1] = v7;
      v12[2] = v10;
      v12[3] = v9;
      v12[4] = v18;
      *((_DWORD *)v12 + 10) = v19;
    }
    else
    {
      *v11 = *(_QWORD *)(a2 - 48);
      std::vector<int>::__move_assign((uint64_t)(v11 + 1), (__n128 *)(a2 - 40));
      v13 = *(_QWORD *)(a2 - 16);
      *((_DWORD *)v12 + 10) = *(_DWORD *)(a2 - 8);
      v12[4] = v13;
      v14 = (uint64_t)(v12 + 6);
      *(_QWORD *)(a2 - 48) = v8;
      v15 = *(void **)(a2 - 40);
      if (v15)
      {
        *(_QWORD *)(a2 - 32) = v15;
        operator delete(v15);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v7;
      *(_QWORD *)(a2 - 32) = v10;
      *(_QWORD *)(a2 - 24) = v9;
      *(_QWORD *)(a2 - 16) = v18;
      *(_DWORD *)(a2 - 8) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>(a1, v14, a3, 0xAAAAAAAAAAAAAAABLL * ((v14 - a1) >> 4));
    }
  }
}

void sub_1ADC94AF4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    *(_QWORD *)a3 = *(_QWORD *)v4;
    std::vector<int>::__move_assign(a3 + 8, (__n128 *)(v4 + 8));
    v6 = *(_QWORD *)(v4 + 32);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(v4 + 40);
    *(_QWORD *)(a3 + 32) = v6;
    a3 += 48;
    v4 += 48;
  }
  while (v4 != v5);
  return v5;
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[56 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[56 * v9];
  *(_OWORD *)v11 = *(_OWORD *)a2;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v11 + 2, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  *(_OWORD *)&v10[56 * v4 + 40] = *(_OWORD *)(a2 + 40);
  v15 += 56;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_1ADC94CB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_OWORD *)(v7 - 40) = *(_OWORD *)(a3 - 40);
      *(_QWORD *)(v7 - 24) = *(_QWORD *)(a3 - 24);
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      *(_OWORD *)(v7 - 16) = *(_OWORD *)(a3 - 16);
      v7 = *((_QWORD *)&v13 + 1) - 56;
      *((_QWORD *)&v13 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>,std::reverse_iterator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 16);
    if (v3)
    {
      *(_QWORD *)(v1 + 24) = v3;
      operator delete(v3);
    }
    v1 += 56;
  }
}

uint64_t std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement> &>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 56;
    v5 = *(void **)(v2 - 40);
    if (v5)
    {
      *(_QWORD *)(v2 - 32) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 56;
    }
  }
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    v4 = *(void **)(i - 40);
    if (v4)
    {
      *(_QWORD *)(i - 32) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(std::vector<int> *a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  _BOOL4 v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  std::vector<int> *v23;

  v7 = (__int128 *)a2;
  v8 = (__int128 *)a1;
  v22 = a2;
  v23 = a1;
  while (2)
  {
    v9 = 1 - a4;
LABEL_3:
    v10 = (char *)v7 - (char *)v8;
    v11 = 0x6DB6DB6DB6DB6DB7 * (((char *)v7 - (char *)v8) >> 3);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v20 = *((float *)v7 - 14);
        v22 = (unint64_t)v7 - 56;
        if (v20 < *(float *)v8)
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v23, (uint64_t *)&v22);
        return;
      case 3uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), (float *)v7 - 14);
        return;
      case 4uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), v8 + 7, (unsigned __int32 *)v7 - 14);
        return;
      case 5uLL:
        v22 = (unint64_t)v7 - 56;
        std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56), v8 + 7, (__int128 *)((char *)v8 + 168), (unsigned __int32 *)v7 - 14);
        return;
      default:
        if (v10 <= 1343)
        {
          if ((a5 & 1) != 0)
            std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v8, (uint64_t)v7);
          else
            std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v8, (uint64_t)v7);
          return;
        }
        if (v9 == 1)
        {
          if (v8 != v7)
            std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((float *)v8, v7, v7, a3);
          return;
        }
        v12 = v11 >> 1;
        v13 = (float *)v7 - 14;
        if ((unint64_t)v10 < 0x1C01)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)((char *)v8 + 56 * (v11 >> 1)), v8, v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(v8, (__int128 *)((char *)v8 + 56 * (v11 >> 1)), v13);
          v14 = 56 * v12;
          v15 = 56 * v12 - 56;
          v16 = v22;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)&v23[2].__end_, (__int128 *)((char *)v23 + v15), (float *)(v22 - 112));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)&v23[4].__end_cap_, (__int128 *)((char *)&v23[2].__end_ + v14), (float *)(v16 - 168));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)((char *)v23 + v15), (__int128 *)((char *)v23 + v14), (float *)((char *)&v23[2].__end_ + v14));
          v21 = (uint64_t)v23 + v14;
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v23, &v21);
        }
        if ((a5 & 1) == 0)
        {
          v7 = (__int128 *)v22;
          if (*(float *)&v23[-3].__end_cap_.__value_ < *(float *)&v23->__begin_)
            goto LABEL_12;
          v8 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v23, v22);
LABEL_21:
          a5 = 0;
          v23 = (std::vector<int> *)v8;
          a4 = -v9;
          continue;
        }
        v7 = (__int128 *)v22;
LABEL_12:
        v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(v23, (unint64_t)v7);
        if ((v18 & 1) == 0)
        {
LABEL_19:
          std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,false>(v23, v17, a3, -v9, a5 & 1);
          v8 = (__int128 *)(v17 + 56);
          goto LABEL_21;
        }
        v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)v23, v17);
        v8 = (__int128 *)(v17 + 56);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((__int128 *)(v17 + 56), (uint64_t)v7))
        {
          if (v19)
          {
            v23 = (std::vector<int> *)(v17 + 56);
            goto LABEL_18;
          }
          goto LABEL_19;
        }
        if (!v19)
        {
          v22 = v17;
          v8 = (__int128 *)v23;
          v7 = (__int128 *)v17;
LABEL_18:
          ++v9;
          goto LABEL_3;
        }
        return;
    }
  }
}

__n128 std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(__int128 **a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;
  __int128 v6;
  uint64_t v7;
  void *v8;
  __n128 result;
  __int128 v10;
  __n128 v11;
  __int128 v12;

  v3 = *a2;
  v4 = **a1;
  v2 = *a1;
  v6 = (*a1)[1];
  v5 = *a1 + 1;
  v10 = v6;
  v7 = *((_QWORD *)v2 + 4);
  *v5 = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 4) = 0;
  v11 = *(__n128 *)((char *)v2 + 40);
  v12 = v4;
  *v2 = *(_OWORD *)v3;
  std::vector<int>::__move_assign((uint64_t)v5, (__n128 *)(v3 + 16));
  *(__int128 *)((char *)v2 + 40) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)v3 = v12;
  v8 = *(void **)(v3 + 16);
  if (v8)
  {
    *(_QWORD *)(v3 + 24) = v8;
    operator delete(v8);
  }
  *(_OWORD *)(v3 + 16) = v10;
  *(_QWORD *)(v3 + 32) = v7;
  result = v11;
  *(__n128 *)(v3 + 40) = v11;
  return result;
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;

  if (a1 != a2)
  {
    v4 = a1 + 56;
    if (a1 + 56 != a2)
    {
      v5 = 0;
      v6 = a1;
      do
      {
        v7 = v4;
        v8 = *(float *)(v6 + 56);
        if (v8 < *(float *)v6)
        {
          v20 = *(_QWORD *)(v6 + 60);
          v21 = *(_DWORD *)(v6 + 68);
          v9 = *(_QWORD *)(v6 + 72);
          v10 = *(_OWORD *)(v6 + 80);
          v11 = *(_OWORD *)(v6 + 96);
          *(_QWORD *)(v6 + 72) = 0;
          *(_QWORD *)(v6 + 80) = 0;
          *(_QWORD *)(v6 + 88) = 0;
          v12 = v5;
          v18 = v10;
          v19 = v11;
          while (1)
          {
            v13 = v12;
            v14 = a1 + v12;
            *(_OWORD *)(a1 + v12 + 56) = *(_OWORD *)(a1 + v12);
            std::vector<int>::__move_assign(a1 + v12 + 72, (__n128 *)(a1 + v12 + 16));
            *(_OWORD *)(v14 + 96) = *(_OWORD *)(v14 + 40);
            if (!v13)
              break;
            v12 = v13 - 56;
            if (v8 >= *(float *)(v14 - 56))
            {
              v15 = a1 + v13;
              goto LABEL_10;
            }
          }
          v15 = a1;
LABEL_10:
          *(float *)v15 = v8;
          *(_QWORD *)(v15 + 4) = v20;
          *(_DWORD *)(v15 + 12) = v21;
          v16 = *(void **)(v14 + 16);
          if (v16)
          {
            *(_QWORD *)(v15 + 24) = v16;
            operator delete(v16);
            v17 = a1 + v13;
            *(_QWORD *)(v17 + 24) = 0;
            *(_QWORD *)(v17 + 32) = 0;
          }
          *(_QWORD *)(v14 + 16) = v9;
          *(_OWORD *)(v15 + 24) = v18;
          *(_OWORD *)(v14 + 40) = v19;
        }
        v4 = v7 + 56;
        v5 += 56;
        v6 = v7;
      }
      while (v7 + 56 != a2);
    }
  }
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  void *v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;

  if (result != a2)
  {
    v3 = result + 56;
    if (result + 56 != a2)
    {
      v4 = result - 56;
      do
      {
        v5 = v3;
        v6 = *(float *)(result + 56);
        if (v6 < *(float *)result)
        {
          v14 = *(_QWORD *)(result + 60);
          v15 = *(_DWORD *)(result + 68);
          v7 = *(_OWORD *)(result + 72);
          v8 = *(_QWORD *)(result + 88);
          *(_QWORD *)(result + 72) = 0;
          *(_QWORD *)(result + 80) = 0;
          *(_QWORD *)(result + 88) = 0;
          v9 = v4;
          v12 = v7;
          v13 = *(_OWORD *)(result + 96);
          do
          {
            *(_OWORD *)(v9 + 112) = *(_OWORD *)(v9 + 56);
            std::vector<int>::__move_assign(v9 + 128, (__n128 *)(v9 + 72));
            *(_OWORD *)(v9 + 152) = *(_OWORD *)(v9 + 96);
            v10 = *(float *)v9;
            v9 -= 56;
          }
          while (v6 < v10);
          *(float *)(v9 + 112) = v6;
          *(_QWORD *)(v9 + 116) = v14;
          *(_DWORD *)(v9 + 124) = v15;
          v11 = *(void **)(v9 + 128);
          if (v11)
          {
            *(_QWORD *)(v9 + 136) = v11;
            operator delete(v11);
          }
          *(_OWORD *)(v9 + 128) = v12;
          *(_QWORD *)(v9 + 144) = v8;
          *(_OWORD *)(v9 + 152) = v13;
        }
        v3 = v5 + 56;
        v4 += 56;
        result = v5;
      }
      while (v5 + 56 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(__int128 *a1, __int128 *a2, float *a3)
{
  float v3;
  float v4;
  float **v5;
  float **v6;
  float *v8;
  float *v9;
  float *v10;

  v10 = (float *)a1;
  v8 = a3;
  v9 = (float *)a2;
  v3 = *(float *)a2;
  v4 = *a3;
  if (*(float *)a2 < *(float *)a1)
  {
    if (v4 < v3)
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v10, (uint64_t *)&v8);
      return 1;
    }
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v10, (uint64_t *)&v9);
    if (*v8 >= *v9)
      return 1;
    v5 = &v9;
    v6 = &v8;
LABEL_9:
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)v5, (uint64_t *)v6);
    return 2;
  }
  if (v4 < v3)
  {
    std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v9, (uint64_t *)&v8);
    if (*v9 >= *v10)
      return 1;
    v5 = &v10;
    v6 = &v9;
    goto LABEL_9;
  }
  return 0;
}

__int128 *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(std::vector<int> *this, unint64_t a2)
{
  float v3;
  std::__compressed_pair<int *> *p_end_cap;
  __int128 v5;
  std::vector<int>::pointer end;
  std::vector<int> *v7;
  float v8;
  std::vector<int> *v9;
  float v10;
  float v11;
  unint64_t v12;
  float v13;
  int *v14;
  __int128 v16;
  __int128 v17;
  int *v18;
  int end_high;
  unint64_t v20;
  std::vector<int> *v21;

  v20 = a2;
  v3 = *(float *)&this->__begin_;
  v18 = *(std::vector<int>::pointer *)((char *)&this->__begin_ + 4);
  end_high = HIDWORD(this->__end_);
  p_end_cap = &this->__end_cap_;
  v5 = *(_OWORD *)&this->__end_cap_.__value_;
  end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  v17 = *(_OWORD *)&this[1].__end_cap_.__value_;
  if (v3 >= *(float *)(a2 - 56))
  {
    v9 = (std::vector<int> *)((char *)this + 56);
    do
    {
      v7 = v9;
      if ((unint64_t)v9 >= a2)
        break;
      v9 = (std::vector<int> *)((char *)v9 + 56);
    }
    while (v3 >= *(float *)&v7->__begin_);
  }
  else
  {
    v7 = this;
    do
    {
      v8 = *(float *)&v7[2].__end_;
      v7 = (std::vector<int> *)((char *)v7 + 56);
    }
    while (v3 >= v8);
  }
  v21 = v7;
  v16 = v5;
  if ((unint64_t)v7 < a2)
  {
    do
    {
      v10 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v3 < v10);
    v20 = a2;
  }
  if ((unint64_t)v7 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>((__int128 **)&v21, (uint64_t *)&v20);
      v7 = v21;
      do
      {
        v11 = *(float *)&v7[2].__end_;
        v7 = (std::vector<int> *)((char *)v7 + 56);
      }
      while (v3 >= v11);
      v21 = v7;
      v12 = v20;
      do
      {
        v13 = *(float *)(v12 - 56);
        v12 -= 56;
      }
      while (v3 < v13);
      v20 = v12;
    }
    while ((unint64_t)v7 < v12);
  }
  if (&v7[-3].__end_cap_ != (std::__compressed_pair<int *> *)this)
  {
    *(_OWORD *)&this->__begin_ = *(_OWORD *)&v7[-3].__end_cap_.__value_;
    std::vector<int>::__move_assign((uint64_t)p_end_cap, (__n128 *)&v7[-2].__end_);
    *(_OWORD *)&this[1].__end_cap_.__value_ = *(_OWORD *)&v7[-1].__end_;
  }
  *(float *)&v7[-3].__end_cap_.__value_ = v3;
  HIDWORD(v7[-2].__begin_) = end_high;
  *(int **)((char *)&v7[-3].__end_cap_.__value_ + 4) = v18;
  v14 = v7[-2].__end_;
  if (v14)
  {
    v7[-2].__end_cap_.__value_ = v14;
    operator delete(v14);
  }
  *(_OWORD *)&v7[-2].__end_ = v16;
  v7[-1].__begin_ = end;
  *(_OWORD *)&v7[-1].__end_ = v17;
  return (__int128 *)v21;
}

uint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,std::__less<void,void> &>(std::vector<int> *this, unint64_t a2)
{
  uint64_t v4;
  float v5;
  std::__compressed_pair<int *> *p_end_cap;
  __int128 v7;
  std::vector<int>::pointer end;
  std::__compressed_pair<int *> *v9;
  float v10;
  char *v11;
  float v12;
  float v13;
  __int128 *v14;
  float v15;
  unint64_t v16;
  float v17;
  void *v18;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  int end_high;
  unint64_t v24;
  __int128 *v25;

  v4 = 0;
  v5 = *(float *)&this->__begin_;
  v22 = *(uint64_t *)((char *)&this->__begin_ + 4);
  end_high = HIDWORD(this->__end_);
  p_end_cap = &this->__end_cap_;
  v7 = *(_OWORD *)&this->__end_cap_.__value_;
  end = this[1].__end_;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = 0;
  this[1].__end_ = 0;
  v9 = &this[1].__end_cap_;
  v20 = v7;
  v21 = *(_OWORD *)&this[1].__end_cap_.__value_;
  do
  {
    v10 = *(float *)((char *)&this[2].__end_ + v4);
    v4 += 56;
  }
  while (v10 < v5);
  v11 = (char *)this + v4;
  v25 = (__int128 *)((char *)this + v4);
  if (v4 == 56)
  {
    do
    {
      if ((unint64_t)v11 >= a2)
        break;
      v13 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v13 >= v5);
  }
  else
  {
    do
    {
      v12 = *(float *)(a2 - 56);
      a2 -= 56;
    }
    while (v12 >= v5);
  }
  v24 = a2;
  v14 = (__int128 *)((char *)this + v4);
  if ((unint64_t)v11 < a2)
  {
    do
    {
      std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v25, (uint64_t *)&v24);
      v14 = v25;
      do
      {
        v15 = *((float *)v14 + 14);
        v14 = (__int128 *)((char *)v14 + 56);
      }
      while (v15 < v5);
      v25 = v14;
      v16 = v24;
      do
      {
        v17 = *(float *)(v16 - 56);
        v16 -= 56;
      }
      while (v17 >= v5);
      v24 = v16;
    }
    while ((unint64_t)v14 < v16);
  }
  if ((std::vector<int> *)((char *)v14 - 56) != this)
  {
    *(_OWORD *)&this->__begin_ = *(__int128 *)((char *)v14 - 56);
    std::vector<int>::__move_assign((uint64_t)p_end_cap, (__n128 *)((char *)v14 - 40));
    *(_OWORD *)&v9->__value_ = *(v14 - 1);
  }
  *((float *)v14 - 14) = v5;
  *((_DWORD *)v14 - 11) = end_high;
  *(_QWORD *)((char *)v14 - 52) = v22;
  v18 = (void *)*((_QWORD *)v14 - 5);
  if (v18)
  {
    *((_QWORD *)v14 - 4) = v18;
    operator delete(v18);
  }
  *(__int128 *)((char *)v14 - 40) = v20;
  *((_QWORD *)v14 - 3) = end;
  *(v14 - 1) = v21;
  return (uint64_t)v14 - 56;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float *v7;
  char *v8;
  int v9;
  __int128 *v10;
  float v11;
  uint64_t v12;
  __int128 v13;
  __n128 *v14;
  __int128 *v15;
  float *v16;
  __int128 *v17;
  void *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  char *v23;
  __int128 *v24;

  v2 = a2;
  v23 = (char *)a2;
  v24 = a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a2 - (uint64_t)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(float *)(a2 - 56);
      v23 = (char *)(a2 - 56);
      if (v6 < *(float *)a1)
      {
        std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v24, (uint64_t *)&v23);
        return 1;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), (float *)(a2 - 56));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), a1 + 7, (unsigned __int32 *)(a2 - 56));
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), a1 + 7, (__int128 *)((char *)a1 + 168), (unsigned __int32 *)(a2 - 56));
      return 1;
    default:
      v7 = (float *)(a1 + 7);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, (__int128 *)((char *)a1 + 56), (float *)a1 + 28);
      v8 = (char *)a1 + 168;
      if ((__int128 *)((char *)a1 + 168) == (__int128 *)v2)
        return 1;
      v9 = 0;
      v10 = a1 + 13;
      break;
  }
  while (1)
  {
    v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
      break;
LABEL_15:
    v7 = (float *)v8;
    v10 = (__int128 *)((char *)v10 + 56);
    v8 += 56;
    if (v8 == (char *)v2)
      return 1;
  }
  v21 = *(_QWORD *)(v8 + 4);
  v22 = *((_DWORD *)v8 + 3);
  v12 = *((_QWORD *)v8 + 2);
  v13 = *(_OWORD *)(v8 + 24);
  *((_QWORD *)v8 + 2) = 0;
  *((_QWORD *)v8 + 3) = 0;
  *((_QWORD *)v8 + 4) = 0;
  v19 = v13;
  v20 = *(_OWORD *)(v8 + 40);
  v14 = (__n128 *)v10;
  v15 = v24;
  while (1)
  {
    v16 = (float *)v14;
    v17 = (__int128 *)&v14[-6];
    *(__n128 *)((char *)v14 - 40) = v14[-6];
    std::vector<int>::__move_assign((uint64_t)&v14[-2].n128_i64[1], v14 - 5);
    *(_OWORD *)v16 = *(_OWORD *)(v16 - 14);
    if (v17 == v15)
      break;
    v14 = (__n128 *)(v16 - 14);
    if (v11 >= *(v16 - 38))
    {
      v15 = (__int128 *)(v16 - 24);
      break;
    }
  }
  *(float *)v15 = v11;
  *(_QWORD *)((char *)v15 + 4) = v21;
  *((_DWORD *)v15 + 3) = v22;
  v18 = (void *)*((_QWORD *)v16 - 10);
  if (v18)
  {
    *((_QWORD *)v15 + 3) = v18;
    operator delete(v18);
    *((_QWORD *)v16 - 9) = 0;
    *((_QWORD *)v16 - 8) = 0;
  }
  *((_QWORD *)v16 - 10) = v12;
  *(__int128 *)((char *)v15 + 24) = v19;
  *(_OWORD *)(v16 - 14) = v20;
  if (++v9 != 8)
  {
    v2 = (uint64_t)v23;
    goto LABEL_15;
  }
  return v8 + 56 == v23;
}

double std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(__int128 *a1, __int128 *a2, __int128 *a3, unsigned __int32 *a4)
{
  __n128 v8;
  unsigned __int32 *v10;
  __int128 *v11;
  __int128 *v12;
  __int128 *v13;

  v12 = a2;
  v13 = a1;
  v10 = a4;
  v11 = a3;
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a2, (float *)a3);
  v8.n128_u32[0] = *a4;
  if (*(float *)a4 < *(float *)a3)
  {
    v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v11, (uint64_t *)&v10);
    v8.n128_u32[0] = *(_DWORD *)v11;
    if (*(float *)v11 < *(float *)a2)
    {
      v8 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v12, (uint64_t *)&v11);
      v8.n128_u32[0] = *(_DWORD *)v12;
      if (*(float *)v12 < *(float *)a1)
        v8.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v13, (uint64_t *)&v12).n128_u64[0];
    }
  }
  return v8.n128_f64[0];
}

double std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, unsigned __int32 *a5)
{
  __n128 v10;
  unsigned __int32 *v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 *v16;

  v15 = a2;
  v16 = a1;
  v13 = a4;
  v14 = a3;
  v12 = a5;
  v10.n128_f64[0] = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a2, a3, (unsigned __int32 *)a4);
  v10.n128_u32[0] = *a5;
  if (*(float *)a5 < *(float *)a4)
  {
    v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v13, (uint64_t *)&v12);
    v10.n128_u32[0] = *(_DWORD *)v13;
    if (*(float *)v13 < *(float *)a3)
    {
      v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v14, (uint64_t *)&v13);
      v10.n128_u32[0] = *(_DWORD *)v14;
      if (*(float *)v14 < *(float *)a2)
      {
        v10 = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v15, (uint64_t *)&v14);
        v10.n128_u32[0] = *(_DWORD *)v15;
        if (*(float *)v15 < *(float *)a1)
          v10.n128_u64[0] = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v16, (uint64_t *)&v15).n128_u64[0];
      }
    }
  }
  return v10.n128_f64[0];
}

__int128 *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(float *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t v14;
  __int128 *v17;
  float *v18;

  v18 = a1;
  if (a1 != (float *)a2)
  {
    v6 = a2;
    v7 = a1;
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) / 56;
    if ((char *)a2 - (char *)a1 >= 57)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t)&a1[14 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, a4, v9, v12);
        v12 -= 56;
        --v11;
      }
      while (v11);
    }
    v17 = v6;
    if (v6 == a3)
    {
      a3 = v6;
    }
    else
    {
      v13 = v6;
      do
      {
        if (*(float *)v13 < *v18)
        {
          std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:ne180100]<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *&>(&v17, (uint64_t *)&v18);
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v18, a4, v9, (uint64_t)v18);
          v13 = v17;
        }
        v13 = (__int128 *)((char *)v13 + 56);
        v17 = v13;
      }
      while (v13 != a3);
      v7 = v18;
      v8 = (char *)v6 - (char *)v18;
    }
    if (v8 >= 57)
    {
      v14 = v8 / 0x38uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>((uint64_t)v7, (uint64_t)v6, a4, v14);
        v6 = (__int128 *)((char *)v6 - 56);
      }
      while (v14-- > 2);
      return v17;
    }
  }
  return a3;
}

void std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  __n128 *v5;
  int64_t v7;
  int64_t v9;
  __n128 *v10;
  float v11;
  __n128 v12;
  unint64_t v13;
  __n128 *v14;
  __n128 *v15;
  uint64_t v16;
  int64_t v17;
  void *v18;
  __n128 v19;
  __n128 v20;
  unint64_t v21;
  unsigned __int32 v22;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = (__n128 *)a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x6DB6DB6DB6DB6DB7 * ((a4 - a1) >> 3))
    {
      v9 = (0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3)) | 1;
      v10 = (__n128 *)(a1 + 56 * v9);
      if ((uint64_t)(0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3) + 2) < a3 && v10->n128_f32[0] < v10[3].n128_f32[2])
      {
        v10 = (__n128 *)((char *)v10 + 56);
        v9 = 0xDB6DB6DB6DB6DB6ELL * ((a4 - a1) >> 3) + 2;
      }
      v11 = *(float *)a4;
      if (v10->n128_f32[0] >= *(float *)a4)
      {
        v21 = *(_QWORD *)(a4 + 4);
        v22 = *(_DWORD *)(a4 + 12);
        v12 = *(__n128 *)(a4 + 16);
        v13 = *(_QWORD *)(a4 + 32);
        *(_QWORD *)(a4 + 16) = 0;
        *(_QWORD *)(a4 + 24) = 0;
        *(_QWORD *)(a4 + 32) = 0;
        v19 = v12;
        v20 = *(__n128 *)(a4 + 40);
        do
        {
          v14 = v5;
          v5 = v10;
          *v14 = *v10;
          v15 = v10 + 1;
          std::vector<int>::__move_assign((uint64_t)&v14[1], v10 + 1);
          *(__n128 *)((char *)v14 + 40) = *(__n128 *)((char *)v5 + 40);
          if (v7 < v9)
            break;
          v16 = 2 * v9;
          v9 = (2 * v9) | 1;
          v10 = (__n128 *)(a1 + 56 * v9);
          v17 = v16 + 2;
          if (v17 < a3 && v10->n128_f32[0] < v10[3].n128_f32[2])
          {
            v10 = (__n128 *)((char *)v10 + 56);
            v9 = v17;
          }
        }
        while (v10->n128_f32[0] >= v11);
        v5->n128_f32[0] = v11;
        v5->n128_u32[3] = v22;
        *(unint64_t *)((char *)v5->n128_u64 + 4) = v21;
        v18 = (void *)v5[1].n128_u64[0];
        if (v18)
        {
          v5[1].n128_u64[1] = (unint64_t)v18;
          operator delete(v18);
          v15->n128_u64[0] = 0;
          v15->n128_u64[1] = 0;
          v15[1].n128_u64[0] = 0;
        }
        v5[1] = v19;
        v5[2].n128_u64[0] = v13;
        *(__n128 *)((char *)v5 + 40) = v20;
      }
    }
  }
}

__n128 std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void>,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  void *v16;
  __n128 result;
  void *v18;
  __n128 v19;
  __int128 v20;

  if (a4 >= 2)
  {
    v7 = *(_OWORD *)a1;
    v8 = *(_QWORD *)(a1 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
    v19 = *(__n128 *)(a1 + 40);
    v20 = v7;
    v11 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, a3, a4);
    v12 = v11;
    v13 = (_OWORD *)(a2 - 56);
    v14 = (_QWORD *)(v11 + 16);
    if (v11 == a2 - 56)
    {
      *(_OWORD *)v11 = v20;
      v18 = *(void **)(v11 + 16);
      if (v18)
      {
        *(_QWORD *)(v12 + 24) = v18;
        operator delete(v18);
        *v14 = 0;
        v14[1] = 0;
        v14[2] = 0;
      }
      *(_QWORD *)(v12 + 16) = v8;
      *(_QWORD *)(v12 + 24) = v9;
      *(_QWORD *)(v12 + 32) = v10;
      result = v19;
      *(__n128 *)(v12 + 40) = v19;
    }
    else
    {
      *(_OWORD *)v11 = *v13;
      std::vector<int>::__move_assign(v11 + 16, (__n128 *)(a2 - 40));
      *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 - 16);
      v15 = v12 + 56;
      *v13 = v20;
      v16 = *(void **)(a2 - 40);
      if (v16)
      {
        *(_QWORD *)(a2 - 32) = v16;
        operator delete(v16);
        *(_QWORD *)(a2 - 40) = 0;
        *(_QWORD *)(a2 - 32) = 0;
        *(_QWORD *)(a2 - 24) = 0;
      }
      *(_QWORD *)(a2 - 40) = v8;
      *(_QWORD *)(a2 - 32) = v9;
      *(_QWORD *)(a2 - 24) = v10;
      *(__n128 *)(a2 - 16) = v19;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(a1, v15, a3, 0x6DB6DB6DB6DB6DB7 * ((v15 - a1) >> 3));
    }
  }
  return result;
}

void sub_1ADC96120(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = (_OWORD *)a1;
    a1 += 56 * v5 + 56;
    v9 = 2 * v5;
    v5 = (2 * v5) | 1;
    v10 = v9 + 2;
    if (v10 < a3 && *(float *)a1 < *(float *)(a1 + 56))
    {
      a1 += 56;
      v5 = v10;
    }
    *v8 = *(_OWORD *)a1;
    std::vector<int>::__move_assign((uint64_t)(v8 + 1), (__n128 *)(a1 + 16));
    *(_OWORD *)((char *)v8 + 40) = *(_OWORD *)(a1 + 40);
  }
  while (v5 <= v7);
  return a1;
}

void std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  __int128 v10;
  uint64_t v11;
  _OWORD *v12;
  _QWORD *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  int v18;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = v4 >> 1;
    v7 = a1 + 56 * (v4 >> 1);
    v8 = a2 - 56;
    v9 = *(float *)(a2 - 56);
    if (*(float *)v7 < v9)
    {
      v17 = *(_QWORD *)(a2 - 52);
      v18 = *(_DWORD *)(a2 - 44);
      v10 = *(_OWORD *)(a2 - 40);
      v11 = *(_QWORD *)(a2 - 24);
      *(_QWORD *)(a2 - 40) = 0;
      *(_QWORD *)(a2 - 32) = 0;
      *(_QWORD *)(a2 - 24) = 0;
      v15 = v10;
      v16 = *(_OWORD *)(a2 - 16);
      do
      {
        v12 = (_OWORD *)v8;
        v8 = v7;
        *v12 = *(_OWORD *)v7;
        v13 = (_QWORD *)(v7 + 16);
        std::vector<int>::__move_assign((uint64_t)(v12 + 1), (__n128 *)(v7 + 16));
        *(_OWORD *)((char *)v12 + 40) = *(_OWORD *)(v8 + 40);
        if (!v6)
          break;
        v6 = (v6 - 1) >> 1;
        v7 = a1 + 56 * v6;
      }
      while (*(float *)v7 < v9);
      *(float *)v8 = v9;
      *(_QWORD *)(v8 + 4) = v17;
      *(_DWORD *)(v8 + 12) = v18;
      v14 = *(void **)(v8 + 16);
      if (v14)
      {
        *(_QWORD *)(v8 + 24) = v14;
        operator delete(v14);
        *v13 = 0;
        v13[1] = 0;
        v13[2] = 0;
      }
      *(_OWORD *)(v8 + 16) = v15;
      *(_QWORD *)(v8 + 32) = v11;
      *(_OWORD *)(v8 + 40) = v16;
    }
  }
}

_QWORD *std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  _QWORD **v10;
  _QWORD *i;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (_QWORD *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = operator new(0x20uLL);
  *i = 0;
  i[1] = v7;
  i[2] = **a4;
  i[3] = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *i = *v20;
LABEL_38:
    *v20 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*i)
  {
    v21 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1ADC96514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::Hyp(uint64_t a1, int a2, int a3, int a4, char a5, uint64_t a6, float a7, float a8)
{
  float v16;
  float v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD *v21;
  unint64_t v22;
  _DWORD *v23;
  _DWORD *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  int v42;

  *(_DWORD *)a1 = *(_DWORD *)a6;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>((char *)(a1 + 8), *(_QWORD **)(a6 + 8), *(_QWORD **)(a6 + 16), (uint64_t)(*(_QWORD *)(a6 + 16) - *(_QWORD *)(a6 + 8)) >> 4);
  v16 = *(float *)(a6 + 44);
  v17 = *(float *)(a6 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v18 = (void **)(a1 + 56);
  *(_DWORD *)(a1 + 32) = a2;
  *(_DWORD *)(a1 + 36) = a3;
  *(_DWORD *)(a1 + 40) = a4;
  *(float *)(a1 + 44) = v16 + a7;
  *(float *)(a1 + 48) = v17 + a8;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::unordered_map<int,std::vector<int>>::unordered_map(a1 + 80, a6 + 80);
  std::unordered_map<int,int>::unordered_map(a1 + 120, a6 + 120);
  std::unordered_map<int,int>::unordered_map(a1 + 160, a6 + 160);
  *(_QWORD *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 200) = a5;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_BYTE *)(a1 + 272) = 0;
  v19 = *(_QWORD *)(a6 + 56);
  if ((unint64_t)(*(_QWORD *)(a6 + 64) - v19) <= 4)
  {
    v23 = *(_DWORD **)(a1 + 64);
  }
  else
  {
    v20 = (_QWORD *)(a1 + 72);
    v21 = *(_DWORD **)(a1 + 64);
    v22 = 1;
    do
    {
      if ((unint64_t)v21 >= *v20)
      {
        v24 = *v18;
        v25 = ((char *)v21 - (_BYTE *)*v18) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v27 = *v20 - (_QWORD)v24;
        if (v27 >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v28);
          v24 = *(_DWORD **)(a1 + 56);
          v21 = *(_DWORD **)(a1 + 64);
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[4 * v25];
        *(_DWORD *)v30 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v30 + 4;
        while (v21 != v24)
        {
          v31 = *--v21;
          *((_DWORD *)v30 - 1) = v31;
          v30 -= 4;
        }
        *(_QWORD *)(a1 + 56) = v30;
        *(_QWORD *)(a1 + 64) = v23;
        *(_QWORD *)(a1 + 72) = &v29[4 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *v21 = *(_DWORD *)(v19 + 4 * v22);
        v23 = v21 + 1;
      }
      *(_QWORD *)(a1 + 64) = v23;
      ++v22;
      v19 = *(_QWORD *)(a6 + 56);
      v21 = v23;
    }
    while (v22 < (*(_QWORD *)(a6 + 64) - v19) >> 2);
  }
  v32 = *(_QWORD *)(a1 + 72);
  if ((unint64_t)v23 >= v32)
  {
    v34 = *v18;
    v35 = ((char *)v23 - (_BYTE *)*v18) >> 2;
    v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v37 = v32 - (_QWORD)v34;
    if (v37 >> 1 > v36)
      v36 = v37 >> 1;
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
      v38 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v38 = v36;
    if (v38)
    {
      v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 72, v38);
      v34 = *(_DWORD **)(a1 + 56);
      v23 = *(_DWORD **)(a1 + 64);
    }
    else
    {
      v39 = 0;
    }
    v40 = &v39[4 * v35];
    v41 = &v39[4 * v38];
    *(_DWORD *)v40 = a4;
    v33 = v40 + 4;
    while (v23 != v34)
    {
      v42 = *--v23;
      *((_DWORD *)v40 - 1) = v42;
      v40 -= 4;
    }
    *(_QWORD *)(a1 + 56) = v40;
    *(_QWORD *)(a1 + 64) = v33;
    *(_QWORD *)(a1 + 72) = v41;
    if (v34)
      operator delete(v34);
  }
  else
  {
    *v23 = a4;
    v33 = v23 + 1;
  }
  *(_QWORD *)(a1 + 64) = v33;
  return a1;
}

void sub_1ADC96804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, void **a16)
{
  uint64_t v16;
  void **v17;
  void *v19;

  kaldi::CuMatrix<float>::~CuMatrix(a10);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&a16);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a11);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a13);
  v19 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v16 + 64) = v19;
    operator delete(v19);
  }
  a16 = a14;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a16);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__init_with_size[abi:ne180100]<std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*,std::shared_ptr<kaldi::quasar::ComputeEngineBufferItf>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADC96908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,std::vector<int>>::unordered_map(uint64_t a1, uint64_t a2)
{
  int *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(int **)(a2 + 16); i; i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::vector<int>> const&>(a1, i + 4, (uint64_t)(i + 4));
  return a1;
}

void sub_1ADC96978(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__emplace_unique_key_args<int,std::pair<int const,std::vector<int>> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  uint64_t **v8;
  uint64_t *result;
  unint64_t v10;
  float v11;
  float v12;
  _BOOL8 v13;
  unint64_t v14;
  unint64_t v15;
  size_t v16;
  _QWORD *v17;
  unint64_t v18;
  _QWORD v19[3];

  v5 = *a2;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v7 = (uint8x8_t)vcnt_s8((int8x8_t)v6);
    v7.i16[0] = vaddlv_u8(v7);
    if (v7.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 <= v5)
        v3 = v5 % v6;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
    v8 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v8)
    {
      for (result = *v8; result; result = (uint64_t *)*result)
      {
        v10 = result[1];
        if (v10 == v5)
        {
          if (*((_DWORD *)result + 4) == (_DWORD)v5)
            return result;
        }
        else
        {
          if (v7.u32[0] > 1uLL)
          {
            if (v10 >= v6)
              v10 %= v6;
          }
          else
          {
            v10 &= v6 - 1;
          }
          if (v10 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__construct_node_hash<std::pair<int const,std::vector<int>> const&>(a1, *a2, a3, (uint64_t)v19);
  v11 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v12 = *(float *)(a1 + 32);
  if (!v6 || (float)(v12 * (float)v6) < v11)
  {
    v13 = 1;
    if (v6 >= 3)
      v13 = (v6 & (v6 - 1)) != 0;
    v14 = v13 | (2 * v6);
    v15 = vcvtps_u32_f32(v11 / v12);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v16);
    v6 = *(_QWORD *)(a1 + 8);
    if ((v6 & (v6 - 1)) != 0)
    {
      if (v6 <= v5)
        v3 = v5 % v6;
      else
        v3 = v5;
    }
    else
    {
      v3 = (v6 - 1) & v5;
    }
  }
  v17 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v17)
  {
    *(_QWORD *)v19[0] = *v17;
    *v17 = v19[0];
  }
  else
  {
    *(_QWORD *)v19[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v19[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v19[0])
    {
      v18 = *(_QWORD *)(*(_QWORD *)v19[0] + 8);
      if ((v6 & (v6 - 1)) != 0)
      {
        if (v18 >= v6)
          v18 %= v6;
      }
      else
      {
        v18 &= v6 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v19[0];
    }
  }
  result = (uint64_t *)v19[0];
  ++*(_QWORD *)(a1 + 24);
  return result;
}

void sub_1ADC96BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,std::vector<int>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<int>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<int>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<int>>>>::__construct_node_hash<std::pair<int const,std::vector<int>> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x30uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  *((_DWORD *)v8 + 4) = *(_DWORD *)a3;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v8 + 3, *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADC96C44(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::Hyp::~Hyp(uint64_t a1)
{
  void *v2;
  void **v4;

  kaldi::CuMatrix<float>::~CuMatrix(a1 + 232);
  v4 = (void **)(a1 + 208);
  std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 160);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 120);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(a1 + 80);
  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 8);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v4);
  return a1;
}

void std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

TFileObject *compileAlt(const TFileObject *a1, TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  int v8;
  std::exception_vtbl *v9;
  uint64_t v10;
  std::exception *v11;
  void **v12;
  const __int32 **v13;
  const __int32 *v14;
  size_t v15;
  uint64_t v16;
  __int32 *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  char v21;
  int v22;
  void **v23;
  uint64_t v24;
  void **v25;
  void **v26;
  int v27;
  void **v28;
  uint64_t v29;
  void **v30;
  void **v31;
  size_t v32;
  uint64_t v33;
  __int32 *v34;
  _QWORD *v35;
  const char *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v43;
  std::exception_vtbl *v44;
  uint64_t v45;
  std::exception *v46;
  void **v47;
  int64x2_t *v48;
  _QWORD *exception;
  const char *v50;
  _QWORD *v51;
  void *v52[2];
  char v53;
  void *__p[2];
  char v55;
  char v56;
  std::exception v57;
  int64x2_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*((_DWORD *)a1 + 10))
  {
    if (TLexicon::checkName((uint64_t)a3, *((int **)a1 + 3), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)a1);
      v43 = v58.i8[15];
      v44 = v57.__vftable;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      v46 = &v57;
      if (v43 < 0)
        v46 = (std::exception *)v44;
      if (v55 >= 0)
        v47 = __p;
      else
        v47 = (void **)__p[0];
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v45, v46, v47);
      if (v55 < 0)
        operator delete(__p[0]);
      if (v58.i8[15] < 0)
        operator delete(v57.__vftable);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(&v57, (__int128 *)__p);
      v57.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v59 >= 0)
        v48 = &v58;
      else
        v48 = (int64x2_t *)v58.i64[0];
      conditionalAssert(v48->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 155);
      TException::~TException(&v57);
      if (v55 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v57, "");
      TException::TException(exception, (__int128 *)&v57);
      *exception = &unk_1E5D16668;
    }
    if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone((uint64_t)a3, *((__int32 **)a1 + 3)))
    {
      loggableFileObject((uint64_t *)a1);
      v8 = v58.i8[15];
      v9 = v57.__vftable;
      loggableUnicode(*((unsigned int **)a1 + 3), __p);
      v11 = &v57;
      if (v8 < 0)
        v11 = (std::exception *)v9;
      if (v55 >= 0)
        v12 = __p;
      else
        v12 = (void **)__p[0];
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v10, v11, v12);
      if (v55 < 0)
        operator delete(__p[0]);
      if (v58.i8[15] < 0)
        operator delete(v57.__vftable);
    }
    v14 = (const __int32 *)*((_QWORD *)a1 + 3);
    v13 = (const __int32 **)((char *)a1 + 24);
    v15 = wcslen(v14);
    if ((v15 + 1) >> 62)
      v16 = -1;
    else
      v16 = 4 * (v15 + 1);
    v17 = (__int32 *)TAllocator::allocate(a4, v16);
    wcscpy(v17, *v13);
    v18 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v18 + 10) = 1;
    v18[3] = v17;
    v18[4] = 0;
    *v18 = 0;
    v18[1] = dword_1AE16D430;
    v18[2] = 0;
    goto LABEL_64;
  }
  v57.__vftable = (std::exception_vtbl *)&unk_1AE16DB04;
  v58 = vdupq_n_s64(1uLL);
  v59 = -1;
  if (TFileObject::verify((uint64_t)a1, (uint64_t)&v57, 1uLL, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "");
    TException::TException(__p, (__int128 *)v52);
    __p[0] = &unk_1E5D16668;
    if (v56 >= 0)
      v50 = (const char *)&__p[1];
    else
      v50 = (const char *)__p[1];
    conditionalAssert(v50, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 88);
    TException::~TException((std::exception *)__p);
    if (v53 < 0)
      operator delete(v52[0]);
    v51 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v51, (__int128 *)__p);
    *v51 = &unk_1E5D16668;
  }
  v19 = *((_QWORD *)a1 + 3);
  if (!v19)
  {
    v18 = 0;
    goto LABEL_62;
  }
  v20 = 0;
  v18 = 0;
  v21 = 0;
  do
  {
    if ((TFileObject::verify((TFileObject *)v19, 0, 0) & 1) != 0)
      goto LABEL_32;
    if (TLexicon::checkName((uint64_t)a3, *(int **)(v19 + 24), 1, 0xFFFFFFFFFFFFFFFFLL))
    {
      loggableFileObject((uint64_t *)v19);
      v22 = v55;
      v23 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v19 + 24), v52);
      v25 = __p;
      if (v22 < 0)
        v25 = v23;
      if (v53 >= 0)
        v26 = v52;
      else
        v26 = (void **)v52[0];
      tknPrintf("Error: %s'%s' is an invalid token name.\n", v24, v25, v26);
      if (v53 < 0)
        operator delete(v52[0]);
      if (v55 < 0)
        operator delete(__p[0]);
LABEL_32:
      v21 = 1;
      goto LABEL_33;
    }
    if (*(_BYTE *)(getPropCheckTokenExistence() + 8) && !TLexicon::findHeadClone((uint64_t)a3, *(__int32 **)(v19 + 24)))
    {
      loggableFileObject((uint64_t *)v19);
      v27 = v55;
      v28 = (void **)__p[0];
      loggableUnicode(*(unsigned int **)(v19 + 24), v52);
      v30 = __p;
      if (v27 < 0)
        v30 = v28;
      if (v53 >= 0)
        v31 = v52;
      else
        v31 = (void **)v52[0];
      tknPrintf("Warning: %s'%s' isn't lexicalized.\n", v29, v30, v31);
      if (v53 < 0)
        operator delete(v52[0]);
      if (v55 < 0)
        operator delete(__p[0]);
    }
    v32 = wcslen(*(const __int32 **)(v19 + 24));
    if ((v32 + 1) >> 62)
      v33 = -1;
    else
      v33 = 4 * (v32 + 1);
    v34 = (__int32 *)TAllocator::allocate(a4, v33);
    wcscpy(v34, *(const __int32 **)(v19 + 24));
    v35 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v35 + 10) = 1;
    v35[3] = v34;
    v35[4] = 0;
    *v35 = 0;
    v35[1] = dword_1AE16D430;
    v35[2] = 0;
    if (v20)
      v20[2] = v35;
    if (!v18)
      v18 = v35;
    v20 = v35;
LABEL_33:
    v19 = *(_QWORD *)(v19 + 16);
  }
  while (v19);
  if ((v21 & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v52, "");
    TException::TException(__p, (__int128 *)v52);
    __p[0] = &unk_1E5D16668;
    if (v56 >= 0)
      v36 = (const char *)&__p[1];
    else
      v36 = (const char *)__p[1];
    conditionalAssert(v36, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 130);
    TException::~TException((std::exception *)__p);
    if (v53 < 0)
      operator delete(v52[0]);
    v37 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v37, (__int128 *)__p);
    *v37 = &unk_1E5D16668;
  }
LABEL_62:
  if (v18[2])
  {
    v38 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v38 + 10) = 0;
    v38[3] = v18;
    v38[4] = 0;
    *v38 = 0;
    v38[1] = dword_1AE16D878;
    v38[2] = 0;
    v18 = v38;
  }
LABEL_64:
  if (!a2)
    return (TFileObject *)v18;
  if (!wcscmp(*((const __int32 **)a2 + 1), dword_1AE16D448))
  {
    v40 = *((_QWORD *)a2 + 3);
    do
    {
      v41 = v40;
      v40 = *(_QWORD *)(v40 + 16);
    }
    while (v40);
    *(_QWORD *)(v41 + 16) = v18;
  }
  else
  {
    *((_QWORD *)a2 + 2) = v18;
    v39 = TAllocator::allocate(a4, 48);
    *((_DWORD *)v39 + 10) = 0;
    v39[3] = a2;
    v39[4] = 0;
    v39[1] = dword_1AE16D448;
    v39[2] = 0;
    a2 = (TFileObject *)v39;
    *v39 = 0;
  }
  return a2;
}

void sub_1ADC973E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::exception a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  void *v29;
  int v30;

  if (a29 < 0)
  {
    operator delete(__p);
    if ((v30 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v30)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v29);
  goto LABEL_6;
}

void TArrayObject::TArrayObject(TArrayObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  void **v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned int *v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  TFileObject **v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  void **v17;
  uint64_t v18;
  void **v19;
  TLocaleInfo *v20;
  TLocaleInfo *v21;
  const char *v22;
  _QWORD *exception;
  char *v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  char v31;
  char v32;

  *((_QWORD *)this + 1) = 0;
  v26 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v5 = (void **)((char *)this + 32);
  *(_QWORD *)this = &unk_1E5D16168;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v32 = 0;
  v6 = *((_QWORD *)a2 + 3);
  if (!v6)
    return;
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), dword_1AE16D458))
    {
      if (*((char *)this + 31) < 0)
      {
        if (!*((_QWORD *)this + 2))
        {
LABEL_25:
          MEMORY[0x1AF44C9E0](v26, *(_QWORD *)(v6 + 24));
          goto LABEL_33;
        }
      }
      else if (!*((_BYTE *)this + 31))
      {
        goto LABEL_25;
      }
      loggableFileObject((uint64_t *)v6);
      if (v30 >= 0)
        v17 = __p;
      else
        v17 = (void **)__p[0];
      tknPrintf("Error: %sRedefinition\n", v16, v17);
    }
    else
    {
      v7 = **(_DWORD **)(v6 + 8);
      if ((v8 & 1) == 0
      {
        v20 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v20);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
      }
      if ((int)v7 < 48
        || v7 >= 0x3A
        && (v7 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7) == -1))
      {
        loggableFileObject((uint64_t *)v6);
        if (v30 >= 0)
          v15 = __p;
        else
          v15 = (void **)__p[0];
        tknPrintf("Error: %sInvalid attribute\n", v14, v15);
      }
      else
      {
        v9 = *(unsigned int **)(v6 + 8);
        if ((v10 & 1) == 0
        {
          v21 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v21);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
        }
        v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9, (BOOL *)&v32);
        if (!v32 && v11 >> 4 < 0x271)
        {
          v12 = v11;
          v13 = (TFileObject **)*((_QWORD *)this + 4);
          if (v11 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 5) - (_QWORD)v13) >> 3))
          {
            std::vector<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::reserve(v5, 2 * (v11 + 1));
            __p[0] = 0;
            std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v5, v12 + 1, __p);
            v13 = (TFileObject **)*v5;
          }
          *((_QWORD *)*v5 + v12) = compileAlt((const TFileObject *)v6, v13[v12], a3, a4);
          goto LABEL_33;
        }
        loggableFileObject((uint64_t *)v6);
        if (v30 >= 0)
          v19 = __p;
        else
          v19 = (void **)__p[0];
        tknPrintf("Error: %sBad index (not an integer or greater than 10000)\n", v18, v19);
      }
    }
    if (v30 < 0)
      operator delete(__p[0]);
    v32 = 1;
LABEL_33:
    v6 = *(_QWORD *)(v6 + 16);
  }
  while (v6);
  if (v32)
  {
    std::string::basic_string[abi:ne180100]<0>(v27, "");
    TException::TException(__p, (__int128 *)v27);
    __p[0] = &unk_1E5D16668;
    if (v31 >= 0)
      v22 = (const char *)&__p[1];
    else
      v22 = (const char *)__p[1];
    conditionalAssert(v22, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 286);
    TException::~TException((std::exception *)__p);
    if (v28 < 0)
      operator delete(v27[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (__int128 *)__p);
    *exception = &unk_1E5D16668;
  }
}

void sub_1ADC97884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void *v28;

  MEMORY[0x1AF44D190](v24, 0x1070C40ADD13FEBLL);
  v28 = *v26;
  if (*v26)
  {
    *(_QWORD *)(v25 + 40) = v28;
    operator delete(v28);
  }
  *(_QWORD *)v25 = &unk_1E5D16690;
  if (*(char *)(v25 + 31) < 0)
    operator delete(*a12);
  _Unwind_Resume(a1);
}

uint64_t TArrayObject::checkNoGap(TArrayObject *this, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  char v6;
  unsigned int **v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  void **v11;
  void *__p[2];
  char v14;

  if (a2 >= a3)
  {
    v6 = 0;
  }
  else
  {
    v4 = a2;
    v6 = 0;
    v7 = (unsigned int **)((char *)this + 8);
    do
    {
      v8 = *((_QWORD *)this + 4);
      if (v4 >= (*((_QWORD *)this + 5) - v8) >> 3 || !*(_QWORD *)(v8 + 8 * v4))
      {
        v9 = (unsigned int *)v7;
        if (*((char *)this + 31) < 0)
          v9 = *v7;
        loggableUnicode(v9, __p);
        if (v14 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        tknPrintf("Error: Array '%s' : Attribute '%llu' : Missing declaration\n", v10, v11, v4);
        if (v14 < 0)
          operator delete(__p[0]);
        v6 = 1;
      }
      ++v4;
    }
    while (a3 != v4);
  }
  return v6 & 1;
}

void sub_1ADC97A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TDigitObject::TDigitObject(TDigitObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  _QWORD *v8;
  int v9;
  uint64_t i;
  unsigned int *v11;
  unsigned __int8 v12;
  unsigned int v13;
  std::exception_vtbl *v14;
  _QWORD *exception;
  std::exception_vtbl *v16;
  _QWORD *v17;
  TLocaleInfo *v18;
  char *v19;
  void *__p[2];
  char v21;
  std::exception v22[3];
  char v23;
  BOOL v24;
  void *v25;
  int64x2_t v26;
  uint64_t v27;
  void *v28;
  int64x2_t v29;
  uint64_t v30;
  void *v31;
  int64x2_t v32;
  uint64_t v33;
  void *v34;
  int64x2_t v35;
  uint64_t v36;
  void *v37;
  int64x2_t v38;
  uint64_t v39;
  void *v40;
  int64x2_t v41;
  uint64_t v42;
  void *v43;
  int64x2_t v44;
  uint64_t v45;
  void *v46;
  int64x2_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  __int128 v54;
  __int32 *v55;
  uint64_t v56;
  __int128 v57;
  __int32 *v58;
  uint64_t v59;
  __int128 v60;
  __int32 *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v19 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (_QWORD *)((char *)this + 32);
  *(_QWORD *)this = &off_1E5D16200;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v25 = &unk_1AE16D46C;
  v26 = vdupq_n_s64(1uLL);
  v27 = -1;
  v28 = &unk_1AE16D474;
  v29 = v26;
  v30 = -1;
  v31 = &unk_1AE16D47C;
  v32 = v26;
  v33 = -1;
  v34 = &unk_1AE16D484;
  v35 = v26;
  v36 = -1;
  v37 = &unk_1AE16D48C;
  v38 = v26;
  v39 = -1;
  v40 = &unk_1AE16D494;
  v41 = v26;
  v42 = -1;
  v43 = &unk_1AE16D49C;
  v44 = v26;
  v45 = -1;
  v46 = &unk_1AE16D4A4;
  v47 = v26;
  v48 = -1;
  v49 = &unk_1AE16D4AC;
  v50 = 1;
  v51 = xmmword_1AE13F780;
  v52 = &unk_1AE16D4B4;
  v53 = 1;
  v54 = xmmword_1AE13F780;
  v55 = dword_1AE16D4BC;
  v56 = 3;
  v57 = xmmword_1AE13F780;
  v58 = dword_1AE16D4D8;
  v59 = 3;
  v60 = xmmword_1AE13F780;
  v61 = dword_1AE16D458;
  v62 = 0;
  v63 = xmmword_1AE13F780;
  v9 = TFileObject::verify((uint64_t)a2, (uint64_t)&v25, 0xDuLL, 1);
  v24 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v22, (__int128 *)__p);
    v22[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v23 >= 0)
      v14 = (std::exception_vtbl *)&v22[1];
    else
      v14 = v22[1].__vftable;
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 422);
    TException::~TException(v22);
    if (v21 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    TException::TException(exception, (__int128 *)v22);
    *exception = &unk_1E5D16668;
  }
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  v22[0].__vftable = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v8, 0xAuLL, v22);
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D458))
    {
      v24 = TFileObject::verify((TFileObject *)i, 0, 0);
      MEMORY[0x1AF44C9E0](v19, *(_QWORD *)(i + 24));
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D4BC))
    {
      *((_QWORD *)this + 7) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 7), a3, a4);
    }
    else if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D4D8))
    {
      *((_QWORD *)this + 8) = compileAlt((const TFileObject *)i, *((TFileObject **)this + 8), a3, a4);
    }
    else
    {
      v11 = *(unsigned int **)(i + 8);
      if ((v12 & 1) == 0
      {
        v18 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v18);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v18;
      }
      v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v24);
      *(_QWORD *)(*v8 + 8 * v13) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 8 * v13), a3, a4);
    }
  }
  if (v24)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v22, (__int128 *)__p);
    v22[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v23 >= 0)
      v16 = (std::exception_vtbl *)&v22[1];
    else
      v16 = v22[1].__vftable;
    conditionalAssert((const char *)v16, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 453);
    TException::~TException(v22);
    if (v21 < 0)
      operator delete(__p[0]);
    v17 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    TException::TException(v17, (__int128 *)v22);
    *v17 = &unk_1E5D16668;
  }
}

void sub_1ADC97F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void **v23;
  void *v25;

  MEMORY[0x1AF44D190](a9, 0x1070C40ADD13FEBLL);
  v25 = *v23;
  if (*v23)
  {
    *(_QWORD *)(v22 + 40) = v25;
    operator delete(v25);
  }
  *(_QWORD *)v22 = &unk_1E5D16690;
  if (*(char *)(v22 + 31) < 0)
    operator delete(*a10);
  _Unwind_Resume(a1);
}

const char *TDigitObject::build(const char *result, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *this, TLexicon *a6)
{
  unsigned int v6;
  unsigned int *v10;
  unsigned __int8 v11;
  int DigitExtended;
  unsigned int v13;
  unint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned __int8 v17;
  int v18;
  unint64_t v19;
  TLocaleInfo *v20;
  uint64_t v21;
  TVertex *v22;
  unsigned int v23;
  TVertex *v24;
  unint64_t v25;
  __int128 *i;
  unint64_t v27;
  TVertex *j;
  TVertex *v29;
  __int128 v30;
  TLocaleInfo *v31;
  unsigned int *v32;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  v34 = (uint64_t)result;
  v6 = *a2;
  if (*a2)
  {
    v10 = a2;
    do
    {
      if ((v11 & 1) == 0
      {
        v31 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v31);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
      }
      DigitExtended = v6 - 48;
      if ((int)v6 < 48)
        goto LABEL_8;
      if (v6 <= 0x39)
        goto LABEL_9;
      if (v6 < 0x660)
LABEL_8:
        DigitExtended = -1;
      else
        DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
LABEL_9:
      v13 = *v10;
      if (*v10)
      {
        v14 = 0;
        v15 = v10;
        v16 = v10 + 1;
        while (1)
        {
          if ((v17 & 1) == 0
          {
            v20 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v20);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v20;
          }
          v18 = v13 - 48;
          if ((int)v13 < 48)
            goto LABEL_16;
          if (v13 <= 0x39)
            goto LABEL_17;
          if (v13 < 0x660)
LABEL_16:
            v18 = -1;
          else
            v18 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v13);
LABEL_17:
          if (v18 != DigitExtended)
          {
            v19 = v14;
            goto LABEL_24;
          }
          v19 = v14 + 1;
          v13 = v16[v14++];
          if (!v13)
            goto LABEL_24;
        }
      }
      v15 = v10;
      v19 = 0;
LABEL_24:
      v21 = *(_QWORD *)(*(_QWORD *)(v34 + 32) + 8 * DigitExtended);
      if (*(_QWORD *)(v34 + 64) && (v19 > 4 || v19 == 3))
      {
        v22 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v34 + 64), a3, v22, this, a6, 0, 0, 0);
        v10 = v15 + 3;
        v23 = v15[3];
        goto LABEL_44;
      }
      if (v19 >= 2 && *(_QWORD *)(v34 + 56))
      {
        v22 = (TVertex *)TGraph::addVertex(this, 0);
        addSequence(*(const __int32 ***)(v34 + 56), a3, v22, this, a6, 0, 0, 0);
        v10 = v15 + 2;
        v23 = v15[2];
LABEL_44:
        v24 = a4;
        if (v23)
          v24 = (TVertex *)TGraph::addVertex(this, 0);
LABEL_48:
        result = addSequence((const __int32 **)v21, v22, v24, this, a6, 0, 0, 0);
        goto LABEL_49;
      }
      v32 = &v15[v19];
      v24 = a4;
      if (*v32)
        v24 = (TVertex *)TGraph::addVertex(this, 0);
      result = (const char *)wcscmp(*(const __int32 **)(v21 + 8), dword_1AE16D448);
      if ((_DWORD)result)
      {
        if (v19)
        {
          v25 = v19 - 1;
          if (v19 == 1)
          {
            v22 = a3;
            v10 = &v15[v19];
          }
          else
          {
            v10 = &v15[v19];
            do
            {
              v22 = (TVertex *)TGraph::addVertex(this, 0);
              addSequence((const __int32 **)v21, a3, v22, this, a6, 0, 0, 0);
              a3 = v22;
              --v25;
            }
            while (v25);
          }
          goto LABEL_48;
        }
      }
      else
      {
        for (i = *(__int128 **)(v21 + 24); i; i = (__int128 *)*((_QWORD *)i + 2))
        {
          v27 = v19;
          for (j = a3; v27; --v27)
          {
            v29 = v24;
            if (v27 != 1)
              v29 = (TVertex *)TGraph::addVertex(this, 0);
            v30 = i[1];
            v35 = *i;
            v36 = v30;
            v37 = i[2];
            *(_QWORD *)&v36 = 0;
            result = addSequence((const __int32 **)&v35, j, v29, this, a6, 0, 0, 0);
            j = v29;
          }
        }
      }
      v10 = v32;
LABEL_49:
      v6 = *v10;
      a3 = v24;
    }
    while (*v10);
  }
  return result;
}

void sub_1ADC983DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *addSequence(const __int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  const TFileObject *v13;
  uint64_t v14;
  TVertex *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned __int8 v20;
  const char *v21;
  int v22;
  uint64_t v23;
  const char *v24;
  TLocaleInfo *v25;
  BOOL v29;

  v13 = (const TFileObject *)a1;
  if (wcscmp(a1[1], dword_1AE16D878) || (v13 = (const TFileObject *)*((_QWORD *)v13 + 3)) != 0)
  {
    while (!wcscmp(*((const __int32 **)v13 + 1), dword_1AE16D888))
    {
LABEL_37:
      v13 = (const TFileObject *)*((_QWORD *)v13 + 2);
      if (!v13)
        return a7;
    }
    v14 = *((_QWORD *)v13 + 2);
    v15 = a3;
    v16 = a7;
    if (v14)
    {
      if (!wcscmp(*(const __int32 **)(v14 + 8), dword_1AE16D888))
      {
        do
        {
          v18 = v14;
          v14 = *(_QWORD *)(v14 + 16);
          if (!v14)
          {
            v15 = a3;
            goto LABEL_7;
          }
        }
        while (!wcscmp(*(const __int32 **)(v14 + 8), dword_1AE16D888));
        if (a6)
        {
          v29 = 0;
          v19 = *(unsigned int **)(v18 + 24);
          if ((v20 & 1) == 0
          {
            v25 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v25);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v25;
          }
          v21 = &a6[TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v19, &v29)];
          while (v21 > a7)
          {
            v22 = *--v21;
            v23 = v22;
            if (v22 < 0)
            {
              if (!__maskrune(v23, 0x4000uLL))
              {
LABEL_22:
                v16 = v21 + 1;
                if (v21 + 1 >= a8)
                  break;
                v15 = (TVertex *)TGraph::addVertex(a4, (char *)v21 + 1);
                if (a8)
                  goto LABEL_9;
                goto LABEL_24;
              }
            }
            else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v23 + 60) & 0x4000) == 0)
            {
              goto LABEL_22;
            }
          }
        }
      }
      v15 = (TVertex *)TGraph::addVertex(a4, 0);
LABEL_7:
      v16 = a7;
    }
    if (a8)
    {
LABEL_9:
      if (*((_QWORD *)v15 + 3))
        v17 = (const char *)*((_QWORD *)v15 + 3);
      else
        v17 = a8;
    }
    else
    {
LABEL_24:
      v17 = 0;
    }
    if (!wcscmp(*((const __int32 **)v13 + 1), dword_1AE16D430))
    {
      addToken((__int32 **)v13, a2, v15, a4, a5);
    }
    else
    {
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1AE16D448))
      {
        v24 = addAlt(v13, a2, v15, a4, a5, a6, a7, v17);
        goto LABEL_32;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1AE16DA14))
      {
        addPattern((uint64_t)v13, (uint64_t)a2, (uint64_t)v15, (uint64_t)a4, (uint64_t)a5);
        goto LABEL_34;
      }
      if (!wcscmp(*((const __int32 **)v13 + 1), dword_1AE16D878))
      {
        v24 = (const char *)addSequence(v13, a2, v15, a4, a5, a6, a7, v17);
LABEL_32:
        a7 = v24;
      }
    }
LABEL_34:
    if (v16 > a7)
      a7 = v16;
    a2 = v15;
    goto LABEL_37;
  }
  return a7;
}

void sub_1ADC986F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TRomanObject::TRomanObject(TRomanObject *this, const TFileObject *a2, TLexicon *a3, TAllocator *a4)
{
  char *v7;
  _QWORD *v8;
  uint64_t i;
  int64_t v10;
  std::exception_vtbl *v11;
  _QWORD *exception;
  void *__p[2];
  char v14;
  std::exception v15[3];
  char v16;
  void *v17;
  int64x2_t v18;
  uint64_t v19;
  void *v20;
  int64x2_t v21;
  uint64_t v22;
  void *v23;
  int64x2_t v24;
  uint64_t v25;
  void *v26;
  int64x2_t v27;
  uint64_t v28;
  void *v29;
  int64x2_t v30;
  uint64_t v31;
  void *v32;
  int64x2_t v33;
  uint64_t v34;
  void *v35;
  int64x2_t v36;
  uint64_t v37;
  __int32 *v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  *((_QWORD *)this + 1) = 0;
  v7 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  v8 = (_QWORD *)((char *)this + 32);
  *(_QWORD *)this = &off_1E5D16258;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  v17 = &unk_1AE16D4F4;
  v18 = vdupq_n_s64(1uLL);
  v19 = -1;
  v20 = &unk_1AE16D4FC;
  v21 = v18;
  v22 = -1;
  v23 = &unk_1AE16D504;
  v24 = v18;
  v25 = -1;
  v26 = &unk_1AE16D50C;
  v27 = v18;
  v28 = -1;
  v29 = &unk_1AE16D514;
  v30 = v18;
  v31 = -1;
  v32 = &unk_1AE16D51C;
  v33 = v18;
  v34 = -1;
  v35 = &unk_1AE16D524;
  v36 = v18;
  v37 = -1;
  v38 = dword_1AE16D458;
  v39 = xmmword_1AE140A90;
  v40 = -1;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v17, 8uLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v15, (__int128 *)__p);
    v15[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v16 >= 0)
      v11 = (std::exception_vtbl *)&v15[1];
    else
      v11 = v15[1].__vftable;
    conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 594);
    TException::~TException(v15);
    if (v14 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "");
    TException::TException(exception, (__int128 *)v15);
    *exception = &unk_1E5D16668;
  }
  v15[0].__vftable = 0;
  std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize((uint64_t)v8, 7uLL, v15);
  for (i = *((_QWORD *)a2 + 3); i; i = *(_QWORD *)(i + 16))
  {
    if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D458))
    {
      MEMORY[0x1AF44C9E0](v7, *(_QWORD *)(i + 24));
    }
    else
    {
      v10 = (char *)wcschr(TRomanObject::TRomanObject(TFileObject const*,TLexicon *,TAllocator *)::pszLetters, **(_DWORD **)(i + 8))- (char *)TRomanObject::TRomanObject(TFileObject const*,TLexicon *,TAllocator *)::pszLetters;
      *(_QWORD *)(*v8 + 8 * (v10 >> 2)) = compileAlt((const TFileObject *)i, *(TFileObject **)(*v8 + 2 * v10), a3, a4);
    }
  }
}

void sub_1ADC989D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  int v24;
  void *v26;

  if (a20 < 0)
  {
    operator delete(__p);
    if ((v24 & 1) == 0)
    {
LABEL_6:
      v26 = *v22;
      if (*v22)
      {
        *(_QWORD *)(v20 + 40) = v26;
        operator delete(v26);
      }
      *(_QWORD *)v20 = &unk_1E5D16690;
      if (*(char *)(v20 + 31) < 0)
        operator delete(*v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v23);
  goto LABEL_6;
}

uint64_t TRomanObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  unsigned __int8 v12;
  unsigned int v13;
  uint64_t result;
  _BYTE *v15;
  _DWORD *i;
  __int32 v17;
  __int32 *v18;
  TVertex *v19;
  TLocaleInfo *v21;
  _BYTE *v22;
  __int128 v23;
  _BYTE v24[1024];
  char v25;
  BOOL v26;
  int v27[3];

  v26 = 0;
  {
    v21 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v21);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v21;
  }
  v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v26);
  v22 = v24;
  v23 = xmmword_1AE1418C0;
  v25 = 1;
  result = arabicToRoman(v13, (uint64_t)&v22);
  if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
  {
    if (v25)
    {
      v27[0] = 0;
      result = TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), v27, 1uLL);
      v15 = v22;
      --*((_QWORD *)&v23 + 1);
    }
    else
    {
      v15 = v22;
      if ((_QWORD)v23)
        *(_DWORD *)&v22[4 * v23 - 4] = 0;
    }
  }
  else
  {
    v15 = v22;
    *(_DWORD *)&v22[4 * *((_QWORD *)&v23 + 1)] = 0;
  }
  for (i = v15 + 4; ; ++i)
  {
    v17 = *(i - 1);
    if (!v17)
      break;
    v18 = wcschr(TRomanObject::build(wchar_t const*,TVertex *,TVertex *,TGraph *,TLexicon *)const::pszRoman, v17);
    v19 = a4;
    if (*i)
      v19 = (TVertex *)TGraph::addVertex(a5, 0);
    result = (uint64_t)addSequence(*(const __int32 ***)(*(_QWORD *)(a1 + 32)+ 2* ((char *)v18- (char *)TRomanObject::build(wchar_t const*,TVertex *,TVertex *,TGraph *,TLexicon *)const::pszRoman)), a3, v19, a5, a6, 0, 0, 0);
    a3 = v19;
  }
  if (v25)
  {
    result = (uint64_t)v22;
    if (v22 != v24 && v22 != 0)
      return MEMORY[0x1AF44D160]();
  }
  return result;
}

void sub_1ADC98C64(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::TCountingObject(uint64_t a1, uint64_t a2, uint64_t *a3, TLexicon *a4, TAllocator *a5)
{
  uint64_t *v7;
  int v9;
  TFileObject **v10;
  uint64_t v11;
  int v12;
  uint64_t Array;
  TFileObject *v14;
  TFileObject *v15;
  TFileObject *v16;
  TFileObject *v17;
  TFileObject *v18;
  TFileObject *v19;
  TFileObject *v20;
  TFileObject *v21;
  unsigned int *v22;
  unsigned __int8 v23;
  unsigned int v24;
  uint64_t v25;
  void **v26;
  BOOL v27;
  uint64_t v28;
  void **v29;
  const TArrayObject *v30;
  const TArrayObject *v31;
  unint64_t v32;
  char v33;
  char v34;
  const TArrayObject *v35;
  const TArrayObject *v36;
  unint64_t v37;
  char v38;
  char v39;
  const TArrayObject *v40;
  const TArrayObject *v41;
  unint64_t v42;
  char v43;
  char v44;
  char v45;
  const char *v47;
  _QWORD *exception;
  const char *v49;
  _QWORD *v50;
  const char *v51;
  _QWORD *v52;
  TLocaleInfo *v53;
  uint64_t *v54;
  uint64_t v56;
  void *v57[2];
  char v58;
  void *__p[2];
  char v60;
  char v61;
  char v62;
  __int32 *v63;
  __int128 v64;
  uint64_t v65;
  __int32 *v66;
  __int128 v67;
  uint64_t v68;
  __int32 *v69;
  __int128 v70;
  uint64_t v71;
  __int32 *v72;
  __int128 v73;
  uint64_t v74;
  __int32 *v75;
  __int128 v76;
  uint64_t v77;
  __int32 *v78;
  __int128 v79;
  uint64_t v80;
  __int32 *v81;
  __int128 v82;
  uint64_t v83;
  __int32 *v84;
  __int128 v85;
  uint64_t v86;
  __int32 *v87;
  uint64_t v88;
  __int128 v89;
  __int32 *v90;
  uint64_t v91;
  __int128 v92;
  __int32 *v93;
  uint64_t v94;
  __int128 v95;
  __int32 *v96;
  uint64_t v97;
  __int128 v98;
  __int32 *v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;

  v7 = (uint64_t *)a2;
  v102 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v56 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = off_1E5D167B0;
  v63 = dword_1AE16D56C;
  v64 = xmmword_1AE15FCA0;
  v65 = -1;
  v66 = dword_1AE16D588;
  v67 = xmmword_1AE15FCA0;
  v68 = -1;
  v69 = dword_1AE16D5A4;
  v70 = xmmword_1AE15FCA0;
  v71 = -1;
  v72 = dword_1AE16D5C0;
  v73 = xmmword_1AE15FCA0;
  v74 = -1;
  v75 = dword_1AE16D5E0;
  v76 = xmmword_1AE140A90;
  v77 = -1;
  v78 = dword_1AE16D618;
  v79 = xmmword_1AE140A90;
  v80 = -1;
  v81 = dword_1AE16D630;
  v82 = xmmword_1AE140A90;
  v83 = -1;
  v84 = dword_1AE16D66C;
  v85 = xmmword_1AE144E70;
  v86 = -1;
  v87 = dword_1AE16D68C;
  v88 = 2;
  v89 = xmmword_1AE13F780;
  v90 = dword_1AE16D6D0;
  v91 = 2;
  v92 = xmmword_1AE13F780;
  v93 = dword_1AE16D6EC;
  v94 = 2;
  v95 = xmmword_1AE13F780;
  v96 = dword_1AE16D72C;
  v97 = 2;
  v98 = xmmword_1AE13F780;
  v99 = dword_1AE16D458;
  v100 = 0;
  v101 = xmmword_1AE13F780;
  v9 = TFileObject::verify(a2, (uint64_t)&v63, 0xDuLL, 1);
  v62 = v9;
  if (v9)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    TException::TException(__p, (__int128 *)v57);
    __p[0] = &unk_1E5D16668;
    if (v61 >= 0)
      v47 = (const char *)&__p[1];
    else
      v47 = (const char *)__p[1];
    conditionalAssert(v47, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 740);
    TException::~TException((std::exception *)__p);
    if (v58 < 0)
      operator delete(v57[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (__int128 *)__p);
    *exception = &unk_1E5D16668;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v10 = (TFileObject **)(a1 + 96);
  *(_QWORD *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 3;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = v7[3];
  if (v11)
  {
    v54 = v7;
    v12 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D458))
      {
        MEMORY[0x1AF44C9E0](v56, *(_QWORD *)(v11 + 24));
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D56C))
        {
          v14 = *v10;
          v15 = compileAlt((const TFileObject *)v11, *v10, a4, a5);
          if (!v14)
            ++v12;
          *v10 = v15;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D588))
        {
          v16 = *(TFileObject **)(a1 + 104);
          v17 = compileAlt((const TFileObject *)v11, v16, a4, a5);
          if (!v16)
            ++v12;
          *(_QWORD *)(a1 + 104) = v17;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D5A4))
        {
          v18 = *(TFileObject **)(a1 + 112);
          v19 = compileAlt((const TFileObject *)v11, v18, a4, a5);
          if (!v18)
            ++v12;
          *(_QWORD *)(a1 + 112) = v19;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D5C0))
        {
          v20 = *(TFileObject **)(a1 + 120);
          v21 = compileAlt((const TFileObject *)v11, v20, a4, a5);
          if (!v20)
            ++v12;
          *(_QWORD *)(a1 + 120) = v21;
          goto LABEL_50;
        }
        if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D5E0))
        {
          if (TFileObject::verify((TFileObject *)v11, 0, 0))
          {
            std::string::basic_string[abi:ne180100]<0>(v57, "");
            TException::TException(__p, (__int128 *)v57);
            __p[0] = &unk_1E5D16668;
            if (v61 >= 0)
              v51 = (const char *)&__p[1];
            else
              v51 = (const char *)__p[1];
            conditionalAssert(v51, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 787);
            TException::~TException((std::exception *)__p);
            if (v58 < 0)
              operator delete(v57[0]);
            v52 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            TException::TException(v52, (__int128 *)__p);
            *v52 = &unk_1E5D16668;
          }
          if (wcscmp(*(const __int32 **)(v11 + 24), (const __int32 *)&unk_1AE16D4F4))
          {
            v22 = *(unsigned int **)(v11 + 24);
            if ((v23 & 1) == 0
            {
              v53 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v53);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v53;
            }
            v24 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v22, (BOOL *)&v62);
            *(_QWORD *)(a1 + 128) = v24;
            if (v24 - 2 <= 2 && !v62)
              goto LABEL_50;
            loggableFileObject((uint64_t *)v11);
            v26 = __p;
            if (v60 < 0)
              v26 = (void **)__p[0];
            tknPrintf("Error: %sValue is out of range, must be 2, 3, 4, or I\n", v25, v26);
            if (v60 < 0)
              operator delete(__p[0]);
            v27 = 1;
            goto LABEL_49;
          }
          *(_QWORD *)(a1 + 128) = 7;
          *(_BYTE *)(a1 + 136) = 1;
        }
        else
        {
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D618))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 32) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D630))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 40) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D66C))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 48) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D68C))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 56) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D6D0))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 64) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D6EC))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 72) = Array;
            goto LABEL_48;
          }
          if (!wcscmp(*(const __int32 **)(v11 + 8), dword_1AE16D72C))
          {
            Array = TCountingObject::getArray(0, (const __int32 **)v11, a3);
            *(_QWORD *)(a1 + 80) = Array;
LABEL_48:
            v27 = v62 | (Array == 0);
LABEL_49:
            v62 = v27;
          }
        }
      }
LABEL_50:
      v11 = *(_QWORD *)(v11 + 16);
      if (!v11)
      {
        v7 = v54;
        if (v12 >= 2)
        {
          loggableFileObject(v54);
          if (v60 >= 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          tknPrintf("Error: %sAttributes EnxAnd, ItaAnd, NldAnd, and ZhoZero are exclusive\n", v28, v29);
          if (v60 < 0)
            operator delete(__p[0]);
          v62 = 1;
        }
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 88) = 0;
  v30 = *(const TArrayObject **)(a1 + 32);
  if (v30)
  {
    v31 = *(const TArrayObject **)(a1 + 40);
    if (v31)
    {
      v32 = (((uint64_t)(*((_QWORD *)v31 + 5) - *((_QWORD *)v31 + 4)) >> 3)
           / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
           + 2)
          * *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 88) = v32;
      if (*(_BYTE *)(a1 + 136))
        *(_QWORD *)(a1 + 88) = v32 - 2;
      v33 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v30, v31);
      v62 |= v33;
      v34 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 40));
      v62 |= v34;
    }
  }
  v35 = *(const TArrayObject **)(a1 + 48);
  if (v35)
  {
    v36 = *(const TArrayObject **)(a1 + 56);
    if (v36)
    {
      v37 = (((uint64_t)(*((_QWORD *)v36 + 5) - *((_QWORD *)v36 + 4)) >> 3)
           / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
           + 2)
          * *(_QWORD *)(a1 + 128);
      if (*(_BYTE *)(a1 + 136))
        v37 -= 2;
      if (v37 >= *(_QWORD *)(a1 + 88))
        v37 = *(_QWORD *)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v37;
      v38 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v35, v36);
      v62 |= v38;
      v39 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 56));
      v62 |= v39;
    }
  }
  v40 = *(const TArrayObject **)(a1 + 64);
  if (v40 && (v41 = *(const TArrayObject **)(a1 + 72)) != 0)
  {
    v42 = (((uint64_t)(*((_QWORD *)v41 + 5) - *((_QWORD *)v41 + 4)) >> 3)
         / (unint64_t)(10 * *(_QWORD *)(a1 + 128))
         + 2)
        * *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 136))
      v42 -= 2;
    if (v42 >= *(_QWORD *)(a1 + 88))
      v42 = *(_QWORD *)(a1 + 88);
    *(_QWORD *)(a1 + 88) = v42;
    v43 = TCountingObject::checkChunk((TCountingObject *)a1, (const TFileObject *)v7, v40, v41);
    v62 |= v43;
    v44 = TCountingObject::checkMagnitude((TCountingObject *)a1, (const TFileObject *)v7, *(const TArrayObject **)(a1 + 72));
    v45 = v62 | v44;
    v62 |= v44;
  }
  else
  {
    v45 = v62;
  }
  if (v45)
  {
    std::string::basic_string[abi:ne180100]<0>(v57, "");
    TException::TException(__p, (__int128 *)v57);
    __p[0] = &unk_1E5D16668;
    if (v61 >= 0)
      v49 = (const char *)&__p[1];
    else
      v49 = (const char *)__p[1];
    conditionalAssert(v49, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 897);
    TException::~TException((std::exception *)__p);
    if (v58 < 0)
      operator delete(v57[0]);
    v50 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(v50, (__int128 *)__p);
    *v50 = &unk_1E5D16668;
  }
  return a1;
}

void sub_1ADC99688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  MEMORY[0x1AF44D190](a11, 0x1070C40ADD13FEBLL);
  *(_QWORD *)v26 = &unk_1E5D16690;
  if (*(char *)(v26 + 31) < 0)
    operator delete(*a14);
  _Unwind_Resume(a1);
}

uint64_t TCountingObject::getArray(int a1, const __int32 **this, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  void **v10;
  const char *v12;
  _QWORD *exception;
  void *v14[2];
  char v15;
  void *__p[2];
  char v17;
  char v18;

  if ((TFileObject::verify((TFileObject *)this, 0, 0) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    TException::TException(__p, (__int128 *)v14);
    __p[0] = &unk_1E5D16668;
    if (v18 >= 0)
      v12 = (const char *)&__p[1];
    else
      v12 = (const char *)__p[1];
    conditionalAssert(v12, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 905);
    TException::~TException((std::exception *)__p);
    if (v15 < 0)
      operator delete(v14[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(exception, (__int128 *)__p);
    *exception = &unk_1E5D16668;
  }
  v5 = *a3;
  if (a3[1] == *a3)
  {
LABEL_8:
    loggableFileObject((uint64_t *)this);
    if (v17 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    tknPrintf("Error: %sArray name does not exist\n", v9, v10);
    if (v17 < 0)
      operator delete(__p[0]);
    return 0;
  }
  else
  {
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(v5 + 8 * v6);
      v8 = (const __int32 *)(v7 + 8);
      if (*(char *)(v7 + 31) < 0)
        v8 = *(const __int32 **)v8;
      if (!wcscmp(this[3], v8))
        return *(_QWORD *)(*a3 + 8 * v6);
      ++v6;
      v5 = *a3;
      if (v6 >= (a3[1] - *a3) >> 3)
        goto LABEL_8;
    }
  }
}

void sub_1ADC9993C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TCountingObject::checkChunk(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3, const TArrayObject *a4)
{
  char v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  uint64_t v17;
  void *p_p;
  void *__p;
  char v21;

  v8 = TArrayObject::checkNoGap(a3, 0, 0xAuLL);
  v9 = *((_QWORD *)this + 16);
  if (v9 >= 2)
  {
    v10 = 100;
    v11 = 1;
    v12 = 10;
    do
    {
      v13 = *((_QWORD *)a4 + 4);
      if (10 * v11 >= (*((_QWORD *)a4 + 5) - v13) >> 3 || !*(_QWORD *)(v13 + 80 * v11))
      {
        v14 = *((_BYTE *)this + 136) && (v11 & 0xFFFFFFFFFFFFFFFDLL) == 4;
        if (!v14 && v12 < v10)
        {
          do
          {
            v16 = *((_QWORD *)a3 + 4);
            if (v12 >= (*((_QWORD *)a3 + 5) - v16) >> 3 || !*(_QWORD *)(v16 + 8 * v12))
            {
              loggableFileObject((uint64_t *)a2);
              if (v21 >= 0)
                p_p = &__p;
              else
                p_p = __p;
              tknPrintf("Error: %sCannot make spoken form for '%llu'\n", v17, p_p, v12);
              if (v21 < 0)
                operator delete(__p);
              v8 = 1;
            }
            ++v12;
          }
          while (v10 != v12);
          v9 = *((_QWORD *)this + 16);
        }
      }
      v12 = v10;
      v10 *= 10;
      v11 += 2;
    }
    while (v11 < v9);
  }
  return v8 & 1;
}

void sub_1ADC99AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::checkMagnitude(TCountingObject *this, const TFileObject *a2, const TArrayObject *a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  void **v12;
  unint64_t i;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;
  void *__p[2];
  char v23;

  if (*(_QWORD *)a2)
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  else
    v6 = 3;
  v7 = *((_QWORD *)a3 + 4);
  v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
  if (v8 > 10 * *((_QWORD *)this + 16)
    && (v9 = 10 * *((_QWORD *)this + 16), *(_QWORD *)(v7 + 80 * *((_QWORD *)this + 16))))
  {
    v10 = 0;
  }
  else
  {
    loggableFileObject((uint64_t *)a2);
    if (v23 >= 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v11, v12, 10 * *((_QWORD *)this + 16));
    if (v23 < 0)
      operator delete(__p[0]);
    v7 = *((_QWORD *)a3 + 4);
    v9 = 10 * *((_QWORD *)this + 16);
    v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
    v10 = 1;
  }
  for (i = v9 + 10; i < v8; ++i)
  {
    v14 = *((_QWORD *)this + 16);
    if (i % (10 * v14))
    {
      if (i / 0xA % v14 && *(_QWORD *)(v7 + 8 * i))
      {
        if (v6 < 3)
        {
          loggableFileObject((uint64_t *)a2);
          if (v23 >= 0)
            v20 = __p;
          else
            v20 = (void **)__p[0];
          tknPrintf("Warning: %sMagnitude '%llu' is not supported\n", v19, v20, i);
          if (v23 < 0)
            operator delete(__p[0]);
          goto LABEL_38;
        }
        loggableFileObject((uint64_t *)a2);
        if (v23 >= 0)
          v16 = __p;
        else
          v16 = (void **)__p[0];
        tknPrintf("Error: %sMagnitude '%llu' is not supported\n", v15, v16, i);
        goto LABEL_30;
      }
    }
    else if (!*(_QWORD *)(v7 + 8 * i)
           && (v8 <= i + 10 * v14 || !*(_QWORD *)(v7 + 80 * v14 + 8 * i) || *((_BYTE *)this + 136)))
    {
      loggableFileObject((uint64_t *)a2);
      if (v23 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      tknPrintf("Error: %sMagnitude '%llu' hasn't been specified and is needed\n", v17, v18, i);
LABEL_30:
      if (v23 < 0)
        operator delete(__p[0]);
      v10 = 1;
    }
LABEL_38:
    v7 = *((_QWORD *)a3 + 4);
    v8 = (*((_QWORD *)a3 + 5) - v7) >> 3;
  }
  return v10 & 1;
}

void sub_1ADC99D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TCountingObject::getChunk(TCountingObject *this, int a2, int a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if ((!a3 || (v4 = *((_QWORD *)this + 8)) == 0) && (!a2 || (v4 = *((_QWORD *)this + 6)) == 0))
    v4 = *((_QWORD *)this + 4);
  v6 = v4 + 32;
  v5 = *(_QWORD *)(v4 + 32);
  if (a4 >= (*(_QWORD *)(v6 + 8) - v5) >> 3)
    return 0;
  else
    return *(_QWORD *)(v5 + 8 * a4);
}

uint64_t TCountingObject::getMagnitude(TCountingObject *this, int a2, int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a5 > 9)
    return 0;
  v5 = a5 + 10 * a4;
  if ((!a3 || (v6 = *((_QWORD *)this + 9)) == 0) && (!a2 || (v6 = *((_QWORD *)this + 7)) == 0))
    v6 = *((_QWORD *)this + 5);
  v8 = v6 + 32;
  v7 = *(_QWORD *)(v6 + 32);
  if (v5 >= (*(_QWORD *)(v8 + 8) - v7) >> 3)
    return 0;
  else
    return *(_QWORD *)(v7 + 8 * v5);
}

char *TCountingObject::addHundredChunk(TCountingObject *this, unint64_t a2, int a3, int a4, int a5, int a6, TVertex *a7, TVertex *a8, TGraph *a9, TLexicon *a10)
{
  _BOOL4 v16;
  _BOOL4 v18;
  const __int32 **v19;
  TLexicon *v20;
  TGraph *v21;
  char *result;
  char *v23;
  const __int32 **v24;
  TVertex *v25;
  const __int32 **v26;
  TVertex *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unint64_t v32;
  BOOL v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  TVertex *v40;
  TVertex *v41;
  int v42;
  uint64_t Magnitude;
  int v44;
  const __int32 **v45;
  const __int32 **v46;
  TVertex *v47;
  TVertex *v48;
  TGraph *v49;
  TLexicon *v50;
  const __int32 **v51;
  TVertex *v52;
  TVertex *v53;
  const __int32 **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const __int32 **v59;
  TVertex *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const __int32 **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  TVertex *v68;
  _BOOL4 v69;
  _BOOL4 v70;
  TVertex *v71;
  const __int32 **v72;
  const __int32 **v73;
  _BOOL4 v74;

  v16 = 0;
  if (a2 && a3)
    v16 = a2 <= 0x63 && *((_QWORD *)this + 12) || a2 < 0xD && *((_QWORD *)this + 14) != 0;
  v18 = 0;
  if (a2 && a4)
    v18 = *((_QWORD *)this + 15) != 0;
  v74 = v18;
  v19 = (const __int32 **)*((_QWORD *)this + 12);
  if (!v19)
    v19 = (const __int32 **)*((_QWORD *)this + 14);
  v73 = v19;
  v21 = a9;
  v20 = a10;
  v72 = (const __int32 **)*((_QWORD *)this + 15);
  result = (char *)TCountingObject::getChunk(this, a5, a6, a2);
  if (result)
  {
    v23 = result;
    result = (char *)addSequence((const __int32 **)result, a7, a8, a9, a10, 0, 0, 0);
    if (v16 || v74)
    {
      if (v16)
        v24 = v73;
      else
        v24 = v72;
      v25 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v24, a7, v25, a9, a10, 0, 0, 0);
      v26 = (const __int32 **)v23;
      v27 = v25;
      goto LABEL_59;
    }
    return result;
  }
  v69 = v16;
  v70 = a6;
  v68 = a7;
  if (a2 < 0xA)
  {
    v28 = 0;
    v29 = 1;
    v30 = a2;
    v31 = a5;
    goto LABEL_42;
  }
  v28 = 1;
  v29 = 1;
  v30 = a2;
  v31 = a5;
  while (v30 > 0x63 || !*((_BYTE *)this + 136))
  {
    v29 *= 10;
    v32 = v30 / 0xA;
    ++v28;
    v33 = v30 > 0x63;
    v30 /= 0xAuLL;
    if (!v33)
    {
      --v28;
      v30 = v32;
      goto LABEL_42;
    }
  }
  if (v28 != 6)
  {
    if (v28 == 4)
    {
      v34 = v30 / 0xAu + 40;
      v35 = *(_QWORD *)(*((_QWORD *)this + 5) + 32);
      v36 = *(_QWORD *)(*((_QWORD *)this + 5) + 40) - v35;
      if ((v34 >= v36 >> 3 || !*(_QWORD *)(v35 + 8 * v34))
        && ((unint64_t)v36 < 0x141 || !*(_QWORD *)(v35 + 320)))
      {
        v28 = 3;
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  v37 = v30 / 0xAu + 60;
  v38 = *(_QWORD *)(*((_QWORD *)this + 5) + 32);
  v39 = *(_QWORD *)(*((_QWORD *)this + 5) + 40) - v38;
  if (v37 < v39 >> 3 && *(_QWORD *)(v38 + 8 * v37) || (unint64_t)v39 >= 0x1E1 && *(_QWORD *)(v38 + 480))
  {
LABEL_41:
    v29 *= 10;
    v30 = v30 / 0xAu;
    goto LABEL_42;
  }
  v28 = 5;
LABEL_42:
  if (a2 == v29 * v30)
  {
    v40 = a8;
  }
  else
  {
    v41 = (TVertex *)TGraph::addVertex(a9, 0);
    result = (char *)TCountingObject::addHundredChunk(this, a2 - v29 * v30, v28 == 2, 0, 0, v70, v41, a8, a9, a10);
    if (*((_QWORD *)this + 15) && a2 - v29 * v30 < v29 / 0xA)
    {
      v40 = (TVertex *)TGraph::addVertex(a9, 0);
      result = (char *)addSequence(*((const __int32 ***)this + 15), v40, v41, a9, a10, 0, 0, 0);
    }
    else
    {
      v40 = v41;
    }
  }
  if (v30)
  {
    v71 = v40;
    v42 = a2 == v29 * v30 && v70;
    Magnitude = TCountingObject::getMagnitude(this, v31, v42, v28, v30);
    v44 = v69 || v74;
    if (!Magnitude)
    {
      if (v44)
      {
        if (v69)
          v51 = v73;
        else
          v51 = v72;
        v52 = (TVertex *)TGraph::addVertex(a9, 0);
        addSequence(v51, v68, v52, a9, a10, 0, 0, 0);
        v53 = (TVertex *)TGraph::addVertex(a9, 0);
        v54 = 0;
        v55 = *(_QWORD *)(*((_QWORD *)this + 4) + 32);
        if (v30 < (*(_QWORD *)(*((_QWORD *)this + 4) + 40) - v55) >> 3)
          v54 = *(const __int32 ***)(v55 + 8 * v30);
        addSequence(v54, v52, v53, a9, a10, 0, 0, 0);
        if (!v42 || (v56 = *((_QWORD *)this + 9)) == 0)
          v56 = *((_QWORD *)this + 5);
        v58 = v56 + 32;
        v57 = *(_QWORD *)(v56 + 32);
        if (10 * v28 >= (unint64_t)((*(_QWORD *)(v58 + 8) - v57) >> 3))
          v59 = 0;
        else
          v59 = *(const __int32 ***)(v57 + 80 * v28);
        addSequence(v59, v53, v71, a9, a10, 0, 0, 0);
      }
      v60 = (TVertex *)TGraph::addVertex(a9, 0);
      if (!v31 || (v61 = *((_QWORD *)this + 6)) == 0)
        v61 = *((_QWORD *)this + 4);
      v63 = v61 + 32;
      v62 = *(_QWORD *)(v61 + 32);
      if (v30 >= (*(_QWORD *)(v63 + 8) - v62) >> 3)
        v64 = 0;
      else
        v64 = *(const __int32 ***)(v62 + 8 * v30);
      addSequence(v64, v68, v60, a9, a10, 0, 0, 0);
      if (!v42 || (v65 = *((_QWORD *)this + 9)) == 0)
        v65 = *((_QWORD *)this + 5);
      v67 = v65 + 32;
      v66 = *(_QWORD *)(v65 + 32);
      if (10 * v28 >= (unint64_t)((*(_QWORD *)(v67 + 8) - v66) >> 3))
        v26 = 0;
      else
        v26 = *(const __int32 ***)(v66 + 80 * v28);
      v49 = a9;
      v48 = v71;
      v50 = a10;
      v27 = v60;
      return (char *)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
    }
    v45 = (const __int32 **)Magnitude;
    v21 = a9;
    a8 = v40;
    v20 = a10;
    if (v44)
    {
      if (v69)
        v46 = v73;
      else
        v46 = v72;
      v47 = (TVertex *)TGraph::addVertex(a9, 0);
      addSequence(v46, v68, v47, a9, a10, 0, 0, 0);
      addSequence(v45, v47, v71, a9, a10, 0, 0, 0);
    }
    v26 = v45;
    v27 = v68;
LABEL_59:
    v48 = a8;
    v49 = v21;
    v50 = v20;
    return (char *)addSequence(v26, v27, v48, v49, v50, 0, 0, 0);
  }
  return result;
}

unint64_t TCountingObject::build(uint64_t a1, __int32 *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  TGraph *v6;
  uint64_t v8;
  __int32 *v9;
  __int32 v10;
  unsigned int v11;
  unsigned __int8 v12;
  unsigned int DigitExtended;
  TLocaleInfo *v14;
  unint64_t result;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  _DWORD *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  unsigned int v30;
  unsigned __int8 v31;
  int v32;
  _BYTE *v33;
  unsigned __int8 v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned __int8 v38;
  unsigned int v39;
  TVertex *v40;
  TVertex *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t Magnitude;
  const __int32 **v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  TVertex *v51;
  uint64_t v52;
  TVertex *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  TLocaleInfo *v63;
  TLocaleInfo *v64;
  TLocaleInfo *v65;
  TLocaleInfo *v66;
  TLocaleInfo *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _DWORD *v71;
  BOOL v73;
  BOOL v76;
  _DWORD *v77;
  size_t v78;
  char *v79;
  _BYTE *v82;
  __int128 v83;
  _BYTE v84[1024];
  char v85;
  int v86[3];

  v6 = a5;
  v8 = a1;
  do
  {
    v9 = a2;
    v10 = a2[1];
    ++a2;
    if (!v10)
      break;
    v11 = *v9;
    if ((v12 & 1) == 0
    {
      v14 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v14);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
      v6 = a5;
      v8 = a1;
    }
    DigitExtended = v11 - 48;
    if ((int)v11 < 48)
      break;
    if (v11 > 0x39)
    {
      if (v11 < 0x660)
        break;
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11);
    }
  }
  while (!DigitExtended);
  result = wcslen(v9);
  v16 = result;
  v17 = *(_QWORD *)(v8 + 128);
  v78 = v17;
  if (result <= v17)
  {
    v18 = *(_QWORD *)(a1 + 80);
    if (v18)
    {
      LOBYTE(v82) = 0;
      if ((v19 & 1) == 0
      {
        v67 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v67);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v67;
        v6 = a5;
      }
      result = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v9, (BOOL *)&v82);
      v20 = *(_QWORD *)(v18 + 32);
      if (result < (unint64_t)((*(_QWORD *)(v18 + 40) - v20) >> 3))
      {
        result = *(_QWORD *)(v20 + 8 * result);
        if (result)
          return (unint64_t)addSequence((const __int32 **)result, a3, a4, v6, a6, 0, 0, 0);
      }
    }
  }
  v82 = v84;
  v83 = xmmword_1AE1418C0;
  v85 = 1;
  v21 = v16 / v17;
  v22 = v16 % v17;
  if (v16 % v17)
  {
    TBuffer<wchar_t>::insert((uint64_t)&v82, 0, dword_1AE16D744, v17 - v22);
    TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v9, v16 % v17);
    v86[0] = v21 + 48;
    result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
    v9 += v22;
  }
  v23 = 4 * v17;
  if (v17 <= v16)
  {
    v24 = 0;
    v25 = v21 + 48;
    if (v21 <= 1)
      v21 = 1;
    do
    {
      result = wcsncmp(v9, dword_1AE16D760, v17);
      if ((_DWORD)result)
      {
        TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v9, v17);
        v86[0] = v25 + ~v24;
        result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
      }
      ++v24;
      v9 = (__int32 *)((char *)v9 + v23);
      --v21;
    }
    while (v21);
  }
  if (*((_QWORD *)&v83 + 1) >= (unint64_t)v83)
  {
    if (v85)
    {
      v86[0] = 0;
      result = TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
      v26 = v82;
      --*((_QWORD *)&v83 + 1);
    }
    else
    {
      v26 = v82;
      if ((_QWORD)v83)
        *(_DWORD *)&v82[4 * v83 - 4] = 0;
    }
  }
  else
  {
    v26 = v82;
    *(_DWORD *)&v82[4 * *((_QWORD *)&v83 + 1)] = 0;
  }
  if (*v26)
  {
    v27 = 0;
    v28 = 0;
    v76 = 0;
    v69 = 10 * v17;
    v70 = v23 + 4;
    v68 = (uint64_t)&v26[2 * v17 + 1];
    v29 = 1;
    v77 = &v26[v17];
    v71 = v26;
    do
    {
      v30 = *(_DWORD *)((char *)v77 + v27);
      if ((v31 & 1) == 0
      {
        v63 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v63);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v63;
        v6 = a5;
        v17 = v78;
      }
      v32 = v30 - 48;
      if ((int)v30 < 48)
        goto LABEL_39;
      if (v30 <= 0x39)
        goto LABEL_40;
      if (v30 < 0x660)
LABEL_39:
        v32 = -1;
      else
        v32 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v30);
LABEL_40:
      if (*((_QWORD *)&v83 + 1) >= (unint64_t)v83)
      {
        if (v85)
        {
          v86[0] = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v82, *((unint64_t *)&v83 + 1), v86, 1uLL);
          v33 = v82;
          --*((_QWORD *)&v83 + 1);
        }
        else
        {
          v33 = v82;
          if ((_QWORD)v83)
            *(_DWORD *)&v82[4 * v83 - 4] = 0;
        }
      }
      else
      {
        v33 = v82;
        *(_DWORD *)&v82[4 * *((_QWORD *)&v83 + 1)] = 0;
      }
      *(_DWORD *)&v33[4 * v17 + 4 * ((unint64_t)((char *)v26 + v27 - v33) >> 2)] = 0;
      LOBYTE(v86[0]) = 0;
      if ((v34 & 1) == 0
      {
        v64 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v64);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v64;
        v6 = a5;
      }
      v35 = v76;
      v36 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (_DWORD *)((char *)v26 + v27), (BOOL *)v86);
      v73 = v28;
      if (!(v29 & 1 | (*(_QWORD *)(a1 + 120) == 0)))
      {
        v37 = *(_DWORD *)((char *)v26 + v27);
        if ((v38 & 1) == 0
        {
          v65 = (TLocaleInfo *)operator new();
          TLocaleInfo::TLocaleInfo(v65);
          TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v65;
          v6 = a5;
          v35 = v76;
        }
        v39 = v37 - 48;
        if ((int)v37 >= 48)
        {
          if (v37 > 0x39)
          {
            if (v37 < 0x660)
              goto LABEL_57;
            v39 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v37);
          }
          if (!v39 && v36)
          {
            v40 = (TVertex *)TGraph::addVertex(v6, 0);
            addSequence(*(const __int32 ***)(a1 + 120), a3, v40, v6, a6, 0, 0, 0);
            v73 = 0;
            if (!v35)
              goto LABEL_62;
            goto LABEL_58;
          }
        }
      }
LABEL_57:
      v40 = a3;
      if (!v35)
        goto LABEL_62;
LABEL_58:
      if (*(_QWORD *)(a1 + 104) && (v36 < 0x64 || !(v36 % 0x64)))
      {
        v41 = (TVertex *)TGraph::addVertex(v6, 0);
        addSequence(*(const __int32 ***)(a1 + 104), v40, v41, v6, a6, 0, 0, 0);
        v40 = v41;
      }
LABEL_62:
      v42 = v32;
      if (!v32)
      {
        result = (unint64_t)TCountingObject::addHundredChunk((TCountingObject *)a1, v36, (v29 & 1) == 0, v73, v29 & 1, 1, v40, a4, v6, a6);
        break;
      }
      v76 = v32 == 1;
      v79 = (char *)v77 + v27;
      v43 = *(_DWORD *)((char *)v77 + v27 + 4);
      a3 = a4;
      if (v43)
        a3 = (TVertex *)TGraph::addVertex(a5, 0);
      v44 = v78 * v32;
      Magnitude = TCountingObject::getMagnitude((TCountingObject *)a1, v29 & 1, v43 == 0, v44, v36);
      if (!Magnitude)
      {
        if (v43 || (v48 = *(_QWORD *)(a1 + 72)) == 0)
          v48 = *(_QWORD *)(a1 + 40);
        v50 = v48 + 32;
        v49 = *(_QWORD *)(v48 + 32);
        if (10 * v44 < (unint64_t)((*(_QWORD *)(v50 + 8) - v49) >> 3))
        {
          v46 = *(const __int32 ***)(v49 + 80 * v44);
          if (v46)
          {
            v6 = a5;
            v51 = (TVertex *)TGraph::addVertex(a5, 0);
            TCountingObject::addHundredChunk((TCountingObject *)a1, v36, 0, v73, v29 & 1, 0, v40, v51, a5, a6);
            v40 = v51;
            goto LABEL_68;
          }
        }
        if (v36 <= 9
          && (v52 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32),
              v69 + v36 < (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) - v52) >> 3)
          && (v46 = *(const __int32 ***)(v52 + 8 * (v69 + v36))) != 0)
        {
          v53 = v40;
        }
        else
        {
          v53 = (TVertex *)TGraph::addVertex(a5, 0);
          TCountingObject::addHundredChunk((TCountingObject *)a1, v36, 0, v73, v29 & 1, 0, v40, v53, a5, a6);
          v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 32);
          if (v69 >= (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 40) - v54) >> 3)
            v46 = 0;
          else
            v46 = *(const __int32 ***)(v54 + 8 * v69);
        }
        if (*((_DWORD *)v79 + 1))
        {
          v55 = *(_DWORD *)(v68 + v27);
          if ((v56 & 1) == 0
          {
            v66 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v66);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v66;
          }
          v57 = v55 - 48;
          if ((int)v55 < 48)
            goto LABEL_89;
          if (v55 <= 0x39)
            goto LABEL_90;
          if (v55 < 0x660)
LABEL_89:
            v57 = -1;
          else
            v57 = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v55);
LABEL_90:
          v58 = v57;
        }
        else
        {
          v58 = 0;
        }
        if (v58 + 1 >= v42)
        {
          v40 = v53;
        }
        else
        {
          v40 = (TVertex *)TGraph::addVertex(a5, 0);
          addSequence(v46, v53, v40, a5, a6, 0, 0, 0);
          v59 = v69 * (v42 - 1);
          if (v43 || (v60 = *(_QWORD *)(a1 + 72)) == 0)
            v60 = *(_QWORD *)(a1 + 40);
          v62 = v60 + 32;
          v61 = *(_QWORD *)(v60 + 32);
          if (v59 >= (*(_QWORD *)(v62 + 8) - v61) >> 3)
            v46 = 0;
          else
            v46 = *(const __int32 ***)(v61 + 8 * v59);
        }
        goto LABEL_67;
      }
      v46 = (const __int32 **)Magnitude;
LABEL_67:
      v6 = a5;
LABEL_68:
      result = (unint64_t)addSequence(v46, v40, a3, v6, a6, 0, 0, 0);
      v29 = 0;
      v26 = v71;
      v27 += v70;
      HIDWORD(v47) = -858993459 * v36;
      LODWORD(v47) = -858993459 * v36;
      v28 = (v47 >> 1) < 0x1999999A;
      v17 = v78;
    }
    while (*((_DWORD *)v79 + 1));
  }
  if (v85)
  {
    result = (unint64_t)v82;
    if (v82 != v84)
    {
      if (v82)
        return MEMORY[0x1AF44D160]();
    }
  }
  return result;
}

void sub_1ADC9ADBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::makeTerminals(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, TAllocator *a6)
{
  char *v6;
  BOOL Terminals;
  char *v11;
  uint64_t Segment;
  uint64_t v13;
  int v14;
  int *v15;
  uint64_t v16;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  __int32 *v21;
  int v22;
  int *v23;
  int v24;
  unsigned __int8 v25;
  int v27;
  unsigned __int8 v28;
  BOOL v29;
  int v30;
  TLocaleInfo *v31;
  TLocaleInfo *v32;
  uint64_t v33;
  uint64_t v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t v37;
  char *v38;
  _QWORD *ClientData;
  __int128 v43;
  void *v44;
  __int32 *v45;
  __int128 v46;
  _BYTE v47[1024];
  char v48;

  v6 = (char *)(*(_QWORD *)(a1 + 8) + a2);
  if (*v6 && *(_QWORD *)(a1 + 32) > a2)
  {
    v45 = (__int32 *)v47;
    v46 = xmmword_1AE1418C0;
    v48 = 1;
    Terminals = 1;
    v11 = v6;
    while (Terminals)
    {
      Segment = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
      v13 = Segment;
      if (!Segment)
        break;
      v14 = *(_DWORD *)(Segment + 24);
      if (v14 == 5)
        break;
      v15 = *(int **)Segment;
      if (wcslen(*(const __int32 **)Segment) + *((_QWORD *)&v46 + 1) > *(_QWORD *)(a1 + 32))
        break;
      if (!v14)
      {
        v22 = 0;
        while (1)
        {
          if (!v13)
            goto LABEL_68;
          if (*(_DWORD *)(v13 + 24))
            goto LABEL_12;
          v23 = *(int **)v13;
          v11 = *(char **)(v13 + 8);
          v24 = **(_DWORD **)v13;
          if (v24 == 9)
          {
LABEL_52:
            if (*(_DWORD *)(v13 + 24))
              goto LABEL_12;
            goto LABEL_68;
          }
          if (!*((_QWORD *)&v46 + 1) || v45[*((_QWORD *)&v46 + 1) - 1] != 32)
          {
            if ((v25 & 1) == 0
            {
              v32 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v32);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v32;
            }
            if (v24 <= 8202)
            {
              if (v24 != 32 && v24 != 160)
                goto LABEL_47;
            }
            else if (v24 != 8203 && v24 != 12288 && v24 != 65279)
            {
LABEL_47:
              v23 = *(int **)v13;
              goto LABEL_33;
            }
            v23 = *(int **)v13;
            if (wcslen(*(const __int32 **)v13) > 2)
              goto LABEL_52;
          }
LABEL_33:
          v27 = *v23;
          if ((v28 & 1) == 0
          {
            v31 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v31);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v31;
          }
          v29 = v27 == 10 || v27 == 13;
          v30 = !v29;
          if (v29 && ((v22 ^ 1) & 1) == 0)
            goto LABEL_52;
          if (!*((_QWORD *)&v46 + 1) || v45[*((_QWORD *)&v46 + 1) - 1] != 32)
            TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)&unk_1AE16D780, 1uLL);
          v22 |= v30 ^ 1;
          v13 = TSegmenter::getSegment(*(TSegmenter **)(a1 + 16), v11);
        }
      }
      v16 = 0;
      v11 = *(char **)(v13 + 8);
      while (v15[v16++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), v15, v16 - 1);
LABEL_12:
      v19 = *(char **)a3;
      v18 = *(_QWORD *)(a3 + 8);
      v20 = *(_QWORD *)(a1 + 24);
      if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
      {
        if (v48)
        {
          LODWORD(v43) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)&v43, 1uLL);
          v21 = v45;
          --*((_QWORD *)&v46 + 1);
        }
        else
        {
          v21 = v45;
          if ((_QWORD)v46)
            v45[(_QWORD)v46 - 1] = 0;
        }
      }
      else
      {
        v21 = v45;
        v45[*((_QWORD *)&v46 + 1)] = 0;
      }
      Terminals = TGrammar::getTerminals(v20, (unsigned int *)v21, (char **)a3);
      v33 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
      if ((v18 - (uint64_t)v19) >> 3 != v33 >> 3)
      {
        *(_QWORD *)&v43 = v11 - v6;
        std::vector<unsigned long>::resize(a4, v33 >> 3, &v43);
        v44 = &unk_1AE16D788;
        if ((unint64_t)(*((_QWORD *)&v46 + 1) + 1) >> 62)
          v34 = -1;
        else
          v34 = 4 * (*((_QWORD *)&v46 + 1) + 1);
        v35 = (__int32 *)TAllocator::allocate(a6, v34);
        if (*((_QWORD *)&v46 + 1) >= (unint64_t)v46)
        {
          if (v48)
          {
            LODWORD(v43) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v45, *((unint64_t *)&v46 + 1), (int *)&v43, 1uLL);
            v36 = v45;
            --*((_QWORD *)&v46 + 1);
          }
          else
          {
            v36 = v45;
            if ((_QWORD)v46)
              v45[(_QWORD)v46 - 1] = 0;
          }
        }
        else
        {
          v36 = v45;
          v45[*((_QWORD *)&v46 + 1)] = 0;
        }
        wcscpy(v35, v36);
        *(_QWORD *)&v43 = 1;
        *((_QWORD *)&v43 + 1) = v35;
        v38 = *(char **)a3;
        v37 = *(_QWORD *)(a3 + 8);
        ClientData = TGrammarCompiler::makeClientData((uint64_t *)&v44, &v43, 1, a6);
        std::vector<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *,std::allocator<fst::CacheState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>> *>>::resize(a5, (v37 - (uint64_t)v38) >> 3, &ClientData);
      }
    }
LABEL_68:
    if (v48)
    {
      if (v45 != (__int32 *)v47 && v45 != 0)
        MEMORY[0x1AF44D160]();
    }
  }
}

void sub_1ADC9B320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;

  MEMORY[0x1AF44D190](v16, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x450]) && a16 != a9)
  {
    if (a16)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

void TPatternManager::TPatternManager(TPatternManager *this, TInputStream *a2, TInputStream *a3, TLexicon *a4, TTokenizerParamManager *a5)
{
  TGrammarCompiler *v10;
  uint64_t v11;
  std::exception_vtbl *v12;
  const char *(__cdecl *what)(const std::exception *__hidden);
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;
  void (__cdecl *v22)(std::exception *__hidden);
  std::exception_vtbl *v23;
  BOOL v24;
  uint64_t v25;
  const char *(__cdecl *v26)(const std::exception *__hidden);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int *v30;
  const __int32 *v31;
  uint64_t v32;
  _QWORD *v34;
  uint64_t v35;
  std::exception_vtbl *v36;
  void (__cdecl *v37)(std::exception *__hidden);
  std::exception_vtbl *v38;
  _QWORD *v39;
  uint64_t i;
  const char *v41;
  _QWORD *v42;
  const char *v43;
  _QWORD *exception;
  std::exception_vtbl *v45;
  _QWORD *v46;
  void *v47[2];
  char v48;
  std::exception v49[3];
  char v50;
  void *__p[2];
  char v52;
  _BYTE *v53;
  __int128 v54;
  _BYTE v55[1024];
  char v56;
  std::exception v57;
  __int128 v58;
  uint64_t v59;
  int *v60;
  __int128 v61;
  uint64_t v62;
  int *v63;
  __int128 v64;
  uint64_t v65;
  int *v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  TAllocator::TAllocator((TPatternManager *)((char *)this + 40), 2048);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 1) = a4;
  *((_QWORD *)this + 2) = a5;
  *(_QWORD *)this = -1;
  *((_QWORD *)this + 22) = 0;
  v10 = (TGrammarCompiler *)operator new();
  TGrammarCompiler::TGrammarCompiler(v10, (const TLocaleInfo *)(*((_QWORD *)this + 1) + 224));
  *((_QWORD *)this + 3) = v10;
  v11 = operator new();
  TParser::TParser(v11, *(_QWORD *)(*((_QWORD *)this + 3) + 56));
  *((_QWORD *)this + 4) = v11;
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D7A4, (uint64_t)callBackGetLength, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D7CC, (uint64_t)callBackFind, 2, 2, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D7E0, (uint64_t)callBackCopy, 2, 3, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D7F4, (uint64_t)callBackFormat, 1, -1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D810, (uint64_t)callBackDigitToRoman, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D844, (uint64_t)callBackRomanToDigit, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)dword_1AE16D448, (uint64_t)callBackSeqAlt, 1, -1, (uint64_t)dword_1AE16D448, (uint64_t)a4);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)dword_1AE16D878, (uint64_t)callBackSeqAlt, 1, -1, (uint64_t)dword_1AE16D878, (uint64_t)a4);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)dword_1AE16D888, (uint64_t)callBackSync, 1, 1, 0, 0);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D89C, (uint64_t)callBackLookup, 1, 1, (uint64_t)a4, (uint64_t)a5);
  TGrammarCompiler::registerFunction(*((_QWORD **)this + 3), (uint64_t)&unk_1AE16D8B8, (uint64_t)callBackGetCategoryTag, 1, 1, (uint64_t)a4, 0);
  v53 = v55;
  v54 = xmmword_1AE1418C0;
  v56 = 1;
  TParamManager::begin((uint64_t)a5, &v57);
  while (1)
  {
    TParamManager::end((uint64_t)a5, __p);
    v12 = v57.__vftable;
    if (v57.__vftable == __p[0])
      break;
    what = v57.__vftable[1].what;
    if (what && (v14 = (unint64_t)what - 1, v15 = *((_QWORD *)a5 + 2), v14 < (*((_QWORD *)a5 + 3) - v15) >> 3))
      v16 = *(_QWORD *)(v15 + 8 * v14);
    else
      v16 = 0;
    if (*(char *)(v16 + 111) < 0)
    {
      if (*(_QWORD *)(v16 + 96))
        goto LABEL_22;
    }
    else if (*(_BYTE *)(v16 + 111))
    {
      goto LABEL_22;
    }
    TBuffer<wchar_t>::assign((uint64_t)&v53, dword_1AE16D8D4);
    v17 = (int *)(v16 + 16);
    if (*(char *)(v16 + 39) < 0)
      v17 = *(int **)v17;
    v18 = 0;
    while (v17[v18++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v17, v18 - 1);
    v20 = (_QWORD *)*((_QWORD *)this + 3);
    if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
    {
      if (v56)
      {
        LODWORD(__p[0]) = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), (int *)__p, 1uLL);
        v21 = (uint64_t)v53;
        --*((_QWORD *)&v54 + 1);
      }
      else
      {
        v21 = (uint64_t)v53;
        if ((_QWORD)v54)
          *(_DWORD *)&v53[4 * v54 - 4] = 0;
      }
    }
    else
    {
      v21 = (uint64_t)v53;
      *(_DWORD *)&v53[4 * *((_QWORD *)&v54 + 1)] = 0;
    }
    TGrammarCompiler::registerFunction(v20, v21, (uint64_t)callBackParam, 0, 0, v16, (uint64_t)this);
    v12 = v57.__vftable;
LABEL_22:
    v22 = v12->~exception_0;
    if (v22)
    {
      do
      {
        v23 = (std::exception_vtbl *)v22;
        v22 = *(void (__cdecl **)(std::exception *__hidden))v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        v23 = (std::exception_vtbl *)v12->what;
        v24 = v23->~exception == (void (__cdecl *)(std::exception *__hidden))v12;
        v12 = v23;
      }
      while (!v24);
    }
    v57.__vftable = v23;
  }
  v25 = *((_QWORD *)a4 + 40);
  TParamManager::begin(v25, &v57);
  while (1)
  {
    TParamManager::end(v25, __p);
    if (v57.__vftable == __p[0])
      break;
    v26 = v57.__vftable[1].what;
    if (v26 && (v27 = (unint64_t)v26 - 1, v28 = *(_QWORD *)(v25 + 16), v27 < (*(_QWORD *)(v25 + 24) - v28) >> 3))
      v29 = *(_QWORD *)(v28 + 8 * v27);
    else
      v29 = 0;
    v30 = (int *)(v29 + 16);
    v31 = (const __int32 *)(v29 + 16);
    if (*(char *)(v29 + 39) < 0)
      v31 = *(const __int32 **)v30;
    TParamManager::find((uint64_t)a5, v31, (uint64_t *)__p);
    TParamManager::end((uint64_t)a5, v49);
    if (__p[0] == v49[0].__vftable)
    {
      TBuffer<wchar_t>::assign((uint64_t)&v53, dword_1AE16D8D4);
      if (*(char *)(v29 + 39) < 0)
        v30 = *(int **)v30;
      v32 = 0;
      while (v30[v32++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), v30, v32 - 1);
      v34 = (_QWORD *)*((_QWORD *)this + 3);
      if (*((_QWORD *)&v54 + 1) >= (unint64_t)v54)
      {
        if (v56)
        {
          LODWORD(__p[0]) = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v53, *((unint64_t *)&v54 + 1), (int *)__p, 1uLL);
          v35 = (uint64_t)v53;
          --*((_QWORD *)&v54 + 1);
        }
        else
        {
          v35 = (uint64_t)v53;
          if ((_QWORD)v54)
            *(_DWORD *)&v53[4 * v54 - 4] = 0;
        }
      }
      else
      {
        v35 = (uint64_t)v53;
        *(_DWORD *)&v53[4 * *((_QWORD *)&v54 + 1)] = 0;
      }
      TGrammarCompiler::registerFunction(v34, v35, (uint64_t)callBackParam, 0, 0, v29, 0);
    }
    v36 = v57.__vftable;
    v37 = v57.~exception_0;
    if (v37)
    {
      do
      {
        v38 = (std::exception_vtbl *)v37;
        v37 = *(void (__cdecl **)(std::exception *__hidden))v37;
      }
      while (v37);
    }
    else
    {
      do
      {
        v38 = (std::exception_vtbl *)v36->what;
        v24 = v38->~exception == (void (__cdecl *)(std::exception *__hidden))v36;
        v36 = v38;
      }
      while (!v24);
    }
    v57.__vftable = v38;
  }
  if (*((_BYTE *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "TknPattern", (uint64_t)&pTknPatternVersion, 3))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      TException::TException(&v57, (__int128 *)__p);
      v57.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v59 >= 0)
        v43 = (const char *)&v58;
      else
        v43 = (const char *)v58;
      conditionalAssert(v43, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1775);
      TException::~TException(&v57);
      if (v52 < 0)
        operator delete(__p[0]);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v57, "");
      TException::TException(exception, (__int128 *)&v57);
      *exception = &unk_1E5D16668;
    }
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)__p, a2);
    v39 = __p[0];
    v58 = xmmword_1AE15FCA0;
    v57.__vftable = (std::exception_vtbl *)dword_1AE16D8EC;
    v61 = xmmword_1AE15FCA0;
    v59 = -1;
    v60 = dword_1AE16D904;
    v64 = xmmword_1AE15FCA0;
    v62 = -1;
    v63 = dword_1AE16D928;
    v67 = xmmword_1AE15FCA0;
    v65 = -1;
    v66 = dword_1AE16D940;
    v68 = 1;
    if (TFileObject::verify((uint64_t)__p[0], (uint64_t)&v57, 4uLL, 1))
    {
      std::string::basic_string[abi:ne180100]<0>(v47, "");
      TException::TException(v49, (__int128 *)v47);
      v49[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v50 >= 0)
        v45 = (std::exception_vtbl *)&v49[1];
      else
        v45 = v49[1].__vftable;
      conditionalAssert((const char *)v45, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1791);
      TException::~TException(v49);
      if (v48 < 0)
        operator delete(v47[0]);
      v46 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(v49, "");
      TException::TException(v46, (__int128 *)v49);
      *v46 = &unk_1E5D16668;
    }
    for (i = v39[3]; i; i = *(_QWORD *)(i + 16))
    {
      if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D8EC))
      {
        TPatternManager::addArrayObject((TLexicon **)this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D904))
      {
        TPatternManager::addCountingObject(this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D928))
      {
        TPatternManager::addDigitObject((TLexicon **)this, (const TFileObject *)i);
      }
      else if (!wcscmp(*(const __int32 **)(i + 8), dword_1AE16D940))
      {
        TPatternManager::addRomanObject((TLexicon **)this, (const TFileObject *)i);
      }
    }
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)__p);
  }
  if (TInputStream::verifyHeader((uint64_t)a3, "TknGrammar", (uint64_t)pTknGrammarVersion, 2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    TException::TException(&v57, (__int128 *)__p);
    v57.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v59 >= 0)
      v41 = (const char *)&v58;
    else
      v41 = (const char *)v58;
    conditionalAssert(v41, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1826);
    TException::~TException(&v57);
    if (v52 < 0)
      operator delete(__p[0]);
    v42 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v57, "");
    TException::TException(v42, (__int128 *)&v57);
    *v42 = &unk_1E5D16668;
  }
  TGrammarCompiler::registerRules(*((_QWORD *)this + 3), a3, 0);
  TGrammarCompiler::finalize(*((TGrammarCompiler **)this + 3));
  if (v56 && v53 != v55 && v53)
    MEMORY[0x1AF44D160](v53, 0x1000C8052888210);
}

void sub_1ADC9BE9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  TPatternManager *v30;
  uint64_t v33;

  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v33);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    TPatternManager::freeMemory(v30);
    __cxa_rethrow();
  }
  JUMPOUT(0x1ADC9C060);
}

void sub_1ADC9BFC8()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10F0C4009B12AA1);
  JUMPOUT(0x1ADC9C094);
}

void sub_1ADC9C004()
{
  JUMPOUT(0x1ADC9C00CLL);
}

void sub_1ADC9C02C()
{
  _QWORD *v0;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  TAllocator *v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  __cxa_end_catch();
  if (v10)
  {
    if (v9 != v8 && v9 != 0)
      MEMORY[0x1AF44D160]();
  }
  v2 = (void *)v0[19];
  if (v2)
  {
    v0[20] = v2;
    operator delete(v2);
  }
  v3 = (void *)v0[16];
  if (v3)
  {
    v0[17] = v3;
    operator delete(v3);
  }
  v4 = (void *)v0[13];
  if (v4)
  {
    v0[14] = v4;
    operator delete(v4);
  }
  v5 = *v7;
  if (*v7)
  {
    v0[11] = v5;
    operator delete(v5);
  }
  TAllocator::clear(v6);
  JUMPOUT(0x1ADC9C0E8);
}

void sub_1ADC9C0E0(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADC9C0E8);
  __clang_call_terminate(a1);
}

uint64_t callBackSeqAlt(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, TAllocator *a5)
{
  size_t v10;
  uint64_t v11;
  __int32 *v12;

  v10 = callBackSeqAltHelper(a1, a2, a3, a4, 0);
  if (v10 >= 2)
  {
    if (v10 >> 62)
      v11 = -1;
    else
      v11 = 4 * v10;
    v12 = (__int32 *)TAllocator::allocate(a5, v11);
    callBackSeqAltHelper(a1, a2, a3, a4, v12);
  }
  return 1;
}

uint64_t callBackSync(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, TAllocator *a5)
{
  int *v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  int v18;

  if (a2 <= 1 && *(_QWORD *)a1 > 1uLL)
    return 0;
  v7 = *(int **)(a1 + 8);
  if (*v7)
  {
    v8 = wcslen(*(const __int32 **)(a1 + 8));
    v9 = v8 + 10;
    if ((v8 + 10) >> 62)
      v10 = -1;
    else
      v10 = 4 * (v8 + 10);
    v13 = TAllocator::allocate(a5, v10);
    v14 = v9;
    v15 = 0;
    v17 = 0;
    TBuffer<wchar_t>::assign((uint64_t)&v13, (int *)"S");
    v11 = 0;
    while (v7[v11++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, v7, v11 - 1);
    v18 = 34;
    TBuffer<wchar_t>::insert((uint64_t)&v13, v15, &v18, 1uLL);
    if (v15 < v14)
    {
      *((_DWORD *)v13 + v15) = 0;
LABEL_17:
      if (v17 && v13 != &v16)
      {
        if (v13)
          MEMORY[0x1AF44D160]();
      }
      return 1;
    }
    if (v17)
    {
      v18 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v13, v15--, &v18, 1uLL);
      goto LABEL_17;
    }
    if (v14)
    {
      *((_DWORD *)v13 + v14 - 1) = 0;
      goto LABEL_17;
    }
  }
  return 1;
}

void sub_1ADC9C300(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (LOBYTE(STACK[0x420]))
    callBackSync(va);
  _Unwind_Resume(a1);
}

uint64_t callBackLookup(_QWORD *a1, unint64_t a2, _QWORD *a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v8;
  uint64_t v9;
  void *p_p;
  uint64_t v11;
  char *v12;
  uint64_t ActiveConfigHandle;
  size_t v14;
  uint64_t v15;
  uint64_t ValidConfig;
  uint64_t i;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  void *v22;
  void **v23;
  void *v25;
  _BYTE *v26;
  uint64_t v27;
  void *__p;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (a2 <= 1 && *a1 > 1uLL)
    return 0;
  v8 = (unsigned int *)a1[1];
  if (!*v8)
    return 1;
  if (TLexicon::checkName((uint64_t)a3, (int *)v8, 1, 0xFFFFFFFFFFFFFFFFLL))
  {
    loggableUnicode(v8, &__p);
    if (v29 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    tknPrintf("Error: '%s' : Lookup requested for an invalid word name.\n", v9, p_p);
    if (v29 < 0)
      operator delete(__p);
    return 0;
  }
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v12 = TStringParam::get((TStringParam *)(a4 + 10736));
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(a4 + 16456));
  v14 = *(int *)(a4 + 4 * TParam::getValidConfig((TParam *)(a4 + 16456), ActiveConfigHandle) + 16616);
  v15 = TParam::getActiveConfigHandle((TParam *)(a4 + 16104));
  ValidConfig = TParam::getValidConfig((TParam *)(a4 + 16104), v15);
  TLexicon::findHeadClonesCollated(a3, (__int32 *)v8, v12, v14, *(int *)(a4 + 4 * ValidConfig + 16264), &v25);
  for (i = 0; i != 1600; i += 16)
    *(void **)((char *)&__p + i) = 0;
  v18 = 0;
  v19 = 0;
  v20 = (v26 - (_BYTE *)v25) >> 5;
  v21 = (char *)v25 + 16;
  do
  {
    if (v20 == v18)
      break;
    if ((*v21 & 0x35) == 0)
    {
      v22 = (void *)**((_QWORD **)v21 - 2);
      v23 = &__p + 2 * v19;
      *v23 = (void *)1;
      v23[1] = v22;
      ++v19;
    }
    ++v18;
    v21 += 32;
  }
  while (v18 != 100);
  std::vector<TLexiconMatch>::resize((uint64_t)&v25, 0);
  if (v19)
  {
    if (v19 == 1)
      v11 = (uint64_t)__p;
    else
      v11 = callBackSeqAlt((uint64_t)&__p, v19, dword_1AE16D448, (uint64_t)a3, a5);
  }
  else
  {
    v11 = 1;
  }
  if (v25)
  {
    v26 = v25;
    operator delete(v25);
  }
  return v11;
}

void sub_1ADC9C578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TPatternManager::addArrayObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  void *v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  void *p_p;
  const char *v32;
  _QWORD *exception;
  void *__p;
  __int128 v35;
  _BYTE v36[1024];
  char v37;
  __int128 v38;
  char v39;

  v4 = operator new();
  TArrayObject::TArrayObject((TArrayObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[10];
  v6 = this + 10;
  if (this[11] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: %sArray name already defined\n", v30, p_p);
        if (SHIBYTE(v35) < 0)
          operator delete(__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v38, "");
        TException::TException(&__p, &v38);
        __p = &unk_1E5D16668;
        if (v36[7] >= 0)
          v32 = (const char *)&v35;
        else
          v32 = (const char *)v35;
        conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1918);
        TException::~TException((std::exception *)&__p);
        if (v39 < 0)
          operator delete((void *)v38);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(exception, (__int128 *)&__p);
        *exception = &unk_1E5D16668;
      }
      ++v7;
      v5 = this[10];
    }
    while (v7 < (this[11] - v5) >> 3);
  }
  __p = v36;
  v35 = xmmword_1AE1418C0;
  v37 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_1AE16D8EC);
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), v11, v12 - 1);
  v14 = this[3];
  if (*((_QWORD *)&v35 + 1) >= (unint64_t)v35)
  {
    if (v37)
    {
      LODWORD(v38) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), (int *)&v38, 1uLL);
      v15 = __p;
      --*((_QWORD *)&v35 + 1);
    }
    else
    {
      v15 = __p;
      if ((_QWORD)v35)
        *((_DWORD *)__p + v35 - 1) = 0;
    }
  }
  else
  {
    v15 = __p;
    *((_DWORD *)__p + *((_QWORD *)&v35 + 1)) = 0;
  }
  TGrammarCompiler::registerFunction(v14, (uint64_t)v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[12];
  v17 = (uint64_t *)this[11];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(this + 12), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[10];
    v26 = this[11];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[10] = (TLexicon *)v24;
    this[11] = v18;
    this[12] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[11] = v18;
  if (v37)
  {
    if (__p != v36 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADC9C948(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

void TPatternManager::addCountingObject(TPatternManager *this, const TFileObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  char **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  _QWORD *v14;
  void *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v30;
  void *p_p;
  const char *v32;
  _QWORD *exception;
  void *__p;
  __int128 v35;
  _BYTE v36[1024];
  char v37;
  __int128 v38;
  char v39;

  v4 = operator new();
  TCountingObject::TCountingObject(v4, (uint64_t)a2, (uint64_t *)this + 10, *((TLexicon **)this + 1), (TPatternManager *)((char *)this + 40));
  v5 = *((_QWORD *)this + 13);
  v6 = (char **)((char *)this + 104);
  if (*((_QWORD *)this + 14) != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *(_QWORD *)(v5 + 8 * v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: %sCounting name already defined\n", v30, p_p);
        if (SHIBYTE(v35) < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&v38, "");
        TException::TException(&__p, &v38);
        __p = &unk_1E5D16668;
        if (v36[7] >= 0)
          v32 = (const char *)&v35;
        else
          v32 = (const char *)v35;
        conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1887);
        TException::~TException((std::exception *)&__p);
        if (v39 < 0)
          operator delete((void *)v38);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(exception, (__int128 *)&__p);
        *exception = &unk_1E5D16668;
      }
      ++v7;
      v5 = *((_QWORD *)this + 13);
    }
    while (v7 < (*((_QWORD *)this + 14) - v5) >> 3);
  }
  __p = v36;
  v35 = xmmword_1AE1418C0;
  v37 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_1AE16D904);
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), v11, v12 - 1);
  v14 = (_QWORD *)*((_QWORD *)this + 3);
  if (*((_QWORD *)&v35 + 1) >= (unint64_t)v35)
  {
    if (v37)
    {
      LODWORD(v38) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), (int *)&v38, 1uLL);
      v15 = __p;
      --*((_QWORD *)&v35 + 1);
    }
    else
    {
      v15 = __p;
      if ((_QWORD)v35)
        *((_DWORD *)__p + v35 - 1) = 0;
    }
  }
  else
  {
    v15 = __p;
    *((_DWORD *)__p + *((_QWORD *)&v35 + 1)) = 0;
  }
  TGrammarCompiler::registerFunction(v14, (uint64_t)v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = *((_QWORD *)this + 15);
  v17 = (uint64_t *)*((_QWORD *)this + 14);
  if ((unint64_t)v17 >= v16)
  {
    v19 = ((char *)v17 - *v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v16 - (_QWORD)*v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 120, v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = &v23[8 * v22];
    *v24 = v4;
    v18 = v24 + 1;
    v27 = (char *)*((_QWORD *)this + 13);
    v26 = (char *)*((_QWORD *)this + 14);
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 -= 8;
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    *((_QWORD *)this + 13) = v24;
    *((_QWORD *)this + 14) = v18;
    *((_QWORD *)this + 15) = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = v17 + 1;
  }
  *((_QWORD *)this + 14) = v18;
  if (v37)
  {
    if (__p != v36 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADC9CD80(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (a2 == 1)
      {
        __cxa_begin_catch(a1);
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        __cxa_rethrow();
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_1ADC9CE7C()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADC9CE84);
}

void TPatternManager::addDigitObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  void *v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  void *p_p;
  const char *v32;
  _QWORD *exception;
  void *__p;
  __int128 v35;
  _BYTE v36[1024];
  char v37;
  __int128 v38;
  char v39;

  v4 = operator new();
  TDigitObject::TDigitObject((TDigitObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[16];
  v6 = this + 16;
  if (this[17] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: %sDigit name already defined\n", v30, p_p);
        if (SHIBYTE(v35) < 0)
          operator delete(__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v38, "");
        TException::TException(&__p, &v38);
        __p = &unk_1E5D16668;
        if (v36[7] >= 0)
          v32 = (const char *)&v35;
        else
          v32 = (const char *)v35;
        conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1943);
        TException::~TException((std::exception *)&__p);
        if (v39 < 0)
          operator delete((void *)v38);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(exception, (__int128 *)&__p);
        *exception = &unk_1E5D16668;
      }
      ++v7;
      v5 = this[16];
    }
    while (v7 < (this[17] - v5) >> 3);
  }
  __p = v36;
  v35 = xmmword_1AE1418C0;
  v37 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_1AE16D928);
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), v11, v12 - 1);
  v14 = this[3];
  if (*((_QWORD *)&v35 + 1) >= (unint64_t)v35)
  {
    if (v37)
    {
      LODWORD(v38) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), (int *)&v38, 1uLL);
      v15 = __p;
      --*((_QWORD *)&v35 + 1);
    }
    else
    {
      v15 = __p;
      if ((_QWORD)v35)
        *((_DWORD *)__p + v35 - 1) = 0;
    }
  }
  else
  {
    v15 = __p;
    *((_DWORD *)__p + *((_QWORD *)&v35 + 1)) = 0;
  }
  TGrammarCompiler::registerFunction(v14, (uint64_t)v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[18];
  v17 = (uint64_t *)this[17];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(this + 18), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[16];
    v26 = this[17];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[16] = (TLexicon *)v24;
    this[17] = v18;
    this[18] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[17] = v18;
  if (v37)
  {
    if (__p != v36 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADC9D224(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40CE74B16CLL);
  _Unwind_Resume(a1);
}

void TPatternManager::addRomanObject(TLexicon **this, const TFileObject *a2)
{
  uint64_t v4;
  TLexicon *v5;
  TLexicon **v6;
  unint64_t v7;
  const __int32 *v8;
  uint64_t v9;
  const __int32 *v10;
  int *v11;
  uint64_t v12;
  TLexicon *v14;
  void *v15;
  TLexicon *v16;
  uint64_t *v17;
  TLexicon *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  TLexicon *v25;
  TLexicon *v26;
  TLexicon *v27;
  uint64_t v28;
  uint64_t v30;
  void *p_p;
  const char *v32;
  _QWORD *exception;
  void *__p;
  __int128 v35;
  _BYTE v36[1024];
  char v37;
  __int128 v38;
  char v39;

  v4 = operator new();
  TRomanObject::TRomanObject((TRomanObject *)v4, a2, this[1], (TAllocator *)(this + 5));
  v5 = this[19];
  v6 = this + 19;
  if (this[20] != v5)
  {
    v7 = 0;
    do
    {
      v8 = (const __int32 *)(v4 + 8);
      if (*(char *)(v4 + 31) < 0)
        v8 = *(const __int32 **)(v4 + 8);
      v9 = *((_QWORD *)v5 + v7);
      v10 = (const __int32 *)(v9 + 8);
      if (*(char *)(v9 + 31) < 0)
        v10 = *(const __int32 **)v10;
      if (!wcscmp(v8, v10))
      {
        loggableFileObject((uint64_t *)a2);
        if (v35 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: %sRoman name already defined\n", v30, p_p);
        if (SHIBYTE(v35) < 0)
          operator delete(__p);
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
        std::string::basic_string[abi:ne180100]<0>(&v38, "");
        TException::TException(&__p, &v38);
        __p = &unk_1E5D16668;
        if (v36[7] >= 0)
          v32 = (const char *)&v35;
        else
          v32 = (const char *)v35;
        conditionalAssert(v32, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/tkn/patternmgr.cpp", 1968);
        TException::~TException((std::exception *)&__p);
        if (v39 < 0)
          operator delete((void *)v38);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(exception, (__int128 *)&__p);
        *exception = &unk_1E5D16668;
      }
      ++v7;
      v5 = this[19];
    }
    while (v7 < (this[20] - v5) >> 3);
  }
  __p = v36;
  v35 = xmmword_1AE1418C0;
  v37 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&__p, dword_1AE16D940);
  v11 = (int *)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
    v11 = *(int **)v11;
  v12 = 0;
  while (v11[v12++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), v11, v12 - 1);
  v14 = this[3];
  if (*((_QWORD *)&v35 + 1) >= (unint64_t)v35)
  {
    if (v37)
    {
      LODWORD(v38) = 0;
      TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v35 + 1), (int *)&v38, 1uLL);
      v15 = __p;
      --*((_QWORD *)&v35 + 1);
    }
    else
    {
      v15 = __p;
      if ((_QWORD)v35)
        *((_DWORD *)__p + v35 - 1) = 0;
    }
  }
  else
  {
    v15 = __p;
    *((_DWORD *)__p + *((_QWORD *)&v35 + 1)) = 0;
  }
  TGrammarCompiler::registerFunction(v14, (uint64_t)v15, (uint64_t)callBackObject, 1, 1, v4, 0);
  v16 = this[21];
  v17 = (uint64_t *)this[20];
  if (v17 >= (uint64_t *)v16)
  {
    v19 = ((char *)v17 - (char *)*v6) >> 3;
    if ((unint64_t)(v19 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v20 = v16 - *v6;
    v21 = v20 >> 2;
    if (v20 >> 2 <= (unint64_t)(v19 + 1))
      v21 = v19 + 1;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v22 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v22 = v21;
    if (v22)
      v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(this + 21), v22);
    else
      v23 = 0;
    v24 = (uint64_t *)&v23[8 * v19];
    v25 = (TLexicon *)&v23[8 * v22];
    *v24 = v4;
    v18 = (TLexicon *)(v24 + 1);
    v27 = this[19];
    v26 = this[20];
    if (v26 != v27)
    {
      do
      {
        v28 = *((_QWORD *)v26 - 1);
        v26 = (TLexicon *)((char *)v26 - 8);
        *--v24 = v28;
      }
      while (v26 != v27);
      v26 = *v6;
    }
    this[19] = (TLexicon *)v24;
    this[20] = v18;
    this[21] = v25;
    if (v26)
      operator delete(v26);
  }
  else
  {
    *v17 = v4;
    v18 = (TLexicon *)(v17 + 1);
  }
  this[20] = v18;
  if (v37)
  {
    if (__p != v36 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
}

void sub_1ADC9D668(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C40918A3909);
  _Unwind_Resume(a1);
}

uint64_t TPatternManager::freeMemory(TPatternManager *this)
{
  TParser *v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v2 = (TParser *)*((_QWORD *)this + 4);
  if (v2)
  {
    TParser::~TParser(v2);
    MEMORY[0x1AF44D190]();
  }
  result = *((_QWORD *)this + 3);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  v5 = *((_QWORD *)this + 19);
  v4 = *((_QWORD *)this + 20);
  if (v4 != v5)
  {
    v6 = 0;
    do
    {
      result = *(_QWORD *)(v5 + 8 * v6);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v5 = *((_QWORD *)this + 19);
        v4 = *((_QWORD *)this + 20);
      }
      ++v6;
    }
    while (v6 < (v4 - v5) >> 3);
  }
  v8 = *((_QWORD *)this + 16);
  v7 = *((_QWORD *)this + 17);
  if (v7 != v8)
  {
    v9 = 0;
    do
    {
      result = *(_QWORD *)(v8 + 8 * v9);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v8 = *((_QWORD *)this + 16);
        v7 = *((_QWORD *)this + 17);
      }
      ++v9;
    }
    while (v9 < (v7 - v8) >> 3);
  }
  v11 = *((_QWORD *)this + 13);
  v10 = *((_QWORD *)this + 14);
  if (v10 != v11)
  {
    v12 = 0;
    do
    {
      result = *(_QWORD *)(v11 + 8 * v12);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v11 = *((_QWORD *)this + 13);
        v10 = *((_QWORD *)this + 14);
      }
      ++v12;
    }
    while (v12 < (v10 - v11) >> 3);
  }
  v14 = *((_QWORD *)this + 10);
  v13 = *((_QWORD *)this + 11);
  if (v13 != v14)
  {
    v15 = 0;
    do
    {
      result = *(_QWORD *)(v14 + 8 * v15);
      if (result)
      {
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
        v14 = *((_QWORD *)this + 10);
        v13 = *((_QWORD *)this + 11);
      }
      ++v15;
    }
    while (v15 < (v13 - v14) >> 3);
  }
  return result;
}

void TPatternManager::~TPatternManager(TPatternManager *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  TPatternManager::freeMemory(this);
  v2 = (void *)*((_QWORD *)this + 19);
  if (v2)
  {
    *((_QWORD *)this + 20) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 16);
  if (v3)
  {
    *((_QWORD *)this + 17) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 13);
  if (v4)
  {
    *((_QWORD *)this + 14) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 10);
  if (v5)
  {
    *((_QWORD *)this + 11) = v5;
    operator delete(v5);
  }
  TAllocator::clear((TPatternManager *)((char *)this + 40));
}

uint64_t callBackObject(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, TAllocator *a5)
{
  unsigned int *v8;
  unsigned int v9;
  unsigned int *v10;
  unsigned __int8 v11;
  unsigned int v12;
  TLocaleInfo *v13;
  uint64_t v14;
  void *p_p;
  __int32 *v17;
  size_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  TLocaleInfo *v25;
  void *__p;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  int v31;

  if (a2 <= 1 && *(_QWORD *)a1 > 1uLL)
    return 0;
  v8 = *(unsigned int **)(a1 + 8);
  v9 = *v8;
  if (*v8)
  {
    v10 = v8 + 1;
    do
    {
      if ((v11 & 1) == 0
      {
        v13 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v13);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v13;
      }
      if ((int)v9 < 48
        || v9 >= 0x3A
        && (v9 < 0x660
         || TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v9) == -1))
      {
        loggableUnicode(*(unsigned int **)(a1 + 8), &__p);
        if (v28 >= 0)
          p_p = &__p;
        else
          p_p = __p;
        tknPrintf("Error: ${Counting, Array, Roman}...() : the argument (%s) must be a number\n", v14, p_p);
        if (SHIBYTE(v28) < 0)
          operator delete(__p);
        return 0;
      }
      v12 = *v10++;
      v9 = v12;
    }
    while (v12);
    v17 = *(__int32 **)(a1 + 8);
    if ((*(unsigned int (**)(unint64_t, __int32 *))(*(_QWORD *)a3 + 16))(a3, v17))
    {
      v19 = wcslen(v17);
      v20 = v19 + 54;
      if ((v19 + 54) >> 62)
        v21 = -1;
      else
        v21 = 4 * (v19 + 54);
      __p = TAllocator::allocate(a5, v21);
      v27 = v20;
      v28 = 0;
      v30 = 0;
      TBuffer<wchar_t>::assign((uint64_t)&__p, (int *)"P");
      if ((v22 & 1) == 0
      {
        v25 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v25);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v25;
      }
      TLocaleInfo::valueToString(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, (uint64_t)&__p, 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v28, (int *)"\"", 0xBuLL);
      v23 = 0;
      while (v17[v23++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&__p, v28, v17, v23 - 1);
      TBuffer<wchar_t>::insert((uint64_t)&__p, v28, (int *)"\"", 3uLL);
      if (v28 >= v27)
      {
        if (v30)
        {
          v31 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&__p, v28--, &v31, 1uLL);
        }
        else
        {
          if (!v27)
            return 1;
          *((_DWORD *)__p + v27 - 1) = 0;
        }
      }
      else
      {
        *((_DWORD *)__p + v28) = 0;
      }
      if (v30 && __p != &v29)
      {
        if (__p)
          MEMORY[0x1AF44D160]();
      }
    }
  }
  return 1;
}

void sub_1ADC9DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t *__p, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1AF44D190](v13, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x420]))
  {
    if (__p != &a13 && __p != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

TAllocator *TPatternManager::clear(TPatternManager *this)
{
  uint64_t v2;
  TAllocator *result;
  unint64_t v4;

  v2 = *((_QWORD *)this + 4);
  v4 = *(_QWORD *)(v2 + 48);
  result = (TAllocator *)(v2 + 48);
  if (v4 >= 0x801)
    result = (TAllocator *)TAllocator::clear(result);
  *((_QWORD *)this + 22) = 0;
  return result;
}

void TPatternManager::addWords(TPatternManager *this, TVertex *a2, TGraph *a3, TSegmenter *a4, uint64_t a5)
{
  char *v9;
  uint64_t Segment;
  uint64_t v11;
  int v12;
  unsigned __int8 v13;
  BOOL v15;
  int v16;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ActiveConfigHandle;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *AllProductions;
  _QWORD *v27;
  int v28;
  unsigned __int8 v29;
  BOOL v31;
  int v32;
  _DWORD *v34;
  __int32 *v35;
  __int32 *v36;
  uint64_t PreviousSegment;
  char *v38;
  char *v39;
  uint64_t v40;
  int *v41;
  char *v43;
  unsigned int *v44;
  BOOL v45;
  __int32 *v46;
  __int32 *v47;
  uint64_t i;
  uint64_t v49;
  int *v50;
  unsigned int *v52;
  BOOL v53;
  unint64_t v54;
  TLocaleInfo *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t ValidConfig;
  uint64_t v60;
  const char *p_p;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const __int32 *v68;
  void *v69;
  const __int32 *v70;
  const __int32 *v71;
  int *v72;
  int *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  TAllocator *v77;
  unint64_t v78;
  TGraph *v79;
  TLocaleInfo *v80;
  TGraph *v81;
  uint64_t v82;
  unsigned int *v83;
  unint64_t v84;
  unint64_t v85;
  void *__p;
  const __int32 *v87;
  char v88;
  unsigned int *v89;
  __int128 v90;
  _BYTE v91[48];
  void *v92;
  char v93;
  _BYTE v94[936];
  char v95;
  _BYTE v96[40];
  _QWORD v97[5];
  int v98[3];

  *(_QWORD *)this = a5;
  v9 = (char *)*((_QWORD *)a2 + 2);
  Segment = TSegmenter::getSegment(a4, v9);
  if (!Segment)
    return;
  v11 = Segment;
  if (*(_DWORD *)(Segment + 24) == 5)
    return;
  v12 = **(_DWORD **)Segment;
  {
    v79 = a3;
    v80 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v80);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v80;
    a3 = v79;
  }
  if (v12 > 159)
  {
    v15 = v12 == 12288;
    if (v12 >= 12288)
    {
      v16 = 65279;
    }
    else
    {
      v15 = v12 == 160;
      v16 = 8203;
    }
    if (v15 || v12 == v16)
      return;
  }
  else if (v12 <= 0x20 && ((1 << v12) & 0x100002600) != 0)
  {
    return;
  }
  v81 = a3;
  v18 = *(_QWORD *)(v11 + 8) - (_QWORD)v9 >= 0x32uLL || (unint64_t)v9 >= *((_QWORD *)this + 22);
  v19 = 50;
  v85 = *(_QWORD *)(v11 + 8) - (_QWORD)v9;
  if (!v18)
    v19 = *(_QWORD *)(v11 + 8) - (_QWORD)v9;
  v20 = *((_QWORD *)this + 2);
  v21 = *(_QWORD *)(*((_QWORD *)this + 3) + 56);
  v97[0] = &off_1E5D16198;
  v97[1] = v9;
  v97[2] = a4;
  v97[3] = v21;
  v97[4] = v19;
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v20 + 21152));
  v23 = *(int *)(v20 + 4 * TParam::getValidConfig((TParam *)(v20 + 21152), ActiveConfigHandle) + 21312);
  v24 = *((_QWORD *)this + 4);
  v25 = *(_QWORD *)(v24 + 16);
  *(_QWORD *)(v24 + 24) = v23;
  (*(void (**)(void))(v25 + 16))();
  AllProductions = (_QWORD *)TParser::getAllProductions(*((_QWORD **)this + 4), (uint64_t)v97);
  TAllocator::TAllocator((TAllocator *)v96, 2048);
  if (!AllProductions)
  {
    v56 = 0;
    goto LABEL_103;
  }
  v84 = 0;
  v27 = AllProductions;
  do
  {
    v28 = **(_DWORD **)TSegmenter::getPreviousSegment(a4, &v9[v27[2]]);
    if ((v29 & 1) == 0
    {
      v55 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v55);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v55;
    }
    if (v28 > 159)
    {
      v31 = v28 == 12288;
      if (v28 >= 12288)
      {
        v32 = 65279;
      }
      else
      {
        v31 = v28 == 160;
        v32 = 8203;
      }
      if (v31 || v28 == v32)
        goto LABEL_43;
    }
    else if (v28 <= 0x20 && ((1 << v28) & 0x100002600) != 0)
    {
      goto LABEL_43;
    }
    if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, dword_1AE16D958, (TAllocator *)v96, 0) <= 1)
    {
      if (*v34)
      {
        if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, dword_1AE16D974, (TAllocator *)v96, 0) <= 1)
        {
          v36 = v35;
          if (!*v35)
            goto LABEL_91;
          v89 = (unsigned int *)v91;
          v90 = xmmword_1AE1418C0;
          v95 = 1;
          PreviousSegment = TSegmenter::getPreviousSegment(a4, v9);
          v39 = v38;
          while (PreviousSegment && *(_DWORD *)(PreviousSegment + 24) != 5)
          {
            if (*((_QWORD *)&v90 + 1) > 0x31uLL)
              goto LABEL_59;
            v40 = 0;
            v41 = *(int **)PreviousSegment;
            while (v41[v40++])
              ;
            TBuffer<wchar_t>::insert((uint64_t)&v89, 0, v41, v40 - 1);
            PreviousSegment = TSegmenter::getPreviousSegment(a4, v39);
            v39 = v43;
          }
          if (!*((_QWORD *)&v90 + 1))
            TBuffer<wchar_t>::assign((uint64_t)&v89, (int *)&unk_1AE16D9A4);
LABEL_59:
          TRegExp::TRegExp((uint64_t)&__p, v36, *((_QWORD *)this + 1) + 224);
          if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
          {
            if (v95)
            {
              v98[0] = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v98, 1uLL);
              v44 = v89;
              --*((_QWORD *)&v90 + 1);
            }
            else
            {
              v44 = v89;
              if ((_QWORD)v90)
                v89[(_QWORD)v90 - 1] = 0;
            }
          }
          else
          {
            v44 = v89;
            v89[*((_QWORD *)&v90 + 1)] = 0;
          }
          v45 = TRegExp::match(&__p, v44, 1);
          TRegExp::~TRegExp((TRegExp *)&__p);
          if (v95 && v89 != (unsigned int *)v91 && v89)
            MEMORY[0x1AF44D160]();
          if (v45)
          {
LABEL_91:
            if ((unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)v27, dword_1AE16D9AC, (TAllocator *)v96, 0) <= 1)
            {
              v47 = v46;
              if (!*v46)
                goto LABEL_92;
              v89 = (unsigned int *)v91;
              v90 = xmmword_1AE1418C0;
              v95 = 1;
              for (i = TSegmenter::getSegment(a4, &v9[v27[2]]);
                    i && *(_DWORD *)(i + 24) != 5;
                    i = TSegmenter::getSegment(a4, *(char **)(i + 8)))
              {
                if (*((_QWORD *)&v90 + 1) > 0x31uLL)
                  goto LABEL_81;
                v49 = 0;
                v50 = *(int **)i;
                while (v50[v49++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v50, v49 - 1);
              }
              if (!*((_QWORD *)&v90 + 1))
                TBuffer<wchar_t>::assign((uint64_t)&v89, (int *)&unk_1AE16D9A4);
LABEL_81:
              TRegExp::TRegExp((uint64_t)&__p, v47, *((_QWORD *)this + 1) + 224);
              if (*((_QWORD *)&v90 + 1) >= (unint64_t)v90)
              {
                if (v95)
                {
                  v98[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v89, *((unint64_t *)&v90 + 1), v98, 1uLL);
                  v52 = v89;
                  --*((_QWORD *)&v90 + 1);
                }
                else
                {
                  v52 = v89;
                  if ((_QWORD)v90)
                    v89[(_QWORD)v90 - 1] = 0;
                }
              }
              else
              {
                v52 = v89;
                v89[*((_QWORD *)&v90 + 1)] = 0;
              }
              v53 = TRegExp::match(&__p, v52, 2);
              TRegExp::~TRegExp((TRegExp *)&__p);
              if (v95 && v89 != (unsigned int *)v91 && v89)
                MEMORY[0x1AF44D160]();
              if (v53)
              {
LABEL_92:
                v54 = v84;
                if (v27[2] > v84)
                  v54 = v27[2];
                v84 = v54;
              }
            }
          }
        }
      }
      else
      {
        tknPrintString("Error: Top production 'spoken' attribute is an empty string\n");
      }
    }
LABEL_43:
    v27 = (_QWORD *)*v27;
  }
  while (v27);
  v56 = v84;
  if (v84)
  {
    if ((unint64_t)&v9[v84] <= *((_QWORD *)this + 22))
      v56 = v85;
    else
      *((_QWORD *)this + 22) = &v9[v84];
  }
  else
  {
    AllProductions = 0;
  }
LABEL_103:
  v57 = *((_QWORD *)this + 2);
  v58 = TParam::getActiveConfigHandle((TParam *)(v57 + 21504));
  ValidConfig = TParam::getValidConfig((TParam *)(v57 + 21504), v58);
  v60 = MEMORY[0x1E0DE4FB8];
  if (*(_BYTE *)(v57 + ValidConfig + 21656))
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v89);
    TParser::logChart(*((uint64_t **)this + 4), &v89);
    std::stringbuf::str();
    if (v88 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    tknPrintString(p_p);
    if (v88 < 0)
      operator delete(__p);
    v89 = (unsigned int *)*MEMORY[0x1E0DE4F60];
    *(unsigned int **)((char *)&v89 + *((_QWORD *)v89 - 3)) = *(unsigned int **)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)&v90 = v60 + 16;
    if (v93 < 0)
      operator delete(v92);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1AF44D094](v94);
  }
  if (AllProductions)
  {
    v62 = (unsigned int *)*MEMORY[0x1E0DE4F60];
    v83 = *(unsigned int **)(MEMORY[0x1E0DE4F60] + 24);
    v82 = v60 + 16;
    do
    {
      v63 = AllProductions[2];
      if (v63 == v56 || v63 == v85)
      {
        v65 = *((_QWORD *)this + 2);
        v66 = TParam::getActiveConfigHandle((TParam *)(v65 + 21752));
        if (*(_BYTE *)(v65 + TParam::getValidConfig((TParam *)(v65 + 21752), v66) + 21904))
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v89);
          TParser::logTree(*((_QWORD *)this + 4), AllProductions, &v89);
          std::stringbuf::str();
          if (v88 >= 0)
            v67 = (const char *)&__p;
          else
            v67 = (const char *)__p;
          tknPrintString(v67);
          if (v88 < 0)
            operator delete(__p);
          v89 = v62;
          *(unsigned int **)((char *)&v89 + *((_QWORD *)v62 - 3)) = v83;
          *(_QWORD *)&v90 = v82;
          if (v93 < 0)
            operator delete(v92);
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          MEMORY[0x1AF44D094](v94);
        }
        __p = (void *)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_1AE16D958, (TAllocator *)v96, 0);
        v87 = v68;
        if ((unint64_t)__p <= 1)
        {
          if (*v68)
          {
            v69 = (void *)callBackSeqAlt((uint64_t)&__p, 1uLL, dword_1AE16D878, *((_QWORD *)this + 1), (TAllocator *)v96);
            v71 = v70;
            __p = v69;
            v87 = v70;
            if ((unint64_t)v69 <= 1
              && v70
              && (unint64_t)TGrammarCompiler::getAttributeValue((uint64_t)AllProductions, dword_1AE16D9E0, (TAllocator *)v96, 0) <= 1)
            {
              v73 = v72;
              v74 = TGraph::addVertex(v81, &v9[AllProductions[2]]);
              v75 = TLexicon::addTempWord(*((TAllocator **)this + 1), v73, dword_1AE16D9F4, 0, v71);
              LODWORD(v89) = 5;
              v90 = (unint64_t)v75;
              v91[0] = 0;
              TGraph::addEdge(v81, (uint64_t)a2, v74, (uint64_t)&v89);
            }
          }
        }
      }
      AllProductions = (_QWORD *)*AllProductions;
    }
    while (AllProductions);
  }
  v76 = *((_QWORD *)this + 4);
  v78 = *(_QWORD *)(v76 + 48);
  v77 = (TAllocator *)(v76 + 48);
  if (v78 >= 0x801)
    TAllocator::clear(v77);
  TAllocator::clear((TAllocator *)v96);
}

void sub_1ADC9E5A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

_QWORD *addToken(__int32 **a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5)
{
  uint64_t HeadClone;
  int v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  HeadClone = TLexicon::findHeadClone((uint64_t)a5, a1[3]);
  if (HeadClone)
  {
    v11 = 1;
  }
  else
  {
    HeadClone = (uint64_t)TLexicon::addTempWord(a5, a1[3], 0, 0, 0);
    v11 = 4;
  }
  v13 = v11;
  v14 = HeadClone;
  v15 = 0;
  v16 = 0;
  return TGraph::addEdge(a4, (uint64_t)a2, a3, (uint64_t)&v13);
}

const char *addAlt(const TFileObject *a1, TVertex *a2, TVertex *a3, TGraph *a4, TLexicon *a5, const char *a6, const char *a7, const char *a8)
{
  uint64_t v9;
  const char *v16;
  unint64_t v17;

  v9 = *((_QWORD *)a1 + 3);
  if (v9)
  {
    v16 = a7;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1AE16D430))
      {
        addToken((__int32 **)v9, a2, a3, a4, a5);
      }
      else
      {
        if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1AE16D448))
        {
          v17 = addAlt((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
LABEL_10:
          if (v17 > (unint64_t)a7)
            v16 = (const char *)v17;
          goto LABEL_14;
        }
        if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1AE16DA14))
        {
          addPattern(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
        }
        else if (!wcscmp(*(const __int32 **)(v9 + 8), dword_1AE16D878))
        {
          v17 = addSequence((const TFileObject *)v9, a2, a3, a4, a5, a6, a7, a8);
          goto LABEL_10;
        }
      }
LABEL_14:
      v9 = *(_QWORD *)(v9 + 16);
      if (!v9)
        return v16;
    }
  }
  return a7;
}

uint64_t addPattern(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  TLocaleInfo *v14;
  BOOL v16;

  v8 = 0;
  v9 = 0;
  v10 = *(_QWORD *)(a1 + 24);
  do
  {
    if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"A"))
    {
      v16 = 0;
      v11 = *(_QWORD *)(v10 + 24);
      if ((v12 & 1) == 0
      {
        v14 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v14);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
      }
      v8 = TLocaleInfo::stringToULong(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v11, &v16, 1);
    }
    else if (!wcscmp(*(const __int32 **)(v10 + 8), (const __int32 *)"V"))
    {
      v9 = *(_QWORD *)(v10 + 24);
    }
    v10 = *(_QWORD *)(v10 + 16);
  }
  while (v10);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 24))(v8, v9, a2, a3, a4, a5);
}

void sub_1ADC9EA34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1AF44D190](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TPatternManager::expandWord(uint64_t a1, TGraph *a2, uint64_t a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  TAllocator *v9;
  int *v10;
  const char **v11;
  TVertex *v12;
  _QWORD *v13;
  TAllocator *v14;
  int *v15;
  _QWORD *v16;
  size_t v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  char v21;
  int *v22;
  __int128 v23;
  _BYTE v24[785];
  char v25;
  const __int32 ***v26;
  __int128 v27;
  _BYTE v28[1024];
  char v29;

  v8 = *(_QWORD *)(a3 + 16);
  v7 = *(_QWORD **)(a3 + 24);
  if (a4)
  {
    v26 = (const __int32 ***)v28;
    v27 = xmmword_1AE1418C0;
    v29 = 1;
    TWord::getWrittenForm(*(__int32 ***)(a3 + 56), (uint64_t)&v26);
    v22 = (int *)v24;
    v23 = xmmword_1AE1418C0;
    v25 = 1;
    TBuffer<wchar_t>::assign((uint64_t)&v22, dword_1AE16DA34);
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    v9 = *(TAllocator **)(a1 + 8);
    if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        v10 = v22;
        --*((_QWORD *)&v23 + 1);
      }
      else
      {
        v10 = v22;
        if ((_QWORD)v23)
          v22[(_QWORD)v23 - 1] = 0;
      }
    }
    else
    {
      v10 = v22;
      v22[*((_QWORD *)&v23 + 1)] = 0;
    }
    v13 = TLexicon::addTempWord(v9, 0, v10, 0, 0);
    v12 = (TVertex *)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v13;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, v8, v12, (uint64_t)&v18);
    TBuffer<wchar_t>::assign((uint64_t)&v22, dword_1AE16DA68);
    TBuffer<wchar_t>::operator+=((uint64_t)&v22, (uint64_t)&v26);
    v14 = *(TAllocator **)(a1 + 8);
    if (*((_QWORD *)&v23 + 1) >= (unint64_t)v23)
    {
      if (v25)
      {
        v18 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v22, *((unint64_t *)&v23 + 1), &v18, 1uLL);
        v15 = v22;
        --*((_QWORD *)&v23 + 1);
      }
      else
      {
        v15 = v22;
        if ((_QWORD)v23)
          v22[(_QWORD)v23 - 1] = 0;
      }
    }
    else
    {
      v15 = v22;
      v22[*((_QWORD *)&v23 + 1)] = 0;
    }
    v16 = TLexicon::addTempWord(v14, 0, v15, 0, 0);
    v11 = (const char **)TGraph::addVertex(a2, 0);
    v18 = 6;
    v19 = v16;
    v20 = 0;
    v21 = 0;
    TGraph::addEdge(a2, (uint64_t)v11, v7, (uint64_t)&v18);
    if (v25 && v22 != (int *)v24 && v22)
      MEMORY[0x1AF44D160]();
    if (v29 && v26 != (const __int32 ***)v28 && v26)
      MEMORY[0x1AF44D160]();
  }
  else
  {
    v11 = *(const char ***)(a3 + 24);
    v12 = *(TVertex **)(a3 + 16);
  }
  v17 = wcslen(**(const __int32 ***)(a3 + 56));
  TFileObjectParser::TFileObjectParser(&v26, **(_QWORD **)(a3 + 56) + 4 * v17 + 4, 1, *(_QWORD *)(a1 + 8) + 224);
  addSequence(v26[3], v12, (TVertex *)v11, a2, *(TLexicon **)(a1 + 8), *((const char **)v12 + 2), *((const char **)v12 + 2), v11[3]);
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)&v26);
  TGraph::deleteEdge((uint64_t)a2, a3);
}

void sub_1ADC9ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  unint64_t v18;

  if (LOBYTE(STACK[0x448]) && a15 != v16 && a15)
    MEMORY[0x1AF44D160]();
  if (LOBYTE(STACK[0x868]))
  {
    v18 = STACK[0x450];
    if (STACK[0x450] != v15)
    {
      if (v18)
        MEMORY[0x1AF44D160](v18, 0x1000C8052888210);
    }
  }
  _Unwind_Resume(a1);
}

void TDigitObject::~TDigitObject(TDigitObject *this)
{
  TDigitObject::~TDigitObject(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E5D16200;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D16690;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t TDigitObject::isBuildable()
{
  return 1;
}

void TRomanObject::~TRomanObject(TRomanObject *this)
{
  TRomanObject::~TRomanObject(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *(_QWORD *)this = &off_1E5D16258;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D16690;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL TRomanObject::isBuildable(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v3;
  unsigned int v4;
  TLocaleInfo *v7;
  BOOL v8;

  v8 = 0;
  {
    v7 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v7);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v7;
  }
  v4 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v8);
  return !v8 && v4 < 0xBB8;
}

void sub_1ADC9EF14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TCountingObject::~TCountingObject(void **this)
{
  *this = &unk_1E5D16690;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D16690;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

BOOL TCountingObject::isBuildable(uint64_t a1, __int32 *a2)
{
  __int32 *v4;
  __int32 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int DigitExtended;
  TLocaleInfo *v9;

  do
  {
    v4 = a2;
    v5 = a2[1];
    ++a2;
    if (!v5)
      break;
    v6 = *v4;
    {
      v9 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v9);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v9;
    }
    DigitExtended = v6 - 48;
    if ((int)v6 < 48)
      break;
    if (v6 > 0x39)
    {
      if (v6 < 0x660)
        return wcslen(v4) <= *(_QWORD *)(a1 + 88);
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  return wcslen(v4) <= *(_QWORD *)(a1 + 88);
}

void sub_1ADC9F0B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

void TChartSeeder::~TChartSeeder(TChartSeeder *this)
{
  JUMPOUT(0x1AF44D190);
}

void TArrayObject::~TArrayObject(TArrayObject *this)
{
  TArrayObject::~TArrayObject(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *(_QWORD *)this = &unk_1E5D16168;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  *(_QWORD *)this = &unk_1E5D16690;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

BOOL TArrayObject::isBuildable(uint64_t a1, __int32 *a2)
{
  __int32 *v4;
  __int32 v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned int DigitExtended;
  TLocaleInfo *v9;
  unsigned __int8 v10;
  unsigned int v11;
  uint64_t v12;
  TLocaleInfo *v14;
  BOOL v15;

  do
  {
    v4 = a2;
    v5 = a2[1];
    ++a2;
    if (!v5)
      break;
    v6 = *v4;
    {
      v9 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v9);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v9;
    }
    DigitExtended = v6 - 48;
    if ((int)v6 < 48)
      break;
    if (v6 > 0x39)
    {
      if (v6 < 0x660)
        break;
      DigitExtended = TLocaleInfo::getDigitExtended(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v6);
    }
  }
  while (!DigitExtended);
  if (wcslen(v4) > 5)
    return 0;
  v15 = 0;
  {
    v14 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v14);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v14;
  }
  v11 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (unsigned int *)v4, &v15);
  if (v15)
    return 0;
  v12 = *(_QWORD *)(a1 + 32);
  return v11 < (unint64_t)((*(_QWORD *)(a1 + 40) - v12) >> 3) && *(_QWORD *)(v12 + 8 * v11) != 0;
}

void sub_1ADC9F294(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

const char *TArrayObject::build(uint64_t a1, unsigned int *a2, TVertex *a3, TVertex *a4, TGraph *a5, TLexicon *a6)
{
  unsigned __int8 v12;
  unsigned int v13;
  TLocaleInfo *v15;
  BOOL v16;

  v16 = 0;
  {
    v15 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v15);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
  }
  v13 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a2, &v16);
  return addSequence(*(const __int32 ***)(*(_QWORD *)(a1 + 32) + 8 * v13), a3, a4, a5, a6, 0, 0, 0);
}

void sub_1ADC9F3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

size_t callBackSeqAltHelper(uint64_t a1, unint64_t a2, __int32 *a3, uint64_t a4, __int32 *a5)
{
  __int32 *v5;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  const __int32 **v15;
  __int32 *v16;
  __int32 *v17;
  int v18;
  uint64_t v19;
  int *v20;
  size_t v21;
  int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v27;
  void *p_p;
  BOOL v31;
  __int32 *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void *__p;
  __int128 v38;
  _BYTE v39[1024];
  char v40;
  int v41[3];

  v5 = a5;
  if (a5)
  {
    wcscpy(a5, a3);
    v8 = (char *)&v5[wcslen(v5)];
    strcpy(v8, " ");
    v5 = (__int32 *)&v8[4 * wcslen((const __int32 *)v8)];
  }
  if (a2)
  {
    v9 = 0;
    v10 = 0;
    v11 = 1;
    v12 = 1;
    while (1)
    {
      if (a2 <= v11)
        v13 = v11;
      else
        v13 = a2;
      if (*(_QWORD *)(a1 + 16 * v9) > 1uLL)
        return 0;
      v14 = a1 + 16 * v9;
      v17 = *(__int32 **)(v14 + 8);
      v15 = (const __int32 **)(v14 + 8);
      v16 = v17;
      if (*v17)
      {
        v18 = wcsncmp(v16, (const __int32 *)"S", 8uLL);
        v31 = v18 == 0;
        if (v18)
          goto LABEL_11;
        if (v10)
        {
          v22 = wcscmp(a3, dword_1AE16D448);
          if (!((v22 != 0) | v12 & 1))
          {
            v23 = v9;
            while (++v23 < a2)
            {
              if (wcsncmp(*v15, (const __int32 *)"S", 8uLL))
                goto LABEL_29;
            }
            v23 = v13;
LABEL_29:
            if (v23 == a2)
              goto LABEL_57;
LABEL_11:
            if (!wcsncmp(v16, (const __int32 *)"S", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"A", 6uLL)
              || !wcsncmp(v16, (const __int32 *)"P", 0xAuLL)
              || !wcsncmp(v16, (const __int32 *)"S", 7uLL))
            {
              v21 = wcslen(v16);
              if (v5)
              {
                wcscpy(v5, v16);
                v5 += wcslen(v5);
              }
            }
            else
            {
              if (TLexicon::checkName(a4, v16, 0, 0xFFFFFFFFFFFFFFFFLL))
              {
                loggableUnicode((unsigned int *)v16, &__p);
                if (v38 >= 0)
                  p_p = &__p;
                else
                  p_p = __p;
                tknPrintf("Warning: '%s' : The tokenizer grammar constructed an invalid word name.\n", v27, p_p);
                if (SHIBYTE(v38) < 0)
                  operator delete(__p);
                return 0;
              }
              __p = v39;
              v38 = xmmword_1AE1418C0;
              v40 = 1;
              slashEscape((uint64_t)v16, (uint64_t)&__p);
              v19 = *((_QWORD *)&v38 + 1);
              if (v5)
              {
                v32 = v5;
                v33 = *((_QWORD *)&v38 + 1) + 11;
                v34 = 0;
                v36 = 0;
                TBuffer<wchar_t>::assign((uint64_t)&v32, (int *)"T");
                if (*((_QWORD *)&v38 + 1) >= (unint64_t)v38)
                {
                  if (v40)
                  {
                    v41[0] = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__p, *((unint64_t *)&v38 + 1), v41, 1uLL);
                    v20 = (int *)__p;
                    --*((_QWORD *)&v38 + 1);
                  }
                  else
                  {
                    v20 = (int *)__p;
                    if ((_QWORD)v38)
                      *((_DWORD *)__p + v38 - 1) = 0;
                  }
                }
                else
                {
                  v20 = (int *)__p;
                  *((_DWORD *)__p + *((_QWORD *)&v38 + 1)) = 0;
                }
                v24 = 0;
                while (v20[v24++])
                  ;
                TBuffer<wchar_t>::insert((uint64_t)&v32, v34, v20, v24 - 1);
                v41[0] = 34;
                TBuffer<wchar_t>::insert((uint64_t)&v32, v34, v41, 1uLL);
                if (v34 < v33)
                {
                  v32[v34] = 0;
                  goto LABEL_43;
                }
                if (v36)
                {
                  v41[0] = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&v32, v34--, v41, 1uLL);
                  goto LABEL_43;
                }
                if (v33)
                {
                  v32[v33 - 1] = 0;
LABEL_43:
                  v5 += wcslen(v5);
                  if (v36 && v32 != (__int32 *)&v35 && v32)
                    MEMORY[0x1AF44D160]();
                }
                else
                {
                  v5 += wcslen(v5);
                }
              }
              if (v40 && __p != v39 && __p)
                MEMORY[0x1AF44D160]();
              v21 = v19 + 10;
            }
            v10 += v21;
            v12 = v31;
            goto LABEL_53;
          }
          v12 |= v22 == 0;
        }
      }
LABEL_53:
      ++v9;
      ++v11;
      if (v9 == a2)
        goto LABEL_57;
    }
  }
  v10 = 0;
LABEL_57:
  if (v5)
    strcpy((char *)v5, "}");
  if (v10)
    return v10 + wcslen(a3) + 6;
  else
    return 0;
}

void sub_1ADC9F860(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x477]) < 0)
    operator delete((void *)STACK[0x460]);
  _Unwind_Resume(a1);
}

_QWORD *quasar::filesystem::Path::Path(_QWORD *a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *a1 = &unk_1E5D343A0;
  v3 = (std::string *)(a1 + 1);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  return a1;
}

_QWORD *quasar::filesystem::Path::Path(_QWORD *this)
{
  *this = &unk_1E5D343A0;
  this[1] = 0;
  this[2] = 0;
  this[3] = 0;
  return this;
}

void quasar::filesystem::Path::normalize(quasar::filesystem::Path *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  std::string __p;
  std::__fs::filesystem::path v5;
  std::string pn;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)this + 8);
  std::__fs::filesystem::__absolute(&v5, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v5.__pn_.__r_.__value_.__l.__data_, v5.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v5.__pn_;
  *a2 = &unk_1E5D343A0;
  v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  else
  {
    *v3 = pn;
  }
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADC9FB2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::parent_path(quasar::filesystem::Path *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  std::string v4;
  std::string __p;
  std::string v6;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v4, (char *)this + 8);
  std::__fs::filesystem::path::parent_path[abi:ne180100]((const std::__fs::filesystem::path *)&v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v6 = __p;
  *a2 = &unk_1E5D343A0;
  v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    *v3 = v6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1ADC9FC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::parent_path[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double std::__fs::filesystem::path::stem[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__stem(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void quasar::filesystem::Path::filename(quasar::filesystem::Path *this@<X0>, _QWORD *a2@<X8>)
{
  std::string *v3;
  std::string v4;
  std::string __p;
  std::string v6;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v4, (char *)this + 8);
  std::__fs::filesystem::path::filename[abi:ne180100]((const std::__fs::filesystem::path *)&v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v6 = __p;
  *a2 = &unk_1E5D343A0;
  v3 = (std::string *)(a2 + 1);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v3, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  else
  {
    *v3 = v6;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
}

void sub_1ADC9FEE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

double std::__fs::filesystem::path::filename[abi:ne180100]@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

void quasar::filesystem::Path::operator/(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string v6;
  std::__fs::filesystem::path __p;
  std::string v8;
  std::__fs::filesystem::path v9;
  std::string pn;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v8, (char *)(a1 + 8));
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    v6 = *(std::string *)(a2 + 8);
  __p.__pn_ = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::operator/[abi:ne180100](&__p, (uint64_t)&v8, &v9);
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&pn, v9.__pn_.__r_.__value_.__l.__data_, v9.__pn_.__r_.__value_.__l.__size_);
  else
    pn = v9.__pn_;
  *a3 = &unk_1E5D343A0;
  v5 = (std::string *)(a3 + 1);
  if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
      operator delete(pn.__r_.__value_.__l.__data_);
  }
  else
  {
    *v5 = pn;
  }
  if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

{
  void *v5;
  std::string __p;

  v5 = &unk_1E5D343A0;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  quasar::filesystem::Path::operator/(a1, (uint64_t)&v5, a3);
  v5 = &unk_1E5D343A0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1ADCA012C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (*(char *)(v28 - 25) < 0)
    operator delete(*(void **)(v28 - 48));
  if (*(char *)(v28 - 49) < 0)
    operator delete(*(void **)(v28 - 72));
  if (a21 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void sub_1ADCA0238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::Path::makeAbsolute(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::__fs::filesystem::path *v6;
  std::string __p;
  std::__fs::filesystem::path v8;
  std::__fs::filesystem::path v9;
  std::__fs::filesystem::path v10;

  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, 0);
      return;
    }
  }
  else if (!*(_BYTE *)(a2 + 23))
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    return;
  }
  v6 = (const std::__fs::filesystem::path *)std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v10.__pn_, (char *)a2);
  if (std::__fs::filesystem::path::__root_directory(v6).__size_)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
    }
  }
  else
  {
    std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, (char *)(a1 + 8));
    std::__fs::filesystem::operator/[abi:ne180100](&v10, (uint64_t)&__p, &v8);
    std::__fs::filesystem::__absolute(&v9, &v8, 0);
    if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v9.__pn_.__r_.__value_.__l.__data_, v9.__pn_.__r_.__value_.__l.__size_);
      if (SHIBYTE(v9.__pn_.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v9.__pn_.__r_.__value_.__l.__data_);
    }
    else
    {
      *(std::__fs::filesystem::path *)a3 = v9;
    }
    if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__pn_.__r_.__value_.__l.__data_);
}

void sub_1ADCA03B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v26 - 33) < 0)
    operator delete(*(void **)(v26 - 56));
  _Unwind_Resume(exception_object);
}

char *quasar::filesystem::CreateTemporaryDirectory@<X0>(uint64_t a1@<X8>)
{
  char *v3;
  std::string __p;
  std::__fs::filesystem::path v6;
  std::__fs::filesystem::path v7;

  std::__fs::filesystem::__temp_directory_path(&v6, 0);
  std::__fs::filesystem::path::path[abi:ne180100]<char [14],void>(&__p, "tmpdir.XXXXXX");
  std::__fs::filesystem::operator/[abi:ne180100]((std::__fs::filesystem::path *)&__p, (uint64_t)&v6, &v7);
  if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a1, v7.__pn_.__r_.__value_.__l.__data_, v7.__pn_.__r_.__value_.__l.__size_);
    if (SHIBYTE(v7.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v7.__pn_.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::__fs::filesystem::path *)a1 = v7;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__pn_.__r_.__value_.__l.__data_);
  if (*(char *)(a1 + 23) >= 0)
    v3 = (char *)a1;
  else
    v3 = *(char **)a1;
  return mkdtemp(v3);
}

void sub_1ADCA04DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 17) < 0)
    operator delete(*(void **)(v21 - 40));
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

quasar::filesystem::TemporaryDirectoryPath *quasar::filesystem::TemporaryDirectoryPath::TemporaryDirectoryPath(quasar::filesystem::TemporaryDirectoryPath *this)
{
  std::string *v2;
  void *__p[2];
  uint64_t v5;

  quasar::filesystem::CreateTemporaryDirectory((uint64_t)__p);
  *(_QWORD *)this = &unk_1E5D343A0;
  v2 = (std::string *)((char *)this + 8);
  if (SHIBYTE(v5) < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *((_QWORD *)this + 3) = v5;
  }
  *(_QWORD *)this = &off_1E5D34380;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 4) = 0;
  return this;
}

void sub_1ADCA05C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath(quasar::filesystem::TemporaryDirectoryPath *this)
{
  int *v2;
  int *v3;
  void **v4;
  void *v5;
  std::string __p;

  *(_QWORD *)this = &off_1E5D34380;
  v2 = (int *)*((_QWORD *)this + 4);
  v3 = (int *)*((_QWORD *)this + 5);
  while (v2 != v3)
    close(*v2++);
  v4 = (void **)((char *)this + 8);
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v4;
    __p.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  quasar::filesystem::remove_all((char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = (void *)*((_QWORD *)this + 4);
  if (v5)
  {
    *((_QWORD *)this + 5) = v5;
    operator delete(v5);
  }
  *(_QWORD *)this = &unk_1E5D343A0;
  if (*((char *)this + 31) < 0)
    operator delete(*v4);
}

{
  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath(this);
  JUMPOUT(0x1AF44D190);
}

uintmax_t quasar::filesystem::remove_all(char *a1)
{
  uintmax_t v1;
  std::__fs::filesystem::path v3;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  v1 = std::__fs::filesystem::__remove_all(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1ADCA0710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::system_complete(quasar::filesystem *this@<X0>, _QWORD *a2@<X8>)
{
  char *v5;
  std::string *v6;
  std::string *v7;
  std::__fs::filesystem::path v8;
  std::__fs::filesystem::path __p;
  std::string pn;
  std::__fs::filesystem::path v11;

  v5 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&pn, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  }
  else
  {
    *(_OWORD *)&pn.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    pn.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 3);
  }
  v11.__pn_ = pn;
  if (std::__fs::filesystem::path::__root_directory(&v11).__size_)
  {
    *a2 = &unk_1E5D343A0;
    v6 = (std::string *)(a2 + 1);
    if (*((char *)this + 31) < 0)
    {
      std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
    }
    else
    {
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      v6->__r_.__value_.__r.__words[2] = *((_QWORD *)v5 + 2);
    }
  }
  else
  {
    std::__fs::filesystem::__current_path(&v8, 0);
    std::__fs::filesystem::operator/[abi:ne180100](&v11, (uint64_t)&v8, &__p);
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&pn, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    else
      pn = __p.__pn_;
    *a2 = &unk_1E5D343A0;
    v7 = (std::string *)(a2 + 1);
    if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v7, pn.__r_.__value_.__l.__data_, pn.__r_.__value_.__l.__size_);
      if (SHIBYTE(pn.__r_.__value_.__r.__words[2]) < 0)
        operator delete(pn.__r_.__value_.__l.__data_);
    }
    else
    {
      *v7 = pn;
    }
    if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__pn_.__r_.__value_.__l.__data_);
}

void sub_1ADCA08C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a26 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  if (*(char *)(v26 - 41) < 0)
    operator delete(*(void **)(v26 - 64));
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::exists(char *a1)
{
  uint64_t v1;
  BOOL v2;
  std::string __p;
  unsigned __int8 v5;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v1 = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v1)
    v2 = v1 == 255;
  else
    v2 = 1;
  return !v2;
}

void sub_1ADCA0990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::is_directory(char *a1)
{
  int v1;
  std::string __p;
  unsigned __int8 v4;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a1);
  std::__fs::filesystem::__status((const std::__fs::filesystem::path *)&__p, 0);
  v1 = v4;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v1 == 2;
}

void sub_1ADCA0A08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::remove(char *a1)
{
  _BOOL8 v1;
  std::__fs::filesystem::path v3;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  v1 = std::__fs::filesystem::__remove(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1ADCA0A78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL quasar::filesystem::create_directories(char *a1)
{
  _BOOL8 v1;
  std::__fs::filesystem::path v3;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v3.__pn_, a1);
  v1 = std::__fs::filesystem::__create_directories(&v3, 0);
  if (SHIBYTE(v3.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v3.__pn_.__r_.__value_.__l.__data_);
  return v1;
}

void sub_1ADCA0AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::filesystem::rename(char *a1, char *a2)
{
  std::string __p;
  std::__fs::filesystem::path __from;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__from.__pn_, a1);
  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&__p, a2);
  std::__fs::filesystem::__rename(&__from, (const std::__fs::filesystem::path *)&__p, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__from.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__from.__pn_.__r_.__value_.__l.__data_);
}

void sub_1ADCA0B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::last_write_time(char *a1)
{
  std::__fs::filesystem::path v2;

  std::__fs::filesystem::path::path[abi:ne180100]<std::string,void>(&v2.__pn_, a1);
  std::__fs::filesystem::__last_write_time(&v2, 0);
  if (SHIBYTE(v2.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v2.__pn_.__r_.__value_.__l.__data_);
  return __divti3();
}

void sub_1ADCA0C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::filesystem::operator<<(_QWORD *a1, uint64_t a2)
{
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v5;
  std::string __p;

  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

void sub_1ADCA0CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::writeFileAlmostDurable(_QWORD *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v4;
  int v5;
  const char *v9;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  std::vector<char>::pointer begin;
  ssize_t v16;
  _QWORD *v17;
  int *v18;
  char *v19;
  size_t v20;
  const char *v21;
  _QWORD *v22;
  int *v23;
  char *v24;
  size_t v25;
  _QWORD *v26;
  int *v27;
  char *v28;
  size_t v29;
  std::vector<char> v31;
  statfs v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned __int8 *)(a2 + 23);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Bad path", 8);
      goto LABEL_51;
    }
    return -1;
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Bad stream", 10);
LABEL_51:
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
      return -1;
    }
    return -1;
  }
  if (v5 >= 0)
    v9 = (const char *)a2;
  else
    v9 = *(const char **)a2;
  if (a4 != -1)
  {
    v10 = open_dprotected_np(v9, a3, a4, 0, 438);
    v11 = *__error();
    if (v10 != -1 || v11 != 45)
    {
      *__error() = v11;
      if (v10 < 0)
        goto LABEL_49;
      goto LABEL_21;
    }
    if (!statfs(v9, &v32) && (v32.f_flags & 0x80) != 0)
    {
      *__error() = 45;
      goto LABEL_49;
    }
    *__error() = 45;
  }
  v10 = open(v9, a3, 438);
  if (v10 < 0)
  {
LABEL_49:
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"openProtected() failed: ", 24);
      v27 = __error();
      v28 = strerror(*v27);
      v29 = strlen(v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v28, v29);
      goto LABEL_51;
    }
    return -1;
  }
LABEL_21:
  LOBYTE(v32.f_bsize) = 0;
  std::vector<char>::vector(&v31, 0x400uLL, (const std::vector<char>::value_type *)&v32);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 2) != 0)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      std::istream::read();
      v13 = a1[1];
      if (v13)
      {
        v14 = 0;
        begin = v31.__begin_;
        do
        {
          while (1)
          {
            v16 = write(v10, &begin[v14], v13 - v14);
            if (v16 < 0)
              break;
            v14 += v16;
            if (v14 >= v13)
              goto LABEL_32;
          }
        }
        while (*__error() == 4 || *__error() == 35);
        v14 = -1;
      }
      else
      {
        v14 = 0;
      }
LABEL_32:
      v12 += v14;
    }
    while ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 2) == 0);
  }
  if (fsync(v10))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"fsync() failed: ", 16);
      v18 = __error();
      v19 = strerror(*v18);
      v20 = strlen(v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    close(v10);
LABEL_39:
    if (*(char *)(a2 + 23) >= 0)
      v21 = (const char *)a2;
    else
      v21 = *(const char **)a2;
    unlink(v21);
    v12 = -1;
    goto LABEL_43;
  }
  if (close(v10))
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(&v32, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"close() failed: ", 16);
      v23 = __error();
      v24 = strerror(*v23);
      v25 = strlen(v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v32);
    }
    goto LABEL_39;
  }
LABEL_43:
  if (v31.__begin_)
  {
    v31.__end_ = v31.__begin_;
    operator delete(v31.__begin_);
  }
  return v12;
}

void sub_1ADCA11A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::filesystem::writeFileAlmostAtomic(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::error_code *v15;
  uint64_t v16;
  const std::__fs::filesystem::path *v17;
  const std::__fs::filesystem::path *v18;
  int v19;
  _QWORD *v20;
  int *v21;
  char *v22;
  size_t v23;
  const char *v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v4 = (char)a3[23];
  v5 = *((_QWORD *)a3 + 1);
  if (v4 >= 0)
    v5 = a3[23];
  if (!v5)
    goto LABEL_32;
  v10 = *(unsigned __int8 *)(a2 + 23);
  v11 = *(_QWORD *)(a2 + 8);
  if ((v10 & 0x80u) == 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  if (v12 != v5)
    goto LABEL_18;
  if (v4 >= 0)
    v13 = a3;
  else
    v13 = *(unsigned __int8 **)a3;
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v13, v11))
      goto LABEL_18;
LABEL_32:
    if (quasar::gLogLevel >= 5)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v26 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"Bad path", 8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
    }
    return -1;
  }
  if (!(_DWORD)v10)
    goto LABEL_32;
  v14 = (unsigned __int8 *)a2;
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v10)
      goto LABEL_32;
  }
LABEL_18:
  v16 = quasar::filesystem::writeFileAlmostDurable(a1, a2, 2561, a4);
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = *(char *)(a2 + 23) >= 0 ? (const std::__fs::filesystem::path *)a2 : *(const std::__fs::filesystem::path **)a2;
    v18 = (a3[23] & 0x80u) == 0 ? (const std::__fs::filesystem::path *)a3 : *(const std::__fs::filesystem::path **)a3;
    rename(v17, v18, v15);
    if (v19)
    {
      if (quasar::gLogLevel >= 5)
      {
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v26 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"rename() failed: ", 17);
        v21 = __error();
        v22 = strerror(*v21);
        v23 = strlen(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v26);
      }
      if (*(char *)(a2 + 23) >= 0)
        v24 = (const char *)a2;
      else
        v24 = *(const char **)a2;
      unlink(v24);
      return -1;
    }
  }
  return v16;
}

void sub_1ADCA1410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

double quasar::LatticeLmeFtmDecoder::LatticeLmeFtmDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v2;
  double result;

  v2 = quasar::OnlineLatticeBiglmLmeFasterDecoder::OnlineLatticeBiglmLmeFasterDecoder(a1, a2);
  *(_QWORD *)v2 = &off_1E5D37A60;
  *(_QWORD *)(v2 + 3336) = 0;
  *(_QWORD *)(v2 + 3352) = 0;
  *(_QWORD *)(v2 + 3344) = 0;
  *(_BYTE *)(v2 + 3360) = 0;
  result = 0.0;
  *(_OWORD *)(v2 + 3368) = 0u;
  *(_OWORD *)(v2 + 3384) = 0u;
  *(_OWORD *)(v2 + 3400) = 0u;
  *(_OWORD *)(v2 + 3416) = 0u;
  *(_QWORD *)(v2 + 3432) = 0;
  return result;
}

uint64_t quasar::LatticeLmeFtmDecoder::runImpl(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  const quasar::DecoderChainOutput *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t i;
  uint64_t *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  _QWORD *v43;
  _QWORD *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v61;
  uint64_t *v62;
  uint64_t *v63;
  _QWORD *v64;
  __int128 v65[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  _QWORD v84[2];
  uint64_t v85;
  std::__shared_weak_count *v86;
  const quasar::DecoderChainOutput *v87;
  std::__shared_weak_count *v88;
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  LOBYTE(v85) = 0;
  LOBYTE(v81) = 0;
  std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,void>(a2 + 67, a2 + 65, a2, a2 + 2, a2 + 4, a2 + 6, (unsigned __int8 *)&v85, v65, (unsigned __int8 *)&v81);
  v10 = a1 + 423;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a1 + 423), v65);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v65[0] + 1);
  if (*((_QWORD *)&v65[0] + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v65[0] + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(const quasar::DecoderChainOutput **)a3;
  v15 = *(std::__shared_weak_count **)(a3 + 8);
  v87 = *(const quasar::DecoderChainOutput **)a3;
  v88 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>(v14, v65);
  v64 = a1 + 421;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a1 + 421), v65);
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v65[0] + 1);
  if (*((_QWORD *)&v65[0] + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v65[0] + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v88;
  if (v88)
  {
    v22 = (unint64_t *)&v88->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v85 = 0;
  v86 = 0;
  v24 = (std::__shared_weak_count *)a1[426];
  if (v24)
  {
    v25 = std::__shared_weak_count::lock(v24);
    v86 = v25;
    v26 = a1 + 421;
    if (v25)
    {
      v27 = a1[425];
      v85 = v27;
    }
    else
    {
      v27 = 0;
    }
  }
  else
  {
    v25 = 0;
    v27 = 0;
    v26 = a1 + 421;
  }
  (*(void (**)(uint64_t *))(*a1 + 216))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 216))(v27);
  (*(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t *))(*a1 + 184))(a1, a2, a3, a4);
  (*(void (**)(uint64_t, _QWORD, _QWORD *, uint64_t *))(*(_QWORD *)v27 + 184))(v27, *v10, v26, a4);
  for (i = 3;
        (_DWORD)i == 3;
        i = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t, uint64_t *, uint64_t))(*a1 + 200))(a1, a2, a3, a4, a5))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)v27 + 200))(v27, *v10, v26, a4, a5);
  }
  v61 = v25;
  if ((_DWORD)i == 4)
  {
    i = (*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t, uint64_t *))(*a1 + 208))(a1, a2, a3, a4);
    (*(void (**)(uint64_t, _QWORD, _QWORD *, uint64_t *))(*(_QWORD *)v27 + 208))(v27, *v10, v26, a4);
  }
  (*(void (**)(uint64_t *))(*a1 + 216))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v27 + 216))(v27);
  v62 = (uint64_t *)a3;
  v63 = a1 + 423;
  v83 = 0uLL;
  v84[0] = 0;
  v29 = (uint64_t *)a1[427];
  v30 = (uint64_t *)a1[428];
  if (v29 != v30)
  {
    while (1)
    {
      v81 = 0;
      v82 = 0;
      v31 = (std::__shared_weak_count *)v29[1];
      if (!v31)
        break;
      v32 = std::__shared_weak_count::lock(v31);
      v82 = v32;
      if (!v32)
        goto LABEL_34;
      v33 = *v29;
      v81 = *v29;
LABEL_35:
      v34 = *((_QWORD *)&v83 + 1);
      if (*((_QWORD *)&v83 + 1) >= v84[0])
      {
        v36 = (uint64_t)(*((_QWORD *)&v83 + 1) - v83) >> 4;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = v84[0] - v83;
        if ((uint64_t)(v84[0] - v83) >> 3 > v37)
          v37 = v38 >> 3;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
          v39 = 0xFFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        *(_QWORD *)&v66 = v84;
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)v84, v39);
        v42 = &v40[16 * v36];
        *(_QWORD *)v42 = v33;
        *((_QWORD *)v42 + 1) = v32;
        v43 = (_QWORD *)*((_QWORD *)&v83 + 1);
        v44 = (_QWORD *)v83;
        if (*((_QWORD *)&v83 + 1) == (_QWORD)v83)
        {
          v47 = (__int128)vdupq_n_s64(*((unint64_t *)&v83 + 1));
          v45 = &v40[16 * v36];
        }
        else
        {
          v45 = &v40[16 * v36];
          do
          {
            v46 = *((_OWORD *)v43 - 1);
            v43 -= 2;
            *((_OWORD *)v45 - 1) = v46;
            v45 -= 16;
            *v43 = 0;
            v43[1] = 0;
          }
          while (v43 != v44);
          v47 = v83;
        }
        v35 = v42 + 16;
        *(_QWORD *)&v83 = v45;
        *((_QWORD *)&v83 + 1) = v42 + 16;
        *(__int128 *)((char *)v65 + 8) = v47;
        v48 = v84[0];
        v84[0] = &v40[16 * v41];
        *((_QWORD *)&v65[1] + 1) = v48;
        *(_QWORD *)&v65[0] = v47;
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v65);
      }
      else
      {
        **((_QWORD **)&v83 + 1) = v33;
        *(_QWORD *)(v34 + 8) = v32;
        v35 = (_QWORD *)(v34 + 16);
      }
      *((_QWORD *)&v83 + 1) = v35;
      v29 += 2;
      if (v29 == v30)
        goto LABEL_50;
    }
    v32 = 0;
LABEL_34:
    v33 = 0;
    goto LABEL_35;
  }
LABEL_50:
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v89, a5);
  v49 = quasar::Decoder::runChain((uint64_t **)&v83, (uint64_t)v89, *v63, (uint64_t)v64, a4);
  v50 = v90;
  if (v90 == v89)
  {
    v51 = 4;
    v50 = v89;
    goto LABEL_54;
  }
  if (v90)
  {
    v51 = 5;
LABEL_54:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  if (v49 && quasar::gLogLevel >= 4)
  {
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v66 = 0u;
    memset(v65, 0, sizeof(v65));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)"FTM second pass decoder chain failed", 36);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v65);
  }
  v52 = *v64;
  v53 = *v62;
  *(_BYTE *)(v53 + 928) = *(_BYTE *)(*v64 + 872);
  std::string::operator=((std::string *)(v53 + 936), (const std::string *)(v52 + 880));
  v54 = *(_OWORD *)(v52 + 904);
  *(_QWORD *)(v53 + 976) = *(_QWORD *)(v52 + 920);
  *(_OWORD *)(v53 + 960) = v54;
  if (*((_BYTE *)a1 + 3360))
  {
    v55 = *v64;
    v56 = *v62;
    *(_BYTE *)(v56 + 872) = *(_BYTE *)(*v64 + 872);
    std::string::operator=((std::string *)(v56 + 880), (const std::string *)(v55 + 880));
    v57 = *(_OWORD *)(v55 + 904);
    *(_QWORD *)(v56 + 920) = *(_QWORD *)(v55 + 920);
    *(_OWORD *)(v56 + 904) = v57;
  }
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](v64);
  std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](v63);
  *(_QWORD *)&v65[0] = &v83;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v65);
  if (v61)
  {
    v58 = (unint64_t *)&v61->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
      std::__shared_weak_count::__release_weak(v61);
    }
  }
  return i;
}

void sub_1ADCA1A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)va);
  *(_QWORD *)(v7 - 208) = v7 - 192;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v7 - 208));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v7 - 160);
  _Unwind_Resume(a1);
}

void quasar::LatticeLmeFtmDecoder::doEagerTasks(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  kaldi::LatticeScoreCache *v8;
  kaldi::TransitionModel *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  __int128 v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unsigned __int8 v36;

  v34 = 0;
  v35 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 3408);
  if (v4 && (v35 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v5 = *(_QWORD *)(a1 + 3400);
    v34 = v5;
  }
  else
  {
    v5 = 0;
  }
  kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::PruneActiveTokensFinal(*(_QWORD *)(v5 + 2424), *(_DWORD *)(*(_QWORD *)(v5 + 2424) + 808), 1);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v32);
  std::allocate_shared[abi:ne180100]<quasar::DecoderChainOutput,std::allocator<quasar::DecoderChainOutput>,quasar::DecoderChainOutput&,void>(*(const quasar::DecoderChainOutput **)(a1 + 3368), &v30);
  std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,quasar::DecoderPassData&,void>(*(const quasar::DecoderPassData **)(a1 + 3384), &v28);
  v6 = *(_QWORD *)(v5 + 2424);
  v7 = v32;
  v8 = (kaldi::LatticeScoreCache *)v30[61];
  v9 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(v28 + 32));
  if (kaldi::quasar::LatticeBiglmFasterTraceBackDecoder<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::GetRawLattice(v6, v7, v8, v9))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v30 + 40, &v32);
    v10 = v28;
    if (v28 + 568 != a1 + 3416)
    {
      std::vector<std::weak_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(v28 + 568, *(uint64_t **)(a1 + 3416), *(uint64_t **)(a1 + 3424), (uint64_t)(*(_QWORD *)(a1 + 3424) - *(_QWORD *)(a1 + 3416)) >> 4);
      v10 = v28;
    }
    v11 = (uint64_t *)(*(_QWORD *)a2 + 40);
    v12 = *(_QWORD *)(*(_QWORD *)a2 + 56);
    v36 = 0;
    quasar::OnlineLatticeBiglmFasterDecoder::doEverythingWithRawLattice(v10, &v30, v11, v12, 0, &v36);
    if (*(_BYTE *)(a1 + 3360))
    {
      v13 = v30;
      v14 = *(_QWORD *)(*(_QWORD *)a2 + 24);
      *(_BYTE *)(v14 + 872) = *((_BYTE *)v30 + 872);
      std::string::operator=((std::string *)(v14 + 880), (const std::string *)(v13 + 110));
      v15 = *(_OWORD *)(v13 + 113);
      *(_QWORD *)(v14 + 920) = v13[115];
      *(_OWORD *)(v14 + 904) = v15;
    }
  }
  v16 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v33;
  if (v33)
  {
    v23 = (unint64_t *)&v33->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v35;
  if (v35)
  {
    v26 = (unint64_t *)&v35->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1ADCA1D28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;
  uint64_t v8;
  uint64_t v9;
  va_list va2;
  uint64_t v11;
  va_list va3;

  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, _QWORD);
  v8 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v9 = va_arg(va3, _QWORD);
  v11 = va_arg(va3, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  _Unwind_Resume(a1);
}

uint64_t quasar::LatticeLmeFtmDecoder::runAsyncTasks(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  const void **v9;
  void *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  char *v17;
  _QWORD *v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  const void **v54;
  char *v55;

  quasar::SpeechRecognizerModelLoader::getDecoderChain(*a8, (const void **)(a1 + 3336), 0, (uint64_t)&v54);
  v9 = v54;
  if ((unint64_t)(v55 - (char *)v54) <= 0x1F)
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"FTM chain must have at least two elements", 41);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
  }
  if (!*v54
  {
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"FTM Decoder must be derived from OnlineLatticeBiglmFasterDecoder", 64);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
  }
  v11 = (std::__shared_weak_count *)v9[1];
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  *(_QWORD *)(a1 + 3400) = v10;
  v16 = *(std::__shared_weak_count **)(a1 + 3408);
  *(_QWORD *)(a1 + 3408) = v11;
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    v9 = v54;
  }
  v17 = (char *)(v9 + 2);
  if (v9 + 2 != (const void **)v55)
  {
    v18 = (_QWORD *)(a1 + 3416);
    do
    {
      if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)v17 + 80))(*(_QWORD *)v17) & 1) == 0)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v37, (uint64_t)"Second pass decoders must support eager", 39);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v37);
      }
      v19 = *(_OWORD *)v17;
      v20 = *((_QWORD *)v17 + 1);
      if (v20)
      {
        v21 = (unint64_t *)(v20 + 16);
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v23 = *(_QWORD **)(a1 + 3424);
      v24 = *(_QWORD *)(a1 + 3432);
      if ((unint64_t)v23 >= v24)
      {
        v36 = v19;
        v26 = ((uint64_t)v23 - *v18) >> 4;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v24 - *v18;
        if (v28 >> 3 > v27)
          v27 = v28 >> 3;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF0)
          v29 = 0xFFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        *(_QWORD *)&v39 = a1 + 3432;
        v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 3432, v29);
        v31 = &v30[16 * v26];
        *(_QWORD *)&v37 = v30;
        *((_QWORD *)&v37 + 1) = v31;
        *((_QWORD *)&v38 + 1) = &v30[16 * v32];
        *(_OWORD *)v31 = v36;
        *(_QWORD *)&v38 = v31 + 16;
        std::vector<std::weak_ptr<quasar::Decoder>>::__swap_out_circular_buffer((uint64_t *)(a1 + 3416), &v37);
        v25 = *(_QWORD **)(a1 + 3424);
        std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)&v37);
      }
      else
      {
        *v23 = v19;
        v23[1] = v20;
        v25 = v23 + 2;
        *(_QWORD *)(a1 + 3424) = v23 + 2;
      }
      *(_QWORD *)(a1 + 3424) = v25;
      v17 += 16;
    }
    while (v17 != v55);
  }
  if (v11)
  {
    v33 = (unint64_t *)&v11->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *(_QWORD *)&v37 = &v54;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
  return 0;
}

void sub_1ADCA20B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<std::weak_ptr<quasar::Decoder>>::~__split_buffer((void **)va);
  JUMPOUT(0x1ADCA20E8);
}

void sub_1ADCA20C8()
{
  std::__shared_weak_count *v0;

  if (v0)
    std::__shared_weak_count::__release_weak(v0);
  JUMPOUT(0x1ADCA20E8);
}

void sub_1ADCA20E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD v3[52];

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  v3[0] = v1 - 104;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v3);
  _Unwind_Resume(a1);
}

void quasar::LatticeLmeFtmDecoder::registerParams(quasar::LatticeLmeFtmDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  quasar::OnlineLatticeBiglmLmeFasterDecoder::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "ftm-combination");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 230, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ftm-chain");
  std::string::basic_string[abi:ne180100]<0>(v4, "Decoder chain to select for LRNN FTM computation.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 3336, (uint64_t)v4, 1, 230, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "overwrite");
  std::string::basic_string[abi:ne180100]<0>(v4, "Overwrite the main FTM score with the FTM score from the subchain");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 3360, (uint64_t)v4, 0, 230, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADCA2240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::LatticeLmeFtmDecoder::~LatticeLmeFtmDecoder(quasar::LatticeLmeFtmDecoder *this)
{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D37A60;
  v3 = (void **)((char *)this + 3416);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 426);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3384);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3368);
  if (*((char *)this + 3359) < 0)
    operator delete(*((void **)this + 417));
  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
}

{
  std::__shared_weak_count *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D37A60;
  v3 = (void **)((char *)this + 3416);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 426);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3384);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3368);
  if (*((char *)this + 3359) < 0)
    operator delete(*((void **)this + 417));
  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
  MEMORY[0x1AF44D190]();
}

void quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(quasar::OnlineLatticeBiglmLmeFasterDecoder *this)
{
  *(_QWORD *)this = &unk_1E5D3B040;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3296);
  std::__tree<int>::destroy((uint64_t)this + 3272, *((_QWORD **)this + 410));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 3248, *((_QWORD **)this + 407));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 3208);
  if (*((char *)this + 3207) < 0)
    operator delete(*((void **)this + 398));
  if (*((char *)this + 3183) < 0)
    operator delete(*((void **)this + 395));
  if (*((char *)this + 3159) < 0)
    operator delete(*((void **)this + 392));
  if (*((char *)this + 3135) < 0)
    operator delete(*((void **)this + 389));
  if (*((char *)this + 3111) < 0)
    operator delete(*((void **)this + 386));
  if (*((char *)this + 3087) < 0)
    operator delete(*((void **)this + 383));
  if (*((char *)this + 3063) < 0)
    operator delete(*((void **)this + 380));
  std::__tree<std::string>::destroy((uint64_t)this + 3016, *((char **)this + 378));
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 2976);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 2936);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2920);
  if (*((char *)this + 2919) < 0)
    operator delete(*((void **)this + 362));
  quasar::OnlineLatticeBiglmFasterDecoder::~OnlineLatticeBiglmFasterDecoder(this);
}

{
  quasar::OnlineLatticeBiglmLmeFasterDecoder::~OnlineLatticeBiglmLmeFasterDecoder(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::DecoderPassData,std::allocator<quasar::DecoderPassData>,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, unsigned __int8 *a7@<X7>, _QWORD *a8@<X8>, unsigned __int8 *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x370uLL);
  result = std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,std::allocator<quasar::DecoderPassData>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1ADCA2514(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::DecoderPassData>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL,std::allocator<quasar::DecoderPassData>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, unsigned __int8 *a8, unsigned __int8 *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = &unk_1E5D42C60;
  a1[1] = 0;
  std::allocator<quasar::DecoderPassData>::construct[abi:ne180100]<quasar::DecoderPassData,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL>((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1ADCA2594(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::DecoderPassData>::construct[abi:ne180100]<quasar::DecoderPassData,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatInputItf> const&,std::shared_ptr<kaldi::OnlineFeatureMatrix> const&,std::shared_ptr<kaldi::DecodableInterface> const&,std::shared_ptr<quasar::Decodable> const&,std::shared_ptr<kaldi::SnrTracker> const&,BOOL,BOOL>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, unsigned __int8 *a9, unsigned __int8 *a10)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  int v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  void **v58[3];
  __int128 *v59[3];
  __int128 *v60[3];
  __int128 *v61[3];
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__p[2];
  char v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD *v70[3];
  uint64_t v71;
  std::__shared_weak_count *v72;
  uint64_t v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  void ***v83;

  v11 = (std::__shared_weak_count *)a3[1];
  v81 = *a3;
  v82 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  v14 = (std::__shared_weak_count *)a4[1];
  v79 = *a4;
  v80 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)a5[1];
  v77 = *a5;
  v78 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)a6[1];
  v75 = *a6;
  v76 = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)a7[1];
  v73 = *a7;
  v74 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v26 = (std::__shared_weak_count *)a8[1];
  v71 = *a8;
  v72 = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *a9;
  v30 = *a10;
  memset(v70, 0, sizeof(v70));
  v68 = 0;
  v69 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v64 = 0;
  v65 = 0;
  v62 = 0;
  v63 = 0;
  memset(v61, 0, sizeof(v61));
  memset(v60, 0, sizeof(v60));
  memset(v59, 0, sizeof(v59));
  memset(v58, 0, sizeof(v58));
  quasar::DecoderPassData::DecoderPassData(a2, &v81, &v79, &v77, &v75, &v73, &v71, v29 != 0, v30 != 0, v70, &v68, (uint64_t)__p, &v64, &v62, 4, 0, v61, v60, v59,
    0,
    0,
    (uint64_t **)v58);
  v83 = v58;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  v58[0] = (void **)v59;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  v58[0] = (void **)v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  v58[0] = (void **)v61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v58);
  v31 = v63;
  if (v63)
  {
    v32 = (unint64_t *)&v63->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = v65;
  if (v65)
  {
    v35 = (unint64_t *)&v65->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  if (v67 < 0)
    operator delete(__p[0]);
  v37 = v69;
  if (v69)
  {
    v38 = (unint64_t *)&v69->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  __p[0] = v70;
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v40 = v72;
  if (v72)
  {
    v41 = (unint64_t *)&v72->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v74;
  if (v74)
  {
    v44 = (unint64_t *)&v74->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v76;
  if (v76)
  {
    v47 = (unint64_t *)&v76->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v78;
  if (v78)
  {
    v50 = (unint64_t *)&v78->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v80;
  if (v80)
  {
    v53 = (unint64_t *)&v80->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = v82;
  if (v82)
  {
    v56 = (unint64_t *)&v82->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
}

void sub_1ADCA29B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v44 - 72) = v43;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v44 - 72));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  if (a43 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 208);
  __p = (void *)(v44 - 192);
  std::vector<std::weak_ptr<quasar::Decoder>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 168);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 152);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 136);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 120);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 104);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v44 - 88);
  _Unwind_Resume(a1);
}

void std::vector<std::weak_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(_QWORD **)a1;
  if (a4 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    std::vector<std::weak_ptr<quasar::Decoder>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = *(_QWORD *)(a1 + 16) - *(_QWORD *)a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= a4)
      v11 = a4;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100]((_QWORD *)a1, v12);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  v14 = (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4;
  if (v14 < a4)
  {
    v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>((uint64_t)&v20, a2, v15, v9);
    v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::weak_ptr<quasar::Decoder>>,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*,std::weak_ptr<quasar::Decoder>*>(v8, v15, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v13;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>((uint64_t)&v21, a2, a3, v9);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if (v18 != v16)
  {
    do
    {
      v19 = *(std::__shared_weak_count **)(v18 - 8);
      if (v19)
        std::__shared_weak_count::__release_weak(v19);
      v18 -= 16;
    }
    while (v18 != v17);
  }
  *(_QWORD *)(a1 + 8) = v17;
}

void sub_1ADCA2B9C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADCA2BA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *,std::weak_ptr<quasar::Decoder> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v8 = *v5;
      v7 = v5[1];
      if (v7)
      {
        v9 = (unint64_t *)(v7 + 16);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (std::__shared_weak_count *)a4[1];
      *a4 = v8;
      a4[1] = v7;
      if (v11)
        std::__shared_weak_count::__release_weak(v11);
      v5 += 2;
      a4 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = *a3;
  *a3 = 0;
  a1[2] = v7;
  quasar::SpeechRecognizerActiveConfiguration::none((uint64_t)(a1 + 3));
  a1[35] = a1 + 36;
  a1[36] = 0;
  a1[39] = 0;
  a1[40] = 0;
  a1[37] = 0;
  a1[38] = a1 + 39;
  a1[41] = a1 + 42;
  a1[42] = 0;
  a1[45] = 0;
  a1[46] = 0;
  a1[43] = 0;
  a1[44] = a1 + 45;
  a1[47] = 0;
  a1[48] = 0;
  a1[51] = 0;
  a1[52] = 0;
  a1[49] = 0;
  a1[50] = a1 + 51;
  return a1;
}

void sub_1ADCA2CB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v6;

  v4 = (_QWORD *)operator new();
  *v4 = &off_1E5D3A100;
  v6 = v4;
  quasar::SpeechRecognizerModelLoader::SpeechRecognizerModelLoader(a1, a2, (uint64_t *)&v6);
  if (v6)
    (*(void (**)(_QWORD *))(*v6 + 8))(v6);
  return a1;
}

void sub_1ADCA2D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::~SpeechRecognizerModelLoader(quasar::SpeechRecognizerModelLoader *this)
{
  uint64_t v2;
  void **v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 400, *((_QWORD **)this + 51));
  v3 = (void **)((char *)this + 376);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  std::__tree<std::string>::destroy((uint64_t)this + 352, *((char **)this + 45));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 328, *((_QWORD **)this + 42));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 304, *((_QWORD **)this + 39));
  std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>>>::destroy((uint64_t)this + 280, *((_QWORD **)this + 36));
  quasar::SpeechRecognizerActiveConfiguration::~SpeechRecognizerActiveConfiguration((char **)this + 3);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

char *quasar::SpeechRecognizerModelLoader::getFrontend@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  char v6;
  quasar::SystemConfig *v7;
  quasar::PTree *Ptree;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::string *v13;
  __int128 v14;
  int v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string v24;
  std::string v25;
  __int128 v26;
  std::string __p;

  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v5 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 280), a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  if (v6)
  {
    v7 = *(quasar::SystemConfig **)a1;
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v7, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = quasar::PTree::size(Ptree);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::reserve((char **)v5 + 7, v9);
    v10 = quasar::PTree::begin(Ptree);
    v11 = quasar::PTree::end(Ptree);
    if (v10 != v11)
    {
      v12 = v11;
      do
      {
        std::operator+<char>();
        v13 = std::string::append(&v24, ".");
        v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v25.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = *(char *)(v10 + 23);
        if (v15 >= 0)
          v16 = (const std::string::value_type *)v10;
        else
          v16 = *(const std::string::value_type **)v10;
        if (v15 >= 0)
          v17 = *(unsigned __int8 *)(v10 + 23);
        else
          v17 = *(_QWORD *)(v10 + 8);
        v18 = std::string::append(&v25, v16, v17);
        v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(&__p, &v26);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        quasar::FeatureExtractor::init((quasar::FeatureExtractor *)v26, v7);
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)v5 + 7, &v26);
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
        if (*((_QWORD *)&v26 + 1))
        {
          v21 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
          do
            v22 = __ldaxr(v21);
          while (__stlxr(v22 - 1, v21));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v10 += 88;
      }
      while (v10 != v12);
    }
  }
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((char *)a3, (_QWORD *)v5[7], (_QWORD *)v5[8], (v5[8] - v5[7]) >> 4);
}

void sub_1ADCA302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::shared_ptr<quasar::FeatureExtractor>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v8 + 1) = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[16 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

void quasar::SpeechRecognizerModelLoader::getDecodable(uint64_t a1@<X0>, void *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  char v7;
  std::string *v8;
  quasar::PTree *Ptree;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p;
  std::__shared_weak_count *v19;
  char v20;

  __p = a2;
  v6 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 304), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  if (v7)
  {
    v8 = *(std::string **)a1;
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v8, (uint64_t)&__p);
    if (v20 < 0)
      operator delete(__p);
    v10 = *(_QWORD *)(a1 + 16);
    v11 = quasar::PTree::begin(Ptree);
    (*(void (**)(void **__return_ptr, uint64_t, void *, uint64_t))(*(_QWORD *)v10 + 24))(&__p, v10, a2, v11);
    quasar::Decodable::init((quasar::Decodable *)__p, v8);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v6 + 7, (uint64_t *)&__p);
    v12 = v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  v15 = v6[8];
  *a3 = v6[7];
  a3[1] = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
}

void sub_1ADCA3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

char *quasar::SpeechRecognizerModelLoader::getOrConstructDecoderChain@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  quasar::SystemConfig *v6;
  uint64_t *v7;
  char v8;
  quasar::PTree *Ptree;
  int64x2_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  __int128 v27;
  int64x2_t v28;
  _OWORD *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  quasar::Decoder *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  __int128 v45;
  void *__p;
  int64x2_t v47;
  uint64_t v48;
  uint64_t *v49;

  v6 = *(quasar::SystemConfig **)a1;
  __p = a2;
  v7 = std::__tree<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::shared_ptr<quasar::SyncDecoder>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 328), (const void **)a2, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  if (v8)
  {
    std::operator+<char>();
    Ptree = (quasar::PTree *)quasar::SystemConfig::getPtree((uint64_t)v6, (uint64_t)&__p);
    if (v47.i8[15] < 0)
      operator delete(__p);
    v10 = (int64x2_t *)(v7 + 7);
    v11 = quasar::PTree::size(Ptree);
    std::vector<std::shared_ptr<quasar::FeatureExtractor>>::reserve((char **)v7 + 7, v11);
    v12 = quasar::PTree::begin(Ptree);
    v13 = quasar::PTree::end(Ptree);
    if (v12 != v13)
    {
      v14 = v13;
      do
      {
        (*(void (**)(__int128 *__return_ptr, _QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 16) + 16))(&v45, *(_QWORD *)(a1 + 16), a2, v12);
        v16 = (_OWORD *)v7[8];
        v15 = v7[9];
        if ((unint64_t)v16 >= v15)
        {
          v17 = ((uint64_t)v16 - v10->i64[0]) >> 4;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v15 - v10->i64[0];
          if (v19 >> 3 > v18)
            v18 = v19 >> 3;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
            v20 = 0xFFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          v49 = v7 + 9;
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)(v7 + 9), v20);
          v23 = &v21[16 * v17];
          *(_OWORD *)v23 = v45;
          v45 = 0uLL;
          v25 = (_QWORD *)v7[7];
          v24 = (_QWORD *)v7[8];
          if (v24 == v25)
          {
            v28 = vdupq_n_s64((unint64_t)v24);
            v26 = &v21[16 * v17];
          }
          else
          {
            v26 = &v21[16 * v17];
            do
            {
              v27 = *((_OWORD *)v24 - 1);
              v24 -= 2;
              *((_OWORD *)v26 - 1) = v27;
              v26 -= 16;
              *v24 = 0;
              v24[1] = 0;
            }
            while (v24 != v25);
            v28 = *v10;
          }
          v29 = v23 + 16;
          v7[7] = (uint64_t)v26;
          v7[8] = (uint64_t)(v23 + 16);
          v47 = v28;
          v30 = v7[9];
          v7[9] = (uint64_t)&v21[16 * v22];
          v48 = v30;
          __p = (void *)v28.i64[0];
          std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&__p);
          v31 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
          v7[8] = (uint64_t)v29;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
        }
        else
        {
          *v16 = v45;
          v7[8] = (uint64_t)(v16 + 1);
        }
        v12 += 88;
      }
      while (v12 != v14);
    }
  }
  if ((a3 & 1) == 0)
  {
    v35 = v7[7];
    v36 = v7[8];
    while (v35 != v36)
    {
      v37 = *(quasar::Decoder **)v35;
      v38 = *(std::__shared_weak_count **)(v35 + 8);
      __p = *(void **)v35;
      v47.i64[0] = (uint64_t)v38;
      if (v38)
      {
        v39 = (unint64_t *)&v38->__shared_owners_;
        do
          v40 = __ldxr(v39);
        while (__stxr(v40 + 1, v39));
      }
      quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded((quasar::SystemConfig **)a1, v37);
      if (v38)
      {
        v41 = (unint64_t *)&v38->__shared_owners_;
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      v35 += 16;
    }
  }
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  return std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((char *)a4, (_QWORD *)v7[7], (_QWORD *)v7[8], (v7[8] - v7[7]) >> 4);
}

void sub_1ADCA356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::initDecoderIfNeeded(quasar::SystemConfig **this, quasar::Decoder *a2)
{
  quasar::SystemConfig *v4;
  std::__shared_weak_count *v5;
  quasar::SystemConfig *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  if (!quasar::Decoder::isInitialized(a2))
  {
    v4 = *this;
    v5 = (std::__shared_weak_count *)*((_QWORD *)*this + 198);
    v28 = *((_QWORD *)*this + 197);
    v29 = v5;
    v6 = v4;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v6 = *this;
    }
    v9 = (std::__shared_weak_count *)*((_QWORD *)v6 + 200);
    v26 = *((_QWORD *)v6 + 199);
    v27 = v9;
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v6 = *this;
    }
    v12 = (std::__shared_weak_count *)*((_QWORD *)v6 + 196);
    v24 = *((_QWORD *)v6 + 195);
    v25 = v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
      v6 = *this;
    }
    quasar::Decoder::init((uint64_t)a2, v4, &v28, &v26, &v24, (_WORD *)v6 + 804);
    v15 = v25;
    if (v25)
    {
      v16 = (unint64_t *)&v25->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = v27;
    if (v27)
    {
      v19 = (unint64_t *)&v27->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = v29;
    if (v29)
    {
      v22 = (unint64_t *)&v29->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1ADCA371C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

char *quasar::SpeechRecognizerModelLoader::getDecoderChain@<X0>(uint64_t a1@<X0>, const void **a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 352), a2, (uint64_t)a2);
  return quasar::SpeechRecognizerModelLoader::getOrConstructDecoderChain(a1, a2, a3, a4);
}

uint64_t `anonymous namespace'::checkActiveConfigurationFilter<unsigned int>(uint64_t result, unsigned int *a2)
{
  uint64_t *v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _OWORD v6[17];

  if (*(_BYTE *)(result + 24))
  {
    v2 = *(uint64_t **)(result + 8);
    if (v2)
    {
      v3 = *a2;
      do
      {
        v4 = *((_DWORD *)v2 + 7);
        if (v3 >= v4)
        {
          if (v4 >= v3)
            return result;
          ++v2;
        }
        v2 = (uint64_t *)*v2;
      }
      while (v2);
    }
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Value ", 6);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not found in active configuration.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void sub_1ADCA3848(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

uint64_t `anonymous namespace'::checkActiveConfigurationFilter<std::string>(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  int v4;
  const void *v5;
  uint64_t v6;
  _QWORD *v7;
  _OWORD v8[17];

  if (*(_BYTE *)(result + 24))
  {
    result = std::__tree<std::string>::__count_unique<std::string>(result, (const void **)a2);
    if (!result)
    {
      memset(v8, 0, sizeof(v8));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Value ", 6);
      v4 = *(char *)(a2 + 23);
      if (v4 >= 0)
        v5 = (const void *)a2;
      else
        v5 = *(const void **)a2;
      if (v4 >= 0)
        v6 = *(unsigned __int8 *)(a2 + 23);
      else
        v6 = *(_QWORD *)(a2 + 8);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)v5, v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, " not found in active configuration.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v8);
    }
  }
  return result;
}

uint64_t `anonymous namespace'::checkActiveConfigurationFilter<BOOL>(uint64_t result, unsigned __int8 *a2)
{
  uint64_t **v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _OWORD v6[17];

  if (*(_BYTE *)(result + 24))
  {
    v2 = *(uint64_t ***)(result + 8);
    if (v2)
    {
      v3 = *a2;
      do
      {
        v4 = *((unsigned __int8 *)v2 + 25);
        if (v3 >= v4)
        {
          if (v4 >= v3)
            return result;
          ++v2;
        }
        v2 = (uint64_t **)*v2;
      }
      while (v2);
    }
    memset(v6, 0, sizeof(v6));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Value ", 6);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not found in active configuration.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v6);
  }
  return result;
}

void sub_1ADCA39CC(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::SpeechRecognizerModelLoader::lookupRecognizers(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X2>, std::string *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, std::string *a7@<X6>, std::string *a8@<X7>, uint64_t *a9@<X8>, std::string *a10)
{
  unsigned __int8 v19;
  unsigned __int8 v20;
  unsigned int v21;

  v21 = a2;
  v20 = a5;
  v19 = a6;
  quasar::lookupRecognizers<quasar::Decoder>(a10, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t ***)(a1 + 376));
}

void quasar::lookupRecognizers<quasar::Decoder>(std::string *__str@<X7>, uint64_t a2@<X0>, unsigned __int8 **a3@<X1>, std::string *a4@<X2>, uint64_t a5@<X3>, uint64_t a6@<X4>, std::string *a7@<X5>, std::string *a8@<X6>, uint64_t *a9@<X8>, uint64_t ***a10)
{
  uint64_t **v18;
  uint64_t **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  std::string::size_type size;
  std::string *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  BOOL v28;
  char v29;
  _QWORD *v30;
  _QWORD *v31;
  char v32;
  char v33;
  int v34;
  int v35;
  void **v36;
  uint64_t v37;
  void *__p[2];
  unsigned __int8 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string v58;
  char *v59;
  char *v60;
  uint64_t v61;

  v59 = 0;
  v60 = 0;
  v61 = 0;
  memset(&v58, 0, sizeof(v58));
  v19 = *a10;
  v18 = a10[1];
  if (*a10 == v18)
    goto LABEL_44;
  do
  {
    if (!quasar::RecogRequestFilter::isMatch(**v19, a2, a3, a4, a5, a6, a7, a8, __str))
      goto LABEL_20;
    if (v59 == v60)
      goto LABEL_19;
    v20 = (unsigned __int8 *)**v19;
    v21 = v20[23];
    if ((v21 & 0x80u) == 0)
      v22 = v20[23];
    else
      v22 = *((_QWORD *)v20 + 1);
    size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v58.__r_.__value_.__l.__size_;
    if (v22 == size)
    {
      if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v58;
      else
        v24 = (std::string *)v58.__r_.__value_.__r.__words[0];
      if ((v21 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v20, v24, *((_QWORD *)v20 + 1)))
          goto LABEL_20;
LABEL_19:
        std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100](&v59, (__int128 *)v19);
        std::string::operator=(&v58, (const std::string *)**v19);
        goto LABEL_20;
      }
      if (!v20[23])
        goto LABEL_19;
      while (*v20 == v24->__r_.__value_.__s.__data_[0])
      {
        ++v20;
        v24 = (std::string *)((char *)v24 + 1);
        if (!--v21)
          goto LABEL_19;
      }
    }
LABEL_20:
    v19 += 2;
  }
  while (v19 != v18);
  v26 = v59;
  v25 = v60;
  if (v59 == v60)
  {
LABEL_44:
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v41 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
    quasar::RecogRequestFilter::noMatchingComponentErrorMessage(a2, (uint64_t)a3, (uint64_t)a4, a5, a6, (uint64_t)a7, (uint64_t)a8, (uint64_t)__str);
    if ((v40 & 0x80u) == 0)
      v36 = __p;
    else
      v36 = (void **)__p[0];
    if ((v40 & 0x80u) == 0)
      v37 = v40;
    else
      v37 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v36, v37);
    if ((char)v40 < 0)
      operator delete(__p[0]);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v41);
  }
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  do
  {
    v27 = *(_QWORD *)v26;
    if (*(_QWORD *)v26)
    {
      (*(void (**)(__int128 *__return_ptr))(***(_QWORD ***)(v27 + 80) + 112))(&v41);
      if (SBYTE7(v42) < 0)
      {
        v28 = *((_QWORD *)&v41 + 1) != 0;
        operator delete((void *)v41);
      }
      else
      {
        v28 = SBYTE7(v42) != 0;
      }
      v30 = *(_QWORD **)(*(_QWORD *)v26 + 80);
      v31 = *(_QWORD **)(*(_QWORD *)v26 + 88);
      if (v30 == v31)
      {
        v33 = 0;
        v32 = 0;
      }
      else
      {
        v32 = 0;
        v33 = 0;
        do
        {
          v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v30 + 96))(*v30);
          v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v30 + 104))(*v30);
          if (v34)
            v32 = 1;
          if (v35)
            v33 = 1;
          v30 += 2;
        }
        while (v30 != v31);
      }
      LOBYTE(v27) = v33 & 1;
      v29 = v32 & 1;
    }
    else
    {
      v29 = 0;
      v28 = 0;
    }
    if (v60 - v59 == 16)
      LOBYTE(v27) = 1;
    LOBYTE(v41) = v27;
    BYTE1(v41) = v29;
    BYTE2(v41) = v28;
    std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::emplace_back<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>> const&,quasar::RecognizerProperties>(a9, v26, (__int16 *)&v41);
    v26 += 16;
  }
  while (v26 != v25);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v58.__r_.__value_.__l.__data_);
  *(_QWORD *)&v41 = &v59;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
}

void sub_1ADCA3E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15)
{
  uint64_t v15;

  if (*(char *)(v15 - 121) < 0)
    operator delete(*(void **)(v15 - 144));
  a15 = (void **)(v15 - 120);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechRecognizerModelLoader::getSpgConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  _QWORD *v14;
  _OWORD v15[17];

  result = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 400, (const void **)a2);
  if (a1 + 408 == result)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"Invalid SilencePosteriorGeneratorConfig name \"", 46);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = (const void *)a2;
    else
      v12 = *(const void **)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "\"");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v7 = *(_QWORD *)(result + 64);
  *a3 = *(_QWORD *)(result + 56);
  a3[1] = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  return result;
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::createDecoder(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  std::operator+<char>();
  v4 = std::string::append(&v11, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::string::append(&v12, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decoder::createDecoder(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADCA403C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::createDecodable(uint64_t a1@<X2>, _QWORD *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string v11;
  std::string v12;
  std::string v13;

  std::operator+<char>();
  v4 = std::string::append(&v11, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v12.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = *(char *)(a1 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a1;
  else
    v7 = *(const std::string::value_type **)a1;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a1 + 23);
  else
    v8 = *(_QWORD *)(a1 + 8);
  v9 = std::string::append(&v12, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::Decodable::createDecodable(&v13, a2);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1ADCA415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 25) < 0)
    operator delete(*(void **)(v21 - 48));
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechRecognizerModelLoader::setActiveConfiguration(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t *a5)
{
  uint64_t i;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t String;
  void **v12;
  uint64_t v13;
  uint64_t v14;
  std::string *v15;
  quasar::ModelLoader *ModelLoader;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t *v25;
  uint64_t v26;
  quasar::PTree *p_ConfigFileVersion;
  uint64_t v28;
  uint64_t v29;
  std::string *v30;
  uint64_t v31;
  unint64_t v32;
  _OWORD *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  int64x2_t v45;
  _OWORD *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char v57;
  uint64_t PtreeOptional;
  quasar::PTree *v59;
  uint64_t v60;
  uint64_t k;
  __int128 v62;
  uint64_t *v63;
  char v64;
  uint64_t *v65;
  std::__shared_weak_count *size;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t m;
  kaldi::quasar::Vocab **v71;
  uint64_t v72;
  __int8 v73;
  quasar::ModelLoader *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *p_shared_owners;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  std::string *v95;
  std::string::size_type v96;
  _QWORD *v97;
  _QWORD *v98;
  void *v99;
  uint64_t v100;
  uint64_t v104;
  quasar::SpeechRecognizerActiveConfiguration *v105;
  quasar *v106;
  uint64_t v107;
  __int128 v108;
  _QWORD *v109[3];
  uint64_t v110;
  std::__shared_weak_count *v111;
  _QWORD *v112[3];
  uint64_t v113;
  std::__shared_weak_count *v114;
  void *__p[2];
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  std::string v132;
  void *v133;
  int64x2_t v134;
  uint64_t v135;
  uint64_t v136;
  char **ConfigFileVersion;
  char *v138[26];
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141[3];
  char **v142;
  char *v143[2];
  char **v144;
  char *v145[4];

  std::__optional_storage_base<std::set<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<unsigned int>,false> const&>(a1 + 24, a2);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 56, a2 + 32);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 88, a2 + 64);
  std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(a1 + 120, a2 + 96);
  std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(a1 + 152, a2 + 128);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 184, a2 + 160);
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 216, a2 + 192);
  v105 = (quasar::SpeechRecognizerActiveConfiguration *)a2;
  std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(a1 + 248, a2 + 224);
  v106 = *(quasar **)a1;
  v8 = *(_QWORD *)(a1 + 376);
  for (i = *(_QWORD *)(a1 + 384);
        i != v8;
  *(_QWORD *)(a1 + 384) = v8;
  v145[0] = 0;
  v145[1] = 0;
  v143[1] = 0;
  v144 = v145;
  v142 = v143;
  v143[0] = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)v141, (const void ***)(a1 + 352));
  quasar::collectRecogInfoFromSysConfigHelper(v106, &v139);
  v10 = v139;
  for (j = v140; v10 != j; v10 += 88)
  {
    __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(v106);
    quasar::RecogRequestFilter::RecogRequestFilter(&ConfigFileVersion);
    if (quasar::RecogRequestFilter::matchesConfiguration((quasar::RecogRequestFilter *)&ConfigFileVersion, v105))
    {
      quasar::PTree::PTree((quasar::PTree *)&v133);
      if (quasar::PTree::isLeaf((quasar::PTree *)(v10 + 24)))
      {
        String = quasar::PTree::getString((quasar::PTree *)(v10 + 24));
        quasar::PTree::PTree(__p, String);
        quasar::PTree::addChild((quasar::PTree *)&v133, (const quasar::PTree *)__p);
        quasar::PTree::~PTree((quasar::PTree *)__p);
      }
      if (quasar::PTree::isLeaf((quasar::PTree *)(v10 + 24)))
        v12 = &v133;
      else
        v12 = (void **)(v10 + 24);
      v13 = quasar::PTree::begin((quasar::PTree *)v12);
      v14 = quasar::PTree::end((quasar::PTree *)v12);
      while (v13 != v14)
      {
        v15 = (std::string *)quasar::PTree::getString((quasar::PTree *)(v13 + 24));
        std::string::basic_string[abi:ne180100]<0>(__p, "::");
        quasar::splitAndTrim(v15, (char *)__p, (uint64_t *)&v132);
        if (SBYTE7(v116) < 0)
          operator delete(__p[0]);
        if (v132.__r_.__value_.__l.__size_ - v132.__r_.__value_.__r.__words[0] != 72)
        {
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v117 = 0u;
          *(_OWORD *)__p = 0u;
          v116 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v88 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid recognizer specifier \"", 30);
          v89 = quasar::PTree::getString((quasar::PTree *)(v13 + 24));
          v90 = *(char *)(v89 + 23);
          if (v90 >= 0)
            v91 = v89;
          else
            v91 = *(_QWORD *)v89;
          if (v90 >= 0)
            v92 = *(unsigned __int8 *)(v89 + 23);
          else
            v92 = *(_QWORD *)(v89 + 8);
          v93 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v88, v91, v92);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)"\", must have 3 components", 25);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v144, (const void **)v132.__r_.__value_.__l.__data_, (uint64_t)v132.__r_.__value_.__l.__data_);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v142, (const void **)(v132.__r_.__value_.__r.__words[0] + 24), v132.__r_.__value_.__r.__words[0] + 24);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v141, (const void **)(v132.__r_.__value_.__r.__words[0] + 48), v132.__r_.__value_.__r.__words[0] + 48);
        __p[0] = &v132;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v13 += 88;
      }
      quasar::PTree::~PTree((quasar::PTree *)&v133);
    }
    quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)&ConfigFileVersion);
  }
  quasar::eraseMapKeysNotInSet<std::vector<std::shared_ptr<quasar::FeatureExtractor>>>((uint64_t **)(a1 + 280), (uint64_t)&v144);
  quasar::eraseMapKeysNotInSet<std::shared_ptr<quasar::Decodable>>((uint64_t **)(a1 + 304), (uint64_t)&v142);
  quasar::eraseMapKeysNotInSet<std::vector<std::shared_ptr<quasar::FeatureExtractor>>>((uint64_t **)(a1 + 328), (uint64_t)v141);
  if (a3)
  {
    if (quasar::gLogLevel >= 4)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v117 = 0u;
      *(_OWORD *)__p = 0u;
      v116 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parallel loading is enabled", 27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    ModelLoader = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(v106);
    quasar::ModelLoader::enableParallelLoading(ModelLoader);
  }
  if (a4)
  {
    if (quasar::gLogLevel >= 4)
    {
      v130 = 0u;
      v131 = 0u;
      v128 = 0u;
      v129 = 0u;
      v126 = 0u;
      v127 = 0u;
      v124 = 0u;
      v125 = 0u;
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v118 = 0u;
      v119 = 0u;
      v117 = 0u;
      *(_OWORD *)__p = 0u;
      v116 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"SpeechRecognizerModelLoader: (ANE) Model will not be unloaded", 61);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v17 = quasar::SystemConfig::getModelLoader(v106);
    quasar::ModelLoader::keepANEModelLoadedEnabled(v17);
  }
  v18 = quasar::SystemConfig::getModelLoader(v106);
  quasar::ModelLoader::getModelInitializeContext(v18, __p);
  v19 = __p[0];
  v20 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_31;
  v21 = (unint64_t *)((char *)__p[1] + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v19)
      goto LABEL_32;
  }
  else
  {
LABEL_31:
    if (v19)
      goto LABEL_32;
  }
  v81 = quasar::SystemConfig::getModelLoader(v106);
  v82 = a5[1];
  v113 = *a5;
  v114 = (std::__shared_weak_count *)v82;
  if (v82)
  {
    v83 = (unint64_t *)(v82 + 8);
    do
      v84 = __ldxr(v83);
    while (__stxr(v84 + 1, v83));
  }
  quasar::ModelLoader::setModelInitializeContext(v81, &v113);
  v85 = v114;
  if (v114)
  {
    p_shared_owners = (unint64_t *)&v114->__shared_owners_;
    do
      v87 = __ldaxr(p_shared_owners);
    while (__stlxr(v87 - 1, p_shared_owners));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
LABEL_32:
  v24 = v139;
  v23 = v140;
  if (v139 != v140)
  {
    v25 = (int64x2_t *)(a1 + 376);
    v104 = v140;
    do
    {
      ConfigFileVersion = (char **)quasar::SystemConfig::getConfigFileVersion(v106);
      quasar::RecogRequestFilter::RecogRequestFilter(__p);
      if (quasar::RecogRequestFilter::matchesConfiguration((quasar::RecogRequestFilter *)__p, v105))
      {
        quasar::PTree::PTree((quasar::PTree *)&ConfigFileVersion);
        if (quasar::PTree::isLeaf((quasar::PTree *)(v24 + 24)))
        {
          v26 = quasar::PTree::getString((quasar::PTree *)(v24 + 24));
          quasar::PTree::PTree(&v133, v26);
          quasar::PTree::addChild((quasar::PTree *)&ConfigFileVersion, (const quasar::PTree *)&v133);
          quasar::PTree::~PTree((quasar::PTree *)&v133);
        }
        if (quasar::PTree::isLeaf((quasar::PTree *)(v24 + 24)))
          p_ConfigFileVersion = (quasar::PTree *)&ConfigFileVersion;
        else
          p_ConfigFileVersion = (quasar::PTree *)(v24 + 24);
        v28 = quasar::PTree::begin(p_ConfigFileVersion);
        v29 = quasar::PTree::end(p_ConfigFileVersion);
        while (v28 != v29)
        {
          v30 = (std::string *)quasar::PTree::getString((quasar::PTree *)(v28 + 24));
          std::string::basic_string[abi:ne180100]<0>(&v133, "::");
          quasar::splitAndTrim(v30, (char *)&v133, (uint64_t *)&v132);
          if (v134.i8[15] < 0)
            operator delete(v133);
          quasar::SpeechRecognizerModelLoader::getFrontend(a1, (const void **)v132.__r_.__value_.__l.__data_, (uint64_t)v112);
          quasar::SpeechRecognizerModelLoader::getDecodable(a1, (void *)(v132.__r_.__value_.__r.__words[0] + 24), &v110);
          quasar::SpeechRecognizerModelLoader::getOrConstructDecoderChain(a1, (void *)(v132.__r_.__value_.__r.__words[0] + 48), 0, (uint64_t)v109);
          v107 = quasar::SystemConfig::getConfigFileVersion(v106);
          v31 = quasar::PTree::getString((quasar::PTree *)(v28 + 24));
          std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,void>((uint64_t)&v107, v24, v31, v112, &v110, v109, &v108);
          v33 = *(_OWORD **)(a1 + 384);
          v32 = *(_QWORD *)(a1 + 392);
          if ((unint64_t)v33 >= v32)
          {
            v34 = ((uint64_t)v33 - v25->i64[0]) >> 4;
            v35 = v34 + 1;
            if ((unint64_t)(v34 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v36 = v32 - v25->i64[0];
            if (v36 >> 3 > v35)
              v35 = v36 >> 3;
            if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFF0)
              v37 = 0xFFFFFFFFFFFFFFFLL;
            else
              v37 = v35;
            v136 = a1 + 392;
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 392, v37);
            v40 = &v38[16 * v34];
            *(_OWORD *)v40 = v108;
            v108 = 0uLL;
            v42 = *(_QWORD **)(a1 + 376);
            v41 = *(_QWORD **)(a1 + 384);
            if (v41 == v42)
            {
              v45 = vdupq_n_s64((unint64_t)v41);
              v43 = &v38[16 * v34];
            }
            else
            {
              v43 = &v38[16 * v34];
              do
              {
                v44 = *((_OWORD *)v41 - 1);
                v41 -= 2;
                *((_OWORD *)v43 - 1) = v44;
                v43 -= 16;
                *v41 = 0;
                v41[1] = 0;
              }
              while (v41 != v42);
              v45 = *v25;
            }
            v46 = v40 + 16;
            *(_QWORD *)(a1 + 376) = v43;
            *(_QWORD *)(a1 + 384) = v40 + 16;
            v134 = v45;
            v47 = *(_QWORD *)(a1 + 392);
            *(_QWORD *)(a1 + 392) = &v38[16 * v39];
            v135 = v47;
            v133 = (void *)v45.i64[0];
            std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)&v133);
            v48 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
            *(_QWORD *)(a1 + 384) = v46;
            if (v48)
            {
              v49 = (unint64_t *)&v48->__shared_owners_;
              do
                v50 = __ldaxr(v49);
              while (__stlxr(v50 - 1, v49));
              if (!v50)
              {
                ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                std::__shared_weak_count::__release_weak(v48);
              }
            }
          }
          else
          {
            *v33 = v108;
            *(_QWORD *)(a1 + 384) = v33 + 1;
          }
          v133 = v109;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v51 = v111;
          if (v111)
          {
            v52 = (unint64_t *)&v111->__shared_owners_;
            do
              v53 = __ldaxr(v52);
            while (__stlxr(v53 - 1, v52));
            if (!v53)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v133 = v112;
          std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v133 = &v132;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v133);
          v28 += 88;
        }
        quasar::PTree::~PTree((quasar::PTree *)&ConfigFileVersion);
        v23 = v104;
      }
      quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)__p);
      v24 += 88;
    }
    while (v24 != v23);
  }
  v138[1] = 0;
  ConfigFileVersion = v138;
  v138[0] = 0;
  v54 = *(_QWORD *)(a1 + 376);
  v55 = *(_QWORD *)(a1 + 384);
  while (v54 != v55)
  {
    (*(void (**)(void **__return_ptr))(***(_QWORD ***)(*(_QWORD *)v54 + 80) + 112))(__p);
    v56 = (void *)BYTE7(v116);
    v57 = BYTE7(v116);
    if (SBYTE7(v116) < 0)
      v56 = __p[1];
    if (v56)
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&ConfigFileVersion, (const void **)__p, (uint64_t)__p);
      v57 = BYTE7(v116);
    }
    if (v57 < 0)
      operator delete(__p[0]);
    v54 += 16;
  }
  quasar::eraseMapKeysNotInSet<std::shared_ptr<quasar::Decodable>>((uint64_t **)(a1 + 400), (uint64_t)&ConfigFileVersion);
  std::string::basic_string[abi:ne180100]<0>(__p, "spg");
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v106, (uint64_t)__p);
  v59 = (quasar::PTree *)PtreeOptional;
  if (SBYTE7(v116) < 0)
  {
    operator delete(__p[0]);
    if (!v59)
      goto LABEL_101;
  }
  else if (!PtreeOptional)
  {
    goto LABEL_101;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "spg");
  quasar::SystemConfig::enforceMinVersion((uint64_t)v106, 150, 0, (uint64_t)__p);
  if (SBYTE7(v116) < 0)
    operator delete(__p[0]);
  v60 = quasar::PTree::begin(v59);
  for (k = quasar::PTree::end(v59); v60 != k; v60 += 88)
  {
    if (*(char *)(v60 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v60, *(_QWORD *)(v60 + 8));
    }
    else
    {
      v62 = *(_OWORD *)v60;
      *(_QWORD *)&v116 = *(_QWORD *)(v60 + 16);
      *(_OWORD *)__p = v62;
    }
    if (v138 != (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&ConfigFileVersion, (const void **)__p))
    {
      v133 = __p;
      v63 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 400), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v133);
      if (v64)
      {
        v65 = v63;
        std::operator+<char>();
        std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,std::string,void>(&v132);
        if (v134.i8[15] < 0)
          operator delete(v133);
        *(_BYTE *)(v132.__r_.__value_.__r.__words[0] + 40) = 1;
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v65 + 7), (__int128 *)&v132);
        size = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
        if (v132.__r_.__value_.__l.__size_)
        {
          v67 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
      }
    }
    if (SBYTE7(v116) < 0)
      operator delete(__p[0]);
  }
LABEL_101:
  v69 = *(_QWORD *)(a1 + 376);
  for (m = *(_QWORD *)(a1 + 384); v69 != m; v69 += 16)
  {
    v71 = *(kaldi::quasar::Vocab ***)(*(_QWORD *)v69 + 80);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*v71 + 112))(&v133);
    v72 = v134.u8[15];
    v73 = v134.i8[15];
    if (v134.i8[15] < 0)
      v72 = v134.i64[0];
    if (v72)
    {
      if (a1 + 408 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 400, (const void **)&v133))
      {
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        v118 = 0u;
        v119 = 0u;
        v117 = 0u;
        *(_OWORD *)__p = 0u;
        v116 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder ", 8);
        kaldi::quasar::Vocab::OOvWord(*v71, &v132);
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v95 = &v132;
        else
          v95 = (std::string *)v132.__r_.__value_.__r.__words[0];
        if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v96 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
        else
          v96 = v132.__r_.__value_.__l.__size_;
        v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" references spg that does not exist: ", 37);
        if (v134.i8[15] >= 0)
          v99 = &v133;
        else
          v99 = v133;
        if (v134.i8[15] >= 0)
          v100 = v134.u8[15];
        else
          v100 = v134.i64[0];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v73 = v134.i8[15];
    }
    if (v73 < 0)
      operator delete(v133);
  }
  if ((a3 & 1) != 0)
  {
    v74 = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(v106);
    quasar::ModelLoader::waitUntilLoadingFinishes(v74);
  }
  if (quasar::gLogLevel >= 5)
  {
    v130 = 0u;
    v131 = 0u;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    v124 = 0u;
    v125 = 0u;
    v122 = 0u;
    v123 = 0u;
    v120 = 0u;
    v121 = 0u;
    v118 = 0u;
    v119 = 0u;
    v117 = 0u;
    *(_OWORD *)__p = 0u;
    v116 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"setActiveConfiguration(", 23);
    v76 = quasar::operator<<(v75, (uint64_t)v105);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)"), loaded: ", 11);
    v77 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" frontends, ", 12);
    v78 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" decodables, ", 13);
    v79 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)" decoder chains, ", 17);
    v80 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, (uint64_t)" SPG configs.", 13);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  std::__tree<std::string>::destroy((uint64_t)&ConfigFileVersion, v138[0]);
  __p[0] = &v139;
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<std::string>::destroy((uint64_t)v141, (char *)v141[1]);
  std::__tree<std::string>::destroy((uint64_t)&v142, v143[0]);
  std::__tree<std::string>::destroy((uint64_t)&v144, v145[0]);
}

void sub_1ADCA4FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void ****a15, uint64_t a16, void ***a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void **a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  a15 = &a17;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a17 = &a22;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a22 = (void **)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a22);
  JUMPOUT(0x1ADCA505CLL);
}

void sub_1ADCA4FC0()
{
  JUMPOUT(0x1ADCA503CLL);
}

void sub_1ADCA4FCC()
{
  JUMPOUT(0x1ADCA5034);
}

void sub_1ADCA4FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a72;
  uint64_t v72;

  quasar::PTree::~PTree((quasar::PTree *)&a72);
  quasar::RecogRequestFilter::~RecogRequestFilter((quasar::RecogRequestFilter *)&a27);
  a27 = (void **)(v72 - 192);
  std::vector<std::pair<std::string,quasar::PTree>>::__destroy_vector::operator()[abi:ne180100](&a27);
  std::__tree<std::string>::destroy(v72 - 168, *(char **)(v72 - 160));
  std::__tree<std::string>::destroy(v72 - 144, *(char **)(v72 - 136));
  std::__tree<std::string>::destroy(v72 - 120, *(char **)(v72 - 112));
  _Unwind_Resume(a1);
}

void sub_1ADCA4FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a69;
  uint64_t a73;

  if (a69 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a73);
  JUMPOUT(0x1ADCA508CLL);
}

void sub_1ADCA4FF4()
{
  JUMPOUT(0x1ADCA504CLL);
}

void sub_1ADCA4FFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&v32);
  JUMPOUT(0x1ADCA508CLL);
}

void sub_1ADCA5014()
{
  JUMPOUT(0x1ADCA5080);
}

void sub_1ADCA506C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void **a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  a27 = (void **)&a61;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a27);
  JUMPOUT(0x1ADCA5080);
}

void quasar::eraseMapKeysNotInSet<std::vector<std::shared_ptr<quasar::FeatureExtractor>>>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;

  v3 = (uint64_t *)(a1 + 1);
  v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    v6 = a2 + 8;
    do
    {
      if (v6 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2 + 4))
      {
        v8 = std::__tree<std::string>::__remove_node_pointer(a1, v2);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<std::shared_ptr<quasar::FeatureExtractor>>>,0>((uint64_t)(v2 + 4));
        operator delete(v2);
      }
      else
      {
        v7 = (uint64_t *)v2[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v2[2];
            v9 = *v8 == (_QWORD)v2;
            v2 = v8;
          }
          while (!v9);
        }
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
}

void quasar::eraseMapKeysNotInSet<std::shared_ptr<quasar::Decodable>>(uint64_t **a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;

  v3 = (uint64_t *)(a1 + 1);
  v2 = *a1;
  if (*a1 != (uint64_t *)(a1 + 1))
  {
    v6 = a2 + 8;
    do
    {
      if (v6 == std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)v2 + 4))
      {
        v8 = std::__tree<std::string>::__remove_node_pointer(a1, v2);
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<void>>,0>((uint64_t)(v2 + 4));
        operator delete(v2);
      }
      else
      {
        v7 = (uint64_t *)v2[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (uint64_t *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (uint64_t *)v2[2];
            v9 = *v8 == (_QWORD)v2;
            v2 = v8;
          }
          while (!v9);
        }
      }
      v2 = v8;
    }
    while (v8 != v3);
  }
}

void quasar::SpeechRecognizerModelLoader::DefaultFactory::~DefaultFactory(quasar::SpeechRecognizerModelLoader::DefaultFactory *this)
{
  JUMPOUT(0x1AF44D190);
}

void std::__optional_storage_base<std::set<unsigned int>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<unsigned int>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::__tree<unsigned int>::__assign_multi<std::__tree_const_iterator<unsigned int,std::__tree_node<unsigned int,void *> *,long>>((uint64_t **)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<int>::destroy(a1, *(_QWORD **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    std::set<unsigned int>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void std::__optional_storage_base<std::set<std::string>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<std::string>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::__tree<std::string>::__assign_multi<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t **)a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<std::string>::destroy(a1, *(char **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    std::set<std::string>::set[abi:ne180100]((uint64_t *)a1, (const void ***)a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

void std::__optional_storage_base<std::set<BOOL>,false>::__assign_from[abi:ne180100]<std::__optional_copy_assign_base<std::set<BOOL>,false> const&>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (a1 != a2)
    {
      if (*(_BYTE *)(a1 + 24))
        std::__tree<BOOL>::__assign_multi<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>((uint64_t **)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    std::__tree<int>::destroy(a1, *(_QWORD **)(a1 + 8));
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    std::set<BOOL>::set[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t **std::__tree<BOOL>::__assign_multi<std::__tree_const_iterator<BOOL,std::__tree_node<BOOL,void *> *,long>>(uint64_t **result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_BYTE *)v8 + 25) = v9[25];
          std::__tree<BOOL>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (unsigned __int8 *)*((_QWORD *)v9 + 1);
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = *(unsigned __int8 **)v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
              v11 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<BOOL>::__emplace_multi<BOOL const&>(v5, a2 + 25);
      v12 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
          v11 = *(_QWORD *)v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADCA5524(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<BOOL>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(unsigned __int8 *)(a2 + 25) >= *((unsigned __int8 *)v4 + 25))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

uint64_t *std::__tree<BOOL>::__emplace_multi<BOOL const&>(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t *v4;
  unsigned int v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x20uLL);
  v5 = *a2;
  *((_BYTE *)v4 + 25) = v5;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= *((unsigned __int8 *)v7 + 25))
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::emplace_back<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>> const&,quasar::RecognizerProperties>(uint64_t *a1, _QWORD *a2, __int16 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  __int16 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int16 v25;
  _QWORD v27[5];

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_QWORD *)(v6 - 8);
  if (v9 >= v8)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - *a1) >> 3);
    v16 = v15 + 1;
    if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    v27[4] = v6;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v6, v18);
    else
      v19 = 0;
    v20 = &v19[24 * v15];
    v27[0] = v19;
    v27[1] = v20;
    v27[3] = &v19[24 * v18];
    *(_QWORD *)v20 = *a2;
    v21 = a2[1];
    *((_QWORD *)v20 + 1) = v21;
    if (v21)
    {
      v22 = (unint64_t *)(v21 + 8);
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
    }
    v24 = &v19[24 * v15];
    v25 = *a3;
    v24[18] = *((_BYTE *)a3 + 2);
    *((_WORD *)v24 + 8) = v25;
    v27[2] = v20 + 24;
    std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::__swap_out_circular_buffer(a1, v27);
    v14 = a1[1];
    std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)v27);
  }
  else
  {
    *(_QWORD *)v9 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v9 + 8) = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = *a3;
    *(_BYTE *)(v9 + 18) = *((_BYTE *)a3 + 2);
    *(_WORD *)(v9 + 16) = v13;
    v14 = v9 + 24;
    a1[1] = v9 + 24;
  }
  a1[1] = v14;
  return v14 - 24;
}

void sub_1ADCA57A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<std::shared_ptr<quasar::RecognizerComponents<quasar::Decoder>>,quasar::RecognizerProperties>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_OWORD *)(v2 - 24);
    v2 -= 24;
    *(_OWORD *)(v4 - 24) = v5;
    v4 -= 24;
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v6 = *(_WORD *)(v2 + 16);
    *(_BYTE *)(v4 + 18) = *(_BYTE *)(v2 + 18);
    *(_WORD *)(v4 + 16) = v6;
  }
  a2[1] = v4;
  v7 = *result;
  *result = v4;
  a2[1] = v7;
  v8 = result[1];
  result[1] = a2[2];
  a2[2] = v8;
  v9 = result[2];
  result[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD **a4@<X4>, uint64_t *a5@<X5>, _QWORD **a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADCA58A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &,std::allocator<quasar::RecognizerComponents<quasar::Decoder>>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, uint64_t *a6, _QWORD **a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1E5D43868;
  a1[1] = 0;
  std::allocator<quasar::RecognizerComponents<quasar::Decoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &>((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1ADCA5914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43868;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43868;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::RecognizerComponents<quasar::Decoder>>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<quasar::RecognizerComponents<quasar::SyncDecoder>>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

void std::allocator<quasar::RecognizerComponents<quasar::Decoder>>::construct[abi:ne180100]<quasar::RecognizerComponents<quasar::Decoder>,quasar::SystemConfig::Version,std::string const&,std::string const&,std::vector<std::shared_ptr<quasar::FeatureExtractor>> &,std::shared_ptr<quasar::Decodable> &,std::vector<std::shared_ptr<quasar::Decoder>> &>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD **a6, uint64_t *a7, _QWORD **a8)
{
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::string v22;
  std::string v23;

  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v23 = *(std::string *)a4;
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v22, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v22 = *(std::string *)a5;
  v14 = (std::__shared_weak_count *)a7[1];
  v20 = *a7;
  v21 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  quasar::RecognizerComponents<quasar::Decoder>::RecognizerComponents(a2, a3, (uint64_t)&v23, (uint64_t)&v22, a6, &v20, a8);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
}

void sub_1ADCA5AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RecognizerComponents<quasar::Decoder>::RecognizerComponents(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD **a5, _QWORD *a6, _QWORD **a7)
{
  __int128 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v17;

  std::allocate_shared[abi:ne180100]<quasar::RecogRequestFilter,std::allocator<quasar::RecogRequestFilter>,quasar::SystemConfig::Version const&,std::string const&,void>(&v17);
  *(_OWORD *)a1 = v17;
  if (*(char *)(a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    v12 = *(_OWORD *)a4;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a4 + 16);
    *(_OWORD *)(a1 + 16) = v12;
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  std::vector<std::shared_ptr<quasar::FeatureExtractor>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::FeatureExtractor>*,std::shared_ptr<quasar::FeatureExtractor>*>((char *)(a1 + 40), *a5, a5[1], ((char *)a5[1] - (char *)*a5) >> 4);
  *(_QWORD *)(a1 + 64) = *a6;
  v13 = a6[1];
  *(_QWORD *)(a1 + 72) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<std::shared_ptr<quasar::Decoder>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>((char *)(a1 + 80), *a7, a7[1], ((char *)a7[1] - (char *)*a7) >> 4);
  quasar::removeSpaces(a4, (std::string *)(a1 + 104));
  return a1;
}

void sub_1ADCA5C0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SilencePosteriorGeneratorConfig,std::allocator<quasar::SilencePosteriorGeneratorConfig>,quasar::SystemConfig &,std::string,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADCA5CB4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::SilencePosteriorGeneratorConfig>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44B70;
  a1[1] = 0;
  quasar::SilencePosteriorGeneratorConfig::SilencePosteriorGeneratorConfig(a1 + 3);
  return a1;
}

void sub_1ADCA5D00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44B70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44B70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::SilencePosteriorGeneratorConfig>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v1);
}

uint64_t quasar::RegexEnumerator::RegexEnumerator(uint64_t a1, __int128 *a2, quasar::PTree *this)
{
  std::string *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t i;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v12;
  int v13;
  const std::string *String;
  std::string *v16;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[18];

  *(_QWORD *)a1 = off_1E5D35280;
  v5 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v6 = *a2;
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a1 = &off_1E5D35BD0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v7 = quasar::PTree::begin(this);
  for (i = quasar::PTree::end(this); v7 != i; v7 += 88)
  {
    if (*(char *)(v7 + 23) < 0)
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (v10 == 9)
      {
        v9 = *(uint64_t **)v7;
LABEL_17:
        v12 = *v9;
        v13 = *((unsigned __int8 *)v9 + 8);
        if (v12 != 0x7079742D656C7572 || v13 != 101)
          continue;
        String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v7 + 24));
        v16 = (std::string *)(a1 + 56);
        goto LABEL_29;
      }
      if (v10 != 16)
        continue;
      if (**(_QWORD **)v7 != 0x6E6F632D656C7572 || *(_QWORD *)(*(_QWORD *)v7 + 8) != 0x656C69662D676966)
        continue;
    }
    else
    {
      if (*(_BYTE *)(v7 + 23) != 16)
      {
        v9 = (uint64_t *)v7;
        if (*(_BYTE *)(v7 + 23) != 9)
          continue;
        goto LABEL_17;
      }
      if (*(_QWORD *)v7 != 0x6E6F632D656C7572 || *(_QWORD *)(v7 + 8) != 0x656C69662D676966)
        continue;
    }
    String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v7 + 24));
    v16 = (std::string *)(a1 + 32);
LABEL_29:
    std::string::operator=(v16, String);
  }
  if (!quasar::filesystem::exists((char *)(a1 + 32)) || quasar::filesystem::is_directory((char *)(a1 + 32)))
  {
    memset(v23, 0, 272);
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Rule config file does not exist or it is a directory. File path = ", 66);
    v20 = *(char *)(a1 + 55);
    if (v20 >= 0)
      v21 = a1 + 32;
    else
      v21 = *(_QWORD *)(a1 + 32);
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a1 + 55);
    else
      v22 = *(_QWORD *)(a1 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v23);
  }
  quasar::RegexEnumerator::parseConfigFile((quasar::RegexEnumerator *)a1);
  return a1;
}

void sub_1ADCA5FE0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v3, *(_QWORD **)(v1 + 88));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  quasar::NameEnumerator::~NameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::parseConfigFile(quasar::RegexEnumerator *this)
{
  _QWORD *v2;
  int v3;
  char *v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  void *v17[2];
  char v18;
  void *v19[2];
  uint64_t v20;
  _OWORD v21[2];
  int v22;
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[64];

  quasar::PTree::PTree((quasar::PTree *)v40);
  if (quasar::gLogLevel >= 5)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v25 = 0u;
    *(_OWORD *)__p = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read rule config file = ", 24);
    v3 = *((char *)this + 55);
    if (v3 >= 0)
      v4 = (char *)this + 32;
    else
      v4 = (char *)*((_QWORD *)this + 4);
    if (v3 >= 0)
      v5 = *((unsigned __int8 *)this + 55);
    else
      v5 = *((_QWORD *)this + 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v4, v5);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  quasar::PTree::readJsonFromFile((uint64_t)v40, (__int128 *)this + 2);
  memset(v21, 0, sizeof(v21));
  v22 = 1065353216;
  quasar::RegexEnumerator::getStepMap((uint64_t)this, (unsigned __int8 *)this + 56, (uint64_t)v40, v21, (uint64_t)__p);
  v6 = (char *)this + 88;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  v7 = __p[1];
  *((void **)this + 10) = __p[0];
  *((_QWORD *)this + 11) = v7;
  v8 = v24;
  *((_QWORD *)this + 12) = v24;
  if (v8)
  {
    v7[2] = v6;
    __p[0] = &__p[1];
    __p[1] = 0;
    *(_QWORD *)&v24 = 0;
    v7 = 0;
  }
  else
  {
    *((_QWORD *)this + 10) = v6;
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)__p, v7);
  if (!*((_QWORD *)this + 12))
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "locale");
    quasar::PTree::getStringOptional((uint64_t)v40, (uint64_t)v17, (std::string *)__p);
    if (BYTE8(v24))
    {
      *(_OWORD *)v19 = *(_OWORD *)__p;
      v20 = v24;
      __p[1] = 0;
      *(_QWORD *)&v24 = 0;
      __p[0] = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v19, "");
      if (BYTE8(v24) && SBYTE7(v24) < 0)
        operator delete(__p[0]);
    }
    if (v18 < 0)
      operator delete(v17[0]);
    if (quasar::gLogLevel >= 4)
    {
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      *(_OWORD *)__p = 0u;
      v24 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"rule: ", 6);
      v10 = *((char *)this + 79);
      if (v10 >= 0)
        v11 = (char *)this + 56;
      else
        v11 = (char *)*((_QWORD *)this + 7);
      if (v10 >= 0)
        v12 = *((unsigned __int8 *)this + 79);
      else
        v12 = *((_QWORD *)this + 8);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v11, v12);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" is not valid in file with locale: ", 35);
      if (v20 >= 0)
        v15 = v19;
      else
        v15 = (void **)v19[0];
      if (v20 >= 0)
        v16 = HIBYTE(v20);
      else
        v16 = (uint64_t)v19[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v21);
  quasar::PTree::~PTree((quasar::PTree *)v40);
}

void sub_1ADCA62CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,__int128 __p,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 && a33 < 0)
    operator delete((void *)__p);
  if (a15 < 0)
    operator delete(a10);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a23);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::RegexEnumerator::RegexEnumerator(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  std::string *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[17];

  *(_QWORD *)a1 = off_1E5D35280;
  v7 = (std::string *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    v7->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_QWORD *)a1 = &off_1E5D35BD0;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v9 = *a3;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(a1 + 32) = v9;
  }
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  if (!quasar::filesystem::exists((char *)(a1 + 32)) || quasar::filesystem::is_directory((char *)(a1 + 32)))
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Rule config file does not exist or it is a directory. File path = ", 66);
    v13 = *(char *)(a1 + 55);
    if (v13 >= 0)
      v14 = a1 + 32;
    else
      v14 = *(_QWORD *)(a1 + 32);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 55);
    else
      v15 = *(_QWORD *)(a1 + 40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  quasar::RegexEnumerator::parseConfigFile((quasar::RegexEnumerator *)a1);
  return a1;
}

void sub_1ADCA65E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v4, *(_QWORD **)(v1 + 88));
  if (*(char *)(v1 + 79) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  quasar::NameEnumerator::~NameEnumerator((void **)v1);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::getStepMap(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t Child;
  quasar::PTree *ChildWithoutSplit;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void **v15;
  void *v16;
  int v17;
  uint64_t String;
  _QWORD *StepMap;
  _QWORD *v21;
  _QWORD v22[3];
  void *__p[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a4, a2))
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"clone-from field is invalid. Rule config file path=", 51);
    std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, a1 + 32);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)a4, a2, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "rules");
  Child = quasar::PTree::getChild(a3, (__int128 *)__p);
  ChildWithoutSplit = (quasar::PTree *)quasar::PTree::getChildWithoutSplit(Child, (unsigned __int8 **)a2);
  if (SBYTE7(v24) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)a5 = a5 + 8;
  if (ChildWithoutSplit)
  {
    v12 = quasar::PTree::begin(ChildWithoutSplit);
    v13 = quasar::PTree::end(ChildWithoutSplit);
    while (v12 != v13)
    {
      if (*(char *)(v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
      }
      else
      {
        v14 = *(_OWORD *)v12;
        *(_QWORD *)&v24 = *(_QWORD *)(v12 + 16);
        *(_OWORD *)__p = v14;
      }
      if (SBYTE7(v24) < 0)
      {
        if (__p[1] != (void *)10)
          goto LABEL_18;
        v15 = (void **)__p[0];
      }
      else
      {
        if (SBYTE7(v24) != 10)
          goto LABEL_18;
        v15 = __p;
      }
      v16 = *v15;
      v17 = *((unsigned __int16 *)v15 + 4);
      if (v16 == (void *)0x72662D656E6F6C63 && v17 == 28015)
      {
        String = quasar::PTree::getString((quasar::PTree *)(v12 + 24));
        StepMap = quasar::RegexEnumerator::getStepMap(v22, a1, String, a3, a4);
        quasar::RegexEnumerator::cloneStep((uint64_t)StepMap, v22, (uint64_t **)a5);
        std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)v22, (_QWORD *)v22[1]);
        goto LABEL_19;
      }
LABEL_18:
      quasar::RegexEnumerator::insertStep(a1, (const void **)__p, v12 + 24, (uint64_t **)a5);
LABEL_19:
      if (SBYTE7(v24) < 0)
        operator delete(__p[0]);
      v12 += 88;
    }
  }
}

void quasar::RegexEnumerator::cloneStep(uint64_t a1, _QWORD *a2, uint64_t **a3)
{
  _QWORD *v3;
  uint64_t v4;
  const void *v5;
  uint64_t **v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  const quasar::SplitStep *v11;
  const quasar::SplitStep *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const quasar::WholeStringStep *v16;
  const quasar::WholeStringStep *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const void *v21;
  quasar::ReplaceStep *v22;
  quasar::ReplaceStep *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  quasar::SplitStep *v27;
  quasar::SplitStep *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *v61;
  uint64_t *v62;
  unint64_t *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  BOOL v75;
  uint64_t **v76;
  _QWORD *v77;
  __int128 v79;
  __int128 v80;
  const quasar::WholeStringStep *v81;
  std::__shared_weak_count *v82;
  const quasar::SplitStep *v83;
  std::__shared_weak_count *v84;
  uint64_t **v85;
  std::__shared_weak_count *v86;
  std::string v87;

  v3 = (_QWORD *)*a2;
  v77 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v76 = a3 + 1;
    do
    {
      if (*((char *)v3 + 55) < 0)
        std::string::__init_copy_ctor_external(&v87, (const std::string::value_type *)v3[4], v3[5]);
      else
        v87 = *(std::string *)(v3 + 4);
      v4 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a3, (const void **)&v87.__r_.__value_.__l.__data_);
      v5 = (const void *)v3[7];
      if (v5
      {
        v7 = v6;
        v8 = (std::__shared_weak_count *)v3[8];
        v85 = v6;
        v86 = v8;
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
          v5 = (const void *)v3[7];
          if (!v5)
          {
LABEL_20:
            v12 = 0;
            v83 = 0;
            v84 = 0;
            if (!v5)
              goto LABEL_26;
            goto LABEL_21;
          }
        }
      }
      else
      {
        v7 = 0;
        v85 = 0;
        v86 = 0;
        if (!v5)
          goto LABEL_20;
      }
      if (!v11)
        goto LABEL_20;
      v12 = v11;
      v13 = (std::__shared_weak_count *)v3[8];
      v83 = v11;
      v84 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v5 = (const void *)v3[7];
        if (!v5)
        {
LABEL_26:
          v17 = 0;
          v81 = 0;
          v82 = 0;
          goto LABEL_27;
        }
      }
LABEL_21:
      if (!v16)
        goto LABEL_26;
      v17 = v16;
      v18 = (std::__shared_weak_count *)v3[8];
      v81 = v16;
      v82 = v18;
      if (v18)
      {
        v19 = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
LABEL_27:
      if (v76 != (uint64_t **)v4)
      {
        v21 = *(const void **)(v4 + 56);
        if (v21
        {
          v23 = v22;
          v24 = *(_QWORD *)(v4 + 64);
          *(_QWORD *)&v80 = v22;
          *((_QWORD *)&v80 + 1) = v24;
          if (v24)
          {
            v25 = (unint64_t *)(v24 + 8);
            do
              v26 = __ldxr(v25);
            while (__stxr(v26 + 1, v25));
            v21 = *(const void **)(v4 + 56);
            if (!v21)
            {
LABEL_52:
              v28 = 0;
              v79 = 0uLL;
              if (v21)
                goto LABEL_53;
LABEL_59:
              v41 = 0;
              v40 = 0;
              if (v23)
                goto LABEL_60;
              goto LABEL_62;
            }
          }
        }
        else
        {
          v23 = 0;
          v80 = 0uLL;
          if (!v21)
            goto LABEL_52;
        }
        if (!v27)
          goto LABEL_52;
        v28 = v27;
        v29 = *(_QWORD *)(v4 + 64);
        *(_QWORD *)&v79 = v27;
        *((_QWORD *)&v79 + 1) = v29;
        if (v29)
        {
          v30 = (unint64_t *)(v29 + 8);
          do
            v31 = __ldxr(v30);
          while (__stxr(v31 + 1, v30));
          v21 = *(const void **)(v4 + 56);
          if (!v21)
            goto LABEL_59;
        }
LABEL_53:
        if (!v39)
          goto LABEL_59;
        v40 = v39;
        v41 = *(std::__shared_weak_count **)(v4 + 64);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
        }
        if (v23)
        {
LABEL_60:
          if (v7)
            quasar::ReplaceStep::mergeStep(v23, v7);
        }
LABEL_62:
        if (v28 && v12)
          quasar::SplitStep::mergeStep(v28, v12);
        if (v40 && v17)
          quasar::WholeStringStep::mergeStep(v40, v17);
        if (v41)
        {
          v44 = (unint64_t *)&v41->__shared_owners_;
          do
            v45 = __ldaxr(v44);
          while (__stlxr(v45 - 1, v44));
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v46 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v47 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v48 = __ldaxr(v47);
          while (__stlxr(v48 - 1, v47));
          if (!v48)
          {
            ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
            std::__shared_weak_count::__release_weak(v46);
          }
        }
        v49 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        if (!*((_QWORD *)&v80 + 1))
          goto LABEL_108;
        v50 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        goto LABEL_106;
      }
      v80 = 0uLL;
      if (v7)
      {
        std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,quasar::ReplaceStep&,void>((uint64_t)v7, &v79);
        v32 = v79;
        v79 = 0uLL;
        v33 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        v80 = v32;
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v37 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          goto LABEL_101;
        }
      }
      else if (v12)
      {
        std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,quasar::SplitStep&,void>((uint64_t)v12, &v79);
        v52 = v79;
        v79 = 0uLL;
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        v80 = v52;
        if (v53)
        {
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v56 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v38 = __ldaxr(v56);
          while (__stlxr(v38 - 1, v56));
          goto LABEL_101;
        }
      }
      else if (v17)
      {
        std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,quasar::WholeStringStep&,void>((uint64_t)v17, &v79);
        v57 = v79;
        v79 = 0uLL;
        v58 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
        v80 = v57;
        if (v58)
        {
          v59 = (unint64_t *)&v58->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        v36 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
        if (*((_QWORD *)&v79 + 1))
        {
          v61 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
          do
            v38 = __ldaxr(v61);
          while (__stlxr(v38 - 1, v61));
LABEL_101:
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      *(_QWORD *)&v79 = &v87;
      v62 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a3, (const void **)&v87.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v79);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v62 + 7, (uint64_t *)&v80);
      v49 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
      if (*((_QWORD *)&v80 + 1))
      {
        v63 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
        do
          v51 = __ldaxr(v63);
        while (__stlxr(v51 - 1, v63));
LABEL_106:
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
LABEL_108:
      v64 = v82;
      if (v82)
      {
        v65 = (unint64_t *)&v82->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = v84;
      if (v84)
      {
        v68 = (unint64_t *)&v84->__shared_owners_;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
      }
      v70 = v86;
      if (v86)
      {
        v71 = (unint64_t *)&v86->__shared_owners_;
        do
          v72 = __ldaxr(v71);
        while (__stlxr(v72 - 1, v71));
        if (!v72)
        {
          ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
          std::__shared_weak_count::__release_weak(v70);
        }
      }
      if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v87.__r_.__value_.__l.__data_);
      v73 = (_QWORD *)v3[1];
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = (_QWORD *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (_QWORD *)v3[2];
          v75 = *v74 == (_QWORD)v3;
          v3 = v74;
        }
        while (!v75);
      }
      v3 = v74;
    }
    while (v74 != v77);
  }
}

void sub_1ADCA6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  va_list va1;
  uint64_t v16;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a9);
  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v14 = va_arg(va2, _QWORD);
  v16 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  if (*(char *)(v9 - 89) < 0)
    operator delete(*(void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::insertStep(uint64_t a1, const void **a2, uint64_t a3, uint64_t **a4)
{
  int v6;
  const void *v8;
  uint64_t *v12;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  __int128 v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  const void *v45;
  quasar::ReplaceStep *v46;
  quasar::ReplaceStep *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  const void *v51;
  uint64_t **v52;
  uint64_t **v53;
  unint64_t *v54;
  unint64_t v55;
  const void *v56;
  quasar::SplitStep *v57;
  quasar::SplitStep *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  const quasar::SplitStep *v62;
  const quasar::SplitStep *v63;
  unint64_t *v64;
  unint64_t v65;
  const void *v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  const quasar::WholeStringStep *v72;
  const quasar::WholeStringStep *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  std::__shared_weak_count *v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  v119 = 0uLL;
  v6 = *((unsigned __int8 *)a2 + 23);
  if ((v6 & 0x80) != 0)
  {
    v8 = a2[1];
    if (v8 == (const void *)11
      && *(_QWORD *)*a2 == 0x2D746C612D657270
      && *(_QWORD *)((char *)*a2 + 3) == 0x6E65672D746C612DLL)
    {
      goto LABEL_48;
    }
    if (v8 == (const void *)12)
    {
      if (*(_QWORD *)*a2 == 0x746C612D74736F70 && *((_DWORD *)*a2 + 2) == 1852139309)
        goto LABEL_48;
      v8 = a2[1];
      if (v8 == (const void *)12)
      {
        if (*(_QWORD *)*a2 == 0x6D6F632D74736F70 && *((_DWORD *)*a2 + 2) == 1701734754)
          goto LABEL_48;
        if ((v6 & 0x80) == 0)
        {
          if (v6 != 7)
            goto LABEL_71;
LABEL_57:
          if (*(_DWORD *)a2 != 762604641 || *(_DWORD *)((char *)a2 + 3) != 1852139309)
            goto LABEL_71;
          goto LABEL_79;
        }
      }
    }
    if (v8 == (const void *)7)
    {
      if (*(_DWORD *)*a2 == 762604641 && *(_DWORD *)((char *)*a2 + 3) == 1852139309)
      {
LABEL_79:
        std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,std::string const&,quasar::PTree const&,void>(&v102);
        v33 = v102;
        v102 = 0uLL;
        v34 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
        v119 = v33;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldaxr(p_shared_owners);
          while (__stlxr(v36 - 1, p_shared_owners));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
        v20 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
        if (!*((_QWORD *)&v102 + 1))
          goto LABEL_98;
        v37 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
        do
          v22 = __ldaxr(v37);
        while (__stlxr(v22 - 1, v37));
        goto LABEL_96;
      }
      v8 = a2[1];
    }
    if (v8 != (const void *)18)
      goto LABEL_71;
    v12 = (uint64_t *)*a2;
    goto LABEL_64;
  }
  if (*((unsigned __int8 *)a2 + 23) > 0xBu)
  {
    if (v6 == 12)
    {
      if (*a2 == (const void *)0x746C612D74736F70 && *((_DWORD *)a2 + 2) == 1852139309)
        goto LABEL_48;
      if (*a2 == (const void *)0x6D6F632D74736F70 && *((_DWORD *)a2 + 2) == 1701734754)
        goto LABEL_48;
      goto LABEL_71;
    }
    v12 = (uint64_t *)a2;
    if (v6 != 18)
      goto LABEL_71;
LABEL_64:
    v24 = *v12;
    v25 = v12[1];
    v26 = *((unsigned __int16 *)v12 + 8);
    if (v24 == 0x74732D656C6F6877 && v25 == 0x6C75722D676E6972 && v26 == 29541)
    {
      std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,std::string const&,quasar::PTree const&,std::string&,void>(&v102);
      v38 = v102;
      v102 = 0uLL;
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
      v119 = v38;
      if (v39)
      {
        v40 = (unint64_t *)&v39->__shared_owners_;
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
      if (!*((_QWORD *)&v102 + 1))
        goto LABEL_98;
      v42 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
      do
        v22 = __ldaxr(v42);
      while (__stlxr(v22 - 1, v42));
LABEL_96:
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
      goto LABEL_98;
    }
LABEL_71:
    if (quasar::gLogLevel >= 5)
    {
      v117 = 0u;
      v118 = 0u;
      v115 = 0u;
      v116 = 0u;
      v113 = 0u;
      v114 = 0u;
      v111 = 0u;
      v112 = 0u;
      v109 = 0u;
      v110 = 0u;
      v107 = 0u;
      v108 = 0u;
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v102 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v102);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v102, (uint64_t)"We do not support step = ", 25);
      v30 = *((char *)a2 + 23);
      if (v30 >= 0)
        v31 = (uint64_t)a2;
      else
        v31 = (uint64_t)*a2;
      if (v30 >= 0)
        v32 = *((unsigned __int8 *)a2 + 23);
      else
        v32 = (uint64_t)a2[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v102);
    }
    goto LABEL_182;
  }
  if (v6 == 7)
    goto LABEL_57;
  if (v6 != 11)
    goto LABEL_71;
  if (*a2 != (const void *)0x2D746C612D657270
    || *(const void **)((char *)a2 + 3) != (const void *)0x6E65672D746C612DLL)
  {
    goto LABEL_71;
  }
LABEL_48:
  std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,std::string const&,quasar::PTree const&,void>(&v102);
  v16 = v102;
  v102 = 0uLL;
  v17 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  v119 = v16;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    goto LABEL_96;
  }
LABEL_98:
  if (!(_QWORD)v119)
  {
    v117 = 0u;
    v118 = 0u;
    v115 = 0u;
    v116 = 0u;
    v113 = 0u;
    v114 = 0u;
    v111 = 0u;
    v112 = 0u;
    v109 = 0u;
    v110 = 0u;
    v107 = 0u;
    v108 = 0u;
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v102 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v102);
    v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v102, (uint64_t)"Please check config file for regex rule, step name = ", 53);
    v95 = *((char *)a2 + 23);
    if (v95 >= 0)
      v96 = (uint64_t)a2;
    else
      v96 = (uint64_t)*a2;
    if (v95 >= 0)
      v97 = *((unsigned __int8 *)a2 + 23);
    else
      v97 = (uint64_t)a2[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, v96, v97);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v102);
  }
  v43 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)a4, a2);
  v44 = v43;
  if (a4 + 1 == (uint64_t **)v43)
  {
    *(_QWORD *)&v102 = a2;
    v90 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a4, a2, (uint64_t)&std::piecewise_construct, (__int128 **)&v102);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v90 + 7, (uint64_t *)&v119);
    goto LABEL_182;
  }
  v45 = *(const void **)(v43 + 56);
  if (v45
  {
    v47 = v46;
    v48 = *(_QWORD *)(v44 + 64);
    *(_QWORD *)&v102 = v46;
    *((_QWORD *)&v102 + 1) = v48;
    if (v48)
    {
      v49 = (unint64_t *)(v48 + 8);
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
    }
  }
  else
  {
    v47 = 0;
    v102 = 0uLL;
  }
  v51 = (const void *)v119;
  if ((_QWORD)v119
  {
    v53 = v52;
    v101 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v54 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v55 = __ldxr(v54);
      while (__stxr(v55 + 1, v54));
    }
  }
  else
  {
    v53 = 0;
    v101 = 0;
  }
  v56 = *(const void **)(v44 + 56);
  if (v56
  {
    v58 = v57;
    v59 = *(std::__shared_weak_count **)(v44 + 64);
    v100 = v59;
    if (v59)
    {
      v60 = (unint64_t *)&v59->__shared_owners_;
      do
        v61 = __ldxr(v60);
      while (__stxr(v61 + 1, v60));
    }
    if (!v51)
      goto LABEL_127;
  }
  else
  {
    v58 = 0;
    v100 = 0;
    if (!v51)
    {
LABEL_127:
      v63 = 0;
      v99 = 0;
      goto LABEL_128;
    }
  }
  if (!v62)
    goto LABEL_127;
  v63 = v62;
  v99 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v64 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
  }
LABEL_128:
  v66 = *(const void **)(v44 + 56);
  if (v66
  {
    v68 = v67;
    v69 = *(std::__shared_weak_count **)(v44 + 64);
    v98 = v69;
    if (v69)
    {
      v70 = (unint64_t *)&v69->__shared_owners_;
      do
        v71 = __ldxr(v70);
      while (__stxr(v71 + 1, v70));
    }
    if (!v51)
      goto LABEL_141;
  }
  else
  {
    v68 = 0;
    v98 = 0;
    if (!v51)
      goto LABEL_141;
  }
  if (v72)
  {
    v73 = v72;
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
    if (*((_QWORD *)&v119 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
      do
        v76 = __ldxr(v75);
      while (__stxr(v76 + 1, v75));
    }
    goto LABEL_142;
  }
LABEL_141:
  v74 = 0;
  v73 = 0;
LABEL_142:
  if (v47 && v53)
    quasar::ReplaceStep::mergeStep(v47, v53);
  if (v58 && v63)
    quasar::SplitStep::mergeStep(v58, v63);
  if (v68 && v73)
    quasar::WholeStringStep::mergeStep(v68, v73);
  if (v74)
  {
    v77 = (unint64_t *)&v74->__shared_owners_;
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  if (v98)
  {
    v79 = (unint64_t *)&v98->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
      std::__shared_weak_count::__release_weak(v98);
    }
  }
  if (v99)
  {
    v81 = (unint64_t *)&v99->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
      std::__shared_weak_count::__release_weak(v99);
    }
  }
  if (v100)
  {
    v83 = (unint64_t *)&v100->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  if (v101)
  {
    v85 = (unint64_t *)&v101->__shared_owners_;
    do
      v86 = __ldaxr(v85);
    while (__stlxr(v86 - 1, v85));
    if (!v86)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v87 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v88 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
LABEL_182:
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v119 + 1);
  if (*((_QWORD *)&v119 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v119 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_1ADCA78C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  JUMPOUT(0x1ADCA790CLL);
}

void sub_1ADCA78F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1ADCA790CLL);
}

void sub_1ADCA7908(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 80);
  _Unwind_Resume(a1);
}

uint64_t quasar::RegexEnumerator::getEnumerations(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  uint64_t v21;
  std::vector<std::string>::pointer begin;
  std::vector<std::string>::pointer i;
  _QWORD *v24;
  std::vector<std::string> v26;
  std::string *v27;
  std::string *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  void *__p[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "pre-alt-gen");
    v7 = a1 + 80;
    v8 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)__p);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    v9 = a1 + 88;
    if (a1 + 88 == v8)
    {
      v31 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v30, (__int128 *)a2);
    }
    else if ((*(unsigned int (**)(_QWORD, uint64_t, __int128 **))(**(_QWORD **)(v8 + 56) + 16))(*(_QWORD *)(v8 + 56), a2, &v30) == -1|| v31 - (_QWORD)v30 != 24)
    {
      if (quasar::gLogLevel >= 5)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)__p = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"pre-alt-gen", 11);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v11 = 0xFFFFFFFFLL;
      goto LABEL_48;
    }
    v27 = 0;
    v28 = 0;
    v29 = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "alt-gen");
    v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    if (v9 == v16)
    {
      v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v27, v30);
    }
    else if ((*(unsigned int (**)(_QWORD, __int128 *, std::string **))(**(_QWORD **)(v16 + 56) + 16))(*(_QWORD *)(v16 + 56), v30, &v27) == -1)
    {
      if (quasar::gLogLevel >= 5)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v37 = 0u;
        v35 = 0u;
        v36 = 0u;
        *(_OWORD *)__p = 0u;
        v34 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"alt-gen", 7);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v11 = 0xFFFFFFFFLL;
      goto LABEL_47;
    }
    memset(&v26, 0, sizeof(v26));
    std::string::basic_string[abi:ne180100]<0>(__p, "post-alt-gen");
    v18 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(v7, (const void **)__p);
    if (SBYTE7(v34) < 0)
      operator delete(__p[0]);
    if (v9 == v18)
    {
      std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v26, v26.__end_, v27, (__int128 *)v28, 0xAAAAAAAAAAAAAAABLL * (((char *)v28 - (char *)v27) >> 3));
    }
    else
    {
      v19 = v27;
      v20 = v28;
      if (v27 != v28)
      {
        v21 = 0;
        while ((*(unsigned int (**)(_QWORD, std::string *, std::vector<std::string> *))(**(_QWORD **)(v18 + 56)
                                                                                                  + 16))(*(_QWORD *)(v18 + 56), v19, &v26) != -1)
        {
          if (++v21 != 0xAAAAAAAAAAAAAAABLL * (((char *)v26.__end_ - (char *)v26.__begin_) >> 3))
            break;
          if (++v19 == v20)
            goto LABEL_40;
        }
        if (quasar::gLogLevel >= 5)
        {
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v37 = 0u;
          v35 = 0u;
          v36 = 0u;
          *(_OWORD *)__p = 0u;
          v34 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to generate enumeration in step = ", 41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"post-alt-gen", 12);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        v11 = 0xFFFFFFFFLL;
        goto LABEL_46;
      }
    }
LABEL_40:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (const void **)a2, a2);
    begin = v26.__begin_;
    for (i = v26.__end_; begin != i; ++begin)
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a3, (uint64_t *)(a3 + 8), (const void **)&begin->__r_.__value_.__l.__data_, (uint64_t)begin);
    v11 = *(unsigned int *)(a3 + 16);
LABEL_46:
    __p[0] = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_47:
    __p[0] = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_48:
    __p[0] = &v30;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return v11;
  }
  if (quasar::gLogLevel >= 5)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v37 = 0u;
    v35 = 0u;
    v36 = 0u;
    *(_OWORD *)__p = 0u;
    v34 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skip empty input text = ", 24);
    v13 = *(char *)(a2 + 23);
    if (v13 >= 0)
      v14 = a2;
    else
      v14 = *(_QWORD *)a2;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a2 + 23);
    else
      v15 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  return 0xFFFFFFFFLL;
}

void sub_1ADCA7E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  __p = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::addEnumerations(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v5;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  std::string __p;
  std::vector<std::string> v20;
  _BYTE __v[48];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) & 1) == 0)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    memset(__v, 0, sizeof(__v));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__v, "Enumeration is calculated already.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__v);
  }
  v5 = *a2;
  if (*a2 != a2[1])
  {
    memset(&v20, 0, sizeof(v20));
    std::to_string(&__p, *(_DWORD *)(v5 + 48));
    end = v20.__end_;
    if (v20.__end_ >= v20.__end_cap_.__value_)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_ - (char *)v20.__begin_) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) > v9)
        v9 = 0x5555555555555556 * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v20.__end_cap_.__value_ - (char *)v20.__begin_) >> 3) >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      *(_QWORD *)&__v[32] = &v20.__end_cap_;
      if (v10)
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v20.__end_cap_, v10);
      else
        v11 = 0;
      v12 = &v11[24 * v8];
      *(_QWORD *)__v = v11;
      *(_QWORD *)&__v[8] = v12;
      *(_QWORD *)&__v[24] = &v11[24 * v10];
      v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v12 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v12 = v13;
      memset(&__p, 0, sizeof(__p));
      *(_QWORD *)&__v[16] = v12 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(&v20, (std::__split_buffer<std::string> *)__v);
      v14 = v20.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      v20.__end_ = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v20.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      v20.__end_ = end + 1;
    }
    v15 = *a2;
    v16 = a2[1];
    if (*a2 != v16)
    {
      v17 = v20.__end_;
      do
      {
        if (v17 >= v20.__end_cap_.__value_)
        {
          v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v20, (__int128 *)v15);
        }
        else
        {
          if (*(char *)(v15 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v15, *(_QWORD *)(v15 + 8));
          }
          else
          {
            v18 = *(_OWORD *)v15;
            v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 16);
            *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v18;
          }
          ++v17;
        }
        v20.__end_ = v17;
        v15 += 80;
      }
      while (v15 != v16);
    }
    std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::__emplace_unique_key_args<std::vector<std::string>,std::vector<std::string> const&>(a3, &v20, (__int128 **)&v20);
    *(_QWORD *)__v = &v20;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__v);
  }
}

void sub_1ADCA8170(void *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, char a7, uint64_t a8, void *__pa, std::__split_buffer<std::wstring> *a10)
{
  __break(1u);
}

void sub_1ADCA81AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  a9 = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::RegexEnumerator::~RegexEnumerator(quasar::RegexEnumerator *this)
{
  quasar::RegexEnumerator::~RegexEnumerator(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &off_1E5D35BD0;
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 80, *((_QWORD **)this + 11));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  quasar::NameEnumerator::~NameEnumerator((void **)this);
}

uint64_t quasar::RegexEnumerator::isCalculatedInQuasar(quasar::RegexEnumerator *this)
{
  return 0;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,quasar::ReplaceStep&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<quasar::ReplaceStep&,std::allocator<quasar::ReplaceStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCA82A4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<quasar::ReplaceStep&,std::allocator<quasar::ReplaceStep>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42608;
  a1[1] = 0;
  std::allocator<quasar::ReplaceStep>::construct[abi:ne180100]<quasar::ReplaceStep,quasar::ReplaceStep&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCA8304(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ReplaceStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42608;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ReplaceStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42608;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ReplaceStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

char *std::allocator<quasar::ReplaceStep>::construct[abi:ne180100]<quasar::ReplaceStep,quasar::ReplaceStep&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  char *result;

  *(_QWORD *)a2 = off_1E5D3BFC8;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a2 = &off_1E5D34948;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  result = std::vector<std::shared_ptr<quasar::ReplaceStep::RegexRule>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>((char *)(a2 + 32), *(_QWORD **)(a3 + 32), *(_QWORD **)(a3 + 40), (uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 4);
  *(_WORD *)(a2 + 56) = *(_WORD *)(a3 + 56);
  return result;
}

void sub_1ADCA8400(_Unwind_Exception *a1)
{
  void **v1;

  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<quasar::ReplaceStep::RegexRule>>::__init_with_size[abi:ne180100]<std::shared_ptr<quasar::ReplaceStep::RegexRule>*,std::shared_ptr<quasar::ReplaceStep::RegexRule>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1ADCA84A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,quasar::SplitStep&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<quasar::SplitStep&,std::allocator<quasar::SplitStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCA84F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<quasar::SplitStep&,std::allocator<quasar::SplitStep>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D45430;
  a1[1] = 0;
  std::allocator<quasar::SplitStep>::construct[abi:ne180100]<quasar::SplitStep,quasar::SplitStep&>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCA8558(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SplitStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45430;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SplitStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45430;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SplitStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::string *std::allocator<quasar::SplitStep>::construct[abi:ne180100]<quasar::SplitStep,quasar::SplitStep&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;
  std::string *result;
  uint64_t v8;

  *(_QWORD *)a2 = off_1E5D3BFC8;
  v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_QWORD *)a2 = &off_1E5D3C020;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *(__int128 **)(a3 + 32), *(__int128 **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  v8 = *(_QWORD *)(a3 + 56);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a3 + 64);
  *(_QWORD *)(a2 + 56) = v8;
  return result;
}

void sub_1ADCA8668(_Unwind_Exception *a1)
{
  void **v1;

  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,quasar::WholeStringStep&,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<quasar::WholeStringStep&,std::allocator<quasar::WholeStringStep>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCA86C0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<quasar::WholeStringStep&,std::allocator<quasar::WholeStringStep>,0>(_QWORD *a1, uint64_t a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D42DB0;
  a1[1] = 0;
  std::allocator<quasar::WholeStringStep>::construct[abi:ne180100]<quasar::WholeStringStep,quasar::WholeStringStep&>((uint64_t)&v4, a1 + 3, a2);
  return a1;
}

void sub_1ADCA8720(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WholeStringStep>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42DB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WholeStringStep>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42DB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WholeStringStep>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::allocator<quasar::WholeStringStep>::construct[abi:ne180100]<quasar::WholeStringStep,quasar::WholeStringStep&>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string *v5;
  __int128 v6;

  *a2 = off_1E5D3BFC8;
  v5 = (std::string *)(a2 + 1);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(_QWORD *)(a3 + 16));
  }
  else
  {
    v6 = *(_OWORD *)(a3 + 8);
    a2[3] = *(_QWORD *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *a2 = &off_1E5D35C10;
  return std::unordered_map<std::string,std::string>::unordered_map((uint64_t)(a2 + 4), a3 + 32);
}

void sub_1ADCA8804(_Unwind_Exception *a1)
{
  void **v1;

  quasar::RegexStep::~RegexStep(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ReplaceStep,std::allocator<quasar::ReplaceStep>,std::string const&,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ReplaceStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADCA8864(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ReplaceStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::ReplaceStep>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42608;
  a1[1] = 0;
  quasar::ReplaceStep::ReplaceStep(a1 + 3);
  return a1;
}

void sub_1ADCA88B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SplitStep,std::allocator<quasar::SplitStep>,std::string const&,quasar::PTree const&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SplitStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADCA8910(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SplitStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::allocator<quasar::SplitStep>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45430;
  a1[1] = 0;
  quasar::SplitStep::SplitStep(a1 + 3);
  return a1;
}

void sub_1ADCA895C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WholeStringStep,std::allocator<quasar::WholeStringStep>,std::string const&,quasar::PTree const&,std::string&,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::string&,std::allocator<quasar::WholeStringStep>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADCA89CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WholeStringStep>::__shared_ptr_emplace[abi:ne180100]<std::string const&,quasar::PTree const&,std::string&,std::allocator<quasar::WholeStringStep>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42DB0;
  a1[1] = 0;
  quasar::WholeStringStep::WholeStringStep(a1 + 3);
  return a1;
}

void sub_1ADCA8A18(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void NBestHyp::NBestHyp(NBestHyp *this)
{
  *((_QWORD *)this + 9) = 0;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 28) = 0u;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  *((_DWORD *)this + 16) = 0;
}

void NBestWordInfo::~NBestWordInfo(NBestWordInfo *this)
{
  void *v2;
  void *v3;

  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
    free(v2);
  v3 = (void *)*((_QWORD *)this + 4);
  if (v3)
    free(v3);
}

uint64_t NBestWordInfo::operator=(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char *v6;
  char *v7;

  if (a2 != a1)
  {
    v4 = *(void **)(a1 + 24);
    if (v4)
      free(v4);
    v5 = *(void **)(a1 + 32);
    if (v5)
      free(v5);
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_OWORD *)(a1 + 4) = *(_OWORD *)(a2 + 4);
    v6 = *(char **)(a2 + 24);
    if (v6)
      v6 = strdup(v6);
    *(_QWORD *)(a1 + 24) = v6;
    v7 = *(char **)(a2 + 32);
    if (v7)
      v7 = strdup(v7);
    *(_QWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  return a1;
}

void NBestHyp::~NBestHyp(NBestHyp *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)this;
  if (v2)
    MEMORY[0x1AF44D160](v2, 0x1000C8052888210);
  v3 = *((_QWORD *)this + 1);
  if (v3)
  {
    v4 = v3 - 16;
    v5 = *(_QWORD *)(v3 - 8);
    if (v5)
    {
      v6 = v3 - 56;
      v7 = 56 * v5;
      do
      {
        NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v6 + v7));
        v7 -= 56;
      }
      while (v7);
    }
    MEMORY[0x1AF44D160](v4, 0x1010C8070205E2DLL);
  }
  v8 = *((_QWORD *)this + 9);
  if (v8)
    MEMORY[0x1AF44D190](v8, 0x1000C4000313F17);
}

uint64_t NBestHyp::parse(NBestHyp *this, Vocab *a2, Vocab *a3, int a4, double a5, const char *a6, int a7)
{
  void **v14;
  const char **v15;
  void **v16;
  char ***v17;
  char **v18;
  char **v19;
  char ***v20;
  int v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *const *v27;
  float v28;
  float v29;
  char *v30;
  int v31;
  int v32;
  char *v33;
  uint64_t v34;
  int v35;
  char *v36;
  int v37;
  unsigned int v38;
  int v39;
  char *i;
  char *v41;
  _BYTE *v42;
  uint64_t v43;
  unsigned int *v44;
  int v45;
  uint64_t v46;
  unsigned int *v47;
  int v48;
  double v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  uint64_t v53;
  const char **v55;
  const char *v56;
  const char *const *v57;
  float v58;
  _QWORD *v59;
  size_t v60;
  _QWORD *v61;
  const std::locale::facet *v62;
  _QWORD *v63;
  _QWORD *v64;
  size_t v65;
  _QWORD *v66;
  const std::locale::facet *v67;
  _QWORD *v68;
  double v69;
  uint64_t v70;
  unsigned int *v71;
  int v72;
  _QWORD *v73;
  size_t v74;
  _QWORD *v75;
  _QWORD *v76;
  size_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  unsigned int v87;
  uint64_t v88;
  const char **v89;
  float v90;
  float v91;
  char *v92;
  double v93;
  double v94;
  char *v95;
  BOOL v96;
  float v97;
  float v98;
  int v99;
  int v100;
  float v101;
  int v102;
  float v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  char *v108;
  float v109;
  float v110;
  float v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  int v119;
  double v120;
  _QWORD v121[2];
  int v122;
  char __str[4];
  float v124;
  float v125;
  float v126;
  float v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char __s1[8];
  std::locale v133;
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  v14 = (void **)wstringsTLS();
  v15 = (const char **)*v14;
  if (!*v14)
  {
    v16 = v14;
    v15 = (const char **)malloc_type_calloc(0x86474uLL, 8uLL, 0x50040EE9192B6uLL);
    *v16 = v15;
  }
  v17 = (char ***)justWordsTLS();
  v19 = *v17;
  if (!*v17)
  {
    v20 = v17;
    v19 = (char **)malloc_type_calloc(0x86475uLL, 8uLL, 0x50040EE9192B6uLL);
    *v20 = v19;
  }
  v121[0] = 0;
  v121[1] = 0;
  v122 = 0;
  v21 = Vocab::parseWords(a2, (char *)v15, (const char **)0x86474, v18);
  if (v21 != 550004)
  {
    if (a7)
      v25 = 0;
    else
      v25 = a6;
    if (a4 != 2)
    {
      if (a4 == 1 || !a4 && **v15 == 40)
      {
        v26 = (v21 - 1);
        if (v26 <= 0xC350)
        {
          *(double *)__s1 = 0.0;
          if (sscanf(*v15, "(%lf)", __s1) != 1)
          {
            v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"bad Decipher score: ", 20);
            v60 = strlen(*v15);
            v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)*v15, v60);
            std::ios_base::getloc((const std::ios_base *)((char *)v61 + *(_QWORD *)(*v61 - 24)));
            v62 = std::locale::use_facet(&v133, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v62->__vftable[2].~facet_0)(v62, 10);
            std::locale::~locale(&v133);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_44;
          }
          v28 = *(double *)__s1 * 0.0444695315;
          *((double *)this + 2) = v28;
          *((float *)this + 10) = v28;
          *((_QWORD *)this + 3) = 0;
          *((_QWORD *)this + 4) = v26;
          Vocab::copy((uint64_t)v19, v15 + 1, v27);
          a7 = 0;
LABEL_17:
          *((double *)this + 2) = *((double *)this + 2) - a5;
          v29 = *((float *)this + 10) - a5;
          *((float *)this + 10) = v29;
          if (v25)
          {
            v30 = *v19;
            if (*v19)
            {
              v31 = 0;
              v32 = *v25;
              do
              {
                while (1)
                {
                  v33 = strchr(v30, v32);
                  if (!v33)
                    break;
                  LODWORD(v26) = v26 + 1;
                  v30 = v33 + 1;
                }
                v30 = v19[++v31];
              }
              while (v30);
            }
          }
          if (*(_QWORD *)this)
            MEMORY[0x1AF44D160](*(_QWORD *)this, 0x1000C8052888210);
          v34 = (v26 + 1);
          *(_QWORD *)this = operator new[]();
          v35 = *(unsigned __int8 *)(*(uint64_t (**)(Vocab *))(*(_QWORD *)a3 + 152))(a3);
          if (v25)
          {
            v36 = *v19;
            if (*v19)
            {
              v37 = 0;
              v38 = 0;
              do
              {
                v39 = *v25;
                for (i = v36; ; i = v42 + 1)
                {
                  v41 = strchr(i, v39);
                  v42 = v41;
                  if (!v41)
                    break;
                  *v41 = 0;
                  v43 = *(_QWORD *)a3;
                  if (v35)
                  {
                    v44 = (unsigned int *)(*(uint64_t (**)(Vocab *))(v43 + 88))(a3);
                    v45 = (*(uint64_t (**)(Vocab *, char *, _QWORD))(*(_QWORD *)a3 + 40))(a3, v36, *v44);
                  }
                  else
                  {
                    v45 = (*(uint64_t (**)(Vocab *, char *))(v43 + 16))(a3, v36);
                  }
                  *(_DWORD *)(*(_QWORD *)this + 4 * v38++) = v45;
                  *v42 = *v25;
                  v36 = v42 + 1;
                  v39 = *v25;
                }
                v46 = *(_QWORD *)a3;
                if (v35)
                {
                  v47 = (unsigned int *)(*(uint64_t (**)(Vocab *))(v46 + 88))(a3);
                  v48 = (*(uint64_t (**)(Vocab *, char *, _QWORD))(*(_QWORD *)a3 + 40))(a3, v36, *v47);
                }
                else
                {
                  v48 = (*(uint64_t (**)(Vocab *, char *))(v46 + 16))(a3, v36);
                }
                v49 = *(double *)this;
                v50 = v38 + 1;
                *(_DWORD *)(*(_QWORD *)this + 4 * v38) = v48;
                v36 = v19[++v37];
                ++v38;
              }
              while (v36);
            }
            else
            {
              v50 = 0;
              v49 = *(double *)this;
            }
            *(_DWORD *)(*(_QWORD *)&v49 + 4 * v50) = -1;
            goto LABEL_118;
          }
          v69 = *(double *)this;
          v70 = *(_QWORD *)a3;
          if (v35)
          {
            v71 = (unsigned int *)(*(uint64_t (**)(Vocab *))(v70 + 88))(a3);
            (*(void (**)(Vocab *, char **, double, _QWORD, _QWORD))(*(_QWORD *)a3 + 272))(a3, v19, COERCE_DOUBLE(*(_QWORD *)&v69), (v26 + 1), *v71);
          }
          else
          {
            (*(void (**)(Vocab *, char **, _QWORD, _QWORD))(v70 + 256))(a3, v19, *(_QWORD *)this, (v26 + 1));
          }
          if (a4 != 2 || !a7)
          {
            *((_QWORD *)this + 1) = 0;
LABEL_118:
            v53 = 1;
            goto LABEL_45;
          }
          v79 = *((_QWORD *)this + 1);
          if (v79)
          {
            v80 = v79 - 16;
            v81 = *(_QWORD *)(v79 - 8);
            if (v81)
            {
              v82 = v79 - 56;
              v83 = 56 * v81;
              do
              {
                NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v82 + v83));
                v83 -= 56;
              }
              while (v83);
            }
            MEMORY[0x1AF44D160](v80, 0x1010C8070205E2DLL);
          }
          v84 = (_QWORD *)operator new[]();
          *v84 = 56;
          v84[1] = v34;
          v85 = v84 + 2;
          if ((_DWORD)v26 == -1)
          {
            *((_QWORD *)this + 1) = v85;
          }
          else
          {
            v86 = v84 + 2;
            do
            {
              *(_DWORD *)v86 = -1;
              *(_OWORD *)(v86 + 3) = 0uLL;
              *(_OWORD *)(v86 + 5) = 0uLL;
              *((_DWORD *)v86 + 2) = 2139095040;
              v86 += 7;
            }
            while (v86 != &v85[7 * v34]);
            *((_QWORD *)this + 1) = v85;
            if (!(_DWORD)v26)
            {
              v87 = 0;
LABEL_117:
              LODWORD(v85[7 * v87]) = -1;
              goto LABEL_118;
            }
          }
          v112 = 0;
          v113 = 0;
          v87 = v26;
          do
          {
            v114 = Array<NBestWordInfo>::operator[]((int *)v121, v113);
            NBestWordInfo::operator=(*((_QWORD *)this + 1) + v112 * 8, v114);
            v85 = (_QWORD *)*((_QWORD *)this + 1);
            LODWORD(v85[v112]) = *(_DWORD *)(*(_QWORD *)this + 4 * v113++);
            v112 += 7;
          }
          while (v26 != v113);
          goto LABEL_117;
        }
      }
      else
      {
        LODWORD(v26) = v21 - 3;
        if ((v21 - 3) < 0xC351)
        {
          if (!parseLogP(*v15, (double *)this + 2))
          {
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"bad acoustic score: ", 20);
            v65 = strlen(*v15);
            v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)*v15, v65);
            std::ios_base::getloc((const std::ios_base *)((char *)v66 + *(_QWORD *)(*v66 - 24)));
            v67 = std::locale::use_facet(&v133, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v67->__vftable[2].~facet_0)(v67, 10);
            std::locale::~locale(&v133);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_44;
          }
          v55 = v15 + 1;
          if (parseLogP(v15[1], (double *)this + 3))
          {
            v55 = v15 + 2;
            v56 = v15[2];
            if (*v56 != 45 && sscanf(v56, "%lu", (char *)this + 32) == 1)
            {
              v58 = *((double *)this + 2);
              *((float *)this + 10) = v58;
              Vocab::copy((uint64_t)v19, v15 + 3, v57);
              goto LABEL_17;
            }
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"bad word count: ", 16);
          }
          else
          {
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"bad LM score: ", 14);
          }
          v73 = v68;
          v74 = strlen(*v55);
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)*v55, v74);
          std::endl[abi:ne180100]<char,std::char_traits<char>>(v75);
          goto LABEL_44;
        }
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"more than ", 10);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = " words in hyp\n";
      v24 = 14;
      goto LABEL_43;
    }
    v51 = v21 - 1;
    v52 = (v21 - 1) / 0xBu;
    if ((v21 - 1) % 0xBu)
    {
      v23 = "badly formatted hyp\n";
      v22 = (_QWORD *)MEMORY[0x1E0DE4A50];
      v24 = 20;
      goto LABEL_43;
    }
    if (v51 > 0x8647A)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"more than ", 10);
      v63 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" tokens in hyp\n", 15);
      goto LABEL_44;
    }
    v120 = 0.0;
    if (sscanf(*v15, "(%lf)", &v120) != 1)
    {
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"bad Decipher score: ", 20);
      v77 = strlen(*v15);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)*v15, v77);
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v78);
      goto LABEL_44;
    }
    if (v51 < 0xB)
    {
      LODWORD(v26) = 0;
      v117 = 0;
      v72 = 0;
      v118 = 0;
LABEL_109:
      if (a7 && v118 && LOBYTE(v133.__locale_))
      {
        *(_QWORD *)(v118 + 24) = strdup((const char *)&v133);
        *(_QWORD *)(v118 + 32) = strdup(__s1);
      }
      v19[v26] = 0;
      v109 = v120 * 0.0444695315;
      *((float *)this + 10) = v109;
      v110 = (double)v117 * 0.0444695315;
      v111 = (double)v72 * 0.0444695315;
      *((double *)this + 2) = v110;
      *((double *)this + 3) = v111;
      *((_QWORD *)this + 4) = v26;
      goto LABEL_17;
    }
    v118 = 0;
    v117 = 0;
    LODWORD(v26) = 0;
    if (v52 <= 1)
      v88 = 1;
    else
      v88 = v52;
    v72 = 0;
    v89 = v15 + 6;
    v90 = -1.0;
    v91 = 0.0;
    v116 = a7;
    while (1)
    {
      v92 = (char *)*(v89 - 5);
      v93 = atof(*(v89 - 2));
      v94 = atof(*v89);
      v95 = strrchr(v92, 45);
      v96 = v95 && v95[1] - 48 <= 9 && v95[2] == 0;
      v97 = v93;
      v98 = v94;
      if (v90 >= v97 || v96)
      {
        if (!v96)
        {
          if (v118)
          {
            v115 = v72;
            v105 = strchr(v92, 91);
            if (v105)
              v106 = v105 + 1;
            else
              v106 = v92;
            v107 = strrchr(v106, 93);
            if (v107)
              *v107 = 0;
            v108 = strrchr(v106, 95);
            if (v108)
              *v108 = 0;
            addPhones((char *)&v133, v106, v91 > v97);
            snprintf(__str, 0x14uLL, "%d", (int)((float)((float)(v98 - v97) / 0.01) + 0.5) + 1);
            addPhones(__s1, __str, v91 > v97);
            v98 = v90;
            v91 = v97;
            v72 = v115;
            a7 = v116;
            goto LABEL_108;
          }
          v118 = 0;
        }
        v98 = v90;
        a7 = v116;
      }
      else
      {
        v119 = atol(v89[4]);
        v99 = atol(v89[2]);
        v19[v26] = v92;
        a7 = v116;
        if (v116)
        {
          if (v118 && LOBYTE(v133.__locale_))
          {
            v100 = v99;
            *(_QWORD *)(v118 + 24) = strdup((const char *)&v133);
            *(_QWORD *)(v118 + 32) = strdup(__s1);
            v99 = v100;
          }
          v130 = 0;
          v131 = 0;
          *(_DWORD *)__str = -1;
          v124 = v97;
          v125 = (float)(v98 - v97) + 0.01;
          v101 = (double)v119 * 0.0444695315;
          v102 = v99;
          v103 = (double)v99 * 0.0444695315;
          v126 = v101;
          v127 = v103;
          v128 = 0;
          v129 = 0;
          v104 = Array<NBestWordInfo>::operator[]((int *)v121, v26);
          NBestWordInfo::operator=(v104, (uint64_t)__str);
          v118 = Array<NBestWordInfo>::operator[]((int *)v121, v26);
          __s1[0] = 0;
          LOBYTE(v133.__locale_) = 0;
          NBestWordInfo::~NBestWordInfo((NBestWordInfo *)__str);
          v99 = v102;
          a4 = 2;
        }
        v117 += v119;
        v72 += v99;
        LODWORD(v26) = v26 + 1;
      }
LABEL_108:
      v89 += 11;
      v90 = v98;
      if (!--v88)
        goto LABEL_109;
    }
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"more than ", 10);
  v22 = (_QWORD *)std::ostream::operator<<();
  v23 = " fields per line\n";
  v24 = 17;
LABEL_43:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
LABEL_44:
  v53 = 0;
LABEL_45:
  Array<NBestWordInfo>::~Array((uint64_t)v121);
  return v53;
}

void sub_1ADCA9748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,std::locale a42)
{
  Array<NBestWordInfo>::~Array((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t addPhones(char *a1, const char *a2, int a3)
{
  int v6;
  uint64_t result;
  int v8;
  size_t v9;
  char *v10;

  v6 = strlen(a1);
  result = strlen(a2);
  v8 = result;
  v9 = (v6 + 1);
  if ((result + v9 - 101) >= 0xFFFFFF9A)
  {
    if (a3)
    {
      if (v6)
      {
        memmove(&a1[(result + 1)], a1, v9);
        result = (uint64_t)strcpy(a1, a2);
        a1[v8] = *phoneSeparator[0];
        return result;
      }
      v10 = a1;
    }
    else
    {
      if (v6)
        a1[v6] = *phoneSeparator[0];
      else
        v9 = 0;
      v10 = &a1[v9];
    }
    return (uint64_t)strcpy(v10, a2);
  }
  return result;
}

void NBestHyp::freeThread(NBestHyp *this)
{
  void **v1;
  void **v2;
  void **TimeSentStartFlagTLS;

  v1 = (void **)wstringsTLS();
  if (*v1)
  {
    free(*v1);
    *v1 = 0;
  }
  v2 = (void **)justWordsTLS();
  if (*v2)
  {
    free(*v2);
    *v2 = 0;
  }
  TimeSentStartFlagTLS = (void **)firstTimeSentStartFlagTLS();
  if (*TimeSentStartFlagTLS)
  {
    free(*TimeSentStartFlagTLS);
    *TimeSentStartFlagTLS = 0;
  }
}

float NBestHyp::rescore(NBestHyp *this, LM *a2, double a3, double a4)
{
  double v8;
  double v9;
  _QWORD *v10;
  _QWORD *v11;
  const std::locale::facet *v12;
  _QWORD *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  float result;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::locale v24;

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v8 = (*(float (**)(LM *, _QWORD, __int128 *))(*(_QWORD *)a2 + 80))(a2, *(_QWORD *)this, &v17) * a3;
  if (a3 == 0.0)
    v8 = 0.0;
  *((double *)this + 3) = v8;
  v9 = *((double *)&v17 + 1);
  *((_QWORD *)this + 4) = (unint64_t)*((double *)&v18 + 1);
  if (v9 > 0.0)
  {
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: hyp contains zero prob words: ", 39);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 3) + 328))(*((_QWORD *)a2 + 3));
    v11 = operator<<(v10, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v11 + *(_QWORD *)(*v11 - 24)));
    v12 = std::locale::use_facet(&v24, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  if (*(double *)&v19 > 0.0)
  {
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: hyp contains OOV words: ", 33);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 3) + 328))(*((_QWORD *)a2 + 3));
    v14 = operator<<(v13, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
    v15 = std::locale::use_facet(&v24, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
    std::locale::~locale(&v24);
    std::ostream::put();
    std::ostream::flush();
  }
  result = *((double *)this + 2) + *((double *)this + 3) + a4 * (double)*((unint64_t *)this + 4);
  *((float *)this + 10) = result;
  return result;
}

void sub_1ADCA9AD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 56));
  _Unwind_Resume(a1);
}

double NBestHyp::decipherFix(NBestHyp *this, LM *a2, double a3, double a4)
{
  const unsigned int *v8;
  double v9;
  unsigned int v10;
  _QWORD *v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  double v17;
  double result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::locale v26;

  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  v9 = (*(float (**)(LM *, _QWORD, __int128 *))(*(_QWORD *)a2 + 80))(a2, *(_QWORD *)this, &v19) * a3;
  if (a3 == 0.0)
    v9 = 0.0;
  *((double *)this + 3) = v9;
  *((_QWORD *)this + 4) = (unint64_t)*((double *)&v20 + 1);
  v10 = Vocab::length(*(_QWORD *)this, v8);
  if (*((double *)&v19 + 1) > 0.0)
  {
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: hyp contains zero prob words: ", 39);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 3) + 328))(*((_QWORD *)a2 + 3));
    v12 = operator<<(v11, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
    v13 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
    *((double *)this + 3) = -INFINITY;
  }
  if (*(double *)&v21 <= 0.0)
  {
    v17 = *((double *)this + 3);
  }
  else
  {
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"warning: hyp contains OOV words: ", 33);
    (*(void (**)(_QWORD))(**((_QWORD **)a2 + 3) + 328))(*((_QWORD *)a2 + 3));
    v15 = operator<<(v14, *(_DWORD **)this);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v26, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v26);
    std::ostream::put();
    std::ostream::flush();
    v17 = -INFINITY;
    *((double *)this + 3) = -INFINITY;
  }
  result = *((float *)this + 10) - v17 - a4 * (double)v10;
  *((double *)this + 2) = result;
  return result;
}

void sub_1ADCA9D10(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::locale::~locale((std::locale *)(v1 - 72));
  _Unwind_Resume(a1);
}

void Array<NBestWordInfo>::alloc(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = (a2 + (*(_DWORD *)(a1 + 16) >> 1) + 1);
  v6 = (_QWORD *)operator new[]();
  *v6 = 56;
  v6[1] = v5;
  v7 = v6 + 2;
  if ((_DWORD)v5)
  {
    v8 = v6 + 2;
    do
    {
      *(_DWORD *)v8 = -1;
      *(_OWORD *)(v8 + 3) = 0uLL;
      *(_OWORD *)(v8 + 5) = 0uLL;
      *((_DWORD *)v8 + 2) = 2139095040;
      v8 += 7;
    }
    while (v8 != &v7[7 * v5]);
  }
  if (a3)
    bzero(v6 + 2, 56 * v5);
  if (*(_DWORD *)(a1 + 16))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      NBestWordInfo::operator=((uint64_t)&v7[v9], *(_QWORD *)(a1 + 8) + v9 * 8);
      ++v10;
      v9 += 7;
    }
    while (v10 < *(unsigned int *)(a1 + 16));
  }
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = v11 - 16;
    v13 = *(_QWORD *)(v11 - 8);
    if (v13)
    {
      v14 = v11 - 56;
      v15 = 56 * v13;
      do
      {
        NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v14 + v15));
        v15 -= 56;
      }
      while (v15);
    }
    MEMORY[0x1AF44D160](v12, 0x1010C8070205E2DLL);
  }
  *(_QWORD *)(a1 + 8) = v7;
  *(_DWORD *)(a1 + 16) = v5;
}

uint64_t Array<NBestWordInfo>::~Array(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = v2 - 16;
    v4 = *(_QWORD *)(v2 - 8);
    if (v4)
    {
      v5 = v2 - 56;
      v6 = 56 * v4;
      do
      {
        NBestWordInfo::~NBestWordInfo((NBestWordInfo *)(v5 + v6));
        v6 -= 56;
      }
      while (v6);
    }
    MEMORY[0x1AF44D160](v3, 0x1010C8070205E2DLL);
  }
  return a1;
}

uint64_t Array<NBestWordInfo>::operator[](int *a1, uint64_t a2)
{
  unint64_t v3;

  v3 = a2 - *a1;
  if (v3 >= a1[1])
  {
    a1[1] = v3 + 1;
    if (v3 >= a1[4])
      Array<NBestWordInfo>::alloc((uint64_t)a1, v3, 0);
  }
  return *((_QWORD *)a1 + 1) + 56 * v3;
}

uint64_t quasar::QuasarTextProcImpl::QuasarTextProcImpl(uint64_t a1, const std::string *a2, uint64_t a3, uint64_t a4)
{
  uint64_t Ptree;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  size_t size;
  const std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::string *v18;
  const std::string *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  std::string *v23;
  __int128 v24;
  const std::string::value_type *v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  __int128 v29;
  quasar::PTree *Child;
  uint64_t v31;
  uint64_t v32;
  const std::string *String;
  std::string *v34;
  __int128 v35;
  std::string *v36;
  const std::string *v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  uint64_t v41;
  std::string *v42;
  kaldi::Input *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  std::string::size_type v53;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  int v58;
  int v59;
  _QWORD *v61;
  _QWORD *v62;
  std::string::size_type v63;
  std::string::size_type v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t v67;
  std::string::size_type *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  uint64_t v75;
  std::string::size_type *v76;
  _QWORD *v77;
  _QWORD *v78;
  char *v79;
  __int128 v80;
  int64x2_t v81;
  void *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  _QWORD *v87;
  char *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t p_size;
  uint64_t v93;
  _QWORD *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  std::string v102;
  int v103;
  std::string v104;
  __int128 v105;
  __int128 __n;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *__p[4];
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  char v127[8];
  std::string v128;
  int v129;
  std::string v130;
  std::string v131;
  char v132;
  std::string *v133;
  std::string *v134;
  unint64_t v135;
  std::string v136;

  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  std::string::operator=((std::string *)(a1 + 24), a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion(a3, 10, 0, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  memset(&v136, 0, sizeof(v136));
  v133 = 0;
  v134 = 0;
  v135 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  Ptree = quasar::SystemConfig::getPtree(a3, (uint64_t)__p);
  v129 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v130, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v9 = *(_OWORD *)(Ptree + 8);
    v130.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v130.__r_.__value_.__l.__data_ = v9;
  }
  memset(&v131, 0, sizeof(v131));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v131, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v132 = *(_BYTE *)(Ptree + 56);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v10 = quasar::PTree::begin((quasar::PTree *)&v129);
  v11 = quasar::PTree::end((quasar::PTree *)&v129);
  if (v10 == v11)
    goto LABEL_72;
  v12 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if ((v12 & 0x80u) == 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if ((v12 & 0x80u) == 0)
    v14 = a2;
  else
    v14 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  while (1)
  {
    v15 = *(unsigned __int8 *)(v10 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = *(unsigned __int8 *)(v10 + 23);
    else
      v16 = *(_QWORD *)(v10 + 8);
    if (v16 != size)
      goto LABEL_26;
    if ((v15 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v10 + 23))
      goto LABEL_28;
    v17 = 0;
    while (*(unsigned __int8 *)(v10 + v17) == v14->__r_.__value_.__s.__data_[v17])
    {
      if (v15 == ++v17)
        goto LABEL_28;
    }
LABEL_26:
    v10 += 88;
    if (v10 == v11)
      goto LABEL_72;
  }
  if (memcmp(*(const void **)v10, v14, *(_QWORD *)(v10 + 8)))
    goto LABEL_26;
LABEL_28:
  v18 = &v128;
  std::string::basic_string[abi:ne180100]((uint64_t)&v128, size + 1);
  if ((v128.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = (std::string *)v128.__r_.__value_.__r.__words[0];
  if (size)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v19 = a2;
    else
      v19 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    memmove(v18, v19, size);
  }
  *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + size) = 46;
  v20 = *(char *)(a4 + 23);
  if (v20 >= 0)
    v21 = (const std::string::value_type *)a4;
  else
    v21 = *(const std::string::value_type **)a4;
  if (v20 >= 0)
    v22 = *(unsigned __int8 *)(a4 + 23);
  else
    v22 = *(_QWORD *)(a4 + 8);
  v23 = std::string::append(&v128, v21, v22);
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v102.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_45;
LABEL_43:
    v25 = ".";
  }
  else
  {
    if (*(_BYTE *)(a4 + 23))
      goto LABEL_43;
LABEL_45:
    v25 = "";
  }
  v26 = std::string::append(&v102, v25);
  v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
  v104.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v27;
  v26->__r_.__value_.__l.__size_ = 0;
  v26->__r_.__value_.__r.__words[2] = 0;
  v26->__r_.__value_.__r.__words[0] = 0;
  v28 = std::string::append(&v104, "rule-fst");
  v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  __p[2] = (void *)v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v102.__r_.__value_.__l.__data_);
  if (SHIBYTE(v128.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v128.__r_.__value_.__l.__data_);
  Child = (quasar::PTree *)quasar::PTree::getChild((uint64_t)&v129, (__int128 *)__p);
  v31 = quasar::PTree::begin(Child);
  v32 = quasar::PTree::end(Child);
  if (v31 == v32)
  {
    v36 = v134;
  }
  else
  {
    do
    {
      String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v31 + 24));
      std::string::operator=(&v136, String);
      v34 = v134;
      if ((unint64_t)v134 >= v135)
      {
        v36 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (__int128 *)&v136);
      }
      else
      {
        if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v134, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
        }
        else
        {
          v35 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
          v134->__r_.__value_.__r.__words[2] = v136.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
        }
        v36 = v34 + 1;
      }
      v134 = v36;
      v31 += 88;
    }
    while (v31 != v32);
  }
  if (v36 == v133)
  {
    v37 = (const std::string *)quasar::PTree::getString((uint64_t)&v129, (__int128 *)__p);
    std::string::operator=(&v136, v37);
    v38 = v134;
    if ((unint64_t)v134 >= v135)
    {
      v40 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (__int128 *)&v136);
    }
    else
    {
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v134, v136.__r_.__value_.__l.__data_, v136.__r_.__value_.__l.__size_);
      }
      else
      {
        v39 = *(_OWORD *)&v136.__r_.__value_.__l.__data_;
        v134->__r_.__value_.__r.__words[2] = v136.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38->__r_.__value_.__l.__data_ = v39;
      }
      v40 = v38 + 1;
    }
    v134 = v40;
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
LABEL_72:
  v41 = (uint64_t)v133;
  v42 = v134;
  if (v133 != v134)
  {
    while (2)
    {
      v43 = (kaldi::Input *)kaldi::Input::Input(v127, v41, 0);
      v44 = (_QWORD *)kaldi::Input::Stream(v43);
      if (*(_DWORD *)((char *)v44 + *(_QWORD *)(*v44 - 24) + 32))
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not open decoding-graph FST ", 34);
        v99 = *(char *)(v41 + 23);
        if (v99 >= 0)
          v100 = v41;
        else
          v100 = *(_QWORD *)v41;
        if (v99 >= 0)
          v101 = *(unsigned __int8 *)(v41 + 23);
        else
          v101 = *(_QWORD *)(v41 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, v100, v101);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      __n = 0u;
      v107 = 0u;
      *(_OWORD *)&v104.__r_.__value_.__r.__words[1] = 0u;
      v105 = 0u;
      v108 = -1;
      v109 = 0;
      v110 = 0;
      v45 = kaldi::Input::Stream((kaldi::Input *)v127);
      if ((fst::FstHeader::Read((uint64_t)&v104, v45, v41, 0) & 1) == 0)
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: error reading FST header.", 38);
        v95 = *(char *)(v41 + 23);
        if (v95 >= 0)
          v96 = v41;
        else
          v96 = *(_QWORD *)v41;
        if (v95 >= 0)
          v97 = *(unsigned __int8 *)(v41 + 23);
        else
          v97 = *(_QWORD *)(v41 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, v96, v97);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v46 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
      v47 = HIBYTE(__n);
      if (__n >= 0)
        v48 = HIBYTE(__n);
      else
        v48 = __n;
      v49 = *(unsigned __int8 *)(v46 + 23);
      v50 = (char)v49;
      if ((v49 & 0x80u) != 0)
        v49 = *(_QWORD *)(v46 + 8);
      if (v48 != v49)
        goto LABEL_147;
      if (v50 >= 0)
        v51 = (unsigned __int8 *)v46;
      else
        v51 = *(unsigned __int8 **)v46;
      if ((HIBYTE(__n) & 0x80) != 0)
      {
        if (memcmp(*((const void **)&v105 + 1), v51, __n))
          goto LABEL_147;
      }
      else if (HIBYTE(__n))
      {
        v52 = (unsigned __int8 *)&v105 + 8;
        while (*v52 == *v51)
        {
          ++v52;
          ++v51;
          if (!--v47)
            goto LABEL_91;
        }
LABEL_147:
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v87 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST with arc type ", 18);
        if (__n >= 0)
          v88 = (char *)&v105 + 8;
        else
          v88 = (char *)*((_QWORD *)&v105 + 1);
        if (__n >= 0)
          v89 = HIBYTE(__n);
        else
          v89 = __n;
        v90 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v87, (uint64_t)v88, v89);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v90, (uint64_t)" not supported.\n", 16);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
LABEL_91:
      fst::FstReadOptions::FstReadOptions(&v102, v41, &v104, 0, 0);
      *(_OWORD *)&v128.__r_.__value_.__l.__data_ = 0uLL;
      if ((BYTE7(v105) & 0x80) != 0)
      {
        if (v104.__r_.__value_.__r.__words[2] == 5)
        {
          v53 = v104.__r_.__value_.__l.__size_;
          goto LABEL_108;
        }
        if (v104.__r_.__value_.__r.__words[2] != 6
          || (*(_DWORD *)v104.__r_.__value_.__l.__size_ == 1952671094
            ? (v57 = *(unsigned __int16 *)(v104.__r_.__value_.__l.__size_ + 4) == 29295)
            : (v57 = 0),
              !v57))
        {
LABEL_154:
          v125 = 0u;
          v126 = 0u;
          v123 = 0u;
          v124 = 0u;
          v121 = 0u;
          v122 = 0u;
          v119 = 0u;
          v120 = 0u;
          v117 = 0u;
          v118 = 0u;
          v115 = 0u;
          v116 = 0u;
          v113 = 0u;
          v114 = 0u;
          v112 = 0u;
          memset(__p, 0, sizeof(__p));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v91 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Reading FST: unsupported hammer FST type: ", 42);
          if ((SBYTE7(v105) & 0x80u) == 0)
            p_size = (uint64_t)&v104.__r_.__value_.__l.__size_;
          else
            p_size = v104.__r_.__value_.__l.__size_;
          if ((SBYTE7(v105) & 0x80u) == 0)
            v93 = BYTE7(v105);
          else
            v93 = v104.__r_.__value_.__r.__words[2];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, p_size, v93);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
LABEL_99:
        v103 = 2;
        v55 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v127);
        v56 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(v55, (uint64_t)&v102);
        std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(&v128, (uint64_t)v56);
      }
      else
      {
        v53 = (std::string::size_type)&v104.__r_.__value_.__l.__size_;
        if (BYTE7(v105) != 5)
        {
          if (BYTE7(v105) != 6)
            goto LABEL_154;
          if (LODWORD(v104.__r_.__value_.__r.__words[1]) != 1952671094
            || WORD2(v104.__r_.__value_.__r.__words[1]) != 29295)
          {
            goto LABEL_154;
          }
          goto LABEL_99;
        }
LABEL_108:
        v58 = *(_DWORD *)v53;
        v59 = *(unsigned __int8 *)(v53 + 4);
        if (v58 != 1936617315 || v59 != 116)
          goto LABEL_154;
        v103 = 2;
        v61 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v127);
        v62 = fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(v61, (uint64_t)&v102);
        std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(&v128, (uint64_t)v62);
      }
      v63 = v128.__r_.__value_.__r.__words[0];
      if (!v128.__r_.__value_.__r.__words[0])
      {
        v125 = 0u;
        v126 = 0u;
        v123 = 0u;
        v124 = 0u;
        v121 = 0u;
        v122 = 0u;
        v119 = 0u;
        v120 = 0u;
        v117 = 0u;
        v118 = 0u;
        v115 = 0u;
        v116 = 0u;
        v113 = 0u;
        v114 = 0u;
        v112 = 0u;
        memset(__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error reading FST (after reading header).", 41);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v64 = v128.__r_.__value_.__l.__size_;
      if (v128.__r_.__value_.__l.__size_)
      {
        v65 = (unint64_t *)(v128.__r_.__value_.__l.__size_ + 8);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v68 = *(std::string::size_type **)(a1 + 8);
      v67 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v68 >= v67)
      {
        v70 = ((uint64_t)v68 - *(_QWORD *)a1) >> 4;
        v71 = v70 + 1;
        if ((unint64_t)(v70 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v72 = v67 - *(_QWORD *)a1;
        if (v72 >> 3 > v71)
          v71 = v72 >> 3;
        if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF0)
          v73 = 0xFFFFFFFFFFFFFFFLL;
        else
          v73 = v71;
        *(_QWORD *)&v112 = a1 + 16;
        v74 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 16, v73);
        v76 = (std::string::size_type *)&v74[16 * v70];
        *v76 = v63;
        v76[1] = v64;
        v78 = *(_QWORD **)a1;
        v77 = *(_QWORD **)(a1 + 8);
        if (v77 == *(_QWORD **)a1)
        {
          v81 = vdupq_n_s64((unint64_t)v77);
          v79 = &v74[16 * v70];
        }
        else
        {
          v79 = &v74[16 * v70];
          do
          {
            v80 = *((_OWORD *)v77 - 1);
            v77 -= 2;
            *((_OWORD *)v79 - 1) = v80;
            v79 -= 16;
            *v77 = 0;
            v77[1] = 0;
          }
          while (v77 != v78);
          v81 = *(int64x2_t *)a1;
        }
        v69 = v76 + 2;
        *(_QWORD *)a1 = v79;
        *(_QWORD *)(a1 + 8) = v76 + 2;
        *(int64x2_t *)&__p[1] = v81;
        v82 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = &v74[16 * v75];
        __p[3] = v82;
        __p[0] = (void *)v81.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)__p);
      }
      else
      {
        *v68 = v63;
        v68[1] = v64;
        v69 = v68 + 2;
      }
      *(_QWORD *)(a1 + 8) = v69;
      v83 = (std::__shared_weak_count *)v128.__r_.__value_.__l.__size_;
      if (v128.__r_.__value_.__l.__size_)
      {
        v84 = (unint64_t *)(v128.__r_.__value_.__l.__size_ + 8);
        do
          v85 = __ldaxr(v84);
        while (__stlxr(v85 - 1, v84));
        if (!v85)
        {
          ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
          std::__shared_weak_count::__release_weak(v83);
        }
      }
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (SHIBYTE(__n) < 0)
        operator delete(*((void **)&v105 + 1));
      if (SBYTE7(v105) < 0)
        operator delete((void *)v104.__r_.__value_.__l.__size_);
      kaldi::Input::~Input((kaldi::Input *)v127);
      v41 += 24;
      if ((std::string *)v41 == v42)
        break;
      continue;
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)&v129);
  __p[0] = &v133;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v136.__r_.__value_.__l.__data_);
  return a1;
}

void std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  __int128 v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;

  std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(&v7, a2);
  v3 = (std::__shared_weak_count *)a1[1];
  v4 = v7;
  *(_QWORD *)&v7 = *a1;
  *((_QWORD *)&v7 + 1) = v3;
  *(_OWORD *)a1 = v4;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_QWORD *fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(_QWORD *a1, uint64_t a2)
{
  _QWORD *result;
  _QWORD *v3;

  result = (_QWORD *)fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(a1, a2);
  if (result)
  {
    v3 = result;
    result = (_QWORD *)operator new();
    *result = &unk_1E5D22AC8;
    result[1] = v3;
  }
  return result;
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  char v17;
  void *v18;
  std::string::size_type size;
  int v20;
  std::string *v21;
  uint64_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  _BOOL4 v30;
  unsigned int v32;
  void *__s1[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  std::string v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v51 = 0;
  v52 = 0;
  v53 = 0;
  v6 = quasar::QuasarTextProcImpl::run(a1, a2, &v51, 1, 0, a4);
  v7 = v6;
  if (!(_DWORD)v6)
  {
    v9 = v51;
    v8 = v52;
    if (v52 != v51)
    {
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = *(_QWORD *)(v9 + v10);
        if (v12 != *(_QWORD *)(v9 + v10 + 8))
        {
          v6 = (uint64_t)std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100](a3, v12);
          v9 = v51;
          v8 = v52;
        }
        ++v11;
        v10 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v8 - v9) >> 3) > v11);
    }
  }
  v32 = v7;
  v13 = *a2;
  v14 = a2[1];
  if (v14 - *a2 == a3[1] - *a3 && v14 != v13)
  {
    v16 = 0;
    while (1)
    {
      quasar::tokens2Str((uint64_t *)(v13 + 24 * v16), (std::string *)__s1);
      quasar::tokens2Str((uint64_t *)(*a3 + 24 * v16), &v50);
      v17 = BYTE7(v34);
      if ((SBYTE7(v34) & 0x80u) == 0)
        v18 = (void *)BYTE7(v34);
      else
        v18 = __s1[1];
      size = HIBYTE(v50.__r_.__value_.__r.__words[2]);
      v20 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
      if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v50.__r_.__value_.__l.__size_;
      if (v18 != (void *)size)
      {
        v30 = 0;
        if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_38;
      }
      v21 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &v50
          : (std::string *)v50.__r_.__value_.__r.__words[0];
      if (SBYTE7(v34) < 0)
        break;
      if (BYTE7(v34))
      {
        v22 = BYTE7(v34) - 1;
        v23 = __s1;
        do
        {
          v25 = *(unsigned __int8 *)v23;
          v23 = (void **)((char *)v23 + 1);
          v24 = v25;
          v27 = v21->__r_.__value_.__s.__data_[0];
          v21 = (std::string *)((char *)v21 + 1);
          v26 = v27;
          v29 = v22-- != 0;
          v30 = v24 == v26;
        }
        while (v24 == v26 && v29);
LABEL_33:
        if ((v20 & 0x80000000) == 0)
          goto LABEL_34;
        goto LABEL_38;
      }
      v30 = 1;
      if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_34:
        if ((v17 & 0x80) == 0)
          goto LABEL_35;
        goto LABEL_39;
      }
LABEL_38:
      operator delete(v50.__r_.__value_.__l.__data_);
      if ((BYTE7(v34) & 0x80) == 0)
      {
LABEL_35:
        if (v30)
          goto LABEL_40;
        goto LABEL_44;
      }
LABEL_39:
      operator delete(__s1[0]);
      if (v30)
      {
LABEL_40:
        if (quasar::gLogLevel >= 5)
        {
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          *(_OWORD *)__s1 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__s1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__s1, (uint64_t)"Hammer didn't change any text. Therefore returning the original input.", 70);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__s1);
        }
        if (*a3 != *a2)
          std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(*a3 + 24 * v16, *(_QWORD *)(*a2 + 24 * v16), *(_QWORD *)(*a2 + 24 * v16 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(*a2 + 24 * v16 + 8) - *(_QWORD *)(*a2 + 24 * v16)) >> 5));
      }
LABEL_44:
      ++v16;
      v13 = *a2;
      if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3) <= v16)
        goto LABEL_45;
    }
    v6 = memcmp(__s1[0], v21, (size_t)__s1[1]);
    v30 = v6 == 0;
    goto LABEL_33;
  }
LABEL_45:
  if (quasar::gLogLevel >= 5)
    quasar::QuasarTextProcImpl::reportResults(v6, (uint64_t)a2, (uint64_t)a3);
  __s1[0] = &v51;
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__s1);
  return v32;
}

void sub_1ADCAAE60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  __p = (void *)(v16 - 112);
  std::vector<std::vector<std::vector<quasar::Token>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unsigned int a5, int a6)
{
  unsigned __int16 *v10;
  int v11;
  int v12;
  int v13;
  _BOOL8 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[17];
  void **v46[2];

  if ((int)a4 <= 0 && quasar::gLogLevel >= 4)
  {
    memset(v45, 0, sizeof(v45));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Number of outputs (n) cannot be less than 1.", 44);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v45);
  }
  v10 = (unsigned __int16 *)(a1 + 24);
  v11 = *(char *)(a1 + 47);
  if (v11 < 0)
  {
    if (*(_QWORD *)(a1 + 32) != 3)
    {
LABEL_15:
      v15 = 0;
      goto LABEL_16;
    }
    v10 = *(unsigned __int16 **)v10;
  }
  else if (v11 != 3)
  {
    goto LABEL_15;
  }
  v12 = *v10;
  v13 = *((unsigned __int8 *)v10 + 2);
  v15 = v12 == 29801 && v13 == 110;
LABEL_16:
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 == 16)
  {
    v16 = *a2;
    if (*a2 != a2[1])
    {
      while (1)
      {
        quasar::Hammer::Hammer(v45, v16, *(_QWORD *)a1, 1, a4, v15, a5, 1.0);
        v42 = 0;
        v43 = 0;
        v44 = 0;
        if ((quasar::Hammer::hammerMapping((uint64_t)v45, a6, &v42) & 1) == 0)
          break;
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v17 = v42;
        if (v43 != v42)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          do
          {
            v21 = v17 + v18;
            v22 = (uint64_t *)(v21 + 8);
            if ((unint64_t)v19 >= v41)
            {
              v19 = (_QWORD *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v39, v22);
            }
            else
            {
              *v19 = 0;
              v19[1] = 0;
              v19[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v19, *v22, *(_QWORD *)(v21 + 16), 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v21 + 16) - *v22) >> 5));
              v19 += 3;
            }
            v40 = v19;
            ++v20;
            v17 = v42;
            v18 += 56;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((v43 - v42) >> 3) > v20);
        }
        v23 = a3[1];
        if (v23 >= a3[2])
        {
          v24 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a3, &v39);
        }
        else
        {
          std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a3, &v39);
          v24 = v23 + 24;
        }
        a3[1] = v24;
        v46[0] = (void **)&v39;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v46);
        v39 = &v42;
        std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
        quasar::Hammer::~Hammer((void **)v45);
        v16 += 24;
        if (v16 == a2[1])
          return 0;
      }
      v39 = &v42;
      std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
      quasar::Hammer::~Hammer((void **)v45);
      return 2;
    }
    return 0;
  }
  quasar::HammerSeqLat::HammerSeqLat(v45, a2, a1, 1, a4, v15, a5, 1.0);
  v42 = 0;
  v43 = 0;
  v44 = 0;
  if (quasar::HammerSeqLat::hammerSeqLatMapping((uint64_t)v45, a6, &v42))
  {
    v25 = v42;
    if (v43 != v42)
    {
      v26 = 0;
      do
      {
        v39 = 0;
        v40 = 0;
        v41 = 0;
        v28 = (uint64_t *)(v25 + 24 * v26);
        v27 = *v28;
        if (v28[1] != *v28)
        {
          v29 = 0;
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = v27 + v29;
            v33 = (uint64_t *)(v32 + 8);
            if ((unint64_t)v30 >= v41)
            {
              v30 = (_QWORD *)std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v39, v33);
            }
            else
            {
              *v30 = 0;
              v30[1] = 0;
              v30[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v30, *v33, *(_QWORD *)(v32 + 16), 0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v32 + 16) - *v33) >> 5));
              v30 += 3;
            }
            v40 = v30;
            ++v31;
            v27 = *(_QWORD *)(v42 + 24 * v26);
            v29 += 56;
          }
          while (0x6DB6DB6DB6DB6DB7 * ((*(_QWORD *)(v42 + 24 * v26 + 8) - v27) >> 3) > v31);
        }
        v34 = a3[1];
        if (v34 >= a3[2])
        {
          v35 = std::vector<std::vector<std::vector<quasar::Token>>>::__push_back_slow_path<std::vector<std::vector<quasar::Token>> const&>(a3, &v39);
        }
        else
        {
          std::vector<std::vector<std::vector<quasar::Token>>>::__construct_one_at_end[abi:ne180100]<std::vector<std::vector<quasar::Token>> const&>((uint64_t)a3, &v39);
          v35 = v34 + 24;
        }
        a3[1] = v35;
        v46[0] = (void **)&v39;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v46);
        ++v26;
        v25 = v42;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3) > v26);
    }
    v39 = &v42;
    std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
    quasar::HammerSeqLat::~HammerSeqLat((void **)v45);
    return 0;
  }
  v39 = &v42;
  std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v39);
  quasar::HammerSeqLat::~HammerSeqLat((void **)v45);
  return 2;
}

void sub_1ADCAB2E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void **v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  v11 = va_arg(va2, _QWORD);
  va_copy((va_list)v4, va1);
  std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::HammerSeqLat::~HammerSeqLat((void **)va2);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::reportResults(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void ***v3;
  int v4;
  const void **i;
  size_t v6;
  std::string *v7;
  const void *v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  __int128 v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  char v25;
  std::string *v26;
  __int128 v27;
  std::string *v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 *v31;
  uint64_t v32;
  _QWORD *v33;
  const std::locale::facet *v34;
  const void ***v35;
  int v36;
  const void **v37;
  size_t v38;
  std::string *v39;
  const void *v40;
  std::string *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  std::string *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  char v57;
  _OWORD *v58;
  __int128 v59;
  std::string::size_type v60;
  _QWORD *v61;
  _QWORD *v62;
  __int128 *v63;
  uint64_t v64;
  _QWORD *v65;
  const std::locale::facet *v66;
  int v70;
  int v71;
  _BYTE v72[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  std::string v88;
  std::string v89;
  std::string v90;
  std::string v91;
  std::string v92;
  std::string v93;
  std::string v94;
  uint64_t v95;
  std::string *v96;
  unint64_t v97;
  __int128 v98[2];
  std::string v99;
  _QWORD v100[5];

  v100[2] = *MEMORY[0x1E0C80C00];
  memset(v98, 0, 24);
  v95 = 0;
  v96 = 0;
  v97 = 0;
  v3 = *(const void ****)a2;
  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
    goto LABEL_76;
  v4 = 0;
  do
  {
    v70 = v4;
    for (i = *v3; i != v3[1]; i += 28)
    {
      if (*((char *)i + 23) >= 0)
        v6 = *((unsigned __int8 *)i + 23);
      else
        v6 = (size_t)i[1];
      std::string::basic_string[abi:ne180100]((uint64_t)&v91, v6 + 3);
      if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v91;
      else
        v7 = (std::string *)v91.__r_.__value_.__r.__words[0];
      if (v6)
      {
        if (*((char *)i + 23) >= 0)
          v8 = i;
        else
          v8 = *i;
        memmove(v7, v8, v6);
      }
      *(_DWORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 2112032;
      std::to_string(&v90, *((_DWORD *)i + 7));
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = &v90;
      else
        v9 = (std::string *)v90.__r_.__value_.__r.__words[0];
      if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
      else
        size = v90.__r_.__value_.__l.__size_;
      v11 = std::string::append(&v91, (const std::string::value_type *)v9, size);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v92.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = std::string::append(&v92, " : ");
      v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v93.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v89, *((_DWORD *)i + 8));
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v89;
      else
        v15 = (std::string *)v89.__r_.__value_.__r.__words[0];
      if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
      else
        v16 = v89.__r_.__value_.__l.__size_;
      v17 = std::string::append(&v93, (const std::string::value_type *)v15, v16);
      v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v94.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v94.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = std::string::append(&v94, ", start silence: ");
      v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      *(_QWORD *)&v72[16] = *((_QWORD *)&v19->__r_.__value_.__l + 2);
      *(_OWORD *)v72 = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v88, *((_DWORD *)i + 9));
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v21 = &v88;
      else
        v21 = (std::string *)v88.__r_.__value_.__r.__words[0];
      if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
      else
        v22 = v88.__r_.__value_.__l.__size_;
      v23 = std::string::append((std::string *)v72, (const std::string::value_type *)v21, v22);
      v24 = v23->__r_.__value_.__r.__words[0];
      v99.__r_.__value_.__r.__words[0] = v23->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
      v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if (SBYTE7(v98[1]) < 0)
        operator delete(*(void **)&v98[0]);
      *(_QWORD *)&v98[0] = v24;
      *((_QWORD *)&v98[0] + 1) = v99.__r_.__value_.__r.__words[0];
      *(_QWORD *)((char *)v98 + 15) = *(std::string::size_type *)((char *)v99.__r_.__value_.__r.__words + 7);
      BYTE7(v98[1]) = v25;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      if ((v72[23] & 0x80000000) != 0)
        operator delete(*(void **)v72);
      if (SHIBYTE(v94.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v94.__r_.__value_.__l.__data_);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v93.__r_.__value_.__l.__data_);
      if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v92.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v91.__r_.__value_.__l.__data_);
      if (*((char *)i + 23) < 0)
      {
        if (i[1])
        {
LABEL_54:
          v26 = v96;
          if ((unint64_t)v96 >= v97)
          {
            v28 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v95, v98);
          }
          else
          {
            if (SBYTE7(v98[1]) < 0)
            {
              std::string::__init_copy_ctor_external(v96, *(const std::string::value_type **)&v98[0], *((std::string::size_type *)&v98[0] + 1));
            }
            else
            {
              v27 = v98[0];
              v96->__r_.__value_.__r.__words[2] = *(_QWORD *)&v98[1];
              *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
            }
            v28 = v26 + 1;
          }
          v96 = v28;
          continue;
        }
      }
      else if (*((_BYTE *)i + 23))
      {
        goto LABEL_54;
      }
      if (quasar::gLogLevel >= 4)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v73 = 0u;
        memset(v72, 0, sizeof(v72));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Empty tokenName", 15);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v72);
      }
    }
    v94.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v94.__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>(&v95, (uint64_t *)&v94);
    if (SBYTE7(v98[1]) < 0)
      operator delete(*(void **)&v98[0]);
    v98[0] = *(_OWORD *)v72;
    *(_QWORD *)&v98[1] = *(_QWORD *)&v72[16];
    if (quasar::gLogLevel >= 6)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Pre-text-proc Choice[", 21);
      v29 = (_QWORD *)std::ostream::operator<<();
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"]: ", 3);
      if ((SBYTE7(v98[1]) & 0x80u) == 0)
        v31 = v98;
      else
        v31 = *(__int128 **)&v98[0];
      if ((SBYTE7(v98[1]) & 0x80u) == 0)
        v32 = BYTE7(v98[1]);
      else
        v32 = *((_QWORD *)&v98[0] + 1);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      std::ios_base::getloc((const std::ios_base *)((char *)v33 + *(_QWORD *)(*v33 - 24)));
      v34 = std::locale::use_facet((const std::locale *)&v94, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v34->__vftable[2].~facet_0)(v34, 10);
      std::locale::~locale((std::locale *)&v94);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v72);
    }
    v4 = v70 + 1;
    v3 += 3;
  }
  while (v3 != *(const void ****)(a2 + 8));
LABEL_76:
  MEMORY[0x1AF44C914](v98, "");
  v35 = *(const void ****)a3;
  if (*(_QWORD *)a3 == *(_QWORD *)(a3 + 8))
    goto LABEL_151;
  v36 = 0;
  while (2)
  {
    v71 = v36;
    memset(&v94, 0, sizeof(v94));
    v37 = *v35;
    while (2)
    {
      if (v37 != v35[1])
      {
        if (*((char *)v37 + 23) >= 0)
          v38 = *((unsigned __int8 *)v37 + 23);
        else
          v38 = (size_t)v37[1];
        std::string::basic_string[abi:ne180100]((uint64_t)&v90, v38 + 3);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v39 = &v90;
        else
          v39 = (std::string *)v90.__r_.__value_.__r.__words[0];
        if (v38)
        {
          if (*((char *)v37 + 23) >= 0)
            v40 = v37;
          else
            v40 = *v37;
          memmove(v39, v40, v38);
        }
        *(_DWORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 2112032;
        std::to_string(&v89, *((_DWORD *)v37 + 7));
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v41 = &v89;
        else
          v41 = (std::string *)v89.__r_.__value_.__r.__words[0];
        if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v42 = HIBYTE(v89.__r_.__value_.__r.__words[2]);
        else
          v42 = v89.__r_.__value_.__l.__size_;
        v43 = std::string::append(&v90, (const std::string::value_type *)v41, v42);
        v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
        v91.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v44;
        v43->__r_.__value_.__l.__size_ = 0;
        v43->__r_.__value_.__r.__words[2] = 0;
        v43->__r_.__value_.__r.__words[0] = 0;
        v45 = std::string::append(&v91, " : ");
        v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v92.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v88, *((_DWORD *)v37 + 8));
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v47 = &v88;
        else
          v47 = (std::string *)v88.__r_.__value_.__r.__words[0];
        if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v48 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
        else
          v48 = v88.__r_.__value_.__l.__size_;
        v49 = std::string::append(&v92, (const std::string::value_type *)v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        v93.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v93.__r_.__value_.__l.__data_ = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        v51 = std::string::append(&v93, ", start silence: ");
        v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
        *(_QWORD *)&v72[16] = *((_QWORD *)&v51->__r_.__value_.__l + 2);
        *(_OWORD *)v72 = v52;
        v51->__r_.__value_.__l.__size_ = 0;
        v51->__r_.__value_.__r.__words[2] = 0;
        v51->__r_.__value_.__r.__words[0] = 0;
        std::to_string(&v99, *((_DWORD *)v37 + 9));
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v53 = &v99;
        else
          v53 = (std::string *)v99.__r_.__value_.__r.__words[0];
        if ((v99.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v54 = HIBYTE(v99.__r_.__value_.__r.__words[2]);
        else
          v54 = v99.__r_.__value_.__l.__size_;
        v55 = std::string::append((std::string *)v72, (const std::string::value_type *)v53, v54);
        v56 = v55->__r_.__value_.__r.__words[0];
        v100[0] = v55->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v100 + 7) = *(std::string::size_type *)((char *)&v55->__r_.__value_.__r.__words[1] + 7);
        v57 = HIBYTE(v55->__r_.__value_.__r.__words[2]);
        v55->__r_.__value_.__l.__size_ = 0;
        v55->__r_.__value_.__r.__words[2] = 0;
        v55->__r_.__value_.__r.__words[0] = 0;
        if (SBYTE7(v98[1]) < 0)
          operator delete(*(void **)&v98[0]);
        *(_QWORD *)&v98[0] = v56;
        *((_QWORD *)&v98[0] + 1) = v100[0];
        *(_QWORD *)((char *)v98 + 15) = *(_QWORD *)((char *)v100 + 7);
        BYTE7(v98[1]) = v57;
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v99.__r_.__value_.__l.__data_);
        if ((v72[23] & 0x80000000) != 0)
          operator delete(*(void **)v72);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v92.__r_.__value_.__l.__data_);
        if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v91.__r_.__value_.__l.__data_);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (*((char *)v37 + 23) < 0)
        {
          if (!v37[1])
            goto LABEL_133;
LABEL_129:
          v58 = (_OWORD *)v94.__r_.__value_.__l.__size_;
          if (v94.__r_.__value_.__l.__size_ >= v94.__r_.__value_.__r.__words[2])
          {
            v60 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v94, v98);
          }
          else
          {
            if (SBYTE7(v98[1]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v94.__r_.__value_.__l.__size_, *(const std::string::value_type **)&v98[0], *((std::string::size_type *)&v98[0] + 1));
            }
            else
            {
              v59 = v98[0];
              *(_QWORD *)(v94.__r_.__value_.__l.__size_ + 16) = *(_QWORD *)&v98[1];
              *v58 = v59;
            }
            v60 = (std::string::size_type)v58 + 24;
          }
          v94.__r_.__value_.__l.__size_ = v60;
        }
        else
        {
          if (*((_BYTE *)v37 + 23))
            goto LABEL_129;
LABEL_133:
          if (quasar::gLogLevel >= 4)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v73 = 0u;
            memset(v72, 0, sizeof(v72));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Empty tokenName", 15);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v72);
          }
        }
        v37 += 28;
        continue;
      }
      break;
    }
    v93.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
    v93.__r_.__value_.__l.__size_ = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&v94, (uint64_t *)&v93);
    if (SBYTE7(v98[1]) < 0)
      operator delete(*(void **)&v98[0]);
    v98[0] = *(_OWORD *)v72;
    *(_QWORD *)&v98[1] = *(_QWORD *)&v72[16];
    if (quasar::gLogLevel >= 6)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v73 = 0u;
      memset(v72, 0, sizeof(v72));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Post-text-proc Choice[", 22);
      v61 = (_QWORD *)std::ostream::operator<<();
      v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"]: ", 3);
      if ((SBYTE7(v98[1]) & 0x80u) == 0)
        v63 = v98;
      else
        v63 = *(__int128 **)&v98[0];
      if ((SBYTE7(v98[1]) & 0x80u) == 0)
        v64 = BYTE7(v98[1]);
      else
        v64 = *((_QWORD *)&v98[0] + 1);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)v63, v64);
      std::ios_base::getloc((const std::ios_base *)((char *)v65 + *(_QWORD *)(*v65 - 24)));
      v66 = std::locale::use_facet((const std::locale *)&v93, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v66->__vftable[2].~facet_0)(v66, 10);
      std::locale::~locale((std::locale *)&v93);
      std::ostream::put();
      std::ostream::flush();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v72);
    }
    v36 = v71 + 1;
    *(_QWORD *)v72 = &v94;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
    v35 += 3;
    if (v35 != *(const void ****)(a3 + 8))
      continue;
    break;
  }
LABEL_151:
  *(_QWORD *)v72 = &v95;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v72);
  if (SBYTE7(v98[1]) < 0)
    operator delete(*(void **)&v98[0]);
  return 0;
}

void sub_1ADCABD6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  uint64_t v13;

  __p = (void *)(v13 - 200);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v13 - 153) < 0)
    operator delete(*(void **)(v13 - 176));
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::run(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  unsigned __int16 *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _BOOL8 v11;
  char v12;
  uint64_t v13;
  int v15;
  int v16;
  _BOOL8 v18;
  int v19;
  void *v20[11];
  uint64_t v21;
  void **v22;

  v5 = (unsigned __int16 *)(a1 + 24);
  if (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1 != 16)
  {
    v7 = *(char *)(a1 + 47);
    if (v7 < 0)
    {
      if (*(_QWORD *)(a1 + 32) != 3)
      {
LABEL_27:
        v18 = 0;
        goto LABEL_28;
      }
      v5 = *(unsigned __int16 **)v5;
    }
    else if (v7 != 3)
    {
      goto LABEL_27;
    }
    v15 = *v5;
    v16 = *((unsigned __int8 *)v5 + 2);
    v18 = v15 == 29801 && v16 == 110;
LABEL_28:
    quasar::HammerSeq::HammerSeq(v20, a2, a1, 1, 1, v18, 0, 1.0);
    v19 = quasar::HammerSeq::hammerSeqMappingString((uint64_t)v20, a3);
    v22 = (void **)&v21;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v22);
    quasar::Hammer::~Hammer(v20);
    if (!v19)
      return 2;
    goto LABEL_29;
  }
  v6 = *(char *)(a1 + 47);
  if (v6 < 0)
  {
    if (*(_QWORD *)(a1 + 32) != 3)
    {
LABEL_16:
      v11 = 0;
      goto LABEL_17;
    }
    v5 = *(unsigned __int16 **)v5;
  }
  else if (v6 != 3)
  {
    goto LABEL_16;
  }
  v8 = *v5;
  v9 = *((unsigned __int8 *)v5 + 2);
  v11 = v8 == 29801 && v9 == 110;
LABEL_17:
  quasar::Hammer::Hammer((uint64_t)v20, a2, *(_QWORD **)a1, 1, 1, 1.0, v11, 0);
  v12 = quasar::Hammer::hammerMappingString((uint64_t)v20, a3);
  quasar::Hammer::~Hammer(v20);
  if ((v12 & 1) == 0)
    return 2;
LABEL_29:
  if (quasar::gLogLevel >= 5)
    quasar::QuasarTextProcImpl::reportResults(v13, (uint64_t)a2, a3);
  return 0;
}

void sub_1ADCAC158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::HammerSeq::~HammerSeq((void **)va);
  _Unwind_Resume(a1);
}

void quasar::HammerSeq::~HammerSeq(void **this)
{
  void **v2;

  v2 = this + 11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::Hammer::~Hammer(this);
}

uint64_t quasar::QuasarTextProcImpl::reportResults(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  std::locale::id *v15;
  _QWORD *v16;
  _QWORD *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const std::locale::facet *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _QWORD v41[3];
  void *v42[2];
  uint64_t v43;
  std::locale v44;

  v42[0] = 0;
  v42[1] = 0;
  v43 = 0;
  memset(v41, 0, sizeof(v41));
  if (quasar::gLogLevel >= 5)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Pre-sanitization: ", 18);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
    v10 = std::locale::use_facet(&v44, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
    std::locale::~locale(&v44);
    std::ostream::put();
    std::ostream::flush();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
  }
  MEMORY[0x1AF44C914](v42, "");
  v12 = *a3;
  v11 = a3[1];
  if (*a3 != v11)
  {
    v13 = 0;
    v14 = quasar::gLogLevel;
    v15 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      if (v14 >= 5)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v24 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"Post-sanitization Choice[", 25);
        v16 = (_QWORD *)std::ostream::operator<<();
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"]: ", 3);
        v18 = *(char *)(v12 + 23);
        if (v18 >= 0)
          v19 = v12;
        else
          v19 = *(_QWORD *)v12;
        if (v18 >= 0)
          v20 = *(unsigned __int8 *)(v12 + 23);
        else
          v20 = *(_QWORD *)(v12 + 8);
        v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, v19, v20);
        std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(_QWORD *)(*v21 - 24)));
        v22 = std::locale::use_facet(&v44, v15);
        ((void (*)(const std::locale::facet *, uint64_t))v22->__vftable[2].~facet_0)(v22, 10);
        std::locale::~locale(&v44);
        std::ostream::put();
        std::ostream::flush();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v24);
        v14 = quasar::gLogLevel;
        v11 = a3[1];
      }
      ++v13;
      v12 += 24;
    }
    while (v12 != v11);
  }
  *(_QWORD *)&v24 = v41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  if (SHIBYTE(v43) < 0)
    operator delete(v42[0]);
  return 0;
}

void sub_1ADCAC430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  if (*(char *)(v9 - 89) < 0)
    operator delete(*(void **)(v9 - 112));
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProcImpl::~QuasarTextProcImpl(void **this)
{
  void **v2;

  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t quasar::QuasarTextProcImpl::modelExist(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  _OWORD v8[17];

  v1 = *a1;
  v2 = a1[1];
  if (v2 == *a1)
    return 0;
  do
  {
    if (quasar::filesystem::exists((char *)v1) && !quasar::filesystem::is_directory((char *)v1))
    {
      result = 1;
    }
    else
    {
      if (quasar::gLogLevel >= 4)
      {
        memset(v8, 0, sizeof(v8));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"modelFile doesn't exist, or it's a directory: ", 46);
        v4 = *(char *)(v1 + 23);
        if (v4 >= 0)
          v5 = v1;
        else
          v5 = *(_QWORD *)v1;
        if (v4 >= 0)
          v6 = *(unsigned __int8 *)(v1 + 23);
        else
          v6 = *(_QWORD *)(v1 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, v5, v6);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v8);
      }
      result = 0;
    }
    v1 += 24;
  }
  while (v1 != v2);
  return result;
}

void sub_1ADCAC5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

quasar::PTree *quasar::QuasarTextProcImpl::modelExist(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  BOOL hasParam;
  BOOL v7;
  uint64_t Ptree;
  __int128 v9;
  quasar::PTree *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  unsigned __int8 *v20;
  int v21;
  const std::string::value_type *v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  const std::string::value_type *v26;
  std::string *v27;
  __int128 v28;
  std::string *v29;
  __int128 v30;
  quasar::PTree *ChildOptional;
  uint64_t v32;
  uint64_t v33;
  const std::string *String;
  std::string *v35;
  __int128 v36;
  std::string *v37;
  _QWORD *v38;
  __int128 *v39;
  uint64_t v40;
  const std::string *v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  std::string v63;
  std::string v64;
  __int128 v65;
  int64_t v66;
  std::string *v67;
  std::string *v68;
  unint64_t v69;
  std::string v70;
  int v71;
  std::string v72;
  std::string v73;
  char v74;

  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  hasParam = quasar::SystemConfig::hasParam(a1, (uint64_t)__p);
  v7 = hasParam;
  if (SBYTE7(v47) < 0)
  {
    operator delete(__p[0]);
    if (v7)
      goto LABEL_3;
    return 0;
  }
  if (!hasParam)
    return 0;
LABEL_3:
  std::string::basic_string[abi:ne180100]<0>(__p, "text-proc");
  Ptree = quasar::SystemConfig::getPtree(a1, (uint64_t)__p);
  v71 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v9 = *(_OWORD *)(Ptree + 8);
    v72.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v72.__r_.__value_.__l.__data_ = v9;
  }
  memset(&v73, 0, sizeof(v73));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v73, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v74 = *(_BYTE *)(Ptree + 56);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if ((quasar::PTree::isLeaf((quasar::PTree *)&v71) & 1) != 0)
  {
    v10 = 0;
    goto LABEL_90;
  }
  memset(&v70, 0, sizeof(v70));
  v67 = 0;
  v68 = 0;
  v69 = 0;
  v11 = quasar::PTree::begin((quasar::PTree *)&v71);
  v12 = quasar::PTree::end((quasar::PTree *)&v71);
  if (v11 == v12)
    goto LABEL_87;
  v13 = *((_BYTE *)a2 + 23);
  if (v13 >= 0)
    v14 = *((unsigned __int8 *)a2 + 23);
  else
    v14 = (size_t)a2[1];
  if (v13 >= 0)
    v15 = (unsigned __int8 *)a2;
  else
    v15 = *a2;
  while (1)
  {
    v16 = *(unsigned __int8 *)(v11 + 23);
    if ((v16 & 0x80u) == 0)
      v17 = *(unsigned __int8 *)(v11 + 23);
    else
      v17 = *(_QWORD *)(v11 + 8);
    if (v17 != v14)
      goto LABEL_30;
    if ((v16 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v11 + 23))
      goto LABEL_32;
    v18 = 0;
    while (*(unsigned __int8 *)(v11 + v18) == v15[v18])
    {
      if (v16 == ++v18)
        goto LABEL_32;
    }
LABEL_30:
    v11 += 88;
    if (v11 == v12)
      goto LABEL_87;
  }
  if (memcmp(*(const void **)v11, v15, *(_QWORD *)(v11 + 8)))
    goto LABEL_30;
LABEL_32:
  v19 = &v63;
  std::string::basic_string[abi:ne180100]((uint64_t)&v63, v14 + 1);
  if ((v63.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v19 = (std::string *)v63.__r_.__value_.__r.__words[0];
  if (v14)
  {
    if (*((char *)a2 + 23) >= 0)
      v20 = (unsigned __int8 *)a2;
    else
      v20 = *a2;
    memmove(v19, v20, v14);
  }
  *(_WORD *)((char *)&v19->__r_.__value_.__l.__data_ + v14) = 46;
  v21 = *(char *)(a3 + 23);
  if (v21 >= 0)
    v22 = (const std::string::value_type *)a3;
  else
    v22 = *(const std::string::value_type **)a3;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a3 + 23);
  else
    v23 = *(_QWORD *)(a3 + 8);
  v24 = std::string::append(&v63, v22, v23);
  v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  v64.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v64.__r_.__value_.__l.__data_ = v25;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    if (!*(_QWORD *)(a3 + 8))
      goto LABEL_49;
LABEL_47:
    v26 = ".";
  }
  else
  {
    if (*(_BYTE *)(a3 + 23))
      goto LABEL_47;
LABEL_49:
    v26 = "";
  }
  v27 = std::string::append(&v64, v26);
  v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  *(_QWORD *)&v47 = *((_QWORD *)&v27->__r_.__value_.__l + 2);
  *(_OWORD *)__p = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  v29 = std::string::append((std::string *)__p, "rule-fst");
  v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v66 = v29->__r_.__value_.__r.__words[2];
  v65 = v30;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v29->__r_.__value_.__r.__words[0] = 0;
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)&v71, (uint64_t)&v65);
  v10 = ChildOptional;
  if (ChildOptional)
  {
    v32 = quasar::PTree::begin(ChildOptional);
    v33 = quasar::PTree::end(v10);
    if (v32 == v33)
    {
      v37 = v68;
    }
    else
    {
      do
      {
        String = (const std::string *)quasar::PTree::getString((quasar::PTree *)(v32 + 24));
        std::string::operator=(&v70, String);
        v35 = v68;
        if ((unint64_t)v68 >= v69)
        {
          v37 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, (__int128 *)&v70);
        }
        else
        {
          if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external(v68, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
          }
          else
          {
            v36 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
            v68->__r_.__value_.__r.__words[2] = v70.__r_.__value_.__r.__words[2];
            *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
          }
          v37 = v35 + 1;
        }
        v68 = v37;
        v32 += 88;
      }
      while (v32 != v33);
    }
    if (v37 == v67)
    {
      v41 = (const std::string *)quasar::PTree::getString((uint64_t)&v71, &v65);
      std::string::operator=(&v70, v41);
      v42 = v68;
      if ((unint64_t)v68 >= v69)
      {
        v44 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v67, (__int128 *)&v70);
      }
      else
      {
        if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v68, v70.__r_.__value_.__l.__data_, v70.__r_.__value_.__l.__size_);
        }
        else
        {
          v43 = *(_OWORD *)&v70.__r_.__value_.__l.__data_;
          v68->__r_.__value_.__r.__words[2] = v70.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
        }
        v44 = v42 + 1;
      }
      v68 = v44;
    }
  }
  else if (quasar::gLogLevel >= 2)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Key not found: ", 15);
    if (v66 >= 0)
      v39 = &v65;
    else
      v39 = (__int128 *)v65;
    if (v66 >= 0)
      v40 = HIBYTE(v66);
    else
      v40 = *((_QWORD *)&v65 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)v39, v40);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
  if (SHIBYTE(v66) < 0)
  {
    operator delete((void *)v65);
    if (v10)
      goto LABEL_87;
  }
  else
  {
    if (!v10)
      goto LABEL_88;
LABEL_87:
    v10 = (quasar::PTree *)quasar::QuasarTextProcImpl::modelExist((uint64_t *)&v67);
  }
LABEL_88:
  __p[0] = &v67;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
LABEL_90:
  quasar::PTree::~PTree((quasar::PTree *)&v71);
  return v10;
}

void sub_1ADCACADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;
  uint64_t v53;

  *(_QWORD *)(v53 - 176) = v52;
  if (*(char *)(v53 - 185) < 0)
    operator delete(*(void **)(v53 - 208));
  __p = (void *)(v53 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v53 - 137) < 0)
    operator delete(*(void **)(v53 - 160));
  quasar::PTree::~PTree((quasar::PTree *)(v53 - 136));
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProcImpl::QuasarTextProcImpl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  kaldi::Input *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  __int128 *v15;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  int v20;
  int v21;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  __int128 v42;
  int64x2_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v49;
  char *v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  __int128 *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *__p[2];
  char v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  __int128 __n;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[2];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[16];

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = *a2;
  v4 = a2[1];
  if (*a2 != v4)
  {
    do
    {
      v5 = (kaldi::Input *)kaldi::Input::Input(v93, v3, 0);
      v6 = (_QWORD *)kaldi::Input::Stream(v5);
      if (*(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 32))
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(v77, 0, sizeof(v77));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Could not open decoding-graph FST ", 34);
        v61 = *(char *)(v3 + 23);
        if (v61 >= 0)
          v62 = v3;
        else
          v62 = *(_QWORD *)v3;
        if (v61 >= 0)
          v63 = *(unsigned __int8 *)(v3 + 23);
        else
          v63 = *(_QWORD *)(v3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
      __n = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v74 = -1;
      v75 = 0;
      v76 = 0;
      v7 = kaldi::Input::Stream((kaldi::Input *)v93);
      if ((fst::FstHeader::Read((uint64_t)&v69, v7, v3, 0) & 1) == 0)
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(v77, 0, sizeof(v77));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Reading FST: error reading FST header.", 38);
        v57 = *(char *)(v3 + 23);
        if (v57 >= 0)
          v58 = v3;
        else
          v58 = *(_QWORD *)v3;
        if (v57 >= 0)
          v59 = *(unsigned __int8 *)(v3 + 23);
        else
          v59 = *(_QWORD *)(v3 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, v58, v59);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
      v8 = fst::ArcTpl<fst::TropicalWeightTpl<float>,int>::Type();
      v9 = HIBYTE(__n);
      if (__n >= 0)
        v10 = HIBYTE(__n);
      else
        v10 = __n;
      v11 = *(unsigned __int8 *)(v8 + 23);
      v12 = (char)v11;
      if ((v11 & 0x80u) != 0)
        v11 = *(_QWORD *)(v8 + 8);
      if (v10 != v11)
        goto LABEL_74;
      if (v12 >= 0)
        v13 = (unsigned __int8 *)v8;
      else
        v13 = *(unsigned __int8 **)v8;
      if ((HIBYTE(__n) & 0x80) != 0)
      {
        if (memcmp(*((const void **)&v71 + 1), v13, __n))
          goto LABEL_74;
      }
      else if (HIBYTE(__n))
      {
        v14 = (unsigned __int8 *)&v71 + 8;
        while (*v14 == *v13)
        {
          ++v14;
          ++v13;
          if (!--v9)
            goto LABEL_20;
        }
LABEL_74:
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(v77, 0, sizeof(v77));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"FST with arc type ", 18);
        if (__n >= 0)
          v50 = (char *)&v71 + 8;
        else
          v50 = (char *)*((_QWORD *)&v71 + 1);
        if (__n >= 0)
          v51 = HIBYTE(__n);
        else
          v51 = __n;
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" not supported.\n", 16);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
LABEL_20:
      fst::FstReadOptions::FstReadOptions(__p, v3, &v69, 0, 0);
      v64 = 0;
      v65 = 0;
      if ((BYTE7(v71) & 0x80) != 0)
      {
        if (*((_QWORD *)&v70 + 1) == 5)
        {
          v15 = (__int128 *)v70;
LABEL_37:
          v20 = *(_DWORD *)v15;
          v21 = *((unsigned __int8 *)v15 + 4);
          if (v20 != 1936617315 || v21 != 116)
            goto LABEL_81;
          v68 = 2;
          v23 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v93);
          v24 = fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(v23, (uint64_t)__p);
          std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(&v64, (uint64_t)v24);
          goto LABEL_43;
        }
        if (*((_QWORD *)&v70 + 1) != 6
          || (*(_DWORD *)v70 == 1952671094 ? (v19 = *(unsigned __int16 *)(v70 + 4) == 29295) : (v19 = 0), !v19))
        {
LABEL_81:
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v81 = 0u;
          v82 = 0u;
          v79 = 0u;
          v80 = 0u;
          v78 = 0u;
          memset(v77, 0, sizeof(v77));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
          v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Reading FST: unsupported hammer FST type: ", 42);
          if ((SBYTE7(v71) & 0x80u) == 0)
            v54 = &v70;
          else
            v54 = (__int128 *)v70;
          if ((SBYTE7(v71) & 0x80u) == 0)
            v55 = BYTE7(v71);
          else
            v55 = *((_QWORD *)&v70 + 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
        }
      }
      else
      {
        v15 = &v70;
        if (BYTE7(v71) == 5)
          goto LABEL_37;
        if (BYTE7(v71) != 6)
          goto LABEL_81;
        if ((_DWORD)v70 != 1952671094 || WORD2(v70) != 29295)
          goto LABEL_81;
      }
      v68 = 2;
      v17 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v93);
      v18 = fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Read(v17, (uint64_t)__p);
      std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::reset[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,void>(&v64, (uint64_t)v18);
LABEL_43:
      v25 = v64;
      if (!v64)
      {
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v78 = 0u;
        memset(v77, 0, sizeof(v77));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v77);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"Error reading FST (after reading header).", 41);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v77);
      }
      v26 = v65;
      if (v65)
      {
        p_shared_owners = (unint64_t *)&v65->__shared_owners_;
        do
          v28 = __ldxr(p_shared_owners);
        while (__stxr(v28 + 1, p_shared_owners));
      }
      v30 = *(_QWORD **)(a1 + 8);
      v29 = *(_QWORD *)(a1 + 16);
      if ((unint64_t)v30 >= v29)
      {
        v32 = ((uint64_t)v30 - *(_QWORD *)a1) >> 4;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v34 = v29 - *(_QWORD *)a1;
        if (v34 >> 3 > v33)
          v33 = v34 >> 3;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        *(_QWORD *)&v78 = a1 + 16;
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>(a1 + 16, v35);
        v38 = &v36[16 * v32];
        *(_QWORD *)v38 = v25;
        *((_QWORD *)v38 + 1) = v26;
        v40 = *(_QWORD **)a1;
        v39 = *(_QWORD **)(a1 + 8);
        if (v39 == *(_QWORD **)a1)
        {
          v43 = vdupq_n_s64((unint64_t)v39);
          v41 = &v36[16 * v32];
        }
        else
        {
          v41 = &v36[16 * v32];
          do
          {
            v42 = *((_OWORD *)v39 - 1);
            v39 -= 2;
            *((_OWORD *)v41 - 1) = v42;
            v41 -= 16;
            *v39 = 0;
            v39[1] = 0;
          }
          while (v39 != v40);
          v43 = *(int64x2_t *)a1;
        }
        v31 = v38 + 16;
        *(_QWORD *)a1 = v41;
        *(_QWORD *)(a1 + 8) = v38 + 16;
        *(int64x2_t *)((char *)v77 + 8) = v43;
        v44 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)(a1 + 16) = &v36[16 * v37];
        *((_QWORD *)&v77[1] + 1) = v44;
        *(_QWORD *)&v77[0] = v43.i64[0];
        std::__split_buffer<std::shared_ptr<quasar::FeatureExtractor>>::~__split_buffer((uint64_t)v77);
      }
      else
      {
        *v30 = v25;
        v30[1] = v26;
        v31 = v30 + 2;
      }
      *(_QWORD *)(a1 + 8) = v31;
      v45 = v65;
      if (v65)
      {
        v46 = (unint64_t *)&v65->__shared_owners_;
        do
          v47 = __ldaxr(v46);
        while (__stlxr(v47 - 1, v46));
        if (!v47)
        {
          ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
          std::__shared_weak_count::__release_weak(v45);
        }
      }
      if (v67 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(__n) < 0)
        operator delete(*((void **)&v71 + 1));
      if (SBYTE7(v71) < 0)
        operator delete((void *)v70);
      kaldi::Input::~Input((kaldi::Input *)v93);
      v3 += 24;
    }
    while (v3 != v4);
  }
  return a1;
}

std::string *quasar::QuasarTextProcImpl::setTextProcType(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

void quasar::QuasarTextProc::readModelFiles(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  quasar::PTree *Child;
  __int128 *v8;
  uint64_t v9;
  __int128 *v10;
  uint64_t String;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  uint64_t v18;
  std::string __p;
  std::string v20;
  _BYTE v21[64];

  Child = (quasar::PTree *)quasar::PTree::getChild(a2, a3);
  v8 = (__int128 *)quasar::PTree::begin(Child);
  v9 = quasar::PTree::end(Child);
  if (v8 != (__int128 *)v9)
  {
    v10 = (__int128 *)v9;
    do
    {
      std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v20, v8);
      String = quasar::PTree::getString((quasar::PTree *)v21);
      if (*(char *)(String + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)String, *(_QWORD *)(String + 8));
      }
      else
      {
        v12 = *(_OWORD *)String;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(String + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v13 = *(_QWORD *)(a4 + 8);
      if (v13 >= *(_QWORD *)(a4 + 16))
      {
        v15 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, (__int128 *)&__p);
      }
      else
      {
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(*(std::string **)(a4 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        v15 = v13 + 24;
        *(_QWORD *)(a4 + 8) = v13 + 24;
      }
      *(_QWORD *)(a4 + 8) = v15;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      quasar::PTree::~PTree((quasar::PTree *)v21);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v20.__r_.__value_.__l.__data_);
      v8 = (__int128 *)((char *)v8 + 88);
    }
    while (v8 != v10);
  }
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
  {
    v16 = (__int128 *)quasar::PTree::getString(a2, a3);
    v17 = *(_QWORD *)(a4 + 8);
    if (v17 >= *(_QWORD *)(a4 + 16))
    {
      v18 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v16);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, v16);
      v18 = v17 + 24;
    }
    *(_QWORD *)(a4 + 8) = v18;
  }
}

void sub_1ADCAD410(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProc::QuasarTextProc(uint64_t a1, const quasar::SystemConfig *a2, uint64_t *a3, unsigned __int8 *a4)
{
  uint64_t Ptree;
  __int128 v8;
  __int128 *v9;
  std::string::size_type size;
  std::string *v16;
  std::string::size_type v17;
  int v18;
  std::string::size_type v20;
  __int128 *v21;
  std::string *v22;
  std::string *v23;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::string *v28;
  _QWORD *v29;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  int v38;
  unsigned __int8 *v39;
  std::string *v40;
  _QWORD *v41;
  std::string *v42;
  std::string::size_type v43;
  _QWORD *v44;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  std::string *v49;
  __int128 v50;
  std::string *v51;
  __int128 v52;
  std::string *v53;
  __int128 v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  __int128 v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD *v64;
  std::string *v65;
  std::string::size_type v66;
  _QWORD *v67;
  _QWORD *v68;
  std::string *v69;
  std::string::size_type v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  _QWORD *v74;
  std::string *v75;
  std::string::size_type v76;
  std::string::size_type v77;
  __int128 *p_p;
  std::string *v79;
  std::string *v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string *v85;
  _QWORD *v86;
  std::string::size_type v87;
  __int128 *v88;
  std::string *v89;
  std::string *v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::string *v95;
  _QWORD *v96;
  uint64_t v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t v100;
  int v101;
  uint64_t ChildOptional;
  uint64_t v103;
  std::string::size_type v104;
  __int128 *v105;
  std::string *v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  __int128 *v110;
  uint64_t v111;
  std::string::size_type v112;
  std::string *v113;
  std::string *v114;
  std::string *v115;
  std::string::size_type v116;
  std::string *v117;
  __int128 v118;
  std::string *v119;
  __int128 v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  unint64_t *v124;
  unint64_t v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  std::string *v129;
  std::string::size_type v130;
  _QWORD *v131;
  _QWORD *v132;
  std::string *v133;
  std::string::size_type v134;
  _QWORD *v135;
  _QWORD *v136;
  std::string *v137;
  std::string::size_type v138;
  std::string *v139;
  std::string::size_type v140;
  uint64_t v141;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  std::string *v146;
  int data;
  int v148;
  uint64_t v150;
  std::string::size_type v151;
  std::string *v152;
  std::string *v153;
  std::string *v154;
  std::string::size_type v155;
  std::string *v156;
  __int128 v157;
  std::string *v158;
  __int128 v159;
  std::string *v160;
  __int128 v161;
  std::string *v162;
  unint64_t *v163;
  unint64_t v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  std::__shared_weak_count *v168;
  unint64_t *v169;
  unint64_t v170;
  _DWORD *v171;
  std::string *v172;
  __int128 v173;
  std::string *v174;
  __int128 v175;
  unint64_t *v176;
  unint64_t v177;
  std::__shared_weak_count *v178;
  unint64_t *v179;
  unint64_t v180;
  std::string *v181;
  std::string::size_type v182;
  _QWORD *v183;
  _QWORD *v184;
  std::string *v185;
  std::string::size_type v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  unint64_t *v189;
  unint64_t v190;
  std::string *v191;
  std::string::size_type v192;
  uint64_t v193;
  BOOL v194;
  unint64_t *v195;
  unint64_t v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  _QWORD *v200;
  std::string *p_s1;
  std::string::size_type v202;
  _QWORD *v203;
  std::__shared_weak_count *v204;
  unint64_t *v205;
  unint64_t v206;
  _QWORD *v208;
  _QWORD *v209;
  std::string *v210;
  std::string::size_type v211;
  std::string **v212;
  std::string **v213;
  std::string **v214;
  uint64_t v215;
  quasar::SystemConfig *v216;
  uint64_t v217;
  __int128 v218;
  std::string v219;
  std::string v220;
  void *v221[2];
  std::string::size_type v222;
  __int128 v223;
  std::string v224;
  std::string v225;
  std::string __s1;
  _BYTE v227[72];
  __int128 __p;
  _QWORD v229[4];
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  std::string v244;
  std::string v245;
  std::string v246;
  _BYTE v247[64];
  int v248;
  std::string v249;
  std::string v250;
  char v251;

  *(_QWORD *)a1 = &off_1E5D354B8;
  v216 = (quasar::SystemConfig *)(a1 + 8);
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 8), a2, 1, 1);
  *(_OWORD *)(a1 + 1600) = 0u;
  v213 = (std::string **)(a1 + 1552);
  v214 = (std::string **)(a1 + 1568);
  *(_OWORD *)(a1 + 1584) = 0u;
  *(_OWORD *)(a1 + 1568) = 0u;
  *(_OWORD *)(a1 + 1552) = 0u;
  *(_DWORD *)(a1 + 1616) = 1065353216;
  *(_OWORD *)(a1 + 1624) = 0u;
  *(_OWORD *)(a1 + 1640) = 0u;
  v215 = a1 + 1584;
  *(_DWORD *)(a1 + 1656) = 1065353216;
  *(_OWORD *)(a1 + 1664) = 0u;
  *(_OWORD *)(a1 + 1680) = 0u;
  *(_DWORD *)(a1 + 1696) = 1065353216;
  *(_OWORD *)(a1 + 1704) = 0u;
  *(_OWORD *)(a1 + 1720) = 0u;
  v212 = (std::string **)(a1 + 1704);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 1720), a3);
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion((uint64_t)v216, 10, 0, (uint64_t)&__p);
  if (SHIBYTE(v229[0]) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)v216, (uint64_t)&__p);
  v248 = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v249, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v8 = *(_OWORD *)(Ptree + 8);
    v249.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v249.__r_.__value_.__l.__data_ = v8;
  }
  memset(&v250, 0, sizeof(v250));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v250, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v251 = *(_BYTE *)(Ptree + 56);
  if (SHIBYTE(v229[0]) < 0)
    operator delete((void *)__p);
  v9 = (__int128 *)quasar::PTree::begin((quasar::PTree *)&v248);
  v217 = quasar::PTree::end((quasar::PTree *)&v248);
  while (v9 != (__int128 *)v217)
  {
    std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&v246, v9);
    if ((SHIBYTE(v246.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      switch(*((_BYTE *)&v246.__r_.__value_.__s + 23))
      {
        case 3:
          goto LABEL_11;
        case 4:
          goto LABEL_92;
        case 5:
        case 6:
        case 7:
        case 8:
        case 0xA:
        case 0xB:
          goto LABEL_180;
        case 9:
LABEL_85:
          if (v246.__r_.__value_.__r.__words[0] == 0x657A6974696E6173 && v246.__r_.__value_.__s.__data_[8] == 114)
            goto LABEL_188;
          if (HIBYTE(v246.__r_.__value_.__r.__words[2]) == 4)
          {
LABEL_92:
            if (LODWORD(v246.__r_.__value_.__l.__data_) != 846099561)
              goto LABEL_180;
            goto LABEL_93;
          }
          if (HIBYTE(v246.__r_.__value_.__r.__words[2]) != 3)
            goto LABEL_180;
LABEL_11:
          if (LOWORD(v246.__r_.__value_.__l.__data_) == 29801 && v246.__r_.__value_.__s.__data_[2] == 110)
            goto LABEL_210;
          break;
        case 0xC:
          if (v246.__r_.__value_.__r.__words[0] != 0x61682D696A6F6D65
            || LODWORD(v246.__r_.__value_.__r.__words[1]) != 1919249773)
          {
            v16 = &v246;
            switch(*((_BYTE *)&v246.__r_.__value_.__s + 23))
            {
              case 3:
                goto LABEL_11;
              case 4:
                goto LABEL_92;
              case 9:
                goto LABEL_85;
              case 0xC:
                goto LABEL_46;
              default:
                goto LABEL_180;
            }
          }
          goto LABEL_236;
        default:
          if (HIBYTE(v246.__r_.__value_.__r.__words[2]) != 15)
            goto LABEL_180;
          if (v246.__r_.__value_.__r.__words[0] != 0x6E74692D74736F70
            || *(std::string::size_type *)((char *)v246.__r_.__value_.__r.__words + 7) != 0x72656D6D61682D6ELL)
          {
            goto LABEL_180;
          }
          goto LABEL_238;
      }
      goto LABEL_180;
    }
    size = v246.__r_.__value_.__l.__size_;
    if (v246.__r_.__value_.__l.__size_ == 12)
    {
      if (*(_QWORD *)v246.__r_.__value_.__l.__data_ != 0x61682D696A6F6D65
        || *(_DWORD *)(v246.__r_.__value_.__r.__words[0] + 8) != 1919249773)
      {
        size = v246.__r_.__value_.__l.__size_;
LABEL_29:
        if (size == 9)
        {
          if (*(_QWORD *)v246.__r_.__value_.__l.__data_ == 0x657A6974696E6173
            && *(_BYTE *)(v246.__r_.__value_.__r.__words[0] + 8) == 114)
          {
LABEL_188:
            memset(&__s1, 0, sizeof(__s1));
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v77 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
            else
              v77 = v246.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v77 + 1);
            if (v229[0] >= 0)
              p_p = &__p;
            else
              p_p = (__int128 *)__p;
            if (v77)
            {
              if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v79 = &v246;
              else
                v79 = (std::string *)v246.__r_.__value_.__r.__words[0];
              memmove(p_p, v79, v77);
            }
            *(_WORD *)((char *)p_p + v77) = 46;
            v80 = std::string::append((std::string *)&__p, "rule-fst");
            v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
            v245.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v81;
            v80->__r_.__value_.__l.__size_ = 0;
            v80->__r_.__value_.__r.__words[2] = 0;
            v80->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            quasar::QuasarTextProc::readModelFiles((uint64_t)v80, (uint64_t)&v248, (__int128 *)&v245, (uint64_t)&__s1);
            std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&__p);
            std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v214, &__p);
            v82 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v83 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v84 = __ldaxr(v83);
              while (__stlxr(v84 - 1, v83));
              if (!v84)
              {
                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                std::__shared_weak_count::__release_weak(v82);
              }
            }
            v85 = *v214;
            std::string::basic_string[abi:ne180100]<0>(&__p, "sanitizer");
            std::string::operator=(v85 + 1, (const std::string *)&__p);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (quasar::gLogLevel < 4)
              goto LABEL_233;
            v242 = 0u;
            v243 = 0u;
            v240 = 0u;
            v241 = 0u;
            v238 = 0u;
            v239 = 0u;
            v236 = 0u;
            v237 = 0u;
            v234 = 0u;
            v235 = 0u;
            v232 = 0u;
            v233 = 0u;
            v230 = 0u;
            v231 = 0u;
            memset(v229, 0, sizeof(v229));
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"sanitizer", 9);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)" configured", 11);
LABEL_232:
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
            goto LABEL_233;
          }
          size = v246.__r_.__value_.__l.__size_;
        }
        if (size == 3)
        {
          if (*(_WORD *)v246.__r_.__value_.__l.__data_ == 29801
            && *(_BYTE *)(v246.__r_.__value_.__r.__words[0] + 2) == 110)
          {
LABEL_210:
            memset(&__s1, 0, sizeof(__s1));
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
            else
              v87 = v246.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v87 + 1);
            if (v229[0] >= 0)
              v88 = &__p;
            else
              v88 = (__int128 *)__p;
            if (v87)
            {
              if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v89 = &v246;
              else
                v89 = (std::string *)v246.__r_.__value_.__r.__words[0];
              memmove(v88, v89, v87);
            }
            *(_WORD *)((char *)v88 + v87) = 46;
            v90 = std::string::append((std::string *)&__p, "rule-fst");
            v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
            v245.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v91;
            v90->__r_.__value_.__l.__size_ = 0;
            v90->__r_.__value_.__r.__words[2] = 0;
            v90->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            quasar::QuasarTextProc::readModelFiles((uint64_t)v90, (uint64_t)&v248, (__int128 *)&v245, (uint64_t)&__s1);
            std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&__p);
            std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v213, &__p);
            v92 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v93 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v94 = __ldaxr(v93);
              while (__stlxr(v94 - 1, v93));
              if (!v94)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v95 = *v213;
            std::string::basic_string[abi:ne180100]<0>(&__p, "itn");
            std::string::operator=(v95 + 1, (const std::string *)&__p);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (quasar::gLogLevel < 4)
              goto LABEL_233;
            v242 = 0u;
            v243 = 0u;
            v240 = 0u;
            v241 = 0u;
            v238 = 0u;
            v239 = 0u;
            v236 = 0u;
            v237 = 0u;
            v234 = 0u;
            v235 = 0u;
            v232 = 0u;
            v233 = 0u;
            v230 = 0u;
            v231 = 0u;
            memset(v229, 0, sizeof(v229));
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v96 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"itn", 3);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v96, (uint64_t)" configured", 11);
            goto LABEL_232;
          }
          size = v246.__r_.__value_.__l.__size_;
        }
        if (size == 4)
        {
          if (*(_DWORD *)v246.__r_.__value_.__l.__data_ != 846099561)
          {
            size = v246.__r_.__value_.__l.__size_;
            goto LABEL_44;
          }
LABEL_93:
          *(_QWORD *)&__p = quasar::SystemConfig::getConfigFileVersion(v216);
          quasar::SystemConfig::Version::Version(&__s1, 50, 0);
          if (!quasar::SystemConfig::Version::operator>=(&__p, &__s1))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "itn2");
            quasar::SystemConfig::enforceMinVersion((uint64_t)v216, 33, 0, (uint64_t)&__p);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            _ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v244);
            v171 = (_DWORD *)v244.__r_.__value_.__r.__words[0];
            std::string::basic_string[abi:ne180100]<0>(&v245, "text-proc");
            v172 = std::string::append(&v245, ".");
            v173 = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
            __s1.__r_.__value_.__r.__words[2] = v172->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v173;
            v172->__r_.__value_.__l.__size_ = 0;
            v172->__r_.__value_.__r.__words[2] = 0;
            v172->__r_.__value_.__r.__words[0] = 0;
            v174 = std::string::append(&__s1, "itn2");
            v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
            v229[0] = *((_QWORD *)&v174->__r_.__value_.__l + 2);
            __p = v175;
            v174->__r_.__value_.__l.__size_ = 0;
            v174->__r_.__value_.__r.__words[2] = 0;
            v174->__r_.__value_.__r.__words[0] = 0;
            quasar::InverseTextNormalizer::init(v171, (uint64_t)v216, (uint64_t)&__p);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v245.__r_.__value_.__l.__data_);
            std::string::basic_string[abi:ne180100]<0>(&__p, "default");
            quasar::QuasarTextProc::modelKeyFromConfig((uint64_t)&__p, &__s1);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)&__p, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
            }
            else
            {
              __p = *(_OWORD *)&__s1.__r_.__value_.__l.__data_;
              v229[0] = *((_QWORD *)&__s1.__r_.__value_.__l + 2);
            }
            *(_OWORD *)&v229[1] = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v195 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v196 = __ldxr(v195);
              while (__stxr(v196 + 1, v195));
            }
            std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(v215, (unsigned __int8 *)&__p, (uint64_t)&__p);
            v197 = (std::__shared_weak_count *)v229[2];
            if (v229[2])
            {
              v198 = (unint64_t *)(v229[2] + 8);
              do
                v199 = __ldaxr(v198);
              while (__stlxr(v199 - 1, v198));
              if (!v199)
              {
                ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
                std::__shared_weak_count::__release_weak(v197);
              }
            }
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (quasar::gLogLevel >= 4)
            {
              v242 = 0u;
              v243 = 0u;
              v240 = 0u;
              v241 = 0u;
              v238 = 0u;
              v239 = 0u;
              v236 = 0u;
              v237 = 0u;
              v234 = 0u;
              v235 = 0u;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
              memset(v229, 0, sizeof(v229));
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              v200 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"itn2 configured key='", 21);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                p_s1 = &__s1;
              else
                p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v202 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              else
                v202 = __s1.__r_.__value_.__l.__size_;
              v203 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v200, (uint64_t)p_s1, v202);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v203, (uint64_t)"'", 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
            }
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__s1.__r_.__value_.__l.__data_);
            v204 = (std::__shared_weak_count *)v244.__r_.__value_.__l.__size_;
            if (v244.__r_.__value_.__l.__size_)
            {
              v205 = (unint64_t *)(v244.__r_.__value_.__l.__size_ + 8);
              do
                v206 = __ldaxr(v205);
              while (__stlxr(v206 - 1, v205));
              if (!v206)
              {
                ((void (*)(std::__shared_weak_count *))v204->__on_zero_shared)(v204);
                std::__shared_weak_count::__release_weak(v204);
              }
            }
LABEL_505:
            if (!*(_QWORD *)(a1 + 1608))
            {
              v242 = 0u;
              v243 = 0u;
              v240 = 0u;
              v241 = 0u;
              v238 = 0u;
              v239 = 0u;
              v236 = 0u;
              v237 = 0u;
              v234 = 0u;
              v235 = 0u;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
              memset(v229, 0, sizeof(v229));
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Failed to configure itn2", 24);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
            }
            goto LABEL_506;
          }
          v33 = (__int128 *)quasar::PTree::begin((quasar::PTree *)v247);
          v34 = quasar::PTree::end((quasar::PTree *)v247);
          while (2)
          {
            if (v33 == (__int128 *)v34)
              goto LABEL_505;
            std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__s1, v33);
            if (*(_DWORD *)(a1 + 736) == 2)
            {
              v35 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v36 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
              else
                v36 = __s1.__r_.__value_.__l.__size_;
              v37 = a4[23];
              v38 = (char)v37;
              if ((v37 & 0x80u) != 0)
                v37 = *((_QWORD *)a4 + 1);
              if (v36 != v37)
                goto LABEL_113;
              if (v38 >= 0)
                v39 = a4;
              else
                v39 = *(unsigned __int8 **)a4;
              if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (memcmp(__s1.__r_.__value_.__l.__data_, v39, __s1.__r_.__value_.__l.__size_))
                  goto LABEL_113;
              }
              else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
              {
                v40 = &__s1;
                while (v40->__r_.__value_.__s.__data_[0] == *v39)
                {
                  v40 = (std::string *)((char *)v40 + 1);
                  ++v39;
                  if (!--v35)
                    goto LABEL_127;
                }
LABEL_113:
                if (quasar::gLogLevel >= 4)
                {
                  v242 = 0u;
                  v243 = 0u;
                  v240 = 0u;
                  v241 = 0u;
                  v238 = 0u;
                  v239 = 0u;
                  v236 = 0u;
                  v237 = 0u;
                  v234 = 0u;
                  v235 = 0u;
                  v232 = 0u;
                  v233 = 0u;
                  v230 = 0u;
                  v231 = 0u;
                  memset(v229, 0, sizeof(v229));
                  __p = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                  v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"ignore itn2 config of ", 22);
                  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v42 = &__s1;
                  else
                    v42 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v43 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
                  else
                    v43 = __s1.__r_.__value_.__l.__size_;
                  v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
                  v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", what we are looking for is ", 29);
                  v46 = (char)a4[23];
                  if (v46 >= 0)
                    v47 = (uint64_t)a4;
                  else
                    v47 = *(_QWORD *)a4;
                  if (v46 >= 0)
                    v48 = a4[23];
                  else
                    v48 = *((_QWORD *)a4 + 1);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
                }
LABEL_177:
                quasar::PTree::~PTree((quasar::PTree *)v227);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__s1.__r_.__value_.__l.__data_);
                v33 = (__int128 *)((char *)v33 + 88);
                continue;
              }
            }
            break;
          }
LABEL_127:
          std::string::basic_string[abi:ne180100]<0>(&v224, "text-proc");
          v49 = std::string::append(&v224, ".");
          v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v225.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          v51 = std::string::append(&v225, "itn2");
          v52 = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
          v244.__r_.__value_.__r.__words[2] = v51->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v52;
          v51->__r_.__value_.__l.__size_ = 0;
          v51->__r_.__value_.__r.__words[2] = 0;
          v51->__r_.__value_.__r.__words[0] = 0;
          v53 = std::string::append(&v244, ".");
          v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v229[0] = *((_QWORD *)&v53->__r_.__value_.__l + 2);
          __p = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v55 = &__s1;
          else
            v55 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v56 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v56 = __s1.__r_.__value_.__l.__size_;
          v57 = std::string::append((std::string *)&__p, (const std::string::value_type *)v55, v56);
          v58 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
          v245.__r_.__value_.__r.__words[2] = v57->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v58;
          v57->__r_.__value_.__l.__size_ = 0;
          v57->__r_.__value_.__r.__words[2] = 0;
          v57->__r_.__value_.__r.__words[0] = 0;
          if (SHIBYTE(v229[0]) < 0)
            operator delete((void *)__p);
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v225.__r_.__value_.__l.__data_);
          if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v224.__r_.__value_.__l.__data_);
          _ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v225);
          quasar::InverseTextNormalizer::init(v225.__r_.__value_.__l.__data_, (uint64_t)v216, (uint64_t)&v245);
          quasar::QuasarTextProc::modelKeyFromConfig((uint64_t)&__s1, &v244);
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
          }
          else
          {
            __p = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
            v229[0] = *((_QWORD *)&v244.__r_.__value_.__l + 2);
          }
          *(_OWORD *)&v229[1] = *(_OWORD *)&v225.__r_.__value_.__l.__data_;
          if (v225.__r_.__value_.__l.__size_)
          {
            v59 = (unint64_t *)(v225.__r_.__value_.__l.__size_ + 8);
            do
              v60 = __ldxr(v59);
            while (__stxr(v60 + 1, v59));
          }
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(v215, (unsigned __int8 *)&__p, (uint64_t)&__p);
          v61 = (std::__shared_weak_count *)v229[2];
          if (v229[2])
          {
            v62 = (unint64_t *)(v229[2] + 8);
            do
              v63 = __ldaxr(v62);
            while (__stlxr(v63 - 1, v62));
            if (!v63)
            {
              ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
              std::__shared_weak_count::__release_weak(v61);
            }
          }
          if (SHIBYTE(v229[0]) < 0)
            operator delete((void *)__p);
          if (quasar::gLogLevel >= 4)
          {
            v242 = 0u;
            v243 = 0u;
            v240 = 0u;
            v241 = 0u;
            v238 = 0u;
            v239 = 0u;
            v236 = 0u;
            v237 = 0u;
            v234 = 0u;
            v235 = 0u;
            v232 = 0u;
            v233 = 0u;
            v230 = 0u;
            v231 = 0u;
            memset(v229, 0, sizeof(v229));
            __p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"itn2 configured key='", 21);
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v65 = &v244;
            else
              v65 = (std::string *)v244.__r_.__value_.__r.__words[0];
            if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
            else
              v66 = v244.__r_.__value_.__l.__size_;
            v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
            v68 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)"' prefix=", 9);
            if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v69 = &v245;
            else
              v69 = (std::string *)v245.__r_.__value_.__r.__words[0];
            if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v70 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
            else
              v70 = v245.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)v69, v70);
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
          }
          if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v244.__r_.__value_.__l.__data_);
          v71 = (std::__shared_weak_count *)v225.__r_.__value_.__l.__size_;
          if (v225.__r_.__value_.__l.__size_)
          {
            v72 = (unint64_t *)(v225.__r_.__value_.__l.__size_ + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
          goto LABEL_177;
        }
LABEL_44:
        if (size == 12)
        {
          v16 = (std::string *)v246.__r_.__value_.__r.__words[0];
LABEL_46:
          v17 = v16->__r_.__value_.__r.__words[0];
          v18 = v16->__r_.__value_.__r.__words[1];
          if (v17 == 0x2D6563697474616CLL && v18 == 1668248176)
          {
            memset(&__s1, 0, sizeof(__s1));
            if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v20 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
            else
              v20 = v246.__r_.__value_.__l.__size_;
            std::string::basic_string[abi:ne180100]((uint64_t)&__p, v20 + 1);
            if (v229[0] >= 0)
              v21 = &__p;
            else
              v21 = (__int128 *)__p;
            if (v20)
            {
              if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v22 = &v246;
              else
                v22 = (std::string *)v246.__r_.__value_.__r.__words[0];
              memmove(v21, v22, v20);
            }
            *(_WORD *)((char *)v21 + v20) = 46;
            v23 = std::string::append((std::string *)&__p, "rule-fst");
            v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v245.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            quasar::QuasarTextProc::readModelFiles((uint64_t)v23, (uint64_t)&v248, (__int128 *)&v245, (uint64_t)&__s1);
            std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&__p);
            std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v212, &__p);
            v25 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
            if (*((_QWORD *)&__p + 1))
            {
              v26 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = *v212;
            std::string::basic_string[abi:ne180100]<0>(&__p, "lattice-proc");
            std::string::operator=(v28 + 1, (const std::string *)&__p);
            if (SHIBYTE(v229[0]) < 0)
              operator delete((void *)__p);
            if (quasar::gLogLevel >= 4)
            {
              v242 = 0u;
              v243 = 0u;
              v240 = 0u;
              v241 = 0u;
              v238 = 0u;
              v239 = 0u;
              v236 = 0u;
              v237 = 0u;
              v234 = 0u;
              v235 = 0u;
              v232 = 0u;
              v233 = 0u;
              v230 = 0u;
              v231 = 0u;
              memset(v229, 0, sizeof(v229));
              __p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
              v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"lattice-proc", 12);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" configured", 11);
              goto LABEL_232;
            }
LABEL_233:
            if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v245.__r_.__value_.__l.__data_);
            *(_QWORD *)&__p = &__s1;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            goto LABEL_506;
          }
        }
LABEL_180:
        if (quasar::gLogLevel >= 4)
        {
          v242 = 0u;
          v243 = 0u;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
          v236 = 0u;
          v237 = 0u;
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          v230 = 0u;
          v231 = 0u;
          memset(v229, 0, sizeof(v229));
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Ignore unknown node text-proc.", 30);
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v75 = &v246;
          else
            v75 = (std::string *)v246.__r_.__value_.__r.__words[0];
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
          else
            v76 = v246.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)v75, v76);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        goto LABEL_506;
      }
    }
    else
    {
      if (v246.__r_.__value_.__l.__size_ != 15)
        goto LABEL_29;
      if (*(_QWORD *)v246.__r_.__value_.__l.__data_ != 0x6E74692D74736F70
        || *(_QWORD *)(v246.__r_.__value_.__r.__words[0] + 7) != 0x72656D6D61682D6ELL)
      {
        goto LABEL_29;
      }
LABEL_236:
      if ((*((_BYTE *)&v246.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        v97 = a1 + 1624;
        if (HIBYTE(v246.__r_.__value_.__r.__words[2]) != 15)
          goto LABEL_250;
LABEL_238:
        v98 = (unint64_t *)&v246;
        goto LABEL_241;
      }
    }
    v97 = a1 + 1624;
    if (v246.__r_.__value_.__l.__size_ != 15)
      goto LABEL_250;
    v98 = (unint64_t *)v246.__r_.__value_.__r.__words[0];
LABEL_241:
    v99 = bswap64(*v98);
    v100 = 0x706F73742D69746ELL;
    if (v99 == 0x706F73742D69746ELL
      && (v99 = bswap64(*(unint64_t *)((char *)v98 + 7)), v100 = 0x6E2D68616D6D6572,
                                                                 v99 == 0x6E2D68616D6D6572))
    {
      v101 = 0;
    }
    else if (v99 < v100)
    {
      v101 = -1;
    }
    else
    {
      v101 = 1;
    }
    if (v101)
      v97 = a1 + 1624;
    else
      v97 = a1 + 1664;
LABEL_250:
    std::string::basic_string[abi:ne180100]<0>(&__p, "rule-fst");
    ChildOptional = quasar::PTree::getChildOptional((uint64_t)v247, (uint64_t)&__p);
    v103 = ChildOptional;
    if (SHIBYTE(v229[0]) < 0)
    {
      operator delete((void *)__p);
      if (v103)
        goto LABEL_252;
LABEL_272:
      v110 = (__int128 *)quasar::PTree::begin((quasar::PTree *)v247);
      v111 = quasar::PTree::end((quasar::PTree *)v247);
      while (2)
      {
        if (v110 == (__int128 *)v111)
          goto LABEL_467;
        std::pair<std::string,quasar::PTree>::pair[abi:ne180100](&__s1, v110);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v245, __s1.__r_.__value_.__l.__data_, __s1.__r_.__value_.__l.__size_);
        else
          v245 = __s1;
        if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v112 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
        else
          v112 = v246.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)&v224, v112 + 1);
        if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v113 = &v224;
        else
          v113 = (std::string *)v224.__r_.__value_.__r.__words[0];
        if (v112)
        {
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v114 = &v246;
          else
            v114 = (std::string *)v246.__r_.__value_.__r.__words[0];
          memmove(v113, v114, v112);
        }
        *(_WORD *)((char *)&v113->__r_.__value_.__l.__data_ + v112) = 46;
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v115 = &v245;
        else
          v115 = (std::string *)v245.__r_.__value_.__r.__words[0];
        if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v116 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
        else
          v116 = v245.__r_.__value_.__l.__size_;
        v117 = std::string::append(&v224, (const std::string::value_type *)v115, v116);
        v118 = *(_OWORD *)&v117->__r_.__value_.__l.__data_;
        v225.__r_.__value_.__r.__words[2] = v117->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v225.__r_.__value_.__l.__data_ = v118;
        v117->__r_.__value_.__l.__size_ = 0;
        v117->__r_.__value_.__r.__words[2] = 0;
        v117->__r_.__value_.__r.__words[0] = 0;
        v119 = std::string::append(&v225, ".");
        v120 = *(_OWORD *)&v119->__r_.__value_.__l.__data_;
        v229[0] = *((_QWORD *)&v119->__r_.__value_.__l + 2);
        __p = v120;
        v119->__r_.__value_.__l.__size_ = 0;
        v119->__r_.__value_.__r.__words[2] = 0;
        v119->__r_.__value_.__r.__words[0] = 0;
        v121 = std::string::append((std::string *)&__p, "rule-fst");
        v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
        v244.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v244.__r_.__value_.__l.__data_ = v122;
        v121->__r_.__value_.__l.__size_ = 0;
        v121->__r_.__value_.__r.__words[2] = 0;
        v121->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v229[0]) < 0)
          operator delete((void *)__p);
        if (SHIBYTE(v225.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v225.__r_.__value_.__l.__data_);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__r_.__value_.__l.__data_);
        memset(&v225, 0, sizeof(v225));
        quasar::QuasarTextProc::readModelFiles((uint64_t)v121, (uint64_t)&v248, (__int128 *)&v244, (uint64_t)&v225);
        std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&v223);
        v123 = (std::string *)v223;
        std::string::basic_string[abi:ne180100]<0>(&__p, "post-itn-hammer");
        std::string::operator=(v123 + 1, (const std::string *)&__p);
        if (SHIBYTE(v229[0]) < 0)
          operator delete((void *)__p);
        quasar::QuasarTextProc::modelKeyFromConfig((uint64_t)&v245, &v224);
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&__p, v224.__r_.__value_.__l.__data_, v224.__r_.__value_.__l.__size_);
        }
        else
        {
          __p = *(_OWORD *)&v224.__r_.__value_.__l.__data_;
          v229[0] = *((_QWORD *)&v224.__r_.__value_.__l + 2);
        }
        *(_OWORD *)&v229[1] = v223;
        if (*((_QWORD *)&v223 + 1))
        {
          v124 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
          do
            v125 = __ldxr(v124);
          while (__stxr(v125 + 1, v124));
        }
        std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(v97, (unsigned __int8 *)&__p, (uint64_t)&__p);
        v126 = (std::__shared_weak_count *)v229[2];
        if (v229[2])
        {
          v127 = (unint64_t *)(v229[2] + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
          if (!v128)
          {
            ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
            std::__shared_weak_count::__release_weak(v126);
          }
        }
        if (SHIBYTE(v229[0]) < 0)
          operator delete((void *)__p);
        if (quasar::gLogLevel >= 4)
        {
          v242 = 0u;
          v243 = 0u;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
          v236 = 0u;
          v237 = 0u;
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          v230 = 0u;
          v231 = 0u;
          memset(v229, 0, sizeof(v229));
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v129 = &v246;
          else
            v129 = (std::string *)v246.__r_.__value_.__r.__words[0];
          if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v130 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
          else
            v130 = v246.__r_.__value_.__l.__size_;
          v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v129, v130);
          v132 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)" configured key='", 17);
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v133 = &v224;
          else
            v133 = (std::string *)v224.__r_.__value_.__r.__words[0];
          if ((v224.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v134 = HIBYTE(v224.__r_.__value_.__r.__words[2]);
          else
            v134 = v224.__r_.__value_.__l.__size_;
          v135 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v132, (uint64_t)v133, v134);
          v136 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v135, (uint64_t)"' prefix=", 9);
          if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v137 = &v244;
          else
            v137 = (std::string *)v244.__r_.__value_.__r.__words[0];
          if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v138 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
          else
            v138 = v244.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v136, (uint64_t)v137, v138);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
        }
        if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
        {
          if (v246.__r_.__value_.__l.__size_ == 12)
          {
            v139 = (std::string *)v246.__r_.__value_.__r.__words[0];
LABEL_340:
            v140 = v139->__r_.__value_.__r.__words[0];
            v141 = LODWORD(v139->__r_.__value_.__r.__words[1]);
            if (v140 == 0x61682D696A6F6D65 && v141 == 1919249773)
            {
              if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
              {
                if (v245.__r_.__value_.__l.__size_ != 7)
                  goto LABEL_344;
                v146 = (std::string *)v245.__r_.__value_.__r.__words[0];
              }
              else
              {
                if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) != 7)
                  goto LABEL_344;
                v146 = &v245;
              }
              data = (int)v146->__r_.__value_.__l.__data_;
              v148 = *(_DWORD *)((char *)v146->__r_.__value_.__r.__words + 3);
              if (data == 1634100580 && v148 == 1953264993)
              {
                std::string::basic_string[abi:ne180100]<0>(&__p, "emoji-keyword-remove-fst-1");
                v150 = quasar::PTree::getChildOptional((uint64_t)v227, (uint64_t)&__p);
                if (SHIBYTE(v229[0]) < 0)
                  operator delete((void *)__p);
                if (v150)
                {
                  if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v151 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
                  else
                    v151 = v246.__r_.__value_.__l.__size_;
                  std::string::basic_string[abi:ne180100]((uint64_t)&v219, v151 + 1);
                  if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v152 = &v219;
                  else
                    v152 = (std::string *)v219.__r_.__value_.__r.__words[0];
                  if (v151)
                  {
                    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v153 = &v246;
                    else
                      v153 = (std::string *)v246.__r_.__value_.__r.__words[0];
                    memmove(v152, v153, v151);
                  }
                  *(_WORD *)((char *)&v152->__r_.__value_.__l.__data_ + v151) = 46;
                  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v154 = &v245;
                  else
                    v154 = (std::string *)v245.__r_.__value_.__r.__words[0];
                  if ((v245.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v155 = HIBYTE(v245.__r_.__value_.__r.__words[2]);
                  else
                    v155 = v245.__r_.__value_.__l.__size_;
                  v156 = std::string::append(&v219, (const std::string::value_type *)v154, v155);
                  v157 = *(_OWORD *)&v156->__r_.__value_.__l.__data_;
                  v220.__r_.__value_.__r.__words[2] = v156->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v157;
                  v156->__r_.__value_.__l.__size_ = 0;
                  v156->__r_.__value_.__r.__words[2] = 0;
                  v156->__r_.__value_.__r.__words[0] = 0;
                  v158 = std::string::append(&v220, ".");
                  v159 = *(_OWORD *)&v158->__r_.__value_.__l.__data_;
                  v229[0] = *((_QWORD *)&v158->__r_.__value_.__l + 2);
                  __p = v159;
                  v158->__r_.__value_.__l.__size_ = 0;
                  v158->__r_.__value_.__r.__words[2] = 0;
                  v158->__r_.__value_.__r.__words[0] = 0;
                  v160 = std::string::append((std::string *)&__p, "emoji-keyword-remove-fst-1");
                  v161 = *(_OWORD *)&v160->__r_.__value_.__l.__data_;
                  v222 = v160->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v221 = v161;
                  v160->__r_.__value_.__l.__size_ = 0;
                  v160->__r_.__value_.__r.__words[2] = 0;
                  v160->__r_.__value_.__r.__words[0] = 0;
                  if (SHIBYTE(v229[0]) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v220.__r_.__value_.__l.__data_);
                  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v219.__r_.__value_.__l.__data_);
                  memset(&v220, 0, sizeof(v220));
                  quasar::QuasarTextProc::readModelFiles((uint64_t)v160, (uint64_t)&v248, (__int128 *)v221, (uint64_t)&v220);
                  std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&v218);
                  v162 = (std::string *)v218;
                  std::string::basic_string[abi:ne180100]<0>(&__p, "post-itn-hammer");
                  std::string::operator=(v162 + 1, (const std::string *)&__p);
                  if (SHIBYTE(v229[0]) < 0)
                    operator delete((void *)__p);
                  std::string::basic_string[abi:ne180100]<0>(&__p, "emoji-keyword-remove-fst-1");
                  quasar::QuasarTextProc::modelKeyFromConfig((uint64_t)&__p, &v219);
                  if (SHIBYTE(v229[0]) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                  {
                    std::string::__init_copy_ctor_external((std::string *)&__p, v219.__r_.__value_.__l.__data_, v219.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    __p = *(_OWORD *)&v219.__r_.__value_.__l.__data_;
                    v229[0] = *((_QWORD *)&v219.__r_.__value_.__l + 2);
                  }
                  *(_OWORD *)&v229[1] = v218;
                  if (*((_QWORD *)&v218 + 1))
                  {
                    v163 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                    do
                      v164 = __ldxr(v163);
                    while (__stxr(v164 + 1, v163));
                  }
                  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(v97, (unsigned __int8 *)&__p, (uint64_t)&__p);
                  v165 = (std::__shared_weak_count *)v229[2];
                  if (v229[2])
                  {
                    v166 = (unint64_t *)(v229[2] + 8);
                    do
                      v167 = __ldaxr(v166);
                    while (__stlxr(v167 - 1, v166));
                    if (!v167)
                    {
                      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
                      std::__shared_weak_count::__release_weak(v165);
                    }
                  }
                  if (SHIBYTE(v229[0]) < 0)
                    operator delete((void *)__p);
                  if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v219.__r_.__value_.__l.__data_);
                  v168 = (std::__shared_weak_count *)*((_QWORD *)&v218 + 1);
                  if (*((_QWORD *)&v218 + 1))
                  {
                    v169 = (unint64_t *)(*((_QWORD *)&v218 + 1) + 8);
                    do
                      v170 = __ldaxr(v169);
                    while (__stlxr(v170 - 1, v169));
                    if (!v170)
                    {
                      ((void (*)(std::__shared_weak_count *))v168->__on_zero_shared)(v168);
                      std::__shared_weak_count::__release_weak(v168);
                    }
                  }
                  *(_QWORD *)&__p = &v220;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  if (SHIBYTE(v222) < 0)
                    operator delete(v221[0]);
                }
              }
            }
          }
        }
        else if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) == 12)
        {
          v139 = &v246;
          goto LABEL_340;
        }
LABEL_344:
        if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v224.__r_.__value_.__l.__data_);
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
        if (*((_QWORD *)&v223 + 1))
        {
          v144 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
            std::__shared_weak_count::__release_weak(v143);
          }
        }
        *(_QWORD *)&__p = &v225;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v244.__r_.__value_.__l.__data_);
        if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v245.__r_.__value_.__l.__data_);
        quasar::PTree::~PTree((quasar::PTree *)v227);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__s1.__r_.__value_.__l.__data_);
        v110 = (__int128 *)((char *)v110 + 88);
        continue;
      }
    }
    if (!ChildOptional)
      goto LABEL_272;
LABEL_252:
    memset(&__s1, 0, sizeof(__s1));
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v104 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
    else
      v104 = v246.__r_.__value_.__l.__size_;
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v104 + 1);
    if (v229[0] >= 0)
      v105 = &__p;
    else
      v105 = (__int128 *)__p;
    if (v104)
    {
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v106 = &v246;
      else
        v106 = (std::string *)v246.__r_.__value_.__r.__words[0];
      memmove(v105, v106, v104);
    }
    *(_WORD *)((char *)v105 + v104) = 46;
    v107 = std::string::append((std::string *)&__p, "rule-fst");
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v245.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v245.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v229[0]) < 0)
      operator delete((void *)__p);
    quasar::QuasarTextProc::readModelFiles((uint64_t)v107, (uint64_t)&v248, (__int128 *)&v245, (uint64_t)&__s1);
    std::allocate_shared[abi:ne180100]<quasar::QuasarTextProcImpl,std::allocator<quasar::QuasarTextProcImpl>,std::vector<std::string> &,void>(&v225);
    v109 = (std::string *)v225.__r_.__value_.__r.__words[0];
    std::string::basic_string[abi:ne180100]<0>(&__p, "post-itn-hammer");
    std::string::operator=(v109 + 1, (const std::string *)&__p);
    if (SHIBYTE(v229[0]) < 0)
      operator delete((void *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "default");
    quasar::QuasarTextProc::modelKeyFromConfig((uint64_t)&__p, &v244);
    if (SHIBYTE(v229[0]) < 0)
      operator delete((void *)__p);
    if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__p, v244.__r_.__value_.__l.__data_, v244.__r_.__value_.__l.__size_);
    }
    else
    {
      __p = *(_OWORD *)&v244.__r_.__value_.__l.__data_;
      v229[0] = *((_QWORD *)&v244.__r_.__value_.__l + 2);
    }
    *(_OWORD *)&v229[1] = *(_OWORD *)&v225.__r_.__value_.__l.__data_;
    if (v225.__r_.__value_.__l.__size_)
    {
      v176 = (unint64_t *)(v225.__r_.__value_.__l.__size_ + 8);
      do
        v177 = __ldxr(v176);
      while (__stxr(v177 + 1, v176));
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(v97, (unsigned __int8 *)&__p, (uint64_t)&__p);
    v178 = (std::__shared_weak_count *)v229[2];
    if (v229[2])
    {
      v179 = (unint64_t *)(v229[2] + 8);
      do
        v180 = __ldaxr(v179);
      while (__stlxr(v180 - 1, v179));
      if (!v180)
      {
        ((void (*)(std::__shared_weak_count *))v178->__on_zero_shared)(v178);
        std::__shared_weak_count::__release_weak(v178);
      }
    }
    if (SHIBYTE(v229[0]) < 0)
      operator delete((void *)__p);
    if (quasar::gLogLevel >= 4)
    {
      v242 = 0u;
      v243 = 0u;
      v240 = 0u;
      v241 = 0u;
      v238 = 0u;
      v239 = 0u;
      v236 = 0u;
      v237 = 0u;
      v234 = 0u;
      v235 = 0u;
      v232 = 0u;
      v233 = 0u;
      v230 = 0u;
      v231 = 0u;
      memset(v229, 0, sizeof(v229));
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v181 = &v246;
      else
        v181 = (std::string *)v246.__r_.__value_.__r.__words[0];
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v182 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
      else
        v182 = v246.__r_.__value_.__l.__size_;
      v183 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)v181, v182);
      v184 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v183, (uint64_t)" configured key='", 17);
      if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v185 = &v244;
      else
        v185 = (std::string *)v244.__r_.__value_.__r.__words[0];
      if ((v244.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v186 = HIBYTE(v244.__r_.__value_.__r.__words[2]);
      else
        v186 = v244.__r_.__value_.__l.__size_;
      v187 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v184, (uint64_t)v185, v186);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v187, (uint64_t)"'", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    if (SHIBYTE(v244.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v244.__r_.__value_.__l.__data_);
    v188 = (std::__shared_weak_count *)v225.__r_.__value_.__l.__size_;
    if (v225.__r_.__value_.__l.__size_)
    {
      v189 = (unint64_t *)(v225.__r_.__value_.__l.__size_ + 8);
      do
        v190 = __ldaxr(v189);
      while (__stlxr(v190 - 1, v189));
      if (!v190)
      {
        ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
        std::__shared_weak_count::__release_weak(v188);
      }
    }
    if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v245.__r_.__value_.__l.__data_);
    *(_QWORD *)&__p = &__s1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_467:
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v246.__r_.__value_.__l.__size_ == 15)
      {
        v191 = (std::string *)v246.__r_.__value_.__r.__words[0];
LABEL_472:
        v192 = v191->__r_.__value_.__r.__words[0];
        v193 = *(std::string::size_type *)((char *)v191->__r_.__value_.__r.__words + 7);
        v194 = v192 == 0x6E74692D74736F70 && v193 == 0x72656D6D61682D6ELL;
        if (v194 && !*(_QWORD *)(a1 + 1688))
        {
          v242 = 0u;
          v243 = 0u;
          v240 = 0u;
          v241 = 0u;
          v238 = 0u;
          v239 = 0u;
          v236 = 0u;
          v237 = 0u;
          v234 = 0u;
          v235 = 0u;
          v232 = 0u;
          v233 = 0u;
          v230 = 0u;
          v231 = 0u;
          memset(v229, 0, sizeof(v229));
          __p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          v208 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Empty post-itn-hammer rule", 26);
          v209 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v208, (uint64_t)", jsonConfigPath=", 17);
          if (*(char *)(a1 + 39) < 0)
            std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
          else
            __s1 = *(std::string *)(a1 + 16);
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v210 = &__s1;
          else
            v210 = (std::string *)__s1.__r_.__value_.__r.__words[0];
          if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v211 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
          else
            v211 = __s1.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v209, (uint64_t)v210, v211);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__s1.__r_.__value_.__l.__data_);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
        }
      }
    }
    else if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) == 15)
    {
      v191 = &v246;
      goto LABEL_472;
    }
LABEL_506:
    quasar::PTree::~PTree((quasar::PTree *)v247);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    v9 = (__int128 *)((char *)v9 + 88);
  }
  quasar::PTree::~PTree((quasar::PTree *)&v248);
  return a1;
}

void sub_1ADCAF2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, quasar::SystemConfig *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void **a59)
{
  quasar::Bitmap *v59;
  int v60;
  uint64_t v61;

  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a59);
  if (v60 < 0)
    JUMPOUT(0x1ADCAF2C4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  a59 = (void **)&a25;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a59);
  if (a34 < 0)
    operator delete(a29);
  if (a42 < 0)
    operator delete(a37);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  a59 = (void **)&a43;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a59);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a47);
  std::pair<std::string,quasar::PTree>::~pair(v61 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v61 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  quasar::SystemConfig::~SystemConfig(a17);
  quasar::Bitmap::~Bitmap(v59);
  _Unwind_Resume(a1);
}

void sub_1ADCAF2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    JUMPOUT(0x1ADCAF2E4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&a20);
  JUMPOUT(0x1ADCAF304);
}

void sub_1ADCAF2FC()
{
  JUMPOUT(0x1ADCAF304);
}

void sub_1ADCAF324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, quasar::SystemConfig *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *__p,uint64_t a63)
{
  char a67;
  quasar::Bitmap *v67;
  uint64_t v68;

  if (a67 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  if (a45 < 0)
    operator delete(a40);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a38);
  __p = &a46;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a50);
  std::pair<std::string,quasar::PTree>::~pair(v68 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v68 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  quasar::SystemConfig::~SystemConfig(a17);
  quasar::Bitmap::~Bitmap(v67);
  _Unwind_Resume(a1);
}

void sub_1ADCAF390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, quasar::SystemConfig *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  quasar::Bitmap *v61;
  uint64_t v62;

  if (a61 < 0)
    JUMPOUT(0x1ADCAF3A0);
  if (a39 < 0)
    operator delete(a34);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&a32);
  a56 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a56);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::pair<std::string,quasar::PTree>::~pair(&a44);
  std::pair<std::string,quasar::PTree>::~pair(v62 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v62 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  quasar::SystemConfig::~SystemConfig(a17);
  quasar::Bitmap::~Bitmap(v61);
  _Unwind_Resume(a1);
}

void sub_1ADCAF3BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (*(char *)(v58 - 129) < 0)
    operator delete(*(void **)(v58 - 152));
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCAF814);
}

void sub_1ADCAF3D4()
{
  JUMPOUT(0x1ADCAF498);
}

void sub_1ADCAF3E4()
{
  JUMPOUT(0x1ADCAF854);
}

void sub_1ADCAF3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  void *v53;
  char v54;
  uint64_t v55;

  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a53);
  if (v54 < 0)
    operator delete(v53);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v55);
  JUMPOUT(0x1ADCAF734);
}

void sub_1ADCAF404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    JUMPOUT(0x1ADCAF4BCLL);
  JUMPOUT(0x1ADCAF4C0);
}

void sub_1ADCAF418()
{
  JUMPOUT(0x1ADCAF4C0);
}

void sub_1ADCAF474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  JUMPOUT(0x1ADCAF5CCLL);
}

void sub_1ADCAF4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF4B0);
}

void sub_1ADCAF4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void **a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  a53 = (void **)&a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a53);
  JUMPOUT(0x1ADCAF804);
}

void sub_1ADCAF4F8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  __p = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  JUMPOUT(0x1ADCAF734);
}

void sub_1ADCAF528()
{
  JUMPOUT(0x1ADCAF5DCLL);
}

void sub_1ADCAF530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a53);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  JUMPOUT(0x1ADCAF5CCLL);
}

void sub_1ADCAF540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    JUMPOUT(0x1ADCAF5C0);
  JUMPOUT(0x1ADCAF5C4);
}

void sub_1ADCAF568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t *a53)
{
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  a53 = &a41;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a53);
  JUMPOUT(0x1ADCAF734);
}

void sub_1ADCAF570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    JUMPOUT(0x1ADCAF5D8);
  JUMPOUT(0x1ADCAF5DCLL);
}

void sub_1ADCAF584(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCAF804);
}

void sub_1ADCAF5A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF5B4);
}

void sub_1ADCAF5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x1ADCAF7FCLL);
}

void sub_1ADCAF600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF804);
}

void sub_1ADCAF618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, quasar::SystemConfig *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t *a56)
{
  quasar::Bitmap *v56;
  uint64_t v57;

  if (a39 < 0)
    operator delete(a34);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](&a32);
  a56 = &a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a56);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::pair<std::string,quasar::PTree>::~pair(&a44);
  std::pair<std::string,quasar::PTree>::~pair(v57 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v57 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  quasar::SystemConfig::~SystemConfig(a17);
  quasar::Bitmap::~Bitmap(v56);
  _Unwind_Resume(a1);
}

void sub_1ADCAF620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a39 < 0)
    JUMPOUT(0x1ADCAF798);
  JUMPOUT(0x1ADCAF7FCLL);
}

void sub_1ADCAF628(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  if (SHIBYTE(a36) < 0)
    JUMPOUT(0x1ADCAF798);
  JUMPOUT(0x1ADCAF79CLL);
}

void sub_1ADCAF630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (a42 < 0)
    operator delete(a37);
  JUMPOUT(0x1ADCAF690);
}

void sub_1ADCAF648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a53);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a37);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  JUMPOUT(0x1ADCAF79CLL);
}

void sub_1ADCAF658()
{
  JUMPOUT(0x1ADCAF78CLL);
}

void sub_1ADCAF664()
{
  JUMPOUT(0x1ADCAF7FCLL);
}

void sub_1ADCAF6A0()
{
  JUMPOUT(0x1ADCAF784);
}

void sub_1ADCAF6A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF7FCLL);
}

void sub_1ADCAF6B8()
{
  JUMPOUT(0x1ADCAF80CLL);
}

void sub_1ADCAF6C8()
{
  JUMPOUT(0x1ADCAF7CCLL);
}

void sub_1ADCAF6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *__p,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;

  if (a64 < 0)
    operator delete(__p);
  if (a45 < 0)
    operator delete(a40);
  if (a39 < 0)
    operator delete(a34);
  JUMPOUT(0x1ADCAF7ECLL);
}

void sub_1ADCAF70C()
{
  JUMPOUT(0x1ADCAF750);
}

void sub_1ADCAF714()
{
  JUMPOUT(0x1ADCAF7C0);
}

void sub_1ADCAF720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, quasar::SystemConfig *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void **a56)
{
  quasar::Bitmap *v56;
  uint64_t v57;

  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)&a56);
  if (a39 < 0)
    operator delete(a34);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  a56 = (void **)&a40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a56);
  if (SLOBYTE(STACK[0x287]) < 0)
    operator delete((void *)STACK[0x270]);
  if (SLOBYTE(STACK[0x2A7]) < 0)
    operator delete((void *)STACK[0x290]);
  std::pair<std::string,quasar::PTree>::~pair((uint64_t)&a44);
  std::pair<std::string,quasar::PTree>::~pair(v57 - 248);
  quasar::PTree::~PTree((quasar::PTree *)(v57 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a11);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a12);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a15);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table(a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a14);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a13);
  quasar::SystemConfig::~SystemConfig(a17);
  quasar::Bitmap::~Bitmap(v56);
  _Unwind_Resume(a1);
}

void sub_1ADCAF768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF774);
}

void sub_1ADCAF7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a53);
  JUMPOUT(0x1ADCAF7B0);
}

void quasar::QuasarTextProc::modelKeyFromConfig(uint64_t a1@<X1>, std::string *a2@<X8>)
{
  std::vector<std::string>::pointer begin;
  std::string *end;
  std::vector<std::string>::pointer v6;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  std::string::size_type v36;
  std::vector<std::string> v37;

  std::string::basic_string[abi:ne180100]<0>(__p, "::");
  quasar::splitAndTrim((std::string *)a1, (char *)__p, (uint64_t *)&v37);
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  begin = v37.__begin_;
  end = v37.__end_;
  if ((std::vector<std::string>::pointer)((char *)v37.__end_ - (char *)v37.__begin_) == (std::vector<std::string>::pointer)24)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "*");
    v6 = v37.__end_;
    if (v37.__end_ >= v37.__end_cap_.__value_)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_ - (char *)v37.__begin_) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3) > v9)
        v9 = 0x5555555555555556 * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v37.__end_cap_.__value_ - (char *)v37.__begin_) >> 3) >= 0x555555555555555)
        v10 = 0xAAAAAAAAAAAAAAALL;
      else
        v10 = v9;
      *(_QWORD *)&v20 = &v37.__end_cap_;
      if (v10)
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v37.__end_cap_, v10);
      else
        v11 = 0;
      v12 = &v11[24 * v8];
      __p[0] = v11;
      __p[1] = v12;
      *((_QWORD *)&v19 + 1) = &v11[24 * v10];
      v13 = v35;
      *((_QWORD *)v12 + 2) = v36;
      *(_OWORD *)v12 = v13;
      v36 = 0;
      v35 = 0uLL;
      *(_QWORD *)&v19 = v12 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(&v37, (std::__split_buffer<std::string> *)__p);
      end = v37.__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
      v37.__end_ = end;
      if (SHIBYTE(v36) < 0)
      {
        operator delete((void *)v35);
        end = v37.__end_;
      }
    }
    else
    {
      v7 = v35;
      v37.__end_->__r_.__value_.__r.__words[2] = v36;
      *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
      end = v6 + 1;
      v37.__end_ = v6 + 1;
    }
    begin = v37.__begin_;
  }
  if ((char *)end - (char *)begin != 48)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Key does not match 'locale' or 'locale::keyboard': ", 51);
    v15 = *(char *)(a1 + 23);
    if (v15 >= 0)
      v16 = a1;
    else
      v16 = *(_QWORD *)a1;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a1 + 23);
    else
      v17 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  quasar::QuasarTextProc::modelKey((uint64_t)begin, (uint64_t *)&begin[1], a2);
  __p[0] = &v37;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADCAFABC()
{
  JUMPOUT(0x1ADCAFAC8);
}

void sub_1ADCAFAE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCAFAD8);
}

void quasar::QuasarTextProc::modelKey(uint64_t a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  uint64_t v6;
  int64_t size;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  std::string *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  std::string *v19;
  unsigned __int8 *v20;
  char *v21;
  int64_t v22;
  void *v23;
  char *v24;
  char *v25;
  void *v26;
  char *v27;
  int *v28;
  BOOL v29;
  int v30;
  int v31;
  int v33;
  _BYTE *v34;
  const void *v35;
  int v36;
  const std::string::value_type *v37;
  std::string::size_type v38;
  std::string *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  uint64_t v64;
  int *v65;
  _BYTE v66[32];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  std::string v82;
  std::string v83;

  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v83 = *(std::string *)a1;
  if (*((char *)a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v82, (const std::string::value_type *)*a2, a2[1]);
  else
    v82 = *(std::string *)a2;
  quasar::trim(&v83);
  quasar::trim(&v82);
  v6 = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  if ((v83.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v83.__r_.__value_.__r.__words[2]);
  else
    size = v83.__r_.__value_.__l.__size_;
  v8 = *(unsigned __int8 *)(a1 + 23);
  v9 = (char)v8;
  v10 = *(_QWORD *)(a1 + 8);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (size != v8)
    goto LABEL_92;
  v65 = *(int **)a1;
  if (v9 >= 0)
    v11 = (unsigned __int8 *)a1;
  else
    v11 = *(unsigned __int8 **)a1;
  if ((*((_BYTE *)&v83.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v83.__r_.__value_.__l.__data_, v11, v83.__r_.__value_.__l.__size_))
      goto LABEL_92;
  }
  else if (*((_BYTE *)&v83.__r_.__value_.__s + 23))
  {
    v12 = &v83;
    v13 = v11;
    while (v12->__r_.__value_.__s.__data_[0] == *v13)
    {
      v12 = (std::string *)((char *)v12 + 1);
      ++v13;
      if (!--v6)
        goto LABEL_23;
    }
LABEL_92:
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale cannot include leading/trailing whitespace: ", 51);
    v41 = *(char *)(a1 + 23);
    if (v41 >= 0)
      v42 = a1;
    else
      v42 = *(_QWORD *)a1;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(a1 + 23);
    else
      v43 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
  }
LABEL_23:
  v64 = v10;
  v14 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    v15 = v82.__r_.__value_.__l.__size_;
  v16 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  v17 = (char)v16;
  v62 = (unsigned __int8 *)a2[1];
  if ((char)v16 < 0)
    v16 = (unsigned __int8 *)a2[1];
  if ((unsigned __int8 *)v15 != v16)
  {
LABEL_99:
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v67 = 0u;
    memset(v66, 0, sizeof(v66));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Keyboard cannot include leading/trailing whitespace: ", 53);
    v45 = *((char *)a2 + 23);
    if (v45 >= 0)
      v46 = (uint64_t)a2;
    else
      v46 = *a2;
    if (v45 >= 0)
      v47 = *((unsigned __int8 *)a2 + 23);
    else
      v47 = a2[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, v46, v47);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
  }
  v63 = (unsigned __int8 *)*a2;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a2;
  else
    v18 = (unsigned __int8 *)*a2;
  if ((*((_BYTE *)&v82.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(v82.__r_.__value_.__l.__data_, v18, v82.__r_.__value_.__l.__size_))
      goto LABEL_99;
  }
  else if (*((_BYTE *)&v82.__r_.__value_.__s + 23))
  {
    v19 = &v82;
    v20 = v18;
    while (v19->__r_.__value_.__s.__data_[0] == *v20)
    {
      v19 = (std::string *)((char *)v19 + 1);
      ++v20;
      if (!--v14)
        goto LABEL_39;
    }
    goto LABEL_99;
  }
LABEL_39:
  if (size >= 2)
  {
    v21 = (char *)&v11[size];
    v22 = size;
    v23 = v11;
    do
    {
      v24 = (char *)memchr(v23, 58, v22 - 1);
      if (!v24)
        break;
      if (*(_WORD *)v24 == 14906)
      {
        if (v24 != v21 && v24 - (char *)v11 != -1)
        {
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale with separator '", 23);
          v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"::", 2);
          v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"' not supported: ", 17);
          v53 = *(char *)(a1 + 23);
          if (v53 >= 0)
            v54 = a1;
          else
            v54 = *(_QWORD *)a1;
          if (v53 >= 0)
            v55 = *(unsigned __int8 *)(a1 + 23);
          else
            v55 = *(_QWORD *)(a1 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, v54, v55);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
        }
        break;
      }
      v23 = v24 + 1;
      v22 = v21 - (_BYTE *)v23;
    }
    while (v21 - (_BYTE *)v23 >= 2);
  }
  if (v15 >= 2)
  {
    v25 = (char *)&v18[v15];
    v26 = v18;
    do
    {
      v27 = (char *)memchr(v26, 58, v15 - 1);
      if (!v27)
        break;
      if (*(_WORD *)v27 == 14906)
      {
        if (v27 != v25 && v27 - (char *)v18 != -1)
        {
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v70 = 0u;
          v71 = 0u;
          v68 = 0u;
          v69 = 0u;
          v67 = 0u;
          memset(v66, 0, sizeof(v66));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
          v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Keyboard with separator '", 25);
          v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)"::", 2);
          v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"' not supported: ", 17);
          v59 = *((char *)a2 + 23);
          if (v59 >= 0)
            v60 = (uint64_t)a2;
          else
            v60 = *a2;
          if (v59 >= 0)
            v61 = *((unsigned __int8 *)a2 + 23);
          else
            v61 = a2[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, v60, v61);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
        }
        break;
      }
      v26 = v27 + 1;
      v15 = v25 - (_BYTE *)v26;
    }
    while (v25 - (_BYTE *)v26 >= 2);
  }
  if (v9 < 0)
  {
    v28 = v65;
    v29 = v64 == 7;
  }
  else
  {
    v28 = (int *)a1;
    v29 = v9 == 7;
  }
  if (v29)
  {
    v30 = *v28;
    v31 = *(int *)((char *)v28 + 3);
    if (v30 == 1634100580 && v31 == 1953264993)
    {
      if (v17 < 0)
      {
        if (v62 != (unsigned __int8 *)1)
          goto LABEL_106;
        v33 = *v63;
      }
      else
      {
        if (v17 != 1)
          goto LABEL_106;
        v33 = v63;
      }
      if (v33 == 42)
        goto LABEL_71;
LABEL_106:
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      v67 = 0u;
      memset(v66, 0, sizeof(v66));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v66);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"Locale=", 7);
      v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"default", 7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" should only be used with keyboard=*", 36);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v66);
    }
  }
LABEL_71:
  std::string::basic_string[abi:ne180100]((uint64_t)v66, size + 2);
  if (v66[23] >= 0)
    v34 = v66;
  else
    v34 = *(_BYTE **)v66;
  if (size)
  {
    if (*(char *)(a1 + 23) >= 0)
      v35 = (const void *)a1;
    else
      v35 = *(const void **)a1;
    memmove(v34, v35, size);
  }
  strcpy(&v34[size], "::");
  v36 = *((char *)a2 + 23);
  if (v36 >= 0)
    v37 = (const std::string::value_type *)a2;
  else
    v37 = (const std::string::value_type *)*a2;
  if (v36 >= 0)
    v38 = *((unsigned __int8 *)a2 + 23);
  else
    v38 = a2[1];
  v39 = std::string::append((std::string *)v66, v37, v38);
  *a3 = *v39;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if ((v66[23] & 0x80000000) != 0)
    operator delete(*(void **)v66);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
}

void sub_1ADCB0154(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 137) < 0)
    operator delete(*(void **)(v1 - 160));
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

std::string *quasar::QuasarTextProc::getItn2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  _BYTE *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::string *result;
  __int128 *v12;
  std::string::size_type *v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v6 = *(char *)(a3 + 23);
  if (v6 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 1)
      goto LABEL_7;
    v7 = *(_BYTE **)a3;
  }
  else
  {
    v7 = (_BYTE *)a3;
    if (v6 != 1)
      goto LABEL_7;
  }
  if (*v7 == 42)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Keyboard=* is reserved for internal use");
    goto LABEL_29;
  }
LABEL_7:
  if (!*(_QWORD *)(a1 + 1608))
  {
    result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a4, "");
    a4[1].__r_.__value_.__r.__words[0] = 0;
    a4[1].__r_.__value_.__l.__size_ = 0;
    return result;
  }
  v8 = (_QWORD *)(a1 + 1584);
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)a3, (std::string *)__p);
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
  v10 = v9;
  if (SBYTE7(v21) < 0)
  {
    operator delete(__p[0]);
    if (!v10)
    {
LABEL_13:
      std::string::basic_string[abi:ne180100]<0>(v18, "*");
      quasar::QuasarTextProc::modelKey(a2, (uint64_t *)v18, (std::string *)__p);
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
      if (v19 < 0)
      {
        operator delete(v18[0]);
        if (v10)
          goto LABEL_17;
      }
      else if (v10)
      {
        goto LABEL_17;
      }
      std::string::basic_string[abi:ne180100]<0>(v18, "default");
      std::string::basic_string[abi:ne180100]<0>(v16, "*");
      quasar::QuasarTextProc::modelKey((uint64_t)v18, (uint64_t *)v16, (std::string *)__p);
      v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v8, (unsigned __int8 *)__p);
      if (SBYTE7(v21) < 0)
        operator delete(__p[0]);
      if (v17 < 0)
        operator delete(v16[0]);
      if (v19 < 0)
        operator delete(v18[0]);
      if (v14)
      {
        v12 = (__int128 *)(v14 + 16);
        v13 = (std::string::size_type *)(v14 + 40);
        return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a4, v12, v13);
      }
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"There are itn2 models, but cannot find one for locale=", 54);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v15, a2);
LABEL_29:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  else if (!v9)
  {
    goto LABEL_13;
  }
LABEL_17:
  v12 = (__int128 *)(v10 + 16);
  v13 = (std::string::size_type *)(v10 + 40);
  return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a4, v12, v13);
}

void sub_1ADCB03D0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
}

void sub_1ADCB0440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    JUMPOUT(0x1ADCB0450);
  JUMPOUT(0x1ADCB0454);
}

std::string *quasar::QuasarTextProc::getPostItnHammer@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, std::string *a5@<X8>)
{
  int v7;
  _BYTE *v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  __int128 *v16;
  std::string::size_type *v17;
  unsigned __int8 *v18;
  std::string *result;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v7 = *(char *)(a3 + 23);
  if (v7 < 0)
  {
    if (*(_QWORD *)(a3 + 8) != 1)
      goto LABEL_7;
    v8 = *(_BYTE **)a3;
  }
  else
  {
    v8 = (_BYTE *)a3;
    if (v7 != 1)
      goto LABEL_7;
  }
  if (*v8 == 42)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Keyboard=* is reserved for internal use");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_7:
  v9 = *(char *)(a4 + 23);
  if (v9 < 0)
  {
    if (*(_QWORD *)(a4 + 8) != 15)
    {
LABEL_15:
      v13 = (_QWORD *)(a1 + 1624);
      goto LABEL_22;
    }
    a4 = *(_QWORD *)a4;
  }
  else if (v9 != 15)
  {
    goto LABEL_15;
  }
  v10 = 0x706F73742D69746ELL;
  v11 = bswap64(*(_QWORD *)a4);
  if (v11 == 0x706F73742D69746ELL
    && (v10 = 0x6E2D68616D6D6572, v11 = bswap64(*(_QWORD *)(a4 + 7)), v11 == 0x6E2D68616D6D6572))
  {
    v12 = 0;
  }
  else if (v11 < v10)
  {
    v12 = -1;
  }
  else
  {
    v12 = 1;
  }
  if (v12)
    v13 = (_QWORD *)(a1 + 1624);
  else
    v13 = (_QWORD *)(a1 + 1664);
LABEL_22:
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)a3, (std::string *)__p);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  v15 = v14;
  if (SBYTE7(v25) < 0)
  {
    operator delete(__p[0]);
    if (v15)
      goto LABEL_24;
  }
  else if (v14)
  {
LABEL_24:
    v16 = (__int128 *)(v15 + 16);
    v17 = (std::string::size_type *)(v15 + 40);
    return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a5, v16, v17);
  }
  std::string::basic_string[abi:ne180100]<0>(v22, "*");
  quasar::QuasarTextProc::modelKey(a2, (uint64_t *)v22, (std::string *)__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (!v18)
      goto LABEL_32;
LABEL_38:
    v16 = (__int128 *)(v18 + 16);
    v17 = (std::string::size_type *)(v18 + 40);
    return std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(a5, v16, v17);
  }
  if (v18)
    goto LABEL_38;
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(v22, "default");
  std::string::basic_string[abi:ne180100]<0>(v20, "*");
  quasar::QuasarTextProc::modelKey((uint64_t)v22, (uint64_t *)v20, (std::string *)__p);
  v18 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v13, (unsigned __int8 *)__p);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  if (v23 < 0)
  {
    operator delete(v22[0]);
    if (v18)
      goto LABEL_38;
  }
  else if (v18)
  {
    goto LABEL_38;
  }
  result = (std::string *)std::string::basic_string[abi:ne180100]<0>(a5, "");
  a5[1].__r_.__value_.__r.__words[0] = 0;
  a5[1].__r_.__value_.__l.__size_ = 0;
  return result;
}

void quasar::QuasarTextProc::formatWords(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const void **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10, uint64_t *a11)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  quasar::QsrText *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void ***v30;
  uint64_t v31;
  uint64_t v32;
  void **v33;
  void **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void ***v56;

  if (*(_QWORD *)a2 == *(_QWORD *)(a2 + 8))
  {
    if (quasar::gLogLevel >= 4)
    {
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      v41 = 0u;
      v42 = 0u;
      *(_OWORD *)__p = 0u;
      v40 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty ITN input tokens", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
    quasar::QuasarTextProc::getItn2(a1, a5, a6, (std::string *)__p);
    if (*((_QWORD *)&v40 + 1))
    {
      quasar::InverseTextNormalizer::run(*((int **)&v40 + 1), (__int128 **)a2, a11, a7, a8, a9);
    }
    else if (*(_QWORD *)(a1 + 1552))
    {
      v36 = 0;
      v37 = 0;
      v38 = 0;
      v20 = quasar::QsrText::SingletonInstance(0);
      quasar::QsrText::qsrToHatTokens(v20, (__int128 **)a2, &v36, 0);
      v33 = 0;
      v34 = 0;
      v35 = 0;
      v30 = 0;
      v31 = 0;
      v32 = 0;
      v21 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v30, &v36);
      v22 = *(_QWORD *)(a1 + 1552);
      v31 = v21;
      v23 = (quasar::QsrText *)quasar::QuasarTextProcImpl::run(v22, (uint64_t *)&v30, (uint64_t *)&v33, a10);
      if ((_DWORD)v23 || (v26 = (uint64_t *)v33, v33 == v34))
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        v24 = quasar::QsrText::SingletonInstance(v23);
        quasar::QsrText::decodeQsrTextTokens(v24, (uint64_t *)a2, a9);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, *v26, v26[1], 0x6DB6DB6DB6DB6DB7 * ((v26[1] - *v26) >> 5));
      }
      v56 = (void ***)&v30;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v56);
      v30 = &v33;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
      v33 = (void **)&v36;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v33);
    }
    else
    {
      v25 = *(_QWORD *)(a1 + 1720);
      if (v25)
      {
        v36 = 0;
        v37 = 0;
        v38 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, const void **, uint64_t, unsigned __int8, uint64_t *))(*(_QWORD *)v25 + 16))(v25, a2, a3, a4, a5, a6, a7, a8, a10, &v36);
        v33 = (void **)&v36;
        std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&v33);
      }
      else
      {
        *a9 = 0;
        a9[1] = 0;
        a9[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a9, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5));
      }
    }
    v27 = (std::__shared_weak_count *)v41;
    if ((_QWORD)v41)
    {
      v28 = (unint64_t *)(v41 + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (SBYTE7(v40) < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADCB0A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::formatWordsLat(uint64_t a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, const void **a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, unsigned __int8 a10, uint64_t *a11)
{
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  quasar::QsrText *v24;
  __int128 **v25;
  __int128 **v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  quasar::QsrText *v30;
  uint64_t *i;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  void **v40[3];
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  unint64_t v44;
  void *__p[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  void ***v62;

  if (*a2 == a2[1])
  {
    if (quasar::gLogLevel >= 4)
    {
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty ITN input tokens", 22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a9 = 0;
    a9[1] = 0;
    a9[2] = 0;
  }
  else
  {
    quasar::QuasarTextProc::getItn2(a1, a5, a6, (std::string *)__p);
    if (*((_QWORD *)&v46 + 1))
    {
      std::vector<std::vector<quasar::Token>>::vector(a9, 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
      v20 = *a2;
      if (a2[1] != *a2)
      {
        v21 = 0;
        v22 = 0;
        do
        {
          quasar::InverseTextNormalizer::run(*((int **)&v46 + 1), (__int128 **)&v20[v21], a11, a7, a8, (uint64_t *)&v43);
          v23 = *a9 + v21 * 8;
          std::vector<quasar::Token>::__vdeallocate((void **)v23);
          *(_OWORD *)v23 = v43;
          *(_QWORD *)(v23 + 16) = v44;
          v43 = 0uLL;
          v44 = 0;
          *(_QWORD *)&v41 = &v43;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
          ++v22;
          v20 = *a2;
          v21 += 3;
        }
        while (0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2) > v22);
      }
    }
    else
    {
      v24 = *(quasar::QsrText **)(a1 + 1552);
      if (v24)
      {
        v43 = 0uLL;
        v44 = 0;
        v25 = (__int128 **)*a2;
        v26 = (__int128 **)a2[1];
        if (*a2 != (uint64_t *)v26)
        {
          do
          {
            v41 = 0uLL;
            v42 = 0;
            v27 = quasar::QsrText::SingletonInstance(v24);
            quasar::QsrText::qsrToHatTokens(v27, v25, (uint64_t *)&v41, 0);
            v28 = (_QWORD *)*((_QWORD *)&v43 + 1);
            if (*((_QWORD *)&v43 + 1) >= v44)
            {
              v29 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v43, (uint64_t *)&v41);
            }
            else
            {
              **((_QWORD **)&v43 + 1) = 0;
              v28[1] = 0;
              v28[2] = 0;
              std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v28, v41, *((uint64_t *)&v41 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v41 + 1) - v41) >> 5));
              v29 = (uint64_t)(v28 + 3);
            }
            *((_QWORD *)&v43 + 1) = v29;
            v40[0] = (void **)&v41;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](v40);
            v25 += 3;
          }
          while (v25 != v26);
          v24 = *(quasar::QsrText **)(a1 + 1552);
        }
        v41 = 0uLL;
        v42 = 0;
        v30 = (quasar::QsrText *)quasar::QuasarTextProcImpl::run((uint64_t)v24, (uint64_t *)&v43, (uint64_t *)&v41, a10);
        if ((_DWORD)v30)
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          v32 = *a2;
          for (i = a2[1]; v32 != i; v32 += 3)
          {
            memset(v40, 0, sizeof(v40));
            v33 = quasar::QsrText::SingletonInstance(v30);
            quasar::QsrText::decodeQsrTextTokens(v33, v32, (uint64_t *)v40);
            v34 = a9[1];
            if (v34 >= a9[2])
            {
              v35 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(a9, (uint64_t *)v40);
            }
            else
            {
              std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>((uint64_t)a9, (uint64_t *)v40);
              v35 = v34 + 24;
            }
            a9[1] = v35;
            v62 = v40;
            std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
          }
        }
        else
        {
          *(_OWORD *)a9 = v41;
          a9[2] = v42;
          v42 = 0;
          v41 = 0uLL;
        }
        v40[0] = (void **)&v41;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v40);
        *(_QWORD *)&v41 = &v43;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 1720);
        if (v36)
        {
          v43 = 0uLL;
          v44 = 0;
          (*(void (**)(uint64_t, uint64_t **, uint64_t, uint64_t, uint64_t, uint64_t, const void **, uint64_t, unsigned __int8, __int128 *))(*(_QWORD *)v36 + 24))(v36, a2, a3, a4, a5, a6, a7, a8, a10, &v43);
          *(_QWORD *)&v41 = &v43;
          std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)&v41);
        }
        else
        {
          *a9 = 0;
          a9[1] = 0;
          a9[2] = 0;
          std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a9, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
        }
      }
    }
    v37 = (std::__shared_weak_count *)v47;
    if ((_QWORD)v47)
    {
      v38 = (unint64_t *)(v47 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if (SBYTE7(v46) < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADCB0EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v8 = va_arg(va1, void **);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>>::~pair((uint64_t)va1);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::applyLatticeProcessor(quasar::QsrText *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void ***v20;

  v4 = a3;
  if (*((_QWORD *)a1 + 213))
  {
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v8 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v14, a2);
    v9 = *((_QWORD *)a1 + 213);
    v15 = v8;
    v10 = quasar::QuasarTextProcImpl::run(v9, (uint64_t *)&v14, (uint64_t *)&v17, v4);
    v11 = v17;
    if (v17 == v18)
      v11 = a2;
    if (v10)
      v11 = a2;
    a4[1] = 0;
    a4[2] = 0;
    *a4 = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *v11, v11[1], 0x6DB6DB6DB6DB6DB7 * ((v11[1] - *v11) >> 5));
    v20 = &v14;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v20);
    v14 = (void **)&v17;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  else if (*((_QWORD *)a1 + 201))
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    v12 = quasar::QsrText::SingletonInstance(a1);
    quasar::QsrText::removeW00(v12, (__int128 **)a2, a4);
  }
  else
  {
    v13 = *((_QWORD *)a1 + 215);
    if (v13)
    {
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a2, a3);
    }
    else
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a4, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    }
  }
}

void sub_1ADCB10FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProc::sanitizer(uint64_t a1, uint64_t a2, std::vector<std::string> *this)
{
  uint64_t result;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  __int128 v14;
  std::string *v15;
  int v16;
  void *__p[2];
  std::string::size_type v18;
  _BYTE __v[48];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  if (*(char *)(a2 + 23) < 0)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_3;
LABEL_6:
    if (quasar::gLogLevel >= 4)
    {
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      memset(__v, 0, sizeof(__v));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__v);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__v, (uint64_t)"empty sanitizer input tokens", 28);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__v);
    }
    std::vector<std::string>::resize(this, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    value = this->__end_cap_.__value_;
    end = this->__end_;
    if (end >= value)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
      v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)this->__begin_) >> 3);
      if (2 * v10 > v9)
        v9 = 2 * v10;
      if (v10 >= 0x555555555555555)
        v11 = 0xAAAAAAAAAAAAAAALL;
      else
        v11 = v9;
      *(_QWORD *)&__v[32] = &this->__end_cap_;
      if (v11)
        v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&this->__end_cap_, v11);
      else
        v12 = 0;
      v13 = &v12[24 * v8];
      *(_QWORD *)__v = v12;
      *(_QWORD *)&__v[8] = v13;
      *(_QWORD *)&__v[24] = &v12[24 * v11];
      v14 = *(_OWORD *)__p;
      *((_QWORD *)v13 + 2) = v18;
      *(_OWORD *)v13 = v14;
      __p[1] = 0;
      v18 = 0;
      __p[0] = 0;
      *(_QWORD *)&__v[16] = v13 + 24;
      std::vector<std::string>::__swap_out_circular_buffer(this, (std::__split_buffer<std::string> *)__v);
      v15 = this->__end_;
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__v);
      v16 = SHIBYTE(v18);
      this->__end_ = v15;
      if (v16 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v7 = *(_OWORD *)__p;
      end->__r_.__value_.__r.__words[2] = v18;
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
      this->__end_ = end + 1;
    }
    return 1;
  }
  if (!*(_BYTE *)(a2 + 23))
    goto LABEL_6;
LABEL_3:
  result = *(_QWORD *)(a1 + 1568);
  if (!result)
    return result;
  quasar::QuasarTextProcImpl::run(result, (const std::string *)a2, (uint64_t *)this);
  return 1;
}

void sub_1ADCB1314(_Unwind_Exception *a1, void *__p, uint64_t a3, int a4, __int16 a5, char a6, char a7, std::__split_buffer<std::wstring> *a8, uint64_t a9, void *__pa, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a16);
  if (a15 < 0)
    operator delete(__pa);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::emojiPhraseWithoutKeyword(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned __int8 *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12[2];
  char v13;
  void *p_p;
  uint64_t v15;
  uint64_t v16;
  std::string __p;
  void **v18;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a3, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
  std::string::basic_string[abi:ne180100]<0>(&p_p, "emoji-keyword-remove-fst-1");
  std::string::basic_string[abi:ne180100]<0>(v12, "*");
  quasar::QuasarTextProc::modelKey((uint64_t)&p_p, (uint64_t *)v12, &__p);
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 1624), (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v13 < 0)
    operator delete(v12[0]);
  if (SHIBYTE(v16) < 0)
  {
    operator delete(p_p);
    if (!v5)
      return;
  }
  else if (!v5)
  {
    return;
  }
  v6 = (void *)*((_QWORD *)v5 + 5);
  if (v6)
  {
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
    v12[0] = v6;
    v12[1] = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    memset(&__p, 0, sizeof(__p));
    p_p = 0;
    v15 = 0;
    v16 = 0;
    v15 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&p_p, a3);
    if (!quasar::QuasarTextProcImpl::run((uint64_t)v6, (uint64_t *)&p_p, (uint64_t *)&__p, 0)
      && (uint64_t *)__p.__r_.__value_.__l.__data_ != a3
      && __p.__r_.__value_.__r.__words[0] != __p.__r_.__value_.__l.__size_)
    {
      std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a3, *(_QWORD *)__p.__r_.__value_.__l.__data_, *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8), 0x6DB6DB6DB6DB6DB7* ((uint64_t)(*(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)__p.__r_.__value_.__l.__data_) >> 5));
    }
    v18 = &p_p;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v18);
    p_p = &__p;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1ADCB1528(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void **p_p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v27 - 40) = v26;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v27 - 40));
  p_p = &__p;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::postItnHammer(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  std::string *v26;
  std::string::size_type size;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type v32;
  _QWORD *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  void **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52[2];
  char v53;
  void *v54[2];
  char v55;
  void **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  std::string v62;
  __int128 v63;
  std::string v64;
  void *v65;
  std::__shared_weak_count *v66;
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  if (*a2 != a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "post-itn-hammer");
    quasar::QuasarTextProc::getPostItnHammer(a1, a3, a4, (unint64_t)__p, &v64);
    if (SBYTE7(v68) < 0)
    {
      operator delete(__p[0]);
      if (a6)
      {
LABEL_4:
        std::string::basic_string[abi:ne180100]<0>(__p, "emoji-hammer");
        quasar::QuasarTextProc::getPostItnHammer(a1, a3, a4, (unint64_t)__p, &v62);
        if (SBYTE7(v68) < 0)
          operator delete(__p[0]);
        goto LABEL_11;
      }
    }
    else if (a6)
    {
      goto LABEL_4;
    }
    std::string::basic_string[abi:ne180100]<0>(&v62, "");
    v63 = 0uLL;
LABEL_11:
    if ((a5 & 1) == 0 && quasar::gLogLevel >= 4)
    {
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v70 = 0u;
      v71 = 0u;
      v68 = 0u;
      v69 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"locale=", 7);
      v15 = *(char *)(a3 + 23);
      if (v15 >= 0)
        v16 = a3;
      else
        v16 = *(_QWORD *)a3;
      if (v15 >= 0)
        v17 = *(unsigned __int8 *)(a3 + 23);
      else
        v17 = *(_QWORD *)(a3 + 8);
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" keyboard=\"", 11);
      v20 = *(char *)(a4 + 23);
      if (v20 >= 0)
        v21 = a4;
      else
        v21 = *(_QWORD *)a4;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(a4 + 23);
      else
        v22 = *(_QWORD *)(a4 + 8);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"\"", 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" postItnHammer=\"", 16);
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v26 = &v64;
      else
        v26 = (std::string *)v64.__r_.__value_.__r.__words[0];
      if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
      else
        size = v64.__r_.__value_.__l.__size_;
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, size);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\"", 1);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" emojiHammer=\"", 14);
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v62;
      else
        v31 = (std::string *)v62.__r_.__value_.__r.__words[0];
      if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
      else
        v32 = v62.__r_.__value_.__l.__size_;
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\"", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    *a7 = 0;
    a7[1] = 0;
    a7[2] = 0;
    std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(a7, *a2, a2[1], 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 5));
    __p[0] = v65;
    __p[1] = v66;
    if (v66)
    {
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v35 = __ldxr(p_shared_owners);
      while (__stxr(v35 + 1, p_shared_owners));
    }
    v68 = v63;
    if (*((_QWORD *)&v63 + 1))
    {
      v36 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
    }
    v38 = 0;
    v39 = __p;
    do
    {
      if (*v39)
      {
        v59 = 0;
        v60 = 0;
        v61 = 0;
        v56 = 0;
        v57 = 0;
        v58 = 0;
        v40 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v56, a7);
        v41 = (uint64_t)*v39;
        v57 = v40;
        if (!quasar::QuasarTextProcImpl::run(v41, (uint64_t *)&v56, (uint64_t *)&v59, a5))
        {
          v42 = v59;
          if (v59 != v60)
          {
            v43 = *v59;
            v44 = v59[1];
            if (*v59 != v44)
            {
              do
              {
                std::string::basic_string[abi:ne180100]<0>(v54, "\x1F");
                std::string::basic_string[abi:ne180100]<0>(v52, "");
                quasar::replaceAll(v43, (uint64_t)v54, (char *)v52);
                if (v53 < 0)
                  operator delete(v52[0]);
                if (v55 < 0)
                  operator delete(v54[0]);
                v43 += 224;
              }
              while (v43 != v44);
              v42 = v59;
            }
            if (v42 != a7)
              std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)a7, *v42, v42[1], 0x6DB6DB6DB6DB6DB7 * ((v42[1] - *v42) >> 5));
          }
        }
        v54[0] = &v56;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v54);
        v56 = (void **)&v59;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&v56);
      }
      ++v38;
      v39 = &__p[2 * v38];
    }
    while (v38 != 2);
    for (i = 2; i != -2; i -= 2)
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p[i]);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v63 + 1);
    if (*((_QWORD *)&v63 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v63 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    v49 = v66;
    if (v66)
    {
      v50 = (unint64_t *)&v66->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v64.__r_.__value_.__l.__data_);
    return;
  }
  if (quasar::gLogLevel >= 4)
  {
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"empty postItnHammer input tokens", 32);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  *a7 = 0;
  a7[1] = 0;
  a7[2] = 0;
}

void sub_1ADCB1AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

BOOL quasar::QuasarTextProc::qsrSanitizerExists(quasar::QuasarTextProc *this)
{
  return *((_QWORD *)this + 196) != 0;
}

BOOL quasar::QuasarTextProc::isEmojiSupportedLocale(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *v9[2];
  char v10;
  std::string __p;
  uint64_t v12;
  std::__shared_weak_count *v13;

  std::string::basic_string[abi:ne180100]<0>(v9, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v9, &__p);
  v5 = v12;
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v10 < 0)
    operator delete(v9[0]);
  return v5 != 0;
}

void sub_1ADCB1C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::QuasarTextProc::getEndsOfSentencePunctuations(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  quasar::InverseTextNormalizer *v7;
  __n128 v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11[2];
  char v12;
  std::string __p;
  quasar::InverseTextNormalizer *v14;
  std::__shared_weak_count *v15;
  quasar::InverseTextNormalizer *v16;
  std::__shared_weak_count *v17;

  std::string::basic_string[abi:ne180100]<0>(v11, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v11, &__p);
  v7 = v14;
  v6 = v15;
  v16 = v14;
  v17 = v15;
  v14 = 0;
  v15 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (v7)
    {
LABEL_5:
      v8.n128_f64[0] = quasar::InverseTextNormalizer::getEndsOfSentencePunctuations(v7, a3);
      if (!v6)
        return;
      goto LABEL_9;
    }
  }
  else if (v7)
  {
    goto LABEL_5;
  }
  v8 = 0uLL;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_DWORD *)(a3 + 32) = 1065353216;
  if (!v6)
    return;
LABEL_9:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *, __n128))v6->__on_zero_shared)(v6, v8);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1ADCB1D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 - 48);
  _Unwind_Resume(a1);
}

uint64_t quasar::QuasarTextProc::qsrTextProcExists(quasar::QuasarTextProc *this, const quasar::SystemConfig *a2)
{
  BOOL hasParam;
  BOOL v4;
  uint64_t Ptree;
  __int128 v6;
  uint64_t v7;
  void *v9[2];
  char v10;
  void *__p;
  std::string v12;
  std::string v13;
  char v14;

  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  quasar::SystemConfig::enforceMinVersion((uint64_t)this, 10, 0, (uint64_t)&__p);
  if (v12.__r_.__value_.__s.__data_[15] < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "text-proc");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)this, (uint64_t)&__p);
  v4 = hasParam;
  if (v12.__r_.__value_.__s.__data_[15] < 0)
  {
    operator delete(__p);
    if (v4)
      goto LABEL_5;
    return 0;
  }
  if (!hasParam)
    return 0;
LABEL_5:
  std::string::basic_string[abi:ne180100]<0>(v9, "text-proc");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)this, (uint64_t)v9);
  LODWORD(__p) = *(_DWORD *)Ptree;
  if (*(char *)(Ptree + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v12, *(const std::string::value_type **)(Ptree + 8), *(_QWORD *)(Ptree + 16));
  }
  else
  {
    v6 = *(_OWORD *)(Ptree + 8);
    v12.__r_.__value_.__r.__words[2] = *(_QWORD *)(Ptree + 24);
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = v6;
  }
  memset(&v13, 0, sizeof(v13));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v13, *(_QWORD *)(Ptree + 32), *(_QWORD *)(Ptree + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(Ptree + 40) - *(_QWORD *)(Ptree + 32)) >> 3));
  v14 = *(_BYTE *)(Ptree + 56);
  if (v10 < 0)
    operator delete(v9[0]);
  v7 = quasar::PTree::isLeaf((quasar::PTree *)&__p) ^ 1;
  quasar::PTree::~PTree((quasar::PTree *)&__p);
  return v7;
}

void sub_1ADCB1F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25)
{
  quasar::PTree::~PTree((quasar::PTree *)&a16);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::updateHammeredItnWithEmojiAlternativeName(uint64_t a1, std::string *a2, std::string *a3)
{
  std::string::__raw *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v8;
  std::string::size_type v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BOOL4 v18;
  _BOOL4 v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  const void **v24;
  size_t v25;
  size_t v26;
  void **v27;
  const void *v28;
  char *v29;
  void **v30;
  std::string::size_type v31;
  uint64_t v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  int v36;
  std::string::__raw *v37;
  void *v38[2];
  unsigned __int8 v39;
  std::string __p;
  char **v41;
  std::__shared_weak_count *v42;
  char *v43;
  char *v44;

  v4 = (std::string::__raw *)a2;
  v41 = 0;
  v42 = 0;
  quasar::getPreItnTokenToPostItnCharAlignment(a2, a3, &v41, (uint64_t *)&v43);
  v5 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v44;
  if (v44 != v43)
  {
    v9 = a3->__r_.__value_.__r.__words[0];
    if (a3->__r_.__value_.__l.__size_ != a3->__r_.__value_.__r.__words[0])
    {
      v10 = 0;
      v11 = 0;
      v36 = 0;
      v12 = 0;
      while (1)
      {
        ++v11;
        while (quasar::Token::isAutoPunctuation((quasar::Token *)(v9 + 224 * v10)))
        {
          v8 = v43;
          if (v12 < (v44 - v43) >> 4)
          {
            v10 = v11;
            v9 = a3->__r_.__value_.__r.__words[0];
            if (0x6DB6DB6DB6DB6DB7
               * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 5) > (unint64_t)v11++)
              continue;
          }
          goto LABEL_62;
        }
        v14 = a3->__r_.__value_.__r.__words[0] + 224 * v10;
        if (*(char *)(v14 + 23) < 0)
          v15 = *(_QWORD *)(v14 + 8);
        else
          LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
        v16 = *(_DWORD *)&v43[16 * v12 + 12] - *(_DWORD *)&v43[16 * v12 + 8];
        if (v16 != (_DWORD)v15 && v16 + 1 != (_DWORD)v15)
          goto LABEL_58;
        std::string::basic_string[abi:ne180100]<0>(&__p, "spokenemoji|");
        v18 = quasar::startsWith((unsigned __int8 *)v14, (unsigned __int8 *)&__p);
        v19 = v18;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v19)
          {
LABEL_26:
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            v20 = &v43[16 * v12];
            v21 = *(unsigned int *)v20;
            LODWORD(v20) = *((_DWORD *)v20 + 1);
            if (v21 < v20)
            {
              v22 = 224 * v21;
              v37 = v4;
              do
              {
                v23 = v12;
                v24 = (const void **)(v4->__words[0] + v22);
                v25 = *((unsigned __int8 *)v24 + 44);
                if (*((char *)v24 + 23) >= 0)
                  v26 = *((unsigned __int8 *)v24 + 23);
                else
                  v26 = (size_t)v24[1];
                std::string::basic_string[abi:ne180100]((uint64_t)v38, v26 + v25);
                if ((v39 & 0x80u) == 0)
                  v27 = v38;
                else
                  v27 = (void **)v38[0];
                if (v26)
                {
                  if (*((char *)v24 + 23) >= 0)
                    v28 = v24;
                  else
                    v28 = *v24;
                  memmove(v27, v28, v26);
                }
                v29 = (char *)v27 + v26;
                if ((_DWORD)v25)
                  memcpy(v29, " ", v25);
                v29[v25] = 0;
                if ((v39 & 0x80u) == 0)
                  v30 = v38;
                else
                  v30 = (void **)v38[0];
                if ((v39 & 0x80u) == 0)
                  v31 = v39;
                else
                  v31 = (std::string::size_type)v38[1];
                std::string::append(&__p, (const std::string::value_type *)v30, v31);
                v12 = v23;
                v4 = v37;
                if ((char)v39 < 0)
                  operator delete(v38[0]);
                ++v21;
                v20 = (char *)*(unsigned int *)&v43[16 * v23 + 4];
                v22 += 224;
              }
              while (v21 < (unint64_t)v20);
            }
            v32 = v4->__words[0] + 224 * (int)v20;
            v33 = *(char *)(v32 + 23);
            if (v33 >= 0)
              v34 = (const std::string::value_type *)v32;
            else
              v34 = *(const std::string::value_type **)v32;
            if (v33 >= 0)
              v35 = *(unsigned __int8 *)(v32 + 23);
            else
              v35 = *(_QWORD *)(v32 + 8);
            std::string::append(&__p, v34, v35);
            std::string::operator=((std::string *)(a3->__r_.__value_.__r.__words[0] + 224 * v10 + 176), &__p);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        else if (v18)
        {
          goto LABEL_26;
        }
LABEL_58:
        v12 = (v36 + 1);
        v8 = v43;
        if (v12 < (v44 - v43) >> 4)
        {
          v10 = v11;
          v9 = a3->__r_.__value_.__r.__words[0];
          ++v36;
          if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a3->__r_.__value_.__l.__size_ - a3->__r_.__value_.__r.__words[0]) >> 5) > (unint64_t)v11)
            continue;
        }
        goto LABEL_62;
      }
    }
    v8 = v43;
  }
LABEL_62:
  if (v8)
  {
    v44 = v8;
    operator delete(v8);
  }
}

void sub_1ADCB22D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::QuasarTextProc::isEnableAutoPunctuation(uint64_t a1, uint64_t a2, const void **a3, char a4)
{
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t isEnableAutoPunctuation;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v14[2];
  char v15;
  std::string __p;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  std::string::basic_string[abi:ne180100]<0>(v14, "");
  quasar::QuasarTextProc::getItn2(a1, a2, (uint64_t)v14, &__p);
  v9 = v17;
  v8 = v18;
  v19 = v17;
  v20 = v18;
  v17 = 0;
  v18 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v15 & 0x80000000) == 0)
  {
    if (v9)
      goto LABEL_5;
LABEL_8:
    isEnableAutoPunctuation = 0;
    if (!v8)
      return isEnableAutoPunctuation;
    goto LABEL_9;
  }
  operator delete(v14[0]);
  if (!v9)
    goto LABEL_8;
LABEL_5:
  isEnableAutoPunctuation = quasar::InverseTextNormalizer::isEnableAutoPunctuation(v9, a3, a4);
  if (!v8)
    return isEnableAutoPunctuation;
LABEL_9:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return isEnableAutoPunctuation;
}

void sub_1ADCB2424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 - 48);
  _Unwind_Resume(a1);
}

void quasar::QuasarTextProc::~QuasarTextProc(quasar::QuasarTextProc *this)
{
  quasar::SystemConfig *v2;

  *(_QWORD *)this = &off_1E5D354B8;
  v2 = (quasar::QuasarTextProc *)((char *)this + 8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1720);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1704);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1664);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1624);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1584);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1568);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1552);
  quasar::SystemConfig::~SystemConfig(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::SystemConfig *v2;

  *(_QWORD *)this = &off_1E5D354B8;
  v2 = (quasar::QuasarTextProc *)((char *)this + 8);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1720);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1704);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1664);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1624);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>>>::~__hash_table((uint64_t)this + 1584);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1568);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1552);
  quasar::SystemConfig::~SystemConfig(v2);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::Hammer::~Hammer(void **this)
{
  void **v2;

  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  v2 = this + 5;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void quasar::HammerSeqLat::~HammerSeqLat(void **this)
{
  void **v2;

  v2 = this + 14;
  std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 11;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v2);
  quasar::Hammer::~Hammer(this);
}

std::string *std::pair<std::string,std::shared_ptr<quasar::InverseTextNormalizer>>::pair[abi:ne180100]<true,0>(std::string *this, __int128 *a2, std::string::size_type *a3)
{
  __int128 v5;
  std::string::size_type v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  v6 = a3[1];
  this[1].__r_.__value_.__r.__words[0] = *a3;
  this[1].__r_.__value_.__l.__size_ = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return this;
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Read(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  char v6;
  fst::MappedFile *v7;
  fst *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  fst::MappedFile *v15;
  fst *v17;
  _QWORD *v18;
  int v19;
  fst *v20;
  _QWORD *v21;
  int v22;
  fst *v23;
  _QWORD *v24;
  int v25;
  void *__p[2];
  char v28;
  char v29;
  _BYTE v30[8];
  void *v31[2];
  void *v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = operator new();
  fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(v4);
  v34 = 0u;
  v33 = 0u;
  *(_OWORD *)v32 = 0u;
  *(_OWORD *)v31 = 0u;
  v36 = 0;
  v37 = 0;
  v35 = -1;
  if ((fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ReadHeader(v4, a1, a2, 1, (uint64_t)v30) & 1) != 0)
  {
    *(_DWORD *)(v4 + 112) = v35;
    v5 = v36;
    *(_DWORD *)(v4 + 96) = v36;
    *(_QWORD *)(v4 + 104) = v37;
    v6 = BYTE4(v34);
    if ((_DWORD)v34 == 1)
    {
      v6 = BYTE4(v34) | 4;
      DWORD1(v34) |= 4u;
    }
    if ((v6 & 4) != 0)
    {
      if (!fst::AlignInput())
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v20 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v21 = (_QWORD *)fst::cerr(v20);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"ConstFst::Read: Alignment failed: ", 34);
        v22 = *(char *)(a2 + 23);
        if (v22 >= 0)
          v13 = a2;
        else
          v13 = *(_QWORD *)a2;
        if (v22 >= 0)
          v14 = *(unsigned __int8 *)(a2 + 23);
        else
          v14 = *(_QWORD *)(a2 + 8);
LABEL_43:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
        if (v28 < 0)
          operator delete(__p[0]);
        goto LABEL_45;
      }
      v5 = *(_DWORD *)(v4 + 96);
    }
    v7 = fst::MappedFile::Map((uint64_t)a1, a2, 20 * v5);
    *(_QWORD *)(v4 + 64) = v7;
    if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0 || v7 == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v9 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
      v10 = (_QWORD *)fst::cerr(v9);
      v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ConstFst::Read: Read failed: ", 29);
      v12 = *(char *)(a2 + 23);
      if (v12 >= 0)
        v13 = a2;
      else
        v13 = *(_QWORD *)a2;
      if (v12 >= 0)
        v14 = *(unsigned __int8 *)(a2 + 23);
      else
        v14 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      *(_QWORD *)(v4 + 80) = *((_QWORD *)v7 + 1);
      if ((BYTE4(v34) & 4) != 0 && (fst::AlignInput() & 1) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v23 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v24 = (_QWORD *)fst::cerr(v23);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"ConstFst::Read: Alignment failed: ", 34);
        v25 = *(char *)(a2 + 23);
        if (v25 >= 0)
          v13 = a2;
        else
          v13 = *(_QWORD *)a2;
        if (v25 >= 0)
          v14 = *(unsigned __int8 *)(a2 + 23);
        else
          v14 = *(_QWORD *)(a2 + 8);
      }
      else
      {
        v15 = fst::MappedFile::Map((uint64_t)a1, a2, 16 * *(_QWORD *)(v4 + 104));
        *(_QWORD *)(v4 + 72) = v15;
        if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) == 0 && v15 != 0)
        {
          *(_QWORD *)(v4 + 88) = *((_QWORD *)v15 + 1);
          goto LABEL_46;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v17 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)__p);
        v18 = (_QWORD *)fst::cerr(v17);
        v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"ConstFst::Read: Read failed: ", 29);
        v19 = *(char *)(a2 + 23);
        if (v19 >= 0)
          v13 = a2;
        else
          v13 = *(_QWORD *)a2;
        if (v19 >= 0)
          v14 = *(unsigned __int8 *)(a2 + 23);
        else
          v14 = *(_QWORD *)(a2 + 8);
      }
    }
    goto LABEL_43;
  }
LABEL_45:
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v4 = 0;
LABEL_46:
  if (SHIBYTE(v33) < 0)
    operator delete(v32[1]);
  if (SHIBYTE(v32[0]) < 0)
    operator delete(v31[0]);
  return v4;
}

void sub_1ADCB2944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(uint64_t a1)
{
  std::string *v2;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v2 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1AF80;
  *(_QWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 112) = -1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  std::string::operator=(v2, &__str);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a1 + 8) & 4 | 0x156A5A950001;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADCB2A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v15);
  _Unwind_Resume(a1);
}

void fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(_QWORD *a1)
{
  fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_1E5D1AF80;
  v2 = a1[9];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[8];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

_QWORD *fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D23A78;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::~ConstFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D23A78;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

float fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 8);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 12);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 20 * a2 + 16);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D22AC8;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 96);
  return result;
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 80) + 20 * a2;
  v5 = *(unsigned int *)(v3 + 4);
  v4 = *(unsigned int *)(v3 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 88) + 16 * v5;
  *a3 = 0;
  a3[1] = v6;
  a3[2] = v4;
  a3[3] = 0;
  return result;
}

BOOL fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::IsMemoryMapped(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  return *(_QWORD *)(*(_QWORD *)(v1 + 64) + 16) && *(_QWORD *)(*(_QWORD *)(v1 + 72) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

uint64_t fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::WriteFst<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  fst *v16;
  _QWORD *v17;
  fst::LogMessage *v18;
  fst *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t j;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t updated;
  fst *v35;
  _QWORD *v36;
  fst *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  char v43;
  _DWORD v44[2];
  unsigned int v45;
  uint64_t v46;
  void *__p[2];
  char v48;
  std::string __str;
  uint64_t v50;
  void *v51[2];
  void *v52[2];
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a3 + 27))
    v6 = 1;
  else
    v6 = 2;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    v42 = 0;
    v9 = *(_QWORD *)(v7 + 104);
    v10 = *(int *)(v7 + 96);
  }
  else
  {
    v11 = (char *)a2 + *(_QWORD *)(*a2 - 24);
    if ((v11[32] & 5) != 0
      || ((*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v11 + 5) + 32))(&v50, *((_QWORD *)v11 + 5), 0, 1, 16), v8 = v58, v58 == -1))
    {
      v10 = *(unsigned int *)(a1[1] + 96);
      if ((int)v10 < 1)
      {
        v10 = 0;
        v42 = 0;
        v9 = 0;
      }
      else
      {
        v9 = 0;
        for (i = 0; i != v10; ++i)
          v9 += (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, i);
        v42 = 0;
      }
      v8 = -1;
    }
    else
    {
      v42 = 1;
      v10 = -1;
      v9 = -1;
    }
  }
  v53 = 0u;
  v54 = 0u;
  *(_OWORD *)v51 = 0u;
  *(_OWORD *)v52 = 0u;
  v56 = 0;
  v57 = 0;
  v55 = -1;
  v55 = (*(int (**)(_QWORD *))(*a1 + 24))(a1);
  v56 = v10;
  v57 = v9;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  v41 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1) | 1;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, (_BYTE *)a3, v6, &__str, v41, (uint64_t)&v50);
  if (*(_BYTE *)(a3 + 27) && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v16 = fst::LogMessage::LogMessage((fst *)v44, (uint64_t)__p);
    v17 = (_QWORD *)fst::cerr(v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Could not align file during write after header", 46);
    v18 = (fst::LogMessage *)v44;
  }
  else
  {
    v39 = v8;
    v40 = v6;
    v46 = 0;
    v44[0] = 2139095040;
    v13 = *(unsigned int *)(a1[1] + 96);
    if ((int)v13 < 1)
    {
      v15 = 0;
      v13 = 0;
    }
    else
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v44[0] = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v14);
        v44[1] = v15;
        v45 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v14);
        LODWORD(v46) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 48))(a1, v14);
        HIDWORD(v46) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 56))(a1, v14);
        std::ostream::write();
        v15 += v45;
        ++v14;
      }
      while (v13 != v14);
    }
    v56 = v13;
    v57 = v15;
    if (*(_BYTE *)(a3 + 27))
    {
      if (!fst::AlignOutput(a2))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v19 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        v20 = (_QWORD *)fst::cerr(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Could not align file during write after writing states", 54);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v43);
        if (v48 < 0)
          operator delete(__p[0]);
      }
    }
    v21 = *(unsigned int *)(a1[1] + 96);
    if ((int)v21 >= 1)
    {
      for (j = 0; j != v21; ++j)
      {
        v23 = a1[1];
        v24 = *(_QWORD *)(v23 + 80) + 20 * j;
        v25 = *(unsigned int *)(v24 + 8);
        if ((_DWORD)v25)
        {
          v26 = *(_QWORD *)(v23 + 88) + 16 * *(unsigned int *)(v24 + 4);
          do
          {
            std::ostream::write();
            v26 += 16;
            --v25;
          }
          while (v25);
        }
      }
    }
    std::ostream::flush();
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
      v27 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
      v28 = (_QWORD *)fst::cerr(v27);
      v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"ConstFst Write write failed: ", 29);
      v30 = *(char *)(a3 + 23);
      if (v30 >= 0)
        v31 = a3;
      else
        v31 = *(_QWORD *)a3;
      if (v30 >= 0)
        v32 = *(unsigned __int8 *)(a3 + 23);
      else
        v32 = *(_QWORD *)(a3 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
    }
    else
    {
      if (v42)
      {
        updated = fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::UpdateFstHeader((uint64_t)a1, a2, a3, v40, &__str, v41, (uint64_t)&v50, v39);
        goto LABEL_45;
      }
      if (v56 == v10)
      {
        if (v57 == v9)
        {
          updated = 1;
          goto LABEL_45;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v37 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        v38 = (_QWORD *)fst::cerr(v37);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Inconsistent number of arcs observed during write", 49);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
        v35 = fst::LogMessage::LogMessage((fst *)&v43, (uint64_t)__p);
        v36 = (_QWORD *)fst::cerr(v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Inconsistent number of states observed during write", 51);
      }
    }
    v18 = (fst::LogMessage *)&v43;
  }
  fst::LogMessage::~LogMessage(v18);
  if (v48 < 0)
    operator delete(__p[0]);
  updated = 0;
LABEL_45:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete(v52[1]);
  if (SHIBYTE(v52[0]) < 0)
    operator delete(v51[0]);
  return updated;
}

void sub_1ADCB3314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  if (a24 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  fst::FstHeader::~FstHeader(&a31);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::shared_ptr[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45BD8;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADCB3418(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int> *,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__shared_ptr_default_delete<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::Hammer::HammerSausage>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  v3 = (void **)(a2 + 8);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void std::vector<std::vector<quasar::Hammer::HammerSausage>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<quasar::Hammer::HammerSausage>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<quasar::QuasarTextProcImpl>>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  char *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[2];
  char v27;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  v16 = (char *)operator new(0x38uLL);
  v26[0] = v16;
  v26[1] = a1 + 16;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = v9;
  *((_OWORD *)v16 + 1) = *(_OWORD *)a3;
  *((_QWORD *)v16 + 4) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_OWORD *)(v16 + 40) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = 1;
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADCB387C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<quasar::PMRegexEnumerator>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x328uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADCB38C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar21InverseTextNormalizerENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43A60;
  a1[1] = 0;
  quasar::InverseTextNormalizer::InverseTextNormalizer((quasar::InverseTextNormalizer *)(a1 + 3));
  return a1;
}

void sub_1ADCB3914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43A60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::InverseTextNormalizer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::vector<std::vector<quasar::Token>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADCB3A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SplitStringToFloats<float>(uint64_t a1, const char *a2, int a3, _QWORD *a4)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;

  if (*(char *)(a1 + 23) >= 0)
    v5 = (_BYTE *)a1;
  else
    v5 = *(_BYTE **)a1;
  if (*v5)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    kaldi::SplitStringToVector((const std::string *)a1, a2, a3, (uint64_t)&v11);
    std::vector<float>::resize((uint64_t)a4, 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3));
    v6 = v11;
    if (v12 == v11)
    {
LABEL_9:
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        LODWORD(v14) = 0;
        if ((kaldi::ConvertStringToReal(v6 + v7, (float *)&v14) & 1) == 0)
          break;
        *(_DWORD *)(*a4 + 4 * v8++) = (_DWORD)v14;
        v6 = v11;
        v7 += 24;
        if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 3))
          goto LABEL_9;
      }
      v9 = 0;
    }
    v14 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v14);
  }
  else
  {
    a4[1] = *a4;
    return 1;
  }
  return v9;
}

void sub_1ADCB3B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void kaldi::SplitStringToVector(const std::string *a1, const char *a2, int a3, uint64_t a4)
{
  std::string::size_type size;
  std::string::size_type v9;
  int v10;
  std::string::size_type v11;
  std::string::size_type v12;
  size_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  size_t v18;
  const char *v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  std::string *v27;
  std::string *v28;
  __int128 v29;
  uint64_t v30;
  int v31;
  std::string::size_type v32;
  std::string v33;
  std::__split_buffer<std::string> __v;

  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v32 = size;
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a4);
  v9 = 0;
  do
  {
    v10 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
    if (v10 >= 0)
      v11 = (std::string::size_type)a1;
    else
      v11 = a1->__r_.__value_.__r.__words[0];
    if (v10 >= 0)
      v12 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
    else
      v12 = a1->__r_.__value_.__l.__size_;
    v13 = strlen(a2);
    if (v12 <= v9 || v13 == 0)
    {
      v15 = -1;
      if (a3)
        goto LABEL_26;
    }
    else
    {
      v16 = (unsigned __int8 *)(v11 + v9);
      v17 = (unsigned __int8 *)(v11 + v12);
LABEL_17:
      v18 = v13;
      v19 = a2;
      while (*v16 != *(unsigned __int8 *)v19)
      {
        ++v19;
        if (!--v18)
        {
          if (++v16 != v17)
            goto LABEL_17;
          v16 = (unsigned __int8 *)(v11 + v12);
          break;
        }
      }
      if (v16 == v17)
        v15 = -1;
      else
        v15 = (uint64_t)&v16[-v11];
      if (a3)
      {
LABEL_26:
        if (v15 == v9 || v9 == v32)
          goto LABEL_41;
      }
    }
    std::string::basic_string(&v33, a1, v9, v15 - v9, (std::allocator<char> *)&__v);
    v21 = *(_QWORD *)(a4 + 8);
    v20 = *(_QWORD *)(a4 + 16);
    if (v21 >= v20)
    {
      v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *(_QWORD *)a4) >> 3);
      v24 = v23 + 1;
      if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *(_QWORD *)a4) >> 3);
      if (2 * v25 > v24)
        v24 = 2 * v25;
      if (v25 >= 0x555555555555555)
        v26 = 0xAAAAAAAAAAAAAAALL;
      else
        v26 = v24;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v26)
        v27 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(a4 + 16, v26);
      else
        v27 = 0;
      v28 = v27 + v23;
      __v.__first_ = v27;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v27[v26];
      v29 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      v28->__r_.__value_.__r.__words[2] = v33.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28->__r_.__value_.__l.__data_ = v29;
      memset(&v33, 0, sizeof(v33));
      __v.__end_ = v28 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__v);
      v30 = *(_QWORD *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
      v31 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a4 + 8) = v30;
      if (v31 < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
    }
    else
    {
      v22 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
      *(_QWORD *)(v21 + 16) = *((_QWORD *)&v33.__r_.__value_.__l + 2);
      *(_OWORD *)v21 = v22;
      *(_QWORD *)(a4 + 8) = v21 + 24;
    }
LABEL_41:
    v9 = v15 + 1;
  }
  while (v15 != -1);
}

void sub_1ADCB3D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, std::__split_buffer<std::wstring> *a17)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::ConvertStringToReal(uint64_t a1, float *a2)
{
  const char *v3;
  double v4;
  char *v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  float v11;
  char *v12;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v12 = 0;
  *__error() = 0;
  v4 = strtod(v3, &v12);
  v5 = v12;
  if (v12 == v3)
    return 0;
  v6 = v4;
  v7 = MEMORY[0x1E0C80978];
  while (1)
  {
    v8 = *v5;
    if (!((v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000))
      break;
    v5 = ++v12;
  }
  if (v12 == v3 || *v12 || *__error())
    return 0;
  v11 = v6;
  *a2 = v11;
  return 1;
}

uint64_t kaldi::ConvertStringToReal(uint64_t a1, double *a2)
{
  const char *v3;
  double v4;
  char *v5;
  double v6;
  uint64_t v7;
  unsigned int v8;
  char *v11;

  if (*(char *)(a1 + 23) >= 0)
    v3 = (const char *)a1;
  else
    v3 = *(const char **)a1;
  v11 = 0;
  *__error() = 0;
  v4 = strtod(v3, &v11);
  v5 = v11;
  if (v11 == v3)
    return 0;
  v6 = v4;
  v7 = MEMORY[0x1E0C80978];
  while (1)
  {
    v8 = *v5;
    if (!((v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v7 + 4 * v8 + 60) & 0x4000))
      break;
    v5 = ++v11;
  }
  if (v11 == v3 || *v11 || *__error())
    return 0;
  *a2 = v6;
  return 1;
}

void kaldi::SplitStringOnString(uint64_t a1, char *a2, uint64_t *a3)
{
  int64_t size;
  std::string *p_str;
  int v8;
  char *v9;
  int64_t v10;
  char *v11;
  int v12;
  std::string *v13;
  int64_t v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  unint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  std::string *v22;
  int64_t v23;
  std::string *v24;
  int v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  std::string::size_type v30;
  char v31;
  unint64_t v32;
  __int128 v33;
  int v34;
  std::string *v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  std::string v39;
  std::string __str;
  char v41;

  std::vector<std::string>::__clear[abi:ne180100](a3);
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    __str = *(std::string *)a1;
  size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v8 = a2[23];
  if (v8 >= 0)
    v9 = a2;
  else
    v9 = *(char **)a2;
  if (v8 >= 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  if (!v10)
  {
    v17 = 0;
    goto LABEL_26;
  }
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __str.__r_.__value_.__l.__size_;
  if (size >= v10)
  {
    v11 = (char *)p_str + size;
    v12 = *v9;
    v13 = p_str;
    do
    {
      v14 = size - v10;
      if (v14 == -1)
        break;
      v15 = (char *)memchr(v13, v12, v14 + 1);
      if (!v15)
        break;
      v16 = v15;
      if (!memcmp(v15, v9, v10))
      {
        if (v16 != v11)
        {
          v17 = v16 - (char *)p_str;
          while (v17 != -1)
          {
LABEL_26:
            std::string::basic_string(&v39, &__str, 0, v17, (std::allocator<char> *)&v41);
            kaldi::Trim(&v39);
            v18 = a3[1];
            if (v18 >= a3[2])
            {
              v20 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&v39);
            }
            else
            {
              if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)a3[1], v39.__r_.__value_.__l.__data_, v39.__r_.__value_.__l.__size_);
              }
              else
              {
                v19 = *(_OWORD *)&v39.__r_.__value_.__l.__data_;
                *(_QWORD *)(v18 + 16) = *((_QWORD *)&v39.__r_.__value_.__l + 2);
                *(_OWORD *)v18 = v19;
              }
              v20 = v18 + 24;
              a3[1] = v18 + 24;
            }
            a3[1] = v20;
            v21 = a2[23];
            if ((v21 & 0x80u) != 0)
              v21 = *((_QWORD *)a2 + 1);
            v22 = std::string::erase(&__str, 0, v21 + v17);
            std::string::operator=(&__str, v22);
            v23 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v24 = &__str;
            else
              v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
            v25 = a2[23];
            if (v25 >= 0)
              v26 = a2;
            else
              v26 = *(char **)a2;
            if (v25 >= 0)
              v27 = a2[23];
            else
              v27 = *((_QWORD *)a2 + 1);
            if (v27)
            {
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v23 = __str.__r_.__value_.__l.__size_;
              v28 = (char *)v24 + v23;
              if (v23 >= v27)
              {
                v34 = *v26;
                v35 = v24;
                do
                {
                  v36 = v23 - v27;
                  if (v36 == -1)
                    break;
                  v37 = (char *)memchr(v35, v34, v36 + 1);
                  if (!v37)
                    break;
                  v29 = v37;
                  if (!memcmp(v37, v26, v27))
                    goto LABEL_48;
                  v35 = (std::string *)(v29 + 1);
                  v23 = v28 - (v29 + 1);
                }
                while (v23 >= v27);
              }
              v29 = v28;
LABEL_48:
              if (v29 == v28)
                v17 = -1;
              else
                v17 = v29 - (char *)v24;
            }
            else
            {
              v17 = 0;
            }
            if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v39.__r_.__value_.__l.__data_);
          }
        }
        break;
      }
      v13 = (std::string *)(v16 + 1);
      size = v11 - (v16 + 1);
    }
    while (size >= v10);
  }
  kaldi::Trim(&__str);
  v30 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v30 = __str.__r_.__value_.__l.__size_;
  if (v30)
  {
    v32 = a3[1];
    if (v32 >= a3[2])
    {
      v38 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (__int128 *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        v33 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(_QWORD *)(v32 + 16) = *((_QWORD *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)v32 = v33;
      }
      v38 = v32 + 24;
      a3[1] = v32 + 24;
    }
    a3[1] = v38;
    v31 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (v31 < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADCB425C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)(v21 + 8) = v22;
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *kaldi::Trim(std::string *this)
{
  uint64_t v2;
  std::string *v3;
  std::string::size_type size;
  char *v5;
  std::string *result;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;

  v2 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v3 = (std::string *)this->__r_.__value_.__r.__words[0];
    size = this->__r_.__value_.__l.__size_;
  }
  else
  {
    v3 = this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  }
  v5 = (char *)&v3[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    if (!size)
      goto LABEL_11;
  }
  while (memchr(" \t\n\r\f\v", v5[size--], 6uLL));
  if (size == -1)
  {
LABEL_11:
    if ((v2 & 0x80) != 0)
    {
      v11 = (std::string *)this->__r_.__value_.__r.__words[0];
      v10 = (char *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    }
    else
    {
      v10 = (char *)this + v2;
      v11 = this;
    }
    v12 = v10 - (char *)v11;
    v13 = this;
    return std::string::erase(v13, 0, v12);
  }
  result = std::string::erase(this, size + 1, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    v9 = (std::string *)this->__r_.__value_.__r.__words[0];
    v8 = this->__r_.__value_.__l.__size_;
    if (!v8)
      return result;
  }
  else
  {
    v8 = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = this;
    if (!*((_BYTE *)&this->__r_.__value_.__s + 23))
      return result;
  }
  v14 = 0;
  while (1)
  {
    result = (std::string *)memchr(" \t\n\r\f\v", v9->__r_.__value_.__s.__data_[v14], 6uLL);
    if (!result)
      break;
    if (v8 == ++v14)
      return result;
  }
  if (v14 != -1)
  {
    v13 = this;
    v12 = v14;
    return std::string::erase(v13, 0, v12);
  }
  return result;
}

void kaldi::SplitStringToStringPair(const std::string *a1, const char *a2, std::vector<std::pair<std::string, std::string>> *a3)
{
  uint64_t end;
  std::pair<std::string, std::string> *begin;
  const std::string *v6;
  const std::string *v7;
  __int128 *v8;
  uint64_t v9;
  unint64_t v10;
  const std::string *v11;
  std::string::size_type v12;
  std::string::size_type size;
  char *v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  const std::string *v18;
  char *v19;
  __int128 v20;
  std::string v21;
  void *__p;
  char v23;
  __int128 *v24;
  __int128 *v25;
  uint64_t v26;
  const std::string *v27;
  const std::string *v28;
  uint64_t v29;
  _BYTE v30[9];

  v27 = 0;
  v28 = 0;
  v29 = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)&v27);
  begin = a3->__begin_;
  end = (uint64_t)a3->__end_;
  if ((std::vector<std::pair<std::string, std::string>>::pointer)end != a3->__begin_)
  {
    do
    {
      end -= 48;
      std::allocator<std::pair<std::string,std::string>>::destroy[abi:ne180100]((uint64_t)&a3->__end_cap_, end);
    }
    while ((std::pair<std::string, std::string> *)end != begin);
  }
  a3->__end_ = begin;
  v6 = v27;
  v7 = v28;
  while (v6 != v7)
  {
    v24 = 0;
    v25 = 0;
    v26 = 0;
    kaldi::SplitStringToVector(v6, ",", 1, (uint64_t)&v24);
    v8 = v24;
    if (v25 == v24)
    {
LABEL_36:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"tensor pair specified size is not 2", 35);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
    }
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = (const std::string *)((char *)v8 + v9);
      LODWORD(v12) = *((char *)v8 + v9 + 23);
      if ((v12 & 0x80000000) == 0)
      {
        if (!*((_BYTE *)v8 + v9 + 23))
          goto LABEL_35;
        if (v11->__r_.__value_.__s.__data_[0] != 91)
          goto LABEL_18;
        size = *((unsigned __int8 *)v8 + v9 + 23);
        goto LABEL_13;
      }
      if (!v11->__r_.__value_.__l.__size_)
      {
LABEL_35:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"tensor specified being empty is not allowed", 43);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v21);
      }
      if (*v11->__r_.__value_.__l.__data_ == 91)
      {
        size = v11->__r_.__value_.__l.__size_;
LABEL_13:
        std::string::basic_string(&v21, (const std::string *)((char *)v8 + v9), 1uLL, size - 1, (std::allocator<char> *)v30);
        v14 = (char *)v24 + v9;
        if (*((char *)v24 + v9 + 23) < 0)
          operator delete(*(void **)v14);
        v15 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *((_QWORD *)v14 + 2) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
        *(_OWORD *)v14 = v15;
        v8 = v24;
        LOBYTE(v12) = *((_BYTE *)v24 + v9 + 23);
      }
      if ((v12 & 0x80) == 0)
      {
        v11 = (const std::string *)((char *)v8 + 24 * v10);
LABEL_18:
        v16 = 0;
        v17 = v12;
        v18 = v11;
        goto LABEL_20;
      }
      v11 = (const std::string *)((char *)v8 + v9);
      v18 = *(const std::string **)((char *)v8 + v9);
      v17 = *(_QWORD *)((char *)v8 + v9 + 8);
      v16 = 1;
LABEL_20:
      if (v18->__r_.__value_.__s.__data_[v17 - 1] == 93)
      {
        if (v16)
          v12 = v11->__r_.__value_.__l.__size_;
        else
          v12 = v12;
        std::string::basic_string(&v21, v11, 0, v12 - 1, (std::allocator<char> *)v30);
        v19 = (char *)v24 + v9;
        if (*((char *)v24 + v9 + 23) < 0)
          operator delete(*(void **)v19);
        v20 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
        *((_QWORD *)v19 + 2) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
        *(_OWORD *)v19 = v20;
        v8 = v24;
      }
      ++v10;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v8) >> 3));
    if ((char *)v25 - (char *)v8 != 48)
      goto LABEL_36;
    std::pair<std::string,std::string>::pair[abi:ne180100]<std::string&,std::string&,0>(&v21, v8, (__int128 *)((char *)v8 + 24));
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](a3, (__int128 *)&v21);
    if (v23 < 0)
      operator delete(__p);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
    ++v6;
  }
  v21.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
}

void sub_1ADCB46DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 144);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::SplitStringToVector(const std::string *a1@<X0>, const char *a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)a3);
}

void sub_1ADCB4740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void kaldi::SplitTensorShapesToIntVector(const std::string *a1, const char *a2, uint64_t *a3)
{
  const std::string *v4;
  const std::string *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const std::string *v9;
  std::string::size_type size;
  int v11;
  uint64_t v12;
  __int128 v13;
  const std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;
  uint64_t v19;
  std::string v20[11];
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::vector<unsigned int> v25;
  const std::string *v26;
  const std::string *v27;
  uint64_t v28;
  _BYTE v29[9];

  v26 = 0;
  v27 = 0;
  v28 = 0;
  kaldi::SplitStringToVector(a1, a2, 1, (uint64_t)&v26);
  std::vector<std::vector<int>>::__clear[abi:ne180100](a3);
  v4 = v26;
  v5 = v27;
  if (v26 != v27)
  {
    while (1)
    {
      memset(&v25, 0, sizeof(v25));
      v22 = 0;
      v23 = 0;
      v24 = 0;
      kaldi::SplitStringToVector(v4, ",", 1, (uint64_t)&v22);
      std::vector<int>::resize(&v25, 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3));
      v6 = v22;
      if (v23 != v22)
        break;
LABEL_24:
      v18 = a3[1];
      if (v18 >= a3[2])
      {
        v19 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(a3, (uint64_t)&v25);
      }
      else
      {
        std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)a3, (uint64_t)&v25);
        v19 = v18 + 24;
      }
      a3[1] = v19;
      v20[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v22;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
      if (v25.__begin_)
      {
        v25.__end_ = v25.__begin_;
        operator delete(v25.__begin_);
      }
      if (++v4 == v5)
        goto LABEL_30;
    }
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v21 = 0.0;
      v9 = (const std::string *)(v6 + v7);
      size = *(unsigned __int8 *)(v6 + v7 + 23);
      if ((*(char *)(v6 + v7 + 23) & 0x80000000) == 0)
        break;
      if (*v9->__r_.__value_.__l.__data_ == 91)
      {
        size = *(_QWORD *)(v6 + v7 + 8);
LABEL_9:
        std::string::basic_string(v20, v9, 1uLL, size - 1, (std::allocator<char> *)v29);
        v12 = v22 + v7;
        if (*(char *)(v22 + v7 + 23) < 0)
          operator delete(*(void **)v12);
        v13 = *(_OWORD *)&v20[0].__r_.__value_.__l.__data_;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)&v20[0].__r_.__value_.__l + 2);
        *(_OWORD *)v12 = v13;
        v6 = v22;
        size = *(unsigned __int8 *)(v22 + v7 + 23);
      }
      if ((size & 0x80) != 0)
      {
        v9 = (const std::string *)(v6 + v7);
        v14 = *(const std::string **)(v6 + v7);
        v15 = *(_QWORD *)(v6 + v7 + 8);
        v11 = 1;
        goto LABEL_16;
      }
      v11 = 0;
      v9 = (const std::string *)(v6 + 24 * v8);
LABEL_14:
      v14 = v9;
      v15 = size;
LABEL_16:
      if (v14->__r_.__value_.__s.__data_[v15 - 1] == 93)
      {
        if (v11)
          size = v9->__r_.__value_.__l.__size_;
        std::string::basic_string(v20, v9, 0, size - 1, (std::allocator<char> *)v29);
        v16 = v22 + v7;
        if (*(char *)(v22 + v7 + 23) < 0)
          operator delete(*(void **)v16);
        v17 = *(_OWORD *)&v20[0].__r_.__value_.__l.__data_;
        *(_QWORD *)(v16 + 16) = *((_QWORD *)&v20[0].__r_.__value_.__l + 2);
        *(_OWORD *)v16 = v17;
        v6 = v22;
      }
      if ((kaldi::ConvertStringToReal(v6 + v7, &v21) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"invalid character in shapes definition of input", 47);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
      v25.__begin_[v8++] = (int)v21;
      v6 = v22;
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((v23 - v22) >> 3))
        goto LABEL_24;
    }
    if (v9->__r_.__value_.__s.__data_[0] != 91)
    {
      v11 = 0;
      goto LABEL_14;
    }
    goto LABEL_9;
  }
LABEL_30:
  v20[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v20);
}

void sub_1ADCB4A28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  void *v11;

  a9 = (void **)(v9 - 168);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  v11 = *(void **)(v9 - 144);
  if (v11)
  {
    *(_QWORD *)(v9 - 136) = v11;
    operator delete(v11);
  }
  a9 = (void **)(v9 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::JoinVectorToString(uint64_t *a1, const std::string::value_type *a2, int a3, __int128 *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  unint64_t i;
  uint64_t v12;
  char v13;
  const std::string::value_type *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  __int128 v17;
  std::string __p[2];

  memset(__p, 0, 24);
  v6 = *a1;
  v5 = a1[1];
  if (v5 != *a1)
  {
    v10 = 0;
    for (i = 0; i < 0xAAAAAAAAAAAAAAABLL * ((v5 - v6) >> 3); ++i)
    {
      v12 = v6 + v10;
      v13 = *(_BYTE *)(v6 + v10 + 23);
      if (a3)
      {
        if ((*(_BYTE *)(v6 + v10 + 23) & 0x80) != 0)
        {
          if (!*(_QWORD *)(v6 + v10 + 8))
            goto LABEL_21;
        }
        else if (!*(_BYTE *)(v6 + v10 + 23))
        {
          goto LABEL_21;
        }
      }
      if (v13 >= 0)
        v14 = (const std::string::value_type *)(v6 + v10);
      else
        v14 = *(const std::string::value_type **)v12;
      if (v13 >= 0)
        v15 = *(unsigned __int8 *)(v6 + v10 + 23);
      else
        v15 = *(_QWORD *)(v12 + 8);
      std::string::append(__p, v14, v15);
      v6 = *a1;
      v5 = a1[1];
      if (i >= -1 - 0x5555555555555555 * ((v5 - *a1) >> 3))
        goto LABEL_21;
      if (!a3)
        goto LABEL_20;
      if ((*(char *)(v6 + v10 + 47) & 0x80000000) == 0)
      {
        if (!*(_BYTE *)(v6 + v10 + 47))
          goto LABEL_21;
LABEL_20:
        std::string::append(__p, a2);
        v6 = *a1;
        v5 = a1[1];
        goto LABEL_21;
      }
      if (*(_QWORD *)(v6 + v10 + 32))
        goto LABEL_20;
LABEL_21:
      v10 += 24;
    }
  }
  v16 = *((_QWORD *)a4 + 2);
  v17 = *a4;
  *(std::string *)a4 = __p[0];
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v17;
  __p[0].__r_.__value_.__r.__words[2] = v16;
  if (SHIBYTE(v16) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
}

void sub_1ADCB4BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL kaldi::IsToken(uint64_t *a1)
{
  unint64_t v1;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  __darwin_ct_rune_t v7;
  int v8;

  if (*((char *)a1 + 23) >= 0)
    v1 = *((unsigned __int8 *)a1 + 23);
  else
    v1 = a1[1];
  if (v1)
  {
    v3 = 0;
    v4 = 0;
    v5 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (*((char *)a1 + 23) >= 0)
        v6 = a1;
      else
        v6 = (uint64_t *)*a1;
      v7 = *((char *)v6 + v4);
      if (v7 < 0)
      {
        if (!__maskrune(*((char *)v6 + v4), 0x40000uLL))
        {
          if (v7 == -1)
            return v3;
          goto LABEL_19;
        }
        v8 = __maskrune(v7, 0x4000uLL);
      }
      else
      {
        if ((*(_DWORD *)(v5 + 4 * v7 + 60) & 0x40000) == 0)
          return v3;
        v8 = *(_DWORD *)(v5 + 4 * v7 + 60) & 0x4000;
      }
      if (v7 >= -1 && v8 != 0)
        return v3;
LABEL_19:
      v3 = ++v4 >= v1;
      if (v1 == v4)
        return v3;
    }
  }
  return 0;
}

double kaldi::SplitStringOnFirstSpace(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v9;
  unsigned __int8 *v10;
  double result;
  unsigned __int8 *v12;
  std::string::size_type v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  char v18;
  std::string __dst;

  v5 = *(char *)(a1 + 23);
  if (v5 >= 0)
    v6 = a1;
  else
    v6 = *(_QWORD *)a1;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 23);
  else
    v7 = *(_QWORD *)(a1 + 8);
  if (!v7)
    goto LABEL_20;
  v9 = 0;
  v10 = (unsigned __int8 *)(v6 + v7);
  while (memchr(" \t\n\r\f\v", *(char *)(v6 + v9), 6uLL))
  {
    if (v7 == ++v9)
      goto LABEL_20;
  }
  if (v9 == -1)
  {
LABEL_20:
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
LABEL_39:
    if (*(char *)(a3 + 23) < 0)
    {
      **(_BYTE **)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 23) = 0;
    }
    return result;
  }
  if (v7 <= v9)
  {
LABEL_29:
    std::string::basic_string[abi:ne180100](&__dst, (uint64_t *)a1, v9);
LABEL_36:
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    result = *(double *)&__dst.__r_.__value_.__l.__data_;
    *(std::string *)a2 = __dst;
    goto LABEL_39;
  }
  v12 = (unsigned __int8 *)(v6 + v9);
  v13 = v9;
LABEL_15:
  v14 = 0;
  while (*v12 != asc_1AE292A5E[v14])
  {
    if (++v14 == 6)
    {
      ++v12;
      ++v13;
      if (v12 != v10)
        goto LABEL_15;
      goto LABEL_29;
    }
  }
  if (v12 == v10)
    goto LABEL_29;
  v15 = &v12[-v6];
  if (&v12[-v6] == (unsigned __int8 *)-1)
    goto LABEL_29;
  if (v7 <= (unint64_t)v15)
    goto LABEL_35;
  while (memchr(" \t\n\r\f\v", *(char *)(v6 + v13), 6uLL))
  {
    if (v7 == ++v13)
      goto LABEL_35;
  }
  if (v13 == -1)
  {
LABEL_35:
    std::string::basic_string(&__dst, (const std::string *)a1, v9, (std::string::size_type)&v15[-v9], (std::allocator<char> *)&v18);
    goto LABEL_36;
  }
  v16 = v6 - 1;
  while (v7)
  {
    if (!memchr(" \t\n\r\f\v", *(char *)(v16 + v7--), 6uLL))
      goto LABEL_43;
  }
  v7 = -1;
LABEL_43:
  std::string::basic_string(&__dst, (const std::string *)a1, v9, (std::string::size_type)&v15[-v9], (std::allocator<char> *)&v18);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(std::string *)a2 = __dst;
  std::string::basic_string(&__dst, (const std::string *)a1, v13, v7 - v13 + 1, (std::allocator<char> *)&v18);
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  result = *(double *)&__dst.__r_.__value_.__l.__data_;
  *(std::string *)a3 = __dst;
  return result;
}

void kaldi::GenerateCombinationIndices(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<unsigned int>::pointer begin;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  std::vector<unsigned int>::pointer v22;
  std::vector<unsigned int>::value_type __x;
  std::vector<unsigned int> v25;

  v7 = a1[1] - *a1;
  if (a3)
    v8 = 0;
  else
    v8 = ((v7 << 30) - 0x100000000) >> 32;
  a4[1] = 0;
  a4[2] = 0;
  if (a3)
    v9 = 1;
  else
    v9 = -1;
  *a4 = 0;
  __x = 0;
  std::vector<unsigned int>::vector(&v25, v7 >> 2, &__x);
  if (a2 >= 1)
  {
    LODWORD(v10) = 0;
    v11 = a4[1];
    v12 = 4 * v8;
    v13 = 4 * v9;
    do
    {
      if (v11 >= a4[2])
      {
        v11 = std::vector<std::vector<unsigned int>>::__push_back_slow_path<std::vector<unsigned int> const&>(a4, (uint64_t)&v25);
      }
      else
      {
        std::vector<std::vector<unsigned int>>::__construct_one_at_end[abi:ne180100]<std::vector<unsigned int> const&>((uint64_t)a4, (uint64_t)&v25);
        v11 += 24;
      }
      a4[1] = v11;
      v14 = *a1;
      v15 = a1[1] - *a1;
      if (!v15)
        break;
      v16 = 0;
      v17 = v15 >> 2;
      begin = v25.__begin_;
      v19 = (unint64_t)(v15 >> 2) <= 1 ? 1 : v15 >> 2;
      v20 = v12;
      while (1)
      {
        v21 = (*(std::vector<unsigned int>::pointer)((char *)begin + v20) + 1) % *(_DWORD *)(v14 + v20);
        *(std::vector<unsigned int>::pointer)((char *)begin + v20) = v21;
        if (v21)
          break;
        ++v16;
        v20 += v13;
        if (v19 == v16)
        {
          v16 = v19;
          break;
        }
      }
      if (v17 == v16)
      {
        v22 = v25.__begin_;
        while (!*v22++)
        {
          if (!--v19)
            goto LABEL_26;
        }
      }
      v10 = (v10 + 1);
    }
    while (v10 < a2);
  }
LABEL_26:
  if (v25.__begin_)
  {
    v25.__end_ = v25.__begin_;
    operator delete(v25.__begin_);
  }
}

void sub_1ADCB5088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__dst, uint64_t *a2, unint64_t a3)
{
  uint64_t *v4;
  unint64_t v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2;
  if (*((char *)a2 + 23) < 0)
  {
    v6 = a2[1];
    if (v6 < a3)
      goto LABEL_15;
    v4 = (uint64_t *)*a2;
  }
  else
  {
    v6 = *((unsigned __int8 *)a2 + 23);
    if (v6 < a3)
LABEL_15:
      std::string::__throw_out_of_range[abi:ne180100]();
  }
  v7 = v6 - a3;
  if (v6 - a3 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v7 >= 0x17)
  {
    v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v9 = v7 | 7;
    v10 = v9 + 1;
    v8 = operator new(v9 + 1);
    __dst[1] = v7;
    __dst[2] = v10 | 0x8000000000000000;
    *__dst = v8;
  }
  else
  {
    *((_BYTE *)__dst + 23) = v7;
    v8 = __dst;
    if (v6 == a3)
      goto LABEL_14;
  }
  memmove(v8, (char *)v4 + a3, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  return __dst;
}

void kaldi::ParseOptions::Escape(unsigned __int8 *a1@<X0>, std::string *a2@<X8>)
{
  int v4;
  const std::string::value_type *v5;
  char *v6;
  char v7;
  uint64_t v8;
  int v9;
  unsigned __int8 v10;
  uint64_t v11;
  char *v12;
  int v13;
  const char *v14;
  const std::string::value_type *v15;
  int v16;
  unsigned __int8 *v17;
  std::string::value_type *v18;
  int v19;
  std::string::value_type __s[2];

  v4 = (char)a1[23];
  v5 = *(const std::string::value_type **)a1;
  if (v4 >= 0)
    v6 = (char *)a1;
  else
    v6 = *(char **)a1;
  v7 = *v6;
  if (*v6)
  {
    v8 = MEMORY[0x1E0C80978];
    while (1)
    {
      if (v7 < 0)
      {
        if (!__maskrune(v7, 0x500uLL))
        {
LABEL_12:
          v10 = 91;
          v11 = 1u;
          while (*v6 != v10)
          {
            v10 = asc_1AE296038[v11++];
            if (v11 == 14)
            {
              LOBYTE(v4) = a1[23];
              v5 = *(const std::string::value_type **)a1;
              goto LABEL_16;
            }
          }
        }
      }
      else if ((*(_DWORD *)(v8 + 4 * v7 + 60) & 0x500) == 0)
      {
        goto LABEL_12;
      }
      v9 = *++v6;
      v7 = v9;
      if (!v9)
      {
        if ((char)a1[23] < 0)
        {
          std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *((_QWORD *)a1 + 1));
        }
        else
        {
          *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
          a2->__r_.__value_.__r.__words[2] = *((_QWORD *)a1 + 2);
        }
        return;
      }
    }
  }
LABEL_16:
  if ((v4 & 0x80u) == 0)
    v12 = (char *)a1;
  else
    v12 = (char *)v5;
  v13 = 39;
  v14 = "'\\''";
  if (strchr(v12, 39))
  {
    {
      v13 = 39;
    }
    else
    {
      v14 = "\\\"";
      v13 = 34;
    }
  }
  __s[1] = 0;
  __s[0] = v13;
  std::string::basic_string[abi:ne180100]<0>(a2, __s);
  v15 = *(const std::string::value_type **)a1;
  if ((a1[23] & 0x80u) == 0)
    v15 = (const std::string::value_type *)a1;
  v16 = *(unsigned __int8 *)v15;
  if (*v15)
  {
    v17 = (unsigned __int8 *)(v15 + 1);
    do
    {
      v18 = (std::string::value_type *)v14;
      if (v16 != v13)
      {
        __s[0] = v16;
        v18 = __s;
      }
      std::string::append(a2, v18);
      v19 = *v17++;
      v16 = v19;
    }
    while (v19);
  }
  __s[0] = v13;
  std::string::append(a2, __s);
}

void sub_1ADCB534C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::OnlineFeatInputItfIO::OnlineFeatInputItfIO(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  result[4] = a6;
  result[5] = a7;
  return result;
}

uint64_t kaldi::SimpleWaveformReader::SimpleWaveformReader(uint64_t a1, uint64_t a2, float *a3, char a4)
{
  float v6;
  float v7;
  int v8;
  uint64_t v10;

  v6 = *a3;
  v7 = a3[1];
  v8 = (int)*a3;
  *(_QWORD *)a1 = &off_1E5D2A9D8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = v8;
  *(_DWORD *)(a1 + 20) = (int)v7;
  if (v6 == v7)
  {
    v10 = 0;
  }
  else
  {
    v10 = operator new();
    *(_QWORD *)v10 = 0;
    *(_OWORD *)(v10 + 8) = *(_OWORD *)a3;
  }
  *(_QWORD *)(a1 + 24) = v10;
  *(_BYTE *)(a1 + 32) = a4;
  return a1;
}

uint64_t kaldi::SimpleWaveformReader::Compute(uint64_t a1, uint64_t *a2)
{
  int32x2_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  void **v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v3 = (int32x2_t *)*a2;
  v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  v5 = (int)((double)*(int *)(a1 + 16)
                         / (double)*(int *)(a1 + 20)
                         * (double)(int)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1) * v4));
  if ((int)v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    return 1;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    kaldi::Vector<float>::Resize(&v21, v5, 1);
    v6 = (***(uint64_t (****)(_QWORD, void **))(a1 + 8))(*(_QWORD *)(a1 + 8), &v21);
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v7 = *(_QWORD *)(a1 + 24);
    if (v7
      && (v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)),
          kaldi::Resampler::Resample(v7, (uint64_t)&v21, (uint64_t)&v18, v8),
          *(_QWORD *)(a1 + 24))
      && (v9 = v19, (int)v19 > 0))
    {
      v10 = (void **)&v18;
    }
    else
    {
      v10 = &v21;
      v9 = v22;
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Vector<float>::Resize(v10, ((v9 + v11 - 1) / v12 * v13), 2);
    v14 = *((_DWORD *)v10 + 2);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v3, (v14 / v15), v16, 0, 0);
    kaldi::MatrixBase<float>::CopyRowsFromVec((void **)v3, (char **)v10);
    if (*(_BYTE *)(a1 + 32))
      kaldi::MatrixBase<float>::Scale((uint64_t)v3, 0.000030518);
    kaldi::Vector<float>::Destroy((uint64_t)&v18);
    kaldi::Vector<float>::Destroy((uint64_t)&v21);
  }
  return v6;
}

void sub_1ADCB5618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SimpleWaveformReader::Dim(kaldi::SimpleWaveformReader *this)
{
  return (*((_DWORD *)this + 5) / 100);
}

uint64_t kaldi::SimpleWaveformReader::FrameDurationMs(kaldi::SimpleWaveformReader *this)
{
  return 10;
}

uint64_t kaldi::SimpleWaveformReader::FrameDurationMsForAlignment(kaldi::SimpleWaveformReader *this)
{
  return (*(uint64_t (**)(kaldi::SimpleWaveformReader *))(*(_QWORD *)this + 24))(this);
}

void kaldi::SimpleWaveformReader::~SimpleWaveformReader(kaldi::SimpleWaveformReader *this)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;

  *(_QWORD *)this = &off_1E5D2A9D8;
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  v1 = (_QWORD *)((char *)this + 24);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v1, v2);
}

{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t *v3;

  *(_QWORD *)this = &off_1E5D2A9D8;
  v3 = (uint64_t *)*((_QWORD *)this + 3);
  v1 = (_QWORD *)((char *)this + 24);
  v2 = v3;
  *v1 = 0;
  if (v3)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v1, v2);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::EndOfAudioPadder::Compute(uint64_t a1, uint64_t a2)
{
  int32x2_t *v3;
  uint64_t (***v4)(_QWORD, _OWORD *);
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  _OWORD v10[3];

  v3 = *(int32x2_t **)a2;
  v4 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v5 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v5;
  v10[2] = *(_OWORD *)(a2 + 32);
  v6 = (**v4)(v4, v10);
  if ((v6 & 1) == 0)
  {
    v7 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::Matrix<float>::Resize(v3, (*(_DWORD *)(a1 + 32) + v7), *(unsigned int *)(*(_QWORD *)(a1 + 16) + 8), 2, 0);
    if (*(int *)(a1 + 32) >= 1)
    {
      v8 = 0;
      do
        kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v3, *(_QWORD *)(a1 + 16), v7 + v8++);
      while (v8 < *(_DWORD *)(a1 + 32));
    }
  }
  return v6;
}

uint64_t kaldi::EndOfAudioPadder::Dim(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::EndOfAudioPadder::ChunkSize(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
}

uint64_t kaldi::EndOfAudioPadder::FrameDurationMs(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::EndOfAudioPadder::FrameDurationMsForAlignment(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::EndOfAudioPadder::HasSilencePosterior(kaldi::EndOfAudioPadder *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void kaldi::EndOfAudioPadder::~EndOfAudioPadder(kaldi::EndOfAudioPadder *this)
{
  *(_QWORD *)this = &off_1E5D2A398;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E5D2A398;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineCmnInput::~OnlineCmnInput(kaldi::OnlineCmnInput *this)
{
  *(_QWORD *)this = &off_1E5D2A2C8;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  kaldi::OnlineCmnInput::~OnlineCmnInput(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineCmvnInput::Compute(_QWORD *a1, uint64_t *a2)
{
  int32x2_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  v3 = (int32x2_t *)*a2;
  v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  v5 = kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
  v6 = a1[9];
  result = (*(uint64_t (**)(_QWORD *, int32x2_t *))(*a1 + 88))(a1, v3);
  if ((_DWORD)result)
  {
    while (!kaldi::MatrixBase<float>::NumRows((uint64_t)v3))
    {
      v8 = a1[9];
      if (v8 == (int)v6)
        break;
      kaldi::Matrix<float>::Resize(v3, v4, v5, 0, 0);
      LODWORD(v6) = v8;
      if (((*(uint64_t (**)(_QWORD *, int32x2_t *))(*a1 + 88))(a1, v3) & 1) == 0)
        return 0;
    }
    return 1;
  }
  return result;
}

uint64_t kaldi::OnlineCmvnInput::ComputeInternal(uint64_t a1, uint64_t a2)
{
  uint64_t (***v4)(_QWORD, uint64_t **);
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28[2];
  int v29;

  kaldi::MatrixBase<float>::NumRows(a2);
  kaldi::MatrixBase<float>::NumCols(a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  kaldi::Matrix<float>::Matrix((uint64_t)v28);
  kaldi::Matrix<float>::Swap(v28, (uint64_t *)a2);
  v4 = *(uint64_t (****)(_QWORD, uint64_t **))(a1 + 8);
  v24 = v28;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v5 = (**v4)(v4, &v24);
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v28);
  v7 = v6;
  v8 = *(_QWORD *)(a1 + 72);
  if (v6 + (int)v8 < *(_DWORD *)(a1 + 20))
    v9 = v5;
  else
    v9 = 0;
  if ((v9 & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    v11 = v8 + v6;
    v12 = *(_DWORD *)(a1 + 80);
    v10 = (v11 - v12);
    if (v11 != v12)
    {
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
      goto LABEL_9;
    }
  }
  v13 = 0;
LABEL_9:
  kaldi::Matrix<float>::Resize((int32x2_t *)a2, v10, v13, 0, 0);
  if (v7 < 1)
  {
    v15 = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = v28[0];
      v17 = v29;
      v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)v28);
      v23 = 0;
      v21 = v16 + 4 * v17 * v14;
      v22 = v18;
      kaldi::OnlineCmvnInput::AcceptFrame(a1, (const void **)&v21);
      while (1)
      {
        v19 = *(_QWORD *)(a1 + 72);
        if (v19 < *(int *)(a1 + 16) || *(_QWORD *)(a1 + 80) >= v19)
          break;
        v22 = 0;
        v23 = 0;
        v21 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v15;
        LODWORD(v22) = kaldi::MatrixBase<float>::NumCols(a2);
        kaldi::OnlineCmvnInput::OutputFrame(a1, (uint64_t)&v21);
        ++v15;
      }
      ++v14;
    }
    while (v14 != v7);
  }
  if (v15 < (int)v10)
  {
    do
    {
      v22 = 0;
      v23 = 0;
      v21 = *(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * v15;
      LODWORD(v22) = kaldi::MatrixBase<float>::NumCols(a2);
      kaldi::OnlineCmvnInput::OutputFrame(a1, (uint64_t)&v21);
      ++v15;
    }
    while ((_DWORD)v10 != v15);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v28);
  return v5;
}

void sub_1ADCB5BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::OnlineCmvnInput::AcceptFrame(uint64_t a1, const void **a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  _QWORD v9[3];

  v4 = *(_QWORD *)(a1 + 72) % (*(int *)(a1 + 16) + 1);
  v6 = *(_QWORD *)(a1 + 32);
  v5 = a1 + 32;
  v7 = v6 + 4 * *(_DWORD *)(v5 + 16) * v4;
  v9[2] = 0;
  v9[0] = v7;
  v9[1] = kaldi::MatrixBase<float>::NumCols(v5);
  result = kaldi::VectorBase<float>::CopyFromVec((uint64_t)v9, a2);
  ++*(_QWORD *)(a1 + 72);
  return result;
}

void kaldi::OnlineCmvnInput::OutputFrame(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  float *v7;
  unsigned int v8;
  float *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  double v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  double v27;
  float v28;
  float v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  float *v43;
  uint64_t v44;
  uint64_t v45;

  v4 = *(_QWORD *)(a1 + 80);
  if (!v4)
  {
    if (*(_QWORD *)(a1 + 72) >= *(int *)(a1 + 20))
      LODWORD(v5) = *(_DWORD *)(a1 + 20);
    else
      v5 = *(_QWORD *)(a1 + 72);
    if ((int)v5 < 1)
    {
      v4 = 0;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = (float *)(*(_QWORD *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * v6);
        v8 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
        v45 = 0;
        v43 = v7;
        v44 = v8;
        kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v43, 1.0);
        if (*(_BYTE *)(a1 + 24))
        {
          v9 = (float *)(*(_QWORD *)(a1 + 32) + 4 * *(_DWORD *)(a1 + 48) * v6);
          v10 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
          v45 = 0;
          v43 = v9;
          v44 = v10;
          kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v43, 1.0);
        }
        ++v6;
      }
      while ((_DWORD)v5 != v6);
      v4 = *(_QWORD *)(a1 + 80);
    }
  }
  LODWORD(v11) = *(_DWORD *)(a1 + 16);
  v12 = (int)v11;
  if (v4 < (int)v11)
  {
    v13 = *(int *)(a1 + 20);
    if (v4 >= v13)
    {
      LODWORD(v11) = v4;
    }
    else if (*(_QWORD *)(a1 + 72) >= v13)
    {
      LODWORD(v11) = *(_DWORD *)(a1 + 20);
    }
    else
    {
      v11 = *(_QWORD *)(a1 + 72);
    }
  }
  v14 = *(_QWORD *)(a1 + 32);
  v44 = 0;
  v45 = 0;
  v43 = (float *)(v14 + 4 * (int)(*(_DWORD *)(a1 + 48) * (v4 % (v12 + 1))));
  LODWORD(v44) = kaldi::MatrixBase<float>::NumCols(a1 + 32);
  kaldi::VectorBase<float>::CopyFromVec(a2, (const void **)&v43);
  v15 = *(_QWORD *)(a1 + 136);
  v16 = v11;
  if (v15)
  {
    v17 = kaldi::MatrixBase<float>::NumRows(v15);
    v16 = v11;
    if (v17)
      v16 = *(_DWORD *)(a1 + 152) + v11;
  }
  v18 = -1.0 / (double)v16;
  *(float *)&v18 = v18;
  kaldi::VectorBase<float>::AddVec<double>(a2, (double **)(a1 + 88), v18);
  if (*(_BYTE *)(a1 + 24) && *(int *)(a2 + 8) >= 1)
  {
    v19 = 0;
    v20 = (double)(int)v11;
    while (1)
    {
      v21 = *(_QWORD *)(a1 + 136);
      if (!v21)
        break;
      v22 = kaldi::MatrixBase<float>::NumRows(v21);
      v23 = *(_QWORD *)(a1 + 88);
      v24 = *(_QWORD *)(a1 + 112);
      if (!v22)
        goto LABEL_28;
      v25 = (double)(*(_DWORD *)(a1 + 152) + (int)v11);
      v26 = *(double *)(v23 + 8 * v19) / v25;
      v27 = *(double *)(v24 + 8 * v19) / v25;
      v28 = v26 * v26;
LABEL_29:
      v30 = v27 - v28;
      if (v30 < 1.0e-20)
        v30 = 1.0e-20;
      *(float *)(*(_QWORD *)a2 + 4 * v19) = *(float *)(*(_QWORD *)a2 + 4 * v19) / sqrtf(v30);
      if (++v19 >= *(int *)(a2 + 8))
        goto LABEL_32;
    }
    v23 = *(_QWORD *)(a1 + 88);
    v24 = *(_QWORD *)(a1 + 112);
LABEL_28:
    v29 = *(double *)(v23 + 8 * v19) / v20;
    v27 = *(double *)(v24 + 8 * v19) / v20;
    v28 = v29 * v29;
    goto LABEL_29;
  }
LABEL_32:
  if (*(_QWORD *)(a1 + 80) >= *(int *)(a1 + 20))
  {
    kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v43, 1.0);
    if (*(_BYTE *)(a1 + 24))
      kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v43, 1.0);
  }
  v31 = *(_QWORD *)(a1 + 80);
  v32 = *(int *)(a1 + 16);
  if (v31 >= v32)
  {
    v33 = *(_QWORD *)(a1 + 32);
    v34 = *(_DWORD *)(a1 + 48);
    v42 = 0;
    v40 = (float *)(v33 + 4 * (int)(v34 * ((v31 - v32) % ((int)v32 + 1))));
    v41 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
    kaldi::VectorBase<double>::AddVec<float>(a1 + 88, &v40, -1.0);
    if (*(_BYTE *)(a1 + 24))
    {
      v35 = *(_QWORD *)(a1 + 80);
      v36 = *(int *)(a1 + 16);
      v37 = *(_QWORD *)(a1 + 32);
      v38 = *(_DWORD *)(a1 + 48);
      v39 = kaldi::MatrixBase<float>::NumCols(a1 + 32);
      v42 = 0;
      v40 = (float *)(v37 + 4 * (int)(v38 * ((v35 - v36) % (v36 + 1))));
      v41 = v39;
      kaldi::VectorBase<double>::AddVec2<float>(a1 + 112, &v40, -1.0);
    }
    v31 = *(_QWORD *)(a1 + 80);
  }
  *(_QWORD *)(a1 + 80) = v31 + 1;
}

uint64_t kaldi::OnlineSubsampleFe::OnlineSubsampleFe(uint64_t this, kaldi::OnlineFeatInputItf *a2, int a3)
{
  *(_QWORD *)this = &off_1E5D2A5F8;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_DWORD *)(this + 20) = 0;
  return this;
}

uint64_t kaldi::OnlineSubsampleFe::Compute(uint64_t a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  int v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int i;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _OWORD v24[3];
  _QWORD v25[2];
  int v26;

  v4 = *(int32x2_t **)a2;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v25, (*(_DWORD *)(a1 + 16) * v6), v5, 1, 0);
  *(_QWORD *)a2 = v25;
  v7 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v8 = a2[2];
  v9 = *a2;
  v24[1] = a2[1];
  v24[2] = v8;
  v24[0] = v9;
  v10 = (**v7)(v7, v24);
  v11 = 0;
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v25); ++i)
  {
    if ((i + *(_DWORD *)(a1 + 20)) % *(_DWORD *)(a1 + 16))
      v11 = v11;
    else
      v11 = (v11 + 1);
  }
  kaldi::Matrix<float>::Resize(v4, v11, v5, 1, 0);
  v13 = 0;
  v14 = 0;
  while (v13 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v25))
  {
    v15 = *(_DWORD *)(a1 + 20);
    if (!(v15 % *(_DWORD *)(a1 + 16)))
    {
      v16 = v25[0];
      v17 = v26;
      v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)v25);
      v22 = 0;
      v23 = 0;
      v20 = v16 + 4 * v17 * v13;
      v21 = v18;
      kaldi::MatrixBase<float>::CopyRowFromVec((uint64_t)v4, (uint64_t)&v20, v14++);
      v15 = *(_DWORD *)(a1 + 20);
    }
    *(_DWORD *)(a1 + 20) = v15 + 1;
    ++v13;
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v25);
  return v10;
}

void sub_1ADCB61BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineSubsampleFe::Dim(kaldi::OnlineSubsampleFe *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

int32x2_t *kaldi::OnlineLdaInput::OnlineLdaInput(int32x2_t *a1, uint64_t a2, uint64_t a3, __int32 a4, __int32 a5)
{
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  _QWORD v16[34];

  *a1 = (int32x2_t)&off_1E5D2A1C0;
  a1[1] = (int32x2_t)a2;
  a1[2].i32[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  a1[2].i32[1] = a4;
  a1[3].i32[0] = a5;
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[4]);
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[12]);
  v9 = a4 + a5 + 1;
  if (kaldi::MatrixBase<float>::NumCols(a3) == a1[2].i32[0] * v9)
  {
    kaldi::Matrix<float>::operator=(a1 + 4, a3);
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumCols(a3) != a1[2].i32[0] * v9 + 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Invalid parameters supplied to OnlineLdaInput", 45);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
    }
    v10 = kaldi::MatrixBase<float>::NumRows(a3);
    v11 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::Matrix<float>::Resize(a1 + 4, v10, (v11 - 1), 0, 0);
    LODWORD(v10) = kaldi::MatrixBase<float>::NumRows(a3);
    v12 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v16, a3, 0, v10, 0, v12 - 1);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[4], (int *)v16, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
    v13 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Vector<float>::Resize((void **)&a1[9], v13, 0);
    v14 = kaldi::MatrixBase<float>::NumCols(a3);
    kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)&a1[9], a3, v14 - 1);
  }
  return a1;
}

void sub_1ADCB63B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  kaldi::Matrix<float>::~Matrix(v3);
  kaldi::Vector<float>::Destroy(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void kaldi::OnlineLdaInput::SpliceFrames(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, int32x2_t *a5)
{
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int32x2_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;

  v36 = kaldi::MatrixBase<float>::NumRows(a1);
  v10 = kaldi::MatrixBase<float>::NumRows(a2) + v36;
  v11 = kaldi::MatrixBase<float>::NumRows(a3) - a4 + v10 + 1;
  v38 = a1;
  v12 = kaldi::MatrixBase<float>::NumCols(a1);
  v34 = a2;
  v13 = kaldi::MatrixBase<float>::NumCols(a2);
  v35 = a3;
  v14 = kaldi::MatrixBase<float>::NumCols(a3);
  if (v13 <= v14)
    v15 = v14;
  else
    v15 = v13;
  if (v12 <= v15)
    v16 = v15;
  else
    v16 = v12;
  if ((int)v11 <= 0)
  {
    kaldi::Matrix<float>::Resize(a5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a5, v11, v16 * a4, 0, 0);
    v37 = v10;
    v33 = -v10;
    v17 = 0;
    v39 = a4;
    v40 = 0;
    v32 = v11;
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      do
      {
        v21 = v17 + v20;
        v22 = *a5;
        v23 = a5[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a5);
        v47 = 0;
        v48 = 0;
        v45 = *(_QWORD *)&v22 + v40 * v23 + v19;
        v46 = v16;
        if (v17 + v20 >= v36)
        {
          if (v21 >= v37)
          {
            v30 = *(_QWORD *)v35;
            v31 = *(_DWORD *)(v35 + 16);
            v29 = kaldi::MatrixBase<float>::NumCols(v35);
            v43 = 0;
            v44 = 0;
            v41 = (const void *)(v30 + 4 * v31 * (v33 + (int)v17 + (int)v20));
          }
          else
          {
            v27 = *(_QWORD *)v34;
            v28 = *(int *)(v34 + 16);
            v29 = kaldi::MatrixBase<float>::NumCols(v34);
            v43 = 0;
            v44 = 0;
            v41 = (const void *)(v27 + 4 * (v17 - v36 + v20) * v28);
          }
          v42 = v29;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v45, &v41);
        }
        else
        {
          v24 = *(_QWORD *)v38;
          v25 = *(int *)(v38 + 16);
          v26 = kaldi::MatrixBase<float>::NumCols(v38);
          v43 = 0;
          v44 = 0;
          v41 = (const void *)(v24 + 4 * v21 * v25);
          v42 = v26;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v45, &v41);
        }
        ++v20;
        v19 += 4 * v16;
        v18 += v16;
      }
      while (v39 != v20);
      ++v17;
      v40 += 4;
    }
    while (v17 != v32);
  }
}

void kaldi::OnlineLdaInput::TransformToOutput(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  uint64_t v6;
  uint64_t v7;

  if (kaldi::MatrixBase<float>::NumRows(a2))
  {
    v6 = kaldi::MatrixBase<float>::NumRows(a2);
    v7 = kaldi::MatrixBase<float>::NumRows(a1 + 32);
    kaldi::Matrix<float>::Resize(a3, v6, v7, 0, 0);
    kaldi::MatrixBase<float>::AddMatMat((uint64_t)a3, a2, CblasNoTrans, a1 + 32, CblasTrans, 1.0, 0.0);
    if (*(_DWORD *)(a1 + 80))
      kaldi::MatrixBase<float>::AddVecToRows<float>((uint64_t *)a3, (uint64_t *)(a1 + 72), 1.0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
}

uint64_t kaldi::OnlineLdaInput::Compute(int32x2_t *a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, _OWORD *);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  __int32 v13;
  int32x2_t v14;
  int v15;
  int v16;
  int v17;
  int32x2_t v18;
  __int32 v19;
  int v20;
  int32x2_t v21;
  int v22;
  int v23;
  uint64_t v25;
  __int32 v26;
  int32x2_t v27;
  __int32 v28;
  int v29;
  int32x2_t v30;
  int v31;
  int32x2_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int32x2_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _OWORD v44[3];
  _QWORD v45[2];
  __int32 v46;

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v45, v5, a1[2].u32[0], 0, 0);
  *(_QWORD *)a2 = v45;
  v6 = (uint64_t (***)(_QWORD, _OWORD *))a1[1];
  v7 = a2[2];
  v8 = *a2;
  v44[1] = a2[1];
  v44[2] = v7;
  v44[0] = v8;
  v9 = (**v6)(v6, v44);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
    v10 = 0;
  else
    v10 = v9;
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
      v11 = 1;
    else
      v11 = v9;
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]))
      {
        if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
        {
          v25 = a1[2].u32[1];
          if ((_DWORD)v25)
          {
            kaldi::Matrix<float>::Resize(a1 + 12, v25, a1[2].u32[0], 0, 0);
            if (a1[2].i32[1] >= 1)
            {
              v26 = 0;
              do
              {
                v27 = a1[12];
                v28 = a1[14].i32[0];
                v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[12]);
                v42 = 0;
                v43 = 0;
                v40 = (int32x2_t)(*(_QWORD *)&v27 + 4 * v28 * v26);
                v41 = v29;
                v30 = (int32x2_t)v45[0];
                v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
                v34 = 0;
                v35 = 0;
                v32 = v30;
                v33 = v31;
                kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v40, (const void **)&v32);
                ++v26;
              }
              while (v26 < a1[2].i32[1]);
            }
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v40);
      if ((v9 & 1) == 0)
      {
        v12 = a1[3].u32[0];
        if ((int)v12 >= 1)
        {
          kaldi::Matrix<float>::Resize(&v40, v12, a1[2].u32[0], 0, 0);
          if (a1[3].i32[0] >= 1)
          {
            v13 = 0;
            do
            {
              if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v45) < 1)
              {
                v21 = v40;
                v22 = v43;
                v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                v34 = 0;
                v35 = 0;
                v32 = (int32x2_t)(*(_QWORD *)&v21 + 4 * v22 * v13);
                v33 = v23;
                v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]);
                v18 = a1[12];
                v19 = a1[14].i32[0];
                v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[12]);
              }
              else
              {
                v14 = v40;
                v15 = v43;
                v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                v34 = 0;
                v35 = 0;
                v32 = (int32x2_t)(*(_QWORD *)&v14 + 4 * v15 * v13);
                v33 = v16;
                v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)v45);
                v18 = (int32x2_t)v45[0];
                v19 = v46;
                v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
              }
              v38 = 0;
              v39 = 0;
              v36 = *(_QWORD *)&v18 + 4 * v19 * (v17 - 1);
              v37 = v20;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (const void **)&v36);
              ++v13;
            }
            while (v13 < a1[3].i32[0]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v32);
      kaldi::OnlineLdaInput::SpliceFrames((uint64_t)&a1[12], (uint64_t)v45, (uint64_t)&v40, a1[2].i32[1] + a1[3].i32[0] + 1, &v32);
      kaldi::OnlineLdaInput::TransformToOutput((uint64_t)a1, (uint64_t)&v32, v4);
      kaldi::OnlineLdaInput::ComputeNextRemainder(a1, (uint64_t)v45);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v40);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v45);
  return v9;
}

void sub_1ADCB6B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v10 - 128);
  _Unwind_Resume(a1);
}

void kaldi::OnlineLdaInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int32x2_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int32x2_t v12;
  __int32 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int32x2_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;

  v4 = a1[3].i32[0] + a1[2].i32[1];
  v5 = a1 + 12;
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[12]);
  v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[2].u32[0], 0, 0);
    v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    v18 = v5;
    v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = v19 - v8 + v9;
      v17 = v9 - v8;
      do
      {
        v25 = 0;
        v26 = 0;
        v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          v15 = *(_QWORD *)a2;
          v16 = *(_DWORD *)(a2 + 16);
          v14 = kaldi::MatrixBase<float>::NumCols(a2);
          v22 = 0;
          v23 = 0;
          v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          v12 = a1[12];
          v13 = a1[14].i32[0];
          v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          v22 = 0;
          v23 = 0;
          v20 = *(_QWORD *)&v12 + 4 * v13 * (v11 + v10);
        }
        v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while ((_DWORD)v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1ADCB6D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::OnlineTransformInput::OnlineTransformInput(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD v9[34];

  *a1 = (int32x2_t)&off_1E5D2A970;
  a1[1] = (int32x2_t)a2;
  a1[2].i32[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  kaldi::Matrix<float>::Matrix((uint64_t)&a1[3]);
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  if (kaldi::MatrixBase<float>::NumCols(a3) == a1[2].i32[0])
  {
    kaldi::Matrix<float>::operator=(a1 + 3, a3);
    kaldi::Vector<float>::Resize((void **)&a1[8], 0, 0);
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumCols(a3) != a1[2].i32[0] + 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Invalid parameters supplied to OnlineTransformInput", 51);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
    }
    v5 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Matrix<float>::Resize(a1 + 3, v5, a1[2].u32[0], 0, 0);
    v6 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v9, a3, 0, v6, 0, a1[2].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&a1[3], (int *)v9, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
    v7 = kaldi::MatrixBase<float>::NumRows(a3);
    kaldi::Vector<float>::Resize((void **)&a1[8], v7, 0);
    kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)&a1[8], a3, a1[2].i32[0]);
  }
  return a1;
}

void sub_1ADCB6EFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  kaldi::Vector<float>::Destroy(v2);
  kaldi::Matrix<float>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineTransformInput::Compute(uint64_t a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v14[3];
  _BYTE v15[40];

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  kaldi::MatrixBase<float>::NumRows(a1 + 24);
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v15, v5, v6, 0, 0);
  *(_QWORD *)a2 = v15;
  v7 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v8 = a2[2];
  v9 = *a2;
  v14[1] = a2[1];
  v14[2] = v8;
  v14[0] = v9;
  v10 = (**v7)(v7, v14);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v15))
  {
    v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)v15);
    v12 = kaldi::MatrixBase<float>::NumRows(a1 + 24);
    kaldi::Matrix<float>::Resize(v4, v11, v12, 0, 0);
    kaldi::MatrixBase<float>::AddMatMat((uint64_t)v4, (uint64_t)v15, CblasNoTrans, a1 + 24, CblasTrans, 1.0, 0.0);
    if (*(_DWORD *)(a1 + 72))
      kaldi::MatrixBase<float>::AddVecToRows<float>((uint64_t *)v4, (uint64_t *)(a1 + 64), 1.0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v15);
  return v10;
}

void sub_1ADCB70AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

kaldi::OnlineBufferingInput *kaldi::OnlineBufferingInput::OnlineBufferingInput(kaldi::OnlineBufferingInput *this, kaldi::OnlineFeatInputItf *a2, char a3)
{
  *(_QWORD *)this = &off_1E5D2A908;
  *((_QWORD *)this + 1) = a2;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 16);
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 60) = 1;
  *((_BYTE *)this + 61) = a3;
  return this;
}

BOOL kaldi::OnlineBufferingInput::Compute(int32x2_t *a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (***v8)(_QWORD, _OWORD *);
  __int128 v9;
  __int128 v10;
  int v11;
  int v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17[8];
  int v18[8];
  _OWORD v19[3];

  v4 = *(int32x2_t **)a2;
  if (!kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2))
    return 1;
  v5 = 0;
  while (1)
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2]) == a1[7].i32[0])
    {
      if (!a1[7].i8[4])
      {
        if ((_DWORD)v5)
          v15 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 8))(a1);
        else
          v15 = 0;
        kaldi::Matrix<float>::Resize(v4, v5, v15, 2, 0);
        return 0;
      }
      a1[7].i32[0] = 0;
      v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      v7 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 8))(a1);
      kaldi::Matrix<float>::Resize(a1 + 2, v6, v7, 1, 0);
      *(_QWORD *)a2 = a1 + 2;
      v8 = (uint64_t (***)(_QWORD, _OWORD *))a1[1];
      v9 = a2[2];
      v10 = *a2;
      v19[1] = a2[1];
      v19[2] = v9;
      v19[0] = v10;
      a1[7].i8[4] = (**v8)(v8, v19);
    }
    if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2]))
      break;
    v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[2]) - a1[7].i32[0];
    v12 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4) - v5;
    if (v11 >= v12)
      v11 = v12;
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v18, (uint64_t)v4, v5, v11, 0, v4[1].i32[0]);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)&a1[2], a1[7].i32[0], v11, 0, a1[3].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>(v18, v17, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v18);
    a1[7].i32[0] += v11;
    v5 = (v11 + v5);
    if ((_DWORD)v5 == kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
      return 1;
  }
  if ((_DWORD)v5)
    v14 = (*(uint64_t (**)(int32x2_t *))(*(_QWORD *)a1 + 8))(a1);
  else
    v14 = 0;
  kaldi::Matrix<float>::Resize(v4, v5, v14, 2, 0);
  v16 = a1[7].u8[4];
  if (a1[7].i8[5] && a1[7].i8[4])
  {
    kaldi::Matrix<float>::Swap((uint64_t *)&a1[2], (uint64_t *)v4);
    a1[7].i32[0] = 0;
    v16 = a1[7].u8[4];
  }
  return v16 != 0;
}

void sub_1ADCB7320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePadInput::OnlinePadInput(uint64_t this, kaldi::OnlineFeatInputItf *a2, int a3)
{
  _QWORD v3[34];

  *(_QWORD *)this = &off_1E5D2A228;
  *(_QWORD *)(this + 8) = a2;
  *(_DWORD *)(this + 16) = a3;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 40) = 0;
  if (a3 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"end_pad_ > 0", 12);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return this;
}

void sub_1ADCB73C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Vector<float>::Destroy(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlinePadInput::Compute(uint64_t a1, _OWORD *a2)
{
  int32x2_t *v3;
  uint64_t (***v4)(_QWORD, _OWORD *);
  __int128 v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v13[4];
  _OWORD v14[3];

  v4 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v5 = a2[1];
  v14[0] = *a2;
  v3 = *(int32x2_t **)&v14[0];
  v14[1] = v5;
  v14[2] = a2[2];
  v6 = (**v4)(v4, v14);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v3) >= 1)
  {
    v7 = (void *)(*(_QWORD *)v3 + 4 * (int)(v3[2].i32[0] * (kaldi::MatrixBase<float>::NumRows((uint64_t)v3) - 1)));
    v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
    v13[2] = 0;
    v13[0] = v7;
    v13[1] = (void *)v8;
    kaldi::Vector<float>::Resize((void **)(a1 + 24), v8, 1);
    kaldi::VectorBase<float>::CopyFromVec(a1 + 24, (const void **)v13);
  }
  if ((v6 & 1) == 0 && *(int *)(a1 + 32) >= 1)
  {
    v9 = *(_DWORD *)(a1 + 16) + kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v3, v9, v10, 2, 0);
    v11 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, (uint64_t)v3, v11 - *(_DWORD *)(a1 + 16), *(_DWORD *)(a1 + 16), 0, v3[1].i32[0]);
    kaldi::MatrixBase<float>::CopyRowsFromVec(v13, (char **)(a1 + 24));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
  }
  return v6;
}

void sub_1ADCB7528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceInput::SpliceFrames(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int32x2_t *a6)
{
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int32x2_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;

  v37 = kaldi::MatrixBase<float>::NumRows(a2);
  v11 = kaldi::MatrixBase<float>::NumRows(a3) + v37;
  v12 = kaldi::MatrixBase<float>::NumRows(a4) - a5 + v11 + 1;
  v39 = a2;
  v13 = kaldi::MatrixBase<float>::NumCols(a2);
  v35 = a3;
  v14 = kaldi::MatrixBase<float>::NumCols(a3);
  v36 = a4;
  v15 = kaldi::MatrixBase<float>::NumCols(a4);
  if (v14 <= v15)
    v16 = v15;
  else
    v16 = v14;
  if (v13 <= v16)
    v17 = v16;
  else
    v17 = v13;
  if ((int)v12 <= 0)
  {
    kaldi::Matrix<float>::Resize(a6, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a6, v12, v17 * a5, 0, 0);
    v38 = v11;
    v34 = -v11;
    v18 = 0;
    v40 = a5;
    v41 = 0;
    v33 = v12;
    do
    {
      v19 = 0;
      v20 = 0;
      v21 = 0;
      do
      {
        v22 = v18 + v21;
        v23 = *a6;
        v24 = a6[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        v48 = 0;
        v49 = 0;
        v46 = *(_QWORD *)&v23 + v41 * v24 + v20;
        v47 = v17;
        if (v18 + v21 >= v37)
        {
          if (v22 >= v38)
          {
            v31 = *(_QWORD *)v36;
            v32 = *(_DWORD *)(v36 + 16);
            v30 = kaldi::MatrixBase<float>::NumCols(v36);
            v44 = 0;
            v45 = 0;
            v42 = (const void *)(v31 + 4 * v32 * (v34 + (int)v18 + (int)v21));
          }
          else
          {
            v28 = *(_QWORD *)v35;
            v29 = *(int *)(v35 + 16);
            v30 = kaldi::MatrixBase<float>::NumCols(v35);
            v44 = 0;
            v45 = 0;
            v42 = (const void *)(v28 + 4 * (v18 - v37 + v21) * v29);
          }
          v43 = v30;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v46, &v42);
        }
        else
        {
          v25 = *(_QWORD *)v39;
          v26 = *(int *)(v39 + 16);
          v27 = kaldi::MatrixBase<float>::NumCols(v39);
          v44 = 0;
          v45 = 0;
          v42 = (const void *)(v25 + 4 * v22 * v26);
          v43 = v27;
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v46, &v42);
        }
        ++v21;
        v20 += 4 * v17;
        v19 += v17;
      }
      while (v40 != v21);
      ++v18;
      v41 += 4;
    }
    while (v18 != v33);
  }
}

uint64_t kaldi::OnlineSpliceInput::Compute(int32x2_t *a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, _OWORD *);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  void *v12;
  uint64_t v13;
  char v14;
  int v15;
  int32x2_t v16;
  int v17;
  int v18;
  int v19;
  int32x2_t v20;
  __int32 v21;
  int v22;
  int32x2_t v23;
  int v24;
  int v25;
  uint64_t v27;
  __int32 v28;
  int32x2_t v29;
  __int32 v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int32x2_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  _OWORD v46[3];
  _QWORD v47[2];
  __int32 v48;

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v47, v5, a1[2].u32[0], 1, 0);
  *(_QWORD *)a2 = v47;
  v6 = (uint64_t (***)(_QWORD, _OWORD *))a1[1];
  v7 = a2[2];
  v8 = *a2;
  v46[1] = a2[1];
  v46[2] = v7;
  v46[0] = v8;
  v9 = (**v6)(v6, v46);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47))
    v10 = 0;
  else
    v10 = v9;
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47))
      v11 = 1;
    else
      v11 = v9;
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4])
        && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v47) >= 1)
      {
        v27 = a1[2].u32[1];
        if ((int)v27 >= 1)
        {
          kaldi::Matrix<float>::Resize(a1 + 4, v27, a1[2].u32[0], 1, 0);
          if (a1[2].i32[1] >= 1)
          {
            v28 = 0;
            do
            {
              v29 = a1[4];
              v30 = a1[6].i32[0];
              v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
              v40 = 0;
              v41 = 0;
              v38 = (int32x2_t)(*(_QWORD *)&v29 + 4 * v30 * v28);
              v39 = v31;
              v32 = v47[0];
              v33 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
              v44 = 0;
              v45 = 0;
              v42 = v32;
              v43 = v33;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v38, (const void **)&v42);
              ++v28;
            }
            while (v28 < a1[2].i32[1]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v38);
      v13 = a1[3].u32[0];
      if ((int)v13 < 1)
        v14 = 1;
      else
        v14 = v9;
      if ((v14 & 1) == 0)
      {
        kaldi::Matrix<float>::Resize(&v38, v13, a1[2].u32[0], 1, 0);
        LODWORD(v13) = a1[3].i32[0];
        if ((int)v13 >= 1)
        {
          v15 = 0;
          do
          {
            if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v47) < 1)
            {
              v23 = v38;
              v24 = v41;
              v25 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v38);
              v44 = 0;
              v45 = 0;
              v42 = *(_QWORD *)&v23 + 4 * v24 * v15;
              v43 = v25;
              v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
              v20 = a1[4];
              v21 = a1[6].i32[0];
              v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
            }
            else
            {
              v16 = v38;
              v17 = v41;
              v18 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v38);
              v44 = 0;
              v45 = 0;
              v42 = *(_QWORD *)&v16 + 4 * v17 * v15;
              v43 = v18;
              v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
              v20 = (int32x2_t)v47[0];
              v21 = v48;
              v22 = kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
            }
            v36 = 0;
            v37 = 0;
            v34 = *(_QWORD *)&v20 + 4 * v21 * (v19 - 1);
            v35 = v22;
            v12 = kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, (const void **)&v34);
            ++v15;
            LODWORD(v13) = a1[3].i32[0];
          }
          while (v15 < (int)v13);
        }
      }
      kaldi::OnlineSpliceInput::SpliceFrames((uint64_t)v12, (uint64_t)&a1[4], (uint64_t)v47, (uint64_t)&v38, a1[2].i32[1] + v13 + 1, v4);
      kaldi::OnlineSpliceInput::ComputeNextRemainder(a1, (uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v38);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v47);
  return v9;
}

void sub_1ADCB7B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v5 - 128);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int32x2_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int32x2_t v12;
  __int32 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int32x2_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;

  v4 = a1[3].i32[0] + a1[2].i32[1];
  v5 = a1 + 4;
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
  v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[2].u32[0], 0, 0);
    v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    v18 = v5;
    v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = v19 - v8 + v9;
      v17 = v9 - v8;
      do
      {
        v25 = 0;
        v26 = 0;
        v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          v15 = *(_QWORD *)a2;
          v16 = *(_DWORD *)(a2 + 16);
          v14 = kaldi::MatrixBase<float>::NumCols(a2);
          v22 = 0;
          v23 = 0;
          v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          v12 = a1[4];
          v13 = a1[6].i32[0];
          v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          v22 = 0;
          v23 = 0;
          v20 = *(_QWORD *)&v12 + 4 * v13 * (v11 + v10);
        }
        v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while ((_DWORD)v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1ADCB7D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceBatchInput::SpliceFrames(uint64_t a1, int *a2, int *a3, int a4, int32x2_t *a5)
{
  int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  int v15[8];

  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v11 = v9 - a4 + v10 + 1;
  v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v13 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
  if (v11 <= 0)
  {
    kaldi::Matrix<float>::Resize(a5, 0, 0, 0, 0);
  }
  else
  {
    if ((int)v12 <= (int)v13)
      v14 = v13;
    else
      v14 = v12;
    kaldi::Matrix<float>::Resize(a5, (v9 + v10), v14, 1, 0);
    if (v9 >= 1)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a5, 0, v9, 0, a5[1].i32[0]);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v15, a2, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
    }
    if (v10 >= 1)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v15, (uint64_t)a5, v9, v10, 0, a5[1].i32[0]);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v15, a3, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v15);
    }
  }
}

void sub_1ADCB7EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineSpliceBatchInput::Compute(int32x2_t *a1, __int128 *a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v15;
  __int32 v16;
  int32x2_t v17;
  __int32 v18;
  int v19;
  const void *v20;
  int v21;
  const void *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  uint64_t v29;
  _OWORD v30[3];
  int v31[10];

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]))
  {
    v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    kaldi::Matrix<float>::Resize(v4, (a1[5].i32[0] + v5), a1[4].u32[0], 1, 0);
  }
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v31, v6, a1[4].u32[0], 0, 0);
  *(_QWORD *)a2 = v31;
  v7 = (uint64_t (***)(_QWORD, _OWORD *))a1[3];
  v8 = a2[2];
  v9 = *a2;
  v30[1] = a2[1];
  v30[2] = v8;
  v30[0] = v9;
  v10 = (**v7)(v7, v30);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v31))
    v11 = 0;
  else
    v11 = v10;
  if (v11 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    v10 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v31))
      v12 = 1;
    else
      v12 = v10;
    if ((v12 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]))
    {
      v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]);
      if (!(_DWORD)v13)
      {
        v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v31);
        if ((int)v13 >= 1)
        {
          v15 = a1[4].u32[1];
          if ((int)v15 >= 1)
          {
            kaldi::Matrix<float>::Resize(a1 + 6, v15, a1[4].u32[0], 0, 0);
            if (a1[4].i32[1] >= 1)
            {
              v16 = 0;
              do
              {
                v17 = a1[6];
                v18 = a1[8].i32[0];
                v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[6]);
                v28 = 0;
                v29 = 0;
                v26 = *(_QWORD *)&v17 + 4 * v18 * v16;
                v27 = v19;
                v20 = *(const void **)v31;
                v21 = kaldi::MatrixBase<float>::NumCols((uint64_t)v31);
                v24 = 0;
                v25 = 0;
                v22 = v20;
                v23 = v21;
                v13 = (uint64_t)kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v26, &v22);
                ++v16;
              }
              while (v16 < a1[4].i32[1]);
            }
          }
        }
      }
      kaldi::OnlineSpliceBatchInput::SpliceFrames(v13, (int *)&a1[6], v31, a1[4].i32[1] + a1[5].i32[0] + 1, v4);
      kaldi::OnlineSpliceBatchInput::ComputeNextRemainder(a1, (uint64_t)v31);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      v10 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v31);
  return v10;
}

void sub_1ADCB814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineSpliceBatchInput::ComputeNextRemainder(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int32x2_t *v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int32x2_t v12;
  __int32 v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int32x2_t *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  int v28;

  v4 = a1[5].i32[0] + a1[4].i32[1];
  v5 = a1 + 6;
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[6]);
  v7 = kaldi::MatrixBase<float>::NumRows(a2) + v6;
  if (v7 >= v4)
    v8 = v4;
  else
    v8 = v7;
  if ((_DWORD)v8)
  {
    kaldi::Matrix<float>::Matrix((uint64_t)v27, v8, a1[4].u32[0], 0, 0);
    v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
    v18 = v5;
    v9 = kaldi::MatrixBase<float>::NumRows(a2);
    if ((int)v8 >= 1)
    {
      v10 = 0;
      v11 = v19 - v8 + v9;
      v17 = v9 - v8;
      do
      {
        v25 = 0;
        v26 = 0;
        v24 = v27[0] + 4 * v28 * v10;
        LODWORD(v25) = kaldi::MatrixBase<float>::NumCols((uint64_t)v27);
        if (v11 + v10 >= v19)
        {
          v15 = *(_QWORD *)a2;
          v16 = *(_DWORD *)(a2 + 16);
          v14 = kaldi::MatrixBase<float>::NumCols(a2);
          v22 = 0;
          v23 = 0;
          v20 = v15 + 4 * v16 * (v17 + v10);
        }
        else
        {
          v12 = a1[6];
          v13 = a1[8].i32[0];
          v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)v18);
          v22 = 0;
          v23 = 0;
          v20 = *(_QWORD *)&v12 + 4 * v13 * (v11 + v10);
        }
        v21 = v14;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v24, (const void **)&v20);
        ++v10;
      }
      while ((_DWORD)v8 != v10);
    }
    kaldi::Matrix<float>::operator=(v18, (uint64_t)v27);
    kaldi::Matrix<float>::~Matrix((uint64_t)v27);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v5, 0, 0, 0, 0);
  }
}

void sub_1ADCB833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::OnlineRecordedInput::Compute(_DWORD *a1, int32x2_t **a2)
{
  int32x2_t *v3;
  int v4;
  uint64_t v5;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13[8];

  v3 = *a2;
  v4 = a1[2];
  v5 = (uint64_t)(a1 + 4);
  if (v4 == kaldi::MatrixBase<float>::NumRows((uint64_t)(a1 + 4)))
  {
    kaldi::Matrix<float>::Resize(v3, 0, 0, 0, 0);
    return 0;
  }
  else
  {
    kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    kaldi::MatrixBase<float>::NumCols((uint64_t)v3);
    (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
    LODWORD(v7) = kaldi::MatrixBase<float>::NumRows(v5) - a1[2];
    v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v3);
    if ((int)v7 >= v8)
      v7 = v8;
    else
      v7 = v7;
    v9 = kaldi::MatrixBase<float>::NumCols(v5);
    kaldi::Matrix<float>::Resize(v3, v7, v9, 0, 0);
    v10 = a1[2];
    v11 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v13, v5, v10, v7, 0, v11);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v3, v13, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v13);
    v12 = a1[2] + v7;
    a1[2] = v12;
    return v12 != kaldi::MatrixBase<float>::NumRows(v5);
  }
}

void sub_1ADCB849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineCacheInput::Compute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v43[3];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
  {
    v6 = operator new();
    kaldi::Matrix<float>::Matrix(v6);
    *(_QWORD *)(a2 + 16) = v6;
  }
  v7 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v8 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v8;
  v43[2] = *(_OWORD *)(a2 + 32);
  v9 = (**v7)(v7, v43);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (kaldi::MatrixBase<float>::NumRows(v4) && *(_BYTE *)(a1 + 128))
  {
    v10 = operator new();
    kaldi::Matrix<float>::Matrix(v10, v4);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(uint64_t **)(a1 + 24);
    if ((unint64_t)v12 >= v11)
    {
      v14 = *(_QWORD *)(a1 + 16);
      v15 = ((uint64_t)v12 - v14) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = v11 - v14;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 32, v18);
      else
        v19 = 0;
      v20 = (uint64_t *)&v19[8 * v15];
      v21 = &v19[8 * v18];
      *v20 = v10;
      v13 = v20 + 1;
      v23 = *(char **)(a1 + 16);
      v22 = *(char **)(a1 + 24);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *--v20 = v24;
        }
        while (v22 != v23);
        v22 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 16) = v20;
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v12 = v10;
      v13 = v12 + 1;
    }
    *(_QWORD *)(a1 + 24) = v13;
  }
  if (*(_QWORD *)(a2 + 16) && kaldi::MatrixBase<float>::NumRows(v4) && *(_BYTE *)(a1 + 129))
  {
    v25 = operator new();
    kaldi::Matrix<float>::Matrix(v25, *(_QWORD *)(a2 + 16));
    v26 = *(_QWORD *)(a1 + 120);
    v27 = *(uint64_t **)(a1 + 112);
    if ((unint64_t)v27 >= v26)
    {
      v29 = *(_QWORD *)(a1 + 104);
      v30 = ((uint64_t)v27 - v29) >> 3;
      if ((unint64_t)(v30 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v31 = v26 - v29;
      v32 = v31 >> 2;
      if (v31 >> 2 <= (unint64_t)(v30 + 1))
        v32 = v30 + 1;
      if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 120, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v30];
      v36 = &v34[8 * v33];
      *v35 = v25;
      v28 = v35 + 1;
      v38 = *(char **)(a1 + 104);
      v37 = *(char **)(a1 + 112);
      if (v37 != v38)
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v35 = v39;
        }
        while (v37 != v38);
        v37 = *(char **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v35;
      *(_QWORD *)(a1 + 112) = v28;
      *(_QWORD *)(a1 + 120) = v36;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *v27 = v25;
      v28 = v27 + 1;
    }
    *(_QWORD *)(a1 + 112) = v28;
  }
  std::mutex::unlock((std::mutex *)(a1 + 40));
  if (!v5)
  {
    v40 = *(_QWORD *)(a2 + 16);
    if (v40)
    {
      v41 = kaldi::Matrix<float>::~Matrix(v40);
      MEMORY[0x1AF44D190](v41, 0x1080C40EB13E0A1);
    }
  }
  return v9;
}

void sub_1ADCB8774(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  MEMORY[0x1AF44D190](v2, 0x1080C40EB13E0A1);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void kaldi::OnlineCacheInput::GetCachedData(uint64_t a1, int32x2_t *a2, int32x2_t *a3)
{
  std::mutex *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  int v26[8];

  v6 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_BYTE *)(a1 + 128))
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 24) == v7)
    {
      v9 = 0;
      v12 = 0;
    }
    else
    {
      v8 = 0;
      LODWORD(v9) = 0;
      do
      {
        v10 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(v7 + 8 * v8));
        v11 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v8));
        v9 = (v10 + v9);
        ++v8;
        v7 = *(_QWORD *)(a1 + 16);
      }
      while (v8 < (*(_QWORD *)(a1 + 24) - v7) >> 3);
      v12 = v11;
    }
    kaldi::Matrix<float>::Resize(a2, v9, v12, 0, 0);
    v13 = *(_QWORD *)(a1 + 16);
    if (*(_QWORD *)(a1 + 24) != v13)
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(v13 + 8 * v14));
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a2, v15, v16, 0, v12);
        kaldi::MatrixBase<float>::CopyFromMat<float>(v26, *(int **)(*(_QWORD *)(a1 + 16) + 8 * v14), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
        v15 += v16;
        ++v14;
        v13 = *(_QWORD *)(a1 + 16);
      }
      while (v14 < (*(_QWORD *)(a1 + 24) - v13) >> 3);
    }
  }
  if (a3)
  {
    if (*(_BYTE *)(a1 + 129))
    {
      v17 = *(uint64_t **)(a1 + 104);
      if (v17 != *(uint64_t **)(a1 + 112))
      {
        v18 = 0;
        LODWORD(v19) = 0;
        do
        {
          v19 = kaldi::MatrixBase<float>::NumRows(v17[v18++]) + v19;
          v17 = *(uint64_t **)(a1 + 104);
        }
        while (v18 < (uint64_t)(*(_QWORD *)(a1 + 112) - (_QWORD)v17) >> 3);
        v20 = kaldi::MatrixBase<float>::NumCols(*v17);
        v21 = v20;
        kaldi::Matrix<float>::Resize(a3, v19, v20, 0, 0);
        v22 = *(_QWORD *)(a1 + 104);
        if (*(_QWORD *)(a1 + 112) != v22)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(v22 + 8 * v23));
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a3, v24, v25, 0, v21);
            kaldi::MatrixBase<float>::CopyFromMat<float>(v26, *(int **)(*(_QWORD *)(a1 + 104) + 8 * v23), 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
            v24 += v25;
            ++v23;
            v22 = *(_QWORD *)(a1 + 104);
          }
          while (v23 < (*(_QWORD *)(a1 + 112) - v22) >> 3);
        }
      }
    }
  }
  std::mutex::unlock(v6);
}

void sub_1ADCB89EC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::OnlineCacheInput::Deallocate(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v1 = this;
  v3 = this[2];
  v2 = this[3];
  if (v2 == v3)
  {
    v3 = this[3];
  }
  else
  {
    v4 = 0;
    do
    {
      this = *(_QWORD **)(v3 + 8 * v4);
      if (this)
      {
        v5 = kaldi::Matrix<float>::~Matrix((uint64_t)this);
        this = (_QWORD *)MEMORY[0x1AF44D190](v5, 0x1080C40EB13E0A1);
        v3 = v1[2];
        v2 = v1[3];
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  v1[3] = v3;
  v7 = v1[13];
  v6 = v1[14];
  if (v6 == v7)
  {
    v7 = v1[14];
  }
  else
  {
    v8 = 0;
    do
    {
      this = *(_QWORD **)(v7 + 8 * v8);
      if (this)
      {
        v9 = kaldi::Matrix<float>::~Matrix((uint64_t)this);
        this = (_QWORD *)MEMORY[0x1AF44D190](v9, 0x1080C40EB13E0A1);
        v7 = v1[13];
        v6 = v1[14];
      }
      ++v8;
    }
    while (v8 < (v6 - v7) >> 3);
  }
  v1[14] = v7;
  return this;
}

uint64_t kaldi::OnlineDeltaInput::OnlineDeltaInput(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *(_QWORD *)a1 = &off_1E5D2A468;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = *a2;
  *(_DWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 8))(a3);
  kaldi::Matrix<float>::Matrix(a1 + 32);
  return a1;
}

void kaldi::OnlineDeltaInput::AppendFrames(int *a1, int *a2, int *a3, int32x2_t *a4)
{
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17[8];

  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)a3);
  v11 = (v9 + v8 + v10);
  if (v9 + v8 + v10)
  {
    v12 = v10;
    LODWORD(v13) = kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    v14 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
    v15 = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
    if (v14 <= v15)
      v16 = v15;
    else
      v16 = v14;
    if ((int)v13 <= v16)
      v13 = v16;
    else
      v13 = v13;
    kaldi::Matrix<float>::Resize(a4, v11, v13, 0, 0);
    if (v8)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, 0, v8, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a1, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
    if (v9)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, v8, v9, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a2, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
    if (v12)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v17, (uint64_t)a4, v9 + v8, v12, 0, v13);
      kaldi::MatrixBase<float>::CopyFromMat<float>(v17, a3, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v17);
    }
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
}

void sub_1ADCB8CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::OnlineDeltaInput::DeltaComputation(_DWORD *a1, uint64_t a2, int32x2_t *a3, int32x2_t *a4)
{
  int v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v8 = kaldi::MatrixBase<float>::NumRows(a2);
  v9 = v8;
  v10 = a1[6];
  v11 = a1[4] * a1[5];
  if (2 * v11 >= v8)
    v12 = v8;
  else
    v12 = (2 * v11);
  v13 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 8))(a1);
  if ((int)v12 < 1)
  {
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
  else
  {
    kaldi::Matrix<float>::Resize(a4, v12, v10, 0, 0);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v22, a2, v9 - v12, v12, 0, v10);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a4, &v22, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  }
  v14 = (v9 - 2 * v11);
  if ((int)v14 < 1)
  {
    kaldi::Matrix<float>::Resize(a3, 0, 0, 0, 0);
  }
  else
  {
    v15 = v14 & ~((int)v14 >> 31);
    kaldi::Matrix<float>::Resize(a3, v14, v13, 0, 0);
    kaldi::DeltaFeatures::DeltaFeatures(&v22, a1 + 4);
    v16 = 0;
    do
    {
      v17 = a1[4];
      v18 = a1[5];
      v20 = 0;
      v21 = 0;
      v19 = (void **)(*(_QWORD *)a3 + 4 * a3[2].i32[0] * v16);
      LODWORD(v20) = kaldi::MatrixBase<float>::NumCols((uint64_t)a3);
      kaldi::DeltaFeatures::Process(&v22, a2, v16 + v18 * v17, (uint64_t)&v19);
      ++v16;
    }
    while (v15 != v16);
    v19 = (void **)&v23;
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

void sub_1ADCB8EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineDeltaInput::Compute(int32x2_t *a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t (***v6)(_QWORD, _OWORD *);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int32x2_t v14;
  int v15;
  int v16;
  int v17;
  int32x2_t v18;
  __int32 v19;
  int v20;
  int32x2_t v21;
  int v22;
  int v23;
  uint64_t v25;
  int v26;
  int32x2_t v27;
  __int32 v28;
  int v29;
  int32x2_t v30;
  int v31;
  int32x2_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int32x2_t v40;
  int v41;
  int v42;
  uint64_t v43;
  _OWORD v44[3];
  _QWORD v45[2];
  __int32 v46;

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(int32x2_t *))(*(_QWORD *)a1 + 8))(a1);
  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::Matrix<float>::Matrix((uint64_t)v45, v5, a1[3].u32[0], 0, 0);
  *(_QWORD *)a2 = v45;
  v6 = (uint64_t (***)(_QWORD, _OWORD *))a1[1];
  v7 = a2[2];
  v8 = *a2;
  v44[1] = a2[1];
  v44[2] = v7;
  v44[0] = v8;
  v9 = (**v6)(v6, v44);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
    v10 = 0;
  else
    v10 = v9;
  if (v10 == 1)
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    v9 = 1;
  }
  else
  {
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
      v11 = 1;
    else
      v11 = v9;
    if ((v11 & 1) != 0 || kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
    {
      if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]))
      {
        if (kaldi::MatrixBase<float>::NumRows((uint64_t)v45))
        {
          v25 = (a1[2].i32[1] * a1[2].i32[0]);
          if ((_DWORD)v25)
          {
            kaldi::Matrix<float>::Resize(a1 + 4, v25, a1[3].u32[0], 0, 0);
            if (a1[2].i32[1] * a1[2].i32[0] >= 1)
            {
              v26 = 0;
              do
              {
                v27 = a1[4];
                v28 = a1[6].i32[0];
                v29 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
                v42 = 0;
                v43 = 0;
                v40 = (int32x2_t)(*(_QWORD *)&v27 + 4 * v28 * v26);
                v41 = v29;
                v30 = (int32x2_t)v45[0];
                v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
                v34 = 0;
                v35 = 0;
                v32 = v30;
                v33 = v31;
                kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v40, (const void **)&v32);
                ++v26;
              }
              while (v26 < a1[2].i32[1] * a1[2].i32[0]);
            }
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v40);
      if ((v9 & 1) == 0)
      {
        v12 = (a1[2].i32[1] * a1[2].i32[0]);
        if ((int)v12 >= 1)
        {
          kaldi::Matrix<float>::Resize(&v40, v12, a1[3].u32[0], 0, 0);
          if (a1[2].i32[1] * a1[2].i32[0] >= 1)
          {
            v13 = 0;
            do
            {
              if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v45) < 1)
              {
                v21 = v40;
                v22 = v43;
                v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                v34 = 0;
                v35 = 0;
                v32 = (int32x2_t)(*(_QWORD *)&v21 + 4 * v22 * v13);
                v33 = v23;
                v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)&a1[4]);
                v18 = a1[4];
                v19 = a1[6].i32[0];
                v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)&a1[4]);
              }
              else
              {
                v14 = v40;
                v15 = v43;
                v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v40);
                v34 = 0;
                v35 = 0;
                v32 = (int32x2_t)(*(_QWORD *)&v14 + 4 * v15 * v13);
                v33 = v16;
                v17 = kaldi::MatrixBase<float>::NumRows((uint64_t)v45);
                v18 = (int32x2_t)v45[0];
                v19 = v46;
                v20 = kaldi::MatrixBase<float>::NumCols((uint64_t)v45);
              }
              v38 = 0;
              v39 = 0;
              v36 = *(_QWORD *)&v18 + 4 * v19 * (v17 - 1);
              v37 = v20;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v32, (const void **)&v36);
              ++v13;
            }
            while (v13 < a1[2].i32[1] * a1[2].i32[0]);
          }
        }
      }
      kaldi::Matrix<float>::Matrix((uint64_t)&v32);
      kaldi::OnlineDeltaInput::AppendFrames((int *)&a1[4], (int *)v45, (int *)&v40, &v32);
      kaldi::OnlineDeltaInput::DeltaComputation(a1, (uint64_t)&v32, v4, a1 + 4);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v32);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v40);
    }
    else
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      v9 = 0;
    }
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v45);
  return v9;
}

void sub_1ADCB9264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  uint64_t v10;
  va_list va;

  va_start(va, a10);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix(v10 - 128);
  _Unwind_Resume(a1);
}

float kaldi::handleStrictBatchOps(int32x2_t *a1, int a2, char a3, int a4)
{
  int v8;
  uint64_t v9;
  float result;
  char *v11;
  void *v12[4];
  char *v13[3];

  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  v9 = kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
  kaldi::Matrix<float>::Resize(a1, (v8 + a2 + a4), v9, 2, 0);
  if (a2 >= 1 && (a3 & 1) == 0)
  {
    v11 = (char *)(*(_QWORD *)a1 + 4 * a1[2].i32[0] * (v8 - 1));
    v13[2] = 0;
    v13[0] = v11;
    v13[1] = (char *)kaldi::MatrixBase<float>::NumCols((uint64_t)a1);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v12, (uint64_t)a1, v8, a2, 0, a1[1].i32[0]);
    kaldi::MatrixBase<float>::CopyRowsFromVec(v12, v13);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v12);
  }
  if (a4)
  {
    result = (float)a2;
    *(float *)(*(_QWORD *)a1 + 4 * a1[2].i32[0] * (v8 + a2)) = (float)a2;
  }
  return result;
}

void sub_1ADCB93BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineNnetForwardInput::Compute(uint64_t a1, __int128 *a2)
{
  int32x2_t *v4;
  int32x2_t *v5;
  BOOL v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (***v15)(_QWORD, _OWORD *);
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  int v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int32x2_t v27;
  int v28;
  int v29;
  float v30;
  int i;
  uint64_t j;
  float v33;
  int32x2_t *v34;
  uint64_t v35;
  const void *v36;
  void *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  _BOOL4 v44;
  const void *v45;
  void *v46;
  void *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  int v70;
  uint64_t v71;
  int k;
  uint64_t m;
  float v74;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  int v79;
  int v80;
  unsigned int v81;
  void *__p;
  void *v83;
  uint64_t v84;
  void *v85;
  std::__shared_weak_count *v86;
  int32x2_t v87;
  __int128 v88;
  __int128 v89;
  char v90;
  int32x2_t v91[5];
  char v92;
  int32x2_t v93[5];
  char v94;
  void *v95;
  __int128 v96;
  __int128 v97;
  _OWORD v98[3];
  int32x2_t v99[2];
  int v100;

  v4 = *(int32x2_t **)a2;
  v5 = (int32x2_t *)*((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 88))
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = !v6;
  v80 = v7;
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v8 = *(int **)(a1 + 112);
  v9 = *v8;
  v10 = 1;
  if (*(int *)(a1 + 184) > 0)
    v10 = 2;
  v11 = v8[v10];
  if ((int)v11 >= 1)
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v11, v12, 1, 0);
  }
  v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v99, v13, v14, 1, 0);
  *(_QWORD *)a2 = v99;
  v15 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v16 = a2[2];
  v17 = *a2;
  v98[1] = a2[1];
  v98[2] = v16;
  v98[0] = v17;
  v81 = (**v15)(v15, v98);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v95, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"requested ", 10);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" frames and got ", 16);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v99);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v95);
  }
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v99))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_110;
  }
  v79 = kaldi::MatrixBase<float>::NumRows((uint64_t)v99);
  if (v9 < 1)
  {
    v21 = 0;
  }
  else
  {
    v19 = kaldi::MatrixBase<float>::NumRows((uint64_t)v99);
    v20 = *(_DWORD *)(a1 + 96) + v9;
    if (v19 > v20)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"input.NumRows() <= strict_batch_size + total_batch_context_", 59);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
    }
    v21 = v20 - kaldi::MatrixBase<float>::NumRows((uint64_t)v99);
    kaldi::handleStrictBatchOps(v99, v21, *(_BYTE *)(a1 + 136), *(unsigned __int8 *)(a1 + 137));
    if (*(int *)(a1 + 140) >= 1)
    {
      v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)v99);
      v23 = kaldi::MatrixBase<float>::NumCols((uint64_t)v99);
      kaldi::Matrix<float>::Resize((int32x2_t *)(a1 + 144), *(unsigned int *)(a1 + 140), v23, 2, 0);
      if (*(_BYTE *)(a1 + 296))
      {
        if (v9 <= (int)v21)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"frames_padded < strict_batch_size", 33);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
        }
        kaldi::Matrix<float>::Matrix((uint64_t)&v95, 1, v23, 0, 0);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v93, (uint64_t)&v95, 0, 1, 0, v9 - v21);
        kaldi::MatrixBase<float>::Set((uint64_t)v93, 1.0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v93);
        v24 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
        kaldi::Matrix<float>::Resize(v99, (v24 + v22 + *(_DWORD *)(a1 + 140)), v23, 2, 0);
        v25 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v93, (uint64_t)v99, v22, v25, 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v93, (int *)&v95, 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v93);
        v26 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v95);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v93, (uint64_t)v99, v26 + v22, *(_DWORD *)(a1 + 140), 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v93, (int *)(a1 + 144), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v93);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v95);
      }
      else
      {
        kaldi::Matrix<float>::Resize(v99, (v22 + *(_DWORD *)(a1 + 140) + 2), v23, 2, 0);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v95, (uint64_t)v99, v22, *(_DWORD *)(a1 + 140), 0, v23);
        kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v95, (int *)(a1 + 144), 111);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
        v27 = v99[0];
        v28 = v100;
        v29 = v100 * (*(_DWORD *)(a1 + 140) + v22);
        *(float *)(*(_QWORD *)v99 + 4 * v29) = (float)*(int *)(a1 + 184);
        v30 = 0.0;
        if (*(_DWORD *)(*(_QWORD *)(a1 + 112) + 4) == *(_DWORD *)(*(_QWORD *)(a1 + 112) + 8))
          v30 = 1.0;
        *(float *)(*(_QWORD *)&v27 + 4 * (v28 + v29)) = v30;
      }
    }
  }
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v99); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v99); ++j)
    {
      v33 = *(float *)(*(_QWORD *)v99 + 4 * i * v100 + 4 * j);
      if (v33 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"inf in features", 15);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
      }
    }
  }
  memset(&v93[1], 0, 32);
  v93[0] = (int32x2_t)&unk_1E5D34170;
  v94 = 0;
  memset(&v91[1], 0, 32);
  v91[0] = (int32x2_t)&unk_1E5D34170;
  v92 = 0;
  v34 = v93;
  kaldi::CuMatrix<float>::operator=(v93, (int *)v99);
  v35 = *(_QWORD *)(a1 + 16);
  if (v35)
  {
    v34 = v91;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 16), (uint64_t)v93, v91, -1, 0);
  }
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v95, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Batch ", 6);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v95);
  }
  v88 = 0u;
  v89 = 0u;
  v87 = (int32x2_t)&unk_1E5D34170;
  v90 = 0;
  if (v80)
  {
    v36 = *(const void **)(a1 + 24);
    if (!v36
    {
      __p = 0;
      v83 = 0;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Must use penultimate-compatible AM with silence nnet", 52);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
    }
    v38 = v37;
    v39 = *(std::__shared_weak_count **)(a1 + 32);
    __p = v37;
    v83 = v39;
    if (v39)
    {
      p_shared_owners = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(p_shared_owners);
      while (__stxr(v41 + 1, p_shared_owners));
    }
    (*(void (**)(void *, int32x2_t *, uint64_t, uint64_t))(*(_QWORD *)v37 + 96))(v37, v34, a1 + 200, 1);
    (*(void (**)(void *, uint64_t, int32x2_t *))(*(_QWORD *)v38 + 144))(v38, a1 + 200, &v87);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a1 + 200, a1 + 248);
    if (v39)
    {
      v42 = (unint64_t *)&v39->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    v44 = 1;
    goto LABEL_69;
  }
  v45 = *(const void **)(a1 + 24);
  if (!v45
  {
    v48 = 0;
    v85 = 0;
    v86 = 0;
LABEL_61:
    v53 = (char *)&v93[2] + 4;
    if (v35)
      v53 = (char *)&v91[2] + 4;
    (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), *(unsigned int *)v53, v21);
    (*(void (**)(_QWORD, int32x2_t *, int32x2_t *))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v34, &v87);
    v44 = 0;
    goto LABEL_64;
  }
  v47 = v46;
  v48 = *(std::__shared_weak_count **)(a1 + 32);
  v85 = v46;
  v86 = v48;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(v49);
    while (__stxr(v50 + 1, v49));
  }
  if (!(*(unsigned int (**)(void *))(*(_QWORD *)v46 + 184))(v46))
    goto LABEL_61;
  v51 = operator new(8uLL);
  v95 = v51;
  *v51 = a1 + 248;
  *(_QWORD *)&v96 = v51 + 1;
  *((_QWORD *)&v96 + 1) = v51 + 1;
  v52 = (char *)&v93[2] + 4;
  if (v35)
    v52 = (char *)&v91[2] + 4;
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 64))(*(_QWORD *)(a1 + 24), *(unsigned int *)v52, v21);
  __p = 0;
  v83 = 0;
  v84 = 0;
  (*(void (**)(void *, int32x2_t *, void **, int32x2_t *, void **, _QWORD))(*(_QWORD *)v47 + 120))(v47, v34, &__p, &v87, &v95, 0);
  if (__p)
  {
    v83 = __p;
    operator delete(__p);
  }
  v44 = *(_QWORD *)(a1 + 256) != 0;
  if (v95)
  {
    *(_QWORD *)&v96 = v95;
    operator delete(v95);
  }
LABEL_64:
  if (v48)
  {
    v54 = (unint64_t *)&v48->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
LABEL_69:
  v56 = (char *)&v93[2] + 4;
  if (v35)
    v56 = (char *)&v91[2] + 4;
  v57 = *(_DWORD *)v56;
  v58 = HIDWORD(v88);
  v59 = v57 - HIDWORD(v88);
  v60 = *(_DWORD *)(a1 + 96);
  if (v60 >= 1 && v60 != v59)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Frames consumed by model (", 26);
    v76 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)") does not match frames added by batchwise splicing (", 53);
    v77 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)"). Hint: Are batch-left-context and batch-right-context correct for this model?", 79);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
  }
  ++*(_DWORD *)(a1 + 184);
  v62 = *(_DWORD *)(a1 + 140);
  if (v62 >= 1)
  {
    if (v58 < v62)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"nnet_out NumRows ", 17);
      v78 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)" cannot be smaller than append_context_size_ ", 45);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, a1 + 144, 0, v62, 0, SDWORD2(v88));
    v63 = (v21 + v79);
    *((_QWORD *)&v96 + 1) = __PAIR64__(*(_DWORD *)(a1 + 140), DWORD2(v88));
    LODWORD(v97) = v89;
    DWORD1(v97) = DWORD1(v89) - v89 * v63;
    *((_QWORD *)&v97 + 1) = *((_QWORD *)&v89 + 1);
    v95 = &unk_1E5D29D40;
    *(_QWORD *)&v96 = v88 + 4 * (int)v89 * (int)v63;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v95, (int *)&__p, 111);
    v95 = &unk_1E5D29D40;
    v96 = 0u;
    v97 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v95);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::CuMatrix<float>::Resize(&v87, v63, v64, 2, 0);
  }
  if (*(_BYTE *)(a1 + 80))
    kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)&v87);
  if ((*(char *)(a1 + 63) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 63))
      goto LABEL_88;
LABEL_85:
    if (*(_BYTE *)(a1 + 81) || *(_BYTE *)(a1 + 80))
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(_QWORD *)(a1 + 72), (uint64_t)&v87);
    goto LABEL_88;
  }
  if (*(_QWORD *)(a1 + 48))
    goto LABEL_85;
LABEL_88:
  kaldi::Matrix<float>::Resize(v4, HIDWORD(v88), DWORD2(v88), 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v87, (int *)v4, 111);
  if (v44)
  {
    kaldi::Matrix<float>::Resize(v5, *(unsigned int *)(a1 + 268), *(unsigned int *)(a1 + 264), 1, 0);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 248, (int *)v5, 111);
  }
  if ((int)v21 >= 1)
  {
    if (*(_BYTE *)(a1 + 297))
    {
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v4) != 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"output->NumRows() == 1", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
      }
    }
    else
    {
      v65 = *(_DWORD *)(a1 + 96);
      if ((_DWORD)v21 + v79 - v65 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"orig_input_size + frames_padded - total_batch_context_ == output->NumRows()", 75);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
      }
    }
    if (v44)
    {
      v66 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      if (v66 != kaldi::MatrixBase<float>::NumRows((uint64_t)v5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"output->NumRows() == sil_post->NumRows()", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
      }
    }
    if (*(_BYTE *)(a1 + 297))
    {
      v67 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      v68 = 1;
    }
    else
    {
      v69 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      v67 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      v68 = (v69 - v21);
    }
    kaldi::Matrix<float>::Resize(v4, v68, v67, 2, 0);
    if (v44)
    {
      v70 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
      v71 = kaldi::MatrixBase<float>::NumCols((uint64_t)v5);
      kaldi::Matrix<float>::Resize(v5, (v70 - v21), v71, 2, 0);
    }
  }
  for (k = 0; k < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4); ++k)
  {
    for (m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++m)
    {
      v74 = *(float *)(*(_QWORD *)v4 + 4 * k * v4[2].i32[0] + 4 * m);
      if (v74 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"inf in NNet output", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
      }
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v87);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v91);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v93);
LABEL_110:
  kaldi::Matrix<float>::~Matrix((uint64_t)v99);
  return v81;
}

void sub_1ADCBA218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a18);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a24);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a30);
  JUMPOUT(0x1ADCBA23CLL);
}

void sub_1ADCBA238(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 136);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::CuMatrix<float> *,std::allocator<kaldi::CuMatrix<float> *>>::vector[abi:ne180100](_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 8 * a3);
    a1[1] = &v6[8 * a3];
  }
  return a1;
}

void sub_1ADCBA2B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::OnlineNnetForwardInput::ResetForStreaming(kaldi::OnlineNnetForwardInput *this)
{
  uint64_t v2;
  _QWORD v3[35];

  v2 = *((_QWORD *)this + 3);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 88))(*((_QWORD *)this + 3));
  if (*((int *)this + 35) >= 1)
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v3, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"appended context reset", 22);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v3);
    }
    kaldi::MatrixBase<float>::SetZero((uint64_t)this + 144);
  }
}

void sub_1ADCBA36C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::GasrEncoderBase(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, _QWORD *a6)
{
  kaldi::OnlineSpliceBatchInput **v9;
  kaldi::quasar::CEFusedAcousticEncoder *v10;
  kaldi::quasar::CEFusedAcousticEncoder **v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  kaldi::OnlineSpliceBatchInput *v24;
  kaldi::quasar::ComputeEngineBufferItf *v25;
  double v26;
  uint64_t v27;
  kaldi::OnlineSpliceBatchInput **v28;
  _QWORD *v29;
  kaldi::quasar::ComputeEngineBufferItf **v30;
  kaldi::quasar::ComputeEngineBufferItf **v31;
  int v32;
  void **v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  void *__p[2];
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;

  *(_QWORD *)a1 = &off_1E5CFEEE8;
  *(_DWORD *)(a1 + 8) = a3;
  *(_DWORD *)(a1 + 12) = 1;
  *(_BYTE *)(a1 + 16) = a4;
  *(_OWORD *)(a1 + 24) = 0u;
  v9 = (kaldi::OnlineSpliceBatchInput **)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = a2;
  v10 = *(kaldi::quasar::CEFusedAcousticEncoder **)a5;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)a5;
  v11 = (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
  v12 = *(_QWORD *)(a5 + 8);
  *(_QWORD *)(a1 + 72) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v10 = *v11;
  }
  *(_OWORD *)(a1 + 80) = 0uLL;
  *(_OWORD *)(a1 + 112) = 0uLL;
  v38 = (uint64_t *)(a1 + 32);
  *(_QWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0uLL;
  if (kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(v10))
  {
    v15 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*v11);
    v16 = kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*v11);
    *(_DWORD *)(a1 + 12) = (v15 - v16) / (int)kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*v11);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"chunk size: ", 12);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v41);
    }
  }
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  *(_DWORD *)(a1 + 52) = v17;
  if (*a6)
  {
    v18 = operator new();
    v19 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)v18 = &off_1E5D2A398;
    *(_QWORD *)(v18 + 8) = v19;
    v20 = a6[1];
    *(_QWORD *)(v18 + 16) = *a6;
    *(_QWORD *)(v18 + 24) = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    *(_DWORD *)(v18 + 32) = a3;
    v23 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v18;
    if (v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 72))(v23);
      v18 = *(_QWORD *)(a1 + 40);
    }
    *(_QWORD *)(a1 + 56) = v18;
    v17 = *(_DWORD *)(a1 + 52);
  }
  if (v17 >= 1)
  {
    v24 = (kaldi::OnlineSpliceBatchInput *)operator new();
    kaldi::OnlineSpliceBatchInput::OnlineSpliceBatchInput(v24, *(kaldi::OnlineFeatInputItf **)(a1 + 56), *(_DWORD *)(a1 + 52), 0);
    v27 = (uint64_t)*v9;
    *v9 = v24;
    v28 = v9;
    if (!v27)
      goto LABEL_18;
    goto LABEL_17;
  }
  v36 = operator new();
  v37 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)v36 = &off_1E5D2A908;
  *(_QWORD *)(v36 + 8) = v37;
  v26 = kaldi::Matrix<float>::Matrix(v36 + 16);
  *(_DWORD *)(v36 + 56) = 0;
  *(_WORD *)(v36 + 60) = 257;
  v28 = (kaldi::OnlineSpliceBatchInput **)(a1 + 32);
  v27 = *v38;
  *v38 = v36;
  if (v27)
LABEL_17:
    *(float *)&v26 = (*(float (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
LABEL_18:
  *(_QWORD *)(a1 + 56) = *v28;
  kaldi::quasar::CEFusedAcousticEncoder::InitialStates(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64), v25, (kaldi::quasar::CEFusedAcousticEncoder ***)&v41, *(float *)&v26);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 88));
  *(_OWORD *)(a1 + 88) = v41;
  *(_QWORD *)(a1 + 104) = v42;
  v42 = 0;
  v41 = 0uLL;
  __p[0] = &v41;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"the primary AM has ", 19);
    v29 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" states.", 8);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41);
  }
  v30 = *(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 88);
  v31 = *(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 96);
  if (v30 != v31)
  {
    v32 = kaldi::g_kaldi_verbose_level;
    do
    {
      if (v32 >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41, 4);
        kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*v30, __p);
        if ((v40 & 0x80u) == 0)
          v33 = __p;
        else
          v33 = (void **)__p[0];
        if ((v40 & 0x80u) == 0)
          v34 = v40;
        else
          v34 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v33, v34);
        if ((char)v40 < 0)
          operator delete(__p[0]);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v41);
        v32 = kaldi::g_kaldi_verbose_level;
      }
      ++v30;
    }
    while (v30 != v31);
  }
  return a1;
}

void sub_1ADCBA704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  MEMORY[0x1AF44D190](v20, 0x10A1C40666B5A9ELL);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = a11;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  v24 = *v22;
  *v22 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19);
  v25 = *(_QWORD *)(v18 + 40);
  *(_QWORD *)(v18 + 40) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 72))(v25);
  v26 = *a10;
  *a10 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 72))(v26);
  v27 = *v21;
  *v21 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::HasSilencePosterior(kaldi::GasrEncoderBase *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

uint64_t kaldi::GasrEncoderBase::HasEndpointerScore(kaldi::GasrEncoderBase *this)
{
  return 0;
}

uint64_t kaldi::GasrEncoderBase::Dim(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  return kaldi::quasar::CEFusedAcousticEncoder::OutputDim(this[8]);
}

uint64_t kaldi::GasrEncoderBase::FrameDurationMs(kaldi::GasrEncoderBase *this)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  return kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*((kaldi::quasar::CEFusedAcousticEncoder **)this
                                                                                     + 8))
       * v2;
}

uint64_t kaldi::GasrEncoderBase::ChunkSize(kaldi::GasrEncoderBase *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::GasrEncoderBase::FrameDurationMsForAlignment(kaldi::GasrEncoderBase *this)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 24))(*((_QWORD *)this + 7));
  return kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*((kaldi::quasar::CEFusedAcousticEncoder **)this
                                                                                           + 8))
       * v2;
}

void kaldi::GasrEncoderBase::~GasrEncoderBase(kaldi::GasrEncoderBase *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::quasar::CEFusedAcousticEncoder *v11;
  _QWORD *OsymsName;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;

  *(_QWORD *)this = &off_1E5CFEEE8;
  v2 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 11);
  v4 = (_QWORD *)*((_QWORD *)this + 12);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 14);
  *((_QWORD *)this + 12) = v3;
  v8 = (_QWORD *)*((_QWORD *)this + 15);
  while (v8 != v7)
  {
    v10 = *--v8;
    v9 = v10;
    *v8 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v11 = (kaldi::quasar::CEFusedAcousticEncoder *)*((_QWORD *)this + 8);
  *((_QWORD *)this + 15) = v7;
  kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(v11);
  OsymsName = (_QWORD *)quasar::PMBuilder::getOsymsName(*((quasar::PMBuilder **)this + 8));
  (*(void (**)(_QWORD))(*(_QWORD *)*OsymsName + 136))(*OsymsName);
  v17 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v17 = (void **)((char *)this + 88);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v17);
  v13 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  v14 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 72))(v14);
  v15 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  v16 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 72))(v16);
}

{
  kaldi::GasrEncoderBase::~GasrEncoderBase(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::GasrEncoderBase::PrepareFeature(uint64_t a1, uint64_t a2, int *a3)
{
  int v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t *v12;
  int v13;
  int32x2_t *v14;
  uint64_t v15;
  uint64_t v16;
  int32x2_t *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  signed int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  _QWORD *v26;
  uint64_t *v27;
  int v28;
  int v29;
  int v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  kaldi::quasar::ComputeEngineBufferItf *v34;
  kaldi::quasar::ComputeEngineBufferItf *v35;
  uint64_t v36;
  kaldi::quasar::ComputeEngineBufferItf *v37;
  kaldi::quasar::ComputeEngineBufferItf *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  kaldi::quasar::ComputeEngineBufferItf *v43;
  int v44[4];
  _BYTE v45[32];
  kaldi::quasar::ComputeEngineBufferItf *v46[2];
  unsigned int v47;
  _OWORD v48[3];
  uint64_t *v49;
  std::__shared_weak_count *v50;
  unsigned int v51;

  v51 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
  if (*(int *)(a1 + 48) >= 1)
  {
    v6 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    v51 = v6 - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
  }
  LODWORD(v46[0]) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 8))(*(_QWORD *)(a1 + 56));
  v44[0] = 1;
  std::allocate_shared[abi:ne180100]<kaldi::Matrix<float>,std::allocator<kaldi::Matrix<float>>,int &,int,kaldi::MatrixResizeType,void>(&v51, (unsigned int *)v46, v44, &v49);
  kaldi::Matrix<float>::Swap(*(uint64_t **)a2, v49);
  v7 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 56);
  v8 = *(_OWORD *)(a2 + 16);
  v48[0] = *(_OWORD *)a2;
  v48[1] = v8;
  v48[2] = *(_OWORD *)(a2 + 32);
  v9 = (**v7)(v7, v48);
  kaldi::Matrix<float>::Swap(*(uint64_t **)a2, v49);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v49))
  {
    if (!*(_DWORD *)(a1 + 48))
    {
      v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
      v11 = *(_DWORD *)(a1 + 52);
      if (v10 > v11)
      {
        v12 = v49;
        v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v44, (uint64_t)v12, v11, v13 - *(_DWORD *)(a1 + 52), 0, *((_DWORD *)v12 + 2));
        kaldi::CuMatrix<float>::CuMatrix<float>(v46, v44, 111, 0);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v44);
        v14 = (int32x2_t *)v49;
        v15 = v47;
        v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
        kaldi::Matrix<float>::Resize(v14, v15, v16, 1, 0);
        kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v46, (int *)v49, 111);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v46);
      }
    }
    v17 = *(int32x2_t **)(a2 + 16);
    v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
    v19 = kaldi::MatrixBase<float>::NumCols((uint64_t)v49);
    kaldi::Matrix<float>::Resize(v17, v18, v19, 1, 0);
    v20 = kaldi::MatrixBase<float>::CopyFromMat<float>(*(int **)(a2 + 16), (int *)v49, 111);
    if ((kaldi::GasrEncoderBase::IsFinite((uint64_t)v20, (uint64_t)v49) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"IsFinite(*feats)", 16);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
    }
    *a3 = 0;
    v21 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
    if (*(int *)(a1 + 48) < 1)
      v22 = 0;
    else
      v22 = *(_DWORD *)(a1 + 52);
    if (v21 > (int)(v22 + v51))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"feats->NumRows() <= size_to_fetch + (batch_num_ > 0 ? num_overlap_frames_ : 0)", 78);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v46);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 1) == 0)
    {
      v23 = v51;
      v24 = v23 - kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
      v25 = *(int *)(a1 + 48) < 1 ? 0 : *(_DWORD *)(a1 + 52);
      *a3 = v25 + v24;
      kaldi::handleStrictBatchOps((int32x2_t *)v49, v25 + v24, *(_BYTE *)(a1 + 16), 0);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Torch model doesn't pad", 23);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46);
      }
    }
    if (*a3 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46, 4);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" frames are padded to enforce strict batch size", 47);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46);
    }
    v27 = v49;
    if ((kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 1) != 0)
    {
      v28 = 0;
    }
    else
    {
      v29 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
      v28 = v29
          - kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    }
    if (kaldi::quasar::CEFusedAcousticEncoder::FlexibleInputSizeIsAllowed(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)))
      v30 = kaldi::MatrixBase<float>::NumRows((uint64_t)v49);
    else
      v30 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v45, (uint64_t)v27, v28, v30, 0, *((_DWORD *)v27 + 2));
    kaldi::CuMatrix<float>::CuMatrix<float>(v44, v45, 111, 0);
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"Conformer input shape (", 23);
      v31 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)", ", 2);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)")", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v46);
    }
    v33 = *(_QWORD *)(a1 + 64);
    v34 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 80);
    *(_QWORD *)(a1 + 80) = 0;
    v43 = v34;
    kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(v33, (uint64_t)v44, &v43, v46);
    v35 = v46[0];
    v46[0] = 0;
    v36 = *(_QWORD *)(a1 + 80);
    *(_QWORD *)(a1 + 80) = v35;
    if (v36)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
      v37 = v46[0];
      v46[0] = 0;
      if (v37)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v37 + 8))(v37);
    }
    v38 = v43;
    v43 = 0;
    if (v38)
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v38 + 8))(v38);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v44);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v45);
  }
  else
  {
    kaldi::Matrix<float>::Resize(*(int32x2_t **)a2, 0, 0, 0, 0);
  }
  v39 = v50;
  if (v50)
  {
    p_shared_owners = (unint64_t *)&v50->__shared_owners_;
    do
      v41 = __ldaxr(p_shared_owners);
    while (__stlxr(v41 - 1, p_shared_owners));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  return v9;
}

void sub_1ADCBAFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 - 88);
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::IsFinite(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  if ((int)kaldi::MatrixBase<float>::NumRows(a2) < 1)
    return 1;
  v3 = 0;
  while ((int)kaldi::MatrixBase<float>::NumCols(a2) < 1)
  {
LABEL_7:
    if (++v3 >= (int)kaldi::MatrixBase<float>::NumRows(a2))
      return 1;
  }
  v4 = 0;
  while ((*(_DWORD *)(*(_QWORD *)a2 + 4 * v3 * *(_DWORD *)(a2 + 16) + 4 * v4) & 0x7FFFFFFFu) < 0x7F800000)
  {
    if (++v4 >= (int)kaldi::MatrixBase<float>::NumCols(a2))
      goto LABEL_7;
  }
  return 0;
}

uint64_t kaldi::GasrEncoderBase::Compute(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  __int128 v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  _QWORD *v11;
  kaldi::quasar::CEFusedAcousticEncoder *v12;
  int IndexOfMask;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int32x2_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[3];
  int v26;

  v4 = *(int32x2_t **)a2;
  v26 = 0;
  v5 = *(_OWORD *)(a2 + 16);
  v25[0] = *(_OWORD *)a2;
  v25[1] = v5;
  v25[2] = *(_OWORD *)(a2 + 32);
  v6 = kaldi::GasrEncoderBase::PrepareFeature(a1, (uint64_t)v25, &v26);
  if (kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a2 + 16)))
  {
    v7 = v26;
    v8 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if ((int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) > *(_DWORD *)(a1 + 52))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v22, "nnet_->FrameOverlap() <= num_overlap_frames_");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v22);
    }
    v9 = v7 / v8;
    if (v9 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v22, 4);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" rows will be removed from output because input is padded", 57);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v22);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      v12 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      IndexOfMask = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(v12);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v12, (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * IndexOfMask), v9, 0, 0);
    }
    v19 = 0u;
    v20 = 0u;
    v18 = (int32x2_t)&unk_1E5D34170;
    v21 = 0;
    v14 = *(_QWORD *)(a1 + 64);
    v22 = 0;
    kaldi::quasar::CEFusedAcousticEncoder::Encode(v14, (uint64_t *)(a1 + 80), (uint64_t *)&v22, (uint64_t *)(a1 + 88), &v18, 0, 0, 0, 0, (uint64_t **)(a1 + 112));
    v15 = v22;
    v22 = 0;
    if (v15)
      (*(void (**)(void *))(*(_QWORD *)v15 + 8))(v15);
    kaldi::Matrix<float>::Resize(v4, (HIDWORD(v19) - v9), DWORD2(v19), 1, 0);
    DWORD2(v23) = DWORD2(v19);
    HIDWORD(v23) = HIDWORD(v19) - v9;
    v24 = v20;
    v22 = &unk_1E5D29D40;
    *(_QWORD *)&v23 = v19;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v22, (int *)v4, 111);
    v22 = &unk_1E5D29D40;
    v23 = 0u;
    v24 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
    if ((kaldi::GasrEncoderBase::IsFinite(v16, (uint64_t)v4) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v22, (uint64_t)"IsFinite(*output)", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v22);
    }
    ++*(_DWORD *)(a1 + 48);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v18);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
  }
  return v6;
}

uint64_t kaldi::SpeechActivityDetector::SpeechActivityDetector(uint64_t a1, uint64_t a2, int a3, char a4, _QWORD *a5, _QWORD *a6, char a7)
{
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v13 = a5[1];
  *(_QWORD *)(a1 + 16) = *a5;
  *(_QWORD *)a1 = &off_1E5CFEF58;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 24) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 32) = a7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  v16 = operator new();
  kaldi::GasrEncoderBase::GasrEncoderBase(v16, a2, a3, a4, (uint64_t)a5, a6);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v16;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 72))(v17);
  return a1;
}

void sub_1ADCBB478(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  MEMORY[0x1AF44D190](v3, 0x10A1C4059E20CA8);
  v5 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SpeechActivityDetector::FrameDurationMs(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::SpeechActivityDetector::FrameDurationMsForAlignment(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::SpeechActivityDetector::Compute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int32x2_t *v5;
  uint64_t (***v6)(_QWORD, _OWORD *);
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  _BYTE v26[32];
  int v27[4];
  int v28;
  _OWORD v29[3];

  v4 = *(_QWORD *)(a2 + 8);
  v6 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 40);
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  v29[0] = *(_OWORD *)a2;
  v5 = *(int32x2_t **)&v29[0];
  v29[1] = v7;
  v29[2] = v8;
  v9 = (**v6)(v6, v29);
  if (kaldi::MatrixBase<float>::NumRows((uint64_t)v5))
  {
    if ((int)kaldi::MatrixBase<float>::NumCols((uint64_t)v5) >= 2)
    {
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)v5, 0, v5[1].i32[1], 1, 1);
      kaldi::CuMatrix<float>::CuMatrix<float>(v27, v26, 111, 0);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
      kaldi::Matrix<float>::Resize(v5, v10, 1, 1, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v27, (int *)v5, 111);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v27);
    }
    kaldi::Matrix<float>::Swap((uint64_t *)v4, (uint64_t *)v5);
    v11 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a2 + 16));
    if (*(_BYTE *)(a1 + 32))
    {
      if ((_DWORD)v9)
        v11 = v11
            - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 16));
      v12 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(a2 + 16));
      kaldi::Matrix<float>::Resize(v5, v11, v12, 1, 0);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, *(_QWORD *)(a2 + 16), 0, v11, 0, *(_DWORD *)(*(_QWORD *)(a2 + 16) + 8));
      kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v5, v27, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
      v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
      v14 = kaldi::MatrixBase<float>::NumRows(v4);
      if ((_DWORD)v13 != v14)
      {
        v15 = v14;
        kaldi::Matrix<float>::Matrix(v27, v4);
        kaldi::Matrix<float>::Resize((int32x2_t *)v4, v13, 1, 1, 0);
        if ((int)v13 >= 1)
        {
          v16 = 0;
          v17 = *(_QWORD *)v27;
          v18 = v28;
          v19 = *(_DWORD **)v4;
          v20 = 4 * *(int *)(v4 + 16);
          do
          {
            v21 = (float)(int)v16 / (float)((int)v13 / v15);
            if (v21 > (float)(v15 - 1))
              v21 = (float)(v15 - 1);
            *v19 = *(_DWORD *)(v17 + 4 * v18 * (int)v21);
            ++v16;
            v19 = (_DWORD *)((char *)v19 + v20);
          }
          while (v13 != v16);
        }
        kaldi::Matrix<float>::~Matrix((uint64_t)v27);
      }
    }
    else
    {
      if (*(int *)(a1 + 48) >= 1)
        v11 = v11
            - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 16));
      v22 = kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(a2 + 16));
      kaldi::Matrix<float>::Resize(v5, v11, v22, 1, 0);
      v23 = *(_QWORD *)(a2 + 16);
      v24 = kaldi::MatrixBase<float>::NumRows(v23);
      kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, v23, v24 - v11, v11, 0, *(_DWORD *)(v23 + 8));
      kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v5, v27, 111);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
    }
    kaldi::MatrixBase<float>::ApplyExp(v4);
    ++*(_DWORD *)(a1 + 48);
  }
  return v9;
}

void sub_1ADCBB7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::SpeechActivityDetector::Dim(kaldi::SpeechActivityDetector *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::SpeechActivityDetector::HasSilencePosterior(kaldi::SpeechActivityDetector *this)
{
  return 1;
}

uint64_t kaldi::AmFusionEncoderInput::DecideFrameOverlap(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  uint64_t v2;
  kaldi::quasar::CEFusedAcousticEncoder *v3;

  v2 = kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(this[8]);
  v3 = this[18];
  if (v3 && (int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(v3) > (int)v2)
    return kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(this[18]);
  else
    return v2;
}

uint64_t kaldi::AmFusionEncoderInput::AmFusionEncoderInput(uint64_t a1, uint64_t a2, int a3, char a4, kaldi::quasar::CEFusedAcousticEncoder **a5, kaldi::quasar::CEFusedAcousticEncoder **a6, _QWORD *a7, int a8, float a9, uint64_t a10)
{
  uint64_t v15;
  BOOL HasRfdnnOut;
  BOOL v17;
  BOOL HasEpOut;
  kaldi::quasar::CEFusedAcousticEncoder *v19;
  kaldi::quasar::CEFusedAcousticEncoder **v20;
  kaldi::quasar::CEFusedAcousticEncoder *v21;
  unint64_t *v22;
  unint64_t v23;
  kaldi::quasar::ComputeEngineBufferItf *v24;
  float v25;
  _QWORD *v26;
  kaldi::quasar::ComputeEngineBufferItf **v27;
  kaldi::quasar::ComputeEngineBufferItf **v28;
  int v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *__p[2];
  unsigned __int8 v39;
  void *v40[2];
  _QWORD *v41;

  v15 = kaldi::GasrEncoderBase::GasrEncoderBase(a1, a2, a3, a4, (uint64_t)a5, a7);
  *(_QWORD *)v15 = &off_1E5D2A898;
  *(_DWORD *)(v15 + 136) = a8;
  HasRfdnnOut = kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(*a5);
  v17 = a8 >= 0 && HasRfdnnOut;
  *(_BYTE *)(a1 + 140) = v17;
  HasEpOut = kaldi::quasar::CEFusedAcousticEncoder::HasEpOut(*a5);
  v19 = *a6;
  *(_QWORD *)(a1 + 144) = *a6;
  v20 = (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 144);
  *(_BYTE *)(a1 + 141) = HasEpOut;
  v21 = a6[1];
  *(_QWORD *)(a1 + 152) = v21;
  if (v21)
  {
    v22 = (unint64_t *)((char *)v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v19 = *v20;
  }
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(float *)(a1 + 256) = a9;
  if (v19)
  {
    kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*v20);
    kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*v20);
  }
  kaldi::quasar::CEFusedAcousticEncoder::SetContextEmbeddings(*(_QWORD *)(a1 + 64), a10);
  if (*v20)
  {
    kaldi::quasar::CEFusedAcousticEncoder::InitialStates(*v20, v24, (kaldi::quasar::CEFusedAcousticEncoder ***)v40, v25);
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 176));
    *(_OWORD *)(a1 + 176) = *(_OWORD *)v40;
    *(_QWORD *)(a1 + 192) = v41;
    v40[1] = 0;
    v41 = 0;
    v40[0] = 0;
    __p[0] = v40;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"the secondary AM has ", 21);
      v26 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" states.", 8);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40);
    }
    v27 = *(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 176);
    v28 = *(kaldi::quasar::ComputeEngineBufferItf ***)(a1 + 184);
    if (v27 != v28)
    {
      v29 = kaldi::g_kaldi_verbose_level;
      do
      {
        if (v29 >= 4)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40, 4);
          kaldi::quasar::ComputeEngineBufferItf::GetShapeString(*v27, __p);
          if ((v39 & 0x80u) == 0)
            v30 = __p;
          else
            v30 = (void **)__p[0];
          if ((v39 & 0x80u) == 0)
            v31 = v39;
          else
            v31 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v30, v31);
          if ((char)v39 < 0)
            operator delete(__p[0]);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v40);
          v29 = kaldi::g_kaldi_verbose_level;
        }
        ++v27;
      }
      while (v27 != v28);
    }
  }
  v32 = *(_QWORD *)quasar::PMBuilder::getOsymsName(*(quasar::PMBuilder **)(a1 + 64));
  v33 = operator new(8uLL);
  v40[0] = v33;
  *v33 = 1;
  v40[1] = v33 + 1;
  v41 = v33 + 1;
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(_QWORD *)v32 + 56))(__p, v32, v40);
  v34 = __p[0];
  __p[0] = 0;
  v35 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = v34;
  if (v35)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    v36 = __p[0];
    __p[0] = 0;
    if (v36)
      (*(void (**)(void *))(*(_QWORD *)v36 + 8))(v36);
  }
  if (v40[0])
  {
    v40[1] = v40[0];
    operator delete(v40[0]);
  }
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 168) + 104))(*(_QWORD *)(a1 + 168), 0, *(float *)(a1 + 256));
  return a1;
}

{
  return kaldi::AmFusionEncoderInput::AmFusionEncoderInput(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1ADCBBB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
  kaldi::GasrEncoderBase *v17;
  uint64_t v18;
  uint64_t *v19;
  void **v20;
  void *v22;
  uint64_t v23;
  uint64_t v24;

  v22 = *v20;
  if (*v20)
  {
    *((_QWORD *)v17 + 30) = v22;
    operator delete(v22);
  }
  __p = v19 + 5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v23 = *((_QWORD *)v17 + 21);
  *((_QWORD *)v17 + 21) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v19;
  *v19 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  kaldi::GasrEncoderBase::~GasrEncoderBase(v17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::AmFusionEncoderInput::HasSilencePosterior(kaldi::AmFusionEncoderInput *this)
{
  if (*((_BYTE *)this + 140))
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 40))(*((_QWORD *)this + 7));
}

uint64_t kaldi::AmFusionEncoderInput::HasEndpointerScore(kaldi::AmFusionEncoderInput *this)
{
  if (*((_BYTE *)this + 141))
    return 1;
  else
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 7) + 48))(*((_QWORD *)this + 7));
}

uint64_t kaldi::AmFusionEncoderInput::FrameDurationMsForAlignment(kaldi::AmFusionEncoderInput *this)
{
  kaldi::quasar::CEFusedAcousticEncoder *v2;
  int v3;

  v2 = (kaldi::quasar::CEFusedAcousticEncoder *)*((_QWORD *)this + 18);
  if (v2)
    v3 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(v2);
  else
    v3 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*((kaldi::quasar::CEFusedAcousticEncoder **)this
                                                                             + 8));
  return (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 7) + 32))(*((_QWORD *)this + 7)) * v3;
}

void kaldi::AmFusionEncoderInput::~AmFusionEncoderInput(kaldi::AmFusionEncoderInput *this)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  kaldi::quasar::CEFusedAcousticEncoder *v11;
  _QWORD *OsymsName;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;

  *(_QWORD *)this = &off_1E5D2A898;
  v2 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (_QWORD *)*((_QWORD *)this + 22);
  v4 = (_QWORD *)*((_QWORD *)this + 23);
  while (v4 != v3)
  {
    v6 = *--v4;
    v5 = v6;
    *v4 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  v7 = (_QWORD *)*((_QWORD *)this + 25);
  *((_QWORD *)this + 23) = v3;
  v8 = (_QWORD *)*((_QWORD *)this + 26);
  while (v8 != v7)
  {
    v10 = *--v8;
    v9 = v10;
    *v8 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  v11 = (kaldi::quasar::CEFusedAcousticEncoder *)*((_QWORD *)this + 18);
  *((_QWORD *)this + 26) = v7;
  if (v11)
  {
    kaldi::quasar::CEFusedAcousticEncoder::AttemptComputeEngineUpgrade(v11);
    OsymsName = (_QWORD *)quasar::PMBuilder::getOsymsName(*((quasar::PMBuilder **)this + 18));
    (*(void (**)(_QWORD))(*(_QWORD *)*OsymsName + 136))(*OsymsName);
  }
  v13 = (void *)*((_QWORD *)this + 29);
  if (v13)
  {
    *((_QWORD *)this + 30) = v13;
    operator delete(v13);
  }
  v16 = (void **)((char *)this + 200);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v16);
  v16 = (void **)((char *)this + 176);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v16);
  v14 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 20);
  *((_QWORD *)this + 20) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  kaldi::GasrEncoderBase::~GasrEncoderBase(this);
}

{
  kaldi::AmFusionEncoderInput::~AmFusionEncoderInput(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::AmFusionEncoderInput::PrepareFeature(uint64_t a1, _OWORD *a2, int *a3)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  kaldi::quasar::ComputeEngineBufferItf *v14;
  kaldi::quasar::ComputeEngineBufferItf *v15;
  uint64_t v16;
  kaldi::quasar::ComputeEngineBufferItf *v17;
  kaldi::quasar::ComputeEngineBufferItf *v18;
  kaldi::quasar::ComputeEngineBufferItf *v20;
  kaldi::quasar::ComputeEngineBufferItf *v21[35];
  _BYTE v22[16];
  _OWORD v23[3];

  v5 = a2[1];
  v23[0] = *a2;
  v23[1] = v5;
  v23[2] = a2[2];
  v6 = kaldi::GasrEncoderBase::PrepareFeature(a1, (uint64_t)v23, a3);
  if (*(_QWORD *)(a1 + 144))
  {
    v7 = *((_QWORD *)a2 + 2);
    v8 = kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    v9 = v8
       - kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64))
       + *(_DWORD *)(a1 + 52);
    v10 = kaldi::MatrixBase<float>::NumRows(v7);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v21, v7, v10 - v9, v9, 0, *(_DWORD *)(v7 + 8));
    kaldi::CuMatrix<float>::CuMatrix<float>(v22, v21, 111, 0);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v21);
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"RFDNN input shape (", 19);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v21);
    }
    v13 = *(_QWORD *)(a1 + 144);
    v14 = *(kaldi::quasar::ComputeEngineBufferItf **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = 0;
    v20 = v14;
    kaldi::quasar::CEFusedAcousticEncoder::CreateFeatures(v13, (uint64_t)v22, &v20, v21);
    v15 = v21[0];
    v21[0] = 0;
    v16 = *(_QWORD *)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v15;
    if (v16)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v17 = v21[0];
      v21[0] = 0;
      if (v17)
        (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v17 + 8))(v17);
    }
    v18 = v20;
    v20 = 0;
    if (v18)
      (*(void (**)(kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)v18 + 8))(v18);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v22);
  }
  return v6;
}

void sub_1ADCBBFBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t kaldi::AmFusionEncoderInput::Compute(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  int32x2_t *v5;
  int32x2_t *v6;
  int32x2_t *v7;
  int32x2_t *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  _QWORD *v15;
  int v16;
  _QWORD *v17;
  char v18;
  kaldi::quasar::CEFusedAcousticEncoder *v19;
  int IndexOfMask;
  kaldi::quasar::CEFusedAcousticEncoder *v21;
  int IndexOfMaskFusion;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 HasRfdnnOut;
  _BOOL4 v26;
  uint64_t v27;
  _BOOL4 HasEpOut;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  int i;
  unint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  float v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int v72;
  int v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD *v79;
  unsigned int v81;
  int v82;
  uint64_t v83;
  int32x2_t v84;
  __int128 v85;
  __int128 v86;
  char v87;
  int32x2_t v88;
  __int128 v89;
  __int128 v90;
  char v91;
  int32x2_t v92;
  __int128 v93;
  __int128 v94;
  char v95;
  int32x2_t v96;
  __int128 v97;
  __int128 v98;
  char v99;
  int32x2_t v100;
  __int128 v101;
  __int128 v102;
  char v103;
  _DWORD *v104;
  __int128 v105;
  __int128 v106;
  _OWORD v107[3];
  int v108;
  _BYTE v109[56];

  v4 = *(int32x2_t **)a2;
  v5 = *(int32x2_t **)(a2 + 8);
  v6 = *(int32x2_t **)(a2 + 24);
  v7 = *(int32x2_t **)(a2 + 32);
  v8 = *(int32x2_t **)(a2 + 40);
  kaldi::Matrix<float>::Matrix((uint64_t)v109);
  v108 = 0;
  v9 = *(_OWORD *)(a2 + 16);
  v107[0] = *(_OWORD *)a2;
  v107[1] = v9;
  v107[2] = *(_OWORD *)(a2 + 32);
  v10 = kaldi::AmFusionEncoderInput::PrepareFeature(a1, v107, &v108);
  if (kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a2 + 16)))
  {
    v11 = v108;
    v12 = kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactor(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if ((int)kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) > *(_DWORD *)(a1 + 52))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"nnet_->FrameOverlap() <= num_overlap_frames_", 44);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
    }
    v83 = (uint64_t)v4;
    v13 = v11 / v12;
    if (v13 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" rows will be removed from output because input is padded", 57);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
    }
    v81 = v10;
    v82 = v11;
    if (kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)))
    {
      v16 = v11
          / (int)kaldi::quasar::CEFusedAcousticEncoder::FrameSubsamplingFactorFusion(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
      if (v16 >= 1 && kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        v17 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" rows will be removed from am-fusion feature because input is padded", 68);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
    }
    else
    {
      v16 = 0;
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      v19 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      IndexOfMask = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMask(v19);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v19, (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * IndexOfMask), v13, 0, 0);
    }
    if ((kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64)) & 0x80000000) == 0)
    {
      v21 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64);
      IndexOfMaskFusion = kaldi::quasar::CEFusedAcousticEncoder::GetIndexOfMaskFusion(v21);
      kaldi::quasar::CEFusedAcousticEncoder::FillMask((uint64_t)v21, (_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * IndexOfMaskFusion), v16, 0, 0);
    }
    if (kaldi::g_kaldi_verbose_level >= 4)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"masks are filled", 16);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
    }
    v102 = 0u;
    v101 = 0u;
    v100 = (int32x2_t)&unk_1E5D34170;
    v103 = 0;
    v98 = 0u;
    v97 = 0u;
    v96 = (int32x2_t)&unk_1E5D34170;
    v99 = 0;
    v93 = 0u;
    v94 = 0u;
    v92 = (int32x2_t)&unk_1E5D34170;
    v95 = 0;
    v89 = 0u;
    v90 = 0u;
    v88 = (int32x2_t)&unk_1E5D34170;
    v91 = 0;
    v85 = 0u;
    v86 = 0u;
    v84 = (int32x2_t)&unk_1E5D34170;
    v87 = 0;
    kaldi::quasar::CEFusedAcousticEncoder::Encode(*(_QWORD *)(a1 + 64), (uint64_t *)(a1 + 80), (uint64_t *)(a1 + 168), (uint64_t *)(a1 + 88), &v100, &v96, &v92, &v88, &v84, (uint64_t **)(a1 + 112));
    kaldi::Matrix<float>::Resize(v4, (HIDWORD(v101) - v13), DWORD2(v101), 1, 0);
    DWORD2(v105) = DWORD2(v101);
    HIDWORD(v105) = HIDWORD(v101) - v13;
    v106 = v102;
    v104 = &unk_1E5D29D40;
    *(_QWORD *)&v105 = v101;
    kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v4, 111);
    v104 = &unk_1E5D29D40;
    v105 = 0u;
    v106 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
    if ((kaldi::GasrEncoderBase::IsFinite(v23, (uint64_t)v4) & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*output)", 17);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
    }
    v24 = (uint64_t)v4;
    HasRfdnnOut = kaldi::quasar::CEFusedAcousticEncoder::HasRfdnnOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if (v6)
      v26 = HasRfdnnOut;
    else
      v26 = 0;
    if (v26)
    {
      kaldi::Matrix<float>::Resize(v6, (HIDWORD(v93) - v16), DWORD2(v93), 1, 0);
      DWORD2(v105) = DWORD2(v93);
      HIDWORD(v105) = HIDWORD(v93) - v16;
      v106 = v94;
      v104 = &unk_1E5D29D40;
      *(_QWORD *)&v105 = v93;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v6, 111);
      v104 = &unk_1E5D29D40;
      v105 = 0u;
      v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v27, (uint64_t)v6) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*fusion_feat)", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    HasEpOut = kaldi::quasar::CEFusedAcousticEncoder::HasEpOut(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
    if (v8)
      v29 = HasEpOut;
    else
      v29 = 0;
    if (v29)
    {
      kaldi::Matrix<float>::Resize(v8, (HIDWORD(v89) - v13), DWORD2(v89), 1, 0);
      DWORD2(v105) = DWORD2(v89);
      HIDWORD(v105) = HIDWORD(v89) - v13;
      v106 = v90;
      v104 = &unk_1E5D29D40;
      *(_QWORD *)&v105 = v89;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v8, 111);
      v104 = &unk_1E5D29D40;
      v105 = 0u;
      v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v30, (uint64_t)v8) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*ep_feat)", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    if (v7)
    {
      kaldi::Matrix<float>::Resize(v7, (HIDWORD(v97) - v13), DWORD2(v97), 1, 0);
      DWORD2(v105) = DWORD2(v97);
      HIDWORD(v105) = HIDWORD(v97) - v13;
      v106 = v98;
      v104 = &unk_1E5D29D40;
      *(_QWORD *)&v105 = v97;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v7, 111);
      v104 = &unk_1E5D29D40;
      v105 = 0u;
      v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v31, (uint64_t)v7) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*aed_feat)", 19);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
    }
    if (*(_BYTE *)(a1 + 140) && v5)
    {
      v32 = 0;
      v33 = (void **)(a1 + 232);
      while (v32 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v6))
      {
        v34 = *(int *)(a1 + 136);
        v35 = *(_QWORD *)v6 + 4 * v6[2].i32[0] * v32;
        v37 = *(char **)(a1 + 240);
        v36 = *(_QWORD *)(a1 + 248);
        if ((unint64_t)v37 >= v36)
        {
          v39 = (char *)*v33;
          v40 = (v37 - (_BYTE *)*v33) >> 2;
          v41 = v40 + 1;
          if ((unint64_t)(v40 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v42 = v36 - (_QWORD)v39;
          if (v42 >> 1 > v41)
            v41 = v42 >> 1;
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
            v43 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v43 = v41;
          if (v43)
          {
            v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 248, v43);
            v39 = *(char **)(a1 + 232);
            v37 = *(char **)(a1 + 240);
          }
          else
          {
            v44 = 0;
          }
          v45 = &v44[4 * v40];
          *(_DWORD *)v45 = *(_DWORD *)(v35 + 4 * v34);
          v38 = v45 + 4;
          while (v37 != v39)
          {
            v46 = *((_DWORD *)v37 - 1);
            v37 -= 4;
            *((_DWORD *)v45 - 1) = v46;
            v45 -= 4;
          }
          *(_QWORD *)(a1 + 232) = v45;
          *(_QWORD *)(a1 + 240) = v38;
          *(_QWORD *)(a1 + 248) = &v44[4 * v43];
          if (v39)
            operator delete(v39);
        }
        else
        {
          *(_DWORD *)v37 = *(_DWORD *)(v35 + 4 * v34);
          v38 = v37 + 4;
        }
        *(_QWORD *)(a1 + 240) = v38;
        ++v32;
      }
      v24 = v83;
      v54 = kaldi::MatrixBase<float>::NumRows(v83);
      kaldi::Matrix<float>::Resize(v5, v54, 1, 1, 0);
      v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v56 = 0;
      v57 = (float)(v55 / (*(int (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1));
      while (v56 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v5))
      {
        v58 = (unint64_t)(float)((float)((float)(v56 + *(_DWORD *)(a1 + 224) + 1) * v57) + -1.0);
        v59 = *(_QWORD *)(a1 + 232);
        v60 = (*(_QWORD *)(a1 + 240) - v59) >> 2;
        if (v60 - 1 < v58)
          v58 = v60 - 1;
        if (v60 <= v58)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        *(float *)(*(_QWORD *)v5 + 4 * v5[2].i32[0] * v56++) = expf(*(float *)(v59 + 4 * v58));
      }
    }
    else if (v5)
    {
      if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v5) >= 1)
      {
        v47 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
        if (v47 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
        {
          kaldi::Matrix<float>::Matrix(&v104, v5);
          v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v104);
          v49 = kaldi::MatrixBase<float>::NumRows((uint64_t)v5);
          v50 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
          v51 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
          kaldi::Matrix<float>::Resize(v5, v51, 1, 1, 0);
          for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows(v83); ++i)
          {
            v53 = (unint64_t)(float)((float)((float)(i + 1) * (float)(v49 / v50)) + -1.0);
            if (v48 - 1 < v53)
              LODWORD(v53) = v48 - 1;
            *(_DWORD *)(*(_QWORD *)v5 + 4 * v5[2].i32[0] * i) = v104[DWORD2(v105) * (int)v53];
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&v104);
        }
      }
    }
    *(_DWORD *)(a1 + 224) += kaldi::MatrixBase<float>::NumRows(v24);
    v61 = *(_QWORD *)(a1 + 144);
    v10 = v81;
    if (v61 && v6)
    {
      v104 = 0;
      kaldi::quasar::CEFusedAcousticEncoder::Encode(v61, (uint64_t *)(a1 + 160), (uint64_t *)&v104, (uint64_t *)(a1 + 176), &v92, 0, 0, 0, 0, (uint64_t **)(a1 + 200));
      v62 = v104;
      v104 = 0;
      if (v62)
        (*(void (**)(void *))(*(_QWORD *)v62 + 8))(v62);
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"RFDNN output shape (", 20);
        v63 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", ", 2);
        v64 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
      if (*(_DWORD *)(a1 + 48))
      {
        v65 = 0;
        v66 = *(_DWORD *)(a1 + 52) / 2;
      }
      else
      {
        v67 = HIDWORD(v93);
        v68 = v67
            - kaldi::quasar::CEFusedAcousticEncoder::InputFrameCount(*(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64));
        v69 = *(_DWORD *)(a1 + 52);
        if (v69 >= 0)
          v70 = *(_DWORD *)(a1 + 52);
        else
          v70 = v69 + 1;
        v66 = v70 >> 1;
        v65 = v68 + (v70 >> 1);
      }
      v71 = __OFSUB__(v66, v82);
      v72 = v66 - v82;
      if (v72 < 0 == v71)
        v72 = 0;
      v73 = HIDWORD(v93) + v72;
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"rfdnn_output[", 13);
        v74 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)":", 1);
        v75 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)"] --> fusion_feat", 17);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
      v76 = (v73 - v65);
      kaldi::Matrix<float>::Resize(v6, v76, DWORD2(v93), 1, 0);
      *((_QWORD *)&v105 + 1) = __PAIR64__(v76, DWORD2(v93));
      LODWORD(v106) = v94;
      DWORD1(v106) = DWORD1(v94) - v94 * v65;
      *((_QWORD *)&v106 + 1) = *((_QWORD *)&v94 + 1);
      v104 = &unk_1E5D29D40;
      *(_QWORD *)&v105 = v93 + 4 * (int)v94 * v65;
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v104, (int *)v6, 111);
      v104 = &unk_1E5D29D40;
      v105 = 0u;
      v106 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v104);
      if ((kaldi::GasrEncoderBase::IsFinite(v77, (uint64_t)v6) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v104);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"IsFinite(*fusion_feat)", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v104);
      }
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v104, (uint64_t)"fusion_feat shape (", 19);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v6);
        v78 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v6);
        v79 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v79, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v104);
      }
    }
    ++*(_DWORD *)(a1 + 48);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v88);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v92);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v96);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v100);
  }
  else
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    if (v6)
      v18 = v10;
    else
      v18 = 1;
    if ((v18 & 1) == 0)
      kaldi::Matrix<float>::Resize(v6, 0, 0, 0, 0);
  }
  kaldi::Matrix<float>::~Matrix((uint64_t)v109);
  return v10;
}

void sub_1ADCBCD10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a14);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a20);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a26);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a38);
  kaldi::Matrix<float>::~Matrix(v38 - 152);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineAcousticEncoderInput::Compute(uint64_t a1, __int128 *a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (***v10)(_QWORD, _OWORD *);
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int32x2_t *v14;
  uint64_t v15;
  char *v16;
  int32x2_t *v17;
  int v18;
  int v19;
  int v20;
  int i;
  uint64_t j;
  int v23;
  float v24;
  uint64_t v25;
  int k;
  uint64_t m;
  int v28;
  int32x2_t v30;
  __int128 v31;
  __int128 v32;
  char v33;
  int32x2_t v34;
  __int128 v35;
  __int128 v36;
  char v37;
  _QWORD v38[35];
  int32x2_t v39[2];
  int v40;
  int32x2_t v41[5];
  char v42;
  int32x2_t v43[5];
  char v44;
  _OWORD v45[3];
  int v46[10];

  v4 = *(int32x2_t **)a2;
  kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v5 = 88;
  if (*(int *)(a1 + 100) > 0)
    v5 = 92;
  v6 = *(unsigned int *)(a1 + v5);
  if ((int)v6 >= 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v6, v7, 1, 0);
  }
  v8 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)v46, v8, v9, 1, 0);
  *(_QWORD *)a2 = v46;
  v10 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v11 = a2[2];
  v12 = *a2;
  v45[1] = a2[1];
  v45[2] = v11;
  v45[0] = v12;
  v13 = (**v10)(v10, v45);
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v46))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_44;
  }
  memset(&v43[1], 0, 32);
  v43[0] = (int32x2_t)&unk_1E5D34170;
  v44 = 0;
  memset(&v41[1], 0, 32);
  v41[0] = (int32x2_t)&unk_1E5D34170;
  v42 = 0;
  v14 = v43;
  kaldi::CuMatrix<float>::operator=(v43, v46);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v14 = v41;
    kaldi::nnet1::Nnet::Feedforward(*(uint64_t **)(a1 + 16), (uint64_t)v43, v41, -1, 0);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v39);
  v16 = (char *)&v43[2] + 4;
  if (v15)
    v16 = (char *)&v41[2] + 4;
  v17 = &v43[2];
  if (v15)
    v17 = &v41[2];
  kaldi::Matrix<float>::Resize(v39, *(unsigned int *)v16, v17->u32[0], 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v14, (int *)v39, 111);
  if (*(int *)(a1 + 84) >= 1)
  {
    v18 = kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    v19 = *(_DWORD *)(a1 + 84);
    if (v18 > v19)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"feats_mat.NumRows() <= model_interface_size_", 44);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
    }
    v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    kaldi::handleStrictBatchOps(v39, v19 - v20, *(_BYTE *)(a1 + 96), *(unsigned __int8 *)(a1 + 97));
  }
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v39); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v39); ++j)
    {
      v23 = *(_DWORD *)(*(_QWORD *)v39 + 4 * i * v40 + 4 * j) & 0x7FFFFFFF;
      if (v23 >= 2139095040)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"NaN or inf in features", 22);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
      }
    }
  }
  if (kaldi::g_kaldi_verbose_level > 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"Batch ", 6);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v39);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v38);
  }
  v36 = 0u;
  v35 = 0u;
  v34 = (int32x2_t)&unk_1E5D34170;
  v37 = 0;
  kaldi::CuMatrix<float>::operator=(&v34, (int *)v39);
  v32 = 0u;
  v31 = 0u;
  v30 = (int32x2_t)&unk_1E5D34170;
  v33 = 0;
  kaldi::quasar::CEAcousticEncoderNet::Encode(*(_QWORD *)(a1 + 24), (_QWORD *)(a1 + 112), (uint64_t)&v34, v13 ^ 1, (_QWORD *)(a1 + 112), &v30);
  if (*(_BYTE *)(a1 + 97))
  {
    v24 = *(float *)(v31 + 4 * (int)v32 * (HIDWORD(v31) - 1));
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::CuMatrix<float>::Resize(&v30, (int)v24, v25, 2, 0);
  }
  ++*(_DWORD *)(a1 + 100);
  if (*(_BYTE *)(a1 + 80))
    kaldi::CuMatrixBase<float>::ApplyLog((uint64_t)&v30);
  if (*(char *)(a1 + 63) < 0)
  {
    if (!*(_QWORD *)(a1 + 48))
      goto LABEL_36;
LABEL_33:
    if (*(_BYTE *)(a1 + 81) || *(_BYTE *)(a1 + 80))
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(_QWORD *)(a1 + 72), (uint64_t)&v30);
    goto LABEL_36;
  }
  if (*(_BYTE *)(a1 + 63))
    goto LABEL_33;
LABEL_36:
  kaldi::Matrix<float>::Resize(v4, HIDWORD(v31), DWORD2(v31), 1, 0);
  kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v30, (int *)v4, 111);
  for (k = 0; k < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4); ++k)
  {
    for (m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++m)
    {
      v28 = *(_DWORD *)(*(_QWORD *)v4 + 4 * k * v4[2].i32[0] + 4 * m) & 0x7FFFFFFF;
      if (v28 >= 2139095040)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v38);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)"NaN or inf in NNet output", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v38);
      }
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v30);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
  kaldi::Matrix<float>::~Matrix((uint64_t)v39);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v41);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v43);
LABEL_44:
  kaldi::Matrix<float>::~Matrix((uint64_t)v46);
  return v13;
}

void sub_1ADCBD2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  JUMPOUT(0x1ADCBD2E8);
}

void sub_1ADCBD2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a56);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a61);
  kaldi::CuMatrix<float>::~CuMatrix(v61 - 224);
  kaldi::Matrix<float>::~Matrix(v61 - 120);
  _Unwind_Resume(a1);
}

uint64_t kaldi::GasrEncoderBase::DecideFrameOverlap(kaldi::quasar::CEFusedAcousticEncoder **this)
{
  return kaldi::quasar::CEFusedAcousticEncoder::FrameOverlap(this[8]);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::Compute(uint64_t a1, __int128 *a2)
{
  int32x2_t *v4;
  BOOL v5;
  _BOOL8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (***v11)(_QWORD, _OWORD *);
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  int v15;
  int v16;
  int i;
  uint64_t j;
  float v19;
  int v20;
  int v21;
  int v22;
  uint64_t *v23;
  int32x2_t *v24;
  uint64_t v25;
  uint64_t v26;
  int32x2_t *v27;
  uint64_t v28;
  __int32 v29;
  int32x2_t *v30;
  uint64_t *v31;
  uint64_t v32;
  __int128 *v33;
  int v34;
  uint64_t *v35;
  unsigned __int32 v36;
  uint64_t v37;
  const void *v38;
  int *v39;
  int *v40;
  int *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  int v46;
  _QWORD *v47;
  int32x2_t *v48;
  uint64_t v49;
  _QWORD *v50;
  std::vector<int>::size_type v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int32x2_t v58;
  __int32 v59;
  unsigned int v60;
  int32x2_t v61;
  __int32 v62;
  unsigned int v63;
  _BOOL8 v64;
  int v65;
  int32x2_t v66;
  __int32 v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int32x2_t v73;
  __int32 v74;
  int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  uint64_t k;
  float v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int32x2_t v86;
  __int32 v87;
  uint64_t v88;
  int v89;
  int32x2_t v90;
  __int32 v91;
  uint64_t v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  const void *v99;
  void *v100;
  void *v101;
  std::__shared_weak_count *v102;
  unint64_t *p_shared_owners;
  unint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  int v107;
  unsigned int v108;
  int v109;
  const void **v110;
  int32x2_t *v111;
  const void **v112;
  int32x2_t *v113;
  std::vector<int>::value_type __x[2];
  void *v115;
  _QWORD *v116;
  void *__p;
  unint64_t v118;
  unint64_t v119;
  uint64_t v120;
  int32x2_t v121;
  __int128 v122;
  __int128 v123;
  char v124;
  uint64_t v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  _OWORD v131[3];
  int32x2_t v132;
  int v133;
  int v134;
  std::vector<int> v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  v4 = *(int32x2_t **)a2;
  v113 = (int32x2_t *)*((_QWORD *)a2 + 1);
  if (*(_QWORD *)(a1 + 88))
    v5 = *((_QWORD *)a2 + 1) == 0;
  else
    v5 = 1;
  v6 = !v5;
  kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  v7 = *(unsigned int *)(a1 + 160);
  if ((int)v7 >= 1)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v7, v8, 1, 0);
  }
  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  kaldi::Matrix<float>::Matrix((uint64_t)&v132, v9, v10, 0, 0);
  *(_QWORD *)a2 = &v132;
  v11 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v12 = a2[2];
  v13 = *a2;
  v131[1] = a2[1];
  v131[2] = v12;
  v131[0] = v13;
  v14 = (**v11)(v11, v131);
  if (!kaldi::MatrixBase<float>::NumRows((uint64_t)&v132))
  {
    kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
    goto LABEL_115;
  }
  v107 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
  if (*(int *)(a1 + 160) < 1)
  {
    v109 = 0;
  }
  else
  {
    v15 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
    v16 = *(_DWORD *)(a1 + 160);
    if (v15 > v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"input.NumRows() <= strict_batch_size_", 37);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    v109 = v16 - kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
    kaldi::handleStrictBatchOps(&v132, v109, *(_BYTE *)(a1 + 164), *(unsigned __int8 *)(a1 + 368));
  }
  for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v132); ++i)
  {
    for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v132); ++j)
    {
      v19 = *(float *)(*(_QWORD *)&v132 + 4 * i * v134 + 4 * j);
      if (v19 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"inf in features", 15);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
  }
  *(_DWORD *)(a1 + 96) += kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
  v20 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
  v21 = *(_DWORD *)(a1 + 104);
  v108 = v14;
  if (v20 > v21)
  {
    v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, (uint64_t)&v132, v21, v22 - *(_DWORD *)(a1 + 104), 0, v133);
    kaldi::CuMatrix<float>::CuMatrix<float>(&v125, &__p, 111, 0);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    kaldi::CuMatrixBase<float>::SetStride((uint64_t)&v125, *(_DWORD *)(a1 + 80) * v129);
    v123 = 0u;
    v122 = 0u;
    v121 = (int32x2_t)&unk_1E5D34170;
    v124 = 0;
    v23 = *(uint64_t **)(a1 + 16);
    v24 = &v121;
    if (!v23)
      v24 = (int32x2_t *)&v125;
    v111 = v24;
    if (v23)
      kaldi::nnet1::Nnet::Feedforward(v23, (uint64_t)&v125, &v121, -1, 0);
    v25 = *(_QWORD *)(a1 + 376);
    if (v25)
    {
      v26 = *(_QWORD *)(v25 + 40);
      v27 = v23 ? &v121 : (int32x2_t *)&v125;
      v28 = v27[2].i32[1];
      if (v26 + v28 <= (unint64_t)*(unsigned int *)(a1 + 392) && (int)v28 >= 1)
      {
        v29 = 0;
        if (v23)
          v30 = &v121;
        else
          v30 = (int32x2_t *)&v125;
        do
        {
          kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, v30[2].u32[0], 0, 0, 0);
          v31 = (uint64_t *)&v126;
          if (v23)
            v31 = (uint64_t *)&v122;
          v32 = *v31;
          v33 = (__int128 *)&v129;
          if (v23)
            v33 = &v123;
          v34 = *(_DWORD *)v33 * v29;
          v35 = &v130;
          if (v23)
            v35 = (uint64_t *)&v123 + 1;
          v36 = v30[2].u32[0];
          v37 = *v35;
          v135.__begin_ = (std::vector<int>::pointer)&unk_1E5D29D70;
          v135.__end_ = (std::vector<int>::pointer)(v32 + 4 * v34);
          v136 = v37;
          v135.__end_cap_.__value_ = (int *)v36;
          kaldi::CuMatrixBase<float>::CopyRowsFromVec((uint64_t)&__p, (uint64_t)&v135);
          std::deque<kaldi::CuMatrix<float>>::push_back(*(_QWORD **)(a1 + 376), (uint64_t)&__p);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
          ++v29;
        }
        while (v29 < v27[2].i32[1]);
      }
    }
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Batch ", 6);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (v6)
    {
      v38 = *(const void **)(a1 + 24);
      if (!v38
      {
        v135.__begin_ = 0;
        v135.__end_ = 0;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Must use penultimate-compatible AM with silence nnet", 52);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v40 = v39;
      v41 = *(int **)(a1 + 32);
      v135.__begin_ = v39;
      v135.__end_ = v41;
      if (v41)
      {
        v42 = (unint64_t *)(v41 + 2);
        do
          v43 = __ldxr(v42);
        while (__stxr(v43 + 1, v42));
      }
      (*(void (**)(int *, int32x2_t *, uint64_t, uint64_t))(*(_QWORD *)v39 + 96))(v39, v111, a1 + 176, 1);
      (*(void (**)(int *, uint64_t, uint64_t))(*(_QWORD *)v40 + 144))(v40, a1 + 176, a1 + 224);
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 88) + 16))(*(_QWORD *)(a1 + 88), a1 + 176, a1 + 272);
      if (v41)
      {
        v44 = (unint64_t *)(v41 + 2);
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          (*(void (**)(int *))(*(_QWORD *)v41 + 16))(v41);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v41);
        }
      }
      v6 = 1;
      goto LABEL_75;
    }
    v46 = *(_DWORD *)(a1 + 340);
    if (v46 || *(_DWORD *)(a1 + 336))
    {
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"There is extra input, rows=", 27);
        v47 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)", cols=", 7);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
        v46 = *(_DWORD *)(a1 + 340);
      }
      if (v46 != 1 || (v23 ? (v48 = &v121) : (v48 = (int32x2_t *)&v125), v49 = v48[2].u32[1], (int)v49 <= 0))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"extra_input_.NumRows() == 1 && feats.NumRows() >= 1", 51);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      if ((_DWORD)v49 == 1)
      {
        v50 = operator new(8uLL);
        __p = v50;
        *v50 = a1 + 320;
        v118 = (unint64_t)(v50 + 1);
        v119 = (unint64_t)(v50 + 1);
        (*(void (**)(_QWORD, int32x2_t *, void **, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), v111, &__p, a1 + 224);
        if (__p)
        {
          v118 = (unint64_t)__p;
          operator delete(__p);
        }
      }
      else
      {
        kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, v49, *(unsigned int *)(a1 + 336), 0, 0, 0);
        v51 = v48[2].i32[1];
        __x[0] = 0;
        std::vector<int>::vector(&v135, v51, __x);
        kaldi::CuMatrixBase<float>::CopyRows((uint64_t)&__p, a1 + 320, &v135);
        v52 = operator new(8uLL);
        *(_QWORD *)__x = v52;
        *v52 = &__p;
        v115 = v52 + 1;
        v116 = v52 + 1;
        (*(void (**)(_QWORD, int32x2_t *, std::vector<int>::value_type *, uint64_t))(**(_QWORD **)(a1 + 24)
                                                                                             + 32))(*(_QWORD *)(a1 + 24), v111, __x, a1 + 224);
        if (*(_QWORD *)__x)
        {
          v115 = *(void **)__x;
          operator delete(*(void **)__x);
        }
        if (v135.__begin_)
        {
          v135.__end_ = v135.__begin_;
          operator delete(v135.__begin_);
        }
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      }
      v6 = 0;
      goto LABEL_75;
    }
    v99 = *(const void **)(a1 + 24);
    if (v99
    {
      v101 = v100;
      v102 = *(std::__shared_weak_count **)(a1 + 32);
      *(_QWORD *)__x = v100;
      v115 = v102;
      if (v102)
      {
        p_shared_owners = (unint64_t *)&v102->__shared_owners_;
        do
          v104 = __ldxr(p_shared_owners);
        while (__stxr(v104 + 1, p_shared_owners));
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)v100 + 184))(v100))
      {
        v135.__begin_ = (std::vector<int>::pointer)(a1 + 272);
        std::vector<kaldi::CuMatrix<float> *,std::allocator<kaldi::CuMatrix<float> *>>::vector[abi:ne180100](&__p, &v135, 1uLL);
        memset(&v135, 0, sizeof(v135));
        (*(void (**)(void *, int32x2_t *, std::vector<int> *, uint64_t, void **, _QWORD))(*(_QWORD *)v101
                                                                                                  + 120))(v101, v111, &v135, a1 + 224, &__p, 0);
        if (v135.__begin_)
        {
          v135.__end_ = v135.__begin_;
          operator delete(v135.__begin_);
        }
        v6 = *(_QWORD *)(a1 + 280) != 0;
        if (__p)
        {
          v118 = (unint64_t)__p;
          operator delete(__p);
        }
        goto LABEL_128;
      }
    }
    else
    {
      v102 = 0;
      *(_QWORD *)__x = 0;
      v115 = 0;
    }
    (*(void (**)(_QWORD, int32x2_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24), v111, a1 + 224);
    v6 = 0;
LABEL_128:
    if (v102)
    {
      v105 = (unint64_t *)&v102->__shared_owners_;
      do
        v106 = __ldaxr(v105);
      while (__stlxr(v106 - 1, v105));
      if (!v106)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
LABEL_75:
    if (*(_BYTE *)(a1 + 84))
      kaldi::CuMatrixBase<float>::ApplyLog(a1 + 224);
    if (*(char *)(a1 + 63) < 0)
    {
      if (!*(_QWORD *)(a1 + 48))
      {
LABEL_84:
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v121);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v125);
        goto LABEL_85;
      }
    }
    else if (!*(_BYTE *)(a1 + 63))
    {
      goto LABEL_84;
    }
    if (*(_BYTE *)(a1 + 85) || *(_BYTE *)(a1 + 84))
      kaldi::nnet1::PdfPrior::SubtractOnLogpost(*(_QWORD *)(a1 + 72), a1 + 224);
    goto LABEL_84;
  }
LABEL_85:
  v53 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
  kaldi::Matrix<float>::Resize(v4, v53, *(unsigned int *)(a1 + 240), 0, 0);
  if (v6)
  {
    v54 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
    kaldi::Matrix<float>::Resize(v113, v54, *(unsigned int *)(a1 + 288), 1, 0);
  }
  v55 = 0;
  v112 = (const void **)(a1 + 112);
  v110 = (const void **)(a1 + 136);
  while (v55 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
  {
    v56 = *(_DWORD *)(a1 + 104);
    v57 = v55 - v56;
    if (v55 >= v56)
    {
      v64 = v6;
      v65 = *(_DWORD *)(a1 + 80);
      v66 = *v4;
      v67 = v4[2].i32[0];
      v68 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      v69 = v57 / v65;
      v127 = 0;
      v128 = 0;
      v125 = *(_QWORD *)&v66 + 4 * v67 * v55;
      v126 = v68;
      v70 = *(_DWORD *)(a1 + 240);
      v71 = *(_QWORD *)(a1 + 256);
      v72 = *(_QWORD *)(a1 + 232) + 4 * *(_DWORD *)(a1 + 248) * v69;
      __p = &unk_1E5D29D70;
      v118 = v72;
      v120 = v71;
      v119 = v70;
      kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)&__p, (uint64_t)&v125);
      v6 = v64;
      if (v64)
      {
        v73 = *v113;
        v74 = v113[2].i32[0];
        v75 = kaldi::MatrixBase<float>::NumCols((uint64_t)v113);
        v127 = 0;
        v128 = 0;
        v125 = *(_QWORD *)&v73 + 4 * v74 * v55;
        v126 = v75;
        v76 = *(_QWORD *)(a1 + 280) + 4 * *(_DWORD *)(a1 + 296) * v69;
        v77 = *(_DWORD *)(a1 + 288);
        v78 = *(_QWORD *)(a1 + 304);
        __p = &unk_1E5D29D70;
        v118 = v76;
        v120 = v78;
        v119 = v77;
        kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)&__p, (uint64_t)&v125);
      }
    }
    else
    {
      v58 = *v4;
      v59 = v4[2].i32[0];
      v60 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
      v119 = 0;
      __p = (void *)(*(_QWORD *)&v58 + 4 * v59 * v55);
      v118 = v60;
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__p, v112);
      if (v6)
      {
        v61 = *v113;
        v62 = v113[2].i32[0];
        v63 = kaldi::MatrixBase<float>::NumCols((uint64_t)v113);
        v119 = 0;
        __p = (void *)(*(_QWORD *)&v61 + 4 * v62 * v55);
        v118 = v63;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&__p, v110);
      }
    }
    ++v55;
  }
  v79 = 0;
  v14 = v108;
  while (v79 < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
  {
    for (k = 0; k < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)v4); ++k)
    {
      v81 = *(float *)(*(_QWORD *)v4 + 4 * v79 * v4[2].i32[0] + 4 * k);
      if (v81 == INFINITY)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"inf in NNet output", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    ++v79;
  }
  if (*(_BYTE *)(a1 + 100))
  {
    v82 = *(_DWORD *)(a1 + 104);
    if (v82 >= (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v132))
    {
      *(_DWORD *)(a1 + 104) -= kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
    }
    else
    {
      v83 = *(_DWORD *)(a1 + 96);
      v84 = *(_DWORD *)(a1 + 80);
      if (v83 % v84)
      {
        *(_DWORD *)(a1 + 104) = v84 - v83 % v84;
        v85 = kaldi::MatrixBase<float>::NumRows((uint64_t)&v132);
        v86 = *v4;
        v87 = v4[2].i32[0];
        v88 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
        v89 = v85 - v83 + (v83 - 1) / v84 * v84;
        v119 = 0;
        __p = (void *)(*(_QWORD *)&v86 + 4 * v87 * v89);
        v118 = v88;
        kaldi::Vector<float>::Resize((void **)v112, v88, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v112, (const void **)&__p);
        if (v6)
        {
          v90 = *v113;
          v91 = v113[2].i32[0];
          v92 = kaldi::MatrixBase<float>::NumCols((uint64_t)v113);
          v119 = 0;
          __p = (void *)(*(_QWORD *)&v90 + 4 * v91 * v89);
          v118 = v92;
          kaldi::Vector<float>::Resize((void **)v110, v92, 1);
          kaldi::VectorBase<float>::CopyFromVec((uint64_t)v110, (const void **)&__p);
        }
      }
      else
      {
        *(_DWORD *)(a1 + 104) = 0;
      }
    }
  }
  if (v109 >= 1)
  {
    if (v109 + v107 != kaldi::MatrixBase<float>::NumRows((uint64_t)v4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"orig_input_size + frames_padded == output->NumRows()", 52);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (v6)
    {
      v93 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
      if (v93 != kaldi::MatrixBase<float>::NumRows((uint64_t)v113))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"output->NumRows() == sil_post->NumRows()", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
    }
    v94 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    v95 = kaldi::MatrixBase<float>::NumCols((uint64_t)v4);
    kaldi::Matrix<float>::Resize(v4, (v94 - v109), v95, 2, 0);
    if (v6)
    {
      v96 = kaldi::MatrixBase<float>::NumRows((uint64_t)v113);
      v97 = kaldi::MatrixBase<float>::NumCols((uint64_t)v113);
      kaldi::Matrix<float>::Resize(v113, (v96 - v109), v97, 2, 0);
    }
  }
LABEL_115:
  kaldi::Matrix<float>::~Matrix((uint64_t)&v132);
  return v14;
}

void sub_1ADCBE244(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Matrix<float>::~Matrix(v1 - 176);
  _Unwind_Resume(a1);
}

void sub_1ADCBE258(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCBE250);
}

uint64_t kaldi::OnlineAppendInput::Compute(uint64_t a1, uint64_t a2)
{
  int32x2_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (***v7)(_QWORD, _OWORD *);
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *v14[4];
  _OWORD v15[3];

  v4 = *(int32x2_t **)a2;
  v5 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)a2);
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
  kaldi::Matrix<float>::Resize(v4, v5, v6, 1, 0);
  v7 = *(uint64_t (****)(_QWORD, _OWORD *))(a1 + 8);
  v8 = *(_OWORD *)(a2 + 16);
  v15[0] = *(_OWORD *)a2;
  v15[1] = v8;
  v15[2] = *(_OWORD *)(a2 + 32);
  v9 = (**v7)(v7, v15);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v4) >= 1)
  {
    v10 = kaldi::MatrixBase<float>::NumRows((uint64_t)v4);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
    kaldi::Matrix<float>::Resize(v4, v10, v11, 2, 0);
    v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v14, (uint64_t)v4, 0, v4[1].i32[1], v12, *(_DWORD *)(a1 + 24));
    kaldi::MatrixBase<float>::CopyRowsFromVec(v14, (char **)(a1 + 16));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v14);
  }
  return v9;
}

void sub_1ADCBE384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineFeatureMatrix::GetNextFeatures(int32x2_t *this, clockid_t a2)
{
  double Seconds;
  int v4;
  int v5;
  int32x2_t v6;
  __int32 v7;
  uint64_t v8;
  int v9;
  int32x2_t v10;
  __int32 v11;
  uint64_t v12;
  int v13;
  int32x2_t v14;
  __int32 v15;
  uint64_t v16;
  double v17;
  uint64_t (***v18)(_QWORD, _QWORD *, double);
  _QWORD *v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  clockid_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[6];
  int v46[10];
  uint64_t v47[5];
  uint64_t v48[5];
  _BYTE v49[40];
  int v50[10];
  int v51[10];
  const void *v52[3];
  const void *v53[3];
  const void *v54[4];

  if (!this[19].i8[4])
  {
    Seconds = kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2);
    v4 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]);
    this[19].i8[5] = v4 != 0;
    memset(v54, 0, 24);
    memset(v53, 0, sizeof(v53));
    memset(v52, 0, sizeof(v52));
    if (v4)
    {
      v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]);
      v6 = this[4];
      v7 = this[6].i32[0];
      v8 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[4]);
      v44 = 0;
      v42 = *(_QWORD *)&v6 + 4 * v7 * (v5 - 1);
      v43 = v8;
      kaldi::Vector<float>::Resize((void **)v54, v8, 1);
      kaldi::VectorBase<float>::CopyFromVec((uint64_t)v54, (const void **)&v42);
      if (this[21].i8[1])
      {
        v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[9]);
        v10 = this[9];
        v11 = this[11].i32[0];
        v12 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[9]);
        v44 = 0;
        v42 = *(_QWORD *)&v10 + 4 * v11 * (v9 - 1);
        v43 = v12;
        kaldi::Vector<float>::Resize((void **)v53, v12, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v53, (const void **)&v42);
      }
      if (this[21].i8[0])
      {
        v13 = kaldi::MatrixBase<float>::NumRows((uint64_t)&this[14]);
        v14 = this[14];
        v15 = this[16].i32[0];
        v16 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[14]);
        v44 = 0;
        v42 = *(_QWORD *)&v14 + 4 * v15 * (v13 - 1);
        v43 = v16;
        kaldi::Vector<float>::Resize((void **)v52, v16, 1);
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)v52, (const void **)&v42);
      }
    }
    while (1)
    {
      kaldi::Matrix<float>::Matrix((uint64_t)v51, this[1].u32[0], this[3].u32[0], 0, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)v50);
      kaldi::Matrix<float>::Matrix((uint64_t)v49);
      kaldi::Matrix<float>::Matrix((uint64_t)v48);
      kaldi::Matrix<float>::Matrix((uint64_t)v47);
      v17 = kaldi::Matrix<float>::Matrix((uint64_t)v46);
      v18 = (uint64_t (***)(_QWORD, _QWORD *, double))this[2];
      v45[0] = v51;
      v45[1] = v50;
      v45[2] = v49;
      v45[3] = v48;
      v45[4] = v47;
      v45[5] = v46;
      this[19].i8[4] = (**v18)(v18, v45, v17) ^ 1;
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"receive am-fusion feature (", 27);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v48);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v48);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v48)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v48))
      {
        kaldi::Matrix<float>::Matrix((uint64_t)&v42);
        std::deque<kaldi::Matrix<float>>::emplace_back<kaldi::Matrix<float>>(&this[44], (uint64_t)&v42);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v42);
        v21 = *(_QWORD *)&this[49] + *(_QWORD *)&this[48] - 1;
        kaldi::Matrix<float>::Swap((uint64_t *)(*(_QWORD *)(*(_QWORD *)&this[45] + 8 * (v21 / 0x66)) + 40 * (v21 % 0x66)), v48);
      }
      if (kaldi::g_kaldi_verbose_level >= 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42, 4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"receive AED states (", 20);
        kaldi::MatrixBase<float>::NumRows((uint64_t)v47);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
        kaldi::MatrixBase<float>::NumCols((uint64_t)v47);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v42);
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v47)
        && kaldi::MatrixBase<float>::NumCols((uint64_t)v47))
      {
        kaldi::Matrix<float>::Matrix((uint64_t)&v42);
        std::deque<kaldi::Matrix<float>>::push_back(&this[38], (uint64_t)&v42);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v42);
        v24 = *(_QWORD *)&this[43] + *(_QWORD *)&this[42] - 1;
        kaldi::Matrix<float>::Swap((uint64_t *)(*(_QWORD *)(*(_QWORD *)&this[39] + 8 * (v24 / 0x66)) + 40 * (v24 % 0x66)), v47);
      }
      if (!this[21].i8[0])
      {
        if (!kaldi::MatrixBase<float>::NumRows((uint64_t)v50))
          goto LABEL_21;
        if (!this[21].i8[0])
          goto LABEL_45;
      }
      v25 = kaldi::MatrixBase<float>::NumRows((uint64_t)v51);
      if (v25 != kaldi::MatrixBase<float>::NumRows((uint64_t)v50))
      {
LABEL_45:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"(!has_sil_post_ && next_sil_post.NumRows() == 0) || (has_sil_post_ && next_features.NumRows() == next_sil_post.NumRows())", 121);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
      }
LABEL_21:
      if (this[21].i8[1])
        goto LABEL_24;
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v46))
      {
        if (!this[21].i8[1])
          goto LABEL_46;
LABEL_24:
        v26 = kaldi::MatrixBase<float>::NumRows((uint64_t)v51);
        if (v26 != kaldi::MatrixBase<float>::NumRows((uint64_t)v46))
        {
LABEL_46:
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v42, (uint64_t)"(!has_endpointer_score_ && next_ep_feat.NumRows() == 0) || (has_endpointer_score_ && next_features.NumRows() == next_ep_feat.NumRows())", 135);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v42);
        }
      }
      if (kaldi::MatrixBase<float>::NumRows((uint64_t)v51) || this[19].i8[4] || !this[27].i8[0])
      {
        if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)v51) >= 1)
        {
          v27 = this[19].u8[5];
          v28 = kaldi::MatrixBase<float>::NumRows((uint64_t)v51) + v27;
          this[19].i32[0] += kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]) - this[19].u8[5];
          kaldi::Matrix<float>::Resize(this + 4, v28, this[3].u32[0], 1, 0);
          if (this[19].i8[5])
          {
            v29 = (uint64_t)this[4];
            v30 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[4]);
            v44 = 0;
            v42 = v29;
            v43 = v30;
            kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v54);
            v31 = kaldi::MatrixBase<float>::NumRows((uint64_t)v51);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[4], 1, v31, 0, this[3].i32[0]);
            kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v51, 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
          }
          else
          {
            kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[4], v51, 111);
          }
          if (this[21].i8[1])
          {
            v32 = kaldi::MatrixBase<float>::NumCols((uint64_t)v46);
            kaldi::Matrix<float>::Resize(this + 9, v28, v32, 1, 0);
            if (this[19].i8[5])
            {
              v33 = (uint64_t)this[9];
              v34 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[9]);
              v44 = 0;
              v42 = v33;
              v43 = v34;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v53);
              LODWORD(v33) = kaldi::MatrixBase<float>::NumRows((uint64_t)v46);
              v35 = kaldi::MatrixBase<float>::NumCols((uint64_t)v46);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[9], 1, v33, 0, v35);
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v46, 111);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
            }
            else
            {
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[9], v46, 111);
            }
          }
          if (this[21].i8[0])
          {
            v37 = kaldi::MatrixBase<float>::NumCols((uint64_t)v50);
            kaldi::Matrix<float>::Resize(this + 14, v28, v37, 1, 0);
            if (this[19].i8[5])
            {
              v38 = (uint64_t)this[14];
              v39 = kaldi::MatrixBase<float>::NumCols((uint64_t)&this[14]);
              v44 = 0;
              v42 = v38;
              v43 = v39;
              kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v42, v52);
              LODWORD(v38) = kaldi::MatrixBase<float>::NumRows((uint64_t)v50);
              v40 = kaldi::MatrixBase<float>::NumCols((uint64_t)v50);
              kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v42, (uint64_t)&this[14], 1, v38, 0, v40);
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&v42, v50, 111);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
            }
            else
            {
              kaldi::MatrixBase<float>::CopyFromMat<float>((int *)&this[14], v50, 111);
            }
          }
        }
        v36 = 0;
      }
      else
      {
        v36 = 1;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)v46);
      kaldi::Matrix<float>::~Matrix((uint64_t)v47);
      kaldi::Matrix<float>::~Matrix((uint64_t)v48);
      kaldi::Matrix<float>::~Matrix((uint64_t)v49);
      kaldi::Matrix<float>::~Matrix((uint64_t)v50);
      kaldi::Matrix<float>::~Matrix((uint64_t)v51);
      if ((v36 & 1) == 0)
      {
        *(double *)&this[20] = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v41) - Seconds + *(double *)&this[20];
        kaldi::Vector<float>::Destroy((uint64_t)v52);
        kaldi::Vector<float>::Destroy((uint64_t)v53);
        kaldi::Vector<float>::Destroy((uint64_t)v54);
        return;
      }
    }
  }
}

void sub_1ADCBEC44(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  kaldi::Matrix<float>::~Matrix(&v3);
  kaldi::Matrix<float>::~Matrix(&v4);
  kaldi::Matrix<float>::~Matrix(&v5);
  kaldi::Matrix<float>::~Matrix(&v6);
  kaldi::Matrix<float>::~Matrix(v1 - 256);
  kaldi::Matrix<float>::~Matrix(v1 - 216);
  kaldi::Vector<float>::Destroy(v1 - 176);
  kaldi::Vector<float>::Destroy(v1 - 152);
  kaldi::Vector<float>::Destroy(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::Matrix<float>>::emplace_back<kaldi::Matrix<float>>(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::Matrix<float>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  kaldi::Matrix<float>::Matrix(v8, a2);
  v9 = a1[4];
  v10 = a1[5] + 1;
  a1[5] = v10;
  v11 = v9 + v10;
  v12 = a1[1];
  v13 = (_QWORD *)(v12 + 8 * (v11 / 0x66));
  v14 = *v13 + 40 * (v11 % 0x66);
  if (a1[2] == v12)
    v14 = 0;
  if (v14 == *v13)
    v14 = *(v13 - 1) + 4080;
  return v14 - 40;
}

uint64_t std::deque<kaldi::Matrix<float>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 102 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::Matrix<float>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  result = kaldi::Matrix<float>::Matrix(v8, a2);
  ++a1[5];
  return result;
}

BOOL kaldi::OnlineFeatureMatrix::IsValidFrame(int32x2_t *this, signed int a2, int a3)
{
  __int32 v6;
  int32x2_t *v7;
  clockid_t v8;
  __int32 v9;
  _BOOL8 result;
  _QWORD *v11;
  _QWORD v12[34];

  v6 = this[19].i32[0];
  v7 = this + 4;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)&this[4]) + v6) > a2)
    return 1;
  if (!a3)
    return this[19].i8[4] == 0;
  kaldi::OnlineFeatureMatrix::GetNextFeatures(this, v8);
  v9 = this[19].i32[0];
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)v7) + v9) > a2)
    return 1;
  if (this[19].i8[4])
    return 0;
  result = 0;
  if (this[27].i8[0] && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Unexpected point reached in code: ", 34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"possibly you are skipping frames?", 33);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    return 0;
  }
  return result;
}

void sub_1ADCBEF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeatureMatrix::GetFrame@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, signed int a2@<W1>, uint64_t *a3@<X8>)
{
  signed int v3;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[34];

  v3 = *((_DWORD *)this + 38);
  if (v3 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get a discarded frame.");
    goto LABEL_6;
  }
  v7 = (char *)this + 32;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32) + v3) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempt get frame without check its validity.");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v8 = *((_QWORD *)this + 4) + 4 * *((_DWORD *)this + 12) * (a2 - *((_DWORD *)this + 38));
  result = kaldi::MatrixBase<float>::NumCols((uint64_t)v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v8;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

uint64_t kaldi::OnlineFeatureMatrix::GetAedFrame@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[34];

  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "Attempting to get Aed frame when chunk size is 0");
    goto LABEL_10;
  }
  v6 = (char *)this + 224;
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)this + 224) < 1
    || (int)kaldi::MatrixBase<float>::NumRows((uint64_t)this + 224) <= a2)
  {
    v9 = a2 - kaldi::MatrixBase<float>::NumRows((uint64_t)this + 224);
    v10 = v9 / (*(int (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
    if (*((_QWORD *)this + 43) <= (unint64_t)v10)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Attempting to access all_aed_feat_list_ by index ", 49);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" while size is ", 15);
      std::ostream::operator<<();
    }
    else
    {
      v11 = *(_QWORD *)(*((_QWORD *)this + 39) + 8 * ((*((_QWORD *)this + 42) + v10) / 0x66uLL))
          + 40 * ((*((_QWORD *)this + 42) + v10) % 0x66uLL);
      v12 = v9 % (*(int (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
      if ((int)kaldi::MatrixBase<float>::NumRows(v11) > v12)
      {
        v7 = *(_QWORD *)v11 + 4 * *(_DWORD *)(v11 + 16) * v12;
        v8 = v11;
        goto LABEL_8;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Attempting to access aed_feat by row index ", 43);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" while number of rows is ", 25);
      kaldi::MatrixBase<float>::NumRows(v11);
      std::ostream::operator<<();
    }
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  v7 = *((_QWORD *)this + 28) + 4 * *((_DWORD *)this + 60) * a2;
  v8 = (uint64_t)v6;
LABEL_8:
  result = kaldi::MatrixBase<float>::NumCols(v8);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v7;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

void sub_1ADCBF23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::OnlineFeatureMatrix::HasEndpointerScore(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned __int8 *)this + 169);
}

uint64_t kaldi::OnlineFeatureMatrix::GetEndpointerScore@<X0>(kaldi::OnlineFeatureMatrix *this@<X0>, signed int a2@<W1>, uint64_t *a3@<X8>)
{
  signed int v6;
  char *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[34];

  if (!*((_BYTE *)this + 169))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get endpointer score without providing the model output.");
    goto LABEL_8;
  }
  v6 = *((_DWORD *)this + 38);
  if (v6 > a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempting to get a discarded frame.");
    goto LABEL_8;
  }
  v7 = (char *)this + 72;
  if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 72) + v6) <= a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Attempt get frame without check its validity.");
LABEL_8:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v8 = *((_QWORD *)this + 9) + 4 * *((_DWORD *)this + 22) * (a2 - *((_DWORD *)this + 38));
  result = kaldi::MatrixBase<float>::NumCols((uint64_t)v7);
  a3[1] = 0;
  a3[2] = 0;
  *a3 = v8;
  *((_DWORD *)a3 + 2) = result;
  return result;
}

uint64_t kaldi::OnlineFeatureMatrix::HasSilencePosterior(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned __int8 *)this + 168);
}

float kaldi::OnlineFeatureMatrix::GetSilencePosterior(kaldi::OnlineFeatureMatrix *this, signed int a2)
{
  signed int v4;
  _QWORD v6[34];

  if (*((_BYTE *)this + 168))
  {
    v4 = *((_DWORD *)this + 38);
    if (v4 > a2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Attempting to get a discarded frame.");
    }
    else
    {
      if ((int)(kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32) + v4) > a2)
        return *(float *)(*((_QWORD *)this + 14) + 4 * *((_DWORD *)this + 32) * (a2 - *((_DWORD *)this + 38)));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Attempt get frame without check its validity.");
    }
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return 0.0;
}

void kaldi::OnlineFeatureMatrix::GetCurrentBatch(uint64_t a1, int32x2_t *a2)
{
  int *v4;
  uint64_t v5;
  int v6[8];

  v4 = (int *)(a1 + 32);
  v5 = kaldi::MatrixBase<float>::NumRows(a1 + 32) - *(char *)(a1 + 157);
  kaldi::Matrix<float>::Resize(a2, v5, *(unsigned int *)(a1 + 24), 1, 0);
  if (*(_BYTE *)(a1 + 157))
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v6, (uint64_t)v4, 1, v5, 0, *(_DWORD *)(a1 + 24));
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a2, v6, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v6);
  }
  else
  {
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)a2, v4, 111);
  }
}

void sub_1ADCBF4E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeatureMatrix::GetCurrentBatchOffset(kaldi::OnlineFeatureMatrix *this)
{
  return *((_DWORD *)this + 38) + *((unsigned __int8 *)this + 157);
}

char *kaldi::OnlineFeatureMatrix::GetAllAedFeat(kaldi::OnlineFeatureMatrix *this)
{
  char *v1;
  _QWORD v3[34];

  v1 = (char *)this + 224;
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)this + 19, (int32x2_t *)this + 28, (int *)this + 100);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"aed features returned ", 22);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return v1;
}

void sub_1ADCBF59C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::MergeMatricesAndRemoveRows(int64x2_t *a1, int32x2_t *a2, int *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  double v23;
  uint64_t v24;
  _BYTE v26[32];
  uint64_t v27[5];

  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v6 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
  v7 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
  v8 = a1[2].u64[0];
  v9 = a1->i64[1];
  v10 = a1[1].i64[0];
  v11 = (_QWORD *)(v9 + 8 * (v8 / 0x66));
  if (v10 == v9)
    v12 = 0;
  else
    v12 = *v11 + 40 * (v8 % 0x66);
  while (1)
  {
    if (v10 == v9)
    {
      v14 = 0;
    }
    else
    {
      v13 = a1[2].i64[1] + a1[2].i64[0];
      v14 = *(_QWORD *)(v9 + 8 * (v13 / 0x66)) + 40 * (v13 % 0x66);
    }
    if (v12 == v14)
      break;
    v15 = kaldi::MatrixBase<float>::NumCols(v12);
    if ((_DWORD)v6)
      v7 = v7;
    else
      v7 = v15;
    v16 = kaldi::MatrixBase<float>::NumRows(v12);
    v12 += 40;
    if (v12 - *v11 == 4080)
    {
      v17 = v11[1];
      ++v11;
      v12 = v17;
    }
    v6 = (v16 + v6);
    v9 = a1->i64[1];
    v10 = a1[1].i64[0];
  }
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2) < 1)
    v18 = 1;
  else
    v18 = 2;
  kaldi::Matrix<float>::Resize(a2, v6, v7, v18, 0);
  while (a1[2].i64[1])
  {
    v19 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v27, (uint64_t)a2, v5, v19, 0, a2[1].i32[0]);
    kaldi::MatrixBase<float>::CopyFromMat<float>((int *)v27, (int *)(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL)), 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v27);
    v5 += kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
    std::deque<kaldi::Matrix<float>>::pop_front(a1);
  }
  if (*a3 >= 1 && (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2) >= 1)
  {
    v20 = *a3;
    if (v20 >= (int)kaldi::MatrixBase<float>::NumRows((uint64_t)a2))
    {
      *a3 -= kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
      v24 = kaldi::MatrixBase<float>::NumCols((uint64_t)a2);
      kaldi::Matrix<float>::Resize(a2, 0, v24, 0, 0);
    }
    else
    {
      v21 = *a3;
      v22 = kaldi::MatrixBase<float>::NumRows((uint64_t)a2);
      v23 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v26, (uint64_t)a2, v21, v22 - *a3, 0, a2[1].i32[0]);
      kaldi::Matrix<float>::Matrix(v27, v26, 111, v23);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v26);
      kaldi::Matrix<float>::Swap((uint64_t *)a2, v27);
      *a3 = 0;
      kaldi::Matrix<float>::~Matrix((uint64_t)v27);
    }
  }
}

void sub_1ADCBF890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

char *kaldi::OnlineFeatureMatrix::GetAllFusionFeat(kaldi::OnlineFeatureMatrix *this)
{
  char *v1;
  _QWORD v3[34];

  v1 = (char *)this + 264;
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)this + 22, (int32x2_t *)this + 33, (int *)this + 101);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"fusion features returned ", 25);
    kaldi::MatrixBase<float>::NumRows((uint64_t)v1);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v3);
  }
  return v1;
}

void sub_1ADCBF950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeatureMatrix::GetCachedAllFusionFeat(kaldi::OnlineFeatureMatrix *this)
{
  int v2;
  _QWORD v5[34];

  if (*((_QWORD *)this + 49))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return (uint64_t)this + 264;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"There are fusion features to merge.", 35);
  }
  else
  {
    v2 = kaldi::g_kaldi_verbose_level;
    if (*((int *)this + 101) < 1 || kaldi::g_kaldi_verbose_level < -1)
      goto LABEL_10;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"There are fusion features to remove.", 36);
  }
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
  v2 = kaldi::g_kaldi_verbose_level;
LABEL_10:
  if ((v2 & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"fusion features returned ", 25);
    kaldi::MatrixBase<float>::NumRows((uint64_t)this + 264);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
  return (uint64_t)this + 264;
}

void sub_1ADCBFA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineFeatureMatrix::ResetAedFeat(kaldi::OnlineFeatureMatrix *this, int a2)
{
  int *v3;
  _QWORD v4[34];

  v3 = (int *)((char *)this + 400);
  *((_DWORD *)this + 100) += a2;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"aed feature cache has been reset, aed_feat_rows_to_remove_ ", 59);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v4);
  }
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)this + 19, (int32x2_t *)this + 28, v3);
}

void sub_1ADCBFB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineFeatureMatrix::ResetFusionFeat(kaldi::OnlineFeatureMatrix *this, int a2)
{
  int v4;
  _QWORD v5[34];

  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
  *((_DWORD *)this + 101) = (int)(float)((float)*((int *)this + 101)
                                       + (float)((float)a2
                                               * (float)(v4
                                                       / (*(int (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2)))));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"fusion feature cache has been reset, fusion_feat_rows_to_remove_ ", 65);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v5);
  }
  kaldi::MergeMatricesAndRemoveRows((int64x2_t *)this + 22, (int32x2_t *)this + 33, (int *)this + 101);
}

void sub_1ADCBFBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeatureMatrix::FrameDurationMs(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 24))(*((_QWORD *)this + 2));
}

uint64_t kaldi::OnlineFeatureMatrix::FrameDurationMsForAlignment(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2));
}

uint64_t kaldi::OnlineFeatInputItf::ChunkSize(kaldi::OnlineFeatInputItf *this)
{
  return 1;
}

uint64_t kaldi::OnlineFeatInputItf::HasSilencePosterior(kaldi::OnlineFeatInputItf *this)
{
  return 0;
}

uint64_t kaldi::OnlineFeatInputItf::HasEndpointerScore(kaldi::OnlineFeatInputItf *this)
{
  return 0;
}

uint64_t kaldi::OnlineCmvnInput::Dim(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineCmvnInput::FrameDurationMs(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineCmvnInput::FrameDurationMsForAlignment(kaldi::OnlineCmvnInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineCmvnInput::~OnlineCmvnInput(kaldi::OnlineCmvnInput *this)
{
  *(_QWORD *)this = &off_1E5D2A2C8;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_1E5D2A2C8;
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  kaldi::Vector<float>::Destroy((uint64_t)this + 88);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineCacheInput::Dim(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineCacheInput::FrameDurationMs(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineCacheInput::FrameDurationMsForAlignment(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineCacheInput::HasSilencePosterior(kaldi::OnlineCacheInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void kaldi::OnlineCacheInput::~OnlineCacheInput(kaldi::OnlineCacheInput *this)
{
  kaldi::OnlineCacheInput::~OnlineCacheInput(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;

  *(_QWORD *)this = &off_1E5D2A400;
  kaldi::OnlineCacheInput::Deallocate(this);
  v2 = (void *)*((_QWORD *)this + 13);
  if (v2)
  {
    *((_QWORD *)this + 14) = v2;
    operator delete(v2);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 40));
  v3 = (void *)*((_QWORD *)this + 2);
  if (v3)
  {
    *((_QWORD *)this + 3) = v3;
    operator delete(v3);
  }
}

uint64_t kaldi::OnlineRecordedInput::Dim(kaldi::OnlineRecordedInput *this)
{
  return kaldi::MatrixBase<float>::NumCols((uint64_t)this + 16);
}

uint64_t kaldi::OnlineRecordedInput::FrameDurationMs(kaldi::OnlineRecordedInput *this)
{
  return *((unsigned int *)this + 3);
}

uint64_t kaldi::OnlineRecordedInput::FrameDurationMsForAlignment(kaldi::OnlineRecordedInput *this)
{
  return *((unsigned int *)this + 3);
}

void kaldi::OnlineRecordedInput::~OnlineRecordedInput(kaldi::OnlineRecordedInput *this)
{
  *(_QWORD *)this = &off_1E5D2A830;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E5D2A830;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineSpliceInput::Dim(kaldi::OnlineSpliceInput *this)
{
  int v2;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
  return (v2 + v2 * (*((_DWORD *)this + 5) + *((_DWORD *)this + 6)));
}

uint64_t kaldi::OnlineSpliceInput::FrameDurationMs(kaldi::OnlineSpliceInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineSpliceInput::FrameDurationMsForAlignment(kaldi::OnlineSpliceInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineSpliceInput::~OnlineSpliceInput(kaldi::OnlineSpliceInput *this)
{
  *(_QWORD *)this = &off_1E5D2A590;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_1E5D2A590;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineSpliceBatchInput::Dim(kaldi::OnlineSpliceBatchInput *this)
{
  return *((unsigned int *)this + 8);
}

uint64_t kaldi::OnlineSpliceBatchInput::FrameDurationMs(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
}

uint64_t kaldi::OnlineSpliceBatchInput::FrameDurationMsForAlignment(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 32))(*((_QWORD *)this + 3));
}

uint64_t kaldi::OnlineSpliceBatchInput::HasSilencePosterior(kaldi::OnlineSpliceBatchInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
}

void kaldi::OnlineSpliceBatchInput::~OnlineSpliceBatchInput(kaldi::OnlineSpliceBatchInput *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D2AAA8;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D2AAA8;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 48);
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineNnetForwardInput::Dim(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
}

uint64_t kaldi::OnlineNnetForwardInput::FrameDurationMs(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineNnetForwardInput::FrameDurationMsForAlignment(kaldi::OnlineNnetForwardInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineNnetForwardInput::HasSilencePosterior(kaldi::OnlineNnetForwardInput *this)
{
  uint64_t v1;
  const void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (*((_QWORD *)this + 11))
    return 1;
  v3 = (const void *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  if (!v4)
    return 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v1 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 184))(v4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v1;
}

void sub_1ADCC00B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineNnetForwardInput::~OnlineNnetForwardInput(kaldi::OnlineNnetForwardInput *this)
{
  kaldi::OnlineNnetForwardInput::~OnlineNnetForwardInput(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E5D2AA40;
  v3 = (char *)this + 24;
  v2 = *((_QWORD *)this + 3);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 248);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 200);
  v4 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 72))(v4);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 144);
  v5 = (void *)*((_QWORD *)this + 14);
  if (v5)
  {
    *((_QWORD *)this + 15) = v5;
    operator delete(v5);
  }
  v6 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v3);
}

uint64_t kaldi::OnlineAcousticEncoderInput::Dim(kaldi::quasar::CEAcousticEncoderNet **this)
{
  return kaldi::quasar::CEAcousticEncoderNet::OutputDim(this[3]);
}

uint64_t kaldi::OnlineAcousticEncoderInput::FrameDurationMs(kaldi::OnlineAcousticEncoderInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineAcousticEncoderInput::FrameDurationMsForAlignment(kaldi::OnlineAcousticEncoderInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineAcousticEncoderInput::HasSilencePosterior(kaldi::OnlineAcousticEncoderInput *this)
{
  return 0;
}

void kaldi::OnlineAcousticEncoderInput::~OnlineAcousticEncoderInput(kaldi::OnlineAcousticEncoderInput *this)
{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D2AB88;
  v3 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
}

{
  uint64_t v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D2AB88;
  v3 = (void **)((char *)this + 112);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *((_QWORD *)this + 13);
  *((_QWORD *)this + 13) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  MEMORY[0x1AF44D190](this, 0x10B3C40F537EBDBLL);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::Dim(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 40))(*((_QWORD *)this + 3));
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::FrameDurationMs(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::FrameDurationMsForAlignment(kaldi::OnlineNnetForwardSkippedInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::HasSilencePosterior(kaldi::OnlineNnetForwardSkippedInput *this)
{
  uint64_t v1;
  const void *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  if (*((_QWORD *)this + 11))
    return 1;
  v3 = (const void *)*((_QWORD *)this + 3);
  if (!v3)
    return 0;
  if (!v4)
    return 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v1 = (*(uint64_t (**)(void *))(*(_QWORD *)v4 + 184))(v4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v1;
}

void sub_1ADCC0318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::OnlineNnetForwardSkippedInput::~OnlineNnetForwardSkippedInput(kaldi::OnlineNnetForwardSkippedInput *this)
{
  kaldi::OnlineNnetForwardSkippedInput::~OnlineNnetForwardSkippedInput(this);
  JUMPOUT(0x1AF44D190);
}

{
  char *v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D2AD48;
  v2 = (char *)this + 24;
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 56))(*((_QWORD *)this + 3));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 376);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 320);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 272);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 224);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 176);
  v3 = *((_QWORD *)this + 21);
  *((_QWORD *)this + 21) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3);
  kaldi::Vector<float>::Destroy((uint64_t)this + 136);
  kaldi::Vector<float>::Destroy((uint64_t)this + 112);
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)v2);
}

uint64_t kaldi::OnlineAppendInput::Dim(kaldi::OnlineAppendInput *this)
{
  return *((_DWORD *)this + 6)
       + (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineAppendInput::FrameDurationMs(kaldi::OnlineAppendInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineAppendInput::FrameDurationMsForAlignment(kaldi::OnlineAppendInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineAppendInput::~OnlineAppendInput(kaldi::OnlineAppendInput *this)
{
  *(_QWORD *)this = &off_1E5D2A528;
  kaldi::Vector<float>::Destroy((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E5D2A528;
  kaldi::Vector<float>::Destroy((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

void kaldi::OnlineFeatureMatrix::~OnlineFeatureMatrix(kaldi::OnlineFeatureMatrix *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E5D2A7E0;
  v2 = (char *)this + 32;
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((_QWORD *)this + 44);
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((_QWORD *)this + 38);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 264);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 224);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 72);
  kaldi::Matrix<float>::~Matrix((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E5D2A7E0;
  v2 = (char *)this + 32;
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((_QWORD *)this + 44);
  std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100]((_QWORD *)this + 38);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 264);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 224);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 112);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 72);
  kaldi::Matrix<float>::~Matrix((uint64_t)v2);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineFeatureMatrix::Dim(kaldi::OnlineFeatureMatrix *this)
{
  return *((unsigned int *)this + 6);
}

uint64_t kaldi::OnlineFeatureMatrix::ChunkSize(kaldi::OnlineFeatureMatrix *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2));
}

uint64_t kaldi::OnlineSubsampleFe::FrameDurationMs(kaldi::OnlineSubsampleFe *this)
{
  return *((_DWORD *)this + 4)
       * (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineSubsampleFe::FrameDurationMsForAlignment(kaldi::OnlineSubsampleFe *this)
{
  return *((_DWORD *)this + 4)
       * (*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineSubsampleFe::~OnlineSubsampleFe(kaldi::OnlineSubsampleFe *this)
{
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineLdaInput::Dim(kaldi::OnlineLdaInput *this)
{
  return kaldi::MatrixBase<float>::NumRows((uint64_t)this + 32);
}

uint64_t kaldi::OnlineLdaInput::FrameDurationMs(kaldi::OnlineLdaInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineLdaInput::FrameDurationMsForAlignment(kaldi::OnlineLdaInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineLdaInput::~OnlineLdaInput(kaldi::OnlineLdaInput *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E5D2A1C0;
  v2 = (char *)this + 72;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)v2);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E5D2A1C0;
  v2 = (char *)this + 72;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 96);
  kaldi::Vector<float>::Destroy((uint64_t)v2);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineTransformInput::Dim(kaldi::OnlineTransformInput *this)
{
  return kaldi::MatrixBase<float>::NumRows((uint64_t)this + 24);
}

uint64_t kaldi::OnlineTransformInput::FrameDurationMs(kaldi::OnlineTransformInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineTransformInput::FrameDurationMsForAlignment(kaldi::OnlineTransformInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineTransformInput::~OnlineTransformInput(kaldi::OnlineTransformInput *this)
{
  *(_QWORD *)this = &off_1E5D2A970;
  kaldi::Vector<float>::Destroy((uint64_t)this + 64);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5D2A970;
  kaldi::Vector<float>::Destroy((uint64_t)this + 64);
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 24);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineBufferingInput::Dim(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineBufferingInput::FrameDurationMs(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineBufferingInput::FrameDurationMsForAlignment(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineBufferingInput::HasSilencePosterior(kaldi::OnlineBufferingInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1));
}

void kaldi::OnlineBufferingInput::~OnlineBufferingInput(kaldi::OnlineBufferingInput *this)
{
  *(_QWORD *)this = &off_1E5D2A908;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
}

{
  *(_QWORD *)this = &off_1E5D2A908;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlinePadInput::Dim(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 8))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlinePadInput::FrameDurationMs(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlinePadInput::FrameDurationMsForAlignment(kaldi::OnlinePadInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlinePadInput::~OnlinePadInput(kaldi::OnlinePadInput *this)
{
  *(_QWORD *)this = &off_1E5D2A228;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
}

{
  *(_QWORD *)this = &off_1E5D2A228;
  kaldi::Vector<float>::Destroy((uint64_t)this + 24);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineDeltaInput::Dim(kaldi::OnlineDeltaInput *this)
{
  return (*((_DWORD *)this + 6) + *((_DWORD *)this + 6) * *((_DWORD *)this + 4));
}

uint64_t kaldi::OnlineDeltaInput::FrameDurationMs(kaldi::OnlineDeltaInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

uint64_t kaldi::OnlineDeltaInput::FrameDurationMsForAlignment(kaldi::OnlineDeltaInput *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1));
}

void kaldi::OnlineDeltaInput::~OnlineDeltaInput(kaldi::OnlineDeltaInput *this)
{
  *(_QWORD *)this = &off_1E5D2A468;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_1E5D2A468;
  kaldi::Matrix<float>::~Matrix((uint64_t)this + 32);
  JUMPOUT(0x1AF44D190);
}

void kaldi::SpeechActivityDetector::~SpeechActivityDetector(kaldi::SpeechActivityDetector *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5CFEF58;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_1E5CFEF58;
  v2 = *((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 72))(v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::deque<kaldi::Matrix<float>>::pop_front(int64x2_t *a1)
{
  kaldi::Matrix<float>::~Matrix(*(_QWORD *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x66uLL)) + 40 * (a1[2].i64[0] % 0x66uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_1AE13F780);
  return std::deque<kaldi::Matrix<float>>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<kaldi::Matrix<float>>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x66)
    a2 = 1;
  if (v2 < 0xCC)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t std::deque<kaldi::Matrix<float>>::~deque[abi:ne180100](_QWORD *a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    v4 = a1 + 5;
    v3 = (void **)a1[1];
  }
  else
  {
    v4 = a1 + 5;
    v5 = a1[4];
    v6 = &v2[v5 / 0x66];
    v7 = (uint64_t)*v6 + 40 * (v5 % 0x66);
    v8 = (unint64_t)v2[(a1[5] + v5) / 0x66] + 40 * ((a1[5] + v5) % 0x66);
    if (v7 != v8)
    {
      do
      {
        v7 = kaldi::Matrix<float>::~Matrix(v7) + 40;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 51;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 102;
  }
  a1[4] = v12;
LABEL_16:
  while (v2 != v3)
  {
    v13 = *v2++;
    operator delete(v13);
  }
  return std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::~__split_buffer((uint64_t)a1);
}

void std::default_delete<kaldi::Resampler>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *a2;
    *a2 = 0;
    if (v3)
      std::default_delete<kaldi::LinearResample>::operator()[abi:ne180100]((uint64_t)a2, v3);
    JUMPOUT(0x1AF44D190);
  }
}

void std::default_delete<kaldi::LinearResample>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  if (a2)
  {
    kaldi::Vector<float>::Destroy(a2 + 88);
    v4 = (void **)(a2 + 48);
    std::vector<kaldi::Vector<float>>::__destroy_vector::operator()[abi:ne180100](&v4);
    v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = v3;
      operator delete(v3);
    }
    MEMORY[0x1AF44D190](a2, 0x10B0C40587FD9DDLL);
  }
}

kaldi::OnlineSpliceBatchInput *kaldi::OnlineSpliceBatchInput::OnlineSpliceBatchInput(kaldi::OnlineSpliceBatchInput *this, kaldi::OnlineFeatInputItf *a2, int a3, int a4)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;

  *(_QWORD *)this = &off_1E5D2AAA8;
  *((_QWORD *)this + 1) = 0;
  v7 = (uint64_t *)((char *)this + 8);
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = a2;
  *((_DWORD *)this + 8) = (*(uint64_t (**)(kaldi::OnlineFeatInputItf *))(*(_QWORD *)a2 + 8))(a2);
  *((_DWORD *)this + 9) = a3;
  *((_DWORD *)this + 10) = a4;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 48);
  if (*((int *)this + 10) >= 1)
  {
    v8 = operator new();
    kaldi::OnlinePadInput::OnlinePadInput(v8, *((kaldi::OnlineFeatInputItf **)this + 3), *((_DWORD *)this + 10));
    v9 = *v7;
    *v7 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 72))(v9);
      v8 = *v7;
    }
    *((_QWORD *)this + 3) = v8;
  }
  v10 = operator new();
  v11 = *((_QWORD *)this + 3);
  *(_QWORD *)v10 = &off_1E5D2A908;
  *(_QWORD *)(v10 + 8) = v11;
  v12 = kaldi::Matrix<float>::Matrix(v10 + 16);
  *(_DWORD *)(v10 + 56) = 0;
  *(_WORD *)(v10 + 60) = 257;
  v13 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = v10;
  if (v13)
  {
    (*(void (**)(uint64_t, double))(*(_QWORD *)v13 + 72))(v13, v12);
    v10 = *((_QWORD *)this + 2);
  }
  *((_QWORD *)this + 3) = v10;
  return this;
}

void sub_1ADCC0F50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v3;
  MEMORY[0x1AF44D190](v5, 0x10A1C405FCE00B7);
  kaldi::Matrix<float>::~Matrix(v2);
  v7 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  v8 = *v4;
  *v4 = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::Matrix<float>,std::allocator<kaldi::Matrix<float>>,int &,int,kaldi::MatrixResizeType,void>@<X0>(unsigned int *a1@<X1>, unsigned int *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<kaldi::Matrix<float>>::__shared_ptr_emplace[abi:ne180100]<int &,int,kaldi::MatrixResizeType,std::allocator<kaldi::Matrix<float>>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADCC1038(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::Matrix<float>>::__shared_ptr_emplace[abi:ne180100]<int &,int,kaldi::MatrixResizeType,std::allocator<kaldi::Matrix<float>>,0>(_QWORD *a1, unsigned int *a2, unsigned int *a3, int *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41CD8;
  a1[1] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(a1 + 3), *a2, *a3, *a4, 0);
  return a1;
}

void sub_1ADCC1094(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<kaldi::CuMatrix<float>>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v4 = a1[1];
  v5 = a1[2];
  v6 = 85 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4)
    v6 = 0;
  if (v6 == a1[5] + a1[4])
  {
    std::deque<kaldi::CuMatrix<float>>::__add_back_capacity(a1);
    v4 = a1[1];
    v5 = a1[2];
  }
  if (v5 == v4)
  {
    v8 = 0;
  }
  else
  {
    v7 = a1[5] + a1[4];
    v8 = *(_QWORD *)(v4 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  }
  result = kaldi::CuMatrix<float>::CuMatrix(v8, a2, 111);
  ++a1[5];
  return result;
}

void std::deque<kaldi::CuMatrix<float>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADCC1420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<kaldi::Matrix<float>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADCC1734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::OnlineKeywordSpottingDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  void (***v4)(_QWORD);
  void (***v5)(_QWORD);
  void (***v6)(_QWORD);
  void (***v7)(_QWORD);
  void (**v8)(_QWORD);
  BOOL v9;

  v3 = quasar::Decoder::Decoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3A1C0;
  *(_QWORD *)(v3 + 640) = 0;
  *(_QWORD *)(v3 + 656) = 0;
  *(_QWORD *)(v3 + 648) = 0;
  *(_QWORD *)(v3 + 696) = 0;
  *(_QWORD *)(v3 + 712) = 0;
  *(_QWORD *)(v3 + 704) = 0;
  *(_OWORD *)(v3 + 448) = 0u;
  *(_OWORD *)(v3 + 464) = 0u;
  *(_OWORD *)(v3 + 480) = 0u;
  *(_OWORD *)(v3 + 496) = 0u;
  *(_OWORD *)(v3 + 512) = 0u;
  *(_OWORD *)(v3 + 528) = 0u;
  *(_OWORD *)(v3 + 544) = 0u;
  *(_OWORD *)(v3 + 560) = 0u;
  *(_OWORD *)(v3 + 576) = 0u;
  *(_OWORD *)(v3 + 592) = 0u;
  *(_QWORD *)(v3 + 608) = 0x41200000C1200000;
  *(_DWORD *)(v3 + 616) = 0;
  MEMORY[0x1AF44C914](v3 + 584, "<blk>");
  *(_QWORD *)(a1 + 620) = 0;
  v4 = *(void (****)(_QWORD))(a1 + 648);
  v5 = *(void (****)(_QWORD))(a1 + 640);
  if (v4 != v5)
  {
    v6 = v4 - 27;
    v7 = v4 - 27;
    do
    {
      v8 = *v7;
      v7 -= 27;
      (*v8)(v6);
      v9 = v6 == v5;
      v6 = v7;
    }
    while (!v9);
  }
  *(_QWORD *)(a1 + 648) = v5;
  *(_QWORD *)(a1 + 664) = 0;
  *(_QWORD *)(a1 + 628) = 0x1B00000000;
  *(_WORD *)(a1 + 636) = 1;
  *(_BYTE *)(a1 + 638) = 0;
  *(_BYTE *)(a1 + 57) = 0;
  *(_BYTE *)(a1 + 688) = 0;
  *(_DWORD *)(a1 + 692) = 1;
  return a1;
}

void sub_1ADCC18B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  void **v15;

  v15 = v12;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v15;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 607) < 0)
    operator delete(*v13);
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v11);
  if (*(char *)(v10 + 495) < 0)
    operator delete(*(void **)(v10 + 472));
  if (*(char *)(v10 + 471) < 0)
    operator delete(*v14);
  quasar::Decoder::~Decoder((void **)v10);
  _Unwind_Resume(a1);
}

void quasar::OnlineKeywordSpottingDecoder::~OnlineKeywordSpottingDecoder(void **this)
{
  void **v2;

  *this = &off_1E5D3A1C0;
  v2 = this + 87;
  std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 80;
  std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 607) < 0)
    operator delete(this[73]);
  v2 = this + 70;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 67;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = this + 64;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 62));
  if (*((char *)this + 495) < 0)
    operator delete(this[59]);
  if (*((char *)this + 471) < 0)
    operator delete(this[56]);
  quasar::Decoder::~Decoder(this);
}

{
  quasar::OnlineKeywordSpottingDecoder::~OnlineKeywordSpottingDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineKeywordSpottingDecoder::registerParams(quasar::OnlineKeywordSpottingDecoder *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-spotting");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 42, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "threshold");
  std::string::basic_string[abi:ne180100]<0>(v4, "The threshold for the keyword score");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 608, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "frame-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "frame offset");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 616, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "apply viterbi for keyword detection");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 636, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "tokens-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "symbole table file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 448, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-list-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "list of keywords and their corresponding tokens sequence");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)this + 472, (uint64_t)v4, 1, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Number of frames that get decoded in one go");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 632, (uint64_t)v4, 0, 42, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-batch-reset");
  std::string::basic_string[abi:ne180100]<0>(v4, "Reset scores after each batch result");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 637, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-top-result-only");
  std::string::basic_string[abi:ne180100]<0>(v4, "Only return the best keyword score");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 638, (uint64_t)v4, 0, 89, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "do-moving-avg");
  std::string::basic_string[abi:ne180100]<0>(v4, "Performs a moving average of the scores");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 688, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "moving-avg-window-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Set the window size for the moving average");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 692, (uint64_t)v4, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1ADCC1EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::finishInit(quasar::OnlineKeywordSpottingDecoder *this)
{
  _QWORD *Text;
  _QWORD *v3;
  std::locale::__imp *locale;
  unint64_t *v5;
  unint64_t v6;
  std::locale::id *v7;
  const std::locale::facet *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 v19;
  _QWORD *v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD *v23;
  std::string *p_p;
  std::string::size_type size;
  __int128 *v26;
  int *v27;
  std::string::size_type v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  int v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  std::string v47;
  uint64_t v48;
  int v49;
  void *v50[3];
  std::string v51;
  std::locale v52[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  std::string __p;
  void *v70[2];
  uint64_t v71;
  std::fstream v72;
  _QWORD v73[21];

  v73[19] = *MEMORY[0x1E0C80C00];
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&v72);
  Text = fst::SymbolTable::ReadText((uint64_t)this + 448);
  std::shared_ptr<fst::SymbolTable>::shared_ptr[abi:ne180100]<fst::SymbolTable,void>(v52, (uint64_t)Text);
  v3 = (_QWORD *)((char *)this + 496);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 496, (__int128 *)v52);
  locale = v52[1].__locale_;
  if (v52[1].__locale_)
  {
    v5 = (unint64_t *)((char *)v52[1].__locale_ + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    }
  }
  if (v72.__sb_.__extbuf_min_[7] < 0)
    operator delete((void *)v72.__sb_.__extbufnext_);
  std::fstream::basic_fstream(&v72, (const std::string *)((char *)this + 472), 8u);
  v70[0] = 0;
  v70[1] = 0;
  v71 = 0;
  v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)&v72 + *((_QWORD *)v72.__sb_.__extbuf_ - 3)));
    v8 = std::locale::use_facet(v52, v7);
    v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(v52);
    v10 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v72, (uint64_t)v70, v9);
    if ((*((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) != 0)
      break;
    v52[0].__locale_ = 0;
    v52[1].__locale_ = 0;
    *(_QWORD *)&v53 = 0;
    std::string::basic_string[abi:ne180100]<0>(&__p, " ");
    quasar::splitStringSimple((uint64_t)v70, (uint64_t *)&__p, (uint64_t *)&v47);
    std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)v52);
    *(_OWORD *)&v52[0].__locale_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    *(_QWORD *)&v53 = *((_QWORD *)&v47.__r_.__value_.__l + 2);
    memset(&v47, 0, sizeof(v47));
    v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v11 = *((_QWORD *)this + 65);
    if (v11 >= *((_QWORD *)this + 66))
    {
      v12 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)this + 64, (__int128 **)v52);
    }
    else
    {
      std::vector<std::vector<std::string>>::__construct_one_at_end[abi:ne180100]<std::vector<std::string> const&>((uint64_t)this + 512, (__int128 **)v52);
      v12 = v11 + 24;
    }
    *((_QWORD *)this + 65) = v12;
    v47.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v47);
  }
  *((_QWORD *)this + 84) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 112))(*v3);
  v13 = &quasar::gLogLevel;
  if (quasar::gLogLevel >= 5)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)&v52[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Number of labels: ", 18);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v52);
  }
  v14 = (*(uint64_t (**)(_QWORD, char *))(**((_QWORD **)this + 62) + 96))(*((_QWORD *)this + 62), (char *)this + 584);
  *((_QWORD *)this + 85) = v14;
  if (v14 == -1)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)&v52[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Blank label \"", 13);
    v43 = *((char *)this + 607);
    if (v43 >= 0)
      v44 = (char *)this + 584;
    else
      v44 = (char *)*((_QWORD *)this + 73);
    if (v43 >= 0)
      v45 = *((unsigned __int8 *)this + 607);
    else
      v45 = *((_QWORD *)this + 74);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)v44, v45);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"\" not found in symbol table.", 28);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v52);
  }
  if (quasar::gLogLevel >= 5)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)&v52[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Blank label index: ", 19);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v52);
  }
  v15 = *((_QWORD *)this + 64);
  if (*((_QWORD *)this + 65) != v15)
  {
    v16 = 0;
    v17 = &v53;
    do
    {
      v18 = *(__int128 **)(v15 + 24 * v16);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 24 * v16 + 8) - (_QWORD)v18) >> 3) > 1)
      {
        if (*((char *)v18 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((_QWORD *)v18 + 1));
          v15 = *((_QWORD *)this + 64);
        }
        else
        {
          v19 = *v18;
          __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v18 + 2);
          *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
        }
        v20 = (_QWORD *)(v15 + 24 * v16);
        v21 = (__int128 *)v20[1];
        v22 = (__int128 *)(*v20 + 24);
        memset(&v51, 0, sizeof(v51));
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v51, v22, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)v22) >> 3));
        std::vector<long long>::vector(v50, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3));
        if (*v13 >= 5)
        {
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          v57 = 0u;
          v58 = 0u;
          v55 = 0u;
          v56 = 0u;
          v53 = 0u;
          v54 = 0u;
          *(_OWORD *)&v52[0].__locale_ = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
          v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Adding keyword: ", 16);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)p_p, size);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v52);
        }
        v26 = v17;
        v27 = v13;
        v28 = v51.__r_.__value_.__r.__words[0];
        if (v51.__r_.__value_.__l.__size_ != v51.__r_.__value_.__r.__words[0])
        {
          v29 = 0;
          v30 = 0;
          do
          {
            v31 = (*(uint64_t (**)(_QWORD, std::string::size_type))(*(_QWORD *)*v3 + 96))(*v3, v28 + v29);
            *((_QWORD *)v50[0] + v30) = v31;
            if (v31 == -1)
            {
              v67 = 0u;
              v68 = 0u;
              v65 = 0u;
              v66 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              *(_OWORD *)&v52[0].__locale_ = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
              v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Symbol \"", 8);
              v38 = *(char *)(v51.__r_.__value_.__r.__words[0] + v29 + 23);
              if (v38 >= 0)
                v39 = v51.__r_.__value_.__r.__words[0] + v29;
              else
                v39 = *(_QWORD *)(v51.__r_.__value_.__r.__words[0] + v29);
              if (v38 >= 0)
                v40 = *(unsigned __int8 *)(v51.__r_.__value_.__r.__words[0] + v29 + 23);
              else
                v40 = *(_QWORD *)(v51.__r_.__value_.__r.__words[0] + v29 + 8);
              v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v39, v40);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"\" not found in symbol table.", 28);
              quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v52);
            }
            ++v30;
            v28 = v51.__r_.__value_.__r.__words[0];
            v29 += 24;
          }
          while (v30 < 0xAAAAAAAAAAAAAAABLL
                      * ((uint64_t)(v51.__r_.__value_.__l.__size_ - v51.__r_.__value_.__r.__words[0]) >> 3));
        }
        quasar::AMKeywordDetection::AMKeywordDetection(v52, &__p, v50, *((unsigned __int8 *)this + 636));
        v32 = *((_QWORD *)this + 81);
        if (v32 >= *((_QWORD *)this + 82))
        {
          v33 = std::vector<quasar::AMKeywordDetection>::__push_back_slow_path<quasar::AMKeywordDetection>((uint64_t *)this + 80, (const quasar::AMKeywordDetection *)v52);
        }
        else
        {
          quasar::AMKeywordDetection::AMKeywordDetection(*((quasar::AMKeywordDetection **)this + 81), (const quasar::AMKeywordDetection *)v52);
          v33 = v32 + 216;
          *((_QWORD *)this + 81) = v32 + 216;
        }
        v13 = v27;
        *((_QWORD *)this + 81) = v33;
        quasar::AMKeywordDetection::~AMKeywordDetection((quasar::AMKeywordDetection *)v52);
        v17 = v26;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v47, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        else
          v47 = __p;
        v49 = -8388609;
        *(_OWORD *)&v52[0].__locale_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
        v53 = v47.__r_.__value_.__r.__words[2];
        memset(&v47, 0, sizeof(v47));
        v48 = 0;
        *(_QWORD *)&v54 = 0;
        DWORD2(v54) = -8388609;
        std::vector<std::tuple<std::string,long long,long long,float>>::push_back[abi:ne180100]((uint64_t *)this + 70, (__int128 *)v52);
        if (SBYTE7(v53) < 0)
          operator delete(v52[0].__locale_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        ++*((_QWORD *)this + 83);
        if (*((_BYTE *)this + 688))
        {
          v54 = 0u;
          v55 = 0u;
          *(_OWORD *)&v52[0].__locale_ = 0u;
          v53 = 0u;
          v34 = *((_QWORD *)this + 88);
          if (v34 >= *((_QWORD *)this + 89))
          {
            v35 = std::vector<quasar::MovingAverage>::__push_back_slow_path<quasar::MovingAverage>((uint64_t *)this + 87, (uint64_t)v52);
          }
          else
          {
            *(_DWORD *)(v34 + 8) = 0;
            *(_QWORD *)v34 = 0;
            *(_OWORD *)(v34 + 16) = v53;
            *(_OWORD *)(v34 + 32) = v54;
            *v26 = 0uLL;
            v26[1] = 0uLL;
            *(_OWORD *)(v34 + 48) = v55;
            v55 = 0uLL;
            v35 = v34 + 64;
          }
          *((_QWORD *)this + 88) = v35;
          std::deque<int>::~deque[abi:ne180100](v26);
          quasar::MovingAverage::init((quasar::MovingAverage *)(*((_QWORD *)this + 88) - 64), *((int *)this + 173));
        }
        if (v50[0])
        {
          v50[1] = v50[0];
          operator delete(v50[0]);
        }
        v52[0].__locale_ = (std::locale::__imp *)&v51;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v52);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (*v13 >= 4)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        *(_OWORD *)&v52[0].__locale_ = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Invalid keyword-phrase line", 27);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
      }
      ++v16;
      v15 = *((_QWORD *)this + 64);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 65) - v15) >> 3) > v16);
  }
  if (*v13 > 4)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)&v52[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Number of keywords: ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v52);
  }
  if (*((_BYTE *)this + 688))
  {
    if (*((_BYTE *)this + 636))
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)&v52[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Error: Both, Viterbi and moving average decoding enabled, select only one", 73);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v52);
    }
    if (*v13 >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)&v52[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"Moving average window size: ", 28);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v52);
    }
  }
  if (SHIBYTE(v71) < 0)
    operator delete(v70[0]);
  MEMORY[0x1AF44CA70](v72.__sb_.__extbuf_min_);
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](v73);
}

void sub_1ADCC2A10(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCC2A70);
}

void sub_1ADCC2A20(_Unwind_Exception *a1)
{
  void *v2;
  uint64_t v3;
  _QWORD v4[36];
  char v5;
  void *v6;
  char v7;
  uint64_t v8;

  if (v2)
    operator delete(v2);
  v4[0] = &v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v4);
  if (v5 < 0)
    operator delete((void *)v4[34]);
  if (v7 < 0)
    operator delete(v6);
  std::fstream::~fstream(&v8);
  _Unwind_Resume(a1);
}

std::fstream *__cdecl std::fstream::basic_fstream(std::fstream *this, const std::string *__s, std::ios_base::openmode __mode)
{
  char *extbuf_min;

  extbuf_min = this->__sb_.__extbuf_min_;
  *(&this[1].__sb_.__st_._mbstateL + 2) = (uint64_t)&unk_1E5D05910;
  this->__sb_.__extbuf_ = (char *)&unk_1E5D058E8;
  this->__sb_.__extbufnext_ = 0;
  std::ios_base::init((std::ios_base *)(&this[1].__sb_.__st_._mbstateL + 2), this->__sb_.__extbuf_min_);
  *(&this[1].__sb_.__st_last_._mbstateL + 3) = 0;
  *((_DWORD *)&this[1].__sb_.__st_last_._mbstateL + 8) = -1;
  MEMORY[0x1AF44CA64](extbuf_min);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)this + *((_QWORD *)this->__sb_.__extbuf_ - 3)), *(_DWORD *)&this->__sb_.__extbuf_min_[*((_QWORD *)this->__sb_.__extbuf_ - 3) + 8] | 4);
  return this;
}

void sub_1ADCC2B54(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::tuple<std::string,long long,long long,float>>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 4);
    v11 = v10 + 1;
    if (v10 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x2AAAAAAAAAAAAAALL)
      v13 = 0x555555555555555;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[48 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[48 * v13];
    v16 = *a2;
    *((_QWORD *)v15 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v15 = v16;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)v15 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)v15 + 4) = *((_QWORD *)a2 + 4);
    *((_DWORD *)v15 + 10) = *((_DWORD *)a2 + 10);
    v17[2] = v15 + 48;
    std::vector<std::tuple<std::string,long long,long long,float>>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(v7 + 24) = *((_QWORD *)a2 + 3);
    *(_QWORD *)(v7 + 32) = *((_QWORD *)a2 + 4);
    *(_DWORD *)(v7 + 40) = *((_DWORD *)a2 + 10);
    v9 = v7 + 48;
    a1[1] = v7 + 48;
  }
  a1[1] = v9;
  return result;
}

void sub_1ADCC2CE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this)))(std::fstream *__hidden this)
{
  _QWORD *v2;

  v2 = a1 + 54;
  MEMORY[0x1AF44CA70](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v2);
  return a1;
}

BOOL quasar::tupleCompare(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 40) > *(float *)(a2 + 40);
}

void quasar::OnlineKeywordSpottingDecoder::updateBestScores(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t i;
  const std::string *v6;
  uint64_t v7;
  uint64_t v8;
  std::string::size_type size;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  const std::string *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD v25[18];

  v2 = *a2;
  if (a2[1] != *a2)
  {
    for (i = 0; 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4) > i; ++i)
    {
      v6 = (const std::string *)(v2 + 48 * i);
      v7 = *(_QWORD *)(a1 + 560) + 48 * i;
      v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      if ((v8 & 0x80u) == 0)
        size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
      else
        size = v6->__r_.__value_.__l.__size_;
      v10 = *(unsigned __int8 *)(v7 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(v7 + 8);
      if (size != v10)
        goto LABEL_19;
      if (v11 >= 0)
        v12 = (unsigned __int8 *)(*(_QWORD *)(a1 + 560) + 48 * i);
      else
        v12 = *(unsigned __int8 **)v7;
      if ((v8 & 0x80) != 0)
      {
        if (memcmp(v6->__r_.__value_.__l.__data_, v12, v6->__r_.__value_.__l.__size_))
          goto LABEL_19;
      }
      else if (*((_BYTE *)&v6->__r_.__value_.__s + 23))
      {
        v13 = v6;
        while (v13->__r_.__value_.__s.__data_[0] == *v12)
        {
          v13 = (const std::string *)((char *)v13 + 1);
          ++v12;
          if (!--v8)
            goto LABEL_33;
        }
LABEL_19:
        if (quasar::gLogLevel >= 4)
        {
          memset(v25, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
          v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"keyword mismatch ", 17);
          v15 = *a2 + 48 * i;
          v16 = *(char *)(v15 + 23);
          if (v16 >= 0)
            v17 = *a2 + 48 * i;
          else
            v17 = *(_QWORD *)v15;
          if (v16 >= 0)
            v18 = *(unsigned __int8 *)(v15 + 23);
          else
            v18 = *(_QWORD *)(v15 + 8);
          v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v17, v18);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" != ", 4);
          v21 = *(_QWORD *)(a1 + 560) + 48 * i;
          v22 = *(char *)(v21 + 23);
          if (v22 >= 0)
            v23 = *(_QWORD *)(a1 + 560) + 48 * i;
          else
            v23 = *(_QWORD *)v21;
          if (v22 >= 0)
            v24 = *(unsigned __int8 *)(v21 + 23);
          else
            v24 = *(_QWORD *)(v21 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, v23, v24);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v25);
        }
        goto LABEL_35;
      }
LABEL_33:
      if (*(float *)&v6[1].__r_.__value_.__r.__words[2] > *(float *)(v7 + 40))
      {
        std::string::operator=((std::string *)v7, v6);
        *(_QWORD *)(v7 + 24) = v6[1].__r_.__value_.__l.__data_;
        *(_QWORD *)(v7 + 32) = v6[1].__r_.__value_.__l.__size_;
        *(_DWORD *)(v7 + 40) = v6[1].__r_.__value_.__r.__words[2];
      }
LABEL_35:
      v2 = *a2;
    }
  }
}

void sub_1ADCC2F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::OnlineKeywordSpottingDecoder::writePerBatchResults(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  __n128 v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type size;
  std::string::size_type v12;
  __int128 v13;
  int v14;
  int v15;
  float v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  __int128 *v25[3];
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  std::string v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t (*v34[3])(__int128 *, __int128 *);
  std::string v35;
  char **v36;
  char v37;
  std::string v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  memset(&v35, 0, sizeof(v35));
  std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(&v35, *(__int128 **)(a1 + 560), *(__int128 **)(a1 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 568) - *(_QWORD *)(a1 + 560)) >> 4));
  v9 = 126
     - 2
     * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 4));
  v34[0] = (uint64_t (*)(__int128 *, __int128 *))quasar::tupleCompare;
  if (v35.__r_.__value_.__l.__size_ == v35.__r_.__value_.__r.__words[0])
    v10 = 0;
  else
    v10 = v9;
  std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>((uint64_t)v35.__r_.__value_.__l.__data_, (__int128 *)v35.__r_.__value_.__l.__size_, v34, v10, 1, v8);
  v22 = a3;
  v21 = a4;
  memset(v34, 0, sizeof(v34));
  std::vector<std::vector<quasar::Token>>::reserve((uint64_t *)v34, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v35.__r_.__value_.__l.__size_ - v35.__r_.__value_.__r.__words[0]) >> 4));
  size = v35.__r_.__value_.__l.__size_;
  if (v35.__r_.__value_.__r.__words[0] != v35.__r_.__value_.__l.__size_)
  {
    v12 = v35.__r_.__value_.__r.__words[0] + 48;
    do
    {
      if (*(char *)(v12 - 25) < 0)
      {
        std::string::__init_copy_ctor_external(&v30, *(const std::string::value_type **)(v12 - 48), *(_QWORD *)(v12 - 40));
      }
      else
      {
        v13 = *(_OWORD *)(v12 - 48);
        v30.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 - 32);
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v13;
      }
      v14 = *(_DWORD *)(v12 - 24);
      v15 = *(_DWORD *)(v12 - 16);
      v16 = *(float *)(v12 - 8);
      std::string::basic_string[abi:ne180100]<0>(&v28, "");
      std::string::basic_string[abi:ne180100]<0>(&v26, "");
      memset(v25, 0, sizeof(v25));
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::Token::Token(&v38, (__int128 *)&v30, v14, v15, v15, 0, 0, &v28, v16, &v26, v25, 0, (__int128 *)__p, 0, 0);
      v31 = 0;
      v32 = 0;
      v33 = 0;
      v36 = &v31;
      v37 = 0;
      v31 = (char *)operator new(0xE0uLL);
      v32 = (uint64_t)v31;
      v33 = v31 + 224;
      v32 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Token>,quasar::Token const*,quasar::Token const*,quasar::Token*>((uint64_t)&v33, (uint64_t)&v38, (uint64_t)&v40, (uint64_t)v31);
      std::vector<std::vector<quasar::Token>>::push_back[abi:ne180100]((uint64_t *)v34, (uint64_t)&v31);
      v36 = &v31;
      std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
      quasar::Token::~Token((void **)&v38.__r_.__value_.__l.__data_);
      if (v24 < 0)
        operator delete(__p[0]);
      __p[0] = v25;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SHIBYTE(v27) < 0)
        operator delete((void *)v26);
      if (SHIBYTE(v29) < 0)
        operator delete((void *)v28);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      if (*(_BYTE *)(a1 + 638))
        break;
      v17 = v12 == size;
      v12 += 48;
    }
    while (!v17);
  }
  v18 = *(_QWORD *)(*(_QWORD *)a2 + 560);
  v32 = 0;
  v33 = 0;
  v31 = 0;
  v19 = *(unsigned int *)(*(_QWORD *)v22 + 12);
  v28 = 0uLL;
  v29 = 0;
  v26 = 0uLL;
  v27 = 0;
  v38.__r_.__value_.__s.__data_[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(&v38.__r_.__value_.__l.__size_, "▁");
  LOWORD(v20) = 0;
  (*(void (**)(uint64_t, char **, uint64_t, uint64_t, _QWORD, _QWORD, uint64_t (**)(__int128 *, __int128 *), __int128 *, __int128 *, int, std::string *))(*(_QWORD *)v18 + 24))(v18, &v31, v19, 1, v21, 0, v34, &v28, &v26, v20, &v38);
  if (v39 < 0)
    operator delete((void *)v38.__r_.__value_.__l.__size_);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v35;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
}

void sub_1ADCC3320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,char a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char *a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a61 < 0)
    operator delete(__p);
  a55 = (char *)&a26;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = (char *)&a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a47;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  a55 = &a50;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a55);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::runImpl(uint64_t a1, kaldi::OnlineFeatureMatrix **a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t i;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  quasar::AMKeywordDetection *v11;
  quasar::AMKeywordDetection *v12;
  quasar::MovingAverage *v13;
  quasar::MovingAverage *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  void *v20;
  int v21;
  signed int j;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int v34;
  int32x2_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  int v46;
  quasar::MovingAverage *v47;
  __int128 *v48;
  float v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  float Average;
  __int128 v54;
  float v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  quasar::AMKeywordDetection *v59;
  quasar::AMKeywordDetection *v60;
  float Score;
  float BestStartFrame;
  uint64_t v63;
  float v64;
  float v65;
  float v66;
  float v67;
  std::string::size_type v68;
  char v69;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type size;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  const std::locale::facet *v77;
  uint64_t v78;
  uint64_t k;
  uint64_t v80;
  __n128 v81;
  unint64_t v82;
  uint64_t v83;
  std::string::size_type m;
  std::string::size_type v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  int v89;
  int v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  double v94;
  double *v95;
  double *v96;
  double *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  double *v103;
  uint64_t v104;
  _QWORD *v105;
  std::string::size_type v106;
  int v107;
  int v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t **v113;
  uint64_t v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t started;
  std::__shared_weak_count *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  const std::locale::facet *v124;
  _QWORD *v125;
  const std::locale::facet *v126;
  _QWORD *v127;
  _QWORD *v128;
  const std::locale::facet *v129;
  unint64_t *v130;
  unint64_t v131;
  int v134;
  int v135;
  uint64_t v136;
  int32x2_t *v137;
  kaldi::OnlineFeatureMatrix *v138;
  int v139;
  uint64_t v140;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  void *__p[2];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  _BYTE v164[32];
  __int128 v165;
  void *v166[2];
  __int128 v167;
  __int128 v168;
  void *v169[2];
  __int128 v170;
  __int128 v171;
  void *v172[2];
  __int128 v173;
  void *v174[2];
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  void *v180[2];
  char v181;
  __int128 *v182[3];
  std::locale v183[2];
  char v184;
  std::string v185;
  std::string v186;
  double *v187;
  double *v188;
  double *v189;
  std::string v190;
  _QWORD *v191;
  _QWORD *v192;
  uint64_t v193;
  kaldi::OnlineFeatureMatrix *v194;
  std::__shared_weak_count *v195;
  __int128 v196;
  unint64_t v197;
  uint64_t v198;

  v198 = *MEMORY[0x1E0C80C00];
  v137 = (int32x2_t *)(a1 + 620);
  *(_QWORD *)(a1 + 620) = 0;
  *(_DWORD *)(a1 + 628) = 0;
  v6 = *(_QWORD *)(a1 + 560);
  for (i = *(_QWORD *)(a1 + 568); v6 != i; v6 += 48)
  {
    *(_QWORD *)(v6 + 24) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_DWORD *)(v6 + 40) = -8388609;
  }
  v8 = (std::__shared_weak_count *)a2[1];
  v138 = *a2;
  v194 = *a2;
  v195 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (v138)
  {
    v191 = 0;
    v192 = 0;
    v193 = 0;
    if (!*(_QWORD *)(a1 + 664))
    {
      if (quasar::gLogLevel >= 2)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        *(_OWORD *)v174 = 0u;
        v175 = 0u;
        *(_OWORD *)v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        *(_OWORD *)v169 = 0u;
        *(_OWORD *)v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        memset(v164, 0, sizeof(v164));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"No keywords found.", 18);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v164);
      }
LABEL_172:
      v80 = 2;
LABEL_180:
      *(_QWORD *)v164 = &v191;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
      v8 = v195;
      if (!v195)
        return v80;
      goto LABEL_181;
    }
    v11 = *(quasar::AMKeywordDetection **)(a1 + 640);
    v12 = *(quasar::AMKeywordDetection **)(a1 + 648);
    while (v11 != v12)
    {
      quasar::AMKeywordDetection::init(v11);
      v11 = (quasar::AMKeywordDetection *)((char *)v11 + 216);
    }
    v13 = *(quasar::MovingAverage **)(a1 + 696);
    v14 = *(quasar::MovingAverage **)(a1 + 704);
    while (v13 != v14)
    {
      quasar::MovingAverage::init(v13, *(int *)(a1 + 692));
      v13 = (quasar::MovingAverage *)((char *)v13 + 64);
    }
    v15 = a1;
    *(float *)(a1 + 612) = (float)(*(int (**)(_QWORD))(**((_QWORD **)*a2 + 2) + 24))(*((_QWORD *)*a2 + 2));
    if (quasar::gLogLevel >= 5)
    {
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v174 = 0u;
      v175 = 0u;
      *(_OWORD *)v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      *(_OWORD *)v169 = 0u;
      *(_OWORD *)v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      memset(v164, 0, sizeof(v164));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Start of batches", 16);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v164);
    }
    v139 = 0;
    v140 = a4;
    while (kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v138, v137->i32[0] + 1, 1))
    {
      v17 = v191;
      v16 = v192;
      if (v192 != v191)
      {
        v18 = v192;
        do
        {
          v20 = (void *)*(v18 - 3);
          v18 -= 3;
          v19 = v20;
          if (v20)
          {
            *(v16 - 2) = v19;
            operator delete(v19);
          }
          v16 = v18;
        }
        while (v18 != v17);
      }
      v21 = 0;
      v192 = v17;
      for (j = v137->i32[0];
            kaldi::OnlineFeatureMatrix::IsValidFrame((int32x2_t *)v138, j, 1) && v21 < *(_DWORD *)(v15 + 632);
            j = v35.i32[0])
      {
        kaldi::OnlineFeatureMatrix::GetFrame(v138, v137->i32[0], (uint64_t *)v164);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v146 = 0;
        if (*(int *)&v164[8] >= 1)
        {
          v23 = 0;
          v24 = 0;
          do
          {
            v25 = *(_QWORD *)v164;
            if ((unint64_t)v23 >= (unint64_t)v146)
            {
              v27 = (char *)__p[0];
              v28 = (v23 - (char *)__p[0]) >> 2;
              v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v30 = v146 - (unint64_t)__p[0];
              if ((uint64_t)(v146 - (unint64_t)__p[0]) >> 1 > v29)
                v29 = v30 >> 1;
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
                v31 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v31 = v29;
              if (v31)
              {
                v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v146, v31);
                v27 = (char *)__p[0];
                v23 = (char *)__p[1];
              }
              else
              {
                v32 = 0;
              }
              v33 = &v32[4 * v28];
              *(_DWORD *)v33 = *(_DWORD *)(v25 + 4 * v24);
              v26 = v33 + 4;
              while (v23 != v27)
              {
                v34 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              __p[0] = v33;
              __p[1] = v26;
              *(_QWORD *)&v146 = &v32[4 * v31];
              if (v27)
                operator delete(v27);
            }
            else
            {
              *(_DWORD *)v23 = *(_DWORD *)(*(_QWORD *)v164 + 4 * v24);
              v26 = v23 + 4;
            }
            __p[1] = v26;
            ++v24;
            v23 = (char *)v26;
          }
          while (v24 < *(int *)&v164[8]);
        }
        std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)&v191, (uint64_t)__p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v35 = vadd_s32(*v137, (int32x2_t)0x100000001);
        *v137 = v35;
        ++v21;
      }
      ++*(_DWORD *)(v15 + 628);
      v36 = (char *)v192 - (char *)v191;
      if (v192 == v191)
      {
        if (quasar::gLogLevel >= 1)
        {
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          *(_OWORD *)v174 = 0u;
          v175 = 0u;
          *(_OWORD *)v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          *(_OWORD *)v169 = 0u;
          *(_OWORD *)v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          memset(v164, 0, sizeof(v164));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"empty posterior matrix", 22);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v164);
        }
        goto LABEL_172;
      }
      if (*(_QWORD *)(v15 + 672) != (uint64_t)(v191[1] - *v191) >> 2)
      {
        if (quasar::gLogLevel >= 1)
        {
          v178 = 0u;
          v179 = 0u;
          v176 = 0u;
          v177 = 0u;
          *(_OWORD *)v174 = 0u;
          v175 = 0u;
          *(_OWORD *)v172 = 0u;
          v173 = 0u;
          v170 = 0u;
          v171 = 0u;
          v168 = 0u;
          *(_OWORD *)v169 = 0u;
          *(_OWORD *)v166 = 0u;
          v167 = 0u;
          v165 = 0u;
          memset(v164, 0, sizeof(v164));
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"unmatched  posterior matrix dimension and number of symbols", 59);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v164);
        }
        goto LABEL_172;
      }
      v134 = *(_DWORD *)(v15 + 624);
      v135 = *(_DWORD *)(*(_QWORD *)a4 + 8);
      if (quasar::gLogLevel >= 5)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        *(_OWORD *)v174 = 0u;
        v175 = 0u;
        *(_OWORD *)v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        *(_OWORD *)v169 = 0u;
        *(_OWORD *)v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        memset(v164, 0, sizeof(v164));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"About to process ", 17);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" frames in batch", 16);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v164);
      }
      if (v36 >= 1)
      {
        v38 = 0;
        if (v36 / 24 <= 1)
          v39 = 1;
        else
          v39 = v36 / 24;
        v136 = v39;
        do
        {
          v143 = &v191[3 * v38];
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v146 = 0;
          if (*(_BYTE *)(v15 + 688))
          {
            if (*(_QWORD *)(v15 + 520) != *(_QWORD *)(v15 + 512))
            {
              v40 = 0;
              v41 = 0;
              v42 = 0;
              v43 = 0;
              v142 = v38;
              do
              {
                v44 = *(_DWORD *)(*(_QWORD *)a4 + 8);
                v45 = *(_DWORD *)(v15 + 624);
                v46 = *(_DWORD *)(v15 + 692);
                v47 = (quasar::MovingAverage *)(*(_QWORD *)(v15 + 696) + v40);
                quasar::MovingAverage::add(v47, *(float *)(*v143 + 4 * v43));
                v144 = v40;
                v48 = *(__int128 **)(*(_QWORD *)(v15 + 512) + v41);
                v49 = *(float *)(v15 + 612);
                v50 = *(float *)(v15 + 616);
                v51 = *(int *)(v15 + 632);
                v52 = *(int *)(v15 + 628);
                Average = quasar::MovingAverage::getAverage(v47);
                if (*((char *)v48 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v164, *(const std::string::value_type **)v48, *((_QWORD *)v48 + 1));
                }
                else
                {
                  v54 = *v48;
                  *(_QWORD *)&v164[16] = *((_QWORD *)v48 + 2);
                  *(_OWORD *)v164 = v54;
                }
                v55 = v50 + (float)((float)(v45 + v44 - v46) * v49);
                v56 = v52 - 1;
                v15 = a1;
                v38 = v142;
                *(float *)&v164[24] = v55;
                *(float *)&v164[28] = v50 + (float)(v49 * (float)(v142 + v56 * v51));
                *(float *)&v165 = Average;
                v57 = *(_QWORD *)(a1 + 560) + v42;
                if (*(char *)(v57 + 23) < 0)
                  operator delete(*(void **)v57);
                v58 = *(_OWORD *)v164;
                *(_QWORD *)(v57 + 16) = *(_QWORD *)&v164[16];
                *(_OWORD *)v57 = v58;
                v164[23] = 0;
                v164[0] = 0;
                *(int64x2_t *)(v57 + 24) = vcvtq_s64_f64(vcvtq_f64_f32(*(float32x2_t *)&v164[24]));
                *(_DWORD *)(v57 + 40) = v165;
                a4 = v140;
                if ((v164[23] & 0x80000000) != 0)
                  operator delete(*(void **)v164);
                ++v43;
                v42 += 48;
                v41 += 24;
                v40 = v144 + 64;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 520) - *(_QWORD *)(a1 + 512)) >> 3) > v43);
              v39 = v136;
            }
          }
          else
          {
            v59 = *(quasar::AMKeywordDetection **)(v15 + 640);
            v60 = *(quasar::AMKeywordDetection **)(v15 + 648);
            while (v59 != v60)
            {
              quasar::AMKeywordDetection::propagate(v59, v143, *(_QWORD *)(v15 + 680));
              Score = quasar::AMKeywordDetection::getScore(v59);
              BestStartFrame = quasar::AMKeywordDetection::getBestStartFrame(v59);
              kaldi::quasar::Vocab::OOvWord(v59, &v190);
              v63 = (uint64_t)BestStartFrame;
              if ((uint64_t)BestStartFrame == -1)
                v63 = 0;
              v64 = *(float *)(v15 + 612);
              v65 = *(float *)(v15 + 616);
              v66 = v65 + (float)((float)v63 * v64);
              v67 = v65 + (float)(v64 * (float)(v38 + (*(_DWORD *)(v15 + 628) - 1) * *(_DWORD *)(v15 + 632)));
              *(_QWORD *)&v196 = v190.__r_.__value_.__l.__size_;
              v68 = v190.__r_.__value_.__r.__words[0];
              *(_QWORD *)((char *)&v196 + 7) = *(std::string::size_type *)((char *)&v190.__r_.__value_.__r.__words[1] + 7);
              v69 = HIBYTE(v190.__r_.__value_.__r.__words[2]);
              memset(&v190, 0, sizeof(v190));
              *(_QWORD *)v164 = v68;
              *(_QWORD *)&v164[15] = *(_QWORD *)((char *)&v196 + 7);
              *(_QWORD *)&v164[8] = v196;
              v164[23] = v69;
              *(_QWORD *)&v164[24] = (uint64_t)v66;
              *(_QWORD *)&v165 = (uint64_t)v67;
              *((float *)&v165 + 2) = Score;
              std::vector<std::tuple<std::string,long long,long long,float>>::push_back[abi:ne180100]((uint64_t *)__p, (__int128 *)v164);
              if ((v164[23] & 0x80000000) != 0)
                operator delete(*(void **)v164);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v190.__r_.__value_.__l.__data_);
              if (Score > *(float *)(v15 + 608))
              {
                if (quasar::gLogLevel >= 4)
                {
                  v178 = 0u;
                  v179 = 0u;
                  v176 = 0u;
                  v177 = 0u;
                  *(_OWORD *)v174 = 0u;
                  v175 = 0u;
                  *(_OWORD *)v172 = 0u;
                  v173 = 0u;
                  v170 = 0u;
                  v171 = 0u;
                  v168 = 0u;
                  *(_OWORD *)v169 = 0u;
                  *(_OWORD *)v166 = 0u;
                  v167 = 0u;
                  v165 = 0u;
                  memset(v164, 0, sizeof(v164));
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
                  v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"KWD ", 4);
                  kaldi::quasar::Vocab::OOvWord(v59, &v190);
                  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v71 = &v190;
                  else
                    v71 = (std::string *)v190.__r_.__value_.__r.__words[0];
                  if ((v190.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    size = HIBYTE(v190.__r_.__value_.__r.__words[2]);
                  else
                    size = v190.__r_.__value_.__l.__size_;
                  v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, size);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" ", 1);
                  v74 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" ", 1);
                  v75 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" ", 1);
                  v76 = (_QWORD *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v76 + *(_QWORD *)(*v76 - 24)));
                  v77 = std::locale::use_facet((const std::locale *)&v196, MEMORY[0x1E0DE4A90]);
                  ((void (*)(const std::locale::facet *, uint64_t))v77->__vftable[2].~facet_0)(v77, 10);
                  std::locale::~locale((std::locale *)&v196);
                  std::ostream::put();
                  std::ostream::flush();
                  if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v190.__r_.__value_.__l.__data_);
                  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v164);
                }
                ++v139;
              }
              quasar::OnlineKeywordSpottingDecoder::updateBestScores(v15, (uint64_t *)__p);
              v59 = (quasar::AMKeywordDetection *)((char *)v59 + 216);
            }
          }
          *(_QWORD *)v164 = __p;
          std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
          ++v38;
        }
        while (v38 != v39);
      }
      if (quasar::gLogLevel > 4)
      {
        v178 = 0u;
        v179 = 0u;
        v176 = 0u;
        v177 = 0u;
        *(_OWORD *)v174 = 0u;
        v175 = 0u;
        *(_OWORD *)v172 = 0u;
        v173 = 0u;
        v170 = 0u;
        v171 = 0u;
        v168 = 0u;
        *(_OWORD *)v169 = 0u;
        *(_OWORD *)v166 = 0u;
        v167 = 0u;
        v165 = 0u;
        memset(v164, 0, sizeof(v164));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"End of batch", 12);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v164);
      }
      quasar::OnlineKeywordSpottingDecoder::writePerBatchResults(v15, a3, a4, (int)(float)(*(float *)(v15 + 612) * (float)(v134 + v135)));
      if (*(_BYTE *)(v15 + 637))
      {
        v78 = *(_QWORD *)(v15 + 560);
        for (k = *(_QWORD *)(v15 + 568); v78 != k; v78 += 48)
        {
          *(_QWORD *)(v78 + 24) = 0;
          *(_QWORD *)(v78 + 32) = 0;
          *(_DWORD *)(v78 + 40) = -8388609;
        }
      }
    }
    if (quasar::gLogLevel >= 5)
    {
      v178 = 0u;
      v179 = 0u;
      v176 = 0u;
      v177 = 0u;
      *(_OWORD *)v174 = 0u;
      v175 = 0u;
      *(_OWORD *)v172 = 0u;
      v173 = 0u;
      v170 = 0u;
      v171 = 0u;
      v168 = 0u;
      *(_OWORD *)v169 = 0u;
      *(_OWORD *)v166 = 0u;
      v167 = 0u;
      v165 = 0u;
      memset(v164, 0, sizeof(v164));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"End of batches", 14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v164);
    }
    memset(&v190, 0, sizeof(v190));
    v196 = 0uLL;
    v197 = 0;
    v187 = 0;
    v188 = 0;
    v189 = 0;
    memset(&v186, 0, sizeof(v186));
    std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(&v186, *(__int128 **)(v15 + 560), *(__int128 **)(v15 + 568), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v15 + 568) - *(_QWORD *)(v15 + 560)) >> 4));
    v82 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v186.__r_.__value_.__l.__size_ - v186.__r_.__value_.__r.__words[0]) >> 4));
    __p[0] = quasar::tupleCompare;
    if (v186.__r_.__value_.__l.__size_ == v186.__r_.__value_.__r.__words[0])
      v83 = 0;
    else
      v83 = v82;
    std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>((uint64_t)v186.__r_.__value_.__l.__data_, (__int128 *)v186.__r_.__value_.__l.__size_, (uint64_t (**)(__int128 *, __int128 *))__p, v83, 1, v81);
    v85 = v186.__r_.__value_.__l.__size_;
    for (m = v186.__r_.__value_.__r.__words[0]; m != v85; m += 48)
    {
      v86 = *((_QWORD *)&v196 + 1);
      v87 = v196;
      while (v86 != v87)
        quasar::Token::~Token((void **)(v86 - 224));
      *((_QWORD *)&v196 + 1) = v87;
      if (*(char *)(m + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v185, *(const std::string::value_type **)m, *(_QWORD *)(m + 8));
      }
      else
      {
        v88 = *(_OWORD *)m;
        v185.__r_.__value_.__r.__words[2] = *(_QWORD *)(m + 16);
        *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v88;
      }
      v89 = *(_DWORD *)(m + 24);
      v90 = *(_DWORD *)(m + 32);
      v91 = *(float *)(m + 40);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      std::string::basic_string[abi:ne180100]<0>(v183, "");
      memset(v182, 0, sizeof(v182));
      std::string::basic_string[abi:ne180100]<0>(v180, "");
      quasar::Token::Token((std::string *)v164, (__int128 *)&v185, v89, v90, v90, 0, 0, (__int128 *)__p, v91, (__int128 *)v183, v182, 0, (__int128 *)v180, 0, 0);
      if (v181 < 0)
        operator delete(v180[0]);
      v180[0] = v182;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v180);
      if (v184 < 0)
        operator delete(v183[0].__locale_);
      if (SBYTE7(v146) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v185.__r_.__value_.__l.__data_);
      v92 = *((_QWORD *)&v196 + 1);
      if (*((_QWORD *)&v196 + 1) >= v197)
      {
        v93 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)&v196, (const quasar::Token *)v164);
      }
      else
      {
        quasar::Token::Token(*((std::string **)&v196 + 1), (const quasar::Token *)v164);
        v93 = v92 + 224;
      }
      *((_QWORD *)&v196 + 1) = v93;
      v94 = *(float *)(m + 40);
      v95 = v188;
      if (v188 >= v189)
      {
        v97 = v187;
        v98 = v188 - v187;
        v99 = v98 + 1;
        if ((unint64_t)(v98 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v100 = (char *)v189 - (char *)v187;
        if (((char *)v189 - (char *)v187) >> 2 > v99)
          v99 = v100 >> 2;
        if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFF8)
          v101 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v101 = v99;
        if (v101)
        {
          v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v189, v101);
          v97 = v187;
          v95 = v188;
        }
        else
        {
          v102 = 0;
        }
        v103 = (double *)&v102[8 * v98];
        *v103 = v94;
        v96 = v103 + 1;
        while (v95 != v97)
        {
          v104 = *((_QWORD *)v95-- - 1);
          *((_QWORD *)v103-- - 1) = v104;
        }
        v187 = v103;
        v188 = v96;
        v189 = (double *)&v102[8 * v101];
        if (v97)
          operator delete(v97);
      }
      else
      {
        *v188 = v94;
        v96 = v95 + 1;
      }
      v188 = v96;
      v105 = (_QWORD *)v190.__r_.__value_.__l.__size_;
      if (v190.__r_.__value_.__l.__size_ >= v190.__r_.__value_.__r.__words[2])
      {
        v106 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>((uint64_t *)&v190, (uint64_t *)&v196);
      }
      else
      {
        *(_QWORD *)v190.__r_.__value_.__l.__size_ = 0;
        v105[1] = 0;
        v105[2] = 0;
        std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v105, v196, *((uint64_t *)&v196 + 1), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((_QWORD *)&v196 + 1) - v196) >> 5));
        v106 = (std::string::size_type)(v105 + 3);
      }
      v190.__r_.__value_.__l.__size_ = v106;
      if (SBYTE7(v175) < 0)
        operator delete(v174[0]);
      if (SBYTE7(v173) < 0)
        operator delete(v172[0]);
      __p[0] = (char *)&v170 + 8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v170) < 0)
        operator delete(v169[0]);
      __p[0] = (char *)&v167 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (SBYTE7(v167) < 0)
        operator delete(v166[0]);
      if ((v164[23] & 0x80000000) != 0)
        operator delete(*(void **)v164);
    }
    v107 = *(_DWORD *)(*(_QWORD *)a4 + 8);
    v108 = *(_DWORD *)(v15 + 624);
    quasar::RecogResult::RecogResult((quasar::RecogResult *)v164);
    v109 = *(std::__shared_weak_count **)(*(_QWORD *)a4 + 32);
    v162 = *(_QWORD *)(*(_QWORD *)a4 + 24);
    v163 = v109;
    if (v109)
    {
      v110 = (unint64_t *)&v109->__shared_owners_;
      do
        v111 = __ldxr(v110);
      while (__stxr(v111 + 1, v110));
    }
    v112 = quasar::RecogResult::setParams((uint64_t)v164, &v162);
    v113 = quasar::Token::resetSpacing((uint64_t **)&v190);
    v114 = quasar::RecogResult::setResultChoices(v112, (uint64_t)v113);
    v115 = (_QWORD *)quasar::RecogResult::setResultCosts(v114, (uint64_t)&v187);
    v116 = quasar::RecogResult::setLmeStatus(v115, (uint64_t *)(*(_QWORD *)a3 + 584));
    started = quasar::RecogResult::setUtteranceStartMillis((uint64_t)v116, (float)(*(float *)(v15 + 612) * (float)*(unsigned int *)(*(_QWORD *)a4 + 8)));
    quasar::RecogResult::setUtteranceDurationMillis(started, (float)(*(float *)(v15 + 612) * (float)(v108 + v107)));
    v118 = v163;
    v119 = a3;
    if (v163)
    {
      v120 = (unint64_t *)&v163->__shared_owners_;
      do
        v121 = __ldaxr(v120);
      while (__stlxr(v121 - 1, v120));
      if (!v121)
      {
        ((void (*)(std::__shared_weak_count *))v118->__on_zero_shared)(v118);
        std::__shared_weak_count::__release_weak(v118);
        v119 = a3;
      }
    }
    v122 = v119;
    (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(*(_QWORD *)v119 + 560) + 40))(*(_QWORD *)(*(_QWORD *)v119 + 560), v164, 1);
    *(_DWORD *)(*(_QWORD *)v122 + 576) = *(_DWORD *)(v15 + 624);
    if (v139)
    {
      if (quasar::gLogLevel >= 4)
      {
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v123 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"keyword detected", 16);
        std::ios_base::getloc((const std::ios_base *)((char *)v123 + *(_QWORD *)(*v123 - 24)));
        v124 = std::locale::use_facet(v183, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
        std::locale::~locale(v183);
        std::ostream::put();
        std::ostream::flush();
        goto LABEL_175;
      }
    }
    else if (quasar::gLogLevel >= 4)
    {
      v160 = 0u;
      v161 = 0u;
      v158 = 0u;
      v159 = 0u;
      v156 = 0u;
      v157 = 0u;
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"no keywords detected", 20);
      std::ios_base::getloc((const std::ios_base *)((char *)v125 + *(_QWORD *)(*v125 - 24)));
      v126 = std::locale::use_facet(v183, MEMORY[0x1E0DE4A90]);
      ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
      std::locale::~locale(v183);
      std::ostream::put();
      std::ostream::flush();
LABEL_175:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      if (quasar::gLogLevel >= 4)
      {
        v160 = 0u;
        v161 = 0u;
        v158 = 0u;
        v159 = 0u;
        v156 = 0u;
        v157 = 0u;
        v154 = 0u;
        v155 = 0u;
        v152 = 0u;
        v153 = 0u;
        v150 = 0u;
        v151 = 0u;
        v148 = 0u;
        v149 = 0u;
        v146 = 0u;
        v147 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"keyword search finished with ", 29);
        v127 = (_QWORD *)std::ostream::operator<<();
        v128 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v127, (uint64_t)" detected hypothesis.", 21);
        std::ios_base::getloc((const std::ios_base *)((char *)v128 + *(_QWORD *)(*v128 - 24)));
        v129 = std::locale::use_facet(v183, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v129->__vftable[2].~facet_0)(v129, 10);
        std::locale::~locale(v183);
        std::ostream::put();
        std::ostream::flush();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
    }
    quasar::RecogResult::~RecogResult((quasar::RecogResult *)v164);
    *(_QWORD *)v164 = &v186;
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
    if (v187)
    {
      v188 = v187;
      operator delete(v187);
    }
    *(_QWORD *)v164 = &v196;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
    *(_QWORD *)v164 = &v190;
    std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v164);
    v80 = 0;
    goto LABEL_180;
  }
  if (quasar::gLogLevel >= 1)
  {
    v178 = 0u;
    v179 = 0u;
    v176 = 0u;
    v177 = 0u;
    *(_OWORD *)v174 = 0u;
    v175 = 0u;
    *(_OWORD *)v172 = 0u;
    v173 = 0u;
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    *(_OWORD *)v169 = 0u;
    *(_OWORD *)v166 = 0u;
    v167 = 0u;
    v165 = 0u;
    memset(v164, 0, sizeof(v164));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v164);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v164, (uint64_t)"Error: no utterance features were provided", 42);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v164);
  }
  v80 = 2;
  if (v8)
  {
LABEL_181:
    v130 = (unint64_t *)&v8->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v80;
}

void sub_1ADCC474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a65;
  uint64_t v65;
  void *v67;

  quasar::RecogResult::~RecogResult((quasar::RecogResult *)&a65);
  a65 = &STACK[0x3A0];
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  v67 = *(void **)(v65 - 248);
  if (v67)
  {
    *(_QWORD *)(v65 - 240) = v67;
    operator delete(v67);
  }
  a65 = (void *)(v65 - 160);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  a65 = (void *)(v65 - 224);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  a65 = (void *)(v65 - 200);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a65);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v65 - 176);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineKeywordSpottingDecoder::affectsRecognitionResults(quasar::OnlineKeywordSpottingDecoder *this)
{
  return 1;
}

void `non-virtual thunk to'std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  MEMORY[0x1AF44CA70](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1AF44D094);
}

{
  _QWORD *v1;

  v1 = a1 + 52;
  MEMORY[0x1AF44CA70](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'std::fstream::~fstream(_QWORD *a1)
{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1AF44CA70](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1AF44D094);
}

{
  void (__cdecl ***v1)(std::fstream *__hidden);

  v1 = (void (__cdecl ***)(std::fstream *__hidden))((char *)a1 + *(_QWORD *)(*a1 - 24));
  MEMORY[0x1AF44CA70](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1 + 54);
  JUMPOUT(0x1AF44D190);
}

void std::fstream::~fstream(void (__cdecl ***a1)(std::fstream *__hidden this))
{
  _QWORD *v1;

  v1 = a1 + 54;
  MEMORY[0x1AF44CA70](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](v1);
  JUMPOUT(0x1AF44D190);
}

void std::vector<quasar::AMKeywordDetection>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 216;
      v7 = v4 - 216;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 216;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<quasar::MovingAverage>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 64;
        std::deque<int>::~deque[abi:ne180100]((_QWORD *)v4 - 6);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::AMKeywordDetection>::__push_back_slow_path<quasar::AMKeywordDetection>(uint64_t *a1, const quasar::AMKeywordDetection *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  quasar::AMKeywordDetection *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x84BDA12F684BDA13 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x12F684BDA12F684)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x84BDA12F684BDA13 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x97B425ED097B42)
    v9 = 0x12F684BDA12F684;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::RecogRequestFilter>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (quasar::AMKeywordDetection *)&v10[216 * v4];
  v16 = &v10[216 * v9];
  quasar::AMKeywordDetection::AMKeywordDetection(v14, a2);
  v15 = (char *)v14 + 216;
  std::vector<quasar::AMKeywordDetection>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADCC4E60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::AMKeywordDetection *quasar::AMKeywordDetection::AMKeywordDetection(quasar::AMKeywordDetection *this, const quasar::AMKeywordDetection *a2)
{
  __int128 v4;
  uint64_t v5;

  *(_QWORD *)this = &off_1E5D368D8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  v5 = *((_QWORD *)a2 + 4);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 4) = v5;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 3);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 8, *((const void **)a2 + 8), *((_QWORD *)a2 + 9), (uint64_t)(*((_QWORD *)a2 + 9) - *((_QWORD *)a2 + 8)) >> 2);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 13) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 11, *((const void **)a2 + 11), *((_QWORD *)a2 + 12), (uint64_t)(*((_QWORD *)a2 + 12) - *((_QWORD *)a2 + 11)) >> 2);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 14, *((const void **)a2 + 14), *((_QWORD *)a2 + 15), (uint64_t)(*((_QWORD *)a2 + 15) - *((_QWORD *)a2 + 14)) >> 2);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 17, *((const void **)a2 + 17), *((_QWORD *)a2 + 18), (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3);
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  *((_QWORD *)this + 22) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 20, *((const void **)a2 + 20), *((_QWORD *)a2 + 21), (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<long long>::__init_with_size[abi:ne180100]<long long *,long long *>((_QWORD *)this + 23, *((const void **)a2 + 23), *((_QWORD *)a2 + 24), (uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 3);
  *((_BYTE *)this + 208) = *((_BYTE *)a2 + 208);
  return this;
}

void sub_1ADCC4FE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v10 = *v8;
  if (*v8)
  {
    *(_QWORD *)(v1 + 168) = v10;
    operator delete(v10);
  }
  v11 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v1 + 144) = v11;
    operator delete(v11);
  }
  v12 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 120) = v12;
    operator delete(v12);
  }
  v13 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 96) = v13;
    operator delete(v13);
  }
  v14 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 72) = v14;
    operator delete(v14);
  }
  v15 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 48) = v15;
    operator delete(v15);
  }
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::AMKeywordDetection>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AMKeywordDetection>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::AMKeywordDetection>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>,std::reverse_iterator<quasar::AMKeywordDetection*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  quasar::AMKeywordDetection *v12;

  v10 = 0;
  v11 = a7 - 216;
  while (a3 + v10 != a5)
  {
    v12 = (quasar::AMKeywordDetection *)(v11 + v10);
    v10 -= 216;
    quasar::AMKeywordDetection::AMKeywordDetection(v12, (const quasar::AMKeywordDetection *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<quasar::AMKeywordDetection>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 216);
    *(_QWORD *)(a1 + 16) = i - 216;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::tuple<std::string,long long,long long,float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = a7 + v7;
      v9 = a3 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v8 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 48) = v10;
      *(_QWORD *)(v9 - 40) = 0;
      *(_QWORD *)(v9 - 32) = 0;
      *(_QWORD *)(v9 - 48) = 0;
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 + v7 - 16);
      *(_DWORD *)(v8 - 8) = *(_DWORD *)(a3 + v7 - 8);
      v7 -= 48;
    }
    while (a3 + v7 != a5);
    *((_QWORD *)&v16 + 1) = a7 + v7;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 48;
  }
}

uint64_t std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::tuple<std::string,long long,long long,float>>::__destruct_at_end[abi:ne180100](a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::tuple<std::string,long long,long long,float>>::__destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 6;
      *(_QWORD *)(a1 + 16) = v2 - 6;
      if (*((char *)v2 - 25) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t std::vector<quasar::MovingAverage>::__push_back_slow_path<quasar::MovingAverage>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD v16[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 6;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 58)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 5 > v5)
    v5 = v8 >> 5;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0)
    v9 = 0x3FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v16[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::corrective_reranking::VoiceEditingWFST::Edge>>(v7, v9);
  v11 = &v10[64 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[64 * v12];
  v13 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)v11 = *(_QWORD *)a2;
  *((_DWORD *)v11 + 2) = v13;
  *((_QWORD *)v11 + 2) = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *((_QWORD *)v11 + 4) = *(_QWORD *)(a2 + 32);
  *((_QWORD *)v11 + 5) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *((_QWORD *)v11 + 7) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v16[2] = v11 + 64;
  std::vector<quasar::MovingAverage>::__swap_out_circular_buffer(a1, v16);
  v14 = a1[1];
  std::__split_buffer<quasar::MovingAverage>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_1ADCC5520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MovingAverage>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::MovingAverage>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MovingAverage>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::MovingAverage>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>,std::reverse_iterator<quasar::MovingAverage*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = a6;
  if (a3 != a5)
  {
    v8 = 0;
    do
    {
      v9 = a7 + v8;
      v10 = a3 + v8;
      v11 = *(_QWORD *)(a3 + v8 - 64);
      *(_DWORD *)(v9 - 56) = *(_DWORD *)(a3 + v8 - 56);
      *(_QWORD *)(v9 - 64) = v11;
      *(_QWORD *)(v9 - 48) = *(_QWORD *)(a3 + v8 - 48);
      *(_QWORD *)(v9 - 40) = *(_QWORD *)(a3 + v8 - 40);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 + v8 - 32);
      *(_QWORD *)(v9 - 24) = *(_QWORD *)(a3 + v8 - 24);
      *(_OWORD *)(v10 - 48) = 0uLL;
      *(_OWORD *)(v10 - 32) = 0uLL;
      *(_QWORD *)(v9 - 16) = *(_QWORD *)(a3 + v8 - 16);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v8 - 8);
      *(_QWORD *)(v10 - 16) = 0;
      *(_QWORD *)(v10 - 8) = 0;
      v8 -= 64;
    }
    while (a3 + v8 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<quasar::MovingAverage>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 64;
    std::deque<int>::~deque[abi:ne180100]((_QWORD *)(i - 48));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::string *std::vector<std::tuple<std::string,long long,long long,float>>::__init_with_size[abi:ne180100]<std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADCC56DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,long long,long long,float>::__tuple_impl(v4, v6);
      v6 += 3;
      v4 = v11 + 2;
      v11 += 2;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADCC5788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul,3ul>,std::string,long long,long long,float>::__tuple_impl(std::string *this, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__l.__size_ = *((_QWORD *)a2 + 4);
  LODWORD(this[1].__r_.__value_.__r.__words[2]) = *((_DWORD *)a2 + 10);
  return this;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::tuple<std::string,long long,long long,float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 25) < 0)
      operator delete(*(void **)(v1 - 48));
    v1 -= 48;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,false>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  __int128 *v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  char v25;
  BOOL v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, __int128 *a2, uint64_t (**a3)(__int128 *, uint64_t, float))
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  float v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[24];
  int v17;

  if ((__int128 *)a1 != a2)
  {
    v5 = a1 + 48;
    if ((__int128 *)(a1 + 48) != a2)
    {
      v7 = 0;
      v8 = a1;
      do
      {
        v9 = (__int128 *)v5;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v5, v8))
        {
          v15 = *v9;
          *(_QWORD *)v16 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 1) = 0;
          *((_QWORD *)v9 + 2) = 0;
          *(_QWORD *)v9 = 0;
          *(_OWORD *)&v16[8] = *(_OWORD *)(v8 + 72);
          v17 = *(_DWORD *)(v8 + 88);
          v10 = v7;
          while (1)
          {
            v11 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1 + v10 + 48, (__int128 *)(a1 + v10));
            if (!v10)
              break;
            v12 = (*a3)(&v15, a1 + v10 - 48, v11);
            v10 -= 48;
            if ((v12 & 1) == 0)
            {
              v13 = a1 + v10 + 48;
              goto LABEL_10;
            }
          }
          v13 = a1;
LABEL_10:
          if (*(char *)(v13 + 23) < 0)
            operator delete(*(void **)v13);
          v14 = *(_OWORD *)v16;
          *(_OWORD *)v13 = v15;
          *(_OWORD *)(v13 + 16) = v14;
          *(_QWORD *)(v13 + 32) = *(_QWORD *)&v16[16];
          *(_DWORD *)(v13 + 40) = v17;
        }
        v5 = (uint64_t)(v9 + 3);
        v7 += 48;
        v8 = (uint64_t)v9;
      }
      while (v9 + 3 != a2);
    }
  }
}

void sub_1ADCC5D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, uint64_t, float))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  __int128 v11;
  __int128 v12;
  _BYTE v13[24];
  int v14;

  if (a1 != a2)
  {
    v4 = a1;
    v5 = a1 + 48;
    if (a1 + 48 != a2)
    {
      do
      {
        v7 = v5;
        if (((unsigned int (*)(uint64_t, uint64_t))*a3)(v5, v4))
        {
          v12 = *(_OWORD *)v7;
          *(_QWORD *)v13 = *(_QWORD *)(v7 + 16);
          *(_QWORD *)(v7 + 8) = 0;
          *(_QWORD *)(v7 + 16) = 0;
          *(_QWORD *)v7 = 0;
          *(_OWORD *)&v13[8] = *(_OWORD *)(v4 + 72);
          v14 = *(_DWORD *)(v4 + 88);
          v8 = v7;
          do
          {
            v9 = v8;
            v8 -= 48;
            v10 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v9, (__int128 *)v8);
          }
          while (((*a3)(&v12, v9 - 96, v10) & 1) != 0);
          if (*(char *)(v8 + 23) < 0)
            operator delete(*(void **)v8);
          v11 = *(_OWORD *)v13;
          *(_OWORD *)v8 = v12;
          *(_OWORD *)(v8 + 16) = v11;
          *(_QWORD *)(v8 + 32) = *(_QWORD *)&v13[16];
          *(_DWORD *)(v8 + 40) = v14;
        }
        v5 = v7 + 48;
        v4 = v7;
      }
      while (v7 + 48 != a2);
    }
  }
}

void sub_1ADCC5E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  int *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = (int *)a1 + 10;
      v11 = *((_QWORD *)a1 + 2);
      v12 = *a1;
      v13 = *((_QWORD *)a3 + 2);
      *a1 = *a3;
      *((_QWORD *)a1 + 2) = v13;
      *a3 = v12;
      *((_QWORD *)a3 + 2) = v11;
      v14 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = v14;
      v15 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a3 + 4);
      *((_QWORD *)a3 + 4) = v15;
      v16 = (int *)a3 + 10;
      result = 1;
LABEL_10:
      v38 = *v10;
      *v10 = *v16;
      *v16 = v38;
      return result;
    }
    v27 = *((_QWORD *)a1 + 2);
    v28 = *a1;
    v29 = *((_QWORD *)a2 + 2);
    *a1 = *a2;
    *((_QWORD *)a1 + 2) = v29;
    *a2 = v28;
    *((_QWORD *)a2 + 2) = v27;
    v30 = *((_QWORD *)a1 + 3);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = v30;
    v31 = *((_QWORD *)a1 + 4);
    *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = v31;
    v10 = (int *)a2 + 10;
    v32 = *((_DWORD *)a1 + 10);
    *((_DWORD *)a1 + 10) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = v32;
    if ((*a4)(a3, a2))
    {
      v33 = *((_QWORD *)a2 + 2);
      v34 = *a2;
      v35 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v35;
      *a3 = v34;
      *((_QWORD *)a3 + 2) = v33;
      v36 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
      *((_QWORD *)a3 + 3) = v36;
      v37 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 4) = *((_QWORD *)a3 + 4);
      *((_QWORD *)a3 + 4) = v37;
      v16 = (int *)a3 + 10;
      goto LABEL_9;
    }
  }
  else
  {
    if (!(_DWORD)result)
      return result;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *a2;
    v19 = *((_QWORD *)a3 + 2);
    *a2 = *a3;
    *((_QWORD *)a2 + 2) = v19;
    *a3 = v18;
    *((_QWORD *)a3 + 2) = v17;
    v20 = *((_QWORD *)a2 + 3);
    *((_QWORD *)a2 + 3) = *((_QWORD *)a3 + 3);
    *((_QWORD *)a3 + 3) = v20;
    v21 = *((_QWORD *)a2 + 4);
    *((_QWORD *)a2 + 4) = *((_QWORD *)a3 + 4);
    *((_QWORD *)a3 + 4) = v21;
    v16 = (int *)a2 + 10;
    LODWORD(v18) = *((_DWORD *)a2 + 10);
    *((_DWORD *)a2 + 10) = *((_DWORD *)a3 + 10);
    *((_DWORD *)a3 + 10) = v18;
    if ((*a4)(a2, a1))
    {
      v22 = *((_QWORD *)a1 + 2);
      v23 = *a1;
      v24 = *((_QWORD *)a2 + 2);
      *a1 = *a2;
      *((_QWORD *)a1 + 2) = v24;
      *a2 = v23;
      *((_QWORD *)a2 + 2) = v22;
      v25 = *((_QWORD *)a1 + 3);
      *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
      *((_QWORD *)a2 + 3) = v25;
      v26 = *((_QWORD *)a1 + 4);
      *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 4) = v26;
      v10 = (int *)a1 + 10;
LABEL_9:
      result = 2;
      goto LABEL_10;
    }
  }
  return 1;
}

unint64_t std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(void **, unint64_t))
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  __int128 v15;
  void *__p[2];
  uint64_t v18;
  __int128 v19;
  int v20;
  __int128 v21;
  uint64_t v22;

  v4 = a2;
  *(_OWORD *)__p = *(_OWORD *)a1;
  v18 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v19 = *(_OWORD *)(a1 + 24);
  v20 = *(_DWORD *)(a1 + 40);
  if (((*a3)(__p, a2 - 48) & 1) != 0)
  {
    v6 = a1;
    do
      v6 += 48;
    while (((*a3)(__p, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 48;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(__p, v7);
      v7 = v6 + 48;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      v4 -= 48;
    while (((*a3)(__p, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v9 = *(_OWORD *)v6;
    v22 = *(_QWORD *)(v6 + 16);
    v21 = v9;
    v10 = *(_OWORD *)v4;
    *(_QWORD *)(v6 + 16) = *(_QWORD *)(v4 + 16);
    *(_OWORD *)v6 = v10;
    v11 = v21;
    *(_QWORD *)(v4 + 16) = v22;
    *(_OWORD *)v4 = v11;
    v12 = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 24) = *(_QWORD *)(v4 + 24);
    *(_QWORD *)(v4 + 24) = v12;
    v13 = *(_QWORD *)(v6 + 32);
    *(_QWORD *)(v6 + 32) = *(_QWORD *)(v4 + 32);
    *(_QWORD *)(v4 + 32) = v13;
    LODWORD(v11) = *(_DWORD *)(v6 + 40);
    *(_DWORD *)(v6 + 40) = *(_DWORD *)(v4 + 40);
    *(_DWORD *)(v4 + 40) = v11;
    do
      v6 += 48;
    while (!(*a3)(__p, v6));
    do
      v4 -= 48;
    while (((*a3)(__p, v4) & 1) != 0);
  }
  v14 = (void **)(v6 - 48);
  if (v6 - 48 != a1)
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, (__int128 *)(v6 - 48));
  if (*(char *)(v6 - 25) < 0)
    operator delete(*v14);
  v15 = *(_OWORD *)__p;
  *(_QWORD *)(v6 - 32) = v18;
  *(_OWORD *)v14 = v15;
  HIBYTE(v18) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v6 - 24) = v19;
  *(_DWORD *)(v6 - 8) = v20;
  if (SHIBYTE(v18) < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_1ADCC62D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<std::string,long long,long long,float> *,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&)>(uint64_t a1, unint64_t a2, uint64_t (**a3)(uint64_t, void **))
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void **v16;
  __int128 v17;
  void *__p[2];
  uint64_t v20;
  __int128 v21;
  int v22;
  __int128 v23;
  uint64_t v24;

  v6 = 0;
  v20 = *(_QWORD *)(a1 + 16);
  v22 = *(_DWORD *)(a1 + 40);
  *(_OWORD *)__p = *(_OWORD *)a1;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  v21 = *(_OWORD *)(a1 + 24);
  do
  {
    v7 = (*a3)(a1 + v6 + 48, __p);
    v6 += 48;
  }
  while ((v7 & 1) != 0);
  v8 = a1 + v6;
  if (v6 == 48)
  {
    do
    {
      if (v8 >= a2)
        break;
      a2 -= 48;
    }
    while (((*a3)(a2, __p) & 1) == 0);
  }
  else
  {
    do
      a2 -= 48;
    while (!(*a3)(a2, __p));
  }
  v9 = a1 + v6;
  if (v8 < a2)
  {
    v10 = a2;
    do
    {
      v23 = *(_OWORD *)v9;
      v11 = v23;
      v24 = *(_QWORD *)(v9 + 16);
      v12 = v24;
      v13 = *(_QWORD *)(v10 + 16);
      *(_OWORD *)v9 = *(_OWORD *)v10;
      *(_QWORD *)(v9 + 16) = v13;
      *(_QWORD *)(v10 + 16) = v12;
      *(_OWORD *)v10 = v11;
      v14 = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(v10 + 24);
      *(_QWORD *)(v10 + 24) = v14;
      v15 = *(_QWORD *)(v9 + 32);
      *(_QWORD *)(v9 + 32) = *(_QWORD *)(v10 + 32);
      *(_QWORD *)(v10 + 32) = v15;
      LODWORD(v11) = *(_DWORD *)(v9 + 40);
      *(_DWORD *)(v9 + 40) = *(_DWORD *)(v10 + 40);
      *(_DWORD *)(v10 + 40) = v11;
      do
        v9 += 48;
      while (((*a3)(v9, __p) & 1) != 0);
      do
        v10 -= 48;
      while (!(*a3)(v10, __p));
    }
    while (v9 < v10);
  }
  v16 = (void **)(v9 - 48);
  if (v9 - 48 != a1)
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, (__int128 *)(v9 - 48));
  if (*(char *)(v9 - 25) < 0)
    operator delete(*v16);
  v17 = *(_OWORD *)__p;
  *(_QWORD *)(v9 - 32) = v20;
  *(_OWORD *)v16 = v17;
  HIBYTE(v20) = 0;
  LOBYTE(__p[0]) = 0;
  *(_OWORD *)(v9 - 24) = v21;
  *(_DWORD *)(v9 - 8) = v22;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  return v9 - 48;
}

void sub_1ADCC64E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];
  int v25;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 4);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 48);
      if ((*a3)((__int128 *)(a2 - 48), (__int128 *)a1))
      {
        v9 = *(_QWORD *)(a1 + 16);
        v10 = *(_OWORD *)a1;
        v11 = *(_QWORD *)(a2 - 32);
        *(_OWORD *)a1 = *v8;
        *(_QWORD *)(a1 + 16) = v11;
        *v8 = v10;
        *(_QWORD *)(a2 - 32) = v9;
        v12 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v12;
        v13 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 - 16);
        *(_QWORD *)(a2 - 16) = v13;
        LODWORD(v10) = *(_DWORD *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v10;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a2 - 48), a3);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a1 + 48, a1 + 96, a2 - 48, a3);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a1 + 48, a1 + 96, a1 + 144, a2 - 48, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 96);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)a1, (__int128 *)(a1 + 48), (__int128 *)(a1 + 96), a3);
      v15 = a1 + 144;
      if (a1 + 144 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v23 = *(_OWORD *)v15;
      *(_QWORD *)v24 = *(_QWORD *)(v15 + 16);
      *(_QWORD *)(v15 + 8) = 0;
      *(_QWORD *)(v15 + 16) = 0;
      *(_QWORD *)v15 = 0;
      *(_OWORD *)&v24[8] = *(_OWORD *)(v15 + 24);
      v18 = v16;
      v25 = *(_DWORD *)(v15 + 40);
      while (1)
      {
        v19 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1 + v18 + 144, (__int128 *)(a1 + v18 + 96));
        if (v18 == -96)
          break;
        v20 = ((uint64_t (*)(__int128 *, uint64_t, float))*a3)(&v23, a1 + v18 + 48, v19);
        v18 -= 48;
        if ((v20 & 1) == 0)
        {
          v21 = a1 + v18 + 144;
          goto LABEL_12;
        }
      }
      v21 = a1;
LABEL_12:
      if (*(char *)(v21 + 23) < 0)
        operator delete(*(void **)v21);
      v22 = *(_OWORD *)v24;
      *(_OWORD *)v21 = v23;
      *(_OWORD *)(v21 + 16) = v22;
      v24[7] = 0;
      LOBYTE(v23) = 0;
      *(_QWORD *)(v21 + 32) = *(_QWORD *)&v24[16];
      *(_DWORD *)(v21 + 40) = v25;
      if (++v17 == 8)
        return v15 + 48 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 48;
    v15 += 48;
    if (v15 == a2)
      return 1;
  }
}

void sub_1ADCC675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  float result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 16);
    v12 = *(_OWORD *)a3;
    v13 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v13;
    *(_OWORD *)a4 = v12;
    *(_QWORD *)(a4 + 16) = v11;
    v14 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = v14;
    v15 = *(_QWORD *)(a3 + 32);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 32) = v15;
    LODWORD(v12) = *(_DWORD *)(a3 + 40);
    *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = v12;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_QWORD *)(a2 + 16);
      v17 = *(_OWORD *)a2;
      v18 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v18;
      *(_OWORD *)a3 = v17;
      *(_QWORD *)(a3 + 16) = v16;
      v19 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = v19;
      v20 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = v20;
      LODWORD(v17) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = v17;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v21 = *(_QWORD *)(a1 + 16);
        v22 = *(_OWORD *)a1;
        v23 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v23;
        *(_OWORD *)a2 = v22;
        *(_QWORD *)(a2 + 16) = v21;
        v24 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = v24;
        v25 = *(_QWORD *)(a1 + 32);
        *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = v25;
        result = *(float *)(a1 + 40);
        *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
        *(float *)(a2 + 40) = result;
      }
    }
  }
  return result;
}

float std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  float v12;
  float result;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v12 = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, float))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 16);
    v15 = *(_OWORD *)a4;
    v16 = *(_QWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_QWORD *)(a4 + 16) = v16;
    *(_OWORD *)a5 = v15;
    *(_QWORD *)(a5 + 16) = v14;
    v17 = *(_QWORD *)(a4 + 24);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(a5 + 24);
    *(_QWORD *)(a5 + 24) = v17;
    v18 = *(_QWORD *)(a4 + 32);
    *(_QWORD *)(a4 + 32) = *(_QWORD *)(a5 + 32);
    *(_QWORD *)(a5 + 32) = v18;
    LODWORD(v15) = *(_DWORD *)(a4 + 40);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(a5 + 40);
    *(_DWORD *)(a5 + 40) = v15;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_QWORD *)(a3 + 16);
      v20 = *(_OWORD *)a3;
      v21 = *(_QWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_QWORD *)(a3 + 16) = v21;
      *(_OWORD *)a4 = v20;
      *(_QWORD *)(a4 + 16) = v19;
      v22 = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 24) = *(_QWORD *)(a4 + 24);
      *(_QWORD *)(a4 + 24) = v22;
      v23 = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 32) = *(_QWORD *)(a4 + 32);
      *(_QWORD *)(a4 + 32) = v23;
      LODWORD(v20) = *(_DWORD *)(a3 + 40);
      *(_DWORD *)(a3 + 40) = *(_DWORD *)(a4 + 40);
      *(_DWORD *)(a4 + 40) = v20;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(_QWORD *)(a2 + 16);
        v25 = *(_OWORD *)a2;
        v26 = *(_QWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_QWORD *)(a2 + 16) = v26;
        *(_OWORD *)a3 = v25;
        *(_QWORD *)(a3 + 16) = v24;
        v27 = *(_QWORD *)(a2 + 24);
        *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
        *(_QWORD *)(a3 + 24) = v27;
        v28 = *(_QWORD *)(a2 + 32);
        *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
        *(_QWORD *)(a3 + 32) = v28;
        LODWORD(v25) = *(_DWORD *)(a2 + 40);
        *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
        *(_DWORD *)(a3 + 40) = v25;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v29 = *(_QWORD *)(a1 + 16);
          v30 = *(_OWORD *)a1;
          v31 = *(_QWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_QWORD *)(a1 + 16) = v31;
          *(_OWORD *)a2 = v30;
          *(_QWORD *)(a2 + 16) = v29;
          v32 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_QWORD *)(a2 + 24) = v32;
          v33 = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_QWORD *)(a2 + 32) = v33;
          result = *(float *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(float *)(a2 + 40) = result;
        }
      }
    }
  }
  return result;
}

float std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  float result;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 3);
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  result = *((float *)a2 + 10);
  *(float *)(a1 + 40) = result;
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*,std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t, float), __n128 a5)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = a2 - a1;
    v10 = (a2 - a1) / 48;
    if (a2 - a1 >= 49)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = a1 + 48 * v11;
      do
      {
        a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a4, v10, v13, a5.n128_f32[0]);
        v13 -= 48;
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          v16 = *(_QWORD *)(v15 + 16);
          v17 = *(_OWORD *)v15;
          v18 = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v15 = *(_OWORD *)a1;
          *(_QWORD *)(v15 + 16) = v18;
          *(_OWORD *)a1 = v17;
          *(_QWORD *)(a1 + 16) = v16;
          v19 = *(_QWORD *)(v15 + 24);
          *(_QWORD *)(v15 + 24) = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 24) = v19;
          v20 = *(_QWORD *)(v15 + 32);
          *(_QWORD *)(v15 + 32) = *(_QWORD *)(a1 + 32);
          *(_QWORD *)(a1 + 32) = v20;
          LODWORD(v17) = *(_DWORD *)(v15 + 40);
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(a1 + 40);
          *(_DWORD *)(a1 + 40) = v17;
          a5.n128_f32[0] = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a4, v10, a1, *(float *)&v17);
        }
        v15 += 48;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 >= 49)
    {
      v21 = v9 / 0x30uLL;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v7, (unsigned int (**)(uint64_t, uint64_t))a4, v21);
        v7 -= 48;
      }
      while (v21-- > 2);
    }
    return v14;
  }
  return a3;
}

float std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t, float), uint64_t a3, uint64_t a4, float result)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  float v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  float v21;

  v5 = a3 - 2;
  if (a3 >= 2)
  {
    v6 = a4;
    v8 = v5 >> 1;
    if ((uint64_t)(v5 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 4)))
    {
      v11 = (0x5555555555555556 * ((a4 - a1) >> 4)) | 1;
      v12 = (__int128 *)(a1 + 48 * v11);
      v13 = 0x5555555555555556 * ((a4 - a1) >> 4) + 2;
      if (v13 < a3 && ((unsigned int (*)(uint64_t, __int128 *))*a2)(a1 + 48 * v11, v12 + 3))
      {
        v12 += 3;
        v11 = v13;
      }
      if ((((uint64_t (*)(__int128 *, uint64_t))*a2)(v12, v6) & 1) == 0)
      {
        v18 = *(_OWORD *)v6;
        v19 = *(_QWORD *)(v6 + 16);
        *(_QWORD *)(v6 + 8) = 0;
        *(_QWORD *)(v6 + 16) = 0;
        *(_QWORD *)v6 = 0;
        v20 = *(_OWORD *)(v6 + 24);
        v21 = *(float *)(v6 + 40);
        do
        {
          v14 = v12;
          v15 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v6, v12);
          if (v8 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (__int128 *)(a1 + 48 * v16);
          v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            v11 = v16;
          }
          else if ((*a2)(a1 + 48 * v16, (uint64_t)(v12 + 3), v15))
          {
            v12 += 3;
          }
          else
          {
            v11 = v16;
          }
          v6 = (uint64_t)v14;
        }
        while (!((unsigned int (*)(__int128 *, __int128 *))*a2)(v12, &v18));
        if (*((char *)v14 + 23) < 0)
          operator delete(*(void **)v14);
        v17 = v18;
        *((_QWORD *)v14 + 2) = v19;
        *v14 = v17;
        *(__int128 *)((char *)v14 + 24) = v20;
        result = v21;
        *((float *)v14 + 10) = v21;
      }
    }
  }
  return result;
}

void sub_1ADCC6E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  __int128 *v12;
  __int128 *v13;
  float v14;
  uint64_t v15;
  _BYTE v16[15];

  if (a4 >= 2)
  {
    v7 = *(_QWORD *)a1;
    *(_QWORD *)v16 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v16[7] = *(_QWORD *)(a1 + 15);
    v8 = *(_BYTE *)(a1 + 23);
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    v10 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a1 + 32);
    v11 = *(_DWORD *)(a1 + 40);
    v12 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, a3, a4);
    v13 = v12;
    if (v12 == (__int128 *)(a2 - 48))
    {
      if (*((char *)v12 + 23) < 0)
        operator delete(*(void **)v12);
      *(_QWORD *)v13 = v7;
      *((_QWORD *)v13 + 1) = *(_QWORD *)v16;
      *(_QWORD *)((char *)v13 + 15) = *(_QWORD *)&v16[7];
      *((_BYTE *)v13 + 23) = v8;
      *((_QWORD *)v13 + 3) = v10;
      *((_QWORD *)v13 + 4) = v9;
      *((_DWORD *)v13 + 10) = v11;
    }
    else
    {
      v14 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>((uint64_t)v12, (__int128 *)(a2 - 48));
      v15 = (uint64_t)(v13 + 3);
      if (*(char *)(a2 - 25) < 0)
        operator delete(*(void **)(a2 - 48));
      *(_QWORD *)(a2 - 48) = v7;
      *(_QWORD *)(a2 - 40) = *(_QWORD *)v16;
      *(_QWORD *)(a2 - 33) = *(_QWORD *)&v16[7];
      *(_BYTE *)(a2 - 25) = v8;
      *(_QWORD *)(a2 - 24) = v10;
      *(_QWORD *)(a2 - 16) = v9;
      *(_DWORD *)(a2 - 8) = v11;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(a1, v15, (unsigned int (**)(__int128 *, uint64_t))a3, 0xAAAAAAAAAAAAAAABLL * ((v15 - a1) >> 4), v14);
    }
  }
}

void sub_1ADCC6FD0(_Unwind_Exception *exception_object)
{
  void *v1;
  int v2;

  if (v2 < 0)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

__int128 *std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = (__int128 *)(a1 + 48 * v6 + 48);
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && (*a2)(a1 + 48 * v6 + 48, a1 + 48 * v6 + 96))
    {
      v9 += 3;
      v10 = v11;
    }
    std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(a1, v9);
    a1 = (uint64_t)v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

float std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(std::tuple<std::string,long long,long long,float> const&,std::tuple<std::string,long long,long long,float> const&),std::tuple<std::string,long long,long long,float>*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(__int128 *, uint64_t), uint64_t a4, float result)
{
  unint64_t v5;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 *v12;
  float v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  float v17;

  v5 = a4 - 2;
  if (a4 >= 2)
  {
    v9 = v5 >> 1;
    v10 = (__int128 *)(a1 + 48 * (v5 >> 1));
    v11 = a2 - 48;
    if ((*a3)(v10, a2 - 48))
    {
      v14 = *(_OWORD *)v11;
      v15 = *(_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)v11 = 0;
      v16 = *(_OWORD *)(a2 - 24);
      v17 = *(float *)(a2 - 8);
      do
      {
        v12 = v10;
        v13 = std::__memberwise_forward_assign[abi:ne180100]<std::tuple<std::string,long long,long long,float>,std::tuple<std::string,long long,long long,float>,std::string,long long,long long,float,0ul,1ul,2ul,3ul>(v11, v10);
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 48 * v9);
        v11 = (uint64_t)v12;
      }
      while ((((uint64_t (*)(__int128 *, __int128 *, float))*a3)(v10, &v14, v13) & 1) != 0);
      if (*((char *)v12 + 23) < 0)
        operator delete(*(void **)v12);
      *v12 = v14;
      *((_QWORD *)v12 + 2) = v15;
      *(__int128 *)((char *)v12 + 24) = v16;
      result = v17;
      *((float *)v12 + 10) = v17;
    }
  }
  return result;
}

void sub_1ADCC71A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void StopNgram::StopNgram(StopNgram *this, Vocab *a2, SubVocab *a3, int a4)
{
  _QWORD *v5;

  Ngram::Ngram(this, a2, a4);
  *v5 = &off_1E5D18180;
  v5[24] = a3;
}

float StopNgram::wordProb(StopNgram *this, uint64_t a2, const unsigned int *a3)
{
  uint64_t v6;
  int v7;
  unsigned int v9[101];
  uint64_t v10;

  v6 = 0;
  v7 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    if (a3[v6] == -1)
      break;
    if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 32))(*((_QWORD *)this + 24)))
      v9[v7++] = a3[v6];
    ++v6;
  }
  while (v6 != 403);
  v9[v7] = -1;
  return LM::wordProb(this, a2, v9);
}

char *StopNgram::contextID(StopNgram *this, unsigned int a2, const unsigned int *a3, unsigned int *a4)
{
  uint64_t v8;
  int v9;
  char *result;
  unsigned int v11[101];
  uint64_t v12;

  v8 = 0;
  v9 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  do
  {
    if (a3[v8] == -1)
      break;
    if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 32))(*((_QWORD *)this + 24)))
      v11[v9++] = a3[v8];
    ++v8;
  }
  while (v8 != 403);
  v11[v9] = -1;
  result = Ngram::contextID(this, a2, v11, a4);
  *a4 += v8 - v9;
  return result;
}

float StopNgram::contextBOW(StopNgram *this, const unsigned int *a2, unsigned int a3)
{
  uint64_t v6;
  int v7;
  unsigned int v9[101];
  uint64_t v10;

  v6 = 0;
  v7 = 0;
  v10 = *MEMORY[0x1E0C80C00];
  do
  {
    if (a2[v6] == -1)
      break;
    if (!(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 24) + 32))(*((_QWORD *)this + 24)))
      v9[v7++] = a2[v6];
    ++v6;
  }
  while (v6 != 403);
  v9[v7] = -1;
  return Ngram::contextBOW(this, v9, a3);
}

void StopNgram::~StopNgram(StopNgram *this)
{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::AudioAnalyticsProcessor::computeAnalytics(float **a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, unsigned int a4@<W3>, int a5@<W4>, char a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  int i;
  double v11;
  char *v12;
  void *v13;
  char *v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  double *v20;
  uint64_t v21;
  double v22;
  char *v23;
  void *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  double *v31;
  uint64_t v32;
  double v33;
  char *v34;
  void *v35;
  char *v36;
  int64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  double *v42;
  uint64_t v43;
  double v44;
  char *v45;
  void *v46;
  char *v47;
  int64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  double *v53;
  uint64_t v54;
  double v55;
  unint64_t v56;
  void *v57;
  double *v58;
  double v59;
  double v60;
  double v61;
  double v62;
  double *v63;
  double *v64;
  double *v65;
  double v66;
  double *v67;
  double v68;
  unint64_t v69;
  double v70;
  double v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned int v74;
  float v75;
  int64_t v76;
  unint64_t v77;
  double *v78;
  double *v79;
  unint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  unsigned int v83;
  double v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t v94;
  unint64_t *v95;
  int v96;
  _QWORD *v97;
  _BYTE *v98;
  _QWORD *v99;
  int64_t v100;
  unsigned int v101;
  int64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  double v108;
  double v109;
  double v110;
  _DWORD *v111;
  double v112;
  uint64_t j;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t *v118;
  char *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t *v129;
  void *v130[2];
  __int128 v131;
  void *v132[2];
  __int128 v133;
  void *v134[2];
  __int128 v135;
  void *__p[2];
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  double *v156;
  double *v157;
  uint64_t v158;

  v137 = 0u;
  v138 = 0u;
  v135 = 0u;
  *(_OWORD *)__p = 0u;
  v133 = 0u;
  *(_OWORD *)v134 = 0u;
  v131 = 0u;
  *(_OWORD *)v132 = 0u;
  *(_OWORD *)v130 = 0u;
  v9 = kaldi::MatrixBase<float>::NumRows((uint64_t)a1);
  kaldi::Matrix<float>::Matrix((uint64_t)&v139, v9, 4, 0, 0);
  if ((int)kaldi::MatrixBase<float>::NumRows((uint64_t)a1) >= 1)
  {
    kaldi::AudioAnalyticsHelper::ExtractDesiredAudioAnalytics(a1, 228, (uint64_t)&v139);
    for (i = 0; i < (int)kaldi::MatrixBase<float>::NumRows((uint64_t)&v139); ++i)
    {
      v11 = *(float *)(v139 + 4 * (int)v140 * i);
      v12 = (char *)v134[1];
      if (v134[1] >= (void *)v135)
      {
        v14 = (char *)v134[0];
        v15 = ((char *)v134[1] - (char *)v134[0]) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v135 - (unint64_t)v134[0];
        if ((uint64_t)(v135 - (unint64_t)v134[0]) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v135, v18);
          v14 = (char *)v134[0];
          v12 = (char *)v134[1];
        }
        else
        {
          v19 = 0;
        }
        v20 = (double *)&v19[8 * v15];
        *v20 = v11;
        v13 = v20 + 1;
        while (v12 != v14)
        {
          v21 = *((_QWORD *)v12 - 1);
          v12 -= 8;
          *((_QWORD *)v20-- - 1) = v21;
        }
        v134[0] = v20;
        v134[1] = v13;
        *(_QWORD *)&v135 = &v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(double *)v134[1] = v11;
        v13 = v12 + 8;
      }
      v134[1] = v13;
      v22 = *(float *)(v139 + 4 * (int)v140 * i + 4);
      v23 = (char *)v130[1];
      if (v130[1] >= (void *)v131)
      {
        v25 = (char *)v130[0];
        v26 = ((char *)v130[1] - (char *)v130[0]) >> 3;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v28 = v131 - (unint64_t)v130[0];
        if ((uint64_t)(v131 - (unint64_t)v130[0]) >> 2 > v27)
          v27 = v28 >> 2;
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
          v29 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
        {
          v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v131, v29);
          v25 = (char *)v130[0];
          v23 = (char *)v130[1];
        }
        else
        {
          v30 = 0;
        }
        v31 = (double *)&v30[8 * v26];
        *v31 = v22;
        v24 = v31 + 1;
        while (v23 != v25)
        {
          v32 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v31-- - 1) = v32;
        }
        v130[0] = v31;
        v130[1] = v24;
        *(_QWORD *)&v131 = &v30[8 * v29];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *(double *)v130[1] = v22;
        v24 = v23 + 8;
      }
      v130[1] = v24;
      v33 = *(float *)(v139 + 4 * (int)v140 * i + 8);
      v34 = (char *)__p[1];
      if (__p[1] >= (void *)v137)
      {
        v36 = (char *)__p[0];
        v37 = ((char *)__p[1] - (char *)__p[0]) >> 3;
        v38 = v37 + 1;
        if ((unint64_t)(v37 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v39 = v137 - (unint64_t)__p[0];
        if ((uint64_t)(v137 - (unint64_t)__p[0]) >> 2 > v38)
          v38 = v39 >> 2;
        if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
          v40 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
        {
          v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v137, v40);
          v36 = (char *)__p[0];
          v34 = (char *)__p[1];
        }
        else
        {
          v41 = 0;
        }
        v42 = (double *)&v41[8 * v37];
        *v42 = v33;
        v35 = v42 + 1;
        while (v34 != v36)
        {
          v43 = *((_QWORD *)v34 - 1);
          v34 -= 8;
          *((_QWORD *)v42-- - 1) = v43;
        }
        __p[0] = v42;
        __p[1] = v35;
        *(_QWORD *)&v137 = &v41[8 * v40];
        if (v36)
          operator delete(v36);
      }
      else
      {
        *(double *)__p[1] = v33;
        v35 = v34 + 8;
      }
      __p[1] = v35;
      v44 = *(float *)(v139 + 4 * (int)v140 * i + 12);
      v45 = (char *)v132[1];
      if (v132[1] >= (void *)v133)
      {
        v47 = (char *)v132[0];
        v48 = ((char *)v132[1] - (char *)v132[0]) >> 3;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v50 = v133 - (unint64_t)v132[0];
        if ((uint64_t)(v133 - (unint64_t)v132[0]) >> 2 > v49)
          v49 = v50 >> 2;
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
          v51 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v51 = v49;
        if (v51)
        {
          v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v133, v51);
          v47 = (char *)v132[0];
          v45 = (char *)v132[1];
        }
        else
        {
          v52 = 0;
        }
        v53 = (double *)&v52[8 * v48];
        *v53 = v44;
        v46 = v53 + 1;
        while (v45 != v47)
        {
          v54 = *((_QWORD *)v45 - 1);
          v45 -= 8;
          *((_QWORD *)v53-- - 1) = v54;
        }
        v132[0] = v53;
        v132[1] = v46;
        *(_QWORD *)&v133 = &v52[8 * v51];
        if (v47)
          operator delete(v47);
      }
      else
      {
        *(double *)v132[1] = v44;
        v46 = v45 + 8;
      }
      v132[1] = v46;
    }
  }
  *((double *)&v131 + 1) = (double)a3;
  *((double *)&v133 + 1) = (double)a3;
  *((double *)&v135 + 1) = (double)a3;
  *((double *)&v137 + 1) = (double)a3;
  kaldi::Matrix<float>::~Matrix((uint64_t)&v139);
  if ((a6 & 1) == 0)
  {
    if (v132[1] != v132[0])
    {
      v69 = 0;
      do
      {
        quasar::calculateRelativeJitter((uint64_t *)v130, a5, v69, (unint64_t)((char *)v130[1] - (char *)v130[0]) >> 3);
        quasar::calculateAbsoluteShimmer((uint64_t *)v132, a5, v69++, (unint64_t)((char *)v132[1] - (char *)v132[0]) >> 3);
      }
      while (v69 < ((char *)v132[1] - (char *)v132[0]) >> 3);
    }
    goto LABEL_155;
  }
  v58 = (double *)__p[0];
  v57 = __p[1];
  if (__p[1] != __p[0])
  {
    v59 = 0.0;
    do
    {
      v60 = *v58++;
      v59 = v59 + v60;
    }
    while (v58 != __p[1]);
    v61 = v59 / (double)(unint64_t)(((char *)__p[1] - (char *)__p[0]) >> 3);
    v62 = quasar::computeStdDev((double **)__p, v61);
    v156 = 0;
    v157 = 0;
    v158 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v156, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 3);
    v63 = v156;
    v64 = v157;
    if (v156 == v157)
    {
      v66 = 0.0;
    }
    else
    {
      v65 = v156;
      do
      {
        *v65 = (*v65 - v61) / v62;
        ++v65;
      }
      while (v65 != v64);
      v66 = 0.0;
      v67 = v63;
      do
      {
        v68 = *v67++;
        v66 = v66 + v68;
      }
      while (v67 != v64);
    }
    v70 = quasar::computeStdDev(&v156, v66 / (double)(unint64_t)(v64 - v63));
    if (quasar::gLogLevel <= 5)
    {
      HIDWORD(v55) = 1069128089;
      v71 = v70 * 0.1;
    }
    else
    {
      v154 = 0u;
      v155 = 0u;
      v152 = 0u;
      v153 = 0u;
      v150 = 0u;
      v151 = 0u;
      v148 = 0u;
      v149 = 0u;
      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v142 = 0u;
      v143 = 0u;
      v140 = 0u;
      v141 = 0u;
      v139 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Voicing threshold=", 18);
      v71 = v70 * 0.1;
      v72 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)" mean=", 6);
      v73 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" stddev=", 8);
      std::ostream::operator<<();
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v139);
    }
    v74 = a4;
    v75 = v71;
    v76 = (char *)__p[1] - (char *)__p[0];
    v77 = (unint64_t)((char *)__p[1] - (char *)__p[0]) >> 3;
    v128 = 0;
    v129 = 0;
    v127 = 0;
    v78 = v156;
    v79 = v157;
    if (v157 == v156)
    {
      v80 = 0;
      if (!(_DWORD)v77)
        goto LABEL_131;
    }
    else
    {
      v80 = 0;
      v81 = 0;
      v82 = 0;
      v83 = 0;
      v84 = v75;
      do
      {
        v55 = v78[v81];
        if (v55 <= v84)
        {
          if (v82)
          {
            v55 = v78[v82 - 1];
            if (v55 > v84)
            {
              if (v82 - v83 <= v74)
              {
                v83 = v82;
              }
              else
              {
                v85 = v81 << 32;
                if (v80 >= v129)
                {
                  v86 = v80 - v127;
                  if ((unint64_t)(v86 + 1) >> 61)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v87 = ((char *)v129 - (char *)v127) >> 2;
                  if (v87 <= v86 + 1)
                    v87 = v86 + 1;
                  if ((unint64_t)((char *)v129 - (char *)v127) >= 0x7FFFFFFFFFFFFFF8)
                    v88 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v88 = v87;
                  if (v88)
                    v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v129, v88);
                  else
                    v89 = 0;
                  v90 = (unint64_t *)&v89[8 * v86];
                  *v90 = v85 | v83;
                  v80 = v90 + 1;
                  v91 = v128;
                  if (v128 != v127)
                  {
                    do
                    {
                      v92 = *--v91;
                      *--v90 = v92;
                    }
                    while (v91 != v127);
                    v91 = v127;
                  }
                  v127 = v90;
                  v129 = (unint64_t *)&v89[8 * v88];
                  if (v91)
                    operator delete(v91);
                  v74 = a4;
                }
                else
                {
                  *v80++ = v85 | v83;
                }
                v128 = v80;
                v83 = v82;
                v78 = v156;
                v79 = v157;
              }
            }
          }
          ++v83;
        }
        v81 = ++v82;
      }
      while (v82 < (unint64_t)(v79 - v78));
      if (v83)
      {
        if (v83 >= v77)
        {
LABEL_132:
          if (!v78)
          {
LABEL_134:
            v95 = v127;
            if (v127 != v80)
            {
              v96 = quasar::gLogLevel;
              do
              {
                if (v96 >= 6)
                {
                  v154 = 0u;
                  v155 = 0u;
                  v152 = 0u;
                  v153 = 0u;
                  v150 = 0u;
                  v151 = 0u;
                  v148 = 0u;
                  v149 = 0u;
                  v146 = 0u;
                  v147 = 0u;
                  v144 = 0u;
                  v145 = 0u;
                  v142 = 0u;
                  v143 = 0u;
                  v140 = 0u;
                  v141 = 0u;
                  v139 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Voiced region start: ", 21);
                  v97 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" end:", 5);
                  std::ostream::operator<<();
                  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v139);
                  v96 = quasar::gLogLevel;
                }
                ++v95;
              }
              while (v95 != v80);
              v80 = v127;
            }
            if (v128 != v80)
            {
              v99 = v130[0];
              v98 = v130[1];
              if (v130[1] != v130[0])
              {
                v100 = 0;
                v101 = 0;
                do
                {
                  if (v101 >= (unint64_t)(v128 - v80))
                  {
                    v99[v100] = 0;
                    *((_QWORD *)v134[0] + v100) = 0;
                    *((_QWORD *)v132[0] + v100++) = 0;
                  }
                  else
                  {
                    if (v100 >= SLODWORD(v80[v101]))
                    {
                      v102 = SHIDWORD(v80[v101]);
                      if (v100 < v102)
                      {
                        quasar::calculateRelativeJitter((uint64_t *)v130, a5, v100, v102);
                        quasar::calculateAbsoluteShimmer((uint64_t *)v132, a5, v100, HIDWORD(v127[v101]));
                        v80 = v127;
                        v98 = v130[1];
                      }
                    }
                    else
                    {
                      v99[v100] = 0;
                      *((_QWORD *)v134[0] + v100) = 0;
                      *((_QWORD *)v132[0] + v100) = 0;
                    }
                    if (SHIDWORD(v80[v101]) <= (int)++v100)
                      ++v101;
                    v99 = v130[0];
                  }
                }
                while (v100 < (unint64_t)((v98 - (_BYTE *)v99) >> 3));
              }
            }
            if (v80)
              operator delete(v80);
LABEL_155:
            v103 = *a2;
            if (*a2)
            {
              v104 = *(uint64_t **)v103;
              if (*(_QWORD *)v103 != *(_QWORD *)(v103 + 8))
              {
                v105 = *v104;
                v106 = v104[1];
                if (*v104 != v106)
                {
                  v107 = (v106 - v105) / 224;
                  LODWORD(v55) = *(_DWORD *)(v106 - 188);
                  LODWORD(v56) = *(_DWORD *)(v105 + 28);
                  v108 = (double)*(unint64_t *)&v55 - (double)v56;
                  v109 = -1.0;
                  v110 = -1.0;
                  if (v108 > 0.0)
                    v110 = (double)v107 / (v108 / 1000.0 / 60.0);
                  *(double *)&v138 = v110;
                  if (v107 != 1)
                  {
                    v111 = (_DWORD *)(v105 + 36);
                    v112 = 0.0;
                    for (j = 1; j != v107; ++j)
                    {
                      v112 = v112 + (double)(*v111 - *(v111 - 2));
                      v111 += 56;
                    }
                    if (v107 > 1)
                      v109 = v112 / 1000.0 / (double)(v107 - 1);
                  }
                  *((double *)&v138 + 1) = v109;
                }
              }
            }
            *(_OWORD *)a7 = *(_OWORD *)v130;
            *(_QWORD *)(a7 + 16) = v131;
            v130[0] = 0;
            v130[1] = 0;
            *(_QWORD *)(a7 + 24) = *((_QWORD *)&v131 + 1);
            *(_OWORD *)(a7 + 32) = *(_OWORD *)v132;
            *(_QWORD *)(a7 + 48) = v133;
            *(_QWORD *)&v131 = 0;
            v132[0] = 0;
            v132[1] = 0;
            *(_QWORD *)&v133 = 0;
            *(_QWORD *)(a7 + 56) = *((_QWORD *)&v133 + 1);
            *(_OWORD *)(a7 + 64) = *(_OWORD *)v134;
            *(_QWORD *)(a7 + 80) = v135;
            v134[0] = 0;
            v134[1] = 0;
            *(_QWORD *)(a7 + 88) = *((_QWORD *)&v135 + 1);
            *(_OWORD *)(a7 + 96) = *(_OWORD *)__p;
            *(_QWORD *)(a7 + 112) = v137;
            *(_QWORD *)&v135 = 0;
            __p[0] = 0;
            __p[1] = 0;
            *(_QWORD *)&v137 = 0;
            *(_QWORD *)(a7 + 120) = *((_QWORD *)&v137 + 1);
            *(_OWORD *)(a7 + 128) = v138;
            goto LABEL_167;
          }
LABEL_133:
          v157 = v78;
          operator delete(v78);
          v80 = v128;
          goto LABEL_134;
        }
LABEL_123:
        v55 = v78[(v77 - 1)];
        if (v55 > v84 && ~v83 + v77 > v74)
        {
          v94 = (v76 << 29) & 0xFFFFFFFF00000000;
          if (v80 >= v129)
          {
            v114 = v80 - v127;
            if ((unint64_t)(v114 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v115 = ((char *)v129 - (char *)v127) >> 2;
            if (v115 <= v114 + 1)
              v115 = v114 + 1;
            if ((unint64_t)((char *)v129 - (char *)v127) >= 0x7FFFFFFFFFFFFFF8)
              v116 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v116 = v115;
            if (v116)
              v117 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v129, v116);
            else
              v117 = 0;
            v118 = (unint64_t *)&v117[8 * v114];
            v119 = &v117[8 * v116];
            *v118 = v94 | v83;
            v80 = v118 + 1;
            v120 = v128;
            if (v128 != v127)
            {
              do
              {
                v121 = *--v120;
                *--v118 = v121;
              }
              while (v120 != v127);
              v120 = v127;
            }
            v127 = v118;
            v129 = (unint64_t *)v119;
            if (v120)
              operator delete(v120);
          }
          else
          {
            *v80++ = v94 | v83;
          }
          v128 = v80;
          v78 = v156;
          if (!v156)
            goto LABEL_134;
        }
        goto LABEL_133;
      }
      v79 = v78;
      if (!(_DWORD)v77)
      {
LABEL_131:
        v78 = v79;
        goto LABEL_132;
      }
    }
    v83 = 0;
    v84 = v75;
    v78 = v79;
    goto LABEL_123;
  }
  if (quasar::gLogLevel >= 1)
  {
    v154 = 0u;
    v155 = 0u;
    v152 = 0u;
    v153 = 0u;
    v150 = 0u;
    v151 = 0u;
    v148 = 0u;
    v149 = 0u;
    v146 = 0u;
    v147 = 0u;
    v144 = 0u;
    v145 = 0u;
    v142 = 0u;
    v143 = 0u;
    v140 = 0u;
    v141 = 0u;
    v139 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v139);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v139, (uint64_t)"Missing voicing regions in audio analytics", 42);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v139);
    v57 = __p[0];
  }
  *(_OWORD *)(a7 + 112) = 0u;
  *(_OWORD *)(a7 + 128) = 0u;
  *(_OWORD *)(a7 + 80) = 0u;
  *(_OWORD *)(a7 + 96) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)(a7 + 64) = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)a7 = 0u;
  if (v57)
  {
    __p[1] = v57;
    operator delete(v57);
  }
LABEL_167:
  if (v134[0])
  {
    v134[1] = v134[0];
    operator delete(v134[0]);
  }
  if (v132[0])
  {
    v132[1] = v132[0];
    operator delete(v132[0]);
  }
  if (v130[0])
  {
    v130[1] = v130[0];
    operator delete(v130[0]);
  }
}

void sub_1ADCC8170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;
  void *v41;

  if (__p)
    operator delete(__p);
  v41 = *(void **)(v39 - 152);
  if (v41)
  {
    *(_QWORD *)(v39 - 144) = v41;
    operator delete(v41);
  }
  quasar::AudioAnalytics::~AudioAnalytics((quasar::AudioAnalytics *)&a21);
  _Unwind_Resume(a1);
}

uint64_t *quasar::calculateRelativeJitter(uint64_t *result, int a2, int a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  double *v7;
  float v8;
  uint64_t v9;
  float v10;
  double v11;
  float v12;

  v4 = a3 + a2;
  if (a3 + a2 >= a4)
    v4 = a4;
  v5 = (v4 + ~a3);
  v6 = *result;
  if ((int)v5 <= 0)
  {
    *(_QWORD *)(v6 + 8 * a3) = 0;
  }
  else
  {
    v7 = (double *)(v6 + 8 * a3 + 8);
    v8 = 0.0;
    v9 = v5;
    v10 = 0.0;
    do
    {
      v11 = *(v7 - 1);
      v10 = vabdd_f64(v11, *v7) + v10;
      v8 = v11 + v8;
      ++v7;
      --v9;
    }
    while (v9);
    *(_QWORD *)(v6 + 8 * a3) = 0;
    v12 = v8 / (float)(int)v5;
    if (v12 > 0.0)
      *(double *)(v6 + 8 * a3) = (float)((float)((float)(v10 * 100.0) / (float)(int)v5) / v12);
  }
  return result;
}

void quasar::calculateAbsoluteShimmer(uint64_t *a1, int a2, int a3, int a4)
{
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  double v9;
  uint64_t v10;
  double v11;
  double v12;

  v4 = a3 + a2;
  if (a3 + a2 >= a4)
    v4 = a4;
  v5 = v4 + ~a3;
  v6 = *a1;
  v7 = a3;
  if (v5 <= 0)
  {
    *(_QWORD *)(v6 + 8 * a3) = 0;
  }
  else
  {
    v8 = (double *)(v6 + 8 * a3 + 8);
    v9 = 0.0;
    v10 = (v4 + ~a3);
    do
    {
      v11 = 0.0;
      if (*v8 != 0.0)
        v11 = fabs(log10(*(v8 - 1) / *v8));
      v9 = v9 + v11;
      ++v8;
      --v10;
    }
    while (v10);
    *(_QWORD *)(v6 + 8 * v7) = 0;
    v12 = v9 * 20.0 / (double)v5;
    if (v12 > 0.0)
      *(double *)(v6 + 8 * v7) = v12;
  }
}

double quasar::computeStdDev(double **a1, double a2)
{
  double *v4;
  double *v5;
  double *v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double *v11;
  double v12;
  void *__p;
  double *v15;

  std::vector<double>::vector(&__p, a1[1] - *a1);
  v5 = *a1;
  v4 = a1[1];
  v6 = (double *)__p;
  if (v5 != v4)
  {
    v7 = v5;
    v8 = (double *)__p;
    do
    {
      v9 = *v7++;
      *v8++ = v9 - a2;
    }
    while (v7 != v4);
  }
  v10 = 0.0;
  if (v6 != v15)
  {
    v11 = v6;
    do
    {
      v12 = *v11++;
      v10 = v10 + v12 * v12;
    }
    while (v11 != v15);
  }
  if (v6)
  {
    v15 = v6;
    operator delete(v6);
  }
  return sqrt(v10 / (double)(unint64_t)(v4 - v5));
}

void fst::Determinize<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t a2, int *a3, __n128 a4)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  void *v14;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  char v22[8];
  uint64_t v23;
  int v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  void **p_p;
  int v32;

  v22[0] = FLAGS_fst_default_cache_gc;
  v27 = 0;
  v28 = 0;
  v24 = *a3;
  a4.n128_u64[0] = *(_QWORD *)(a3 + 3);
  v25 = a4.n128_u64[0];
  v26 = *((_BYTE *)a3 + 20);
  v23 = 0;
  LODWORD(v29) = 0;
  LODWORD(v29) = a3[1];
  LODWORD(v19) = 2139095040;
  a4.n128_u32[0] = v29;
  if (*(float *)&v29 == INFINITY && a3[2] == -1)
  {
    fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(&v29, a1, (uint64_t)v22);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 168))(a2, &v29);
    v29 = &unk_1E5D275D8;
    v7 = v30;
    if (v30)
    {
      v8 = *(_DWORD *)(v30 + 56) - 1;
      *(_DWORD *)(v30 + 56) = v8;
      if (!v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    }
  }
  else if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 64))(a1, 0x10000, 0, a4))
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    __p = 0;
    v17 = 0;
    v18 = 0;
    fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, (char **)&v19, 1, 0.00097656);
    fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(&v14, a1, (uint64_t)&v19, (uint64_t)&__p, (uint64_t)v22);
    v29 = *(void **)(a3 + 1);
    p_p = &__p;
    v32 = 981467136;
    fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t)&v14, a2, (uint64_t)&v29);
    v14 = &unk_1E5D275D8;
    v9 = v15;
    if (v15)
    {
      v10 = *(_DWORD *)(v15 + 56) - 1;
      *(_DWORD *)(v15 + 56) = v10;
      if (!v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    }
    if (__p)
    {
      v17 = __p;
      operator delete(__p);
    }
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
  }
  else
  {
    fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(&v29, a1, (uint64_t)v22);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 168))(a2, &v29);
    v29 = &unk_1E5D275D8;
    v11 = v30;
    if (v30)
    {
      v12 = *(_DWORD *)(v30 + 56) - 1;
      *(_DWORD *)(v30 + 56) = v12;
      if (!v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    }
    v13 = a3[2];
    LODWORD(v29) = a3[1];
    HIDWORD(v29) = v13;
    p_p = 0;
    v32 = 981467136;
    fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (uint64_t)&v29);
  }
}

void sub_1ADCC86A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v17;

  *(_QWORD *)(v15 - 64) = &unk_1E5D275D8;
  v17 = *(_QWORD *)(v15 - 56);
  if (v17)
    fst::Compose<fst::ArcTpl<fst::LogWeightTpl<float>,int>>(v17);
  _Unwind_Resume(exception_object);
}

void quasar::RealignAmFusionDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  quasar::ForceAlignDecoderBase::registerParams(this, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "am-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Acoustic model (transition model) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 107), (uint64_t)__p, 1, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "am-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for acoustic likelihoods");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 116), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ctc-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for ctcScale");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 932, (uint64_t)__p, 0, 252, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 117), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file. Don't provide this file if frontend has performed the AM backend logic");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 110), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to be skipped in nnet computation.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 940, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 120), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of nbest for am-fusion");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 118), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pre-aligned-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "the final weight will be computed as preAlignedScale * preAlignedCost + postAlignedScale * postAlignedCost");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 948, (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "post-aligned-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "the final weight will be computed as preAlignedScale * preAlignedCost + postAlignedScale * postAlignedCost");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 119), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "ilabel-score-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "(experimental) score lookup table of the T transducer");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 113), (uint64_t)__p, 0, 251, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "experimental-new-merge-algo");
  std::string::basic_string[abi:ne180100]<0>(__p, "(experimental) Use new lattice merging algorithm");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)(this + 133), (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCC8C98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::RealignAmFusionDecoder::finishInit(quasar::RealignAmFusionDecoder *this)
{
  _QWORD *v2;
  unsigned __int8 v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  __int128 v18[17];
  uint64_t v19;
  unsigned __int8 *v20;
  std::__shared_weak_count *v21;

  quasar::ForceAlignDecoderBase::finishInit(this);
  if (*((char *)this + 903) < 0)
  {
    if (!*((_QWORD *)this + 111))
      goto LABEL_15;
  }
  else if (!*((_BYTE *)this + 903))
  {
    goto LABEL_15;
  }
  v2 = (_QWORD *)*((_QWORD *)this + 46);
  v3 = *((_BYTE *)this + 936);
  v20 = 0;
  v21 = 0;
  quasar::ModelLoader::readNeuralNetwork(v2, (uint64_t)this + 880, v3, 1u, 1, &v20, (uint64_t *)v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 992, v18);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
  if (*((_QWORD *)&v18[0] + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_15:
  if (*((char *)this + 983) < 0)
  {
    if (!*((_QWORD *)this + 121))
      goto LABEL_24;
  }
  else if (!*((_BYTE *)this + 983))
  {
    goto LABEL_24;
  }
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1024, v18);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
  if (*((_QWORD *)&v18[0] + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
LABEL_24:
  quasar::ModelLoader::readTransitionModel(*((_QWORD *)this + 46), (unsigned __int8 *)this + 856, 0, (uint64_t *)v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1008, v18);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v18[0] + 1);
  if (*((_QWORD *)&v18[0] + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v18[0] + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (*((char *)this + 927) < 0)
  {
    if (!*((_QWORD *)this + 114))
      return;
  }
  else if (!*((_BYTE *)this + 927))
  {
    return;
  }
  v19 = 0;
  kaldi::Input::OpenInternal(&v19, (uint64_t)this + 904, 0, 0);
  v16 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v19);
  kaldi::Vector<float>::Read((uint64_t)this + 1040, v16, 0, 0);
  kaldi::Input::Close((kaldi::Input *)&v19);
  if (quasar::gLogLevel >= 5)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Read ", 5);
    v17 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ilabel scores for am-fusion lookup", 35);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v18);
  }
  kaldi::Input::~Input((kaldi::Input *)&v19);
}

void sub_1ADCC8FB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Input::~Input((kaldi::Input *)(v1 - 56));
  _Unwind_Resume(a1);
}

uint64_t quasar::RealignAmFusionDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t v5;
  _QWORD *v6;
  char *AllFusionFeat;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  kaldi::WordBoundaryInfo *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  kaldi::TransitionModel *v23;
  unint64_t *v24;
  unint64_t v25;
  char InfoFromLinearLattice;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  uint64_t v35;
  char *v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  int *v50;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  void *v62;
  _BOOL4 v63;
  _BOOL4 v64;
  uint64_t v65;
  unint64_t v66;
  std::__shared_weak_count_vtbl *v67;
  __int128 *v68;
  int *v69;
  int *v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  unint64_t v74;
  int v75;
  char *v76;
  __n128 v77;
  BOOL v78;
  void *v79;
  __n128 v80;
  _BOOL4 v81;
  void *v82;
  int *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  int v88;
  char *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  __n128 v97;
  _BOOL4 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  int *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  std::__shared_weak_count *v112;
  kaldi::LatticeScoreCache *v113;
  std::__shared_weak_count *v114;
  kaldi::OnlineFeatureMatrix *v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t *LmeDataStreams;
  quasar::SymbolTableList *v119;
  __int32 v120;
  uint64_t v121;
  int v122;
  int v123;
  clockid_t v124;
  unint64_t *v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  uint64_t j;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t k;
  std::__shared_weak_count_vtbl *v139;
  __int128 *v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  _QWORD *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  _BYTE *v157;
  int v158;
  uint64_t v159;
  float v160;
  uint64_t *v161;
  uint64_t *v162;
  BOOL v163;
  _QWORD *v164;
  std::__shared_weak_count *v165;
  unint64_t *v166;
  unint64_t v167;
  char v168;
  char v169;
  unint64_t *v170;
  unint64_t v171;
  int v172;
  uint64_t n;
  _BYTE *v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  _BYTE *v178;
  int v179;
  char *v180;
  std::vector<std::wstring> *v181;
  float *v182;
  float v183;
  float v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  int v188;
  _QWORD *v189;
  _QWORD *v190;
  _QWORD *v191;
  _QWORD *v192;
  _QWORD *v193;
  clockid_t v194;
  _QWORD *v195;
  std::__shared_weak_count *v196;
  std::__shared_weak_count_vtbl *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  _DWORD *v201;
  uint64_t v202;
  int v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t ii;
  uint64_t v211;
  uint64_t v212;
  std::__shared_weak_count *v213;
  unint64_t *v214;
  unint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  int v219;
  uint64_t v220;
  int v221;
  std::__shared_weak_count *v222;
  unint64_t *v223;
  unint64_t v224;
  std::__shared_weak_count *v225;
  unint64_t *v226;
  unint64_t v227;
  std::__shared_weak_count *v228;
  int v229;
  int *v230;
  int v231;
  int v232;
  uint64_t v233;
  _QWORD *v235;
  int *v236;
  kaldi::TransitionModel *v237;
  unsigned int v238;
  int v239;
  _QWORD *v240;
  int v242;
  _QWORD *m;
  int v244;
  uint64_t v245;
  int v246;
  uint64_t v247;
  kaldi::TransitionModel *v248;
  char **v249;
  std::__shared_weak_count *v250;
  kaldi::OnlineFeatureMatrix *v251;
  std::__shared_weak_count *v252;
  _QWORD *v253;
  _QWORD *v254;
  std::__shared_weak_count *v255;
  void *v256[2];
  __int128 v257;
  int32x2_t v258;
  void *v259;
  void *v260;
  uint64_t v261;
  kaldi::WordBoundaryInfo *v262;
  std::__shared_weak_count *v263;
  _QWORD *v264;
  _QWORD *v265;
  uint64_t v266;
  void *v267;
  int *v268;
  uint64_t v269;
  void *v270;
  unint64_t v271;
  char *v272;
  char *v273;
  unint64_t v274;
  kaldi::WordBoundaryInfo *v275;
  std::__shared_weak_count *v276;
  _QWORD *v277;
  std::__shared_weak_count *v278;
  char *v279;
  unint64_t v280;
  _BYTE v281[120];
  uint64_t v282;
  uint64_t *v283;
  uint64_t v284;
  void *v285;
  _BYTE *v286;
  uint64_t v287;
  void *v288;
  _BYTE *v289;
  uint64_t v290;
  __int128 __src;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 __p;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  uint64_t v325;
  void *v326;
  void *v327;
  uint64_t v328;
  uint64_t v329;

  v5 = a1;
  v264 = 0;
  v265 = 0;
  v266 = 0;
  fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*(_QWORD *)(*a3 + 152), *(int *)(a1 + 944), (uint64_t *)&v264);
  if (quasar::gLogLevel >= 4)
  {
    v323 = 0u;
    v324 = 0u;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    v312 = 0u;
    __p = 0u;
    v310 = 0u;
    v308 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" nbest are extracted", 20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v308);
  }
  AllFusionFeat = kaldi::OnlineFeatureMatrix::GetAllFusionFeat(*(kaldi::OnlineFeatureMatrix **)a2);
  if (v264 == v265 || !kaldi::MatrixBase<float>::NumRows((uint64_t)AllFusionFeat))
  {
    v93 = 0;
    goto LABEL_183;
  }
  v8 = v264;
  v235 = v265;
  v233 = v5;
  if (v264 == v265)
  {
    v92 = *a3;
    *(_BYTE *)(*a3 + 1089) = 0;
  }
  else
  {
    v9 = 0;
    do
    {
      v10 = *(_QWORD *)(v8[1] + 72) - *(_QWORD *)(v8[1] + 64);
      if ((int)(v10 >> 3) >= 1)
      {
        v11 = 0;
        v12 = (v10 >> 3);
        do
        {
          *(_QWORD *)&__src = &unk_1E5D21420;
          *((_QWORD *)&v292 + 1) = 0;
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)v8);
          v13 = v8[1];
          v14 = *(_QWORD *)(*(_QWORD *)(v13 + 64) + 8 * v11);
          *((_QWORD *)&__src + 1) = v14;
          *(_QWORD *)&v292 = v13 + 8;
          for (i = *((_QWORD *)&v292 + 1); ; *((_QWORD *)&v292 + 1) = i)
          {
            v16 = *(_QWORD *)(v14 + 48);
            if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v14 + 56) - v16) >> 4))
              break;
            v17 = (_QWORD *)(v16 + 48 * i);
            if (*(_DWORD *)v17 == *(_DWORD *)(*(_QWORD *)(a2 + 216) + 24))
            {
              *(_QWORD *)&v308 = *v17;
              v18 = v16 + 48 * i;
              *((_QWORD *)&v308 + 1) = *(_QWORD *)(v18 + 8);
              *(_QWORD *)&v310 = 0;
              __p = 0uLL;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v18 + 16), *(_QWORD *)(v18 + 24), (uint64_t)(*(_QWORD *)(v18 + 24) - *(_QWORD *)(v18 + 16)) >> 2);
              DWORD2(v310) = *(_DWORD *)(v16 + 48 * i + 40);
              *(_QWORD *)&v308 = 0;
              fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&__src, (float *)&v308);
              if ((_QWORD)__p)
              {
                *((_QWORD *)&__p + 1) = __p;
                operator delete((void *)__p);
              }
              v9 = 1;
              i = *((_QWORD *)&v292 + 1);
              v14 = *((_QWORD *)&__src + 1);
            }
            ++i;
          }
          ++v11;
        }
        while (v11 != v12);
      }
      if (*(_BYTE *)(*a3 + 1089))
      {
        v20 = *(kaldi::WordBoundaryInfo **)(a2 + 216);
        v19 = *(std::__shared_weak_count **)(a2 + 224);
        v262 = v20;
        v263 = v19;
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v22 = __ldxr(p_shared_owners);
          while (__stxr(v22 + 1, p_shared_owners));
        }
        v23 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
        v242 = *(_DWORD *)(a2 + 848);
        if (kaldi::TransitionModel::TransitionIdToPhone(v23, 1) == v242)
        {
          v289 = 0;
          v288 = 0;
          v290 = 0;
          v286 = 0;
          v285 = 0;
          v287 = 0;
          v282 = (uint64_t)&v282;
          v283 = &v282;
          v284 = 0;
          v275 = v20;
          v276 = v19;
          if (v19)
          {
            v24 = (unint64_t *)&v19->__shared_owners_;
            do
              v25 = __ldxr(v24);
            while (__stxr(v25 + 1, v24));
          }
          InfoFromLinearLattice = quasar::getInfoFromLinearLattice(v8, &v275, v23, v242, 0, 0, (int **)&v288, (int **)&v285, &v282);
          if (v19)
          {
            v27 = (unint64_t *)&v19->__shared_owners_;
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
          if (v284)
            v29 = InfoFromLinearLattice;
          else
            v29 = 0;
          if ((v29 & 1) != 0)
          {
            v273 = 0;
            v274 = 0;
            v272 = 0;
            if (v283 == &v282)
            {
              v30 = 0;
            }
            else
            {
              v30 = 0;
              v31 = v283;
              do
              {
                ++v30;
                v31 = (uint64_t *)v31[1];
              }
              while (v31 != &v282);
            }
            std::vector<quasar::Word>::__init_with_size[abi:ne180100]<std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>>(&v272, (uint64_t)v283, (uint64_t)&v282, v30);
            v32 = (uint64_t)v272;
            v33 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
            v34 = (int *)v285;
            if (v33 == (v286 - (_BYTE *)v285) >> 2)
            {
              if (v273 == v272)
              {
                v40 = 0;
                goto LABEL_60;
              }
              if (v33 <= 1)
                v35 = 1;
              else
                v35 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
              v36 = v272;
              do
              {
                v38 = *(_DWORD *)v36;
                v36 += 88;
                v37 = v38;
                v39 = *v34++;
                if (v37 != v39)
                {
                  if (quasar::gLogLevel >= 2)
                  {
                    v323 = 0u;
                    v324 = 0u;
                    v321 = 0u;
                    v322 = 0u;
                    v319 = 0u;
                    v320 = 0u;
                    v317 = 0u;
                    v318 = 0u;
                    v315 = 0u;
                    v316 = 0u;
                    v313 = 0u;
                    v314 = 0u;
                    v311 = 0u;
                    v312 = 0u;
                    __p = 0u;
                    v310 = 0u;
                    v308 = 0u;
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"words and wordIds have different IDs", 36);
                    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
                  }
                  goto LABEL_168;
                }
                --v35;
              }
              while (v35);
              v40 = 0;
              do
              {
                v41 = *(_DWORD *)(v32 + 80);
                v42 = *(_DWORD *)(v32 + 84);
                if ((v41 & 0x80000000) == 0 || (v42 & 0x80000000) == 0)
                {
                  if (v41 < 0 || v41 > v42)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"(word.startFrame < 0 && word.endFrame < 0) || (0 <= word.startFrame && word.startFrame <= word.endFrame)", 104);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                  }
                  v40 = v40 - v41 + v42 + 1;
                }
                v32 += 88;
              }
              while ((char *)v32 != v273);
LABEL_60:
              v232 = v40;
              std::vector<BOOL>::vector(&v270, v33);
              v43 = (uint64_t)v272;
              v237 = v23;
              if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3)) >= 2)
              {
                v44 = 0;
                v45 = 1;
                while (1)
                {
                  v46 = *(unsigned int *)(v43 + v44 + 84);
                  if ((v46 & 0x80000000) != 0)
                  {
                    v47 = 0;
                  }
                  else
                  {
                    if (v46 >= (v289 - (_BYTE *)v288) >> 2)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    v47 = kaldi::TransitionModel::TransitionIdToPhone(v23, *((_DWORD *)v288 + v46)) == v242;
                  }
                  v48 = v45 >> 6;
                  if (*(_DWORD *)(v43 + v44) != *(_DWORD *)(v43 + v44 + 88))
                    break;
                  if (v47)
                    break;
                  v49 = v43 + v44;
                  v50 = *(int **)(v43 + v44 + 8);
                  if (*(_QWORD *)(v43 + v44 + 16) - (_QWORD)v50 != 4)
                    break;
                  v52 = v49 + 96;
                  v51 = *(_DWORD **)(v49 + 96);
                  if (*(_QWORD *)(v52 + 8) - (_QWORD)v51 != 4)
                    break;
                  v53 = *v50;
                  v54 = (uint64_t *)((char *)v270 + 8 * v48);
                  v55 = 1 << v45;
                  if (v53 != *v51)
                    goto LABEL_73;
                  v56 = *v54 | v55;
LABEL_74:
                  *v54 = v56;
                  ++v45;
                  v43 = (uint64_t)v272;
                  v44 += 88;
                  if (0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3) <= v45)
                    goto LABEL_75;
                }
                v54 = (uint64_t *)((char *)v270 + 8 * v48);
                v55 = 1 << v45;
LABEL_73:
                v56 = *v54 & ~v55;
                goto LABEL_74;
              }
LABEL_75:
              v57 = (*(uint64_t (**)(_QWORD *))(*v8 + 24))(v8);
              if ((_DWORD)v57 != -1)
              {
                v239 = (*(uint64_t (**)(_QWORD *))(*v8 + 160))(v8);
                v58 = 0;
                LODWORD(v59) = 0;
                v244 = 0;
                v60 = 0;
                while (1)
                {
                  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*v8 + 32))(&v308, v8, v57);
                  LODWORD(v277) = DWORD1(v308);
                  LODWORD(__src) = v308;
                  LODWORD(v267) = 2139095040;
                  LODWORD(v254) = 2139095040;
                  v61.n128_u32[0] = v308;
                  v238 = v57;
                  if (*(float *)&v308 == INFINITY)
                  {
                    v61.n128_u32[0] = v277;
                    v62 = (void *)*((_QWORD *)&v308 + 1);
                    v63 = *(float *)&v277 == *(float *)&v254 && (_QWORD)__p == *((_QWORD *)&v308 + 1);
                  }
                  else
                  {
                    v63 = 0;
                    v62 = (void *)*((_QWORD *)&v308 + 1);
                  }
                  v64 = v239 > 0 && v63;
                  if (v62)
                  {
                    *(_QWORD *)&__p = v62;
                    operator delete(v62);
                  }
                  v236 = (int *)v60;
                  if (!v64)
                    break;
                  v277 = &unk_1E5D21420;
                  v280 = 0;
                  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)v8);
                  v65 = v8[1];
                  v278 = *(std::__shared_weak_count **)(*(_QWORD *)(v65 + 64) + 8 * (int)v238);
                  v279 = (char *)(v65 + 8);
                  v66 = v280;
                  v67 = v278[2].__vftable;
                  if (v280 >= 0xAAAAAAAAAAAAAAABLL * ((v278[2].__shared_owners_ - (uint64_t)v67) >> 4))
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"!aiter.Done()", 13);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                  }
                  v68 = (__int128 *)((char *)v67 + 48 * v280);
                  __src = *v68;
                  *(_QWORD *)&v293 = 0;
                  v292 = 0uLL;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v292, *((const void **)v68 + 2), *((_QWORD *)v68 + 3), (uint64_t)(*((_QWORD *)v68 + 3) - *((_QWORD *)v68 + 2)) >> 2);
                  DWORD2(v293) = *((_DWORD *)&v67[1].~__shared_weak_count + 12 * v66);
                  v267 = 0;
                  v268 = 0;
                  v269 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v267, (const void *)v292, *((uint64_t *)&v292 + 1), (uint64_t)(*((_QWORD *)&v292 + 1) - v292) >> 2);
                  v70 = (int *)v267;
                  v69 = v268;
                  if (v267 == v268)
                  {
                    v76 = (char *)v267;
                  }
                  else
                  {
                    do
                    {
                      if (*v70 >= 1)
                      {
                        v71 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
                        if (v71 > (int)v59)
                        {
                          v72 = (int)v59;
                          if (*(_DWORD *)&v272[88 * (int)v59 + 84] >= v58)
                          {
LABEL_97:
                            if (*(_DWORD *)&v272[88 * v72 + 80] <= v58)
                            {
                              if (v271 <= v72)
                                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                              if (((*(_QWORD *)((char *)v270 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v72) & 1) != 0
                                && kaldi::TransitionModel::TransitionIdToPhone(v237, *v70) != v242)
                              {
                                *v70 = 1;
                              }
                              ++v244;
                            }
                          }
                          else
                          {
                            v59 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
                            v73 = &v272[88 * (int)v72 + 172];
                            v74 = v71 - 1;
                            while (v74 != v72)
                            {
                              v75 = *(_DWORD *)v73;
                              v73 += 88;
                              ++v72;
                              if (v75 >= v58)
                              {
                                LODWORD(v59) = v72;
                                goto LABEL_97;
                              }
                            }
                          }
                        }
                        ++v58;
                      }
                      ++v70;
                    }
                    while (v70 != v69);
                    v76 = (char *)v267;
                    v70 = v268;
                  }
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v292, v76, (uint64_t)v70, ((char *)v70 - v76) >> 2);
                  v60 = (uint64_t)v236;
                  if ((_DWORD)__src != DWORD1(__src))
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"arc.ilabel == arc.olabel", 24);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                  }
                  if ((int)__src >= 1)
                  {
                    if (0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3) <= (unint64_t)(int)v236)
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"wordIdxForIOLabels < wordsVec.size()", 36);
                      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                    }
                    if (v271 <= (int)v236)
                      std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                    if (((*(_QWORD *)((char *)v270 + (((unint64_t)(int)v236 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (char)v236) & 1) != 0)
                      *(_QWORD *)&__src = 0;
                    v60 = ((_DWORD)v236 + 1);
                  }
                  fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v277, (float *)&__src);
                  v57 = DWORD2(v293);
                  if (++v280 < 0xAAAAAAAAAAAAAAABLL
                              * ((uint64_t)(v278[2].__shared_owners_ - (unint64_t)v278[2].__vftable) >> 4))
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"aiter.Done()", 12);
                    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                  }
                  if (v267)
                  {
                    v268 = (int *)v267;
                    operator delete(v267);
                  }
                  if ((_QWORD)v292)
                  {
                    *((_QWORD *)&v292 + 1) = v292;
                    operator delete((void *)v292);
                  }
                  --v239;
                }
                (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, __n128))(*v8 + 32))(&v308, v8, v238, v61);
                LODWORD(v277) = DWORD1(v308);
                LODWORD(__src) = v308;
                LODWORD(v267) = 2139095040;
                LODWORD(v254) = 2139095040;
                v77.n128_u32[0] = v308;
                if (*(float *)&v308 == INFINITY)
                {
                  v77.n128_u32[0] = v277;
                  v79 = (void *)*((_QWORD *)&v308 + 1);
                  v78 = *(float *)&v277 != *(float *)&v254 || (_QWORD)__p != *((_QWORD *)&v308 + 1);
                }
                else
                {
                  v78 = 1;
                  v79 = (void *)*((_QWORD *)&v308 + 1);
                }
                if (v79)
                {
                  *(_QWORD *)&__p = v79;
                  operator delete(v79);
                }
                if (!v78)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"lat.Final(s) != kaldi::CompactLatticeWeight::Zero()", 51);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                }
                (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, __n128))(*v8 + 32))(&v308, v8, v238, v77);
                LODWORD(v277) = DWORD1(v308);
                LODWORD(__src) = v308;
                LODWORD(v267) = 2139095040;
                LODWORD(v254) = 2139095040;
                v80.n128_u32[0] = v308;
                if (*(float *)&v308 == INFINITY)
                {
                  v80.n128_u32[0] = v277;
                  v82 = (void *)*((_QWORD *)&v308 + 1);
                  v81 = *(float *)&v277 != *(float *)&v254 || (_QWORD)__p != *((_QWORD *)&v308 + 1);
                }
                else
                {
                  v81 = 1;
                  v82 = (void *)*((_QWORD *)&v308 + 1);
                }
                if (v82)
                {
                  *(_QWORD *)&__p = v82;
                  operator delete(v82);
                }
                if (v81)
                {
                  (*(void (**)(__int128 *__return_ptr, _QWORD *, _QWORD, __n128))(*v8 + 32))(&v308, v8, v238, v80);
                  __src = 0uLL;
                  *(_QWORD *)&v292 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__src, *((const void **)&v308 + 1), __p, (uint64_t)(__p - *((_QWORD *)&v308 + 1)) >> 2);
                  v60 = __src;
                  if ((_QWORD)__src == *((_QWORD *)&__src + 1))
                  {
                    v89 = (char *)__src;
                  }
                  else
                  {
                    v83 = (int *)*((_QWORD *)&__src + 1);
                    do
                    {
                      if (*(int *)v60 >= 1)
                      {
                        v84 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
                        if (v84 > (int)v59)
                        {
                          v85 = (int)v59;
                          if (*(_DWORD *)&v272[88 * (int)v59 + 84] >= v58)
                          {
LABEL_147:
                            if (*(_DWORD *)&v272[88 * v85 + 80] <= v58)
                            {
                              if (v271 <= v85)
                                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                              if (((*(_QWORD *)((char *)v270 + ((v85 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v85) & 1) != 0
                                && kaldi::TransitionModel::TransitionIdToPhone(v237, *(_DWORD *)v60) != v242)
                              {
                                *(_DWORD *)v60 = 1;
                              }
                              ++v244;
                            }
                          }
                          else
                          {
                            v59 = 0x2E8BA2E8BA2E8BA3 * ((v273 - v272) >> 3);
                            v86 = v84 - 1;
                            v87 = &v272[88 * (int)v85 + 172];
                            while (v86 != v85)
                            {
                              ++v85;
                              v88 = *(_DWORD *)v87;
                              v87 += 88;
                              if (v88 >= v58)
                              {
                                LODWORD(v59) = v85;
                                goto LABEL_147;
                              }
                            }
                          }
                        }
                        ++v58;
                      }
                      v60 += 4;
                    }
                    while ((int *)v60 != v83);
                    v60 = *((_QWORD *)&__src + 1);
                    v89 = (char *)__src;
                  }
                  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v308 + 8, v89, v60, (v60 - (uint64_t)v89) >> 2);
                  v325 = v308;
                  v327 = 0;
                  v328 = 0;
                  v326 = 0;
                  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v326, *((const void **)&v308 + 1), __p, (uint64_t)(__p - *((_QWORD *)&v308 + 1)) >> 2);
                  (*(void (**)(_QWORD *, _QWORD, uint64_t *))(*v8 + 184))(v8, v238, &v325);
                  LODWORD(v60) = (_DWORD)v236;
                  if (v326)
                  {
                    v327 = v326;
                    operator delete(v326);
                  }
                  if ((_QWORD)__src)
                  {
                    *((_QWORD *)&__src + 1) = __src;
                    operator delete((void *)__src);
                  }
                  if (*((_QWORD *)&v308 + 1))
                  {
                    *(_QWORD *)&__p = *((_QWORD *)&v308 + 1);
                    operator delete(*((void **)&v308 + 1));
                  }
                }
                if ((int)v60 != (v286 - (_BYTE *)v285) >> 2)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"wordIdxForIOLabels == wordIds.size()", 36);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                }
                if (v58 != (v289 - (_BYTE *)v288) >> 2)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"transitionIdIdx == transitionIds.size()", 39);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                }
                if (v244 != v232)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"numTransitionIdsWithWordsSeen == numTransitionIdsWithWords", 58);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
                }
              }
              if (v270)
                operator delete(v270);
            }
            else if (quasar::gLogLevel >= 2)
            {
              v323 = 0u;
              v324 = 0u;
              v321 = 0u;
              v322 = 0u;
              v319 = 0u;
              v320 = 0u;
              v317 = 0u;
              v318 = 0u;
              v315 = 0u;
              v316 = 0u;
              v313 = 0u;
              v314 = 0u;
              v311 = 0u;
              v312 = 0u;
              __p = 0u;
              v310 = 0u;
              v308 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"words and wordIds have different sizes", 38);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
            }
LABEL_168:
            *(_QWORD *)&v308 = &v272;
            std::vector<quasar::Word>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
          }
          std::__list_imp<quasar::Word>::clear(&v282);
          if (v285)
          {
            v286 = v285;
            operator delete(v285);
          }
          if (v288)
          {
            v289 = v288;
            operator delete(v288);
          }
          v19 = v263;
        }
        else if (quasar::gLogLevel >= 2)
        {
          v323 = 0u;
          v324 = 0u;
          v321 = 0u;
          v322 = 0u;
          v319 = 0u;
          v320 = 0u;
          v317 = 0u;
          v318 = 0u;
          v315 = 0u;
          v316 = 0u;
          v313 = 0u;
          v314 = 0u;
          v311 = 0u;
          v312 = 0u;
          __p = 0u;
          v310 = 0u;
          v308 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"Unexpected transition ID for blank", 34);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
        }
        if (v19)
        {
          v90 = (unint64_t *)&v19->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (!v91)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
      fst::RemoveEpsLocal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)v8);
      v8 += 2;
    }
    while (v8 != v235);
    v92 = *a3;
    *(_BYTE *)(*a3 + 1089) = 0;
    v5 = v233;
    if ((v9 & (quasar::gLogLevel > 3)) != 0)
    {
      v323 = 0u;
      v324 = 0u;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v317 = 0u;
      v318 = 0u;
      v315 = 0u;
      v316 = 0u;
      v313 = 0u;
      v314 = 0u;
      v311 = 0u;
      v312 = 0u;
      __p = 0u;
      v310 = 0u;
      v308 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"Removed silence labels from first pass lattice", 46);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v308);
      v92 = *a3;
    }
  }
  if ((*(int (**)(_QWORD))(**(_QWORD **)(v92 + 152) + 160))(*(_QWORD *)(v92 + 152)) >= 1)
  {
    v95 = *(_QWORD *)(*a3 + 152);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 24))(v95);
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v95 + 32))(&v308, v95, v96);
    LODWORD(v277) = DWORD1(v308);
    LODWORD(__src) = v308;
    LODWORD(v325) = 2139095040;
    LODWORD(v288) = 2139095040;
    v97.n128_u32[0] = v308;
    v98 = *(float *)&v308 != INFINITY
       || (v97.n128_u32[0] = v277, *(float *)&v277 != *(float *)&v288)
       || (_QWORD)__p != *((_QWORD *)&v308 + 1);
    if (*((_QWORD *)&v308 + 1))
    {
      *(_QWORD *)&__p = *((_QWORD *)&v308 + 1);
      operator delete(*((void **)&v308 + 1));
    }
    if (v98)
    {
      v99 = *(_QWORD *)(*a3 + 152);
      v100 = (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v99 + 24))(v99, v97);
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v99 + 32))(&__src, v99, v100);
      v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
      v258 = vdup_n_s32(0x7F800000u);
      v260 = 0;
      v261 = 0;
      v259 = 0;
      (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)v99 + 184))(v99, v101, &v258);
      if (v259)
      {
        v260 = v259;
        operator delete(v259);
      }
      v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 200))(v99);
      v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v99 + 24))(v99);
      LODWORD(v308) = *(_DWORD *)(*(_QWORD *)(a2 + 216) + 24);
      DWORD1(v308) = v308;
      *((_QWORD *)&v308 + 1) = __src;
      *(_QWORD *)&v310 = 0;
      __p = 0uLL;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *((const void **)&__src + 1), v292, (uint64_t)(v292 - *((_QWORD *)&__src + 1)) >> 2);
      DWORD2(v310) = v102;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v99 + 208))(v99, v103, &v308);
      if ((_QWORD)__p)
      {
        *((_QWORD *)&__p + 1) = __p;
        operator delete((void *)__p);
      }
      *(_OWORD *)v256 = 0u;
      v257 = 0u;
      (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v99 + 184))(v99, v102, v256);
      if (v256[1])
      {
        *(void **)&v257 = v256[1];
        operator delete(v256[1]);
      }
      fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(v99);
      fst::NbestAsFsts<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(*(_QWORD *)(*a3 + 152), *(int *)(v5 + 944), (uint64_t *)&v264);
      if (*((_QWORD *)&__src + 1))
      {
        *(_QWORD *)&v292 = *((_QWORD *)&__src + 1);
        operator delete(*((void **)&__src + 1));
      }
    }
  }
  v104 = (uint64_t)v264;
  v105 = v265;
  v106 = (int *)v264[1];
  ++v106[14];
  v267 = &unk_1E5D28AB0;
  v268 = v106;
  if ((unint64_t)v105 - v104 >= 0x11)
  {
    v107 = 1;
    v108 = 16;
    do
    {
      fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v267, v104 + v108);
      ++v107;
      v104 = (uint64_t)v264;
      v108 += 16;
    }
    while (v107 < ((char *)v265 - (char *)v264) >> 4);
  }
  kaldi::quasar::DeterminizeCompactLattice((uint64_t)&v267);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v275);
  fst::ConvertLatticeSkinny<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>,int>((uint64_t)&v267, (uint64_t)&v275);
  v109 = *(_QWORD *)(a2 + 216);
  v240 = (_QWORD *)(a2 + 216);
  v110 = *(_QWORD *)(v5 + 704);
  if (v110 != v109)
    std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)(v110 + 32), *(int **)(v109 + 32), (int *)(v109 + 40));
  if (quasar::gLogLevel >= 5)
  {
    v323 = 0u;
    v324 = 0u;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    v312 = 0u;
    __p = 0u;
    v310 = 0u;
    v308 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"there are ", 10);
    v111 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)" unpronounced words", 19);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v308);
  }
  v112 = (std::__shared_weak_count *)operator new(0x30uLL);
  v112->__shared_weak_owners_ = 0;
  v112->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41760;
  v112->__shared_owners_ = 0;
  v112[1].__vftable = 0;
  v113 = (kaldi::LatticeScoreCache *)&v112[1];
  v112[1].__shared_owners_ = 0;
  v112[1].__shared_weak_owners_ = 0;
  v254 = &v112[1].__vftable;
  v255 = v112;
  v115 = *(kaldi::OnlineFeatureMatrix **)a2;
  v114 = *(std::__shared_weak_count **)(a2 + 8);
  v251 = *(kaldi::OnlineFeatureMatrix **)a2;
  v252 = v114;
  if (v114)
  {
    v116 = (unint64_t *)&v114->__shared_owners_;
    do
      v117 = __ldxr(v116);
    while (__stxr(v117 + 1, v116));
  }
  v246 = *(_DWORD *)(*a3 + 576);
  LmeDataStreams = (uint64_t *)quasar::SpeechRequestData::getLmeDataStreams(*a4);
  v119 = *(quasar::SymbolTableList **)(*a3 + 472);
  v120 = *(_DWORD *)(*v240 + 24);
  v121 = (*(uint64_t (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v115 + 48))(v115);
  v122 = (*(uint64_t (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v115 + 32))(v115);
  v123 = (*(uint64_t (**)(kaldi::OnlineFeatureMatrix *))(*(_QWORD *)v115 + 40))(v115);
  quasar::RealignAmFusionDecoder::redecodeLattice(v233, v121, v122, v123, v246, (uint64_t)&v275, v113, v109 + 32, &v253, LmeDataStreams, v119, v120);
  if (v114)
  {
    v125 = (unint64_t *)&v114->__shared_owners_;
    do
      v126 = __ldaxr(v125);
    while (__stlxr(v126 - 1, v125));
    if (!v126)
    {
      ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
      std::__shared_weak_count::__release_weak(v114);
    }
  }
  if (!v253)
  {
    if (quasar::gLogLevel >= 2)
    {
      v323 = 0u;
      v324 = 0u;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v317 = 0u;
      v318 = 0u;
      v315 = 0u;
      v316 = 0u;
      v313 = 0u;
      v314 = 0u;
      v311 = 0u;
      v312 = 0u;
      __p = 0u;
      v310 = 0u;
      v308 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"unable to redecode lattice; remove it for now",
        45);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
    }
    v93 = 2;
    goto LABEL_357;
  }
  v127 = *(_QWORD *)(*a3 + 640);
  if (v127)
  {
    v128 = *(_DWORD *)(*v240 + 24);
    v249 = 0;
    v250 = 0;
    v129 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst(v127, v128, v253, &v249, 0) ^ 1;
    v130 = v250;
    if (v250)
    {
      v131 = (unint64_t *)&v250->__shared_owners_;
      do
        v132 = __ldaxr(v131);
      while (__stlxr(v132 - 1, v131));
      if (!v132)
      {
        ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
        std::__shared_weak_count::__release_weak(v130);
      }
    }
  }
  else
  {
    v129 = 1;
  }
  if (v129 && quasar::gLogLevel >= 2)
  {
    v323 = 0u;
    v324 = 0u;
    v321 = 0u;
    v322 = 0u;
    v319 = 0u;
    v320 = 0u;
    v317 = 0u;
    v318 = 0u;
    v315 = 0u;
    v316 = 0u;
    v313 = 0u;
    v314 = 0u;
    v311 = 0u;
    v312 = 0u;
    __p = 0u;
    v310 = 0u;
    v308 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"can not perform LM rescoring on the lattice", 43);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
  }
  v272 = 0;
  v273 = 0;
  v274 = 0;
  v245 = *a3;
  LOBYTE(v328) = 1;
  kaldi::Timer::Reset((kaldi::Timer *)&v325, v124);
  v329 = 0;
  if ((*(_DWORD *)(a2 + 848) & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"decoderPassData.blankLabel >= 0", 31);
    goto LABEL_375;
  }
  if (((*((uint64_t (**)(void **, uint64_t, _QWORD))v267 + 8))(&v267, 0x10000000, 0) & 0x10000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"lattice.Properties(fst::kILabelSorted, false) & fst::kILabelSorted", 66);
LABEL_375:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v308);
  }
  (*((void (**)(void **, uint64_t, uint64_t))v267 + 8))(&v267, 0x40000, 1);
  kaldi::MinimumBayesRisk::MinimumBayesRisk(&v308, &v267, 0, *(unsigned int *)(*v240 + 24), 0xFFFFFFFFLL);
  v134 = (uint64_t)v272;
  for (j = (uint64_t)v273; j != v134; std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100]((uint64_t)&v274, j))j -= 72;
  v273 = (char *)v134;
  v135 = *((_QWORD *)v268 + 9) - *((_QWORD *)v268 + 8);
  if ((int)(v135 >> 3) >= 1)
  {
    v136 = 0;
    v247 = (v135 >> 3);
    do
    {
      v277 = &unk_1E5D21420;
      v280 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v267);
      v137 = *(std::__shared_weak_count **)(*((_QWORD *)v268 + 8) + 8 * v136);
      v278 = v137;
      v279 = (char *)(v268 + 2);
      for (k = v280; ; k = ++v280)
      {
        v139 = v137[2].__vftable;
        if (k >= 0xAAAAAAAAAAAAAAABLL * ((v137[2].__shared_owners_ - (uint64_t)v139) >> 4))
          break;
        v140 = (__int128 *)((char *)v139 + 48 * k);
        __src = *v140;
        *(_QWORD *)&v293 = 0;
        v292 = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v292, *((const void **)v140 + 2), *((_QWORD *)v140 + 3), (uint64_t)(*((_QWORD *)v140 + 3) - *((_QWORD *)v140 + 2)) >> 2);
        v141 = v273;
        DWORD2(v293) = *((_DWORD *)&v139[1].~__shared_weak_count + 12 * k);
        DWORD1(__src) = 954437177 * ((unint64_t)(v273 - v272) >> 3);
        if ((unint64_t)v273 >= v274)
        {
          v142 = std::vector<quasar::FirstPassArcDetail>::__emplace_back_slow_path<int &>((uint64_t *)&v272, &__src);
        }
        else
        {
          *(_DWORD *)v273 = __src;
          v141[4] = 0;
          *((_DWORD *)v141 + 2) = 1065353216;
          v141[12] = 0;
          *((_OWORD *)v141 + 1) = 0u;
          *((_OWORD *)v141 + 2) = 0u;
          *((_OWORD *)v141 + 3) = 0u;
          *((_DWORD *)v141 + 16) = 0;
          v142 = (uint64_t)(v141 + 72);
        }
        v273 = (char *)v142;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v277, (float *)&__src);
        if ((_QWORD)v292)
        {
          *((_QWORD *)&v292 + 1) = v292;
          operator delete((void *)v292);
        }
        v137 = v278;
      }
      ++v136;
    }
    while (v136 != v247);
  }
  v143 = v316;
  v144 = *((_QWORD *)&v315 + 1);
  if ((_QWORD)v316 != *((_QWORD *)&v315 + 1))
  {
    v145 = 0;
    do
    {
      v146 = (uint64_t *)(v144 + 24 * v145);
      v147 = *v146;
      v148 = v146[1];
      if (*v146 != v148)
      {
        do
        {
          if (*(int *)v147 >= 1)
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v317 + 1) - v317) >> 3) <= v145)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v149 = std::map<int,std::set<int>>::at(v317 + 24 * v145, (int *)v147);
            v152 = *v149;
            v150 = v149 + 1;
            v151 = (_QWORD *)v152;
            if ((uint64_t *)v152 != v150)
            {
              v153 = (uint64_t)v272;
              v154 = 0x8E38E38E38E38E39 * ((v273 - v272) >> 3);
              do
              {
                v155 = *((int *)v151 + 7);
                if (v154 <= v155)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                if (*(_DWORD *)(v153 + 72 * (int)v155) != *(_DWORD *)v147)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"arcDetail.wordId == wordId", 26);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
                }
                v156 = v153 + 72 * (int)v155;
                v158 = *(unsigned __int8 *)(v156 + 4);
                v157 = (_BYTE *)(v156 + 4);
                if (v158)
                {
                  v159 = v153 + 72 * (int)v155;
                  v160 = *(float *)(v159 + 8);
                  if (v160 < *(float *)(v147 + 4))
                    v160 = *(float *)(v147 + 4);
                  *(float *)(v159 + 8) = v160;
                }
                else
                {
                  *(_DWORD *)(v153 + 72 * (int)v155 + 8) = *(_DWORD *)(v147 + 4);
                  *v157 = 1;
                }
                v161 = (uint64_t *)v151[1];
                if (v161)
                {
                  do
                  {
                    v162 = v161;
                    v161 = (uint64_t *)*v161;
                  }
                  while (v161);
                }
                else
                {
                  do
                  {
                    v162 = (uint64_t *)v151[2];
                    v163 = *v162 == (_QWORD)v151;
                    v151 = v162;
                  }
                  while (!v163);
                }
                v151 = v162;
              }
              while (v162 != v150);
            }
          }
          v147 += 8;
        }
        while (v147 != v148);
        v143 = v316;
        v144 = *((_QWORD *)&v315 + 1);
      }
      ++v145;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v143 - v144) >> 3) > v145);
  }
  v248 = (kaldi::TransitionModel *)quasar::PTree::begin(*(quasar::PTree **)(a2 + 32));
  v164 = v264;
  for (m = v265; v164 != m; v164 += 2)
  {
    v289 = 0;
    v288 = 0;
    v290 = 0;
    v286 = 0;
    v285 = 0;
    v287 = 0;
    v282 = (uint64_t)&v282;
    v283 = &v282;
    v284 = 0;
    v165 = *(std::__shared_weak_count **)(a2 + 224);
    v270 = *(void **)(a2 + 216);
    v271 = (unint64_t)v165;
    if (v165)
    {
      v166 = (unint64_t *)&v165->__shared_owners_;
      do
        v167 = __ldxr(v166);
      while (__stxr(v167 + 1, v166));
    }
    v168 = quasar::getInfoFromLinearLattice(v164, (kaldi::WordBoundaryInfo **)&v270, v248, *(_DWORD *)(a2 + 848), *(_QWORD *)(a2 + 168), *(kaldi::LatticeScoreCache **)(v245 + 488), (int **)&v288, (int **)&v285, &v282);
    v169 = v168;
    if (!v165)
      goto LABEL_276;
    v170 = (unint64_t *)&v165->__shared_owners_;
    do
      v171 = __ldaxr(v170);
    while (__stlxr(v171 - 1, v170));
    if (!v171)
    {
      ((void (*)(std::__shared_weak_count *))v165->__on_zero_shared)(v165);
      std::__shared_weak_count::__release_weak(v165);
      if ((v169 & 1) != 0)
      {
LABEL_277:
        fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SortedMatcher((uint64_t)&v277, (uint64_t)&v267, 0, 1);
        v172 = (*((uint64_t (**)(void **))v267 + 3))(&v267);
        fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState((uint64_t)&v277, v172);
        for (n = (uint64_t)v283; (uint64_t *)n != &v282; n = *(_QWORD *)(n + 8))
        {
          if (!fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::Find((uint64_t)&v277, *(_DWORD *)(n + 16)))
          {
            if (quasar::gLogLevel >= 2)
            {
              v306 = 0u;
              v307 = 0u;
              v304 = 0u;
              v305 = 0u;
              v302 = 0u;
              v303 = 0u;
              v300 = 0u;
              v301 = 0u;
              v298 = 0u;
              v299 = 0u;
              v296 = 0u;
              v297 = 0u;
              v294 = 0u;
              v295 = 0u;
              v292 = 0u;
              v293 = 0u;
              __src = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"Could not find arcDetail", 24);
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__src);
            }
            break;
          }
          v174 = v281;
          if (!v281[48])
            v174 = (_BYTE *)(*(_QWORD *)v280 + 48 * *(_QWORD *)(v280 + 16));
          v175 = *((int *)v174 + 1);
          v176 = (uint64_t)v272;
          if (0x8E38E38E38E38E39 * ((v273 - v272) >> 3) <= v175)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v177 = &v272[72 * (int)v175];
          v179 = v177[12];
          v178 = v177 + 12;
          if (!v179)
          {
            v180 = &v272[72 * (int)v175 + 16];
            if (v180 != (char *)(n + 24))
              std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v180, *(char **)(n + 24), *(_QWORD *)(n + 32), (uint64_t)(*(_QWORD *)(n + 32) - *(_QWORD *)(n + 24)) >> 2);
            v181 = (std::vector<std::wstring> *)(v176 + 72 * (int)v175 + 40);
            if (v181 != (std::vector<std::wstring> *)(n + 48))
              std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v181, *(std::string **)(n + 48), *(__int128 **)(n + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(n + 56) - *(_QWORD *)(n + 48)) >> 3));
            v182 = *(float **)(n + 72);
            v183 = 0.0;
            while (v182 != *(float **)(n + 80))
            {
              v184 = *v182++;
              v183 = v183 + v184;
            }
            *(float *)(v176 + 72 * (int)v175 + 64) = v183;
            *v178 = 1;
          }
          fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::SetState((uint64_t)&v277, *((_DWORD *)v174 + 10));
        }
        fst::SortedMatcher<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::~SortedMatcher(&v277);
      }
    }
    else
    {
LABEL_276:
      if ((v168 & 1) != 0)
        goto LABEL_277;
    }
    std::__list_imp<quasar::Word>::clear(&v282);
    if (v285)
    {
      v286 = v285;
      operator delete(v285);
    }
    if (v288)
    {
      v289 = v288;
      operator delete(v288);
    }
  }
  v185 = v233;
  if (quasar::gLogLevel > 4)
  {
    v186 = (uint64_t)v272;
    if (v272 != v273)
    {
      v187 = 0;
      v188 = 0;
      do
      {
        if (!*(_BYTE *)(v186 + 4))
          ++v188;
        if (!*(_BYTE *)(v186 + 12))
          ++v187;
        v186 += 72;
      }
      while ((char *)v186 != v273);
    }
    v306 = 0u;
    v307 = 0u;
    v304 = 0u;
    v305 = 0u;
    v302 = 0u;
    v303 = 0u;
    v300 = 0u;
    v301 = 0u;
    v298 = 0u;
    v299 = 0u;
    v296 = 0u;
    v297 = 0u;
    v294 = 0u;
    v295 = 0u;
    v292 = 0u;
    v293 = 0u;
    __src = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    v189 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"ArcDetails: ", 12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v189, (uint64_t)" total ", 7);
    v190 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v190, (uint64_t)" numNoPosterior ", 16);
    v191 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v191, (uint64_t)" numNoLinearDetails ", 20);
    v192 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v192, (uint64_t)" anyNoPosterior ", 16);
    v193 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v193, (uint64_t)" anyNoLinearDetails ", 20);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__src);
    if (quasar::gLogLevel >= 5)
    {
      v306 = 0u;
      v307 = 0u;
      v304 = 0u;
      v305 = 0u;
      v302 = 0u;
      v303 = 0u;
      v300 = 0u;
      v301 = 0u;
      v298 = 0u;
      v299 = 0u;
      v296 = 0u;
      v297 = 0u;
      v294 = 0u;
      v295 = 0u;
      v292 = 0u;
      v293 = 0u;
      __src = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"addDetailsToFirstPassLattice took ", 34);
      kaldi::Timer::GetSeconds((kaldi::Timer *)5, v194);
      v195 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v195, (uint64_t)" seconds", 8);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__src);
    }
  }
  kaldi::MinimumBayesRisk::~MinimumBayesRisk((kaldi::MinimumBayesRisk *)&v308);
  quasar::RealignAmFusionDecoder::updateResultLatticeWithRescoreLatticeNew(v233, v253, (unsigned int (**)(_QWORD))&v267, (uint64_t *)&v272, *(_DWORD *)(*v240 + 24), (uint64_t *)&v308, *(float *)(v233 + 948), *(float *)(v233 + 952));
  v277 = (_QWORD *)v308;
  if (!(_QWORD)v308)
  {
    v278 = 0;
    goto LABEL_322;
  }
  v196 = (std::__shared_weak_count *)operator new();
  v197 = (std::__shared_weak_count_vtbl *)v308;
  v196->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D46118;
  v196->__shared_owners_ = 0;
  v196->__shared_weak_owners_ = 0;
  v196[1].__vftable = v197;
  v278 = v196;
  if (!v277)
  {
LABEL_322:
    if (quasar::gLogLevel >= 2)
    {
      v323 = 0u;
      v324 = 0u;
      v321 = 0u;
      v322 = 0u;
      v319 = 0u;
      v320 = 0u;
      v317 = 0u;
      v318 = 0u;
      v315 = 0u;
      v316 = 0u;
      v313 = 0u;
      v314 = 0u;
      v311 = 0u;
      v312 = 0u;
      __p = 0u;
      v310 = 0u;
      v308 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v308);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v308, (uint64_t)"unable to merge aligned lattice; remove it for now",
        50);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v308);
    }
    v93 = 2;
    goto LABEL_350;
  }
  v198 = *a3;
  v199 = *(_QWORD *)(*a3 + 152);
  v200 = v277[2];
  ++*(_DWORD *)(v200 + 56);
  v201 = *(_DWORD **)(v199 + 8);
  if (v201)
  {
    v202 = v199;
    v203 = v201[14] - 1;
    v201[14] = v203;
    if (!v203)
    {
      (*(void (**)(_DWORD *))(*(_QWORD *)v201 + 8))(v201);
      v198 = *a3;
      v202 = *(_QWORD *)(*a3 + 152);
    }
  }
  else
  {
    v202 = v199;
  }
  *(_QWORD *)(v199 + 8) = v200;
  v204 = *(_QWORD *)(*(_QWORD *)(v202 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(v202 + 8) + 64);
  if ((int)(v204 >> 3) >= 1)
  {
    v205 = 0;
    v206 = (v204 >> 3);
    do
    {
      v207 = *(_QWORD *)(*a3 + 152);
      *(_QWORD *)&__src = &unk_1E5D21420;
      *((_QWORD *)&v292 + 1) = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v207);
      v208 = *(_QWORD *)(v207 + 8);
      v209 = *(_QWORD *)(*(_QWORD *)(v208 + 64) + 8 * v205);
      *((_QWORD *)&__src + 1) = v209;
      *(_QWORD *)&v292 = v208 + 8;
      for (ii = *((_QWORD *)&v292 + 1); ; ii = ++*((_QWORD *)&v292 + 1))
      {
        v211 = *(_QWORD *)(v209 + 48);
        if (ii >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v209 + 56) - v211) >> 4))
          break;
        v212 = v211 + 48 * ii;
        v308 = *(_OWORD *)v212;
        *(_QWORD *)&v310 = 0;
        __p = 0uLL;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v212 + 16), *(_QWORD *)(v212 + 24), (uint64_t)(*(_QWORD *)(v212 + 24) - *(_QWORD *)(v212 + 16)) >> 2);
        DWORD2(v310) = *(_DWORD *)(v211 + 48 * ii + 40);
        DWORD1(v308) = v308;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&__src, (float *)&v308);
        if ((_QWORD)__p)
        {
          *((_QWORD *)&__p + 1) = __p;
          operator delete((void *)__p);
        }
        v209 = *((_QWORD *)&__src + 1);
      }
      ++v205;
    }
    while (v205 != v206);
    v198 = *a3;
    v185 = v233;
  }
  v308 = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v198 + 168, &v308);
  v213 = (std::__shared_weak_count *)*((_QWORD *)&v308 + 1);
  if (*((_QWORD *)&v308 + 1))
  {
    v214 = (unint64_t *)(*((_QWORD *)&v308 + 1) + 8);
    do
      v215 = __ldaxr(v214);
    while (__stlxr(v215 - 1, v214));
    if (!v215)
    {
      ((void (*)(std::__shared_weak_count *))v213->__on_zero_shared)(v213);
      std::__shared_weak_count::__release_weak(v213);
    }
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 336), (uint64_t *)&v277);
  v216 = *a3;
  *(_BYTE *)(v216 + 864) = 1;
  if (*(_BYTE *)(v216 + 200))
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v216 + 184);
    *(_BYTE *)(v216 + 200) = 0;
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v308);
  kaldi::CompactLatticeShortestPath(*(_QWORD **)(*a3 + 152), (uint64_t)&v308, 0, (uint64_t *)(*a3 + 448));
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&__src);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v308, (uint64_t)&__src, 1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(*a3 + 488), (uint64_t *)&v254);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 80), (uint64_t *)(v185 + 1008));
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(v185 + 752);
  v217 = *(_QWORD *)(v185 + 760);
  *(_WORD *)(a2 + 112) = *(_WORD *)(v185 + 768);
  *(_QWORD *)(a2 + 104) = v217;
  std::vector<BOOL>::operator=((void **)(a2 + 120), v185 + 776);
  if (a2 + 96 != v185 + 752)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a2 + 144), *(char **)(v185 + 800), *(_QWORD *)(v185 + 808), (uint64_t)(*(_QWORD *)(v185 + 808) - *(_QWORD *)(v185 + 800)) >> 2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(v185 + 552));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v240, (uint64_t *)(v185 + 704));
  v93 = quasar::Decoder::reportResults((uint64_t)&__src, a3, (uint64_t)a4, a2);
  *(_QWORD *)&__src = &unk_1E5D25580;
  v218 = *((_QWORD *)&__src + 1);
  if (*((_QWORD *)&__src + 1))
  {
    v219 = *(_DWORD *)(*((_QWORD *)&__src + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&__src + 1) + 56) = v219;
    if (!v219)
      (*(void (**)(uint64_t))(*(_QWORD *)v218 + 8))(v218);
  }
  *(_QWORD *)&v308 = &unk_1E5D25800;
  v220 = *((_QWORD *)&v308 + 1);
  if (*((_QWORD *)&v308 + 1))
  {
    v221 = *(_DWORD *)(*((_QWORD *)&v308 + 1) + 56) - 1;
    *(_DWORD *)(*((_QWORD *)&v308 + 1) + 56) = v221;
    if (!v221)
      (*(void (**)(uint64_t))(*(_QWORD *)v220 + 8))(v220);
  }
LABEL_350:
  v222 = v278;
  if (v278)
  {
    v223 = (unint64_t *)&v278->__shared_owners_;
    do
      v224 = __ldaxr(v223);
    while (__stlxr(v224 - 1, v223));
    if (!v224)
    {
      ((void (*)(std::__shared_weak_count *))v222->__on_zero_shared)(v222);
      std::__shared_weak_count::__release_weak(v222);
    }
  }
  *(_QWORD *)&v308 = &v272;
  std::vector<quasar::FirstPassArcDetail>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
  if (v253)
    (*(void (**)(_QWORD *))(*v253 + 8))(v253);
LABEL_357:
  v225 = v255;
  if (v255)
  {
    v226 = (unint64_t *)&v255->__shared_owners_;
    do
      v227 = __ldaxr(v226);
    while (__stlxr(v227 - 1, v226));
    if (!v227)
    {
      ((void (*)(std::__shared_weak_count *))v225->__on_zero_shared)(v225);
      std::__shared_weak_count::__release_weak(v225);
    }
  }
  v275 = (kaldi::WordBoundaryInfo *)&unk_1E5D256C0;
  v228 = v276;
  if (v276)
  {
    v229 = LODWORD(v276[2].__shared_owners_) - 1;
    LODWORD(v276[2].__shared_owners_) = v229;
    if (!v229)
      ((void (*)(std::__shared_weak_count *))v228->~__shared_weak_count_0)(v228);
  }
  v267 = &unk_1E5D25800;
  v230 = v268;
  if (v268)
  {
    v231 = v268[14] - 1;
    v268[14] = v231;
    if (!v231)
      (*(void (**)(int *))(*(_QWORD *)v230 + 8))(v230);
  }
LABEL_183:
  *(_QWORD *)&v308 = &v264;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v308);
  return v93;
}

void fst::RemoveEpsLocal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *__p;
  void *v5;

  fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsLocalClass(&v1, a1);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
  if (v2)
  {
    v3 = v2;
    operator delete(v2);
  }
}

void fst::ConvertLatticeSkinny<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>,int>(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12[4];
  _QWORD v13[3];
  _DWORD *v14;
  unint64_t v15;
  uint64_t v16;
  void *__p;
  void *v18;
  float v19;
  int v20;

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v4 < 1)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v11);
    return;
  }
  v5 = v4;
  v6 = v4;
  do
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    --v6;
  }
  while (v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, v7);
  v8 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v16, a1, v8);
    v12[0] = *((float *)&v16 + 1);
    LODWORD(v13[0]) = v16;
    v20 = 2139095040;
    v19 = INFINITY;
    if (*(float *)&v16 != INFINITY || v12[0] != v19 || v18 != __p)
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)a2 + 184))(a2, v8, 0.0);
    v15 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, v8, v13);
    while (1)
    {
      if (!v13[0])
      {
        if (v15 >= v13[2])
          goto LABEL_22;
LABEL_16:
        v9 = v13[1] + 48 * v15;
        goto LABEL_17;
      }
      if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v13[0] + 24))(v13[0]))
        break;
      if (!v13[0])
        goto LABEL_16;
      v9 = (*(uint64_t (**)(void))(*(_QWORD *)v13[0] + 32))();
LABEL_17:
      v12[0] = *(float *)v9;
      v12[1] = v12[0];
      v10 = *(float *)(v9 + 40);
      v12[2] = 0.0;
      v12[3] = v10;
      (*(void (**)(uint64_t, uint64_t, float *))(*(_QWORD *)a2 + 208))(a2, v8, v12);
      if (v13[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v13[0] + 40))(v13[0]);
      else
        ++v15;
    }
    if (v13[0])
    {
      (*(void (**)(void))(*(_QWORD *)v13[0] + 8))();
      goto LABEL_24;
    }
LABEL_22:
    if (v14)
      --*v14;
LABEL_24:
    if (__p)
    {
      v18 = __p;
      operator delete(__p);
    }
    v8 = (v8 + 1);
  }
  while ((_DWORD)v8 != v5);
}

void sub_1ADCCBBEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::RealignAmFusionDecoder::redecodeLattice@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, kaldi::LatticeScoreCache *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, quasar::SymbolTableList *a8@<X7>, _QWORD *a9@<X8>, __int32 a10)
{
  uint64_t v17;
  int v18;
  int v19;

  v17 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
  v18 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 32))(*a2);
  v19 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 40))(*a2);
  return quasar::RealignAmFusionDecoder::redecodeLattice(a1, v17, v18, v19, a3, a4, a5, a6, a9, a7, a8, a10);
}

uint64_t quasar::RealignAmFusionDecoder::updateResultLatticeWithRescoreLatticeNew@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int (**a3)(_QWORD)@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>, float a7@<S0>, float a8@<S1>)
{
  _QWORD *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  int v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  char v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t (***v59)(_QWORD, uint64_t, _QWORD *);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 *v66;
  _QWORD *v67;
  uint64_t v68;
  int v69;
  uint64_t v71;
  uint64_t v72;
  _QWORD v75[2];
  void *v76;
  void *v77;
  uint64_t v78;
  int v79;
  void *v80;
  void *v81;
  void *v82;
  uint64_t v83;
  void *v84[2];
  void *v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  void **v101;
  uint64_t v102;
  void *__p;
  void *v104;
  uint64_t v105;
  int v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t *v111;
  _QWORD *v112[2];
  __int128 v113;
  __int128 v114;
  int v115;
  char **v116;
  std::__shared_weak_count *v117;
  unsigned int (**v118[2])(_QWORD);
  int v119;
  float v120;
  int v121;
  int v122[3];

  v119 = a5;
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 64))(a2, 0x40000, 1);
  (*((void (**)(unsigned int (**)(_QWORD), uint64_t, uint64_t))*a3 + 8))(a3, 0x40000, 1);
  std::vector<std::vector<double>>::vector(v84, 2uLL);
  v101 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v84[0], 2uLL, &v101);
  v101 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v84[0] + 24, 2uLL, &v101);
  v13 = v84[0];
  **(double **)v84[0] = a8;
  *(double *)(v13[3] + 8) = a8;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v84, (uint64_t)a2);
  v101 = v84;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v101);
  std::vector<std::vector<double>>::vector(v84, 2uLL);
  v101 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v84[0], 2uLL, &v101);
  v101 = 0;
  std::vector<fst::LatticeWeightTpl<float>>::resize((uint64_t)v84[0] + 24, 2uLL, &v101);
  v14 = v84[0];
  **(double **)v84[0] = a7;
  *(double *)(v14[3] + 8) = a7;
  fst::ScaleLattice<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,double>((double ***)v84, (uint64_t)a3);
  v101 = v84;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v101);
  fst::ArcSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ILabelCompare<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t)a3);
  v118[0] = (unsigned int (**)(_QWORD))&unk_1E5D22358;
  v118[1] = a3;
  (*((void (**)(unsigned int (**)(_QWORD), uint64_t, uint64_t))*a3 + 8))(a3, 268697600, 1);
  v116 = 0;
  v117 = 0;
  kaldi::RescoreCompactLatticeWithDeterministicOnDemandCompactLattice(v118, v119, a2, &v116, 0);
  v15 = v117;
  if (v117)
  {
    p_shared_owners = (unint64_t *)&v117->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v113 = 0u;
  v114 = 0u;
  v115 = 1065353216;
  v112[0] = 0;
  v112[1] = 0;
  v111 = (uint64_t *)v112;
  v18 = v119;
  v84[0] = &v119;
  v19 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v113, &v119, (uint64_t)&std::piecewise_construct, (_DWORD **)v84);
  *((_DWORD *)v19 + 5) = v18;
  *((_DWORD *)v19 + 6) = -1;
  v20 = *(_QWORD *)(a2[1] + 72) - *(_QWORD *)(a2[1] + 64);
  if ((int)(v20 >> 3) >= 1)
  {
    v21 = 0;
    v71 = (v20 >> 3);
    do
    {
      v107 = &unk_1E5D21420;
      v110 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)a2);
      v22 = a2[1];
      v23 = *(_QWORD *)(*(_QWORD *)(v22 + 64) + 8 * v21);
      v108 = v23;
      v109 = v22 + 8;
      for (i = v110; ; i = ++v110)
      {
        v25 = *(_QWORD *)(v23 + 48);
        if (i >= 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v23 + 56) - v25) >> 4))
          break;
        v26 = v25 + 48 * i;
        v101 = *(void ***)v26;
        v102 = *(_QWORD *)(v26 + 8);
        v104 = 0;
        v105 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)(v26 + 16), *(_QWORD *)(v26 + 24), (uint64_t)(*(_QWORD *)(v26 + 24) - *(_QWORD *)(v26 + 16)) >> 2);
        v106 = *(_DWORD *)(v25 + 48 * i + 40);
        v27 = (int)v101;
        if ((_DWORD)v101 == v119)
        {
          v122[0] = (int)v101;
        }
        else
        {
          v122[0] = DWORD2(v114);
          v28 = HIDWORD(v101);
          v84[0] = v122;
          v29 = std::__hash_table<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::pair<int,kaldi::quasar::ClassLmSymbolType>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v113, v122, (uint64_t)&std::piecewise_construct, (_DWORD **)v84);
          *((_DWORD *)v29 + 5) = v27;
          *((_DWORD *)v29 + 6) = v28;
        }
        v30 = *(_QWORD *)(a1 + 704);
        v33 = *(_QWORD *)(v30 + 40);
        v31 = v30 + 40;
        v32 = v33;
        if (v33)
        {
          v34 = v31;
          do
          {
            v35 = *(_DWORD *)(v32 + 28);
            v36 = v35 < (int)v101;
            if (v35 >= (int)v101)
              v37 = (uint64_t *)v32;
            else
              v37 = (uint64_t *)(v32 + 8);
            if (!v36)
              v34 = v32;
            v32 = *v37;
          }
          while (*v37);
          if (v34 != v31 && (int)v101 >= *(_DWORD *)(v34 + 28))
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v111, v122, v122);
        }
        if (v122[0] <= 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"acceptorLabel > 0", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v84);
        }
        LODWORD(v101) = v122[0];
        HIDWORD(v101) = v122[0];
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v107, (float *)&v101);
        if (__p)
        {
          v104 = __p;
          operator delete(__p);
        }
        v23 = v108;
      }
      ++v21;
    }
    while (v21 != v71);
  }
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v101);
  v38 = quasar::ForceAlignDecoderBase::wordAlignLattice(a1, *(_QWORD *)(a1 + 1008), (uint64_t)a2, (uint64_t)&v101, (uint64_t)&v111);
  v39 = a6;
  if ((v38 & 1) != 0)
  {
    kaldi::TopSortCompactLatticeIfNeeded((uint64_t)&v101);
    v40 = operator new();
    *(_OWORD *)(v40 + 16) = 0u;
    *(_OWORD *)(v40 + 32) = 0u;
    *(_OWORD *)v40 = 0u;
    *(_QWORD *)v40 = &unk_1E5D358D0;
    fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst((_QWORD *)(v40 + 8));
    *(_QWORD *)(v40 + 24) = 0;
    *(_QWORD *)(v40 + 32) = 0;
    *(_QWORD *)(v40 + 40) = 0;
    *a6 = v40;
    v41 = v102;
    if ((int)((*(_QWORD *)(v102 + 72) - *(_QWORD *)(v102 + 64)) >> 3) >= 1)
    {
      v42 = 0;
      v43 = 0;
      v44 = 0;
      do
      {
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::AddState(v40 + 8);
        v45 = *(_QWORD *)(*(_QWORD *)(v102 + 64) + 8 * v42);
        v84[0] = *(void **)v45;
        v85[0] = 0;
        v85[1] = 0;
        v84[1] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v84[1], *(const void **)(v45 + 8), *(_QWORD *)(v45 + 16), (uint64_t)(*(_QWORD *)(v45 + 16) - *(_QWORD *)(v45 + 8)) >> 2);
        v40 = *a6;
        v80 = v84[0];
        v82 = 0;
        v83 = 0;
        v81 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v81, v84[1], (uint64_t)v85[0], ((char *)v85[0] - (char *)v84[1]) >> 2);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetFinal(v40 + 8, v42, (uint64_t *)&v80);
        if (v81)
        {
          v82 = v81;
          operator delete(v81);
        }
        v122[0] = HIDWORD(v84[0]);
        LODWORD(v107) = v84[0];
        v121 = 2139095040;
        v120 = INFINITY;
        if (*(float *)v84 == INFINITY && *(float *)v122 == v120)
        {
          v46 = v85[0];
          if (v85[0] == v84[1])
            goto LABEL_40;
        }
        ++v44;
        v122[0] = HIDWORD(v84[0]);
        LODWORD(v107) = v84[0];
        v121 = 0;
        v120 = 0.0;
        if (*(float *)v84 == 0.0)
        {
          v46 = v84[1];
          if (*(float *)v122 == v120 && v85[0] == v84[1])
            goto LABEL_40;
        }
        else
        {
          v46 = v84[1];
        }
        ++v43;
LABEL_40:
        if (v46)
        {
          v85[0] = v46;
          operator delete(v46);
        }
        ++v42;
        v41 = v102;
      }
      while (v42 < (int)((*(_QWORD *)(v102 + 72) - *(_QWORD *)(v102 + 64)) >> 3));
    }
    v47 = *(_DWORD *)(v41 + 88);
    fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v40 + 8);
    v48 = *(_QWORD *)(v40 + 16);
    *(_DWORD *)(v48 + 88) = v47;
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 24))(v48);
    *(_QWORD *)(v48 + 8) = v49 & 0xCCFFFFF0007 | (((v49 >> 35) & 1) << 37) | *(_QWORD *)(v48 + 8) & 4;
    v50 = *(_QWORD *)(v102 + 72) - *(_QWORD *)(v102 + 64);
    if ((int)(v50 >> 3) >= 1)
    {
      v51 = 0;
      v72 = (v50 >> 3);
      do
      {
        v52 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 64) + 8 * v51) + 48);
        v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v102 + 64) + 8 * v51) + 56) - v52;
        if (v53)
        {
          v54 = v53 / 48;
          if (v54 <= 1)
            v55 = 1;
          else
            v55 = v54;
          v56 = v52 + 24;
          do
          {
            v84[0] = *(void **)(v56 - 24);
            v84[1] = *(void **)(v56 - 16);
            v85[1] = 0;
            *(_QWORD *)&v86 = 0;
            v85[0] = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v85, *(const void **)(v56 - 8), *(_QWORD *)v56, (uint64_t)(*(_QWORD *)v56 - *(_QWORD *)(v56 - 8)) >> 2);
            DWORD2(v86) = *(_DWORD *)(v56 + 16);
            v57 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v113, (int *)v84);
            if (!v57)
              std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
            v58 = *(uint64_t *)((char *)v57 + 20);
            LODWORD(v84[0]) = v58;
            HIDWORD(v84[0]) = v58;
            v59 = (uint64_t (***)(_QWORD, uint64_t, _QWORD *))*v39;
            v75[0] = v84[0];
            v75[1] = v84[1];
            v77 = 0;
            v78 = 0;
            v76 = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v76, v85[0], (uint64_t)v85[1], ((char *)v85[1] - (char *)v85[0]) >> 2);
            v79 = DWORD2(v86);
            v60 = (**v59)(v59, v51, v75);
            if (v76)
            {
              v77 = v76;
              operator delete(v76);
            }
            if ((unint64_t)v58 <= 0xFFFFFFFEFFFFFFFFLL)
            {
              v61 = *a4;
              if (0x8E38E38E38E38E39 * ((a4[1] - *a4) >> 3) <= v58 >> 32)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              v62 = v58 >> 32;
              v63 = v61 + 72 * (int)v62;
              *(double *)v60 = *(float *)(v63 + 64);
              *(double *)(v60 + 8) = *(float *)(v63 + 8);
              if (v60 != v63)
              {
                v64 = *(_QWORD *)(v61 + 72 * (int)v62 + 24);
                std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v60 + 16), *(char **)(v63 + 16), v64, (v64 - *(_QWORD *)(v63 + 16)) >> 2);
              }
              v65 = v61 + 72 * (int)v62;
              if (v60 != v65)
              {
                v66 = *(__int128 **)(v61 + 72 * (int)v62 + 48);
                std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v60 + 40), *(std::string **)(v65 + 40), v66, 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v66 - *(_QWORD *)(v65 + 40)) >> 3));
              }
            }
            if (v85[0])
            {
              v85[1] = v85[0];
              operator delete(v85[0]);
            }
            v56 += 48;
            --v55;
            v39 = a6;
          }
          while (v55);
        }
        ++v51;
      }
      while (v51 != v72);
    }
    if (quasar::gLogLevel > 4)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)v85 = 0u;
      v86 = 0u;
      *(_OWORD *)v84 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"newMergeAlgo: fusedDetailedLattice finalStates ", 47);
      v67 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" finalStatesWithNonOneWeight ", 29);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v84);
    }
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      *(_OWORD *)v85 = 0u;
      v86 = 0u;
      *(_OWORD *)v84 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v84);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)"Word alignment failed. Aborting.", 32);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v84);
    }
    *a6 = 0;
  }
  v101 = (void **)&unk_1E5D25800;
  v68 = v102;
  if (v102)
  {
    v69 = *(_DWORD *)(v102 + 56) - 1;
    *(_DWORD *)(v102 + 56) = v69;
    if (!v69)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
  }
  std::__tree<int>::destroy((uint64_t)&v111, v112[0]);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v113);
}

uint64_t quasar::RealignAmFusionDecoder::redecodeLattice@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, uint64_t a6@<X5>, kaldi::LatticeScoreCache *a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t *a10, quasar::SymbolTableList *a11, __int32 a12)
{
  float v19;
  int v20;
  int v21;
  _QWORD *v22;
  double v23;
  uint64_t v24;
  __n128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _BYTE v49[40];
  _OWORD v50[2];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[48];
  _OWORD v55[9];

  v19 = (float)(a3 / a4);
  v20 = kaldi::MatrixBase<float>::NumRows(a2);
  if (v20 >= (int)(float)((float)a5 * v19))
    v21 = (int)(float)((float)a5 * v19);
  else
    v21 = v20;
  if (quasar::gLogLevel >= 4)
  {
    memset(v55, 0, sizeof(v55));
    memset(v54, 0, sizeof(v54));
    v53 = 0u;
    v51 = 0u;
    v52 = 0u;
    memset(v50, 0, sizeof(v50));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v50);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)"fusion features total: ", 23);
    kaldi::MatrixBase<float>::NumRows(a2);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" relevant: ", 11);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v50);
  }
  v23 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v50, a2, 0, v21, 0, *(_DWORD *)(a2 + 8));
  kaldi::Matrix<float>::Matrix(v49, v50, 111, v23);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v50);
  v24 = *(_QWORD *)(a1 + 1008);
  v25.n128_u32[0] = *(_DWORD *)(a1 + 928);
  v26 = *(std::__shared_weak_count **)(a1 + 1032);
  v47 = *(_QWORD *)(a1 + 1024);
  v48 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(p_shared_owners);
    while (__stxr(v28 + 1, p_shared_owners));
  }
  v29 = *(std::__shared_weak_count **)(a1 + 1000);
  v45 = *(_QWORD *)(a1 + 992);
  v46 = v29;
  if (v29)
  {
    v30 = (unint64_t *)&v29->__shared_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  kaldi::DecodableMatrixScaledMappedLazyNnet1::DecodableMatrixScaledMappedLazyNnet1(v50, v24, v49, &v47, &v45, *(unsigned int *)(a1 + 940), 10240, v25);
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  quasar::RealignAmFusionDecoder::redecodeLattice(a1, *(kaldi **)(a1 + 1008), (kaldi::DecodableInterface *)v50, a6, a7, a8, a10, a11, a9, a12);
  *(_QWORD *)&v50[0] = &off_1E5D2B098;
  *((_QWORD *)&v55[1] + 1) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)&v55[1] + 8);
  std::__list_imp<std::pair<std::vector<int>,kaldi::CuVector<float>>>::clear((uint64_t *)v55);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v54);
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v52 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
  if (*((_QWORD *)&v51 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  kaldi::DecodableMatrixScaledMapped::~DecodableMatrixScaledMapped((kaldi::DecodableMatrixScaledMapped *)v50);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v49);
}

void sub_1ADCCCBE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::DecodableMatrixScaledMappedLazyNnet1::~DecodableMatrixScaledMappedLazyNnet1((kaldi::DecodableMatrixScaledMappedLazyNnet1 *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RealignAmFusionDecoder::redecodeLattice@<X0>(uint64_t a1@<X0>, kaldi *a2@<X1>, kaldi::DecodableInterface *a3@<X2>, uint64_t a4@<X3>, kaldi::LatticeScoreCache *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, quasar::SymbolTableList *a8@<X7>, _QWORD *a9@<X8>, __int32 a10)
{
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  std::string *v24;
  std::string::size_type size;
  uint64_t *v26;
  unsigned __int8 *v27;
  uint64_t *v28;
  std::string::size_type v29;
  void **v30;
  std::string *v31;
  uint64_t v32;
  unsigned __int8 *v33;
  _QWORD *v34;
  const std::string::value_type *v35;
  void *v36;
  unsigned __int8 *v37;
  std::string::size_type v38;
  void **v39;
  std::string *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  unsigned __int8 *v44;
  uint64_t v45;
  std::string::size_type v46;
  void **v47;
  std::string *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  char v54;
  __n128 v55;
  __int128 *v56;
  char *v57;
  int v58;
  int v59;
  char *v60;
  _DWORD *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  int v69;
  int data;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  _QWORD *v75;
  std::string *v76;
  std::string::size_type v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  int v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  int v90;
  __int32 *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  __int32 *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  quasar::LmeData **v108;
  unint64_t *p_shared_owners;
  unint64_t v110;
  quasar::LmeData *v111;
  std::string::size_type j;
  std::string::size_type v113;
  uint64_t v114;
  std::string::size_type v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  unsigned __int8 *v119;
  unsigned __int8 *v120;
  int v121;
  std::string::size_type v122;
  std::string::size_type v123;
  uint64_t v124;
  std::string::size_type v125;
  int64_t v126;
  _BYTE *v127;
  void *v128;
  _BYTE *v129;
  std::string::size_type v130;
  unsigned __int8 *v131;
  unsigned __int8 *v132;
  unsigned __int8 *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  int v136;
  std::string::size_type v137;
  std::string::size_type v138;
  __int128 *v139;
  __int128 *v140;
  __int128 v141;
  __int128 *v142;
  char *v143;
  uint64_t v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  std::string *v149;
  std::string::size_type v150;
  _QWORD *v151;
  uint64_t *v152;
  unint64_t v153;
  uint64_t v154;
  __int32 v155;
  int v156;
  _DWORD *v157;
  _DWORD *v158;
  unint64_t v159;
  __int32 *v160;
  __int32 *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;
  char *v166;
  int64x2_t *v167;
  uint64_t v168;
  uint64_t *v169;
  uint64_t *v170;
  BOOL v171;
  std::__shared_weak_count *v172;
  quasar::Bitmap *v173;
  uint64_t v174;
  uint64_t v175;
  int v176;
  _DWORD *v177;
  _DWORD *v178;
  unint64_t v179;
  __int32 *v180;
  __int32 *v181;
  uint64_t v182;
  unint64_t v183;
  uint64_t v184;
  unint64_t v185;
  char *v186;
  int64x2_t *v187;
  uint64_t v188;
  unsigned int v189;
  void *v190;
  unint64_t *v191;
  unint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  _QWORD *v201;
  unint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  unint64_t v208;
  uint64_t v209;
  _QWORD *v210;
  _QWORD *v211;
  __int32 *v212;
  int v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v220;
  uint64_t v221;
  uint64_t *v223;
  uint64_t v224;
  unint64_t v226;
  int v227;
  uint64_t v229;
  uint64_t i;
  std::__shared_weak_count *v231;
  void *v232;
  char Lattice;
  void *v234;
  void *v235[2];
  void *v236;
  char v237;
  char *v238[23];
  uint64_t v239[3];
  void *v240[2];
  char v241;
  std::string v242;
  char *v243[3];
  _QWORD v244[3];
  std::string v245;
  void *v246[2];
  char v247;
  std::string v248;
  std::string v249;
  __int128 *v250;
  char *v251;
  uint64_t v252;
  std::string v253;
  void *__p[2];
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  __int128 v261;
  __int128 v262;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  int v273;
  std::string v274;
  int v275;
  uint64_t *v276;
  _QWORD *v277[2];
  __int128 v278;
  __int128 v279;
  int v280;
  char *v281;
  __int32 *v282;
  unint64_t v283;
  void *v284;
  uint64_t v285;
  _OWORD v286[2];
  int v287;
  void **v288;
  __int128 v289;
  _QWORD v290[4];

  v290[1] = *MEMORY[0x1E0C80C00];
  memset(v286, 0, sizeof(v286));
  v287 = 1065353216;
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v284);
  v281 = 0;
  v282 = 0;
  v283 = 0;
  v278 = 0u;
  v279 = 0u;
  v280 = 1065353216;
  v277[1] = 0;
  v277[0] = 0;
  v276 = (uint64_t *)v277;
  v13 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a4 + 8) + 64);
  if ((int)(v13 >> 3) < 1)
  {
    LODWORD(v153) = 0;
    goto LABEL_316;
  }
  v14 = 0;
  v227 = 0;
  v223 = (uint64_t *)(a6 + 8);
  v220 = (v13 >> 3);
  while (1)
  {
    v221 = v14;
    v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 8) + 64) + 8 * v14);
    v17 = *(_QWORD *)(v15 + 24);
    v16 = *(_QWORD *)(v15 + 32);
    v18 = v16 == v17 ? 0 : *(_QWORD *)(v15 + 24);
    if (v16 != v17)
      break;
LABEL_294:
    v14 = v221 + 1;
    if (v221 + 1 == v220)
    {
      v152 = v276;
      if (v276 != (uint64_t *)v277)
      {
        v153 = v227;
        while (1)
        {
          v154 = *(_QWORD *)(a1 + 824);
          if (((*(_QWORD *)(a1 + 832) - v154) >> 2) - 1 <= v153)
            break;
          v155 = *((_DWORD *)v152 + 7);
          ++v153;
          v156 = *(_DWORD *)(v154 + 4 * v153);
          v157 = operator new(4uLL);
          v158 = v157;
          *v157 = v156;
          v159 = (unint64_t)(v157 + 1);
          v160 = v282;
          if ((unint64_t)v282 >= v283)
          {
            v162 = ((char *)v282 - v281) >> 5;
            v163 = v162 + 1;
            if ((unint64_t)(v162 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v164 = v283 - (_QWORD)v281;
            if ((uint64_t)(v283 - (_QWORD)v281) >> 4 > v163)
              v163 = v164 >> 4;
            if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFE0)
              v165 = 0x7FFFFFFFFFFFFFFLL;
            else
              v165 = v163;
            *(_QWORD *)&v256 = &v283;
            v166 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v283, v165);
            v167 = (int64x2_t *)&v166[32 * v162];
            __p[0] = v166;
            __p[1] = v167;
            *((_QWORD *)&v255 + 1) = &v166[32 * v168];
            v167->i32[0] = v155;
            v167[1].i64[0] = 0;
            v167[1].i64[1] = 0;
            v167->i64[1] = (uint64_t)v158;
            v167[1] = vdupq_n_s64(v159);
            *(_QWORD *)&v255 = v167 + 2;
            std::vector<std::pair<int,std::vector<int>>>::__swap_out_circular_buffer((uint64_t *)&v281, __p);
            v161 = v282;
            std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__p);
          }
          else
          {
            *v282 = v155;
            *((_QWORD *)v160 + 1) = v157;
            *((_QWORD *)v160 + 2) = v159;
            v161 = v160 + 8;
            *((_QWORD *)v160 + 3) = v159;
          }
          v282 = v161;
          v169 = (uint64_t *)v152[1];
          if (v169)
          {
            do
            {
              v170 = v169;
              v169 = (uint64_t *)*v169;
            }
            while (v169);
          }
          else
          {
            do
            {
              v170 = (uint64_t *)v152[2];
              v171 = *v170 == (_QWORD)v152;
              v152 = v170;
            }
            while (!v171);
          }
          v152 = v170;
          if (v170 == (uint64_t *)v277)
            goto LABEL_316;
        }
        v172 = 0;
        v173 = 0;
        goto LABEL_320;
      }
      LODWORD(v153) = v227;
LABEL_316:
      v174 = *(_QWORD *)(a1 + 824);
      if (((*(_QWORD *)(a1 + 832) - v174) >> 2) - 1 <= (unint64_t)(int)v153)
      {
        v172 = 0;
        v173 = 0;
      }
      else
      {
        v175 = a4;
        v176 = *(_DWORD *)(v174 + 4 * ((int)v153 + 1));
        v177 = operator new(4uLL);
        v178 = v177;
        *v177 = v176;
        v179 = (unint64_t)(v177 + 1);
        v180 = v282;
        if ((unint64_t)v282 >= v283)
        {
          v182 = ((char *)v282 - v281) >> 5;
          v183 = v182 + 1;
          if ((unint64_t)(v182 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v184 = v283 - (_QWORD)v281;
          if ((uint64_t)(v283 - (_QWORD)v281) >> 4 > v183)
            v183 = v184 >> 4;
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFE0)
            v185 = 0x7FFFFFFFFFFFFFFLL;
          else
            v185 = v183;
          *(_QWORD *)&v256 = &v283;
          v186 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v283, v185);
          v187 = (int64x2_t *)&v186[32 * v182];
          __p[0] = v186;
          __p[1] = v187;
          *((_QWORD *)&v255 + 1) = &v186[32 * v188];
          v187->i32[0] = a10;
          v187[1].i64[0] = 0;
          v187[1].i64[1] = 0;
          v187->i64[1] = (uint64_t)v178;
          v187[1] = vdupq_n_s64(v179);
          *(_QWORD *)&v255 = v187 + 2;
          std::vector<std::pair<int,std::vector<int>>>::__swap_out_circular_buffer((uint64_t *)&v281, __p);
          v181 = v282;
          std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__p);
        }
        else
        {
          *v282 = a10;
          *((_QWORD *)v180 + 1) = v177;
          *((_QWORD *)v180 + 2) = v179;
          v181 = v180 + 8;
          *((_QWORD *)v180 + 3) = v179;
        }
        v282 = v181;
        LOBYTE(v234) = 0;
        std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>((float *)(a1 + 520), a1 + 496, (unsigned __int8 *)&v234, __p);
        v173 = (quasar::Bitmap *)__p[0];
        v172 = (std::__shared_weak_count *)__p[1];
        v189 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 552) + 96))(*(_QWORD *)(a1 + 552), a1 + 496);
        a4 = v175;
        if (kaldi::quasar::LexiconFst::CreateFst((uint64_t)v173, (unsigned int **)&v281, v189))
        {
          quasar::Bitmap::~Bitmap(v173);
          fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v190);
          v100 = 0;
          goto LABEL_330;
        }
        if (quasar::gLogLevel >= 2)
        {
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Fail to build graph with the prons in the datapack.", 51);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
      }
LABEL_320:
      *a9 = 0;
      v100 = 1;
      goto LABEL_330;
    }
  }
  v19 = 0;
  v20 = (v16 - v17) >> 4;
  if (v20 <= 1)
    v20 = 1;
  v226 = v20;
  v224 = v18;
  while (2)
  {
    v275 = 0;
    v275 = *(_DWORD *)(v18 + 16 * v19 + 4);
    v229 = v19;
    if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v278, &v275))
      goto LABEL_290;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::__emplace_unique_key_args<int,int const&>((uint64_t)&v278, &v275, &v275);
    quasar::SymbolTableList::lookup(a8, v275, (uint64_t)&v274);
    v271 = 0u;
    v272 = 0u;
    v273 = 1065353216;
    v21 = *(_QWORD **)(a1 + 848);
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::Lexicon::lookUpProns(v21, (uint64_t)&v274, (uint64_t)&v271, (char *)__p);
    if (SBYTE7(v255) < 0)
      operator delete(__p[0]);
    if (quasar::gLogLevel >= 6)
    {
      v269 = 0u;
      v270 = 0u;
      v267 = 0u;
      v268 = 0u;
      v265 = 0u;
      v266 = 0u;
      v263 = 0u;
      v264 = 0u;
      v261 = 0u;
      v262 = 0u;
      v259 = 0u;
      v260 = 0u;
      v257 = 0u;
      v258 = 0u;
      v255 = 0u;
      v256 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"look for prons for word:", 24);
      v22 = (_QWORD *)std::ostream::operator<<();
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" as ", 4);
      if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v274;
      else
        v24 = (std::string *)v274.__r_.__value_.__r.__words[0];
      if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v274.__r_.__value_.__r.__words[2]);
      else
        size = v274.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v24, size);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
    }
    if (!*((_QWORD *)&v272 + 1))
    {
      v101 = *v223;
      if (*v223)
      {
        v102 = a6 + 8;
        do
        {
          v103 = *(_DWORD *)(v101 + 28);
          v104 = v103 < v275;
          if (v103 >= v275)
            v105 = (uint64_t *)v101;
          else
            v105 = (uint64_t *)(v101 + 8);
          if (!v104)
            v102 = v101;
          v101 = *v105;
        }
        while (*v105);
        if ((uint64_t *)v102 != v223 && v275 >= *(_DWORD *)(v102 + 28))
        {
          std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v276, &v275, &v275);
          v100 = 7;
          goto LABEL_286;
        }
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "~w00");
      quasar::splitAndTrimNoEmpty(&v274, (char *)__p, &v253);
      if (SBYTE7(v255) < 0)
        operator delete(__p[0]);
      v107 = *a7;
      v106 = a7[1];
      for (i = v106; v107 != v106; v106 = i)
      {
        v108 = *(quasar::LmeData ***)v107;
        v231 = *(std::__shared_weak_count **)(v107 + 8);
        if (v231)
        {
          p_shared_owners = (unint64_t *)&v231->__shared_owners_;
          do
            v110 = __ldxr(p_shared_owners);
          while (__stxr(v110 + 1, p_shared_owners));
        }
        v111 = *v108;
        v289 = 0uLL;
        v290[0] = 0;
        v113 = v253.__r_.__value_.__l.__size_;
        for (j = v253.__r_.__value_.__r.__words[0]; j != v113; j += 24)
        {
          quasar::LmeDataFactoryBase::PronSet::PronSet(&v250);
          if (*(char *)(j + 23) < 0)
          {
            v115 = *(_QWORD *)j;
            v114 = *(_QWORD *)(j + 8);
          }
          else
          {
            v114 = *(unsigned __int8 *)(j + 23);
            v115 = j;
          }
          v116 = (unsigned __int8 *)(v115 + v114);
          if (v114)
          {
            v117 = (unsigned __int8 *)v115;
            v118 = (unsigned __int8 *)(v115 + v114);
            do
            {
              v119 = v117;
              v120 = v117;
              while (1)
              {
                v121 = *v120++;
                if (v121 == 92)
                  break;
                v119 = v120;
                if (v120 == v116)
                {
                  v119 = v118;
                  goto LABEL_192;
                }
              }
              v117 = v119 + 1;
              v118 = v119;
            }
            while (v120 != v116);
          }
          else
          {
            v119 = (unsigned __int8 *)v115;
          }
LABEL_192:
          v122 = (std::string::size_type)&v119[-v115];
          if (v119 == v116)
            v123 = -1;
          else
            v123 = v122;
          std::string::basic_string(&v249, (const std::string *)j, 0, v123, (std::allocator<char> *)&v245);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            std::string::__init_copy_ctor_external(&v248, v249.__r_.__value_.__l.__data_, v249.__r_.__value_.__l.__size_);
          else
            v248 = v249;
          std::string::basic_string[abi:ne180100]<0>(v246, "");
          quasar::LmeDataFactoryBase::Word::Word(__p, &v248, v246, 0);
          if (v247 < 0)
            operator delete(v246[0]);
          if (SHIBYTE(v248.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v248.__r_.__value_.__l.__data_);
          quasar::LmeData::lookupWordPronCache(v111, (const quasar::LmeDataFactoryBase::Word *)__p, 3, (char **)&v250);
          if (quasar::LmeDataFactoryBase::PronSet::empty((quasar::LmeDataFactoryBase::PronSet *)&v250))
          {
            v124 = *(unsigned __int8 *)(j + 23);
            if (*(char *)(j + 23) < 0)
            {
              v125 = *(_QWORD *)j;
              v126 = *(_QWORD *)(j + 8);
            }
            else
            {
              v125 = j;
              v126 = *(unsigned __int8 *)(j + 23);
            }
            if (v126 >= 1)
            {
              v127 = (_BYTE *)(v125 + v126);
              v128 = (void *)v125;
              do
              {
                v129 = memchr(v128, 95, v126);
                if (!v129)
                  break;
                if (*v129 == 95)
                {
                  if (v129 == v127 || &v129[-v125] == (_BYTE *)-1)
                    break;
                  if ((v124 & 0x80) != 0)
                  {
                    v130 = *(_QWORD *)j;
                    v124 = *(_QWORD *)(j + 8);
                  }
                  else
                  {
                    v130 = j;
                  }
                  v131 = (unsigned __int8 *)(v130 + v124);
                  if (v124)
                  {
                    v132 = (unsigned __int8 *)v130;
                    v133 = (unsigned __int8 *)(v130 + v124);
                    do
                    {
                      v134 = v132;
                      v135 = v132;
                      while (1)
                      {
                        v136 = *v135++;
                        if (v136 == 92)
                          break;
                        v134 = v135;
                        if (v135 == v131)
                        {
                          v134 = v133;
                          goto LABEL_234;
                        }
                      }
                      v132 = v134 + 1;
                      v133 = v134;
                    }
                    while (v135 != v131);
                  }
                  else
                  {
                    v134 = (unsigned __int8 *)v130;
                  }
LABEL_234:
                  v137 = (std::string::size_type)&v134[-v130];
                  if (v134 == v131)
                    v138 = -1;
                  else
                    v138 = v137;
                  std::string::basic_string(&v245, (const std::string *)j, 0, v138, (std::allocator<char> *)v244);
                  std::string::basic_string[abi:ne180100]<0>(&v234, "_");
                  quasar::splitAndTrimNoEmpty(&v245, (char *)&v234, v244);
                  if (SHIBYTE(v235[1]) < 0)
                    operator delete(v234);
                  v139 = (__int128 *)v244[0];
                  v140 = (__int128 *)v244[1];
                  while (v139 != v140)
                  {
                    quasar::LmeDataFactoryBase::PronSet::PronSet(v243);
                    if (*((char *)v139 + 23) < 0)
                    {
                      std::string::__init_copy_ctor_external(&v242, *(const std::string::value_type **)v139, *((_QWORD *)v139 + 1));
                    }
                    else
                    {
                      v141 = *v139;
                      v242.__r_.__value_.__r.__words[2] = *((_QWORD *)v139 + 2);
                      *(_OWORD *)&v242.__r_.__value_.__l.__data_ = v141;
                    }
                    std::string::basic_string[abi:ne180100]<0>(v240, "");
                    quasar::LmeDataFactoryBase::Word::Word(&v234, &v242, v240, 0);
                    if (v241 < 0)
                      operator delete(v240[0]);
                    if (SHIBYTE(v242.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v242.__r_.__value_.__l.__data_);
                    quasar::LmeData::lookupWordPronCache(v111, (const quasar::LmeDataFactoryBase::Word *)&v234, 3, v243);
                    quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)v243, 0, v239);
                    std::vector<std::vector<quasar::PronChoice>>::emplace_back<std::vector<quasar::PronChoice>>((uint64_t *)&v289, (uint64_t)v239);
                    v288 = (void **)v239;
                    std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100](&v288);
                    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v238, v238[1]);
                    if (v237 < 0)
                      operator delete(v236);
                    if (SHIBYTE(v235[1]) < 0)
                      operator delete(v234);
                    std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v243, v243[1]);
                    v139 = (__int128 *)((char *)v139 + 24);
                  }
                  v234 = v244;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v234);
                  if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v245.__r_.__value_.__l.__data_);
                  goto LABEL_217;
                }
                v128 = v129 + 1;
                v126 = v127 - (_BYTE *)v128;
              }
              while (v127 - (_BYTE *)v128 >= 1);
            }
          }
          quasar::LmeDataFactoryBase::PronSet::toPronChoices((uint64_t)&v250, 0, (uint64_t *)&v234);
          std::vector<std::vector<quasar::PronChoice>>::emplace_back<std::vector<quasar::PronChoice>>((uint64_t *)&v289, (uint64_t)&v234);
          v245.__r_.__value_.__r.__words[0] = (std::string::size_type)&v234;
          std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&v245);
LABEL_217:
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v257 + 8, (char *)v258);
          if (SHIBYTE(v256) < 0)
            operator delete(*((void **)&v255 + 1));
          if (SBYTE7(v255) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v249.__r_.__value_.__l.__data_);
          std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)&v250, v251);
        }
        LODWORD(v234) = 32;
        v235[1] = 0;
        v236 = 0;
        v235[0] = &v235[1];
        std::string::basic_string[abi:ne180100]<0>(__p, ".");
        quasar::PronCombinator::operator()((int *)&v234, &v289, (uint64_t *)&v250);
        if (SBYTE7(v255) < 0)
          operator delete(__p[0]);
        v142 = v250;
        v143 = v251;
        while (v142 != (__int128 *)v143)
        {
          quasar::PronChoice::PronChoice(__p, (uint64_t)v142);
          std::string::basic_string[abi:ne180100]<0>(&v249, ".");
          std::string::basic_string[abi:ne180100]<0>(&v245, " ");
          quasar::replaceAll((uint64_t)&__p[1], (uint64_t)&v249, (char *)&v245);
          if (SHIBYTE(v245.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v245.__r_.__value_.__l.__data_);
          if (SHIBYTE(v249.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v249.__r_.__value_.__l.__data_);
          std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)&v271, (unsigned __int8 *)&__p[1], (uint64_t)&__p[1]);
          if (SHIBYTE(v255) < 0)
            operator delete(__p[1]);
          v142 = (__int128 *)((char *)v142 + 40);
        }
        v144 = *((_QWORD *)&v272 + 1);
        __p[0] = &v250;
        std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        std::__tree<int>::destroy((uint64_t)v235, (_QWORD *)v235[1]);
        __p[0] = &v289;
        std::vector<std::vector<quasar::PronChoice>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (v231)
        {
          v145 = (unint64_t *)&v231->__shared_owners_;
          do
            v146 = __ldaxr(v145);
          while (__stlxr(v146 - 1, v145));
          if (!v146)
          {
            ((void (*)(std::__shared_weak_count *))v231->__on_zero_shared)(v231);
            std::__shared_weak_count::__release_weak(v231);
          }
        }
        if (v144)
          break;
        v107 += 16;
      }
      if (!*((_QWORD *)&v272 + 1) && v275 != a10)
      {
        v18 = v224;
        if (quasar::gLogLevel >= 2)
        {
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Could not find wordId=", 22);
          v147 = (_QWORD *)std::ostream::operator<<();
          v148 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)" word=", 6);
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v149 = &v274;
          else
            v149 = (std::string *)v274.__r_.__value_.__r.__words[0];
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v150 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
          else
            v150 = v274.__r_.__value_.__l.__size_;
          v151 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v148, (uint64_t)v149, v150);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)" in lexicon", 11);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        *a9 = 0;
        __p[0] = &v253;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v100 = 1;
        goto LABEL_286;
      }
      __p[0] = &v253;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    v26 = (uint64_t *)v272;
    if (!(_QWORD)v272)
    {
LABEL_160:
      v100 = 0;
      goto LABEL_285;
    }
    while (1)
    {
      if (*((char *)v26 + 39) < 0)
        std::string::__init_copy_ctor_external(&v253, (const std::string::value_type *)v26[2], v26[3]);
      else
        v253 = *(std::string *)(v26 + 2);
      if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v286, (unsigned __int8 *)v26 + 16))
      {
        __p[0] = v26 + 2;
        v27 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        v28 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v27 + 5, &v275);
        __p[0] = v26 + 2;
        std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        if (v28)
        {
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v29 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          else
            v29 = v253.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v29 + 1);
          if ((SBYTE7(v255) & 0x80u) == 0)
            v30 = __p;
          else
            v30 = (void **)__p[0];
          if (v29)
          {
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v31 = &v253;
            else
              v31 = (std::string *)v253.__r_.__value_.__r.__words[0];
            memmove(v30, v31, v29);
          }
          *(_WORD *)((char *)v30 + v29) = 32;
          v32 = *(_QWORD *)(a1 + 552);
          v250 = (__int128 *)(v26 + 2);
          v33 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, &v250);
          v250 = (__int128 *)&v275;
          v34 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v33 + 40), &v275, (uint64_t)&std::piecewise_construct, (_DWORD **)&v250);
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v32 + 88))(&v234, v32, *(int *)(*(_QWORD *)(a1 + 824) + 4 * *((int *)v34 + 5)));
          v35 = SHIBYTE(v235[1]) >= 0 ? (const std::string::value_type *)&v234 : (const std::string::value_type *)v234;
          v36 = SHIBYTE(v235[1]) >= 0 ? (void *)HIBYTE(v235[1]) : v235[0];
        }
        else
        {
          __p[0] = v26 + 2;
          v43 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 16);
          __p[0] = v26 + 2;
          v44 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
          __p[0] = &v275;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v44 + 40), &v275, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5) = v43;
          __p[0] = v26 + 2;
          if (*((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 8) <= (unint64_t)v227)
          {
            LODWORD(v45) = v227;
          }
          else
          {
            __p[0] = v26 + 2;
            v45 = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 8);
          }
          v227 = v45;
          if (((uint64_t)(*(_QWORD *)(a1 + 832) - *(_QWORD *)(a1 + 824)) >> 2) - 1 <= (unint64_t)(int)v45)
          {
            *a9 = 0;
            v82 = 1;
            goto LABEL_156;
          }
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          else
            v46 = v253.__r_.__value_.__l.__size_;
          std::string::basic_string[abi:ne180100]((uint64_t)__p, v46 + 1);
          if ((SBYTE7(v255) & 0x80u) == 0)
            v47 = __p;
          else
            v47 = (void **)__p[0];
          if (v46)
          {
            if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v48 = &v253;
            else
              v48 = (std::string *)v253.__r_.__value_.__r.__words[0];
            memmove(v47, v48, v46);
          }
          *(_WORD *)((char *)v47 + v46) = 32;
          v49 = *(_QWORD *)(a1 + 552);
          v250 = (__int128 *)(v26 + 2);
          v50 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, &v250);
          v250 = (__int128 *)&v275;
          v51 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v50 + 40), &v275, (uint64_t)&std::piecewise_construct, (_DWORD **)&v250);
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v49 + 88))(&v234, v49, *(int *)(*(_QWORD *)(a1 + 824) + 4 * *((int *)v51 + 5)));
          v35 = SHIBYTE(v235[1]) >= 0 ? (const std::string::value_type *)&v234 : (const std::string::value_type *)v234;
          v36 = SHIBYTE(v235[1]) >= 0 ? (void *)HIBYTE(v235[1]) : v235[0];
        }
      }
      else
      {
        __p[0] = v26 + 2;
        v37 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, (__int128 **)__p);
        __p[0] = (void *)v275;
        std::__hash_table<std::__hash_value_type<int,unsigned int>,std::__unordered_map_hasher<int,std::__hash_value_type<int,unsigned int>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,unsigned int>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,unsigned int>>>::__emplace_unique_key_args<int,std::pair<int,unsigned int>>((uint64_t)(v37 + 40), (int *)__p, __p);
        if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v38 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
        else
          v38 = v253.__r_.__value_.__l.__size_;
        std::string::basic_string[abi:ne180100]((uint64_t)__p, v38 + 1);
        if ((SBYTE7(v255) & 0x80u) == 0)
          v39 = __p;
        else
          v39 = (void **)__p[0];
        if (v38)
        {
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v40 = &v253;
          else
            v40 = (std::string *)v253.__r_.__value_.__r.__words[0];
          memmove(v39, v40, v38);
        }
        *(_WORD *)((char *)v39 + v38) = 32;
        v41 = *(_QWORD *)(a1 + 552);
        v250 = (__int128 *)(v26 + 2);
        v42 = std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v286, (unsigned __int8 *)v26 + 16, (uint64_t)&std::piecewise_construct, &v250);
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v41 + 88))(&v234, v41, *(int *)(*(_QWORD *)(a1 + 824) + 4 * *((_QWORD *)v42 + 8) - 4));
        v35 = SHIBYTE(v235[1]) >= 0 ? (const std::string::value_type *)&v234 : (const std::string::value_type *)v234;
        v36 = SHIBYTE(v235[1]) >= 0 ? (void *)HIBYTE(v235[1]) : v235[0];
      }
      v52 = std::string::append((std::string *)__p, v35, (std::string::size_type)v36);
      v53 = v52->__r_.__value_.__r.__words[0];
      *(_QWORD *)&v289 = v52->__r_.__value_.__l.__size_;
      *(_QWORD *)((char *)&v289 + 7) = *(std::string::size_type *)((char *)&v52->__r_.__value_.__r.__words[1] + 7);
      v54 = HIBYTE(v52->__r_.__value_.__r.__words[2]);
      v52->__r_.__value_.__l.__size_ = 0;
      v52->__r_.__value_.__r.__words[2] = 0;
      v52->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v253.__r_.__value_.__l.__data_);
      v253.__r_.__value_.__r.__words[0] = v53;
      v253.__r_.__value_.__l.__size_ = v289;
      *(std::string::size_type *)((char *)&v253.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)&v289 + 7);
      *((_BYTE *)&v253.__r_.__value_.__s + 23) = v54;
      if (SHIBYTE(v235[1]) < 0)
        operator delete(v234);
      if (SBYTE7(v255) < 0)
        operator delete(__p[0]);
      v289 = 0uLL;
      v290[0] = 0;
      v251 = 0;
      v250 = 0;
      v252 = 0;
      kaldi::SplitStringToVector(&v253, " \t", 1, (uint64_t)&v250);
      LODWORD(v249.__r_.__value_.__l.__data_) = 0;
      v55 = kaldi::quasar::Lexicon::NormalizePron((std::vector<std::string>::pointer *)&v250, 1, 0, (int *)&v249);
      v56 = v250;
      v57 = v251;
      while (v56 != (__int128 *)v57)
      {
        v58 = (*(uint64_t (**)(_QWORD, __int128 *, __n128))(**(_QWORD **)(a1 + 552) + 96))(*(_QWORD *)(a1 + 552), v56, v55);
        v59 = v58;
        v60 = (char *)*((_QWORD *)&v289 + 1);
        if (*((_QWORD *)&v289 + 1) >= v290[0])
        {
          v62 = (char *)v289;
          v63 = (uint64_t)(*((_QWORD *)&v289 + 1) - v289) >> 2;
          v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v65 = v290[0] - v289;
          if ((uint64_t)(v290[0] - v289) >> 1 > v64)
            v64 = v65 >> 1;
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v64;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v290, v66);
            v60 = (char *)*((_QWORD *)&v289 + 1);
            v62 = (char *)v289;
          }
          else
          {
            v67 = 0;
          }
          v68 = &v67[4 * v63];
          *(_DWORD *)v68 = v59;
          v61 = v68 + 4;
          while (v60 != v62)
          {
            v69 = *((_DWORD *)v60 - 1);
            v60 -= 4;
            *((_DWORD *)v68 - 1) = v69;
            v68 -= 4;
          }
          *(_QWORD *)&v289 = v68;
          *((_QWORD *)&v289 + 1) = v61;
          v290[0] = &v67[4 * v66];
          if (v62)
            operator delete(v62);
        }
        else
        {
          **((_DWORD **)&v289 + 1) = v58;
          v61 = v60 + 4;
        }
        *((_QWORD *)&v289 + 1) = v61;
        v56 = (__int128 *)((char *)v56 + 24);
      }
      data = (int)v249.__r_.__value_.__l.__data_;
      if (((uint64_t)v249.__r_.__value_.__l.__data_ & 0x80000000) != 0)
      {
        if (quasar::gLogLevel >= 2)
        {
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"A wrong pronunciation is built.", 31);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        *a9 = 0;
        v82 = 1;
      }
      else
      {
        if (quasar::gLogLevel >= 6)
        {
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"prons found for word:", 21);
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v72 = &v274;
          else
            v72 = (std::string *)v274.__r_.__value_.__r.__words[0];
          if ((v274.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v73 = HIBYTE(v274.__r_.__value_.__r.__words[2]);
          else
            v73 = v274.__r_.__value_.__l.__size_;
          v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)v72, v73);
          v75 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" as ", 4);
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v76 = &v253;
          else
            v76 = (std::string *)v253.__r_.__value_.__r.__words[0];
          if ((v253.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v77 = HIBYTE(v253.__r_.__value_.__r.__words[2]);
          else
            v77 = v253.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)v76, v77);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
          data = (int)v249.__r_.__value_.__l.__data_;
        }
        v78 = data;
        v79 = *(_QWORD *)(a1 + 824);
        v80 = (char *)*((_QWORD *)&v289 + 1);
        if (*((_QWORD *)&v289 + 1) >= v290[0])
        {
          v83 = (char *)v289;
          v84 = (uint64_t)(*((_QWORD *)&v289 + 1) - v289) >> 2;
          v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v86 = v290[0] - v289;
          if ((uint64_t)(v290[0] - v289) >> 1 > v85)
            v85 = v86 >> 1;
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL)
            v87 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v87 = v85;
          if (v87)
          {
            v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v290, v87);
            v80 = (char *)*((_QWORD *)&v289 + 1);
            v83 = (char *)v289;
          }
          else
          {
            v88 = 0;
          }
          v89 = &v88[4 * v84];
          *(_DWORD *)v89 = *(_DWORD *)(v79 + 4 * v78);
          v81 = (uint64_t)(v89 + 4);
          while (v80 != v83)
          {
            v90 = *((_DWORD *)v80 - 1);
            v80 -= 4;
            *((_DWORD *)v89 - 1) = v90;
            v89 -= 4;
          }
          *(_QWORD *)&v289 = v89;
          *((_QWORD *)&v289 + 1) = v81;
          v290[0] = &v88[4 * v87];
          if (v83)
            operator delete(v83);
        }
        else
        {
          **((_DWORD **)&v289 + 1) = *(_DWORD *)(v79 + 4 * data);
          v81 = (uint64_t)(v80 + 4);
        }
        *((_QWORD *)&v289 + 1) = v81;
        LODWORD(v234) = v275;
        v235[1] = 0;
        v236 = 0;
        v235[0] = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v235, (const void *)v289, v81, (v81 - (uint64_t)v289) >> 2);
        v91 = v282;
        if ((unint64_t)v282 >= v283)
        {
          v92 = ((char *)v282 - v281) >> 5;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 59)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v94 = v283 - (_QWORD)v281;
          if ((uint64_t)(v283 - (_QWORD)v281) >> 4 > v93)
            v93 = v94 >> 4;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFE0)
            v95 = 0x7FFFFFFFFFFFFFFLL;
          else
            v95 = v93;
          *(_QWORD *)&v256 = &v283;
          v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v283, v95);
          v97 = &v96[32 * v92];
          __p[0] = v96;
          __p[1] = v97;
          *((_QWORD *)&v255 + 1) = &v96[32 * v98];
          *(_DWORD *)v97 = (_DWORD)v234;
          *((_QWORD *)v97 + 2) = 0;
          *((_QWORD *)v97 + 3) = 0;
          *((_QWORD *)v97 + 1) = 0;
          *(_OWORD *)(v97 + 8) = *(_OWORD *)v235;
          *((_QWORD *)v97 + 3) = v236;
          v235[0] = 0;
          v235[1] = 0;
          v236 = 0;
          *(_QWORD *)&v255 = v97 + 32;
          std::vector<std::pair<int,std::vector<int>>>::__swap_out_circular_buffer((uint64_t *)&v281, __p);
          v99 = v282;
          std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__p);
          v282 = v99;
          if (v235[0])
          {
            v235[1] = v235[0];
            operator delete(v235[0]);
          }
        }
        else
        {
          *v282 = (int)v234;
          *((_QWORD *)v91 + 2) = 0;
          *((_QWORD *)v91 + 3) = 0;
          *((_QWORD *)v91 + 1) = 0;
          *(_OWORD *)(v91 + 2) = *(_OWORD *)v235;
          *((_QWORD *)v91 + 3) = v236;
          v282 = v91 + 8;
        }
        v82 = 0;
      }
      __p[0] = &v250;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if ((_QWORD)v289)
      {
        *((_QWORD *)&v289 + 1) = v289;
        operator delete((void *)v289);
      }
LABEL_156:
      if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v253.__r_.__value_.__l.__data_);
      if (v82)
        break;
      v26 = (uint64_t *)*v26;
      if (!v26)
        goto LABEL_160;
    }
    v100 = 1;
LABEL_285:
    v18 = v224;
LABEL_286:
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v271);
    if (SHIBYTE(v274.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v274.__r_.__value_.__l.__data_);
    if (v100 == 7 || !v100)
    {
LABEL_290:
      v19 = v229 + 1;
      if (v229 + 1 == v226)
        goto LABEL_294;
      continue;
    }
    break;
  }
  v172 = 0;
  v173 = 0;
LABEL_330:
  std::__tree<int>::destroy((uint64_t)&v276, v277[0]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v278);
  __p[0] = &v281;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (!v100)
  {
    v196 = a4;
    v271 = 0uLL;
    v276 = 0;
    v197 = (uint64_t *)operator new();
    quasar::Bitmap::~Bitmap(v173);
    v199 = *(_QWORD *)(v198 + 8);
    v197[1] = v199;
    ++*(_DWORD *)(v199 + 56);
    *v197 = (uint64_t)&unk_1E5D28970;
    v276 = v197;
    std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,void>((uint64_t)a2, *(_QWORD *)(a1 + 584), &v276, __p);
    v232 = __p[0];
    v271 = *(_OWORD *)__p;
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v281);
    if (kaldi::TrainingGraphCompiler::CompileGraph((uint64_t)v232, v196, &v281))
    {
      __p[1] = 0;
      __p[0] = 0;
      *(_QWORD *)&v255 = 0;
      kaldi::AddTransitionProbs(a2, __p, (uint64_t)&v281, *(float *)(a1 + 624), *(float *)(a1 + 628));
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      *(_QWORD *)((char *)&v278 + 4) = 0x147FFFFFFFLL;
      *(_QWORD *)((char *)&v279 + 4) = 0x400000003F000000;
      LODWORD(v278) = *(_DWORD *)(a1 + 636);
      v200 = *(_DWORD *)(a1 + 640);
      HIDWORD(v278) = 0;
      LODWORD(v279) = v200;
      kaldi::ScoreCacheFasterDecoder::ScoreCacheFasterDecoder(&v234, &v281, &v278, 0);
      kaldi::ScoreCacheFasterDecoder::Decode((kaldi::ScoreCacheFasterDecoder *)&v234, a3);
      v201 = (_QWORD *)operator new();
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v201);
      Lattice = kaldi::ScoreCacheFasterDecoder::GetLattice((uint64_t)&v234, (uint64_t)v201, a5, a2);
      v202 = *(_QWORD *)(v201[1] + 72) - *(_QWORD *)(v201[1] + 64);
      if ((int)(v202 >> 3) >= 1)
      {
        v203 = 0;
        v204 = (v202 >> 3);
        do
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)v201);
          v205 = *(_QWORD *)(*(_QWORD *)(v201[1] + 64) + 8 * v203);
          v206 = *(_QWORD *)(v205 + 48);
          if (*(_QWORD *)(v205 + 56) != v206)
          {
            v207 = 0;
            v208 = 0;
            do
            {
              v209 = v206 + v207;
              __p[0] = *(void **)(v206 + v207);
              __p[1] = *(void **)(v206 + v207 + 8);
              *(_QWORD *)&v256 = 0;
              v255 = 0uLL;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v255, *(const void **)(v206 + v207 + 16), *(_QWORD *)(v206 + v207 + 24), (uint64_t)(*(_QWORD *)(v206 + v207 + 24) - *(_QWORD *)(v206 + v207 + 16)) >> 2);
              DWORD2(v256) = *(_DWORD *)(v209 + 40);
              if ((_QWORD)v255)
              {
                *((_QWORD *)&v255 + 1) = v255;
                operator delete((void *)v255);
              }
              ++v208;
              v206 = *(_QWORD *)(v205 + 48);
              v207 += 48;
            }
            while (v208 < 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v205 + 56) - v206) >> 4));
          }
          ++v203;
        }
        while (v203 != v204);
      }
      if ((Lattice & 1) != 0)
      {
        *a9 = v201;
      }
      else
      {
        if (quasar::gLogLevel >= 2)
        {
          v269 = 0u;
          v270 = 0u;
          v267 = 0u;
          v268 = 0u;
          v265 = 0u;
          v266 = 0u;
          v263 = 0u;
          v264 = 0u;
          v261 = 0u;
          v262 = 0u;
          v259 = 0u;
          v260 = 0u;
          v257 = 0u;
          v258 = 0u;
          v255 = 0u;
          v256 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"AM fusion force alignment fail. Consider increase beam size.", 60);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
        }
        *a9 = 0;
        (*(void (**)(_QWORD *))(*v201 + 8))(v201);
      }
      kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&v234);
    }
    else
    {
      if (quasar::gLogLevel >= 2)
      {
        v269 = 0u;
        v270 = 0u;
        v267 = 0u;
        v268 = 0u;
        v265 = 0u;
        v266 = 0u;
        v263 = 0u;
        v264 = 0u;
        v261 = 0u;
        v262 = 0u;
        v259 = 0u;
        v260 = 0u;
        v257 = 0u;
        v258 = 0u;
        v255 = 0u;
        v256 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v210 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to create decoding graph.", 32);
        v211 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v210, (uint64_t)" Hint: Are all the words in the pron lexicon?", 45);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v211, (uint64_t)" Are all the words in the word symbol table unique?", 51);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
      *a9 = 0;
    }
    v281 = (char *)&unk_1E5D256C0;
    v212 = v282;
    if (v282)
    {
      v213 = v282[14] - 1;
      v282[14] = v213;
      if (!v213)
        (*(void (**)(__int32 *))(*(_QWORD *)v212 + 8))(v212);
    }
    v214 = (std::__shared_weak_count *)*((_QWORD *)&v271 + 1);
    if (*((_QWORD *)&v271 + 1))
    {
      v215 = (unint64_t *)(*((_QWORD *)&v271 + 1) + 8);
      do
        v216 = __ldaxr(v215);
      while (__stlxr(v216 - 1, v215));
      if (!v216)
      {
        ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
        std::__shared_weak_count::__release_weak(v214);
      }
    }
  }
  if (v172)
  {
    v191 = (unint64_t *)&v172->__shared_owners_;
    do
      v192 = __ldaxr(v191);
    while (__stlxr(v192 - 1, v191));
    if (!v192)
    {
      ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
      std::__shared_weak_count::__release_weak(v172);
    }
  }
  v284 = &unk_1E5D256C0;
  v193 = v285;
  if (v285)
  {
    v194 = *(_DWORD *)(v285 + 56) - 1;
    *(_DWORD *)(v285 + 56) = v194;
    if (!v194)
      (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::~__hash_table((uint64_t)v286);
}

void sub_1ADCCE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  std::__shared_weak_count *v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v39;
  int v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  _DWORD *v43;
  int v44;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&STACK[0x2E0]);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder((kaldi::ScoreCacheFasterDecoder *)&a35);
  *(_QWORD *)(v37 - 216) = &unk_1E5D256C0;
  v39 = *(_DWORD **)(v37 - 208);
  if (v39)
  {
    v40 = v39[14] - 1;
    v39[14] = v40;
    if (!v40)
      (*(void (**)(_DWORD *))(*(_QWORD *)v39 + 8))(v39);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x3F0]);
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  *(_QWORD *)(v37 - 192) = &unk_1E5D256C0;
  v43 = *(_DWORD **)(v37 - 184);
  if (v43)
  {
    v44 = v43[14] - 1;
    v43[14] = v44;
    if (!v44)
      (*(void (**)(_DWORD *))(*(_QWORD *)v43 + 8))(v43);
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::~__hash_table(v37 - 176);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<quasar::PronChoice>>::emplace_back<std::vector<quasar::PronChoice>>(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v17[5];

  v6 = a1[2];
  v4 = a1 + 2;
  v5 = v6;
  v7 = (_QWORD *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v17[4] = v4;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)v4, v12);
    v14 = &v13[24 * v9];
    v17[0] = v13;
    v17[1] = v14;
    v17[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v17[2] = v14 + 24;
    std::vector<std::vector<quasar::PronChoice>>::__swap_out_circular_buffer(a1, v17);
    v8 = (_QWORD *)a1[1];
    std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer(v17);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return v8 - 3;
}

void sub_1ADCCEF64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<quasar::PronChoice>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RealignAmFusionDecoder::supportsEager(quasar::RealignAmFusionDecoder *this)
{
  return 1;
}

void quasar::RealignAmFusionDecoder::~RealignAmFusionDecoder(void **this)
{
  quasar::RealignAmFusionDecoder::~RealignAmFusionDecoder(this);
  JUMPOUT(0x1AF44D190);
}

{
  *this = &off_1E5D38D08;
  kaldi::Vector<float>::Destroy((uint64_t)(this + 130));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 128));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 126));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 124));
  if (*((char *)this + 983) < 0)
    operator delete(this[120]);
  if (*((char *)this + 927) < 0)
    operator delete(this[113]);
  if (*((char *)this + 903) < 0)
    operator delete(this[110]);
  if (*((char *)this + 879) < 0)
    operator delete(this[107]);
  quasar::ForceAlignDecoderBase::~ForceAlignDecoderBase((quasar::ForceAlignDecoderBase *)this);
}

uint64_t quasar::getInfoFromLinearLattice(_QWORD *a1, kaldi::WordBoundaryInfo **a2, kaldi::TransitionModel *a3, int a4, uint64_t a5, kaldi::LatticeScoreCache *a6, int **a7, int **a8, uint64_t *a9)
{
  kaldi::WordBoundaryInfo *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __n128 v19;
  void *v20;
  _BOOL4 v21;
  _BOOL4 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  int v29;
  unint64_t v30;
  int *v31;
  int *v32;
  int *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  int *v39;
  int v40;
  int v41;
  unint64_t v42;
  int *v43;
  int *v44;
  int *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  int *v51;
  int v52;
  __n128 v53;
  BOOL v54;
  kaldi::WordBoundaryInfo **v55;
  uint64_t v56;
  int *v57;
  int *v58;
  int v59;
  unint64_t v60;
  int *v61;
  int *v62;
  int *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  int *v69;
  int v70;
  int *v71;
  int *v72;
  unint64_t v73;
  kaldi::TransitionModel *v74;
  signed int v75;
  BOOL IsSelfLoop;
  float Score;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  float v85;
  unint64_t v86;
  signed int *v87;
  _DWORD *v88;
  signed int *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  signed int *v95;
  signed int v96;
  unint64_t v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  char *v105;
  char *v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  unint64_t v110;
  float *v111;
  float *v112;
  float *v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  float *v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  int *v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  BOOL v133;
  uint64_t *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  kaldi::WordBoundaryInfo **v139;
  uint64_t v140;
  kaldi::WordBoundaryInfo *v141;
  kaldi::TransitionModel *v144;
  int **v145;
  uint64_t v146;
  void *v147[2];
  uint64_t v148;
  void *v149;
  int *v150;
  uint64_t v151;
  void *__p[2];
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  float v169;
  int v170;

  a7[1] = *a7;
  a8[1] = *a8;
  std::__list_imp<quasar::Word>::clear(a9);
  v15 = *a2;
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  if ((_DWORD)v16 == -1)
    return 0;
  v17 = v16;
  v144 = a3;
  v141 = v15;
  v139 = a2;
  v18 = (*(uint64_t (**)(_QWORD *))(*a1 + 160))(a1);
  v145 = a8;
  v146 = (uint64_t)(a7 + 2);
  v140 = (uint64_t)(a8 + 2);
  while (1)
  {
    (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(__p, a1, v17);
    LODWORD(v147[0]) = HIDWORD(__p[0]);
    LODWORD(v149) = __p[0];
    v170 = 2139095040;
    v169 = INFINITY;
    v19.n128_u32[0] = (unsigned __int32)__p[0];
    if (*(float *)__p == INFINITY)
    {
      v19.n128_u32[0] = (unsigned __int32)v147[0];
      v20 = __p[1];
      v21 = *(float *)v147 == v169 && (void *)v153 == __p[1];
    }
    else
    {
      v21 = 0;
      v20 = __p[1];
    }
    v22 = v18 > 0 && v21;
    if (v20)
    {
      *(_QWORD *)&v153 = v20;
      operator delete(v20);
    }
    if (!v22)
      break;
    v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * (int)v17) + 48);
    v24 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * (int)v17) + 56);
    v25 = v24 - v23;
    if (v24 == v23)
      v26 = 0;
    else
      v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * (int)v17) + 48);
    if (v24 == v23)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "!aiter.Done()");
      goto LABEL_190;
    }
    v27 = *(int **)(v23 + 16);
    v28 = *(int **)(v23 + 24);
    while (v27 != v28)
    {
      v29 = *v27;
      if (*v27 >= 1)
      {
        v31 = a7[1];
        v30 = (unint64_t)a7[2];
        if ((unint64_t)v31 >= v30)
        {
          v33 = *a7;
          v34 = v31 - *a7;
          v35 = v34 + 1;
          if ((unint64_t)(v34 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v36 = v30 - (_QWORD)v33;
          if (v36 >> 1 > v35)
            v35 = v36 >> 1;
          if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
            v37 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v37 = v35;
          if (v37)
          {
            v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v146, v37);
            v33 = *a7;
            v31 = a7[1];
            v29 = *v27;
          }
          else
          {
            v38 = 0;
          }
          v39 = (int *)&v38[4 * v34];
          *v39 = v29;
          v32 = v39 + 1;
          while (v31 != v33)
          {
            v40 = *--v31;
            *--v39 = v40;
          }
          *a7 = v39;
          a7[1] = v32;
          a7[2] = (int *)&v38[4 * v37];
          if (v33)
            operator delete(v33);
        }
        else
        {
          *v31 = v29;
          v32 = v31 + 1;
        }
        a7[1] = v32;
      }
      ++v27;
    }
    v41 = *(_DWORD *)(v26 + 4);
    if (v41 > 0)
    {
      v43 = v145[1];
      v42 = (unint64_t)v145[2];
      if ((unint64_t)v43 >= v42)
      {
        v45 = *v145;
        v46 = v43 - *v145;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v48 = v42 - (_QWORD)v45;
        if (v48 >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v49 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v49 = v47;
        if (v49)
        {
          v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v140, v49);
          v45 = *v145;
          v43 = v145[1];
          v41 = *(_DWORD *)(v26 + 4);
        }
        else
        {
          v50 = 0;
        }
        v51 = (int *)&v50[4 * v46];
        *v51 = v41;
        v44 = v51 + 1;
        while (v43 != v45)
        {
          v52 = *--v43;
          *--v51 = v52;
        }
        *v145 = v51;
        v145[1] = v44;
        v145[2] = (int *)&v50[4 * v49];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *v43 = v41;
        v44 = v43 + 1;
      }
      v145[1] = v44;
    }
    if (0xAAAAAAAAAAAAAAABLL * (v25 >> 4) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "aiter.Done()");
      goto LABEL_190;
    }
    v17 = *(unsigned int *)(v26 + 40);
    --v18;
  }
  (*(void (**)(void **__return_ptr, _QWORD *, uint64_t, __n128))(*a1 + 32))(__p, a1, v17, v19);
  LODWORD(v147[0]) = HIDWORD(__p[0]);
  LODWORD(v149) = __p[0];
  v170 = 2139095040;
  v169 = INFINITY;
  v53.n128_u32[0] = (unsigned __int32)__p[0];
  if (*(float *)__p == INFINITY)
  {
    v53.n128_u32[0] = (unsigned __int32)v147[0];
    v55 = v139;
    v54 = *(float *)v147 != v169 || (void *)v153 != __p[1];
  }
  else
  {
    v54 = 1;
    v55 = v139;
  }
  if (__p[1])
  {
    *(void **)&v153 = __p[1];
    operator delete(__p[1]);
  }
  if (!v54)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "lat.Final(s) != kaldi::CompactLatticeWeight::Zero()");
LABEL_190:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  (*(void (**)(void **__return_ptr, _QWORD *, uint64_t, __n128))(*a1 + 32))(__p, a1, v17, v53);
  v149 = 0;
  v150 = 0;
  v151 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v149, __p[1], v153, (uint64_t)(v153 - (unint64_t)__p[1]) >> 2);
  if (__p[1])
  {
    *(void **)&v153 = __p[1];
    operator delete(__p[1]);
  }
  v57 = (int *)v149;
  v58 = v150;
  if (v149 != v150)
  {
    do
    {
      v59 = *v57;
      if (*v57 >= 1)
      {
        v61 = a7[1];
        v60 = (unint64_t)a7[2];
        if ((unint64_t)v61 >= v60)
        {
          v63 = *a7;
          v64 = v61 - *a7;
          v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v66 = v60 - (_QWORD)v63;
          if (v66 >> 1 > v65)
            v65 = v66 >> 1;
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFFCLL)
            v67 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v67 = v65;
          if (v67)
          {
            v68 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v146, v67);
            v63 = *a7;
            v61 = a7[1];
            v59 = *v57;
          }
          else
          {
            v68 = 0;
          }
          v69 = (int *)&v68[4 * v64];
          *v69 = v59;
          v62 = v69 + 1;
          while (v61 != v63)
          {
            v70 = *--v61;
            *--v69 = v70;
          }
          *a7 = v69;
          a7[1] = v62;
          a7[2] = (int *)&v68[4 * v67];
          if (v63)
            operator delete(v63);
        }
        else
        {
          *v61 = v59;
          v62 = v61 + 1;
        }
        a7[1] = v62;
      }
      ++v57;
    }
    while (v57 != v58);
  }
  v71 = *a7;
  v72 = a7[1];
  v56 = *a7 != v72;
  if (*a7 != v72)
  {
    v73 = 0;
    v74 = v144;
    while (1)
    {
      v75 = kaldi::TransitionModel::TransitionIdToPhone(v74, v71[v73]);
      if (v75 != a4)
        break;
LABEL_161:
      ++v73;
      v71 = *a7;
      v121 = (char *)a7[1] - (char *)*a7;
      if (v73 >= v121 >> 2)
      {
        v122 = a9[2];
        if (v122)
          *(_DWORD *)(*a9 + 100) = ((unint64_t)v121 >> 2) - 1;
        v123 = *v145;
        v124 = (char *)v145[1] - (char *)*v145;
        v56 = v56;
        if (v124)
        {
          v125 = 0;
          v126 = v124 >> 2;
          if (v126 <= 1)
            v127 = 1;
          else
            v127 = v126;
          v128 = a9;
          do
          {
            v128 = (uint64_t *)v128[1];
            if (v128 == a9)
            {
              v128 = (uint64_t *)operator new(0x68uLL);
              *((_DWORD *)v128 + 4) = v123[v125];
              *(_OWORD *)(v128 + 3) = 0u;
              *(_OWORD *)(v128 + 5) = 0u;
              *(_OWORD *)(v128 + 7) = 0u;
              *(_OWORD *)(v128 + 9) = 0u;
              v128[11] = 0;
              v128[12] = -1;
              v137 = *a9;
              *v128 = *a9;
              v128[1] = (uint64_t)a9;
              *(_QWORD *)(v137 + 8) = v128;
              *a9 = (uint64_t)v128;
              a9[2] = ++v122;
            }
            else
            {
              v129 = *((_QWORD *)*v55 + 5);
              v130 = v123[v125];
              if (v129)
              {
                v131 = (uint64_t)*v55 + 40;
                do
                {
                  v132 = *(_DWORD *)(v129 + 28);
                  v133 = v132 < v130;
                  if (v132 >= v130)
                    v134 = (uint64_t *)v129;
                  else
                    v134 = (uint64_t *)(v129 + 8);
                  if (!v133)
                    v131 = v129;
                  v129 = *v134;
                }
                while (*v134);
                if ((kaldi::WordBoundaryInfo *)v131 != (kaldi::WordBoundaryInfo *)((char *)*v55 + 40)
                  && v130 >= *(_DWORD *)(v131 + 28))
                {
                  goto LABEL_181;
                }
              }
              if (v130 == *((_DWORD *)v141 + 6))
              {
LABEL_181:
                v135 = (char *)operator new(0x68uLL);
                *((_DWORD *)v135 + 4) = v130;
                *(_OWORD *)(v135 + 24) = 0u;
                *(_OWORD *)(v135 + 40) = 0u;
                *(_OWORD *)(v135 + 56) = 0u;
                *(_OWORD *)(v135 + 72) = 0u;
                *((_QWORD *)v135 + 11) = 0;
                *((_QWORD *)v135 + 12) = -1;
                v136 = *v128;
                *(_QWORD *)(v136 + 8) = v135;
                *(_QWORD *)v135 = v136;
                *v128 = (uint64_t)v135;
                *((_QWORD *)v135 + 1) = v128;
                ++v122;
                v128 = (uint64_t *)v135;
                a9[2] = v122;
              }
              else
              {
                *((_DWORD *)v128 + 4) = v130;
              }
            }
            ++v125;
          }
          while (v125 != v127);
        }
        goto LABEL_185;
      }
    }
    IsSelfLoop = kaldi::TransitionModel::IsSelfLoop(v74, (*a7)[v73]);
    if (a6)
    {
      Score = kaldi::LatticeScoreCache::GetScore(a6, v73, *(_DWORD *)(*((_QWORD *)v144 + 12) + 4 * (*a7)[v73]));
      if (IsSelfLoop)
        goto LABEL_102;
    }
    else
    {
      Score = 0.0;
      if (IsSelfLoop)
        goto LABEL_102;
    }
    if (kaldi::WordBoundaryInfo::TypeOfPhone(*v55, v75) == 1
      || kaldi::WordBoundaryInfo::TypeOfPhone(*v55, v75) == 3)
    {
      v78 = a9[2];
      if (v78)
        *(_DWORD *)(*a9 + 100) = v73 - 1;
      v79 = (char *)operator new(0x68uLL);
      *((_DWORD *)v79 + 4) = *((_DWORD *)v141 + 6);
      *(_OWORD *)(v79 + 24) = 0u;
      *(_OWORD *)(v79 + 40) = 0u;
      *(_OWORD *)(v79 + 56) = 0u;
      *(_OWORD *)(v79 + 72) = 0u;
      *((_QWORD *)v79 + 11) = 0;
      *((_DWORD *)v79 + 24) = v73;
      *((_DWORD *)v79 + 25) = -1;
      v80 = *a9;
      *(_QWORD *)v79 = *a9;
      *((_QWORD *)v79 + 1) = a9;
      *(_QWORD *)(v80 + 8) = v79;
      *a9 = (uint64_t)v79;
      v81 = v78 + 1;
      a9[2] = v78 + 1;
      goto LABEL_103;
    }
LABEL_102:
    v81 = a9[2];
LABEL_103:
    v74 = v144;
    if (v81)
    {
      v82 = *a9;
    }
    else
    {
      if (quasar::gLogLevel >= 5)
      {
        v167 = 0u;
        v168 = 0u;
        v165 = 0u;
        v166 = 0u;
        v163 = 0u;
        v164 = 0u;
        v161 = 0u;
        v162 = 0u;
        v159 = 0u;
        v160 = 0u;
        v157 = 0u;
        v158 = 0u;
        v155 = 0u;
        v156 = 0u;
        v153 = 0u;
        v154 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Words list should not be empty.", 31);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v82 = (uint64_t)operator new(0x68uLL);
      *(_DWORD *)(v82 + 16) = *((_DWORD *)v141 + 6);
      *(_OWORD *)(v82 + 24) = 0u;
      *(_OWORD *)(v82 + 40) = 0u;
      *(_OWORD *)(v82 + 56) = 0u;
      *(_OWORD *)(v82 + 72) = 0u;
      *(_QWORD *)(v82 + 88) = 0;
      *(_DWORD *)(v82 + 96) = v73;
      *(_DWORD *)(v82 + 100) = -1;
      v83 = *a9;
      *(_QWORD *)v82 = *a9;
      *(_QWORD *)(v82 + 8) = a9;
      *(_QWORD *)(v83 + 8) = v82;
      *a9 = v82;
      ++a9[2];
      v74 = v144;
    }
    if (kaldi::TransitionModel::IsSelfLoop(v74, (*a7)[v73]))
    {
      if (a6)
      {
        v84 = *(_QWORD *)(v82 + 80);
        v85 = *(float *)(v84 - 4);
        if (Score < v85)
          v85 = Score;
        *(float *)(v84 - 4) = v85;
      }
    }
    else
    {
      v86 = *(_QWORD *)(v82 + 40);
      v87 = *(signed int **)(v82 + 32);
      if ((unint64_t)v87 >= v86)
      {
        v89 = *(signed int **)(v82 + 24);
        v90 = v87 - v89;
        if ((unint64_t)(v90 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v91 = v86 - (_QWORD)v89;
        v92 = (uint64_t)(v86 - (_QWORD)v89) >> 1;
        if (v92 <= v90 + 1)
          v92 = v90 + 1;
        if (v91 >= 0x7FFFFFFFFFFFFFFCLL)
          v93 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v93 = v92;
        if (v93)
        {
          v94 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v82 + 40, v93);
          v89 = *(signed int **)(v82 + 24);
          v87 = *(signed int **)(v82 + 32);
        }
        else
        {
          v94 = 0;
        }
        v95 = (signed int *)&v94[4 * v90];
        *v95 = v75;
        v88 = v95 + 1;
        while (v87 != v89)
        {
          v96 = *--v87;
          *--v95 = v96;
        }
        *(_QWORD *)(v82 + 24) = v95;
        *(_QWORD *)(v82 + 32) = v88;
        *(_QWORD *)(v82 + 40) = &v94[4 * v93];
        if (v89)
          operator delete(v89);
      }
      else
      {
        *v87 = v75;
        v88 = v87 + 1;
      }
      *(_QWORD *)(v82 + 32) = v88;
      if (a5)
      {
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a5 + 88))(v147, a5, v75);
        v97 = *(_QWORD *)(v82 + 64);
        v98 = *(_QWORD *)(v82 + 56);
        if (v98 >= v97)
        {
          v100 = *(_QWORD *)(v82 + 48);
          v101 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - v100) >> 3);
          v102 = v101 + 1;
          if (v101 + 1 > 0xAAAAAAAAAAAAAAALL)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v103 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v97 - v100) >> 3);
          if (2 * v103 > v102)
            v102 = 2 * v103;
          if (v103 >= 0x555555555555555)
            v104 = 0xAAAAAAAAAAAAAAALL;
          else
            v104 = v102;
          *(_QWORD *)&v154 = v82 + 64;
          if (v104)
            v105 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v82 + 64, v104);
          else
            v105 = 0;
          v106 = &v105[24 * v101];
          __p[0] = v105;
          __p[1] = v106;
          *((_QWORD *)&v153 + 1) = &v105[24 * v104];
          v107 = *(_OWORD *)v147;
          *((_QWORD *)v106 + 2) = v148;
          *(_OWORD *)v106 = v107;
          v147[1] = 0;
          v148 = 0;
          v147[0] = 0;
          *(_QWORD *)&v153 = v106 + 24;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)(v82 + 48), (std::__split_buffer<std::string> *)__p);
          v108 = *(_QWORD *)(v82 + 56);
          std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)__p);
          v109 = SHIBYTE(v148);
          *(_QWORD *)(v82 + 56) = v108;
          if (v109 < 0)
            operator delete(v147[0]);
        }
        else
        {
          v99 = *(_OWORD *)v147;
          *(_QWORD *)(v98 + 16) = v148;
          *(_OWORD *)v98 = v99;
          *(_QWORD *)(v82 + 56) = v98 + 24;
        }
      }
      if (a6)
      {
        v110 = *(_QWORD *)(v82 + 88);
        v111 = *(float **)(v82 + 80);
        if ((unint64_t)v111 >= v110)
        {
          v113 = *(float **)(v82 + 72);
          v114 = v111 - v113;
          if ((unint64_t)(v114 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v115 = v110 - (_QWORD)v113;
          v116 = (uint64_t)(v110 - (_QWORD)v113) >> 1;
          if (v116 <= v114 + 1)
            v116 = v114 + 1;
          if (v115 >= 0x7FFFFFFFFFFFFFFCLL)
            v117 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v117 = v116;
          if (v117)
          {
            v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v82 + 88, v117);
            v113 = *(float **)(v82 + 72);
            v111 = *(float **)(v82 + 80);
          }
          else
          {
            v118 = 0;
          }
          v119 = (float *)&v118[4 * v114];
          *v119 = Score;
          v112 = v119 + 1;
          while (v111 != v113)
          {
            v120 = *((_DWORD *)v111-- - 1);
            *((_DWORD *)v119-- - 1) = v120;
          }
          *(_QWORD *)(v82 + 72) = v119;
          *(_QWORD *)(v82 + 80) = v112;
          *(_QWORD *)(v82 + 88) = &v118[4 * v117];
          if (v113)
            operator delete(v113);
        }
        else
        {
          *v111 = Score;
          v112 = v111 + 1;
        }
        *(_QWORD *)(v82 + 80) = v112;
      }
    }
    goto LABEL_161;
  }
LABEL_185:
  if (v149)
  {
    v150 = (int *)v149;
    operator delete(v149);
  }
  return v56;
}

void sub_1ADCCFB34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,uint64_t a27,std::__split_buffer<std::wstring> *a28)
{
  if (a24 < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_1ADCCFBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void std::__list_imp<quasar::Word>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        std::__destroy_at[abi:ne180100]<quasar::Word,0>((uint64_t)(v3 + 2));
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void std::__destroy_at[abi:ne180100]<quasar::Word,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void **v4;

  v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(_QWORD *)(a1 + 64) = v2;
    operator delete(v2);
  }
  v4 = (void **)(a1 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(_QWORD *)(a1 + 16) = v3;
    operator delete(v3);
  }
}

_QWORD *std::vector<quasar::Word>::__init_with_size[abi:ne180100]<std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::pair<std::string,quasar::PTree>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Word>,std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>,quasar::Word*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1ADCCFD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::Word>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Word>,std::__list_iterator<quasar::Word,void *>,std::__list_iterator<quasar::Word,void *>,quasar::Word*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v9[3];
  char v10;
  uint64_t v11;
  uint64_t v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::Word>::construct[abi:ne180100]<quasar::Word,quasar::Word&>(a1, v4, v6 + 16);
      v6 = *(_QWORD *)(v6 + 8);
      v4 = v12 + 88;
      v12 += 88;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADCCFDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<quasar::Word>::construct[abi:ne180100]<quasar::Word,quasar::Word&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 8), *(const void **)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 32), *(__int128 **)(a3 + 32), *(__int128 **)(a3 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 40) - *(_QWORD *)(a3 + 32)) >> 3));
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a2 + 56), *(const void **)(a3 + 56), *(_QWORD *)(a3 + 64), (uint64_t)(*(_QWORD *)(a3 + 64) - *(_QWORD *)(a3 + 56)) >> 2);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  return result;
}

void sub_1ADCCFE78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 16) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Word>,quasar::Word*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 88;
      std::allocator<quasar::Word>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<quasar::Word>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v3 = *(void **)(a2 + 56);
  if (v3)
  {
    *(_QWORD *)(a2 + 64) = v3;
    operator delete(v3);
  }
  v5 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v4 = *(void **)(a2 + 8);
  if (v4)
  {
    *(_QWORD *)(a2 + 16) = v4;
    operator delete(v4);
  }
}

void std::vector<quasar::Word>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        std::allocator<quasar::Word>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::map<int,std::set<int>>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 16);
  if (v3)
  {
    *(_QWORD *)(a2 + 24) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::FirstPassArcDetail>::__emplace_back_slow_path<int &>(uint64_t *a1, _DWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[5];

  v3 = *a1;
  v4 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8E38E38E38E38E39 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x1C71C71C71C71C7)
    v9 = 0x38E38E38E38E38ELL;
  else
    v9 = v5;
  v14[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[72 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v14[3] = &v10[72 * v9];
  *(_DWORD *)v11 = *a2;
  v11[4] = 0;
  *((_DWORD *)v11 + 2) = 1065353216;
  v11[12] = 0;
  *((_OWORD *)v11 + 1) = 0u;
  *((_OWORD *)v11 + 2) = 0u;
  *((_DWORD *)v11 + 16) = 0;
  *((_OWORD *)v11 + 3) = 0u;
  v14[2] = v11 + 72;
  std::vector<quasar::FirstPassArcDetail>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(v14);
  return v12;
}

void sub_1ADCD01BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::FirstPassArcDetail>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>,std::reverse_iterator<quasar::FirstPassArcDetail*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 72);
      a3 -= 72;
      *(_QWORD *)(v7 - 67) = *(_QWORD *)(a3 + 5);
      *(_QWORD *)(v7 - 72) = v8;
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 + 16);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 + 32);
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 + 40);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 56);
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 56) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 64);
      v7 = *((_QWORD *)&v14 + 1) - 72;
      *((_QWORD *)&v14 + 1) -= 72;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](v3, v1);
      v1 += 72;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::FirstPassArcDetail>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::FirstPassArcDetail>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 72;
    std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100](v4, i - 72);
  }
}

void kaldi::MinimumBayesRisk::~MinimumBayesRisk(kaldi::MinimumBayesRisk *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v7;

  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 192);
  v7 = (void **)((char *)this + 168);
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 144);
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 120);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v5 = (void *)*((_QWORD *)this + 11);
  if (v5)
  {
    *((_QWORD *)this + 12) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 8);
  if (v6)
  {
    *((_QWORD *)this + 9) = v6;
    operator delete(v6);
  }
  v7 = (void **)((char *)this + 40);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v7 = (void **)((char *)this + 16);
  std::vector<kaldi::MinimumBayesRisk::Arc>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 56)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<kaldi::MinimumBayesRisk::Arc>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<kaldi::MinimumBayesRisk::Arc>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<kaldi::MinimumBayesRisk::Arc>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 72)
  {
    v4 = *(void **)(i - 32);
    if (v4)
    {
      *(_QWORD *)(i - 24) = v4;
      operator delete(v4);
    }
  }
  a1[1] = v2;
}

void kaldi::ScoreCacheFasterDecoder::~ScoreCacheFasterDecoder(kaldi::ScoreCacheFasterDecoder *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned int *v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  size_t v17;
  _QWORD *v18;
  void **v19[34];

  v2 = *((_QWORD *)this + 7);
  if (v2 != -1)
  {
    v3 = *((_QWORD *)this + 9);
    do
    {
      v4 = (uint64_t *)(v3 + 16 * v2);
      v4[1] = 0;
      v2 = *v4;
    }
    while (v2 != -1);
  }
  v5 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = -1;
  kaldi::ScoreCacheFasterDecoder::ClearToks((uint64_t *)this, v5);
  v6 = (unsigned int *)MEMORY[0x1E0C83DA0];
  if (MEMORY[0x1AF44E9CC](*MEMORY[0x1E0C83DA0], *((_QWORD *)this + 2), 28 * *((int *)this + 8)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)": Could not vm_deallocate ", 26);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" bytes of ", 10);
    v12 = strlen((const char *)(0x80000001AE1849D4 & 0x7FFFFFFFFFFFFFFFLL));
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, 0x80000001AE1849D4 & 0x7FFFFFFFFFFFFFFFLL, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)": ", 2);
    std::ostream::operator<<();
    goto LABEL_13;
  }
  if (MEMORY[0x1AF44E9CC](*v6, *(_QWORD *)this, 4 * *((int *)this + 8)))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
    v14 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)": Could not vm_deallocate ", 26);
    v15 = (_QWORD *)std::ostream::operator<<();
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" bytes of ", 10);
    v17 = strlen((const char *)(*(_QWORD *)(MEMORY[0x1E0DE4EF8] + 8) & 0x7FFFFFFFFFFFFFFFLL));
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, *(_QWORD *)(MEMORY[0x1E0DE4EF8] + 8) & 0x7FFFFFFFFFFFFFFFLL, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)": ", 2);
    std::ostream::operator<<();
LABEL_13:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
  }
  v7 = (void *)*((_QWORD *)this + 27);
  if (v7)
  {
    *((_QWORD *)this + 28) = v7;
    operator delete(v7);
  }
  v19[0] = (void **)((char *)this + 192);
  std::vector<kaldi::ScoreCacheFasterDecoder::LmTrie>::__destroy_vector::operator()[abi:ne180100](v19);
  v8 = (void *)*((_QWORD *)this + 21);
  if (v8)
  {
    *((_QWORD *)this + 22) = v8;
    operator delete(v8);
  }
  kaldi::HashList<unsigned long long,unsigned int,std::hash<unsigned long long>,std::equal_to<unsigned long long>>::~HashList((_QWORD *)this + 6);
}

void fst::Prune<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::AnyArcFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char **v8;
  char **v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  int v14;
  unint64_t v15;
  float v16;
  float v17;
  float v18;
  BOOL v19;
  float v20;
  char *v21;
  char *v22;
  unint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  unsigned int *v32;
  float *v33;
  float *v34;
  unint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  float *v42;
  float *v43;
  int v44;
  char *v45;
  char *v46;
  unint64_t j;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  float *v58;
  float v59;
  float v60;
  float v61;
  BOOL v62;
  float v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  float v67;
  float v68;
  float v69;
  BOOL v70;
  float v71;
  unint64_t v72;
  int *v73;
  float v74;
  float v75;
  BOOL v76;
  float v77;
  float *k;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  float *v85;
  float *v86;
  int v87;
  float v88;
  float v89;
  float v90;
  BOOL v91;
  float v92;
  float v93;
  float v94;
  float v95;
  BOOL v96;
  float v97;
  char *v98;
  char *v99;
  unint64_t v100;
  int v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  int v109;
  int v110;
  uint64_t v111;
  unsigned int v112;
  char *v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  char *v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  char **v128;
  uint64_t v129;
  int v130;
  unsigned int v131;
  float v132;
  _QWORD v133[3];
  _DWORD *v134;
  unint64_t v135;
  float v136;
  unsigned int v137;
  void *__p[3];
  void *v139;
  char *v140;
  char *v141;
  void *v142;
  char *v143;
  char *v144;
  _QWORD v145[3];
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _QWORD v149[4];
  char *v150;
  char *v151;
  uint64_t v152;
  float *v153;
  float *v154;
  char *v155;
  _BYTE v156[9];

  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v6);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v127 = a2;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v7);
  v126 = a1;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1) != -1)
  {
    LODWORD(v145[0]) = 0;
    if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v156, (float *)a3, (float *)v145))
    {
      if (*(_DWORD *)(a3 + 4))
      {
        v153 = 0;
        v154 = 0;
        v155 = 0;
        v150 = 0;
        v151 = 0;
        v152 = 0;
        v8 = *(char ***)(a3 + 16);
        if (!v8)
        {
          fst::ShortestDistance<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, &v150, 1, *(float *)(a3 + 24));
          v8 = *(char ***)(a3 + 16);
        }
        if (v8)
          v9 = v8;
        else
          v9 = &v150;
        v11 = *v9;
        v10 = v9[1];
        if ((*(int (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126) < (unint64_t)((v10 - v11) >> 2))
        {
          v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
          v13 = *v9;
          LODWORD(v145[0]) = 0;
          LODWORD(v145[0]) = *(_DWORD *)&v13[4 * v12];
          LODWORD(v133[0]) = 2139095040;
          if (*(float *)v145 != INFINITY)
          {
            v145[0] = &v153;
            v145[1] = v9;
            v146 = 0u;
            v147 = 0u;
            v148 = 0u;
            memset(v149, 0, 28);
            v142 = 0;
            v143 = 0;
            v144 = 0;
            v139 = 0;
            v140 = 0;
            v141 = 0;
            memset(__p, 0, sizeof(__p));
            v137 = 0;
            v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v126 + 24))(v126);
            v137 = v14;
            v15 = v14;
            if (v14 >= (unint64_t)((v9[1] - *v9) >> 2))
            {
              v16 = INFINITY;
            }
            else
            {
              v16 = *(float *)&(*v9)[4 * v14];
              v17 = NAN;
              if (v16 == -INFINITY)
                goto LABEL_19;
            }
            v18 = *(float *)a3;
            v17 = NAN;
            if (*(float *)a3 != -INFINITY)
            {
              v17 = INFINITY;
              v19 = v18 == INFINITY || v16 == INFINITY;
              v20 = v16 + v18;
              if (!v19)
                v17 = v20;
            }
LABEL_19:
            v136 = v17;
            v21 = (char *)v142;
            v22 = v143;
            v23 = (v143 - (_BYTE *)v142) >> 2;
            if (v23 <= v15)
            {
              do
              {
                if (v22 >= v144)
                {
                  v25 = v23 + 1;
                  if ((v23 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v26 = v144 - v21;
                  if ((v144 - v21) >> 1 > v25)
                    v25 = v26 >> 1;
                  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
                    v27 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v27 = v25;
                  if (v27)
                  {
                    v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v144, v27);
                    v21 = (char *)v142;
                    v22 = v143;
                  }
                  else
                  {
                    v28 = 0;
                  }
                  v29 = &v28[4 * v23];
                  *(_DWORD *)v29 = -1;
                  v24 = v29 + 4;
                  while (v22 != v21)
                  {
                    v30 = *((_DWORD *)v22 - 1);
                    v22 -= 4;
                    *((_DWORD *)v29 - 1) = v30;
                    v29 -= 4;
                  }
                  v142 = v29;
                  v143 = v24;
                  v144 = &v28[4 * v27];
                  if (v21)
                  {
                    operator delete(v21);
                    v21 = (char *)v142;
                  }
                  else
                  {
                    v21 = v29;
                  }
                }
                else
                {
                  *(_DWORD *)v22 = -1;
                  v24 = v22 + 4;
                }
                v143 = v24;
                v23 = (v24 - v21) >> 2;
                v22 = v24;
              }
              while (v23 <= (int)v137);
            }
            v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 200))(v127);
            v32 = (unsigned int *)v142;
            *((_DWORD *)v142 + (int)v137) = v31;
            (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v127 + 176))(v127, v32[v137]);
            v33 = v153;
            v34 = v154;
            v35 = v154 - v153;
            for (i = (int)v137; v35 <= (int)v137; i = (int)v137)
            {
              if (v34 >= (float *)v155)
              {
                if ((v35 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v37 = v155 - (char *)v33;
                v38 = v37 >> 1;
                if (v37 >> 1 <= v35 + 1)
                  v38 = v35 + 1;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                  v39 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v39 = v38;
                if (v39)
                  v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v39);
                else
                  v40 = 0;
                v41 = &v40[4 * v35];
                *(_DWORD *)v41 = 2139095040;
                v34 = (float *)(v41 + 4);
                v43 = v153;
                v42 = v154;
                if (v154 != v153)
                {
                  do
                  {
                    v44 = *((_DWORD *)v42-- - 1);
                    *((_DWORD *)v41 - 1) = v44;
                    v41 -= 4;
                  }
                  while (v42 != v43);
                  v42 = v153;
                }
                v153 = (float *)v41;
                v154 = v34;
                v155 = &v40[4 * v39];
                if (v42)
                  operator delete(v42);
              }
              else
              {
                *v34++ = INFINITY;
              }
              v154 = v34;
              v33 = v153;
              v35 = v34 - v153;
            }
            v33[i] = 0.0;
            v45 = (char *)v139;
            v46 = v140;
            for (j = (v140 - (_BYTE *)v139) >> 3; j <= (int)v137; j = (v140 - (_BYTE *)v139) >> 3)
            {
              if (v46 >= v141)
              {
                v49 = j + 1;
                if ((j + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v50 = v141 - v45;
                if ((v141 - v45) >> 2 > v49)
                  v49 = v50 >> 2;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF8)
                  v51 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v141, v51);
                  v45 = (char *)v139;
                  v46 = v140;
                }
                else
                {
                  v52 = 0;
                }
                v53 = &v52[8 * j];
                *(_QWORD *)v53 = -1;
                v48 = v53 + 8;
                while (v46 != v45)
                {
                  v54 = *((_QWORD *)v46 - 1);
                  v46 -= 8;
                  *((_QWORD *)v53 - 1) = v54;
                  v53 -= 8;
                }
                v139 = v53;
                v140 = v48;
                v141 = &v52[8 * v51];
                if (v45)
                  operator delete(v45);
              }
              else
              {
                *(_QWORD *)v46 = -1;
                v48 = v46 + 8;
              }
              v140 = v48;
              LOBYTE(v133[0]) = 0;
              std::vector<BOOL>::push_back((uint64_t)__p, v133);
              v45 = (char *)v139;
              v46 = v140;
            }
            v55 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v145, (int *)&v137);
            v128 = v9;
            *((_QWORD *)v139 + (int)v137) = v55;
            if (!LODWORD(v149[3]))
              goto LABEL_199;
            while (1)
            {
              v137 = *(_DWORD *)v149[0];
              fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Pop((uint64_t)v145);
              v56 = v137;
              v57 = (int)v137;
              *((_QWORD *)v139 + (int)v137) = -1;
              *(_QWORD *)((char *)__p[0] + (((unint64_t)v56 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v56;
              v58 = v153;
              (*(void (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
              v60 = v58[v57];
              v61 = NAN;
              if (v60 != -INFINITY && v59 != -INFINITY)
              {
                v61 = INFINITY;
                v62 = v60 == INFINITY || v59 == INFINITY;
                v63 = v59 + v60;
                if (!v62)
                  v61 = v63;
              }
              *(float *)v133 = v61;
              if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v156, &v136, (float *)v133))
              {
                v64 = *((unsigned int *)v142 + (int)v137);
                (*(void (**)(uint64_t))(*(_QWORD *)v126 + 32))(v126);
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v127 + 184))(v127, v64);
              }
              v135 = 0;
              (*(void (**)(uint64_t, _QWORD, _QWORD *))(*(_QWORD *)v126 + 136))(v126, v137, v133);
              v65 = a3;
              while (1)
              {
                if (!v133[0])
                {
                  if (v135 >= v133[2])
                    goto LABEL_196;
                  goto LABEL_90;
                }
                if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)v133[0] + 24))(v133[0]))
                  break;
                if (v133[0])
                {
                  v66 = (*(uint64_t (**)(void))(*(_QWORD *)v133[0] + 32))();
                  goto LABEL_91;
                }
LABEL_90:
                v66 = v133[1] + 16 * v135;
LABEL_91:
                v67 = v153[v137];
                v68 = NAN;
                if (v67 != -INFINITY)
                {
                  v69 = *(float *)(v66 + 8);
                  v68 = NAN;
                  if (v69 != -INFINITY)
                  {
                    v68 = INFINITY;
                    v70 = v69 == INFINITY || v67 == INFINITY;
                    v71 = v67 + v69;
                    if (!v70)
                      v68 = v71;
                  }
                }
                v73 = (int *)(v66 + 12);
                v72 = *(int *)(v66 + 12);
                if (v72 >= (v128[1] - *v128) >> 2)
                  v74 = INFINITY;
                else
                  v74 = *(float *)&(*v128)[4 * v72];
                v75 = NAN;
                if (v68 != -INFINITY && v74 != -INFINITY)
                {
                  v75 = INFINITY;
                  v76 = v74 == INFINITY || v68 == INFINITY;
                  v77 = v68 + v74;
                  if (!v76)
                    v75 = v77;
                }
                v132 = v75;
                if (!fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v156, &v136, &v132)
                  && (*(_DWORD *)(v65 + 4) == -1
                   || (*(int (**)(uint64_t))(*(_QWORD *)v127 + 160))(v127) < *(_DWORD *)(v65 + 4)))
                {
                  for (k = v154; ; v154 = k)
                  {
                    v79 = k - v153;
                    v80 = *v73;
                    if (v79 > v80)
                      break;
                    if (k >= (float *)v155)
                    {
                      if ((v79 + 1) >> 62)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v81 = (v155 - (char *)v153) >> 1;
                      if (v81 <= v79 + 1)
                        v81 = v79 + 1;
                      if ((unint64_t)(v155 - (char *)v153) >= 0x7FFFFFFFFFFFFFFCLL)
                        v82 = 0x3FFFFFFFFFFFFFFFLL;
                      else
                        v82 = v81;
                      if (v82)
                        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v82);
                      else
                        v83 = 0;
                      v84 = &v83[4 * v79];
                      *(_DWORD *)v84 = 2139095040;
                      k = (float *)(v84 + 4);
                      v86 = v153;
                      v85 = v154;
                      if (v154 != v153)
                      {
                        do
                        {
                          v87 = *((_DWORD *)v85-- - 1);
                          *((_DWORD *)v84 - 1) = v87;
                          v84 -= 4;
                        }
                        while (v85 != v86);
                        v85 = v153;
                      }
                      v153 = (float *)v84;
                      v154 = k;
                      v155 = &v83[4 * v82];
                      if (v85)
                        operator delete(v85);
                    }
                    else
                    {
                      *k++ = INFINITY;
                    }
                  }
                  v88 = v153[v137];
                  v89 = NAN;
                  if (v88 != -INFINITY)
                  {
                    v90 = *(float *)(v66 + 8);
                    v89 = NAN;
                    if (v90 != -INFINITY)
                    {
                      v89 = INFINITY;
                      v91 = v90 == INFINITY || v88 == INFINITY;
                      v92 = v88 + v90;
                      if (!v91)
                        v89 = v92;
                    }
                  }
                  *(float *)&v129 = v89;
                  if (fst::NaturalLess<fst::TropicalWeightTpl<float>>::operator()((uint64_t)v156, (float *)&v129, &v153[v80]))
                  {
                    v93 = v153[v137];
                    v94 = NAN;
                    if (v93 != -INFINITY)
                    {
                      v95 = *(float *)(v66 + 8);
                      v94 = NAN;
                      if (v95 != -INFINITY)
                      {
                        v94 = INFINITY;
                        v96 = v95 == INFINITY || v93 == INFINITY;
                        v97 = v93 + v95;
                        if (!v96)
                          v94 = v97;
                      }
                    }
                    v153[*v73] = v94;
                  }
                  v98 = (char *)v142;
                  v99 = v143;
                  v100 = (v143 - (_BYTE *)v142) >> 2;
                  v101 = *v73;
                  if (v100 <= *v73)
                  {
                    do
                    {
                      if (v99 >= v144)
                      {
                        v104 = v100 + 1;
                        if ((v100 + 1) >> 62)
                          std::vector<int>::__throw_length_error[abi:ne180100]();
                        v105 = v144 - v98;
                        if ((v144 - v98) >> 1 > v104)
                          v104 = v105 >> 1;
                        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL)
                          v106 = 0x3FFFFFFFFFFFFFFFLL;
                        else
                          v106 = v104;
                        if (v106)
                        {
                          v107 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v144, v106);
                          v98 = (char *)v142;
                          v99 = v143;
                        }
                        else
                        {
                          v107 = 0;
                        }
                        v108 = &v107[4 * v100];
                        *(_DWORD *)v108 = -1;
                        v103 = v108 + 4;
                        while (v99 != v98)
                        {
                          v109 = *((_DWORD *)v99 - 1);
                          v99 -= 4;
                          *((_DWORD *)v108 - 1) = v109;
                          v108 -= 4;
                        }
                        v142 = v108;
                        v143 = v103;
                        v144 = &v107[4 * v106];
                        if (v98)
                          operator delete(v98);
                      }
                      else
                      {
                        *(_DWORD *)v99 = -1;
                        v103 = v99 + 4;
                      }
                      v143 = v103;
                      v98 = (char *)v142;
                      v100 = (v103 - (_BYTE *)v142) >> 2;
                      v101 = *v73;
                      v99 = v103;
                    }
                    while (v100 <= *v73);
                    v102 = v101;
                  }
                  else
                  {
                    v102 = v101;
                  }
                  if (*(_DWORD *)&v98[4 * v102] == -1)
                  {
                    v110 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v127 + 200))(v127);
                    v98 = (char *)v142;
                    *((_DWORD *)v142 + *v73) = v110;
                    v101 = *v73;
                  }
                  v111 = *(unsigned int *)&v98[4 * v137];
                  v112 = *(_DWORD *)&v98[4 * v101];
                  v129 = *(_QWORD *)v66;
                  v130 = *(_DWORD *)(v66 + 8);
                  v131 = v112;
                  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v127 + 208))(v127, v111, &v129);
                  while (1)
                  {
                    v113 = (char *)v139;
                    v114 = v140;
                    v115 = (v140 - (_BYTE *)v139) >> 3;
                    v116 = *v73;
                    if (v115 > v116)
                      break;
                    if (v140 >= v141)
                    {
                      v118 = v115 + 1;
                      if ((v115 + 1) >> 61)
                        std::vector<int>::__throw_length_error[abi:ne180100]();
                      v119 = v141 - (_BYTE *)v139;
                      if ((v141 - (_BYTE *)v139) >> 2 > v118)
                        v118 = v119 >> 2;
                      if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
                        v120 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v120 = v118;
                      if (v120)
                      {
                        v121 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v141, v120);
                        v113 = (char *)v139;
                        v114 = v140;
                      }
                      else
                      {
                        v121 = 0;
                      }
                      v122 = &v121[8 * v115];
                      *(_QWORD *)v122 = -1;
                      v117 = v122 + 8;
                      while (v114 != v113)
                      {
                        v123 = *((_QWORD *)v114 - 1);
                        v114 -= 8;
                        *((_QWORD *)v122 - 1) = v123;
                        v122 -= 8;
                      }
                      v139 = v122;
                      v140 = v117;
                      v141 = &v121[8 * v120];
                      if (v113)
                        operator delete(v113);
                    }
                    else
                    {
                      *(_QWORD *)v140 = -1;
                      v117 = v114 + 8;
                    }
                    v140 = v117;
                    LOBYTE(v129) = 0;
                    std::vector<BOOL>::push_back((uint64_t)__p, &v129);
                  }
                  v65 = a3;
                  if (((*(_QWORD *)((char *)__p[0] + ((v116 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v116) & 1) == 0)
                  {
                    v124 = *((_QWORD *)v139 + v116);
                    if (v124 == -1)
                    {
                      v125 = fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Insert((uint64_t)v145, (int *)(v66 + 12));
                      *((_QWORD *)v139 + *v73) = v125;
                    }
                    else
                    {
                      fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::Update((uint64_t)v145, v124, (int *)(v66 + 12));
                    }
                  }
                }
                if (v133[0])
                  (*(void (**)(_QWORD))(*(_QWORD *)v133[0] + 40))(v133[0]);
                else
                  ++v135;
              }
              if (v133[0])
              {
                (*(void (**)(void))(*(_QWORD *)v133[0] + 8))();
                goto LABEL_198;
              }
LABEL_196:
              if (v134)
                --*v134;
LABEL_198:
              if (!LODWORD(v149[3]))
              {
LABEL_199:
                if (__p[0])
                  operator delete(__p[0]);
                if (v139)
                {
                  v140 = (char *)v139;
                  operator delete(v139);
                }
                if (v142)
                {
                  v143 = (char *)v142;
                  operator delete(v142);
                }
                fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(v145);
                break;
              }
            }
          }
        }
        if (v150)
        {
          v151 = v150;
          operator delete(v150);
        }
        if (v153)
        {
          v154 = v153;
          operator delete(v153);
        }
      }
    }
  }
}

void sub_1ADCD15FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  uint64_t v34;
  void *v36;
  void *v37;

  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  fst::Heap<int,fst::PruneCompare<int,fst::TropicalWeightTpl<float>>,false>::~Heap(&a34);
  v36 = *(void **)(v34 - 144);
  if (v36)
  {
    *(_QWORD *)(v34 - 136) = v36;
    operator delete(v36);
  }
  v37 = *(void **)(v34 - 120);
  if (v37)
  {
    *(_QWORD *)(v34 - 112) = v37;
    operator delete(v37);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  fst *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  int v15;
  void *__p[2];
  char v18;
  char v19;

  *a1 = &unk_1E5D1DED8;
  a1[1] = 0;
  if (!(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10000, 1))
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v11 = (_QWORD *)fst::cerr(v10);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"DeterminizeFst:", 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" distance to final states computed for acceptors only", 53);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1[1] + 8) |= 4uLL;
  }
  v13 = (_QWORD *)operator new();
  fst::DeterminizeFsaImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>::DeterminizeFsaImpl(v13, a2, a3, a4, a5);
  v14 = (_DWORD *)a1[1];
  if (v14)
  {
    v15 = v14[14] - 1;
    v14[14] = v15;
    if (!v15)
      (*(void (**)(_DWORD *))(*(_QWORD *)v14 + 8))(v14);
  }
  a1[1] = v13;
  return a1;
}

void sub_1ADCD1858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  _QWORD *v18;
  _DWORD *v20;
  int v21;

  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  *v18 = &unk_1E5D275D8;
  v20 = (_DWORD *)v18[1];
  if (v20)
  {
    v21 = v20[14] - 1;
    v20[14] = v21;
    if (!v21)
      (*(void (**)(_DWORD *))(*(_QWORD *)v20 + 8))(v20);
  }
  _Unwind_Resume(a1);
}

_QWORD *fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::DeterminizeFst<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1E5D1DED8;
  a1[1] = 0;
  fst::DeterminizeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::Init<fst::DefaultCommonDivisor<fst::TropicalWeightTpl<float>>,fst::DefaultDeterminizeFilter<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DefaultDeterminizeStateTable<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::IntegerFilterState<signed char>>>((uint64_t)a1, a2, a3);
  return a1;
}

void sub_1ADCD1928(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;

  *v1 = &unk_1E5D275D8;
  v3 = v1[1];
  if (v3)
    fst::ComposeFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DefaultCacheStore<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeFst(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsLocalClass(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t i;

  *a1 = a2;
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  *((_OWORD *)a1 + 3) = 0u;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) != -1)
  {
    *((_DWORD *)a1 + 2) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 200))(*a1);
    fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(a1);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a1 + 160))(*a1);
    if (v4 >= 1)
    {
      v5 = 0;
      do
      {
        for (i = 0; i < (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*a1 + 40))(*a1, v5); ++i)
          fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEps(a1, v5, i);
        v5 = (v5 + 1);
      }
      while ((_DWORD)v5 != v4);
    }
    fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
  }
  return a1;
}

void sub_1ADCD1A38(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = (void *)v1[5];
  if (v4)
  {
    v1[6] = v4;
    operator delete(v4);
  }
  v5 = *v2;
  if (*v2)
  {
    v1[3] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::InitNumArcs(_QWORD *a1)
{
  int v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  __n128 v6;
  _BOOL4 v7;
  void *v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *__p;
  void *v15;
  _DWORD *v16;
  unint64_t v17;
  float v18;
  int v19;
  float v20;
  int v21;

  v2 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 160))(*a1);
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 2), v2);
  v3 = a1 + 5;
  std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 5), v2);
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
  ++*(_DWORD *)(a1[2] + 4 * (int)result);
  if (v2 < 1)
    return result;
  for (i = 0; i != v2; ++i)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v13, *a1, i);
    v20 = *((float *)&v13 + 1);
    v21 = v13;
    v19 = 2139095040;
    v18 = INFINITY;
    v6.n128_u32[0] = v13;
    if (*(float *)&v13 != INFINITY)
    {
      v7 = 1;
      v8 = __p;
      if (!__p)
        goto LABEL_9;
      goto LABEL_8;
    }
    v6.n128_f32[0] = v20;
    v8 = __p;
    if (v20 == v18)
    {
      v7 = v15 != __p;
      if (!__p)
        goto LABEL_9;
LABEL_8:
      v15 = v8;
      operator delete(v8);
      goto LABEL_9;
    }
    v7 = 1;
    if (__p)
      goto LABEL_8;
LABEL_9:
    if (v7)
      ++*(_DWORD *)(*v3 + 4 * i);
    v9 = *a1;
    v17 = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t *, __n128))(*(_QWORD *)v9 + 136))(v9, i, &v13, v6);
    while (1)
    {
      result = v13;
      if (!v13)
      {
        if (v17 >= (unint64_t)v15)
          goto LABEL_23;
LABEL_17:
        v12 = 0;
        v11 = (char *)__p + 48 * v17;
        goto LABEL_18;
      }
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      result = v13;
      if (v10)
        break;
      if (!v13)
        goto LABEL_17;
      v11 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 32))();
      v12 = v13;
LABEL_18:
      ++*(_DWORD *)(a1[2] + 4 * *((int *)v11 + 10));
      ++*(_DWORD *)(*v3 + 4 * i);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
      else
        ++v17;
    }
    if (v13)
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)v13 + 8))();
      continue;
    }
LABEL_23:
    if (v16)
      --*v16;
  }
  return result;
}

void sub_1ADCD1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _DWORD **v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  else
    quasar::InverseTextNormalizer::getNumTokens(v10);
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEps(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  float32x2_t *v11;
  float32x2_t v12[2];
  void *__p[3];
  int v14;
  float32x2_t v15[2];
  _QWORD v16[3];
  int v17;
  float32x2_t v18;
  float32x2_t v19;
  void *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _QWORD v24[3];
  _DWORD *v25;
  uint64_t v26;

  v20 = 0;
  v21 = 0;
  v22 = 0;
  v6 = *a1;
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v6 + 136))(v6, a2, v24);
  if (v24[0])
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v24[0] + 64))(v24[0], a3);
    if (v24[0])
    {
      v7 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 32))(v24[0]);
      goto LABEL_7;
    }
    v8 = v26;
  }
  else
  {
    v26 = a3;
    v8 = a3;
  }
  v7 = v24[1] + 48 * v8;
LABEL_7:
  v18 = *(float32x2_t *)v7;
  fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=((uint64_t)&v19, v7 + 8);
  v23 = *(_DWORD *)(v7 + 40);
  if (v24[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 8))(v24[0]);
  }
  else if (v25)
  {
    --*v25;
  }
  if (v23 != (_DWORD)a2 && v23 != *((_DWORD *)a1 + 2))
  {
    v9 = *(_DWORD *)(a1[5] + 4 * v23);
    if (*(_DWORD *)(a1[2] + 4 * v23) == 1 && v9 >= 2)
    {
      v15[0] = v18;
      v15[1] = v19;
      memset(v16, 0, sizeof(v16));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v16, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
      v17 = v23;
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern1(a1, a2, a3, v15);
      v10 = (void *)v16[0];
      if (!v16[0])
        goto LABEL_21;
      v11 = v15;
    }
    else
    {
      if (v9 != 1)
        goto LABEL_21;
      v12[0] = v18;
      v12[1] = v19;
      memset(__p, 0, sizeof(__p));
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__p, v20, (uint64_t)v21, (v21 - (_BYTE *)v20) >> 2);
      v14 = v23;
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern2(a1, a2, a3, v12);
      v10 = __p[0];
      if (!__p[0])
        goto LABEL_21;
      v11 = v12;
    }
    v11[3] = (float32x2_t)v10;
    operator delete(v10);
  }
LABEL_21:
  if (v20)
  {
    v21 = v20;
    operator delete(v20);
  }
}

void sub_1ADCD1EF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  if (a24)
    operator delete(a24);
  _Unwind_Resume(exception_object);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern1(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  int32x2_t *v9;
  void **v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  BOOL v22;
  int *v23;
  unint64_t v24;
  int *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v32;
  void *v33;
  _BYTE *v34;
  _BOOL4 CanCombineFinal;
  int32x2_t *v36;
  uint64_t **v37;
  int32x2_t *v38;
  __int32 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int32 v43;
  __n128 v44;
  _BOOL4 v45;
  uint64_t v46;
  void **v47;
  int v48;
  void *v49;
  int v50;
  uint64_t v51;
  int *v52;
  unint64_t v53;
  int *v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  int v58;
  int v59;
  int v60;
  BOOL v61;
  int *v62;
  unint64_t v63;
  int *v64;
  unint64_t v65;
  uint64_t v66;
  int v67;
  int v68;
  int v69;
  int v70;
  BOOL v71;
  int *v72;
  unint64_t v73;
  int *v74;
  unint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  int v80;
  BOOL v81;
  int *v82;
  unint64_t v83;
  int *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  int v90;
  BOOL v91;
  _QWORD *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  int32x2_t v97;
  void *v98;
  void *v99;
  uint64_t v100;
  _DWORD v101[2];
  void *v102;
  void *v103;
  uint64_t v104;
  uint64_t *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  void *v109;
  void *__p;
  _BYTE *v111;
  uint64_t v112;
  _QWORD *v113;
  void *v114;
  void *v115;
  void *v116;
  uint64_t v117;
  uint64_t *v118;
  void *v119;
  void *v120;
  _BYTE *v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  int32x2_t v128;
  int *v129;
  int *v130;
  uint64_t v131;
  int32x2_t v132;
  int *v133;
  int *v134;
  uint64_t v135;
  float v136;
  int v137;
  float v138;

  v7 = a4[5].u32[0];
  v132 = vdup_n_s32(0x7F800000u);
  v134 = 0;
  v135 = 0;
  v133 = 0;
  v128 = v132;
  v130 = 0;
  v131 = 0;
  v129 = 0;
  v125 = 0;
  v126 = 0;
  v127 = 0;
  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v7, &v124);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v124 + 24))(v124))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v124 + 32))(v124);
    v118 = *(uint64_t **)v8;
    v119 = *(void **)(v8 + 8);
    v121 = 0;
    v122 = 0;
    v120 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v120, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
    v123 = *(_DWORD *)(v8 + 40);
    if (v123 == *((_DWORD *)a1 + 2))
      goto LABEL_21;
    v115 = 0;
    v116 = 0;
    v117 = 0;
    if (!fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs((uint64_t)a1, a4, (float32x2_t *)&v118, (int32x2_t *)&v113))
    {
      if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) < (float)(*(float *)&v119 + *((float *)&v119 + 1)))
        goto LABEL_8;
      v10 = &v119;
      if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) <= (float)(*(float *)&v119 + *((float *)&v119 + 1)))
      {
        if (*(float *)v128.i32 < *(float *)&v119)
        {
LABEL_8:
          v10 = (void **)&v128;
        }
        else
        {
          v10 = &v119;
          if (*(float *)v128.i32 <= *(float *)&v119)
          {
            v23 = v129;
            v24 = (unint64_t)((char *)v130 - (char *)v129) >> 2;
            v25 = (int *)v120;
            v26 = (unint64_t)(v121 - (_BYTE *)v120) >> 2;
            v10 = &v119;
            if ((int)v24 <= (int)v26)
            {
              v10 = (void **)&v128;
              if ((int)v24 >= 1 && (int)v24 >= (int)v26)
              {
                v27 = ((unint64_t)((char *)v130 - (char *)v129) >> 2) - 1;
                while (1)
                {
                  v29 = *v23++;
                  v28 = v29;
                  v31 = *v25++;
                  v30 = v31;
                  if (v28 < v31)
                    break;
                  v32 = v28 > v30 || v27-- == 0;
                  v10 = (void **)&v128;
                  if (v32)
                    goto LABEL_15;
                }
                v10 = &v119;
              }
            }
          }
        }
      }
LABEL_15:
      v109 = *v10;
      v111 = 0;
      v112 = 0;
      __p = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v10[1], (uint64_t)v10[2], ((_BYTE *)v10[2] - (_BYTE *)v10[1]) >> 2);
      v128 = (int32x2_t)v109;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v129, (char *)__p, (uint64_t)v111, (v111 - (_BYTE *)__p) >> 2);
      if (__p)
      {
        v111 = __p;
        operator delete(__p);
      }
      goto LABEL_19;
    }
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) >= (float)(*(float *)&v119 + *((float *)&v119 + 1)))
    {
      v9 = (int32x2_t *)&v119;
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) > (float)(*(float *)&v119 + *((float *)&v119 + 1)))
        goto LABEL_10;
      if (*(float *)v132.i32 >= *(float *)&v119)
      {
        v9 = (int32x2_t *)&v119;
        if (*(float *)v132.i32 <= *(float *)&v119)
        {
          v13 = v133;
          v14 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
          v15 = (int *)v120;
          v16 = (unint64_t)(v121 - (_BYTE *)v120) >> 2;
          v9 = (int32x2_t *)&v119;
          if ((int)v14 <= (int)v16)
          {
            v9 = &v132;
            if ((int)v14 >= 1 && (int)v14 >= (int)v16)
            {
              v17 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
              while (1)
              {
                v19 = *v13++;
                v18 = v19;
                v21 = *v15++;
                v20 = v21;
                if (v18 < v21)
                  break;
                v22 = v18 > v20 || v17-- == 0;
                v9 = &v132;
                if (v22)
                  goto LABEL_10;
              }
              v9 = (int32x2_t *)&v119;
            }
          }
        }
        goto LABEL_10;
      }
    }
    v9 = &v132;
LABEL_10:
    v109 = (void *)*v9;
    v111 = 0;
    v112 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v9[1], *(_QWORD *)&v9[2], (uint64_t)(*(_QWORD *)&v9[2] - *(_QWORD *)&v9[1]) >> 2);
    v132 = (int32x2_t)v109;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v133, (char *)__p, (uint64_t)v111, (v111 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v111 = __p;
      operator delete(__p);
    }
    --*(_DWORD *)(a1[5] + 4 * (int)v7);
    --*(_DWORD *)(a1[2] + 4 * v123);
    v123 = *((_DWORD *)a1 + 2);
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v124 + 88))(v124, &v118);
    v11 = v126;
    if (v126 >= v127)
    {
      v12 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__push_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(&v125, (uint64_t)&v113);
    }
    else
    {
      std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)&v125, (uint64_t)&v113);
      v12 = v11 + 48;
    }
    v126 = v12;
LABEL_19:
    if (v115)
    {
      v116 = v115;
      operator delete(v115);
    }
LABEL_21:
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 40))(v124);
  }
  if (v124)
    (*(void (**)(uint64_t))(*(_QWORD *)v124 + 8))(v124);
  (*(void (**)(uint64_t **__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(&v118, *a1, (int)v7);
  LODWORD(v109) = HIDWORD(v118);
  LODWORD(v113) = (_DWORD)v118;
  LODWORD(v124) = 2139095040;
  v138 = INFINITY;
  if (*(float *)&v118 != INFINITY)
  {
    v33 = v119;
    v34 = v120;
    goto LABEL_56;
  }
  v33 = v119;
  v34 = v120;
  if (*(float *)&v109 == v138 && v120 == v119)
  {
    if (v119)
      goto LABEL_66;
    goto LABEL_67;
  }
LABEL_56:
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v105 = v118;
  v107 = 0;
  v108 = 0;
  v106 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v106, v33, (uint64_t)v34, (v34 - (_BYTE *)v33) >> 2);
  CanCombineFinal = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(a4, (float32x2_t *)&v105, (int32x2_t *)&v113);
  if (v106)
  {
    v107 = v106;
    operator delete(v106);
  }
  if (CanCombineFinal)
  {
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) < (float)(*(float *)&v118 + *((float *)&v118 + 1)))
      goto LABEL_60;
    if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) <= (float)(*(float *)&v118 + *((float *)&v118 + 1)))
    {
      if (*(float *)v132.i32 < *(float *)&v118)
      {
LABEL_60:
        v36 = &v132;
      }
      else
      {
        if (*(float *)v132.i32 > *(float *)&v118)
          goto LABEL_92;
        v62 = v133;
        v63 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
        v64 = (int *)v119;
        v65 = (unint64_t)((_BYTE *)v120 - (_BYTE *)v119) >> 2;
        if ((int)v63 > (int)v65)
          goto LABEL_92;
        v36 = &v132;
        if ((int)v63 >= 1 && (int)v63 >= (int)v65)
        {
          v66 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
          do
          {
            v68 = *v62++;
            v67 = v68;
            v70 = *v64++;
            v69 = v70;
            if (v67 < v70)
              goto LABEL_92;
            v71 = v67 > v69 || v66-- == 0;
            v36 = &v132;
          }
          while (!v71);
        }
      }
    }
    else
    {
LABEL_92:
      v36 = (int32x2_t *)&v118;
    }
    v43 = v36->i32[1];
    LODWORD(v109) = v36->i32[0];
    HIDWORD(v109) = v43;
    v111 = 0;
    v112 = 0;
    __p = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)&v36[1], *(_QWORD *)&v36[2], (uint64_t)(*(_QWORD *)&v36[2] - *(_QWORD *)&v36[1]) >> 2);
    v132 = (int32x2_t)v109;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v133, (char *)__p, (uint64_t)v111, (v111 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v111 = __p;
      operator delete(__p);
    }
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v109, *a1, a2);
    v138 = *((float *)&v109 + 1);
    LODWORD(v124) = (_DWORD)v109;
    v137 = 2139095040;
    v136 = INFINITY;
    v44.n128_u32[0] = v109;
    v45 = *(float *)&v109 == INFINITY && (v44.n128_f32[0] = v138, v138 == v136) && v111 == __p;
    if (__p)
    {
      v111 = __p;
      operator delete(__p);
    }
    if (v45)
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    v46 = *a1;
    (*(void (**)(void **__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 32))(&v109, *a1, a2, v44);
    if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) < (float)(*(float *)&v113 + *((float *)&v113 + 1)))
    {
LABEL_104:
      v47 = &v109;
      goto LABEL_111;
    }
    if ((float)(*(float *)&v109 + *((float *)&v109 + 1)) > (float)(*(float *)&v113 + *((float *)&v113 + 1)))
      goto LABEL_110;
    if (*(float *)&v109 < *(float *)&v113)
      goto LABEL_104;
    if (*(float *)&v109 > *(float *)&v113
      || (v82 = (int *)__p,
          v83 = (unint64_t)(v111 - (_BYTE *)__p) >> 2,
          v84 = (int *)v114,
          v85 = (unint64_t)((_BYTE *)v115 - (_BYTE *)v114) >> 2,
          (int)v83 > (int)v85))
    {
LABEL_110:
      v47 = (void **)&v113;
    }
    else
    {
      v47 = &v109;
      if ((int)v83 >= 1 && (int)v83 >= (int)v85)
      {
        v86 = ((unint64_t)(v111 - (_BYTE *)__p) >> 2) - 1;
        do
        {
          v88 = *v82++;
          v87 = v88;
          v90 = *v84++;
          v89 = v90;
          if (v87 < v90)
            goto LABEL_110;
          v91 = v87 > v89 || v86-- == 0;
          v47 = &v109;
        }
        while (!v91);
      }
    }
LABEL_111:
    v50 = *((_DWORD *)v47 + 1);
    v101[0] = *(_DWORD *)v47;
    v101[1] = v50;
    v103 = 0;
    v104 = 0;
    v102 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v102, v47[1], (uint64_t)v47[2], ((_BYTE *)v47[2] - (_BYTE *)v47[1]) >> 2);
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v46 + 184))(v46, a2, v101);
    if (v102)
    {
      v103 = v102;
      operator delete(v102);
    }
    if (__p)
    {
      v111 = __p;
      operator delete(__p);
    }
    --*(_DWORD *)(a1[5] + 4 * (int)v7);
    v51 = *a1;
    v97 = vdup_n_s32(0x7F800000u);
    v99 = 0;
    v100 = 0;
    v98 = 0;
    (*(void (**)(uint64_t, _QWORD, int32x2_t *))(*(_QWORD *)v51 + 184))(v51, (int)v7, &v97);
    v49 = v98;
    if (v98)
    {
      v99 = v98;
LABEL_117:
      operator delete(v49);
    }
    goto LABEL_118;
  }
  if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) < (float)(*(float *)&v118 + *((float *)&v118 + 1)))
  {
LABEL_62:
    v37 = (uint64_t **)&v128;
    goto LABEL_107;
  }
  if ((float)(*(float *)v128.i32 + *(float *)&v128.i32[1]) > (float)(*(float *)&v118 + *((float *)&v118 + 1)))
    goto LABEL_106;
  if (*(float *)v128.i32 < *(float *)&v118)
    goto LABEL_62;
  if (*(float *)v128.i32 > *(float *)&v118
    || (v72 = v129,
        v73 = (unint64_t)((char *)v130 - (char *)v129) >> 2,
        v74 = (int *)v119,
        v75 = (unint64_t)((_BYTE *)v120 - (_BYTE *)v119) >> 2,
        (int)v73 > (int)v75))
  {
LABEL_106:
    v37 = &v118;
  }
  else
  {
    v37 = (uint64_t **)&v128;
    if ((int)v73 >= 1 && (int)v73 >= (int)v75)
    {
      v76 = ((unint64_t)((char *)v130 - (char *)v129) >> 2) - 1;
      do
      {
        v78 = *v72++;
        v77 = v78;
        v80 = *v74++;
        v79 = v80;
        if (v77 < v80)
          goto LABEL_106;
        v81 = v77 > v79 || v76-- == 0;
        v37 = (uint64_t **)&v128;
      }
      while (!v81);
    }
  }
LABEL_107:
  v48 = *((_DWORD *)v37 + 1);
  LODWORD(v109) = *(_DWORD *)v37;
  HIDWORD(v109) = v48;
  v111 = 0;
  v112 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v37[1], (uint64_t)v37[2], ((char *)v37[2] - (char *)v37[1]) >> 2);
  v128 = (int32x2_t)v109;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v129, (char *)__p, (uint64_t)v111, (v111 - (_BYTE *)__p) >> 2);
  v49 = __p;
  if (__p)
  {
    v111 = __p;
    goto LABEL_117;
  }
LABEL_118:
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  v33 = v119;
  if (v119)
  {
LABEL_66:
    v120 = v33;
    operator delete(v33);
  }
LABEL_67:
  LODWORD(v113) = v132.i32[1];
  LODWORD(v118) = v132.i32[0];
  LODWORD(v109) = 2139095040;
  LODWORD(v124) = 2139095040;
  if (*(float *)v132.i32 != INFINITY || *(float *)&v113 != *(float *)&v124 || v134 != v133)
  {
    LODWORD(v113) = v128.i32[1];
    LODWORD(v118) = v128.i32[0];
    LODWORD(v109) = 2139095040;
    LODWORD(v124) = 2139095040;
    if (*(float *)v128.i32 == INFINITY && *(float *)&v113 == *(float *)&v124 && v130 == v129)
    {
      --*(_DWORD *)(a1[5] + 4 * (int)a2);
      --*(_DWORD *)(a1[2] + 4 * a4[5].i32[0]);
      a4[5].i32[0] = *((_DWORD *)a1 + 2);
      (*(void (**)(_QWORD, uint64_t, _QWORD **))(*(_QWORD *)*a1 + 296))(*a1, a2, &v113);
      (*(void (**)(_QWORD *, uint64_t))(*v113 + 64))(v113, a3);
      (*(void (**)(_QWORD *, float32x2_t *))(*v113 + 88))(v113, a4);
      if (v113)
        (*(void (**)(_QWORD *))(*v113 + 8))(v113);
    }
    else
    {
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) < (float)(*(float *)v128.i32 + *(float *)&v128.i32[1]))
        goto LABEL_74;
      if ((float)(*(float *)v132.i32 + *(float *)&v132.i32[1]) <= (float)(*(float *)v128.i32 + *(float *)&v128.i32[1]))
      {
        if (*(float *)v132.i32 < *(float *)v128.i32)
        {
LABEL_74:
          v38 = &v132;
        }
        else
        {
          if (*(float *)v132.i32 > *(float *)v128.i32)
            goto LABEL_76;
          v52 = v133;
          v53 = (unint64_t)((char *)v134 - (char *)v133) >> 2;
          v54 = v129;
          v55 = (unint64_t)((char *)v130 - (char *)v129) >> 2;
          if ((int)v53 > (int)v55)
            goto LABEL_76;
          v38 = &v132;
          if ((int)v53 >= 1 && (int)v53 >= (int)v55)
          {
            v56 = ((unint64_t)((char *)v134 - (char *)v133) >> 2) - 1;
            do
            {
              v58 = *v52++;
              v57 = v58;
              v60 = *v54++;
              v59 = v60;
              if (v57 < v60)
                goto LABEL_76;
              v61 = v57 > v59 || v56-- == 0;
              v38 = &v132;
            }
            while (!v61);
          }
        }
      }
      else
      {
LABEL_76:
        v38 = &v128;
      }
      v39 = v38->i32[1];
      LODWORD(v118) = v38->i32[0];
      HIDWORD(v118) = v39;
      v120 = 0;
      v121 = 0;
      v119 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v119, *(const void **)&v38[1], *(_QWORD *)&v38[2], (uint64_t)(*(_QWORD *)&v38[2] - *(_QWORD *)&v38[1]) >> 2);
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v128, (uint64_t)&v118, 0, (uint64_t)&v113);
      v93 = v113;
      v95 = 0;
      v96 = 0;
      v94 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v94, v114, (uint64_t)v115, ((_BYTE *)v115 - (_BYTE *)v114) >> 2);
      fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::Reweight(a1, a2, a3, (float32x2_t *)&v93);
      if (v94)
      {
        v95 = v94;
        operator delete(v94);
      }
      if (v114)
      {
        v115 = v114;
        operator delete(v114);
      }
      if (v119)
      {
        v120 = v119;
        operator delete(v119);
      }
    }
  }
  v40 = v125;
  if (v126 != v125)
  {
    v41 = 0;
    v42 = 0;
    do
    {
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * *(int *)(v40 + v41 + 40));
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a1 + 208))(*a1, a2);
      ++v42;
      v40 = v125;
      v41 += 48;
    }
    while (v42 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v126 - v125) >> 4));
  }
  v118 = &v125;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
}

void sub_1ADCD2B44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;
  void *v44;

  a38 = v41 - 192;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a38);
  v43 = *(void **)(v41 - 160);
  if (v43)
  {
    *(_QWORD *)(v41 - 152) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v41 - 128);
  if (v44)
  {
    *(_QWORD *)(v41 - 120) = v44;
    operator delete(v44);
  }
  _Unwind_Resume(a1);
}

void fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::RemoveEpsPattern2(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v8;
  int v9;
  _BOOL4 CanCombineFinal;
  __n128 v11;
  _BOOL4 v12;
  uint64_t v13;
  int32x2_t *v14;
  __int32 v15;
  uint64_t v16;
  int *v17;
  unint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  int CanCombineArcs;
  int32x2_t v29;
  void *__p;
  void *v31;
  void *v32;
  uint64_t v33;
  int v34;
  _QWORD *v35;
  void *v36;
  void *v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int32x2_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  _DWORD v46[2];
  void *v47;
  void *v48;
  uint64_t v49;
  float32x2_t v50;
  void *v51;
  void *v52;
  uint64_t v53;
  float32x2_t v54;
  _BYTE *v55;
  _BYTE *v56;
  float v57;
  int v58;
  float v59;

  v8 = a4[5].i32[0];
  v9 = *(_DWORD *)(a1[2] + 4 * v8);
  (*(void (**)(float32x2_t *__return_ptr))(*(_QWORD *)*a1 + 32))(&v54);
  v29.i32[0] = v54.i32[1];
  LODWORD(v35) = v54.i32[0];
  LODWORD(v41) = 2139095040;
  v59 = INFINITY;
  if (v54.f32[0] == INFINITY && *(float *)v29.i32 == v59 && v56 == v55)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v8, &v41);
    while (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41) + 40) == *((_DWORD *)a1 + 2))
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 40))(v41);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 32))(v41);
    v35 = *(_QWORD **)v27;
    v36 = *(void **)(v27 + 8);
    v38 = 0;
    v39 = 0;
    v37 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v37, *(const void **)(v27 + 16), *(_QWORD *)(v27 + 24), (uint64_t)(*(_QWORD *)(v27 + 24) - *(_QWORD *)(v27 + 16)) >> 2);
    v40 = *(_DWORD *)(v27 + 40);
    v31 = 0;
    v32 = 0;
    v33 = 0;
    CanCombineArcs = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs((uint64_t)a1, a4, (float32x2_t *)&v35, &v29);
    if (CanCombineArcs)
    {
      if (v9 == 1)
      {
        --*(_DWORD *)(a1[5] + 4 * v8);
        --*(_DWORD *)(a1[2] + 4 * v40);
        v40 = *((_DWORD *)a1 + 2);
        (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v41 + 88))(v41, &v35);
      }
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
      ++*(_DWORD *)(a1[2] + 4 * v34);
      (*(void (**)(_QWORD, uint64_t, int32x2_t *))(*(_QWORD *)*a1 + 208))(*a1, a2, &v29);
    }
    if (v31)
    {
      v32 = v31;
      operator delete(v31);
    }
    if (v37)
    {
      v38 = v37;
      operator delete(v37);
    }
    if (v41)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
    if (CanCombineArcs)
      goto LABEL_30;
    goto LABEL_32;
  }
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v50 = v54;
  v52 = 0;
  v53 = 0;
  v51 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v51, v55, (uint64_t)v56, (v56 - v55) >> 2);
  CanCombineFinal = fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(a4, &v50, (int32x2_t *)&v35);
  if (v51)
  {
    v52 = v51;
    operator delete(v51);
  }
  if (CanCombineFinal)
  {
    (*(void (**)(int32x2_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*a1 + 32))(&v29, *a1, a2);
    v59 = *(float *)&v29.i32[1];
    LODWORD(v41) = v29.i32[0];
    v58 = 2139095040;
    v57 = INFINITY;
    v11.n128_u32[0] = v29.i32[0];
    v12 = *(float *)v29.i32 == INFINITY && (v11.n128_f32[0] = v59, v59 == v57) && v31 == __p;
    if (__p)
    {
      v31 = __p;
      operator delete(__p);
    }
    if (v12)
      ++*(_DWORD *)(a1[5] + 4 * (int)a2);
    v13 = *a1;
    (*(void (**)(int32x2_t *__return_ptr, _QWORD, uint64_t, __n128))(*(_QWORD *)*a1 + 32))(&v29, *a1, a2, v11);
    if ((float)(*(float *)v29.i32 + *(float *)&v29.i32[1]) >= (float)(*(float *)&v35 + *((float *)&v35 + 1)))
    {
      if ((float)(*(float *)v29.i32 + *(float *)&v29.i32[1]) > (float)(*(float *)&v35 + *((float *)&v35 + 1)))
      {
LABEL_17:
        v14 = (int32x2_t *)&v35;
LABEL_20:
        v15 = v14->i32[1];
        v46[0] = v14->i32[0];
        v46[1] = v15;
        v48 = 0;
        v49 = 0;
        v47 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v47, *(const void **)&v14[1], *(_QWORD *)&v14[2], (uint64_t)(*(_QWORD *)&v14[2] - *(_QWORD *)&v14[1]) >> 2);
        (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v13 + 184))(v13, a2, v46);
        if (v47)
        {
          v48 = v47;
          operator delete(v47);
        }
        if (__p)
        {
          v31 = __p;
          operator delete(__p);
        }
        if (v9 == 1)
        {
          --*(_DWORD *)(a1[5] + 4 * v8);
          v16 = *a1;
          v42 = vdup_n_s32(0x7F800000u);
          v44 = 0;
          v45 = 0;
          v43 = 0;
          (*(void (**)(uint64_t, uint64_t, int32x2_t *))(*(_QWORD *)v16 + 184))(v16, v8, &v42);
          if (v43)
          {
            v44 = v43;
            operator delete(v43);
          }
        }
        goto LABEL_27;
      }
      if (*(float *)v29.i32 >= *(float *)&v35)
      {
        if (*(float *)v29.i32 <= *(float *)&v35)
        {
          v17 = (int *)__p;
          v18 = (unint64_t)((_BYTE *)v31 - (_BYTE *)__p) >> 2;
          v19 = (int *)v36;
          v20 = (unint64_t)((_BYTE *)v37 - (_BYTE *)v36) >> 2;
          if ((int)v18 <= (int)v20)
          {
            v14 = &v29;
            if ((int)v18 < 1 || (int)v18 < (int)v20)
              goto LABEL_20;
            v21 = ((unint64_t)((_BYTE *)v31 - (_BYTE *)__p) >> 2) - 1;
            while (1)
            {
              v23 = *v17++;
              v22 = v23;
              v25 = *v19++;
              v24 = v25;
              if (v22 < v25)
                break;
              v26 = v22 > v24 || v21-- == 0;
              v14 = &v29;
              if (v26)
                goto LABEL_20;
            }
          }
        }
        goto LABEL_17;
      }
    }
    v14 = &v29;
    goto LABEL_20;
  }
LABEL_27:
  if (v36)
  {
    v37 = v36;
    operator delete(v36);
  }
  if (CanCombineFinal)
  {
LABEL_30:
    --*(_DWORD *)(a1[5] + 4 * (int)a2);
    --*(_DWORD *)(a1[2] + 4 * v8);
    a4[5].i32[0] = *((_DWORD *)a1 + 2);
    (*(void (**)(_QWORD, uint64_t, _QWORD **))(*(_QWORD *)*a1 + 296))(*a1, a2, &v35);
    (*(void (**)(_QWORD *, uint64_t))(*v35 + 64))(v35, a3);
    (*(void (**)(_QWORD *, float32x2_t *))(*v35 + 88))(v35, a4);
    if (v35)
      (*(void (**)(_QWORD *))(*v35 + 8))(v35);
  }
LABEL_32:
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_1ADCD3204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29)
{
  uint64_t v29;
  void *v31;

  v31 = *(void **)(v29 - 120);
  if (v31)
  {
    *(_QWORD *)(v29 - 112) = v31;
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineArcs(uint64_t a1, float32x2_t *a2, float32x2_t *a3, int32x2_t *a4)
{
  BOOL v4;
  __int32 v9;
  __int32 v10;
  int32x2_t v12;
  void *__p;
  _BYTE *v14;

  if (a2->i32[0])
    v4 = a3->i32[0] == 0;
  else
    v4 = 1;
  if (!v4)
    return 0;
  if (a2->i32[1] && a3->i32[1] != 0)
    return 0;
  fst::Times<fst::LatticeWeightTpl<float>,int>(a2 + 1, a3 + 1, &v12);
  a4[1] = v12;
  if (&a4[1] != &v12)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&a4[2], (char *)__p, (uint64_t)v14, (v14 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  v9 = a2->i32[0];
  if (!a2->i32[0])
    v9 = a3->i32[0];
  a4->i32[0] = v9;
  v10 = a2->i32[1];
  if (!v10)
    v10 = a3->i32[1];
  a4->i32[1] = v10;
  a4[5].i32[0] = a3[5].i32[0];
  return 1;
}

void sub_1ADCD33D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::CanCombineFinal(float32x2_t *a1, float32x2_t *a2, int32x2_t *a3)
{
  _BOOL8 v3;
  int32x2_t v6;
  void *__p;
  _BYTE *v8;

  v3 = *a1 == 0;
  if (!*(_QWORD *)a1)
  {
    fst::Times<fst::LatticeWeightTpl<float>,int>(a1 + 1, a2, &v6);
    *a3 = v6;
    if (&v6 != a3)
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&a3[1], (char *)__p, (uint64_t)v8, (v8 - (_BYTE *)__p) >> 2);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
  return v3;
}

void sub_1ADCD347C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::RemoveEpsLocalClass<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::ReweightPlusDefault<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>>::Reweight(_QWORD *a1, uint64_t a2, uint64_t a3, float32x2_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[8];
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BYTE *v17;
  float32x2_t v18;
  void *__p;
  void *v20;
  void *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  float32x2_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  float v32;
  int v33;

  (*(void (**)(_QWORD, uint64_t, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, a2, &v31);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 64))(v31, a3);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 32))(v31);
  v25 = *(_QWORD *)v7;
  v26 = *(float32x2_t *)(v7 + 8);
  v28 = 0;
  v29 = 0;
  v27 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v27, *(const void **)(v7 + 16), *(_QWORD *)(v7 + 24), (uint64_t)(*(_QWORD *)(v7 + 24) - *(_QWORD *)(v7 + 16)) >> 2);
  v30 = *(_DWORD *)(v7 + 40);
  fst::Times<fst::LatticeWeightTpl<float>,int>(&v26, a4, (int32x2_t *)&v18);
  v26 = v18;
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v27, (char *)__p, (uint64_t)v20, ((_BYTE *)v20 - (_BYTE *)__p) >> 2);
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v31 + 88))(v31, &v25);
  (*(void (**)(_QWORD, _QWORD, uint64_t *))(*(_QWORD *)*a1 + 296))(*a1, v30, &v24);
  while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    v18 = *(float32x2_t *)v8;
    __p = *(void **)(v8 + 8);
    v21 = 0;
    v22 = 0;
    v20 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v20, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
    v23 = *(_DWORD *)(v8 + 40);
    if (v23 != *((_DWORD *)a1 + 2))
    {
      fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&__p, (uint64_t)a4, 0, (uint64_t)&v15);
      __p = v15;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v20, (char *)v16, (uint64_t)v17, (v17 - (_BYTE *)v16) >> 2);
      if (v16)
      {
        v17 = v16;
        operator delete(v16);
      }
      (*(void (**)(uint64_t, float32x2_t *))(*(_QWORD *)v24 + 88))(v24, &v18);
    }
    if (v20)
    {
      v21 = v20;
      operator delete(v20);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 40))(v24);
  }
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  (*(void (**)(float32x2_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*a1 + 32))(&v18, *a1, v30);
  LODWORD(v24) = v18.i32[1];
  LODWORD(v15) = v18.i32[0];
  v33 = 2139095040;
  v32 = INFINITY;
  if (v18.f32[0] != INFINITY || *(float *)&v24 != v32 || v20 != __p)
  {
    v9 = *a1;
    v10 = v30;
    fst::Divide<fst::LatticeWeightTpl<float>,int>((uint64_t)&v18, (uint64_t)a4, 0, (uint64_t)v12);
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v9 + 184))(v9, v10, v12);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
  }
  if (__p)
  {
    v20 = __p;
    operator delete(__p);
  }
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  result = v31;
  if (v31)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  return result;
}

void sub_1ADCD379C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;
  uint64_t v27;

  if (__p)
    operator delete(__p);
  if (a19)
    operator delete(a19);
  v26 = *(void **)(v24 - 96);
  if (v26)
  {
    *(_QWORD *)(v24 - 88) = v26;
    operator delete(v26);
  }
  v27 = *(_QWORD *)(v24 - 64);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::FirstPassArcDetail>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<quasar::FirstPassArcDetail>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<quasar::DetailedLattice>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *v3;
  int v4;
  void **v5;

  if (a2)
  {
    *(_QWORD *)a2 = &unk_1E5D358D0;
    v5 = (void **)(a2 + 24);
    std::vector<quasar::FirstPassArcDetail>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_QWORD *)(a2 + 8) = &unk_1E5D25800;
    v3 = *(_DWORD **)(a2 + 16);
    if (v3)
    {
      v4 = v3[14] - 1;
      v3[14] = v4;
      if (!v4)
        (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
    }
    MEMORY[0x1AF44D190](a2, 0xA1C40A3561BEDLL);
  }
}

uint64_t quasar::DetailedLattice::AddArc(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;

  v5 = a1 + 24;
  *(_DWORD *)(a3 + 4) = 954437177 * ((*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  std::vector<kaldi::WordHypLattice::InputArcDetail>::emplace_back<>((uint64_t *)(a1 + 24));
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck(v5 - 16);
  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::AddArc(*(_QWORD **)(v5 - 8), a2, (float *)a3);
  return *(_QWORD *)(v5 + 8) - 72;
}

uint64_t std::vector<kaldi::WordHypLattice::InputArcDetail>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = *(v2 - 1);
  if (v5 >= v4)
  {
    v7 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    v8 = v7 + 1;
    if (v7 + 1 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 0x8E38E38E38E38E39 * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x1C71C71C71C71C7)
      v10 = 0x38E38E38E38E38ELL;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[72 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[72 * v10];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0x3FF0000000000000;
    *((_OWORD *)v12 + 1) = 0u;
    *((_OWORD *)v12 + 2) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_QWORD *)v12 + 8) = 0;
    v14[2] = v12 + 72;
    std::vector<kaldi::WordHypLattice::InputArcDetail>::__swap_out_circular_buffer(a1, v14);
    v6 = a1[1];
    std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer(v14);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0x3FF0000000000000;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_QWORD *)(v5 + 64) = 0;
    v6 = v5 + 72;
    a1[1] = v5 + 72;
  }
  a1[1] = v6;
  return v6 - 72;
}

void sub_1ADCD3B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::FirstPassArcDetail>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::WordHypLattice::InputArcDetail>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  char v11;
  __int128 v12;
  __int128 v13;

  v7 = a7;
  *(_QWORD *)&v13 = a6;
  *((_QWORD *)&v13 + 1) = a7;
  v12 = v13;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  if (a3 == a5)
  {
    v8 = a6;
  }
  else
  {
    do
    {
      *(_OWORD *)(v7 - 72) = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 56) = 0;
      *(_OWORD *)(v7 - 56) = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_OWORD *)(v7 - 32) = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v13 + 1) - 72;
      *((_QWORD *)&v13 + 1) -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    v8 = v13;
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v8;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::WordHypLattice::InputArcDetail>,std::reverse_iterator<kaldi::WordHypLattice::InputArcDetail*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::FirstPassArcDetail>,std::reverse_iterator<quasar::FirstPassArcDetail*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::__shared_ptr_pointer<quasar::DetailedLattice  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<quasar::DetailedLattice  *>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<quasar::DetailedLattice>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

uint64_t std::__shared_ptr_pointer<quasar::DetailedLattice  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>(uint64_t a1)
{
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1ADCD405C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

double std::__hash_table<std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::unordered_map<int,int>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::unordered_map<int,int>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;
  double result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  v9 = (std::string *)(v8 + 16);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    *((_QWORD *)v8 + 4) = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  result = 0.0;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *((_DWORD *)v8 + 18) = 1065353216;
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADCD4108(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::unordered_map<int,int>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::unordered_map<int,int>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t std::vector<std::pair<int,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 32);
      a3 -= 32;
      *(_DWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<int,std::vector<int>>>,std::reverse_iterator<std::pair<int,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::LexiconFst,std::allocator<kaldi::quasar::LexiconFst>,float &,std::string &,BOOL,void>@<X0>(float *a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__shared_ptr_emplace[abi:ne180100]<float &,std::string &,BOOL,std::allocator<kaldi::quasar::LexiconFst>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADCD4310(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__shared_ptr_emplace[abi:ne180100]<float &,std::string &,BOOL,std::allocator<kaldi::quasar::LexiconFst>,0>(_QWORD *a1, float *a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41D48;
  a1[1] = 0;
  kaldi::quasar::LexiconFst::LexiconFst(a1 + 3, a3, *a4, *a2);
  return a1;
}

void sub_1ADCD436C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__shared_ptr_emplace<kaldi::quasar::LexiconFst>::__on_zero_shared(uint64_t a1)
{
  char v2;

  return std::allocator<kaldi::quasar::LexiconFst>::destroy[abi:ne180100]((uint64_t)&v2, a1 + 24);
}

_DWORD *std::allocator<kaldi::quasar::LexiconFst>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _DWORD *result;
  int v4;

  if (*(char *)(a2 + 39) < 0)
    operator delete(*(void **)(a2 + 16));
  *(_QWORD *)a2 = &unk_1E5D256C0;
  result = *(_DWORD **)(a2 + 8);
  if (result)
  {
    v4 = result[14] - 1;
    result[14] = v4;
    if (!v4)
      return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::TrainingGraphCompiler,std::allocator<kaldi::TrainingGraphCompiler>,kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADCD44CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__shared_ptr_emplace[abi:ne180100]<kaldi::TransitionModel const&,kaldi::ContextDependency &,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> *&,std::vector<int> &,kaldi::TrainingGraphCompilerOptions &,std::allocator<kaldi::TrainingGraphCompiler>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41990;
  kaldi::TrainingGraphCompiler::TrainingGraphCompiler(a1 + 3, a2, a3, *a4);
  return a1;
}

void sub_1ADCD451C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::TrainingGraphCompiler>::__on_zero_shared(uint64_t a1)
{
  kaldi::TrainingGraphCompiler::~TrainingGraphCompiler((kaldi::TrainingGraphCompiler *)(a1 + 24));
}

void kaldi::TrainingGraphCompiler::~TrainingGraphCompiler(kaldi::TrainingGraphCompiler *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v2 = *((_QWORD *)this + 2);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 6);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = (void *)*((_QWORD *)this + 3);
  if (v4)
  {
    *((_QWORD *)this + 4) = v4;
    operator delete(v4);
  }
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Start(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Final(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

void fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::Final(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 8))(a1, a2, &v5);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1ADCD4668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::GetArc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _BOOL8 v7;
  uint64_t v8;
  _QWORD v10[22];

  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SortedMatcher((uint64_t)v10, *(_QWORD *)(a1 + 8), 0, 1);
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::SetState((uint64_t)v10, a2);
  v7 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Find((uint64_t)v10, a3);
  if (v7)
  {
    v8 = fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::Value((uint64_t)v10);
    *(_QWORD *)a4 = *(_QWORD *)v8;
    fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>::operator=(a4 + 8, v8 + 8);
    *(_DWORD *)(a4 + 40) = *(_DWORD *)(v8 + 40);
  }
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(v10);
  return v7;
}

void sub_1ADCD4718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::SortedMatcher<fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~SortedMatcher(&a9);
  _Unwind_Resume(a1);
}

uint64_t fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::GetArc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, a3, a4, &v9);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return v4;
}

void sub_1ADCD47A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void fst::NonBackoffDeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::Fst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~NonBackoffDeterministicOnDemandFst()
{
  JUMPOUT(0x1AF44D190);
}

float fst::DeterministicOnDemandFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::FinalEos()
{
  return INFINITY;
}

uint64_t kaldi::quasar::LmeFst::GetLmeSymbols(kaldi::quasar::LmeFst *this)
{
  return (uint64_t)this + 192;
}

uint64_t kaldi::quasar::LmeFst::CreateFst(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  void (***v12)(_QWORD);
  void (***v13)(_QWORD);
  void (**v14)(_QWORD);
  BOOL v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const fst::SymbolTable *v31;
  unint64_t NumberOfWordDisambiguationSymbols;
  uint64_t i;
  uint64_t v34;
  const void **v35;
  const void **v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  std::vector<std::string>::pointer j;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type size;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *k;
  uint64_t m;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v93;
  uint64_t v94;
  void *v97;
  std::string v98;
  std::vector<std::string> v99;
  _BYTE v100[16];
  _BYTE v101[20];
  uint64_t v102;
  char v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  void *__p[2];
  __int128 v108;
  int v109;
  void *v110;
  char v111;
  uint64_t v112;
  uint64_t v113[3];
  uint64_t v114[3];
  uint64_t v115[3];
  _QWORD v116[3];
  char v117[9];

  if (!*(_QWORD *)(a1 + 24))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base lexicon is empty", 25);
LABEL_51:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base symbol table is empty", 30);
    goto LABEL_51;
  }
  v7 = a2[1];
  v8 = v7 - *a2;
  if (v7 != *a2)
  {
    v11 = *(_QWORD *)a1;
    v10 = *(_QWORD *)(a1 + 8);
    if (v10 != *(_QWORD *)a1)
    {
      v12 = (void (***)(_QWORD))(v10 - 16);
      v13 = (void (***)(_QWORD))(v10 - 16);
      do
      {
        v14 = *v13;
        v13 -= 2;
        (*v14)(v12);
        v15 = v12 == (void (***)(_QWORD))v11;
        v12 = v13;
      }
      while (!v15);
      *(_QWORD *)(a1 + 8) = v11;
      v16 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8);
      __p[0] = &off_1E5D1AD68;
      __p[1] = v16;
      ++v16[42];
      fst::SymbolTable::operator=(a1 + 40, (uint64_t)__p);
      fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    }
    v17 = *(_DWORD **)(a5 + 8);
    __p[0] = &off_1E5D1AD68;
    __p[1] = v17;
    ++v17[42];
    v18 = a1 + 192;
    fst::SymbolTable::operator=(a1 + 192, (uint64_t)__p);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 192) + 120))(a1 + 192);
    v20 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 192) + 128))(a1 + 192, 0);
    if (v19)
    {
      v21 = v20;
      v22 = 0;
      do
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v18 + 88))(__p, a1 + 192, v21);
        fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
        fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)__p, v21);
        if (SBYTE7(v108) < 0)
          operator delete(__p[0]);
        if (++v22 < v19)
          v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 128))(a1 + 192, v22);
      }
      while (v19 != v22);
    }
    v23 = v8 / 24;
    v24 = (_QWORD *)(a1 + 152);
    v25 = (_QWORD *)(a1 + 160);
    std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
    *(_QWORD *)(a1 + 152) = a1 + 160;
    *(_QWORD *)(a1 + 160) = 0;
    v26 = *(char **)(a1 + 240);
    *(_QWORD *)(a1 + 168) = 0;
    std::__tree<std::string>::destroy(a1 + 232, v26);
    *(_QWORD *)(a1 + 232) = a1 + 240;
    *(_QWORD *)(a1 + 240) = 0;
    *(_QWORD *)(a1 + 248) = 0;
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(v116, v8 / 24);
    v27 = 0;
    v93 = v23;
    if (v23 <= 1)
      v28 = 1;
    else
      v28 = v23;
    do
    {
      *(_OWORD *)__p = 0u;
      v108 = 0u;
      v109 = 1065353216;
      v29 = operator new();
      kaldi::quasar::Lexicon::Lexicon(v29, __p, 1, 0);
      v30 = *(_QWORD *)(v116[0] + 8 * v27);
      *(_QWORD *)(v116[0] + 8 * v27) = v29;
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 48))(v30);
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
      kaldi::quasar::Lexicon::SetPronView(*(_QWORD *)(v116[0] + 8 * v27++), 0, 0);
    }
    while (v28 != v27);
    memset(v115, 0, sizeof(v115));
    std::vector<std::unordered_map<std::string,unsigned long>>::resize(v115, v23);
    memset(v114, 0, sizeof(v114));
    std::vector<std::vector<std::vector<std::string>>>::resize(v114, v23);
    v94 = v28;
    memset(v113, 0, sizeof(v113));
    std::vector<std::vector<std::string>>::resize(v113, v23);
    NumberOfWordDisambiguationSymbols = kaldi::quasar::LmeFst::GetNumberOfWordDisambiguationSymbols(*(kaldi::quasar::LmeFst **)(a1 + 32), v31);
    for (i = 0; i != v94; ++i)
    {
      kaldi::quasar::ExtractLexiconForLmeSlot((unsigned __int8 ***)(*a2 + 24 * i), *(_QWORD *)(a1 + 24), a3, a4, *(kaldi::quasar::Lexicon **)(v116[0] + 8 * i), (_QWORD *)(v115[0] + 40 * i), (uint64_t *)(v114[0] + 24 * i), (uint64_t *)(v113[0] + 24 * i));
      kaldi::quasar::Lexicon::SetPronView(*(_QWORD *)(v116[0] + 8 * i), 3u, 1);
      v34 = v113[0] + 24 * i;
      v35 = *(const void ***)v34;
      v36 = *(const void ***)(v34 + 8);
      while (v35 != v36)
      {
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 152), (uint64_t *)(a1 + 160), v35, (uint64_t)v35);
        v35 += 3;
      }
      if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(*(_QWORD *)(v116[0] + 8 * i)) > NumberOfWordDisambiguationSymbols)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"insufficient number of word disambiguation symbols in the graph, ", 65);
          v37 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" vs. ", 5);
          kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(*(_QWORD *)(v116[0] + 8 * i));
          v38 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" . deleting offending pronunciations.", 37);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        }
        kaldi::quasar::Lexicon::PruneHomophoneProns(*(_QWORD *)(v116[0] + 8 * i), NumberOfWordDisambiguationSymbols, (uint64_t **)(a1 + 232), (uint64_t **)__p);
        kaldi::quasar::LmeFst::RemoveWordSetContent(a1, (const void ***)__p, (__int128 ***)(v114[0] + 24 * i));
        std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
        kaldi::quasar::Lexicon::SetPronView(*(_QWORD *)(v116[0] + 8 * i), 3u, 1);
      }
    }
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of word symbols before LME: ", 35);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    v39 = *(_QWORD *)(a1 + 184);
    if (v39 < 1)
    {
      v46 = (_QWORD *)*v24;
      if ((_QWORD *)*v24 != v25)
      {
        do
        {
          fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
          fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)(v46 + 4), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
          fst::SymbolTable::MutateCheck((std::string *)(a1 + 192));
          fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 200), (uint64_t)(v46 + 4), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24));
          v47 = (_QWORD *)v46[1];
          if (v47)
          {
            do
            {
              v48 = v47;
              v47 = (_QWORD *)*v47;
            }
            while (v47);
          }
          else
          {
            do
            {
              v48 = (_QWORD *)v46[2];
              v15 = *v48 == (_QWORD)v46;
              v46 = v48;
            }
            while (!v15);
          }
          v46 = v48;
        }
        while (v48 != v25);
      }
    }
    else
    {
      v40 = *(_QWORD **)(a1 + 200);
      if (v40[7] != v40[6])
        v39 = v40[3];
      v41 = (_QWORD *)*v24;
      if (v41 != v25)
      {
        while (1)
        {
          fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
          v42 = fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)(v41 + 4), v39);
          fst::SymbolTable::MutateCheck((std::string *)(a1 + 192));
          if (v42 != fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 200), (uint64_t)(v41 + 4), v39))
            break;
          v43 = (_QWORD *)v41[1];
          if (v43)
          {
            do
            {
              v44 = v43;
              v43 = (_QWORD *)*v43;
            }
            while (v43);
          }
          else
          {
            do
            {
              v44 = (_QWORD *)v41[2];
              v15 = *v44 == (_QWORD)v41;
              v41 = v44;
            }
            while (!v15);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24);
          v41 = v44;
          if (v44 == v25)
            goto LABEL_60;
        }
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"User-provided LME symbol table clashes with base symbol table.", 62);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
        v45 = 0;
        goto LABEL_114;
      }
    }
LABEL_60:
    if (kaldi::g_kaldi_verbose_level >= 2)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of word symbols after LME: ", 34);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    is_mul_ok(v93, 0x30uLL);
    v49 = (_QWORD *)operator new[]();
    v50 = 0;
    *v49 = 48;
    v49[1] = v93;
    do
    {
      v51 = &v49[v50];
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v49[v50 + 2]);
      v51[4] = 0;
      v51[5] = 0;
      *(_QWORD *)((char *)v51 + 53) = 0;
      v51[6] = 0;
      v50 += 6;
    }
    while (6 * v93 != v50);
    v106 = v49 + 2;
    is_mul_ok(v93, 0x18uLL);
    v52 = (_QWORD *)operator new[]();
    v53 = 0;
    *v52 = 24;
    v52[1] = v93;
    do
    {
      fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v52[v53 + 2]);
      v52[v53 + 4] = 0;
      v53 += 3;
    }
    while (3 * v93 != v53);
    v105 = v52 + 2;
    std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::resize((uint64_t *)a1, v93);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v102 = 0x43E800000;
    v103 = 1;
    v104 = 0x100000002;
    do
    {
      kaldi::quasar::LexiconFst::CreateFst((kaldi::quasar::LexiconFst *)&v106[v56], *(const kaldi::quasar::Lexicon **)(v116[0] + 8 * v57), (fst::SymbolTable *)(a1 + 40), (fst::SymbolTable *)(a1 + 40), 1);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v106[v56]);
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::OLabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v58);
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME: number of disambiguation symbols is ", 41);
        kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(*(_QWORD *)(v116[0] + 8 * v57));
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      kaldi::quasar::GrammarFst::SetClassSizeCost((uint64_t)&v105[v55], *(float *)(a1 + 256), *(float *)(a1 + 260));
      kaldi::quasar::GrammarFst::CreateFst((uint64_t)&v105[v55], (const char ***)(v114[0] + v55 * 8), a1 + 40, 1);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v105[v55]);
      fst::RemoveEpsLocal<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v59);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v105[v55]);
      fst::DeterminizeStarInLog(v60, 0, -1, 0.00097656);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v105[v55]);
      fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v61, 0.00097656);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v106[v56]);
      v63 = v62;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v105[v55]);
      fst::TableCompose<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v63, v64, *(_QWORD *)a1 + v54, (int32x2_t *)&v102);
      fst::DeterminizeStarInLog((_QWORD *)(*(_QWORD *)a1 + v54), 0, -1, 0.00097656);
      fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((_QWORD *)(*(_QWORD *)a1 + v54), 0.00097656);
      fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((void *)(*(_QWORD *)a1 + v54));
      ++v57;
      v56 += 6;
      v55 += 3;
      v54 += 16;
    }
    while (v94 != v57);
    if (*(_BYTE *)(a1 + 176))
    {
      v65 = 0;
      v66 = (void *)*MEMORY[0x1E0DE4F60];
      v97 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      v67 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      do
      {
        fst::SymbolTable::SymbolTable((fst::SymbolTable *)v101);
        fst::SymbolTable::SymbolTable((fst::SymbolTable *)v100);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 280))(*(_QWORD *)a1 + 16 * v65, v101);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 288))(*(_QWORD *)a1 + 16 * v65, v100);
        v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 264))(*(_QWORD *)a1 + 16 * v65);
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v68 + 32))(v68, __p);
        if (SBYTE7(v108) < 0)
          operator delete(__p[0]);
        memset(&v99, 0, sizeof(v99));
        kaldi::quasar::Lexicon::GetPhoneSymbols(*(_QWORD *)(v116[0] + 8 * v65), &v99);
        for (j = v99.__begin_; j != v99.__end_; ++j)
        {
          if (*std::string::at(j, 0) == 35)
          {
            std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
            v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"/WORD-DIS-", 10);
            std::string::basic_string(&v98, j, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v117);
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v71 = &v98;
            else
              v71 = (std::string *)v98.__r_.__value_.__r.__words[0];
            if ((v98.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v98.__r_.__value_.__r.__words[2]);
            else
              size = v98.__r_.__value_.__l.__size_;
            v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, size);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"/", 1);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
            v74 = *(_QWORD *)(a1 + 32);
            std::stringbuf::str();
            v75 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v74 + 96))(v74, &v98);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
            v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 264))(*(_QWORD *)a1 + 16 * v65);
            std::stringbuf::str();
            (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v76 + 24))(v76, &v98, v75);
            if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v98.__r_.__value_.__l.__data_);
            __p[0] = v66;
            *(void **)((char *)__p + *((_QWORD *)v66 - 3)) = v97;
            __p[1] = v67;
            if (v111 < 0)
              operator delete(v110);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1AF44D094](&v112);
          }
          else
          {
            v77 = (*(uint64_t (**)(_QWORD, std::vector<std::string>::pointer))(**(_QWORD **)(a1 + 32) + 96))(*(_QWORD *)(a1 + 32), j);
            v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 264))(*(_QWORD *)a1 + 16 * v65);
            (*(void (**)(uint64_t, std::vector<std::string>::pointer, uint64_t))(*(_QWORD *)v78 + 24))(v78, j, v77);
          }
        }
        v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 272))(*(_QWORD *)a1 + 16 * v65);
        std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v79 + 32))(v79, __p);
        if (SBYTE7(v108) < 0)
          operator delete(__p[0]);
        v80 = v114[0] + 24 * v65;
        for (k = *(_QWORD **)v80; k != *(_QWORD **)(v80 + 8); k += 3)
        {
          for (m = *k + 24; m != k[1]; m += 24)
          {
            v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v65) + 272))(*(_QWORD *)a1 + 16 * v65);
            v84 = *(_QWORD **)(a1 + 48);
            v85 = fst::internal::DenseSymbolMap::Find(v84 + 5, m);
            v86 = v85;
            if (v85 != -1)
            {
              v87 = v84[4];
              v88 = __OFSUB__(v85, v87);
              v89 = v85 - v87;
              if (v89 < 0 == v88)
                v86 = *(_QWORD *)(v84[15] + 8 * v89);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v83 + 24))(v83, m, v86);
          }
          v80 = v114[0] + 24 * v65;
        }
        __p[0] = &v99;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v100);
        fst::SymbolTable::~SymbolTable((fst::SymbolTable *)v101);
        ++v65;
      }
      while (v65 != v94);
    }
    v90 = (uint64_t)v105;
    v105 = 0;
    if (v90)
      std::default_delete<kaldi::quasar::GrammarFst []>::operator()[abi:ne180100]<kaldi::quasar::GrammarFst>((uint64_t)&v105, v90);
    v91 = (uint64_t)v106;
    v106 = 0;
    if (v91)
      std::default_delete<kaldi::quasar::LexiconFst []>::operator()[abi:ne180100]<kaldi::quasar::LexiconFst>((uint64_t)&v106, v91);
    v45 = 1;
LABEL_114:
    __p[0] = v113;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v114;
    std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v115;
    std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    __p[0] = v116;
    std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    return v45;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of templates in the user data is zero", 48);
    goto LABEL_51;
  }
  return 0;
}

void sub_1ADCD55D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  __p = (void *)(v37 - 192);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v37 - 168);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v37 - 144);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v37 - 120);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_map<std::string,unsigned long>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

void std::vector<std::vector<std::vector<std::string>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<std::string>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::string>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::string>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::LmeFst::GetNumberOfWordDisambiguationSymbols(kaldi::quasar::LmeFst *this, const fst::SymbolTable *a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string::size_type size;
  int v9;
  std::string::const_reference v10;
  std::string::size_type v11;
  std::string::const_reference v12;
  int64_t v13;
  std::string *v14;
  std::string *v15;
  std::string *v16;
  std::string *v17;
  std::string v20;

  v3 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, const fst::SymbolTable *))(*(_QWORD *)this + 120))(this, a2);
  v4 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, _QWORD))(*(_QWORD *)this + 128))(this, 0);
  if (!v3)
    return 0;
  v5 = v4;
  v6 = 0;
  v7 = 0;
  do
  {
    (*(void (**)(std::string *__return_ptr, kaldi::quasar::LmeFst *, uint64_t))(*(_QWORD *)this + 88))(&v20, this, v5);
    size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v20.__r_.__value_.__l.__size_;
    if (size >= 3)
    {
      v10 = std::string::at(&v20, 0);
      v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
      v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
      if (*v10 == 47)
      {
        if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v11 = v20.__r_.__value_.__l.__size_;
        v12 = std::string::at(&v20, v11 - 1);
        v13 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
        v9 = SHIBYTE(v20.__r_.__value_.__r.__words[2]);
        if (*v12 == 47)
        {
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            v14 = &v20;
          }
          else
          {
            v13 = v20.__r_.__value_.__l.__size_;
            v14 = (std::string *)v20.__r_.__value_.__r.__words[0];
          }
          if (v13 >= 10)
          {
            v15 = (std::string *)((char *)v14 + v13);
            v16 = v14;
            do
            {
              v17 = (std::string *)memchr(v16, 47, v13 - 9);
              if (!v17)
                break;
              if (v17->__r_.__value_.__r.__words[0] == 0x49442D44524F572FLL
                && LOWORD(v17->__r_.__value_.__r.__words[1]) == 11603)
              {
                if (v17 != v15)
                  v6 += v17 == v14;
                break;
              }
              v16 = (std::string *)((char *)&v17->__r_.__value_.__l.__data_ + 1);
              v13 = (char *)v15 - (char *)v16;
            }
            while ((char *)v15 - (char *)v16 >= 10);
          }
        }
      }
    }
    if (v9 < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (++v7 < v3)
      v5 = (*(uint64_t (**)(kaldi::quasar::LmeFst *, uint64_t))(*(_QWORD *)this + 128))(this, v7);
  }
  while (v7 != v3);
  return v6;
}

void sub_1ADCD5C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFst::RemoveWordSetContent(uint64_t a1, const void ***a2, __int128 ***a3)
{
  _QWORD *v6;
  const void **v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  __int128 v11;
  __int128 **v12;
  __int128 **v13;
  __int128 *v14;
  __int128 *v15;
  const std::string::value_type *v16;
  std::string *v17;
  uint64_t v18;
  std::string *v19;
  uint64_t v20;
  __int128 **v21;
  __int128 **v22;
  std::string v23;
  __int128 __p;
  uint64_t v25;
  __int128 v26;
  __int128 **v27;
  std::string *v28;

  if (a2[2])
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"has to remove ", 14);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" words, rebuild the FST now", 27);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v26);
    }
    v7 = *a2;
    if (*a2 != (const void **)(a2 + 1))
    {
      do
      {
        std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 152), v7 + 4);
        v8 = (const void **)v7[1];
        if (v8)
        {
          do
          {
            v9 = (const void ***)v8;
            v8 = (const void **)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (const void ***)v7[2];
            v10 = *v9 == v7;
            v7 = (const void **)v9;
          }
          while (!v10);
        }
        v7 = (const void **)v9;
      }
      while (v9 != a2 + 1);
    }
    v27 = 0;
    v11 = 0uLL;
    v26 = 0u;
    v12 = *a3;
    if (*a3 == a3[1])
    {
      v21 = 0;
      v13 = *a3;
    }
    else
    {
      v13 = *a3;
      do
      {
        v14 = (__int128 *)((char *)*v13 + 24);
        if (*(_BYTE *)(a1 + 56))
        {
          __p = 0uLL;
          v25 = 0;
          v15 = v13[1];
          memset(&v23, 0, sizeof(v23));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>(&v23, v14, v15, 0xAAAAAAAAAAAAAAABLL * (((char *)v15 - (char *)v14) >> 3));
          v16 = (const std::string::value_type *)(a1 + 208);
          if (*(char *)(a1 + 231) < 0)
            v16 = *(const std::string::value_type **)(a1 + 208);
          kaldi::JoinVectorToString((uint64_t *)&v23, v16, 1, &__p);
          v28 = &v23;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
          if (!std::__tree<std::string>::__count_unique<std::string>((uint64_t)a2, (const void **)&__p))
          {
            v17 = (std::string *)*((_QWORD *)&v26 + 1);
            if (*((_QWORD *)&v26 + 1) >= (unint64_t)v27)
            {
              v18 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v26, v13);
            }
            else
            {
              **((_QWORD **)&v26 + 1) = 0;
              v17->__r_.__value_.__l.__size_ = 0;
              v17->__r_.__value_.__r.__words[2] = 0;
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v17, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
              v18 = (uint64_t)&v17[1];
            }
            *((_QWORD *)&v26 + 1) = v18;
          }
          if (SHIBYTE(v25) < 0)
            operator delete((void *)__p);
        }
        else
        {
          while (v14 != v13[1])
          {
            if (std::__tree<std::string>::__count_unique<std::string>((uint64_t)a2, (const void **)v14))
              goto LABEL_31;
            v14 = (__int128 *)((char *)v14 + 24);
          }
          v19 = (std::string *)*((_QWORD *)&v26 + 1);
          if (*((_QWORD *)&v26 + 1) >= (unint64_t)v27)
          {
            v20 = std::vector<std::vector<std::string>>::__push_back_slow_path<std::vector<std::string> const&>((uint64_t *)&v26, v13);
          }
          else
          {
            **((_QWORD **)&v26 + 1) = 0;
            v19->__r_.__value_.__l.__size_ = 0;
            v19->__r_.__value_.__r.__words[2] = 0;
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v19, *v13, v13[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v13[1] - (char *)*v13) >> 3));
            v20 = (uint64_t)&v19[1];
          }
          *((_QWORD *)&v26 + 1) = v20;
        }
LABEL_31:
        v13 += 3;
      }
      while (v13 != a3[1]);
      v12 = *a3;
      v11 = v26;
      v21 = v27;
    }
    *(_OWORD *)a3 = v11;
    *(_QWORD *)&v26 = v12;
    *((_QWORD *)&v26 + 1) = v13;
    v22 = a3[2];
    a3[2] = v21;
    v27 = v22;
    *(_QWORD *)&__p = &v26;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  else if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v26, (uint64_t)"remove excessive homophone prons without removing words, rebuild the FST now", 76);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v26);
  }
}

void sub_1ADCD5F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a18);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LmeFst::CreateFstDirect(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, _QWORD *a5, _QWORD *a6, uint64_t a7, int a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  void (***v37)(_QWORD);
  void (***v38)(_QWORD);
  void (**v39)(_QWORD);
  _DWORD *v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  uint64_t *i;
  uint64_t v51;
  uint64_t v52;
  uint64_t *j;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  const fst::SymbolTable *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  _QWORD *v63;
  __int128 *v64;
  __int128 *v65;
  const std::string::value_type *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  const void **v72;
  const void **v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::vector<std::string>::pointer k;
  _QWORD *v94;
  std::string *v95;
  std::string::size_type size;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  float v105;
  _QWORD *v106;
  float v107;
  float v108;
  float *v109;
  float v110;
  std::string::size_type v111;
  uint64_t *v112;
  uint64_t v113;
  float v114;
  float v115;
  float v116;
  float v117;
  __int128 *v118;
  __int128 *v119;
  int v120;
  _QWORD *v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  char v126;
  _QWORD *v127;
  std::string *v128;
  std::string::size_type v129;
  _QWORD *v130;
  uint64_t **v131;
  uint64_t v132;
  unint64_t NumberOfWordDisambiguationSymbols;
  void *v137;
  uint64_t v138;
  std::string v139;
  void *__p[2];
  __int128 v141;
  int v142;
  void *v143;
  char v144;
  uint64_t v145;
  std::vector<std::string> v146;
  uint64_t v147[3];
  uint64_t v148[3];
  uint64_t v149[3];
  uint64_t *v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t *v153;

  if (!*(_QWORD *)(a1 + 24))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base lexicon is empty", 25);
LABEL_107:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 32))
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the base symbol table is empty", 30);
    goto LABEL_107;
  }
  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_37;
  if (*(_QWORD *)(a1 + 96) == -1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the optional silence ", 21);
      v18 = *(_QWORD *)(a1 + 64);
      v17 = a1 + 64;
      v16 = v18;
      v19 = *(char *)(v17 + 23);
      if (v19 >= 0)
        v20 = v17;
      else
        v20 = v16;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(v17 + 23);
      else
        v21 = *(_QWORD *)(v17 + 8);
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v20, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" is not defined in the symbol table", 35);
      goto LABEL_107;
    }
    return 0;
  }
  if (*(char *)(a1 + 231) < 0)
  {
    v14 = *(_QWORD *)(a1 + 208);
    v13 = *(_QWORD *)(a1 + 216);
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    v13 = *(unsigned __int8 *)(a1 + 231);
    v14 = a1 + 208;
    if (!*(_BYTE *)(a1 + 231))
      goto LABEL_37;
  }
  v23 = (unsigned __int8 *)(v14 + v13);
  v24 = (unsigned __int8 *)v14;
LABEL_22:
  v25 = 0;
  while (*v24 != asc_1AE2978D1[v25])
  {
    if (++v25 == 3)
    {
      if (++v24 == v23)
        goto LABEL_37;
      goto LABEL_22;
    }
  }
  if (v24 != v23 && &v24[-v14] != (unsigned __int8 *)-1)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the word boundary string can only have non-space characters, you set it (", 73);
      v27 = *(char *)(a1 + 231);
      if (v27 >= 0)
        v28 = a1 + 208;
      else
        v28 = *(_QWORD *)(a1 + 208);
      if (v27 >= 0)
        v29 = *(unsigned __int8 *)(a1 + 231);
      else
        v29 = *(_QWORD *)(a1 + 216);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)")", 1);
      goto LABEL_107;
    }
    return 0;
  }
LABEL_37:
  v32 = *a2;
  v31 = a2[1];
  v33 = 0xAAAAAAAAAAAAAAABLL * ((v31 - *a2) >> 3);
  a5[1] = *a5;
  std::vector<kaldi::quasar::LmeFst::Stats>::resize((uint64_t)a5, v33);
  if (v31 == v32)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the number of templates in the user data is zero", 48);
    goto LABEL_107;
  }
  v34 = v31 - v32 == 24 || a8 == 0;
  if (!v34)
  {
    if (kaldi::g_kaldi_verbose_level < -1)
      return 0;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"incomplete_fst should not be used with more than 1 FST", 54);
    goto LABEL_107;
  }
  v130 = a5;
  v36 = *(_QWORD *)a1;
  v35 = *(_QWORD *)(a1 + 8);
  if (v35 != *(_QWORD *)a1)
  {
    v37 = (void (***)(_QWORD))(v35 - 16);
    v38 = (void (***)(_QWORD))(v35 - 16);
    do
    {
      v39 = *v38;
      v38 -= 2;
      (*v39)(v37);
      v34 = v37 == (void (***)(_QWORD))v36;
      v37 = v38;
    }
    while (!v34);
    *(_QWORD *)(a1 + 8) = v36;
    v40 = *(_DWORD **)(*(_QWORD *)(a1 + 32) + 8);
    __p[0] = &off_1E5D1AD68;
    __p[1] = v40;
    ++v40[42];
    fst::SymbolTable::operator=(a1 + 40, (uint64_t)__p);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
  }
  v41 = *(_DWORD **)(a7 + 8);
  __p[0] = &off_1E5D1AD68;
  __p[1] = v41;
  ++v41[42];
  v42 = a1 + 192;
  fst::SymbolTable::operator=(a1 + 192, (uint64_t)__p);
  fst::SymbolTable::~SymbolTable((fst::SymbolTable *)__p);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 192) + 120))(a1 + 192);
  v44 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)(a1 + 192) + 128))(a1 + 192, 0);
  if (v43)
  {
    v45 = v44;
    v46 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v42 + 88))(__p, a1 + 192, v45);
      fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
      fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)__p, v45);
      if (SBYTE7(v141) < 0)
        operator delete(__p[0]);
      if (++v46 < v43)
        v45 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 128))(a1 + 192, v46);
    }
    while (v43 != v46);
  }
  v47 = (_QWORD *)(a1 + 152);
  v48 = (_QWORD *)(a1 + 160);
  std::__tree<std::string>::destroy(a1 + 152, *(char **)(a1 + 160));
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 160) = 0;
  v49 = *(char **)(a1 + 240);
  *(_QWORD *)(a1 + 168) = 0;
  v131 = (uint64_t **)(a1 + 232);
  std::__tree<std::string>::destroy(a1 + 232, v49);
  *(_QWORD *)(a1 + 232) = a1 + 240;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(&v152, v33);
  for (i = v152; i != v153; ++i)
  {
    *(_OWORD *)__p = 0u;
    v141 = 0u;
    v142 = 1065353216;
    v51 = operator new();
    kaldi::quasar::Lexicon::Lexicon(v51, __p, 1, 1);
    v52 = *i;
    *i = v51;
    if (v52)
      (*(void (**)(uint64_t))(*(_QWORD *)v52 + 48))(v52);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
    kaldi::quasar::Lexicon::SetPronView(*i, 0, 0);
  }
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(&v150, v33);
  for (j = v150; j != v151; ++j)
  {
    *(_OWORD *)__p = 0u;
    v141 = 0u;
    v142 = 1065353216;
    v54 = operator new();
    kaldi::quasar::Lexicon::Lexicon(v54, __p, 1, 0);
    v55 = *j;
    *j = v54;
    if (v55)
      (*(void (**)(uint64_t))(*(_QWORD *)v55 + 48))(v55);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)__p);
    kaldi::quasar::Lexicon::SetPronView(*j, 2u, 1);
  }
  memset(v149, 0, sizeof(v149));
  std::vector<std::unordered_map<std::string,unsigned long>>::resize(v149, v33);
  memset(v148, 0, sizeof(v148));
  std::vector<std::vector<std::vector<std::string>>>::resize(v148, v33);
  v56 = v130;
  memset(v147, 0, sizeof(v147));
  std::vector<std::vector<std::string>>::resize(v147, v33);
  std::vector<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::resize((uint64_t *)a1, v33);
  v127 = a6;
  v128 = (std::string *)(a1 + 192);
  v126 = a8;
  NumberOfWordDisambiguationSymbols = kaldi::quasar::LmeFst::GetNumberOfWordDisambiguationSymbols(*(kaldi::quasar::LmeFst **)(a1 + 32), v57);
  v58 = 0;
  v129 = v33;
  if (v33 <= 1)
    v59 = 1;
  else
    v59 = v33;
  v132 = v59;
  do
  {
    kaldi::quasar::ExtractLexiconForLmeSlot((unsigned __int8 ***)(*a2 + 24 * v58), *(_QWORD *)(a1 + 24), a3, a4, (kaldi::quasar::Lexicon *)v152[v58], (_QWORD *)(v149[0] + 40 * v58), (uint64_t *)(v148[0] + 24 * v58), (uint64_t *)(v147[0] + 24 * v58));
    *(_DWORD *)(*v56 + 8 * v58) = kaldi::quasar::Lexicon::NumHomophones((kaldi::quasar::Lexicon *)v152[v58]);
    if (*(_BYTE *)(a1 + 56))
    {
      v60 = v148[0];
      v61 = v148[0] + 24 * v58;
      v63 = *(_QWORD **)v61;
      v62 = *(_QWORD **)(v61 + 8);
      while (v63 != v62)
      {
        v64 = (__int128 *)v63[1];
        v65 = (__int128 *)(*v63 + 24);
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v141 = 0;
        std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)__p, v65, v64, 0xAAAAAAAAAAAAAAABLL * (((char *)v64 - (char *)v65) >> 3));
        memset(&v146, 0, sizeof(v146));
        v66 = (const std::string::value_type *)(a1 + 208);
        if (*(char *)(a1 + 231) < 0)
          v66 = *(const std::string::value_type **)(a1 + 208);
        kaldi::JoinVectorToString((uint64_t *)__p, v66, 1, (__int128 *)&v146);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 152), (const void **)&v146.__begin_, (uint64_t)&v146);
        if (SHIBYTE(v146.__end_cap_.__value_) < 0)
          operator delete(v146.__begin_);
        v146.__begin_ = (std::vector<std::string>::pointer)__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
        v60 = v148[0];
        v62 = *(_QWORD **)(v148[0] + 24 * v58 + 8);
        v63 += 3;
      }
      kaldi::quasar::LmeFst::BuildCompoundLexicon(a1, v152[v58], (_QWORD **)(v60 + 24 * v58), v150[v58]);
      if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v150[v58]) > NumberOfWordDisambiguationSymbols)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"insufficient number of word disambiguation symbols in the graph, ", 65);
          v67 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" vs. ", 5);
          kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v150[v58]);
          v68 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)" . deleting offending pronunciations.", 37);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        }
        kaldi::quasar::Lexicon::PruneHomophoneProns(v150[v58], NumberOfWordDisambiguationSymbols, v131, (uint64_t **)__p);
        kaldi::quasar::LmeFst::RemoveWordSetContent(a1, (const void ***)__p, (__int128 ***)(v148[0] + 24 * v58));
        std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
        kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v150[v58]);
        kaldi::quasar::Lexicon::SetPronView(v150[v58], 3u, 1);
      }
      kaldi::quasar::Lexicon::SetPronView(v152[v58], 3u, 0);
      if (kaldi::g_kaldi_verbose_level >= 2)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of prons, pre/post-compound:", 35);
        kaldi::quasar::Lexicon::GetNumberOfProns((kaldi::quasar::Lexicon *)v152[v58]);
        v69 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" ", 1);
        kaldi::quasar::Lexicon::GetNumberOfProns((kaldi::quasar::Lexicon *)v150[v58]);
        v70 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)" #comp_words:", 13);
        (**(void (***)(uint64_t))v150[v58])(v150[v58]);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
    }
    else
    {
      kaldi::quasar::Lexicon::SetPronView(v152[v58], 3u, 1);
      v71 = v147[0] + 24 * v58;
      v72 = *(const void ***)v71;
      v73 = *(const void ***)(v71 + 8);
      while (v72 != v73)
      {
        std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 152), (uint64_t *)(a1 + 160), v72, (uint64_t)v72);
        v72 += 3;
      }
      v56 = v130;
      if (kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v152[v58]) > NumberOfWordDisambiguationSymbols)
      {
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"insufficient number of word disambiguation symbols in the graph, ", 65);
          v74 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" vs. ", 5);
          kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v152[v58]);
          v75 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v75, (uint64_t)" . deleting offending pronunciations.", 37);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
        }
        kaldi::quasar::Lexicon::PruneHomophoneProns(v152[v58], NumberOfWordDisambiguationSymbols, v131, (uint64_t **)__p);
        kaldi::quasar::LmeFst::RemoveWordSetContent(a1, (const void ***)__p, (__int128 ***)(v148[0] + 24 * v58));
        std::__tree<std::string>::destroy((uint64_t)__p, (char *)__p[1]);
        kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v152[v58]);
      }
    }
    ++v58;
  }
  while (v58 != v132);
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of word symbols before LME: ", 35);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v76 = *(_QWORD *)(a1 + 184);
  if (v76 < 1)
  {
    v84 = (_QWORD *)*v47;
    if ((_QWORD *)*v47 != v48)
    {
      do
      {
        fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
        fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)(v84 + 4), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24));
        fst::SymbolTable::MutateCheck(v128);
        fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 200), (uint64_t)(v84 + 4), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24));
        v85 = (_QWORD *)v84[1];
        if (v85)
        {
          do
          {
            v86 = v85;
            v85 = (_QWORD *)*v85;
          }
          while (v85);
        }
        else
        {
          do
          {
            v86 = (_QWORD *)v84[2];
            v34 = *v86 == (_QWORD)v84;
            v84 = v86;
          }
          while (!v34);
        }
        v84 = v86;
      }
      while (v86 != v48);
    }
  }
  else
  {
    v77 = *(_QWORD **)(a1 + 200);
    if (v77[7] != v77[6])
      v76 = v77[3];
    v78 = (_QWORD *)*v47;
    if ((_QWORD *)*v47 != v48)
    {
      do
      {
        fst::SymbolTable::MutateCheck((std::string *)(a1 + 40));
        v79 = fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 48), (uint64_t)(v78 + 4), v76);
        fst::SymbolTable::MutateCheck(v128);
        if (v79 != fst::SymbolTableImpl::AddSymbol(*(_QWORD *)(a1 + 200), (uint64_t)(v78 + 4), v76))
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"User-provided LME symbol table clashes with base symbol table.", 62);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          }
          goto LABEL_199;
        }
        v80 = (_QWORD *)v78[1];
        if (v80)
        {
          do
          {
            v81 = v80;
            v80 = (_QWORD *)*v80;
          }
          while (v80);
        }
        else
        {
          do
          {
            v81 = (_QWORD *)v78[2];
            v34 = *v81 == (_QWORD)v78;
            v78 = v81;
          }
          while (!v34);
        }
        v76 = *(_QWORD *)(*(_QWORD *)(a1 + 200) + 24);
        v78 = v81;
      }
      while (v81 != v48);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"number of word symbols after LME: ", 34);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v87 = 0;
  v88 = (void *)*MEMORY[0x1E0DE4F60];
  v137 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v89 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
LABEL_120:
  if (*(_BYTE *)(a1 + 176))
  {
    fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v146);
    fst::SymbolTable::SymbolTable((fst::SymbolTable *)&v139);
    (*(void (**)(uint64_t, std::vector<std::string> *))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 280))(*(_QWORD *)a1 + 16 * v87, &v146);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 288))(*(_QWORD *)a1 + 16 * v87, &v139);
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 264))(*(_QWORD *)a1 + 16 * v87);
    std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v90 + 32))(v90, __p);
    if (SBYTE7(v141) < 0)
      operator delete(__p[0]);
    v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 272))(*(_QWORD *)a1 + 16 * v87);
    std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v91 + 32))(v91, __p);
    if (SBYTE7(v141) < 0)
      operator delete(__p[0]);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&v139);
    fst::SymbolTable::~SymbolTable((fst::SymbolTable *)&v146);
  }
  memset(&v146, 0, sizeof(v146));
  if (*(_BYTE *)(a1 + 56))
  {
    kaldi::quasar::Lexicon::GetPhoneSymbols(v150[v87], &v146);
    if (*(_BYTE *)(a1 + 176))
    {
      v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 264))(*(_QWORD *)a1 + 16 * v87);
      (*(void (**)(void **__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 32) + 88))(__p, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 96));
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v92 + 24))(v92, __p, *(_QWORD *)(a1 + 96));
      if (SBYTE7(v141) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    kaldi::quasar::Lexicon::GetPhoneSymbols(v152[v87], &v146);
  }
  for (k = v146.__begin_; ; ++k)
  {
    if (k == v146.__end_)
    {
      __p[0] = &v146;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      if (++v87 == v132)
      {
        v139.__r_.__value_.__r.__words[0] = 0;
        while (1)
        {
          if (*(_BYTE *)(a1 + 56))
          {
            if (kaldi::g_kaldi_verbose_level < 1)
              goto LABEL_162;
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME: number of disambiguation symbols is ", 41);
            kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v150[v139.__r_.__value_.__r.__words[0]]);
            std::ostream::operator<<();
          }
          else
          {
            if (kaldi::g_kaldi_verbose_level < 1)
              goto LABEL_162;
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME: number of disambiguation symbols is ", 41);
            kaldi::quasar::Lexicon::GetNumberOfDisambigSymbols(v152[v139.__r_.__value_.__r.__words[0]]);
            std::ostream::operator<<();
          }
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
LABEL_162:
          v103 = (uint64_t *)(v148[0] + 24 * v139.__r_.__value_.__r.__words[0]);
          v104 = *v103;
          if (*v103 == v103[1])
            goto LABEL_167;
          v105 = 0.0;
          do
          {
            if (*(_QWORD *)(v104 + 8) == *(_QWORD *)v104)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v105 = v105 + std::stof(*(const std::string **)v104, 0);
            v104 += 24;
          }
          while (v104 != *(_QWORD *)(v148[0] + 24 * v139.__r_.__value_.__r.__words[0] + 8));
          if (v105 == 0.0)
          {
LABEL_167:
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME: no available user data for ", 32);
              v106 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v106, (uint64_t)"-th template", 12);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
            }
          }
          else
          {
            *(_DWORD *)(a1 + 104) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(*(_QWORD *)a1
                                                                                                  + 16 * v139.__r_.__value_.__r.__words[0])
                                                                                      + 200))(*(_QWORD *)a1 + 16 * v139.__r_.__value_.__r.__words[0]);
            *(_DWORD *)(a1 + 108) = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(*(_QWORD *)a1
                                                                                                  + 16 * v139.__r_.__value_.__r.__words[0])
                                                                                      + 200))(*(_QWORD *)a1 + 16 * v139.__r_.__value_.__r.__words[0]);
            (*(void (**)(std::string::size_type, _QWORD))(*(_QWORD *)(*(_QWORD *)a1
                                                                               + 16 * v139.__r_.__value_.__r.__words[0])
                                                                   + 176))(*(_QWORD *)a1 + 16 * v139.__r_.__value_.__r.__words[0], *(unsigned int *)(a1 + 104));
            (*(void (**)(std::string::size_type, _QWORD, float))(*(_QWORD *)(*(_QWORD *)a1
                                                                                      + 16
                                                                                      * v139.__r_.__value_.__r.__words[0])
                                                                          + 184))(*(_QWORD *)a1 + 16 * v139.__r_.__value_.__r.__words[0], *(unsigned int *)(a1 + 108), 0.0);
            v138 = 0;
            v107 = *(float *)(a1 + 256);
            v108 = *(float *)(a1 + 260);
            v109 = (float *)std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v127, (unint64_t *)&v139);
            if (v109)
            {
              v107 = v109[6];
              v108 = v109[7];
            }
            v110 = logf(v105);
            v111 = v139.__r_.__value_.__r.__words[0];
            v112 = (uint64_t *)(v148[0] + 24 * v139.__r_.__value_.__r.__words[0]);
            v113 = *v112;
            if (*v112 == v112[1])
            {
              v120 = 0;
            }
            else
            {
              v114 = v107 + (1.0 - v108) * v110;
              do
              {
                if (*(_QWORD *)(v113 + 8) == *(_QWORD *)v113)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                v115 = std::stof(*(const std::string **)v113, 0);
                if (v115 <= 0.0)
                {
                  if (kaldi::g_kaldi_verbose_level >= -1)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"LME: detected a zero frequency - ignoring this word", 51);
                    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  }
                }
                else
                {
                  v116 = logf(v115);
                  v117 = v114 - v116;
                  if (*(_BYTE *)(a1 + 56))
                  {
                    v118 = *(__int128 **)(v113 + 8);
                    v119 = (__int128 *)(*(_QWORD *)v113 + 24);
                    __p[0] = 0;
                    __p[1] = 0;
                    *(_QWORD *)&v141 = 0;
                    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)__p, v119, v118, 0xAAAAAAAAAAAAAAABLL * (((char *)v118 - (char *)v119) >> 3));
                    kaldi::quasar::LmeFst::BuildCompoundChainFst(a1, (uint64_t *)__p, v152[v139.__r_.__value_.__r.__words[0]], (_QWORD *)v150[v139.__r_.__value_.__r.__words[0]], (uint64_t)v139.__r_.__value_.__l.__data_, &v138, v117);
                    v146.__begin_ = (std::vector<std::string>::pointer)__p;
                    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v146);
                  }
                  else if (*(_QWORD *)(v113 + 8) - *(_QWORD *)v113 == 48)
                  {
                    kaldi::quasar::LmeFst::BuildChainFst((uint64_t *)a1, (unsigned __int8 *)(*(_QWORD *)v113 + 24), v152[v139.__r_.__value_.__r.__words[0]], (uint64_t)v139.__r_.__value_.__l.__data_, &v138, v114 - v116);
                  }
                  else if (kaldi::g_kaldi_verbose_level >= -1)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"not in the compound mode, and the number of words in this entry is more than 1, use CreateFst() instead", 103);
                    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  }
                }
                v113 += 24;
                v111 = v139.__r_.__value_.__r.__words[0];
              }
              while (v113 != *(_QWORD *)(v148[0] + 24 * v139.__r_.__value_.__r.__words[0] + 8));
              v120 = v138;
            }
            *(_DWORD *)(*v130 + 8 * v111 + 4) = v120;
            if ((v126 & 1) == 0)
              kaldi::quasar::LmeFst::CompleteFstDirect((_QWORD *)(*(_QWORD *)a1 + 16 * v111));
          }
          if (++v139.__r_.__value_.__r.__words[0] >= v129)
          {
            v82 = 1;
            goto LABEL_200;
          }
        }
      }
      goto LABEL_120;
    }
    if (*std::string::at(k, 0) == 35)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"/WORD-DIS-", 10);
      std::string::basic_string(&v139, k, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v138);
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v95 = &v139;
      else
        v95 = (std::string *)v139.__r_.__value_.__r.__words[0];
      if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v139.__r_.__value_.__r.__words[2]);
      else
        size = v139.__r_.__value_.__l.__size_;
      v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)"/", 1);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      v98 = *(_QWORD *)(a1 + 32);
      std::stringbuf::str();
      v99 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v98 + 96))(v98, &v139);
      if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v139.__r_.__value_.__l.__data_);
      v139.__r_.__value_.__r.__words[0] = (std::string::size_type)k;
      *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)k, (uint64_t)&std::piecewise_construct, (__int128 **)&v139)+ 5) = v99;
      if (*(_BYTE *)(a1 + 176))
      {
        v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 264))(*(_QWORD *)a1 + 16 * v87);
        std::stringbuf::str();
        (*(void (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)v100 + 24))(v100, &v139, v99);
        if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v139.__r_.__value_.__l.__data_);
      }
      __p[0] = v88;
      *(void **)((char *)__p + *((_QWORD *)v88 - 3)) = v137;
      __p[1] = v89;
      if (v144 < 0)
        operator delete(v143);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](&v145);
      continue;
    }
    v101 = (*(uint64_t (**)(_QWORD, std::vector<std::string>::pointer))(**(_QWORD **)(a1 + 32) + 96))(*(_QWORD *)(a1 + 32), k);
    if (v101 == -1)
      break;
    v139.__r_.__value_.__r.__words[0] = (std::string::size_type)k;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)k, (uint64_t)&std::piecewise_construct, (__int128 **)&v139)+ 5) = v101;
    if (*(_BYTE *)(a1 + 176))
    {
      v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * v87) + 264))(*(_QWORD *)a1 + 16 * v87);
      (*(void (**)(uint64_t, std::vector<std::string>::pointer, uint64_t))(*(_QWORD *)v102 + 24))(v102, k, v101);
    }
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"can not find symbol ", 20);
    v122 = SHIBYTE(k->__r_.__value_.__r.__words[2]);
    if (v122 >= 0)
      v123 = (uint64_t)k;
    else
      v123 = k->__r_.__value_.__r.__words[0];
    if (v122 >= 0)
      v124 = HIBYTE(k->__r_.__value_.__r.__words[2]);
    else
      v124 = k->__r_.__value_.__l.__size_;
    v125 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, v123, v124);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v125, (uint64_t)" in the input symbol table", 26);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
  }
  __p[0] = &v146;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
LABEL_199:
  v82 = 0;
LABEL_200:
  __p[0] = v147;
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v148;
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v149;
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v150;
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v152;
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  return v82;
}

void sub_1ADCD7488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  __p = (void *)(v25 - 240);
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v25 - 216);
  std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v25 - 192);
  std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v25 - 168);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (void *)(v25 - 144);
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::vector<kaldi::quasar::LmeFst::Stats>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    std::vector<kaldi::quasar::LmeFst::Stats>::__append((char **)a1, a2 - v2);
  }
}

uint64_t kaldi::quasar::LmeFst::BuildCompoundLexicon(uint64_t a1, uint64_t a2, _QWORD **a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  clockid_t v8;
  _QWORD *v9;
  void *v10;
  unsigned __int8 *v11;
  unint64_t v12;
  void **p_first;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  std::vector<std::string> *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  std::string *v35;
  std::string *v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  std::string *v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  char **v45;
  BOOL v46;
  __int128 *v47;
  __int128 *v48;
  const std::string::value_type *v49;
  clockid_t v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v54;
  _QWORD *v57;
  unsigned __int8 *v58;
  void *v59;
  void *v60;
  void *v61[2];
  uint64_t v62;
  void *v63;
  char v64;
  uint64_t v65;
  __int128 __p;
  std::string::size_type v67;
  __int128 v68;
  int64_t v69;
  std::__split_buffer<std::string> *p_v;
  char *v71[2];
  _QWORD v72[3];
  _QWORD v73[3];
  char v74;
  uint64_t v75;
  _BYTE v76[40];
  std::__split_buffer<std::string> __v;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v7 = std::unordered_set<std::string>::unordered_set((uint64_t)v76, v6);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(v7, (unsigned __int8 *)(a1 + 64), a1 + 64);
  kaldi::quasar::Lexicon::MergePhoneSet(a4, (uint64_t)v76);
  v74 = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v73, v8);
  v75 = 0;
  v9 = *a3;
  if (*a3 != a3[1])
  {
    v10 = (void *)*MEMORY[0x1E0DE4F60];
    v60 = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    v59 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    v54 = (_QWORD *)a4;
    do
    {
      std::vector<std::vector<std::string>>::vector(v72, -1 - 0x5555555555555555 * ((uint64_t)(v9[1] - *v9) >> 3));
      v11 = (unsigned __int8 *)(*v9 + 24);
      if (v11 != (unsigned __int8 *)v9[1])
      {
        v12 = 0;
        v57 = v9;
        do
        {
          v71[0] = 0;
          v71[1] = 0;
          p_v = (std::__split_buffer<std::string> *)v71;
          v58 = v11;
          kaldi::quasar::Lexicon::GetPron(a2, v11, (uint64_t)&p_v);
          p_first = (void **)&p_v->__first_;
          if (p_v != (std::__split_buffer<std::string> *)v71)
          {
            do
            {
              v68 = 0uLL;
              v69 = 0;
              kaldi::JoinVectorToString((uint64_t *)p_first + 4, " ", 1, &v68);
              v14 = v72[0];
              if (v12 < -1 - 0x5555555555555555 * ((uint64_t)(v72[1] - v72[0]) >> 3))
              {
                std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v61);
                if (v69 >= 0)
                  v15 = (uint64_t)&v68;
                else
                  v15 = v68;
                if (v69 >= 0)
                  v16 = HIBYTE(v69);
                else
                  v16 = *((_QWORD *)&v68 + 1);
                v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, v15, v16);
                v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
                v19 = *(_BYTE *)(a1 + 87);
                if (v19 >= 0)
                  v20 = a1 + 64;
                else
                  v20 = *(_QWORD *)(a1 + 64);
                if (v19 >= 0)
                  v21 = *(unsigned __int8 *)(a1 + 87);
                else
                  v21 = *(_QWORD *)(a1 + 72);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
                v22 = v72[0];
                std::stringbuf::str();
                v23 = v22 + 24 * v12;
                v26 = *(_QWORD *)(v23 + 8);
                v25 = (unint64_t *)(v23 + 8);
                v24 = v26;
                v27 = v25[1];
                if (v26 >= v27)
                {
                  v30 = (std::vector<std::string> *)(v22 + 24 * v12);
                  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v24 - (unint64_t)v30->__begin_) >> 3);
                  v32 = v31 + 1;
                  if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - (unint64_t)v30->__begin_) >> 3);
                  if (2 * v33 > v32)
                    v32 = 2 * v33;
                  if (v33 >= 0x555555555555555)
                    v34 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v34 = v32;
                  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(v25 + 1);
                  if (v34)
                    v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(v25 + 1), v34);
                  else
                    v35 = 0;
                  v36 = v35 + v31;
                  __v.__first_ = v35;
                  __v.__begin_ = v36;
                  __v.__end_cap_.__value_ = &v35[v34];
                  v37 = __p;
                  v36->__r_.__value_.__r.__words[2] = v67;
                  *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
                  v67 = 0;
                  __p = 0uLL;
                  __v.__end_ = v36 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(v30, &__v);
                  v29 = *v25;
                  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
                }
                else
                {
                  v28 = __p;
                  *(_QWORD *)(v24 + 16) = v67;
                  *(_OWORD *)v24 = v28;
                  v67 = 0;
                  __p = 0uLL;
                  v29 = v24 + 24;
                  *v25 = v24 + 24;
                }
                *v25 = v29;
                if (SHIBYTE(v67) < 0)
                  operator delete((void *)__p);
                v61[0] = v10;
                *(void **)((char *)v61 + *((_QWORD *)v10 - 3)) = v60;
                v61[1] = v59;
                if (v64 < 0)
                  operator delete(v63);
                std::streambuf::~streambuf();
                std::ostream::~ostream();
                MEMORY[0x1AF44D094](&v65);
                v14 = v72[0];
              }
              v38 = v14 + 24 * v12;
              v41 = *(std::string **)(v38 + 8);
              v39 = *(_QWORD *)(v38 + 16);
              v40 = (uint64_t *)(v38 + 8);
              if ((unint64_t)v41 >= v39)
              {
                v43 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v14 + 24 * v12), &v68);
              }
              else
              {
                if (SHIBYTE(v69) < 0)
                {
                  std::string::__init_copy_ctor_external(v41, (const std::string::value_type *)v68, *((std::string::size_type *)&v68 + 1));
                }
                else
                {
                  v42 = v68;
                  v41->__r_.__value_.__r.__words[2] = v69;
                  *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
                }
                v43 = (uint64_t)&v41[1];
                *v40 = (uint64_t)&v41[1];
              }
              *v40 = v43;
              if (SHIBYTE(v69) < 0)
                operator delete((void *)v68);
              v44 = (char *)p_first[1];
              if (v44)
              {
                do
                {
                  v45 = (char **)v44;
                  v44 = *(char **)v44;
                }
                while (v44);
              }
              else
              {
                do
                {
                  v45 = (char **)p_first[2];
                  v46 = *v45 == (char *)p_first;
                  p_first = (void **)v45;
                }
                while (!v46);
              }
              p_first = (void **)v45;
            }
            while (v45 != v71);
          }
          std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&p_v, v71[0]);
          ++v12;
          v9 = v57;
          v11 = v58 + 24;
        }
        while (v58 + 24 != (unsigned __int8 *)v57[1]);
      }
      v61[0] = 0;
      v61[1] = 0;
      v62 = 0;
      v47 = (__int128 *)v9[1];
      v48 = (__int128 *)(*v9 + 24);
      memset(&__v, 0, 24);
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((std::string *)&__v, v48, v47, 0xAAAAAAAAAAAAAAABLL * (((char *)v47 - (char *)v48) >> 3));
      v49 = (const std::string::value_type *)(a1 + 208);
      a4 = (uint64_t)v54;
      if (*(char *)(a1 + 231) < 0)
        v49 = *(const std::string::value_type **)(a1 + 208);
      kaldi::JoinVectorToString((uint64_t *)&__v, v49, 1, (__int128 *)v61);
      p_v = &__v;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_v);
      kaldi::quasar::LmeFst::Permutation(a1, (unsigned __int8 *)v61, v72, v54);
      if (SHIBYTE(v62) < 0)
        operator delete(v61[0]);
      v61[0] = v72;
      std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100]((void ***)v61);
      v9 += 3;
    }
    while (v9 != a3[1]);
  }
  if (kaldi::g_kaldi_verbose_level > 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v61, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"LME: spent ", 11);
    kaldi::Timer::GetSeconds((kaldi::Timer *)5, v50);
    v51 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)" seconds on creating the compound lexicon for ", 46);
    v52 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" items", 6);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v61);
  }
  kaldi::quasar::Lexicon::SetPronView(a4, 3u, 1);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v76);
}

void sub_1ADCD7DC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1 - 168);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFst::BuildCompoundChainFst(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4, uint64_t a5, _QWORD *a6, float a7)
{
  const std::string::value_type *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  std::string::size_type size;
  std::string::reference v31;
  uint64_t v32;
  float v33;
  std::string::size_type v34;
  std::string::size_type v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  std::string::size_type v42;
  std::string *v43;
  char *v44;
  char **v45;
  BOOL v46;
  int v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  char v53;
  unsigned int v54;
  unint64_t v55;
  unint64_t v56;
  int v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60;
  float v61;
  int v62;
  char **v63;
  char *v64;
  uint64_t v65;
  std::string v66;
  __int128 v67;
  uint64_t v68;

  v67 = 0uLL;
  v68 = 0;
  v13 = (const std::string::value_type *)(a1 + 208);
  if (*(char *)(a1 + 231) < 0)
    v13 = *(const std::string::value_type **)v13;
  kaldi::JoinVectorToString(a2, v13, 1, &v67);
  v14 = *(_QWORD **)(a1 + 48);
  v15 = fst::internal::DenseSymbolMap::Find(v14 + 5, (uint64_t)&v67);
  v16 = v15;
  if (v15 != -1)
  {
    v17 = v14[4];
    v18 = __OFSUB__(v15, v17);
    v19 = v15 - v17;
    if (v19 < 0 == v18)
      v16 = *(_QWORD *)(v14[15] + 8 * v19);
  }
  if (*(_BYTE *)(a1 + 176))
  {
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * a5) + 272))(*(_QWORD *)a1 + 16 * a5);
    (*(void (**)(uint64_t, __int128 *, uint64_t))(*(_QWORD *)v20 + 24))(v20, &v67, v16);
  }
  if (kaldi::quasar::Lexicon::WordHasDisambigLabel(a4, (unsigned __int8 *)&v67)
    || std::__tree<std::string>::__count_unique<std::string>(a1 + 232, (const void **)&v67))
  {
    kaldi::quasar::LmeFst::BuildChainFst((uint64_t *)a1, (unsigned __int8 *)&v67, (uint64_t)a4, a5, a6, a7);
  }
  else
  {
    memset(&v66, 0, sizeof(v66));
    v21 = *a2;
    if (a2[1] != *a2)
    {
      v48 = a6;
      v22 = 0;
      v23 = 0;
      v54 = -1;
      v59 = -1;
      v52 = v16;
      do
      {
        v64 = 0;
        v65 = 0;
        v63 = &v64;
        kaldi::quasar::Lexicon::GetPron(a3, (unsigned __int8 *)(v21 + 24 * v22), (uint64_t)&v63);
        if (v22)
          v24 = v23;
        else
          v24 = 1;
        v50 = v65;
        v51 = v24;
        v25 = (char *)v63;
        v56 = v22;
        v55 = v22 + 1;
        if (v63 == &v64)
        {
          v57 = -1;
        }
        else
        {
          v57 = -1;
          v53 = 1;
          do
          {
            v26 = *((_QWORD *)v25 + 4);
            if (*((_QWORD *)v25 + 5) != v26)
            {
              v27 = 0;
              v28 = 0;
              v29 = v56;
              do
              {
                std::string::operator=(&v66, (const std::string *)(v26 + v27));
                if (v28 | v29)
                {
                  size = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    size = v66.__r_.__value_.__l.__size_;
                  v31 = std::string::at(&v66, size - 2);
                  v58 = 0;
                  if (v28)
                    v32 = v59;
                  else
                    v32 = v54;
                  *v31 = 73;
                  v33 = 0.0;
                }
                else
                {
                  v32 = *(unsigned int *)(a1 + 104);
                  v34 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v34 = v66.__r_.__value_.__l.__size_;
                  *std::string::at(&v66, v34 - 2) = 66;
                  v33 = a7;
                  v58 = v52;
                }
                if (v55 == 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)
                  && v28 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 5) - *((_QWORD *)v25 + 4)) >> 3))
                {
                  v59 = *(_DWORD *)(a1 + 108);
                  v35 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v35 = v66.__r_.__value_.__l.__size_;
                  *std::string::at(&v66, v35 - 2) = 69;
                }
                else if (v57 == -1
                       || (v59 = v57,
                           v28 + 1 != 0xAAAAAAAAAAAAAAABLL
                                    * ((uint64_t)(*((_QWORD *)v25 + 5) - *((_QWORD *)v25 + 4)) >> 3)))
                {
                  v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * a5) + 200))(*(_QWORD *)a1 + 16 * a5);
                }
                if (!v29
                  && !v28
                  && v55 == 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)
                  && *((_QWORD *)v25 + 5) - *((_QWORD *)v25 + 4) == 24)
                {
                  v42 = HIBYTE(v66.__r_.__value_.__r.__words[2]);
                  if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  {
                    v43 = &v66;
                  }
                  else
                  {
                    v42 = v66.__r_.__value_.__l.__size_;
                    v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
                  }
                  v43->__r_.__value_.__s.__data_[v42 - 2] = 83;
                }
                v60 = (unint64_t)&v66;
                v36 = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 112, (unsigned __int8 *)&v66, (uint64_t)&std::piecewise_construct, (__int128 **)&v60)+ 10);
                v37 = *(_QWORD *)a1 + 16 * a5;
                v60 = __PAIR64__(v58, v36);
                v61 = v33;
                v62 = v59;
                (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v37 + 208))(v37, v32, &v60);
                if ((v53 & 1) != 0)
                {
                  v38 = v57;
                  if (v28 + 1 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v25 + 5) - *((_QWORD *)v25 + 4)) >> 3))
                    v38 = v59;
                  v57 = v38;
                }
                if (v56 && !v28)
                {
                  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)a1 + 16 * a5) + 200))(*(_QWORD *)a1 + 16 * a5);
                  v40 = *(_QWORD *)a1 + 16 * a5;
                  v60 = *(_QWORD *)(a1 + 96);
                  v61 = 0.0;
                  v62 = v39;
                  (*(void (**)(uint64_t, _QWORD, unint64_t *))(*(_QWORD *)v40 + 208))(v40, v54, &v60);
                  v41 = *(_QWORD *)a1 + 16 * a5;
                  v60 = __PAIR64__(v58, v36);
                  v61 = v33;
                  v62 = v59;
                  (*(void (**)(uint64_t, uint64_t, unint64_t *))(*(_QWORD *)v41 + 208))(v41, v39, &v60);
                }
                ++v28;
                v26 = *((_QWORD *)v25 + 4);
                v27 += 24;
                v29 = v56;
              }
              while (v28 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v25 + 5) - v26) >> 3));
            }
            v44 = (char *)*((_QWORD *)v25 + 1);
            if (v44)
            {
              do
              {
                v45 = (char **)v44;
                v44 = *(char **)v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                v45 = (char **)*((_QWORD *)v25 + 2);
                v46 = *v45 == v25;
                v25 = (char *)v45;
              }
              while (!v46);
            }
            v53 = 0;
            v25 = (char *)v45;
          }
          while (v45 != &v64);
        }
        v23 = v50 * v51;
        std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v63, v64);
        v21 = *a2;
        v22 = v55;
        v54 = v57;
      }
      while (v55 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
      v47 = SHIBYTE(v66.__r_.__value_.__r.__words[2]);
      *v48 += v23;
      if (v47 < 0)
        operator delete(v66.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v68) < 0)
    operator delete((void *)v67);
}

void sub_1ADCD8490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 113) < 0)
    operator delete(*(void **)(v32 - 136));
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::LmeFst::BuildChainFst(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, _QWORD *a5, float a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char **v30;
  BOOL v31;
  char *v32;
  int v34;
  _DWORD v35[4];
  char **v36;
  char *v37;
  uint64_t v38;
  __int128 *v39;

  v11 = (_QWORD *)a1[6];
  v12 = fst::internal::DenseSymbolMap::Find(v11 + 5, (uint64_t)a2);
  v13 = v12;
  if (v12 != -1)
  {
    v14 = v11[4];
    v15 = __OFSUB__(v12, v14);
    v16 = v12 - v14;
    if (v16 < 0 == v15)
      v13 = *(_QWORD *)(v11[15] + 8 * v16);
  }
  if (*((_BYTE *)a1 + 176))
  {
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*a1 + 16 * a4) + 272))(*a1 + 16 * a4);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)v17 + 24))(v17, a2, v13);
  }
  v34 = v13;
  v37 = 0;
  v38 = 0;
  v36 = &v37;
  kaldi::quasar::Lexicon::GetPron(a3, a2, (uint64_t)&v36);
  v18 = (char *)v36;
  if (v36 != &v37)
  {
    v19 = *((unsigned int *)a1 + 26);
    do
    {
      v20 = *((_QWORD *)v18 + 4);
      v21 = *((_QWORD *)v18 + 5) - v20;
      if (v21)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0xAAAAAAAAAAAAAAABLL * (v21 >> 3);
        do
        {
          if (v23)
          {
            v25 = 0;
            v26 = 0.0;
            v27 = v19;
          }
          else
          {
            v27 = *((unsigned int *)a1 + 26);
            v26 = a6;
            v25 = v34;
          }
          if (++v23 == v24)
          {
            v19 = *((unsigned int *)a1 + 27);
          }
          else
          {
            v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*a1 + 16 * a4) + 200))(*a1 + 16 * a4);
            v20 = *((_QWORD *)v18 + 4);
          }
          v28 = *a1;
          v39 = (__int128 *)(v20 + v22);
          v35[0] = *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::__list_iterator<std::pair<std::string,std::vector<std::string>>,void *>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 14), (unsigned __int8 *)(v20 + v22), (uint64_t)&std::piecewise_construct, &v39)+ 5);
          v35[1] = v25;
          *(float *)&v35[2] = v26;
          v35[3] = v19;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)(v28 + 16 * a4) + 208))(v28 + 16 * a4, v27, v35);
          v20 = *((_QWORD *)v18 + 4);
          v24 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v18 + 5) - v20) >> 3);
          v22 += 24;
        }
        while (v23 < v24);
      }
      v29 = (char *)*((_QWORD *)v18 + 1);
      if (v29)
      {
        do
        {
          v30 = (char **)v29;
          v29 = *(char **)v29;
        }
        while (v29);
      }
      else
      {
        do
        {
          v30 = (char **)*((_QWORD *)v18 + 2);
          v31 = *v30 == v18;
          v18 = (char *)v30;
        }
        while (!v31);
      }
      v18 = (char *)v30;
    }
    while (v30 != &v37);
  }
  v32 = v37;
  *a5 += v38;
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&v36, v32);
}

void sub_1ADCD8724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFst::CompleteFstDirect(_QWORD *a1)
{
  fst::DeterminizeStarInLog(a1, 0, -1, 0.00097656);
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, 0.00097656);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1);
}

void kaldi::quasar::LmeFst::Permutation(uint64_t a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4)
{
  std::vector<unsigned int>::size_type v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::vector<unsigned int>::pointer begin;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  std::string *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  __int128 v21;
  __int128 *v23[3];
  std::string __p;
  std::vector<unsigned int>::value_type *v25;
  std::string *v26;
  unint64_t v27;
  std::vector<unsigned int>::value_type __x[2];
  uint64_t *v29;
  std::vector<unsigned int> v30;
  __int128 **v31;

  v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  __x[0] = 1;
  std::vector<unsigned int>::vector(&v30, v7, __x);
  v8 = a3[1];
  v9 = v8 - *a3;
  if (v8 != *a3)
  {
    v10 = 0;
    v11 = 0xAAAAAAAAAAAAAAABLL * (v9 >> 3);
    begin = v30.__begin_;
    v13 = (_QWORD *)(*a3 + 8);
    do
    {
      begin[v10++] = -1431655765 * ((*v13 - *(v13 - 1)) >> 3);
      v13 += 3;
    }
    while (v11 > v10);
  }
  kaldi::GenerateCombinationIndices((uint64_t *)&v30, *(_QWORD *)(a1 + 88) + 1, 0, (uint64_t *)__x);
  v14 = *(uint64_t **)__x;
  v15 = v29;
  if (*(uint64_t **)__x != v29)
  {
    while (!(*(unsigned int (**)(_QWORD *, unsigned __int8 *))(*a4 + 16))(a4, a2)
         || *(_QWORD *)(a1 + 88) > (unint64_t)(int)kaldi::quasar::Lexicon::GetNumberOfPronsInWord(a4, a2))
    {
      v26 = 0;
      v27 = 0;
      v25 = 0;
      v16 = *v14;
      if (v14[1] != *v14)
      {
        v17 = 0;
        v18 = 0;
        v19 = 1;
        do
        {
          v20 = *(_QWORD *)(*a3 + 24 * v18) + 24 * *(unsigned int *)(v16 + 4 * v18);
          if ((unint64_t)v17 >= v27)
          {
            v17 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v25, (__int128 *)v20);
          }
          else
          {
            if (*(char *)(v20 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
            }
            else
            {
              v21 = *(_OWORD *)v20;
              v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
              *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v21;
            }
            ++v17;
          }
          v26 = v17;
          v18 = v19;
          v16 = *v14;
          ++v19;
        }
        while (v18 < (v14[1] - *v14) >> 2);
      }
      memset(&__p, 0, sizeof(__p));
      kaldi::JoinVectorToString((uint64_t *)&v25, " ", 1, (__int128 *)&__p);
      memset(v23, 0, sizeof(v23));
      kaldi::SplitStringToVector(&__p, " ", 1, (uint64_t)v23);
      kaldi::quasar::Lexicon::AddPron((uint64_t)a4, (uint64_t)a2, v23, 1, 0);
      v31 = v23;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v31);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 += 3;
      if (v14 == v15)
        goto LABEL_21;
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 232), (const void **)a2, (uint64_t)a2);
  }
LABEL_21:
  v25 = __x;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
}

void sub_1ADCD8A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  a20 = &a23;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (__p)
  {
    a27 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LmeFst::GetFst(kaldi::quasar::LmeFst *this, uint64_t a2)
{
  return *(_QWORD *)this + 16 * a2;
}

uint64_t kaldi::quasar::LmeFst::GetNumberOfFsts(kaldi::quasar::LmeFst *this)
{
  return (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 4;
}

std::string *kaldi::quasar::LmeFst::SetWordBoundary(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 208), a2);
}

uint64_t kaldi::quasar::LmeFst::SetMaxAllowedProns(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 88) = a2;
  return this;
}

uint64_t kaldi::quasar::LmeFst::SetClassSizeCost(uint64_t this, float a2, float a3)
{
  *(float *)(this + 256) = a2;
  *(float *)(this + 260) = a3;
  return this;
}

uint64_t kaldi::quasar::LmeFst::ExtractMinimumBaseSymbols(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v20;
  void *__p[2];
  char v22;

  if ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"the output symtable is not empty", 32);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    }
    return 0xFFFFFFFFLL;
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  v12 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(a1, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "<eps>");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 32))(a2, __p);
  if (v22 < 0)
    operator delete(__p[0]);
  v20 = a5;
  v10 = 0;
  if (v11)
  {
    v13 = 0;
    v14 = -1;
    v15 = -1;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(__p, a1, v12);
      if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a3 + 16))(a3, __p))
      {
        (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a2 + 24))(a2, __p, v12);
        v16 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a3 + 24))(a3, __p);
        if (v12 >= v14)
          v17 = v14;
        else
          v17 = v12;
        if (v14 == -1)
          v17 = v12;
        if (v15 <= v12)
          v18 = v12;
        else
          v18 = v15;
        if (v15 == -1)
          v18 = v12;
        if (v16)
        {
          v15 = v18;
          v14 = v17;
          v10 = (v10 + 1);
        }
        else
        {
          v10 = v10;
        }
      }
      if (v22 < 0)
        operator delete(__p[0]);
      if (++v13 < v11)
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, v13);
    }
    while (v11 != v13);
    if (!a4)
      goto LABEL_30;
    goto LABEL_29;
  }
  v15 = -1;
  v14 = -1;
  if (a4)
LABEL_29:
    *a4 = v14;
LABEL_30:
  if (v20)
    *v20 = v15;
  return v10;
}

void sub_1ADCD8CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LmeFst::ConvertLmeFstForRescore(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  __int128 v12;
  uint64_t *v13;
  _QWORD *v14;
  uint64_t v15;
  _DWORD v16[4];

  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*a1 + 64))(*a1, 0x10000, 1))
  {
    *a2 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = (uint64_t *)&v14;
    fst::quasar::GetWordsAndCosts(*a1, &v13);
    _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_17TropicalWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v12);
    v4 = v12;
    (*(void (**)(_QWORD))(*(_QWORD *)v12 + 224))(v12);
    if (v15)
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 176))(v4, v5);
      v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 200))(v4);
      (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v4 + 184))(v4, v6, 0.0);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 256))(v4, v5, v15);
      v7 = v13;
      if (v13 != (uint64_t *)&v14)
      {
        do
        {
          v8 = *((_DWORD *)v7 + 8);
          v16[0] = *((_DWORD *)v7 + 7);
          v16[1] = v16[0];
          v16[2] = v8;
          v16[3] = v6;
          (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v4 + 208))(v4, v5, v16);
          v9 = (uint64_t *)v7[1];
          if (v9)
          {
            do
            {
              v10 = v9;
              v9 = (uint64_t *)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (uint64_t *)v7[2];
              v11 = *v10 == (_QWORD)v7;
              v7 = v10;
            }
            while (!v11);
          }
          v7 = v10;
        }
        while (v10 != (uint64_t *)&v14);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 192))(v4, 0x5685A950000, 0x3FFFFFFF0007);
    }
    *a2 = v12;
    std::__tree<int>::destroy((uint64_t)&v13, v14);
  }
}

void sub_1ADCD8EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, _QWORD *a13)
{
  std::__tree<int>::destroy((uint64_t)&a12, a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LmeFst::DefragLmeFst(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t i;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  void *__p[2];
  unsigned __int8 v23;
  __n128 v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  int v31;

  v4 = a4;
  v7 = (_QWORD *)result;
  if (a4 <= 0)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v4 = result;
  }
  v10 = (_QWORD *)*v7;
  v8 = v7 + 1;
  v9 = v10;
  if (v10 == v8)
    return result;
  do
  {
    v11 = (_QWORD *)v9[7];
    if (!v11)
      goto LABEL_29;
    result = (*(uint64_t (**)(_QWORD))(*v11 + 160))(v9[7]);
    if (!(_DWORD)result)
      goto LABEL_29;
    v31 = 0;
    (*(void (**)(_QWORD *, uint64_t *))(*v11 + 128))(v11, &v29);
    while (1)
    {
      result = v29;
      if (!v29)
      {
        if (v31 >= v30)
          goto LABEL_29;
LABEL_12:
        v13 = v31;
        goto LABEL_13;
      }
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
      result = v29;
      if (v12)
        break;
      if (!v29)
        goto LABEL_12;
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
LABEL_13:
      v25 = &unk_1E5D213B0;
      v28 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)v11);
      v14 = v11[1];
      v15 = *(_QWORD *)(*(_QWORD *)(v14 + 64) + 8 * v13);
      v26 = v15;
      v27 = v14 + 8;
      for (i = v28; ; v28 = i)
      {
        v17 = *(_QWORD *)(v15 + 24);
        if (i >= (*(_QWORD *)(v15 + 32) - v17) >> 4)
          break;
        v24 = *(__n128 *)(v17 + 16 * i);
        if (v24.n128_i32[1] >= 1)
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 88))(__p, a2);
          v18 = v23;
          if ((v23 & 0x80u) != 0)
            v18 = (unint64_t)__p[1];
          if (v18)
          {
            v24.n128_u32[1] = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a3 + 24))(a3, __p, v4);
            v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
          }
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v25, &v24);
          if ((char)v23 < 0)
            operator delete(__p[0]);
          i = v28;
          v15 = v26;
        }
        ++i;
      }
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
      else
        ++v31;
    }
    if (v29)
      result = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 8))();
LABEL_29:
    v19 = (_QWORD *)v9[1];
    if (v19)
    {
      do
      {
        v20 = v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        v20 = (_QWORD *)v9[2];
        v21 = *v20 == (_QWORD)v9;
        v9 = v20;
      }
      while (!v21);
    }
    v9 = v20;
  }
  while (v20 != v8);
  return result;
}

