void sub_1ADF8E088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  void *v13;

  __cxa_free_exception(v13);
  _Unwind_Resume(a1);
}

void std::deque<std::pair<int,std::pair<int,int>>>::__add_front_capacity(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = (v3 - v2) >> 3;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 341 * v4 - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x155)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0xFFCuLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 170;
      else
        v40 = (uint64_t)a1[4] + 341;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0xFFCuLL);
        std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0xFFCuLL);
      }
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 170;
      else
        v35 = (uint64_t)a1[4] + 341;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 341;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &__p);
  }
}

void sub_1ADF8E394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::NextIteration(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _OWORD v13[17];

  v3 = *(_QWORD *)(a1 + 24);
  if (v3 != -1)
  {
    v4 = *(_QWORD *)(a1 + 40);
    do
    {
      v5 = (uint64_t *)(v4 + 16 * v3);
      v5[1] = 0;
      v3 = *v5;
    }
    while (v3 != -1);
  }
  v7 = (_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = -1;
  v9 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 112);
  v10 = (unint64_t)(float)(*(float *)(a1 + 8) * (float)v6);
  if (*(_QWORD *)(a1 + 32) < v10)
  {
    if (quasar::gLogLevel >= 6)
    {
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Expand hash list number of buckets from ", 40);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" to ", 4);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)".", 1);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v13);
    }
    kaldi::HashList<int,unsigned int,std::hash<int>,std::equal_to<int>>::SetSize(a1 + 16, v10);
  }
  *v7 = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_DWORD *)(a1 + 112) = 2139095040;
}

void sub_1ADF8E518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

char *quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  char *result;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a2)
  {
    v5 = a2;
    v6 = 0;
    v7 = a3 + 2;
    do
    {
      if ((unint64_t)v6 >= *v7)
      {
        v8 = (uint64_t)&v6[-*a3] >> 3;
        if ((unint64_t)(v8 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v9 = *v7 - *a3;
        v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1))
          v10 = v8 + 1;
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v11);
        else
          v12 = 0;
        v13 = &v12[8 * v8];
        *(_QWORD *)v13 = v5;
        v6 = v13 + 8;
        v15 = (char *)*a3;
        v14 = (char *)a3[1];
        if (v14 != (char *)*a3)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)*a3;
        }
        *a3 = v13;
        a3[1] = v6;
        a3[2] = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v6 = v5;
        v6 += 8;
      }
      a3[1] = v6;
      v5 = *(_QWORD *)(v5 + 16);
    }
    while (v5);
    v17 = (char *)*a3;
  }
  else
  {
    v17 = 0;
    v6 = 0;
  }
  v18 = *(int *)(a1 + 12);
  if ((_DWORD)v18)
  {
    v19 = (v6 - v17) >> 3;
    if (v19 > v18)
    {
      v28 = a1 + 128;
      result = std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,quasar::ptt::TopKSet<std::pair<int,std::pair<int,int>>>>::ProcessEmittingGetHashListElements(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem *)::{lambda(kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem const*)#1} &,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>,std::__wrap_iter<kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **>>(v17, &v17[8 * v18], v6, &v28);
      v21 = (uint64_t *)a3[1];
      v22 = *a3 + 8 * v18;
      if ((uint64_t *)v22 != v21)
      {
        v23 = *(_QWORD *)(a1 + 312);
        v24 = (uint64_t *)(*a3 + 8 * v18);
        do
        {
          v25 = *v24++;
          *(_QWORD *)(v25 + 16) = v23;
          *(_QWORD *)(a1 + 312) = v25;
          v23 = v25;
        }
        while (v24 != v21);
        a3[1] = v22;
      }
      return result;
    }
  }
  else
  {
    v19 = (v6 - v17) >> 3;
  }
  v26 = 126 - 2 * __clz(v19);
  if (v6 == v17)
    v27 = 0;
  else
    v27 = v26;
  return (char *)std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::HashList<std::pair<int,std::pair<int,int>>,int,std::hash<std::pair<int,std::pair<int,int>>>,std::equal_to<std::pair<int,std::pair<int,int>>>>::Elem **,false>((uint64_t)v17, (unint64_t *)v6, (uint64_t)&v29, v27, 1);
}

void sub_1ADF8E6E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ComputeNextWeightCutoffUpperBound(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v3;
  float v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  BOOL v21;
  float v22;
  unsigned int v23;
  int v24;
  int *v25;
  int v26;
  __int128 v28;
  int v29;
  _OWORD v31[17];
  float v32;
  _BYTE v33[12];

  v3 = (unint64_t)"TropicalWeightTplIfEEiEENS_24DefaultReplaceStateTableIS5_lEENS_17DefaultCacheStoreIS5_EEEEEE";
  if (!a2)
    return 1.0e10;
  *(_QWORD *)v33 = *(_QWORD *)a2;
  v29 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)&v33[8] = *(_DWORD *)(a2 + 8);
  v5 = *(float *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)&v33[4];
  v8 = *(_QWORD *)(a1 + 120);
  v9 = HIDWORD(*(_QWORD *)&v33[4]);
  if (v8)
  {
    v11 = *(_QWORD *)(v8 + 48);
    v10 = v8 + 48;
    *(_DWORD *)(v10 - 32) = *(_DWORD *)&v33[4];
    *(_DWORD *)(v10 - 28) = v9;
    *(_DWORD *)(v10 - 24) = v9;
    (*(void (**)(void))(v11 + 16))();
  }
  else
  {
    v28 = *(_OWORD *)(a1 + 96);
    v12 = operator new();
    *(_OWORD *)v12 = v28;
    *(_QWORD *)(v12 + 16) = v7;
    *(_DWORD *)(v12 + 24) = v9;
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v12 + 48, v28, v7);
    *(_DWORD *)(v12 + 124) = 0;
    *(_DWORD *)(v12 + 128) = 0;
    v13 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = v12;
    if (v13)
      MEMORY[0x1AF44D190](v13, 0x10E0C4059286A48);
  }
  v14 = *(_QWORD *)(a1 + 120);
  if (*(_QWORD *)(v14 + 96) >= *(_QWORD *)(v14 + 88))
    return 1.0e10;
  v15 = *(_QWORD *)v33;
  v16 = 1.0e10;
  while (1)
  {
    v17 = *(unsigned int *)(v14 + 76);
    if ((_DWORD)v17)
    {
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(v14 + 8) + 32))(*(_QWORD *)(v14 + 8), *(unsigned int *)(v14 + 24), v17, v14 + 28);
      v18 = *(float *)(v14 + 80);
      v19 = NAN;
      if (v18 != -INFINITY)
      {
        v20 = *(float *)(v14 + 36);
        v19 = NAN;
        if (v20 != -INFINITY)
        {
          v19 = INFINITY;
          v21 = v20 == INFINITY || v18 == INFINITY;
          v22 = v18 + v20;
          if (!v21)
            v19 = v22;
        }
      }
      v23 = *(_DWORD *)(v14 + 72);
      v24 = *(_DWORD *)(v14 + 32);
      *(_DWORD *)(v14 + 112) = v23;
      *(_DWORD *)(v14 + 116) = v24;
      v25 = (int *)(v14 + 40);
    }
    else
    {
      v23 = *(_DWORD *)(v14 + 72);
      *(_QWORD *)(v14 + 112) = v23;
      v19 = *(float *)(v14 + 80);
      v25 = (int *)(v14 + 24);
    }
    *(float *)(v14 + 120) = v19;
    v26 = *v25;
    *(_DWORD *)(v14 + 124) = *(_DWORD *)(v14 + 84);
    *(_DWORD *)(v14 + 128) = v26;
    if (!v23)
      goto LABEL_22;
    v3 = v3 & 0xFFFFFFFF00000000 | v9;
    if ((quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(a1, a3, v16, v15, v3, v29, v6 + 36 * v29, (float *)(v14 + 112), 1, 0, 0, &v32) & 1) == 0)break;
    if ((float)(v5 + v32) < v16)
      v16 = v5 + v32;
LABEL_22:
    ++*(_QWORD *)(v14 + 96);
    fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v14 + 48);
    if (*(_QWORD *)(v14 + 96) >= *(_QWORD *)(v14 + 88))
      return v16;
  }
  if (quasar::gLogLevel >= 6)
  {
    memset(v31, 0, sizeof(v31));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Exiting arc-loop early.", 23);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v31);
  }
  return v16;
}

void sub_1ADF8E9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<false,true>(uint64_t a1, int a2, uint64_t a3, int a4, int a5, uint64_t a6, float a7, uint64_t a8, int a9, int *a10, uint64_t *a11, float *a12)
{
  _QWORD *v18;
  float v19;
  float v20;
  float v21;
  float v23;
  unint64_t v24;
  uint64_t v25;
  float v26;
  BOOL v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[12];

  *(_QWORD *)v50 = a3;
  *(_DWORD *)&v50[8] = a4;
  if (quasar::gLogLevel >= 6)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Evaluating to expand path where we ignore observation ", 54);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  if (a5)
  {
    v19 = *(float *)(a6 + 16);
    v20 = v19 + 0.0;
    if (v19 == INFINITY)
      v20 = INFINITY;
    if (v19 == -INFINITY)
      v20 = NAN;
    v21 = v20;
    if (!a9)
      goto LABEL_14;
  }
  else
  {
    v21 = 0.0;
    if (!a9)
      goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 28) && v21 > a7)
    return 0;
LABEL_14:
  v23 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2);
  if (quasar::gLogLevel >= 6)
  {
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v33 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
  }
  LODWORD(v33) = 0;
  *(_QWORD *)((char *)&v33 + 4) = *(_QWORD *)&v50[4];
  v24 = v33;
  v25 = HIDWORD(*(_QWORD *)&v50[4]);
  v26 = NAN;
  if (v21 == -INFINITY
    || v23 == -INFINITY
    || (v23 != INFINITY ? (v27 = v21 == INFINITY) : (v27 = 1), !v27 ? (v26 = v21 + v23) : (v26 = INFINITY), v26 >= a7))
  {
    if (quasar::gLogLevel >= 6)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Dropping path due to cut-off.", 29);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    v29 = 0;
  }
  else
  {
    if (quasar::gLogLevel >= 6)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v33 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v33);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v33, (uint64_t)"Expanding path with nextState=", 30);
      quasar::ptt::operator<<(v28);
      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v33);
    }
    v29 = quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::Frontier::Expand((uint64_t *)(a1 + 248), a5, a2, 0, 0, v24, v25, v26, v23 + *(float *)(a6 + 20));
  }
  if (a10)
  {
    v30 = HIDWORD(v24);
    if (v29)
      v31 = v24;
    else
      v31 = -1;
    if (!v29)
      LODWORD(v30) = -1;
    *a10 = v31;
    a10[1] = v30;
    if (v29)
      v32 = v25;
    else
      v32 = -1;
    a10[2] = v32;
  }
  if (a11)
    *a11 = v29;
  if (a12)
    *a12 = v26;
  return 1;
}

void sub_1ADF8ED60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::ProcessArc<true,false>(uint64_t a1, int a2, float a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, float *a8, int a9, uint64_t a10, uint64_t a11, float *a12)
{
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  float v22;
  float v23;
  float v24;
  float v25;
  BOOL v26;
  float v27;
  float v29;
  float v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (quasar::gLogLevel >= 6)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"Evaluating to expand path with graph arc ", 41);
    v20 = quasar::ptt::operator<<(v19, (uint64_t)a8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" w.r.t. observation ", 20);
    v21 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)".", 1);
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  v22 = a8[2];
  v23 = *(float *)(a1 + 24) * v22;
  if (a6)
  {
    v24 = NAN;
    if (v23 != -INFINITY)
    {
      v25 = *(float *)(a7 + 16);
      if (v25 != -INFINITY)
      {
        v26 = v25 == INFINITY || v23 == INFINITY;
        v27 = v23 + v25;
        if (v26)
          v24 = INFINITY;
        else
          v24 = v27;
      }
    }
    if (!a9)
      goto LABEL_18;
  }
  else
  {
    v24 = *(float *)(a1 + 24) * v22;
    if (!a9)
      goto LABEL_18;
  }
  if (*(_BYTE *)(a1 + 28) && v24 > a3)
    return 0;
LABEL_18:
  v29 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * *(_DWORD *)(a1 + 72) * a2 + 4 * *(int *)a8);
  if (quasar::gLogLevel >= 6)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v32, (uint64_t)"symbolDistanceArc.weight.Value()=", 33);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v32);
  }
  v30 = NAN;
  if (v24 != -INFINITY && v29 != -INFINITY)
  {
    if (v29 == INFINITY || v24 == INFINITY)
      v30 = INFINITY;
    else
      v30 = v24 + v29;
  }
  if (a12)
    *a12 = v30;
  return 1;
}

void sub_1ADF8EFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a9);
  _Unwind_Resume(a1);
}

unint64_t quasar::ptt::DecoderImpl<quasar::ptt::UnigramPhoneticConfusion,quasar::ptt::DynamicGraph<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,std::deque<std::pair<int,std::pair<int,int>>>>::GetPath@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  int *v11;
  float v12;
  float v13;
  float v14;
  BOOL v15;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  float v20;
  uint64_t v21;
  float v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t result;
  float v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(a4);
  v7 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)a4);
  v8 = quasar::gLogLevel;
  if (a2)
  {
    v9 = a2;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 136);
      v11 = (int *)(v10 + 36 * v9);
      if (v8 >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        quasar::ptt::operator<<(&v31);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
      }
      if (v9 == a2)
      {
        if (a3)
        {
          v12 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 96) + 32))(*(_QWORD *)(a1 + 96), *(unsigned int *)(v10 + 36 * v9 + 28));
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 16))(*(_QWORD *)(a1 + 104), *(unsigned int *)(v10 + 36 * v9 + 32));
          v14 = NAN;
          if (v12 != -INFINITY && v13 != -INFINITY)
          {
            v15 = v13 == INFINITY || v12 == INFINITY;
            v16 = v12 + v13;
            if (v15)
              v14 = INFINITY;
            else
              v14 = v16;
          }
          *(float *)&v31 = v14;
          v30[0] = INFINITY;
          v8 = quasar::gLogLevel;
          if (v14 == INFINITY)
            break;
          if (quasar::gLogLevel >= 6)
          {
            v46 = 0u;
            v47 = 0u;
            v44 = 0u;
            v45 = 0u;
            v42 = 0u;
            v43 = 0u;
            v40 = 0u;
            v41 = 0u;
            v39 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"finalWeight=", 12);
            std::ostream::operator<<();
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
          }
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
          v17 = (uint64_t *)a4[1];
          LODWORD(v31) = 0;
          *((float *)&v31 + 1) = v14;
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v17, v7, (uint64_t *)&v31);
        }
        else
        {
          fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
          v18 = (uint64_t *)a4[1];
          *(_QWORD *)&v31 = 0;
          fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::SetFinal(v18, v7, (uint64_t *)&v31);
        }
      }
      v19 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::AddState((uint64_t)a4);
      v20 = *(float *)(v10 + 36 * v9 + 16);
      if (*v11)
      {
        v21 = *(_QWORD *)(a1 + 136) + 36 * *v11;
        v20 = v20 - *(float *)(v21 + 16);
        v22 = *(float *)(v10 + 36 * v9 + 20) - *(float *)(v21 + 20);
      }
      else
      {
        v22 = *(float *)(v10 + 36 * v9 + 20);
      }
      v30[0] = v22;
      v30[1] = v20 - v22;
      *(_QWORD *)&v31 = *(_QWORD *)(v10 + 36 * v9 + 8) | (*(_DWORD *)(v10 + 36 * v9 + 4) << 16);
      *((float *)&v31 + 2) = v22;
      *((float *)&v31 + 3) = v20 - v22;
      LODWORD(v32) = v7;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
      fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::AddArc((_QWORD *)a4[1], v19, (float *)&v31);
      v8 = quasar::gLogLevel;
      if (quasar::gLogLevel >= 6)
      {
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v39 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"Arc from ", 9);
        v23 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" to ", 4);
        v24 = (_QWORD *)std::ostream::operator<<();
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" with weight ", 13);
        v26 = fst::operator<<<float>(v25, v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)".", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
        v8 = quasar::gLogLevel;
      }
      v9 = *v11;
      v7 = v19;
      if (!*v11)
        goto LABEL_28;
    }
  }
  v19 = v7;
LABEL_28:
  if (v8 >= 6)
  {
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v39 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"pathNextState=", 14);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v31);
  }
  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>::MutateCheck((uint64_t)a4);
  v27 = a4[1];
  *(_DWORD *)(v27 + 88) = v19;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  *(_QWORD *)(v27 + 8) = result & 0xCCFFFFF0007 | (((result >> 35) & 1) << 37) | *(_QWORD *)(v27 + 8) & 4;
  return result;
}

void sub_1ADF8F3F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  _DWORD *v13;
  int v14;

  *v11 = &unk_1E5D25580;
  v13 = (_DWORD *)v11[1];
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::CoreMLTensorData::~CoreMLTensorData(id *this)
{

  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(this);
}

{
  kaldi::quasar::CoreMLTensorData::~CoreMLTensorData(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::CoreMLNetworkConfig::CoreMLNetworkConfig(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E5D337C8;
  v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_BYTE *)(a1 + 88) = 0;
  return a1;
}

void sub_1ADF8F540(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf *v1;

  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, unsigned __int8 *a4)
{
  uint64_t *v4;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  size_t v12;
  unsigned __int8 *v13;
  void **v14;
  uint64_t v15;
  int v16;
  int v17;
  void **v18;
  void *v19;
  size_t v20;
  void *v21;
  int v22;
  void *v24;
  uint64_t v25;
  _OWORD *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v31;
  void **v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t **v35;
  std::string __p[11];
  void *v37;
  size_t v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  std::string __str;
  std::string *v43;

  memset(&__str, 0, sizeof(__str));
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v4 = a2 + 4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    v8 = (char *)(a1 + 88);
    v35 = (uint64_t **)(a1 + 64);
    while (1)
    {
      v37 = 0;
      v38 = 0;
      v39 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v37);
      v9 = a4[23];
      v10 = (char)v9;
      if ((v9 & 0x80u) != 0)
        v9 = *((_QWORD *)a4 + 1);
      v11 = HIBYTE(v39);
      if (!v9)
        break;
      v12 = v39 >= 0 ? HIBYTE(v39) : v38;
      if (v12 != v9)
        break;
      if (v10 >= 0)
        v13 = a4;
      else
        v13 = *(unsigned __int8 **)a4;
      if (v39 < 0)
      {
        v19 = v37;
        if (!memcmp(v37, v13, v38))
        {
          operator delete(v19);
          goto LABEL_59;
        }
LABEL_27:
        v20 = v38;
        if (v38 == 10)
        {
          v17 = 1;
          v18 = (void **)v37;
          goto LABEL_29;
        }
LABEL_35:
        if (v20 == 14)
        {
          v17 = 1;
          v18 = (void **)v37;
          goto LABEL_37;
        }
LABEL_43:
        if (v20 != 13)
          goto LABEL_65;
        v18 = (void **)v37;
        goto LABEL_50;
      }
      if (!HIBYTE(v39))
        goto LABEL_59;
      v14 = &v37;
      v15 = HIBYTE(v39);
      do
      {
        if (*(unsigned __int8 *)v14 != *v13)
          goto LABEL_21;
        v14 = (void **)((char *)v14 + 1);
        ++v13;
        --v15;
      }
      while (v15);
      v16 = 0;
      if ((v39 & 0x8000000000000000) == 0)
      {
LABEL_57:
        if (!v16)
          goto LABEL_59;
        goto LABEL_58;
      }
LABEL_19:
      operator delete(v37);
      if ((v16 & 1) == 0)
        goto LABEL_59;
LABEL_58:
      if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_59;
    }
LABEL_21:
    if (v39 < 0)
      goto LABEL_27;
    v17 = 0;
    v18 = &v37;
    switch(HIBYTE(v39))
    {
      case 0xAu:
LABEL_29:
        v21 = *v18;
        v22 = *((unsigned __int16 *)v18 + 4);
        if (v21 != (void *)0x6F6974636E75463CLL || v22 != 15982)
        {
          if (!v17)
            goto LABEL_65;
          v20 = v38;
          goto LABEL_35;
        }
        kaldi::ReadToken(a2, a3, (uint64_t)&__str);
        break;
      case 0xDu:
        goto LABEL_50;
      case 0xEu:
LABEL_37:
        v24 = *v18;
        v25 = *(uint64_t *)((char *)v18 + 6);
        if (v24 == (void *)0x5474757074754F3CLL && v25 == 0x3E726F736E655474)
        {
          kaldi::ReadToken(a2, a3, (uint64_t)v40);
          kaldi::quasar::StripColon((uint64_t)v40, __p);
          v43 = __p;
          v27 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(v35, (const void **)&__p[0].__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (_OWORD **)&v43);
          std::string::operator=((std::string *)((char *)v27 + 56), &__str);
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
        }
        else
        {
          if (v17)
          {
            v20 = v38;
            goto LABEL_43;
          }
          if (v11 != 13)
            goto LABEL_65;
          v18 = &v37;
LABEL_50:
          v28 = *v18;
          v29 = *(uint64_t *)((char *)v18 + 5);
          if (v28 != (void *)0x6F4E776F6C6C413CLL || v29 != 0x3E5550436E6F4E77)
          {
LABEL_65:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown token ", 14);
            if (v39 >= 0)
              v32 = &v37;
            else
              v32 = (void **)v37;
            if (v39 >= 0)
              v33 = HIBYTE(v39);
            else
              v33 = v38;
            v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)", a typo in config file?", 24);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
          }
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
        break;
      default:
        goto LABEL_65;
    }
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    v16 = 1;
    if ((v39 & 0x8000000000000000) == 0)
      goto LABEL_57;
    goto LABEL_19;
  }
LABEL_59:
  if (SHIBYTE(v41) < 0)
    operator delete(v40[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADF8F8E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 129) < 0)
    operator delete(*(void **)(v1 - 152));
  if (*(char *)(v1 - 105) < 0)
    operator delete(*(void **)(v1 - 128));
  _Unwind_Resume(a1);
}

void kaldi::quasar::StripColon(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4;
  char v5;

  v4 = std::string::find((const std::string *)a1, 58, 0);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v5);
  }
}

std::string *kaldi::quasar::CoreMLNetworkConfig::CreateComputeEngine@<X0>(kaldi::quasar::CoreMLNetworkConfig *this@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new();
  result = kaldi::quasar::CoreMLNetworkPlan::CoreMLNetworkPlan(v4, this);
  *a2 = v4;
  return result;
}

void sub_1ADF8FA00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40BB9C649ALL);
  _Unwind_Resume(a1);
}

std::string *kaldi::quasar::CoreMLNetworkPlan::CoreMLNetworkPlan(std::string *this, const kaldi::quasar::CoreMLNetworkConfig *a2)
{
  std::string::size_type v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  _QWORD *v8;

  this->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E5D33570;
  this->__r_.__value_.__l.__size_ = (std::string::size_type)off_1E5D33BC8;
  this->__r_.__value_.__s.__data_[16] = *((_BYTE *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  this[1].__r_.__value_.__r.__words[0] = *((_QWORD *)a2 + 2);
  this[1].__r_.__value_.__l.__size_ = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  LOWORD(this[1].__r_.__value_.__r.__words[2]) = *((_WORD *)a2 + 16);
  this->__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E5D337C8;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 7);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v7;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&this[3], (const void ***)a2 + 8);
  this[4].__r_.__value_.__s.__data_[0] = *((_BYTE *)a2 + 88);
  v8 = (_QWORD *)operator new();
  *v8 = 0;
  v8[1] = 0;
  this[4].__r_.__value_.__l.__size_ = (std::string::size_type)v8;
  kaldi::quasar::CoreMLNetworkPlan::LoadNetwork((uint64_t)this, (uint64_t *)a2 + 5, *((unsigned __int8 *)a2 + 88));
  return this;
}

void sub_1ADF8FB2C(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  kaldi::quasar::ComputeEngineConfigItf *v2;

  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::LoadNetwork(uint64_t a1, uint64_t *a2, int a3)
{
  id v6;
  void *v7;
  uint64_t *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  id v15;
  void **v16;
  void *v17;
  id v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  id v22;
  const char *v23;
  size_t v24;
  _QWORD v25[34];
  id v26;

  v6 = objc_alloc_init(MEMORY[0x1E0C9E960]);
  v7 = v6;
  if ((a3 & 1) == 0)
    objc_msgSend(v6, "setComputeUnits:", 0);
  if (*((char *)a2 + 23) >= 0)
    v8 = a2;
  else
    v8 = (uint64_t *)*a2;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v9, "stringByStandardizingPath");
  v10 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = (void *)MEMORY[0x1E0C99E98];
  v12 = objc_retainAutorelease(v10);
  objc_msgSend(v11, "fileURLWithFileSystemRepresentation:isDirectory:relativeToURL:", objc_msgSend(v12, "fileSystemRepresentation"), 1, 0);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v26 = 0;
  objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:configuration:error:", v13, v7, &v26);
  v14 = objc_claimAutoreleasedReturnValue();
  v15 = v26;
  v16 = *(void ***)(a1 + 104);
  v17 = *v16;
  *v16 = (void *)v14;

  if (!**(_QWORD **)(a1 + 104))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Could not load ", 15);
    objc_msgSend(v15, "description");
    v22 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v23 = (const char *)objc_msgSend(v22, "UTF8String");
    v24 = strlen(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v23, v24);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
  v18 = objc_alloc_init(MEMORY[0x1E0C9E9A8]);
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(void **)(v19 + 8);
  *(_QWORD *)(v19 + 8) = v18;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 104) + 8), "setUsesCPUOnly:", a3 ^ 1u);
}

void sub_1ADF8FD5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::~CoreMLNetworkPlan(kaldi::quasar::CoreMLNetworkPlan *this)
{
  _QWORD *v2;
  id *v3;
  id *v4;

  *(_QWORD *)this = &off_1E5D33570;
  v4 = (id *)*((_QWORD *)this + 13);
  v2 = (_QWORD *)((char *)this + 104);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::quasar::CoreMLNetworkPlanObjCData>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig((kaldi::quasar::CoreMLNetworkPlan *)((char *)this + 8));
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::CoreMLNetworkPlan::~CoreMLNetworkPlan(this);
  JUMPOUT(0x1AF44D190);
}

_QWORD *kaldi::quasar::CoreMLNetworkPlan::CreateData@<X0>(int **a1@<X1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  result = kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADF8FE6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::CoreMLNetworkPlan::CreateData@<X0>(uint64_t a1@<X1>, int a2@<W2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  result = kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADF8FEE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::CoreMLNetworkPlan::CreateData@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *result;

  v3 = a1 + 8;
  v4 = (_QWORD *)operator new();
  result = kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v4, v3);
  *a2 = v4;
  return result;
}

{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADF8FF5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void sub_1ADF8FFD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateZeroedDataInt32(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = (_QWORD *)operator new();
  kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v5, __dst);
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1ADF9007C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1093C407E1975CCLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateZeroedDataFloat(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = (_QWORD *)operator new();
  kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v5, __dst);
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1ADF90140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1093C407E1975CCLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateConcat(uint64_t a1@<X0>, void ***a2@<X1>, int a3@<W2>, kaldi::quasar::CoreMLTensorData **a4@<X8>)
{
  id v8;
  void **v9;
  void **v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  MLFeatureValue *v15;
  kaldi::quasar::CoreMLTensorData *v16;
  kaldi::quasar::CoreMLTensorData *v17;
  void *__p;
  void *v19;
  uint64_t v20;
  void **p_p;

  if (*a2 == a2[1])
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
    v17 = (kaldi::quasar::CoreMLTensorData *)operator new();
    kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v17, (uint64_t)&__p, 0);
    *a4 = v17;
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
  else
  {
    __p = 0;
    v19 = 0;
    v20 = 0;
    v8 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v9 = *a2;
    v10 = a2[1];
    while (v9 != v10)
    {
      v11 = *((id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a1, *v9, (char **)&__p) + 4);
      objc_msgSend(v8, "addObject:", v11, __p, v19, v20);

      ++v9;
    }
    v12 = (void *)MEMORY[0x1E0C9E978];
    objc_msgSend(v8, "lastObject", __p, v19, v20);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "multiArrayByConcatenatingMultiArrays:alongAxis:dataType:", v8, a3, objc_msgSend(v13, "dataType"));
    v14 = (void *)objc_claimAutoreleasedReturnValue();

    objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithMultiArray:", v14);
    v15 = (MLFeatureValue *)objc_claimAutoreleasedReturnValue();
    v16 = (kaldi::quasar::CoreMLTensorData *)operator new();
    kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v16, v15);
    *a4 = v16;

    p_p = &__p;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&p_p);
  }
}

void sub_1ADF90308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  MEMORY[0x1AF44D190](v12, 0x1093C407E1975CCLL);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void *kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(uint64_t a1, void *lpsrc, char **a3)
{
  void *v6;
  double v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  const void *v26;
  void *v27;
  uint64_t v29;
  _BYTE v30[40];
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  _QWORD *v34;

  if (!lpsrc)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "src");
    goto LABEL_28;
  }
  if (v6)
    return v6;
  if ((*(unsigned int (**)(void *))(*(_QWORD *)lpsrc + 152))(lpsrc) != 2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v31, "src->GetNumDims() == 2");
LABEL_28:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v31);
  }
  v7 = kaldi::Matrix<float>::Matrix((uint64_t)v30);
  (*(void (**)(void *, _BYTE *, double))(*(_QWORD *)lpsrc + 24))(lpsrc, v30, v7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(&v29, a1, v30);
  v8 = (unint64_t)a3[2];
  v9 = a3[1];
  if ((unint64_t)v9 >= v8)
  {
    v12 = (v9 - *a3) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v13 = v8 - (_QWORD)*a3;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    v34 = a3 + 2;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a3 + 2), v15);
    else
      v16 = 0;
    v17 = &v16[8 * v12];
    v18 = &v16[8 * v15];
    v33 = v18;
    v19 = v29;
    v29 = 0;
    *(_QWORD *)v17 = v19;
    v11 = v17 + 8;
    v32.i64[1] = (uint64_t)(v17 + 8);
    v21 = *a3;
    v20 = a3[1];
    if (v20 == *a3)
    {
      v23 = vdupq_n_s64((unint64_t)v20);
    }
    else
    {
      do
      {
        v22 = *((_QWORD *)v20 - 1);
        v20 -= 8;
        *(_QWORD *)v20 = 0;
        *((_QWORD *)v17 - 1) = v22;
        v17 -= 8;
      }
      while (v20 != v21);
      v23 = *(int64x2_t *)a3;
      v11 = (char *)v32.i64[1];
      v18 = v33;
    }
    *a3 = v17;
    a3[1] = v11;
    v32 = v23;
    v24 = a3[2];
    a3[2] = v18;
    v33 = v24;
    v31 = v23.i64[0];
    std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v31);
  }
  else
  {
    v10 = v29;
    v29 = 0;
    *(_QWORD *)v9 = v10;
    v11 = v9 + 8;
  }
  a3[1] = v11;
  v25 = v29;
  v29 = 0;
  if (v25)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v11 = a3[1];
  }
  v26 = (const void *)*((_QWORD *)v11 - 1);
  if (!v26
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"converted_data", 14);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v31);
  }
  v6 = v27;
  kaldi::Matrix<float>::~Matrix((uint64_t)v30);
  return v6;
}

void kaldi::quasar::CoreMLNetworkPlan::CreateSplit(kaldi::quasar::CoreMLNetworkPlan *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, _QWORD *a3@<X8>)
{
  int v6;
  unint64_t v7;
  id *TensorData;
  void *v9;
  uint64_t *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *__p;
  _BYTE *v22;
  char *v23[3];

  v6 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a2 + 160))(a2, 0);
  v7 = v6;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a3, v6);
  if (v6)
  {
    memset(v23, 0, sizeof(v23));
    TensorData = (id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData((uint64_t)this, a2, v23);
    objc_msgSend(TensorData[4], "shape");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    kaldi::quasar::ShapeArrayToSizeVector(v9, (uint64_t **)&__p);

    v10 = (uint64_t *)__p;
    v11 = v22;
    v12 = 1;
    *(_QWORD *)__p = 1;
    v13 = v11 - (_BYTE *)v10;
    if (v13)
    {
      v14 = v13 >> 3;
      if (v14 <= 1)
        v14 = 1;
      v12 = 1;
      do
      {
        v15 = *v10++;
        v12 *= (_DWORD)v15;
        --v14;
      }
      while (v14);
    }
    v16 = 0;
    v17 = 0;
    if (v7 <= 1)
      v18 = 1;
    else
      v18 = v7;
    do
    {
      v19 = (_QWORD *)operator new();
      kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v19, &__p);
      v20 = *(_QWORD *)(*a3 + 8 * v17);
      *(_QWORD *)(*a3 + 8 * v17) = v19;
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      (*(void (**)(_QWORD, id *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*a3 + 8 * v17) + 72))(*(_QWORD *)(*a3 + 8 * v17), TensorData, v16, (v12 + v16), 0);
      ++v17;
      v16 = (v16 + v12);
    }
    while (v18 != v17);
    if (__p)
    {
      v22 = __p;
      operator delete(__p);
    }
    __p = v23;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
}

void sub_1ADF907E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  __p = &a12;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ShapeArrayToSizeVector(void *a1@<X0>, uint64_t **a2@<X8>)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = v3;
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
  if (v5)
  {
    v6 = *(_QWORD *)v22;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v22 != v6)
          objc_enumerationMutation(v4);
        v8 = objc_msgSend(*(id *)(*((_QWORD *)&v21 + 1) + 8 * i), "unsignedIntegerValue", (_QWORD)v21);
        v9 = v8;
        v11 = a2[1];
        v10 = (unint64_t)a2[2];
        if ((unint64_t)v11 >= v10)
        {
          v13 = *a2;
          v14 = v11 - *a2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = v10 - (_QWORD)v13;
          if (v16 >> 2 > v15)
            v15 = v16 >> 2;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
            v17 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a2 + 2), v17);
            v13 = *a2;
            v11 = a2[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = (uint64_t *)&v18[8 * v14];
          *v19 = v9;
          v12 = v19 + 1;
          while (v11 != v13)
          {
            v20 = *--v11;
            *--v19 = v20;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = (uint64_t *)&v18[8 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v11 = v8;
          v12 = v11 + 1;
        }
        a2[1] = v12;
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v21, v25, 16);
    }
    while (v5);
  }

}

void sub_1ADF90A18(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)v2;
  if (*(_QWORD *)v2)
  {
    *(_QWORD *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::CreateSlice(kaldi::quasar::CoreMLNetworkPlan *this@<X0>, const kaldi::quasar::ComputeEngineBufferItf *a2@<X1>, int a3@<W2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int v10;
  _QWORD *v11;
  id *TensorData;
  void *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  void *p_p;
  _BYTE *v23;
  void *__p;
  void *v25;
  uint64_t v26;

  (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 152))(a2);
  v10 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a2 + 160))(a2, 0);
  if (v10)
  {
    if (a3 || a4 != (uint64_t)v10)
    {
      __p = 0;
      v25 = 0;
      v26 = 0;
      TensorData = (id *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData((uint64_t)this, a2, (char **)&__p);
      objc_msgSend(TensorData[4], "shape");
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      kaldi::quasar::ShapeArrayToSizeVector(v13, (uint64_t **)&p_p);

      v14 = (char *)p_p;
      v15 = v23 - (_BYTE *)p_p;
      *(_QWORD *)p_p = a4 - a3;
      if ((unint64_t)v15 < 9)
      {
        v19 = 1;
      }
      else
      {
        v16 = v15 >> 3;
        if (v16 <= 2)
          v16 = 2;
        v17 = v16 - 1;
        v18 = (uint64_t *)(v14 + 8);
        v19 = 1;
        do
        {
          v20 = *v18++;
          v19 *= (_DWORD)v20;
          --v17;
        }
        while (v17);
      }
      v21 = (_QWORD *)operator new();
      kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v21, &p_p);
      (*(void (**)(_QWORD *, id *, _QWORD, _QWORD, _QWORD))(*v21 + 72))(v21, TensorData, (v19 * a3), (v19 * a4), 0);
      *a5 = v21;
      if (p_p)
      {
        v23 = p_p;
        operator delete(p_p);
      }
      p_p = &__p;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_p);
    }
    else
    {
      (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 16))(a2);
    }
  }
  else
  {
    __p = 0;
    v25 = 0;
    v26 = 0;
    v11 = (_QWORD *)operator new();
    kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v11, (uint64_t)&__p, 0);
    *a5 = v11;
    if (__p)
    {
      v25 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADF90C34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, char *a10, uint64_t a11, char a12)
{
  uint64_t v12;

  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (__p)
  {
    a10 = __p;
    operator delete(__p);
  }
  __p = &a12;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1ADF90CB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;

  MEMORY[0x1AF44D190](v13, 0x1093C407E1975CCLL);
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADF90CA8);
}

void sub_1ADF90CE0()
{
  JUMPOUT(0x1ADF90CA8);
}

void kaldi::quasar::CoreMLNetworkPlan::Run(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int128 *v9;
  __int128 *v10;
  void *v11;
  __int128 v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  void **v19;
  void **v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  std::string __p;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void **v29[5];

  v26 = 0;
  v27 = 0;
  v28 = 0;
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    do
    {
      v11 = (void *)*((_QWORD *)v9 + 3);
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v12 = *v9;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
      }
      v25 = v11;
      v13 = v27;
      if (v27 >= v28)
      {
        v15 = (uint64_t)(v27 - v26) >> 5;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = v28 - v26;
        if ((uint64_t)(v28 - v26) >> 4 > v16)
          v16 = v17 >> 4;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
          v18 = 0x7FFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        v29[4] = (void **)&v28;
        v19 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v28, v18);
        v20 = &v19[4 * v15];
        v29[0] = v19;
        v29[1] = v20;
        v29[3] = &v19[4 * v21];
        v22 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20[2] = (void *)__p.__r_.__value_.__r.__words[2];
        *(_OWORD *)v20 = v22;
        memset(&__p, 0, sizeof(__p));
        v20[3] = v25;
        v29[2] = v20 + 4;
        std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__swap_out_circular_buffer(&v26, v29);
        v23 = v27;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        v27 = v23;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v27 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v13 = v14;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)(v13 + 24) = v25;
        v27 = v13 + 32;
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 128))(a1, &v26, a3, a4, a5);
  v29[0] = (void **)&v26;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

void sub_1ADF90EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  __p = &a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlan::Run(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  id v9;
  void *v10;
  char *v11[34];
  char **v12;

  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "Can't deal with this yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  v9 = **(id **)(a1 + 104);
  memset(v11, 0, 24);
  kaldi::quasar::CoreMLNetworkPlanObjCData::MakeFeatureProvider(*(id **)(a1 + 104), a1, a2, v11);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  kaldi::quasar::RunWithProvider(v10, v9, *(void **)(*(_QWORD *)(a1 + 104) + 8), a3, a5);

  v12 = v11;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v12);

}

void sub_1ADF90FD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  void *v10;
  void *v11;
  uint64_t v12;

  *(_QWORD *)(v12 - 56) = &a10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 56));

  _Unwind_Resume(a1);
}

id kaldi::quasar::CoreMLNetworkPlanObjCData::MakeFeatureProvider(id *a1, uint64_t a2, uint64_t *a3, char **a4)
{
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  MLFeatureDescription *v16;
  kaldi::quasar::CoreMLTensorData *TensorData;
  void *v18;
  void *v19;
  id v20;
  void *v21;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  const char *v29;
  size_t v30;
  id v31;
  _QWORD v32[35];

  objc_msgSend(*a1, "modelDescription");
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v8, "inputDescriptionsByName");
  v9 = (void *)objc_claimAutoreleasedReturnValue();

  v10 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v11 = *a3;
  v12 = a3[1];
  if (*a3 != v12)
  {
    do
    {
      v13 = v11;
      if (*(char *)(v11 + 23) < 0)
        v13 = *(_QWORD *)v11;
      v14 = *(void **)(v11 + 24);
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v13);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v9, "objectForKeyedSubscript:", v15);
      v16 = (MLFeatureDescription *)objc_claimAutoreleasedReturnValue();
      if (!v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"No input in model for ", 22);
        v24 = *(char *)(v11 + 23);
        if (v24 >= 0)
          v25 = v11;
        else
          v25 = *(_QWORD *)v11;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v11 + 23);
        else
          v26 = *(_QWORD *)(v11 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
      }
      TensorData = (kaldi::quasar::CoreMLTensorData *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a2, v14, a4);
      kaldi::quasar::CoreMLTensorData::GetFeatureValue(TensorData, v16);
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v10, "setObject:forKey:", v18, v15);

      v11 += 32;
    }
    while (v11 != v12);
  }
  kaldi::quasar::CoreMLNetworkPlanObjCData::FillBlankInputs(*a1, v10);
  v31 = 0;
  v19 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E900]), "initWithDictionary:error:", v10, &v31);
  v20 = v31;
  v21 = v20;
  if (!v19)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"CoreML feature provider creation failed: ", 41);
    objc_msgSend(v21, "description");
    v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v29 = (const char *)objc_msgSend(v28, "UTF8String");
    v30 = strlen(v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }

  return v19;
}

void sub_1ADF91264()
{
  void *v0;

  JUMPOUT(0x1ADF91278);
}

void kaldi::quasar::RunWithProvider(void *a1, void *a2, void *a3, uint64_t *a4, uint64_t a5)
{
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  MLFeatureValue *v23;
  kaldi::quasar::CoreMLTensorData *v24;
  unint64_t v25;
  kaldi::quasar::CoreMLTensorData **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  kaldi::quasar::CoreMLTensorData **v33;
  char *v34;
  char *v35;
  char *v36;
  kaldi::quasar::CoreMLTensorData *v37;
  int64x2_t v38;
  char *v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  void *v46;
  void *v47;
  id v48;
  const char *v49;
  size_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  void **v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  id v58;
  const char *v59;
  size_t v60;
  uint64_t v61;
  uint64_t i;
  _QWORD *v63;
  id v64;
  const char *v65;
  size_t v66;
  _QWORD *v67;
  void *v68;
  void *v69;
  void *v70;
  void *v71;
  void *v72;
  const char *v73;
  size_t v74;
  id obj;
  id v76;
  void *v77;
  id v78;
  void *v79;
  id v80;
  void *v81;
  void *__p[2];
  unsigned __int8 v83;
  uint64_t v84;
  int64x2_t v85;
  char *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  _QWORD v92[33];
  _BYTE v93[128];
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v77 = v10;
  v78 = a3;
  objc_msgSend(v10, "predictionFromFeatures:options:error:", v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = 0;
  v13 = v11;
  v80 = v9;
  v14 = v12;
  v81 = v13;
  v79 = v14;
  if (!v13)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v92);
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    objc_msgSend(v80, "featureNames");
    obj = (id)objc_claimAutoreleasedReturnValue();
    v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v93, 16);
    if (v52)
    {
      v61 = *(_QWORD *)v89;
      do
      {
        for (i = 0; i != v52; ++i)
        {
          if (*(_QWORD *)v89 != v61)
            objc_enumerationMutation(obj);
          v76 = *(id *)(*((_QWORD *)&v88 + 1) + 8 * i);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)"\n", 1);
          v64 = objc_retainAutorelease(v76);
          v65 = (const char *)objc_msgSend(v64, "UTF8String");
          v66 = strlen(v65);
          v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v65, v66);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" => ", 4);
          objc_msgSend(v80, "featureValueForName:", v64);
          v68 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v68, "multiArrayValue");
          v69 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v69, "shape");
          v70 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v70, "description");
          v71 = (void *)objc_claimAutoreleasedReturnValue();
          v72 = v71;
          if (!v71)
          {
            objc_msgSend(v68, "debugDescription");
            v71 = (void *)objc_claimAutoreleasedReturnValue();
            v10 = v71;
          }
          v73 = (const char *)objc_msgSend(objc_retainAutorelease(v71), "UTF8String");
          v74 = strlen(v73);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v92, (uint64_t)v73, v74);
          if (!v72)

        }
        v52 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v88, v93, 16);
      }
      while (v52);
    }

    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v84);
    v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"CoreML evaluation failed: ", 26);
    std::stringbuf::str();
    if ((v83 & 0x80u) == 0)
      v54 = __p;
    else
      v54 = (void **)__p[0];
    if ((v83 & 0x80u) == 0)
      v55 = v83;
    else
      v55 = (uint64_t)__p[1];
    v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)", ", 2);
    objc_msgSend(v79, "description");
    v58 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v59 = (const char *)objc_msgSend(v58, "UTF8String");
    v60 = strlen(v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v59, v60);

    if ((char)v83 < 0)
      operator delete(__p[0]);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v84);
  }

  v15 = *(char **)a5;
  v16 = *(char **)(a5 + 8);
  while (v16 != v15)
  {
    v18 = *((_QWORD *)v16 - 1);
    v16 -= 8;
    v17 = v18;
    *(_QWORD *)v16 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  }
  *(_QWORD *)(a5 + 8) = v15;
  std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve((char **)a5, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  v20 = *a4;
  v19 = a4[1];
  if (*a4 != v19)
  {
    do
    {
      v21 = v20;
      if (*(char *)(v20 + 23) < 0)
        v21 = *(_QWORD *)v20;
      objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v21);
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v81, "featureValueForName:", v22);
      v23 = (MLFeatureValue *)objc_claimAutoreleasedReturnValue();
      if (!v23)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v84);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v84, (uint64_t)"Got nothing for needed output ", 30);
        v41 = *(char *)(v20 + 23);
        if (v41 >= 0)
          v42 = v20;
        else
          v42 = *(_QWORD *)v20;
        if (v41 >= 0)
          v43 = *(unsigned __int8 *)(v20 + 23);
        else
          v43 = *(_QWORD *)(v20 + 8);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
        v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" in [", 5);
        objc_msgSend(v81, "featureNames");
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v46, "allObjects");
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "componentsJoinedByString:", CFSTR(", "));
        v48 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v49 = (const char *)objc_msgSend(v48, "UTF8String");
        v50 = strlen(v49);
        v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)v49, v50);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)"]", 1);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v84);
      }
      v24 = (kaldi::quasar::CoreMLTensorData *)operator new();
      kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v24, v23);
      v26 = *(kaldi::quasar::CoreMLTensorData ***)(a5 + 8);
      v25 = *(_QWORD *)(a5 + 16);
      if ((unint64_t)v26 >= v25)
      {
        v28 = ((uint64_t)v26 - *(_QWORD *)a5) >> 3;
        if ((unint64_t)(v28 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v29 = v25 - *(_QWORD *)a5;
        v30 = v29 >> 2;
        if (v29 >> 2 <= (unint64_t)(v28 + 1))
          v30 = v28 + 1;
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
          v31 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v31 = v30;
        v87 = a5 + 16;
        if (v31)
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v31);
        else
          v32 = 0;
        v33 = (kaldi::quasar::CoreMLTensorData **)&v32[8 * v28];
        v34 = &v32[8 * v31];
        v86 = v34;
        *v33 = v24;
        v27 = v33 + 1;
        v85.i64[1] = (uint64_t)(v33 + 1);
        v36 = *(char **)a5;
        v35 = *(char **)(a5 + 8);
        if (v35 == *(char **)a5)
        {
          v38 = vdupq_n_s64((unint64_t)v35);
        }
        else
        {
          do
          {
            v37 = (kaldi::quasar::CoreMLTensorData *)*((_QWORD *)v35 - 1);
            v35 -= 8;
            *(_QWORD *)v35 = 0;
            *--v33 = v37;
          }
          while (v35 != v36);
          v38 = *(int64x2_t *)a5;
          v27 = (_QWORD *)v85.i64[1];
          v34 = v86;
        }
        *(_QWORD *)a5 = v33;
        *(_QWORD *)(a5 + 8) = v27;
        v85 = v38;
        v39 = *(char **)(a5 + 16);
        *(_QWORD *)(a5 + 16) = v34;
        v86 = v39;
        v84 = v38.i64[0];
        std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v84);
      }
      else
      {
        *v26 = v24;
        v27 = v26 + 1;
      }
      *(_QWORD *)(a5 + 8) = v27;
      kaldi::quasar::ComputeEngineBufferItf::SetName(*(v27 - 1), (const std::string *)v20);

      v20 += 24;
    }
    while (v20 != v19);
  }

}

void sub_1ADF91990()
{
  JUMPOUT(0x1ADF919C4);
}

void sub_1ADF9199C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  MEMORY[0x1AF44D190](v0, 0x1093C407E1975CCLL);

  JUMPOUT(0x1ADF919F8);
}

void kaldi::quasar::CoreMLNetworkPlan::RunBatch(uint64_t a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, uint64_t *a5)
{
  void *v8;
  uint64_t v9;
  void **v10;
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t *i;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  void *v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  unint64_t j;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  MLFeatureValue *v37;
  uint64_t v38;
  kaldi::quasar::CoreMLTensorData *v39;
  unint64_t v40;
  unint64_t v41;
  kaldi::quasar::CoreMLTensorData **v42;
  kaldi::quasar::CoreMLTensorData **v43;
  unint64_t v44;
  char **v45;
  _QWORD *v46;
  void ***v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  kaldi::quasar::CoreMLTensorData **v53;
  char *v54;
  void **v55;
  void **v56;
  kaldi::quasar::CoreMLTensorData *v57;
  void **v58;
  char *v59;
  _QWORD *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  void *v66;
  void *v67;
  id v68;
  const char *v69;
  size_t v70;
  _QWORD *v71;
  _QWORD *v72;
  id v73;
  const char *v74;
  size_t v75;
  _QWORD *v76;
  _QWORD *v77;
  id v78;
  const char *v79;
  size_t v80;
  void *v81;
  id v82;
  unint64_t v83;
  id v84;
  void *v85;
  void *v87;
  id v88;
  int64x2_t v89;
  _QWORD v90[2];
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  char *v94[3];
  char **v95;
  int64x2_t v96;
  char *v97;
  _QWORD *v98;

  if (*a4 != a4[1])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v95, "Can't deal with this yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
  }
  v82 = **(id **)(a1 + 104);
  memset(v94, 0, sizeof(v94));
  kaldi::quasar::CoreMLNetworkPlanObjCData::MakeBatchProvider(*(id **)(a1 + 104), a1, a2, v94);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = *a5;
  v10 = (void **)a5[1];
  while (v10 != (void **)v9)
  {
    v10 -= 3;
    v95 = (char **)v10;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
  }
  a5[1] = v9;
  std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::reserve(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  v85 = v8;
  if (objc_msgSend(v8, "count") == 1)
  {
    objc_msgSend(v8, "featuresAtIndex:", 0);
    v11 = (id)objc_claimAutoreleasedReturnValue();
    v92 = 0;
    v93 = 0;
    v91 = 0;
    v12 = v11;
    kaldi::quasar::RunWithProvider(v11, v82, *(void **)(*(_QWORD *)(a1 + 104) + 8), a3, (uint64_t)&v91);
    v13 = v91;
    for (i = v92; v13 != i; v11 = v12)
    {
      v89 = 0uLL;
      v90[0] = 0;
      v98 = v90;
      v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v90, 1uLL);
      v17 = (char *)&v15[v16];
      v97 = v17;
      v18 = *v13;
      *v13 = 0;
      *v15 = v18;
      v19 = v15 + 1;
      v96.i64[1] = (uint64_t)(v15 + 1);
      v20 = (_QWORD *)v89.i64[1];
      v21 = (_QWORD *)v89.i64[0];
      if (v89.i64[1] == v89.i64[0])
      {
        v23 = vdupq_n_s64(v89.u64[1]);
      }
      else
      {
        do
        {
          v22 = *--v20;
          *v20 = 0;
          *--v15 = v22;
        }
        while (v20 != v21);
        v23 = v89;
        v19 = (_QWORD *)v96.i64[1];
        v17 = v97;
      }
      v89.i64[0] = (uint64_t)v15;
      v89.i64[1] = (uint64_t)v19;
      v96 = v23;
      v24 = (char *)v90[0];
      v90[0] = v17;
      v97 = v24;
      v95 = (char **)v23.i64[0];
      std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v95);
      v89.i64[1] = (uint64_t)v19;
      std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::emplace_back<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>(a5, (uint64_t)&v89);
      v95 = (char **)&v89;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
      ++v13;
    }
    v95 = (char **)&v91;
    std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
    v25 = 0;
  }
  else
  {
    v26 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8);
    v88 = 0;
    objc_msgSend(v82, "predictionsFromBatch:options:error:", v8, v26, &v88);
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    v28 = v88;
    v11 = v27;
    v29 = v8;
    v30 = v28;
    v84 = v11;
    v81 = v30;
    if (!v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
      v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"CoreML batch evaluation failed: ", 32);
      objc_msgSend(v29, "description");
      v73 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v74 = (const char *)objc_msgSend(v73, "UTF8String");
      v75 = strlen(v74);
      v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)v74, v75);
      v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)", ", 2);
      objc_msgSend(v81, "description");
      v78 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v79 = (const char *)objc_msgSend(v78, "UTF8String");
      v80 = strlen(v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v79, v80);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
    }

    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    for (j = 0; j < objc_msgSend(v11, "count", v81); j = v83 + 1)
    {
      v83 = j;
      objc_msgSend(v11, "featuresAtIndex:", j);
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      v32 = *a3;
      if (a3[1] != *a3)
      {
        v33 = 0;
        do
        {
          v34 = v32 + 24 * v33;
          v35 = v34;
          if (*(char *)(v34 + 23) < 0)
            v35 = *(_QWORD *)v34;
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v35);
          v36 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v87, "featureValueForName:", v36);
          v37 = (MLFeatureValue *)objc_claimAutoreleasedReturnValue();
          if (!v37)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v95);
            v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v95, (uint64_t)"Got nothing for needed output ", 30);
            v61 = *(char *)(v34 + 23);
            if (v61 >= 0)
              v62 = v34;
            else
              v62 = *(_QWORD *)v34;
            if (v61 >= 0)
              v63 = *(unsigned __int8 *)(v34 + 23);
            else
              v63 = *(_QWORD *)(v34 + 8);
            v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, v62, v63);
            v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)" in [", 5);
            objc_msgSend(v87, "featureNames");
            v66 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v66, "allObjects");
            v67 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v67, "componentsJoinedByString:", CFSTR(", "));
            v68 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v69 = (const char *)objc_msgSend(v68, "UTF8String");
            v70 = strlen(v69);
            v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v69, v70);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"]", 1);

            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v95);
          }
          v38 = *a5;
          if (0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 3) <= v33)
            std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
          v39 = (kaldi::quasar::CoreMLTensorData *)operator new();
          kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v39, v37);
          v40 = v38 + 24 * v33;
          v43 = *(kaldi::quasar::CoreMLTensorData ***)(v40 + 8);
          v41 = v40 + 8;
          v42 = v43;
          v45 = (char **)(v41 + 8);
          v44 = *(_QWORD *)(v41 + 8);
          if ((unint64_t)v43 >= v44)
          {
            v47 = (void ***)(v38 + 24 * v33);
            v48 = ((char *)v42 - (char *)*v47) >> 3;
            if ((unint64_t)(v48 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v49 = v44 - (_QWORD)*v47;
            v50 = v49 >> 2;
            if (v49 >> 2 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8)
              v51 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v98 = (_QWORD *)(v41 + 8);
            if (v51)
              v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v41 + 8, v51);
            else
              v52 = 0;
            v53 = (kaldi::quasar::CoreMLTensorData **)&v52[8 * v48];
            v54 = &v52[8 * v51];
            v97 = v54;
            *v53 = v39;
            v46 = v53 + 1;
            v96.i64[1] = (uint64_t)(v53 + 1);
            v55 = *(void ***)v41;
            v56 = *v47;
            if (*(void ***)v41 == *v47)
            {
              v58 = *(void ***)v41;
            }
            else
            {
              do
              {
                v57 = (kaldi::quasar::CoreMLTensorData *)*--v55;
                *v55 = 0;
                *--v53 = v57;
              }
              while (v55 != v56);
              v58 = *v47;
              v55 = *(void ***)v41;
              v46 = (_QWORD *)v96.i64[1];
              v54 = v97;
            }
            *v47 = (void **)v53;
            v96.i64[0] = (uint64_t)v58;
            *(_QWORD *)v41 = v46;
            v96.i64[1] = (uint64_t)v55;
            v59 = *v45;
            *v45 = v54;
            v97 = v59;
            v95 = (char **)v58;
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v95);
          }
          else
          {
            *v42 = v39;
            v46 = v42 + 1;
          }
          *(_QWORD *)v41 = v46;
          v11 = v84;
          kaldi::quasar::ComputeEngineBufferItf::SetName(*(v46 - 1), (const std::string *)v34);

          ++v33;
          v32 = *a3;
          v8 = v85;
        }
        while (v33 < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      }

    }
    v25 = v81;
  }

  v95 = v94;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);

}

void sub_1ADF9214C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  uint64_t v10;

  v9 = &v10;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v9);

  _Unwind_Resume(a1);
}

void sub_1ADF92178()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x1093C407E1975CCLL);
  JUMPOUT(0x1ADF92194);
}

id kaldi::quasar::CoreMLNetworkPlanObjCData::MakeBatchProvider(id *a1, uint64_t a2, uint64_t *a3, char **a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  MLFeatureDescription *v19;
  uint64_t i;
  kaldi::quasar::CoreMLTensorData *TensorData;
  void *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t j;
  uint64_t v29;
  id v30;
  void *v31;
  id v32;
  void *v33;
  id v34;
  _QWORD *v36;
  id v37;
  const char *v38;
  size_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  unint64_t v48;
  id v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[34];
  _BYTE v55[128];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  if (*a3 == a3[1])
  {
    v34 = objc_alloc(MEMORY[0x1E0C9E8E8]);
    v33 = (void *)objc_msgSend(v34, "initWithFeatureProviderArray:", MEMORY[0x1E0C9AA60]);
  }
  else
  {
    v10 = *(_QWORD *)(v4 + 24);
    v9 = *(_QWORD *)(v4 + 32);
    v11 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v45 = v10;
    v46 = v9;
    v48 = (v9 - v10) >> 3;
    if (v9 != v10)
    {
      if (v48 <= 1)
        v12 = 1;
      else
        v12 = (v9 - v10) >> 3;
      do
      {
        v13 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        objc_msgSend(v11, "addObject:", v13);

        --v12;
      }
      while (v12);
    }
    objc_msgSend(*a1, "modelDescription");
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v14, "inputDescriptionsByName");
    v47 = (void *)objc_claimAutoreleasedReturnValue();

    v15 = *a3;
    v44 = a3[1];
    if (*a3 != v44)
    {
      if (v48 <= 1)
        v16 = 1;
      else
        v16 = v48;
      do
      {
        v17 = v15;
        if (*(char *)(v15 + 23) < 0)
          v17 = *(_QWORD *)v15;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v17, v44);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v47, "objectForKeyedSubscript:", v18);
        v19 = (MLFeatureDescription *)objc_claimAutoreleasedReturnValue();
        if (!v19)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
          v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"No input in model for ", 22);
          v41 = *(char *)(v15 + 23);
          if (v41 >= 0)
            v42 = v15;
          else
            v42 = *(_QWORD *)v15;
          if (v41 >= 0)
            v43 = *(unsigned __int8 *)(v15 + 23);
          else
            v43 = *(_QWORD *)(v15 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v42, v43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
        }
        if (v48 != (uint64_t)(*(_QWORD *)(v15 + 32) - *(_QWORD *)(v15 + 24)) >> 3)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"data_batch.size() == batch_count", 32);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
        }
        if (v46 != v45)
        {
          for (i = 0; i != v16; ++i)
          {
            TensorData = (kaldi::quasar::CoreMLTensorData *)kaldi::quasar::CoreMLNetworkPlan::GetOrMakeTensorData(a2, *(void **)(*(_QWORD *)(v15 + 24) + 8 * i), a4);
            kaldi::quasar::CoreMLTensorData::GetFeatureValue(TensorData, v19);
            v22 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v11, "objectAtIndexedSubscript:", i);
            v23 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v23, "setObject:forKey:", v22, v18);

          }
        }

        v15 += 48;
      }
      while (v15 != v44);
    }
    v24 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v25 = v11;
    v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
    if (v26)
    {
      v27 = *(_QWORD *)v51;
      do
      {
        for (j = 0; j != v26; ++j)
        {
          if (*(_QWORD *)v51 != v27)
            objc_enumerationMutation(v25);
          v29 = *(_QWORD *)(*((_QWORD *)&v50 + 1) + 8 * j);
          v30 = objc_alloc(MEMORY[0x1E0C9E900]);
          v49 = 0;
          v31 = (void *)objc_msgSend(v30, "initWithDictionary:error:", v29, &v49);
          v32 = v49;
          if (!v31)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
            v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"CoreML feature provider creation failed: ", 41);
            objc_msgSend(v32, "description");
            v37 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
            v38 = (const char *)objc_msgSend(v37, "UTF8String");
            v39 = strlen(v38);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v38, v39);

            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v54);
          }
          objc_msgSend(v24, "addObject:", v31);

        }
        v26 = objc_msgSend(v25, "countByEnumeratingWithState:objects:count:", &v50, v55, 16);
      }
      while (v26);
    }

    v33 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E8E8]), "initWithFeatureProviderArray:", v24);
  }
  return v33;
}

void sub_1ADF9265C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

kaldi::quasar::CoreMLTensorData *kaldi::quasar::CoreMLTensorData::Copy@<X0>(kaldi::quasar::CoreMLTensorData *this@<X0>, kaldi::quasar::CoreMLTensorData **a2@<X8>)
{
  kaldi::quasar::CoreMLTensorData *v4;
  kaldi::quasar::CoreMLTensorData *result;

  v4 = (kaldi::quasar::CoreMLTensorData *)operator new();
  result = kaldi::quasar::CoreMLTensorData::CoreMLTensorData(v4, this);
  *a2 = v4;
  return result;
}

void sub_1ADF92778(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1093C407E1975CCLL);
  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToMatrix(uint64_t a1, int32x2_t *a2)
{
  void *v4;

  v4 = (void *)MEMORY[0x1AF44DFA0]();
  kaldi::quasar::MLMultiArrayToMatrix(*(void **)(a1 + 32), a2);
  objc_autoreleasePoolPop(v4);
}

{
  void *v4;

  v4 = (void *)MEMORY[0x1AF44DFA0]();
  kaldi::quasar::MLMultiArrayToMatrix(*(void **)(a1 + 32), a2 + 1);
  objc_autoreleasePoolPop(v4);
}

void kaldi::quasar::CoreMLTensorData::CopyToVector(uint64_t a1, void *a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  id v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  id v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  const char *v25;
  size_t v26;
  _QWORD *v27;
  id v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  id v32;
  const char *v33;
  size_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44;
  _BYTE v45[128];
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = (void *)MEMORY[0x1AF44DFA0]();
  v5 = *(id *)(a1 + 32);
  objc_msgSend(v5, "shape");
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v6 = (id)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
  if (v7)
  {
    v8 = *(_QWORD *)v41;
    v9 = 1;
    do
    {
      for (i = 0; i != v7; ++i)
      {
        if (*(_QWORD *)v41 != v8)
          objc_enumerationMutation(v6);
        v11 = *(id *)(*((_QWORD *)&v40 + 1) + 8 * i);
        v12 = objc_msgSend(v11, "unsignedIntegerValue");

        v9 *= v12;
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
    }
    while (v7);
  }
  else
  {
    v9 = 1;
  }

  if ((unint64_t)objc_msgSend(v6, "count") >= 2)
  {
    v13 = objc_alloc(MEMORY[0x1E0C9E978]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v9);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v44 = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v44, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v39 = 0;
    v16 = objc_msgSend(v13, "initWithShape:dataType:error:", v15, 65568, &v39);
    v17 = v39;

    if (!v16)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"could not make temporary array: ", 32);
      objc_msgSend(v17, "description");
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v25 = (const char *)objc_msgSend(v24, "UTF8String");
      v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }
    v35 = v17;
    v18 = objc_msgSend(v5, "vectorizeIntoMultiArray:storageOrder:error:", v16, 0, &v35);
    v19 = v35;

    if ((v18 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"vectorizeIntoMultiArray: failed: ", 33);
      objc_msgSend(v19, "description");
      v32 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v33 = (const char *)objc_msgSend(v32, "UTF8String");
      v34 = strlen(v33);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v33, v34);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }

    v5 = (id)v16;
  }
  v20 = objc_msgSend(v5, "dataType");
  if (v20 == 65600)
  {
    kaldi::CuVector<float>::Resize((uint64_t)a2, v9, 0);
    v22 = objc_msgSend(objc_retainAutorelease(v5), "dataPointer");
    v38 = 0;
    v36 = v22;
    v37 = v9;
    kaldi::CuVectorBase<float>::CopyFromVec<double>((uint64_t)a2, (uint64_t)&v36);
  }
  else
  {
    if (v20 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v36);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v36, (uint64_t)"Unexpected output from CoreML: ", 31);
      objc_msgSend(v5, "description");
      v28 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v29 = (const char *)objc_msgSend(v28, "UTF8String");
      v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v29, v30);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v36);
    }
    v21 = objc_msgSend(objc_retainAutorelease(v5), "dataPointer");
    v38 = 0;
    v36 = v21;
    v37 = v9;
    kaldi::CuVector<float>::Resize((uint64_t)a2, v9, 1);
    kaldi::CuVectorBase<float>::CopyFromVec<float>(a2, (uint64_t)&v36);
  }

  objc_autoreleasePoolPop(v4);
}

void sub_1ADF92C18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToStdVector(uint64_t a1, std::vector<unsigned int> *a2)
{
  void *v4;
  unsigned int v5;
  unsigned int v6;
  std::vector<unsigned int>::pointer end;
  unsigned int *value;
  unsigned int *v9;
  int64_t v10;
  std::vector<unsigned int>::pointer begin;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t i;
  void *v18;
  unsigned int v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int v22;

  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    a2->__end_ = a2->__begin_;
    v5 = objc_msgSend(v4, "int64Value");
    v6 = v5;
    end = a2->__end_;
    value = a2->__end_cap_.__value_;
    if (end >= value)
    {
      begin = a2->__begin_;
      v12 = end - a2->__begin_;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = (char *)value - (char *)begin;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a2->__end_cap_, v15);
        begin = a2->__begin_;
        end = a2->__end_;
      }
      else
      {
        v16 = 0;
      }
      v20 = (unsigned int *)&v16[4 * v12];
      v21 = (unsigned int *)&v16[4 * v15];
      *v20 = v6;
      v9 = v20 + 1;
      while (end != begin)
      {
        v22 = *--end;
        *--v20 = v22;
      }
      a2->__begin_ = v20;
      a2->__end_ = v9;
      a2->__end_cap_.__value_ = v21;
      if (begin)
        operator delete(begin);
    }
    else
    {
      *end = v5;
      v9 = end + 1;
    }
    a2->__end_ = v9;
  }
  else
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "count");
    std::vector<int>::resize(a2, v10);
    if (objc_msgSend(*(id *)(a1 + 32), "dataType") == 131104)
    {
      memcpy(a2->__begin_, (const void *)objc_msgSend(*(id *)(a1 + 32), "dataPointer"), (char *)a2->__end_ - (char *)a2->__begin_);
    }
    else if (v10 >= 1)
    {
      for (i = 0; i != v10; ++i)
      {
        objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = objc_msgSend(v18, "intValue");
        if (i >= a2->__end_ - a2->__begin_)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        a2->__begin_[i] = v19;

      }
    }
  }
}

void sub_1ADF92E74(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::CopyToStdVector(uint64_t a1, uint64_t a2)
{
  void *v4;
  double v5;
  float v6;
  float *v7;
  unint64_t v8;
  float *v9;
  int64_t v10;
  float *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t i;
  void *v18;
  int v19;
  float *v20;
  char *v21;
  int v22;

  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    objc_msgSend(v4, "doubleValue");
    v6 = v5;
    v7 = *(float **)(a2 + 8);
    v8 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v7 >= v8)
    {
      v11 = *(float **)a2;
      v12 = ((uint64_t)v7 - *(_QWORD *)a2) >> 2;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 1 > v13)
        v13 = v14 >> 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v15 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (v15)
      {
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v15);
        v11 = *(float **)a2;
        v7 = *(float **)(a2 + 8);
      }
      else
      {
        v16 = 0;
      }
      v20 = (float *)&v16[4 * v12];
      v21 = &v16[4 * v15];
      *v20 = v6;
      v9 = v20 + 1;
      while (v7 != v11)
      {
        v22 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v20-- - 1) = v22;
      }
      *(_QWORD *)a2 = v20;
      *(_QWORD *)(a2 + 8) = v9;
      *(_QWORD *)(a2 + 16) = v21;
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v7 = v6;
      v9 = v7 + 1;
    }
    *(_QWORD *)(a2 + 8) = v9;
  }
  else
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "count");
    if (objc_msgSend(*(id *)(a1 + 32), "dataType") == 65568)
    {
      std::vector<float>::resize(a2, v10);
      memcpy(*(void **)a2, (const void *)objc_msgSend(*(id *)(a1 + 32), "dataPointer"), *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);
    }
    else if (v10 >= 1)
    {
      for (i = 0; i != v10; ++i)
      {
        objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", i);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v18, "floatValue");
        if (i >= (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        *(_DWORD *)(*(_QWORD *)a2 + 4 * i) = v19;

      }
    }
  }
}

void sub_1ADF93044(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc, int a3, int a4, int a5)
{
  id *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[34];

  if (objc_msgSend(v9[4], "dataType") != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v10 = objc_msgSend(v9[4], "dataPointer");
  v11 = (*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(_QWORD *)this + 120))(this);
  return memcpy((void *)(v11 + 4 * a5), (const void *)(v10 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, int *a2, unsigned int a3, int a4)
{
  uint64_t v7;
  float result;
  float *v9;
  uint64_t v10;
  int v11;

  v7 = (*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(_QWORD *)this + 120))(this);
  if (a3)
  {
    v9 = (float *)(v7 + 4 * a4);
    v10 = a3;
    do
    {
      v11 = *a2++;
      result = (float)v11;
      *v9++ = (float)v11;
      --v10;
    }
    while (v10);
  }
  return result;
}

void *kaldi::quasar::CoreMLTensorData::FlatRangeCopy(kaldi::quasar::CoreMLTensorData *this, const float *a2, unsigned int a3, int a4)
{
  void *v6;

  v6 = (void *)((*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(_QWORD *)this + 120))(this) + 4 * a4);
  return memcpy(v6, a2, 4 * a3);
}

float kaldi::quasar::CoreMLTensorData::AssignScalar(kaldi::quasar::CoreMLTensorData *this, int a2, int a3)
{
  uint64_t v5;
  void *v6;
  float result;
  uint64_t v9;

  if (*((_QWORD *)this + 5))
  {
    objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithInt64:", a2);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v5;

  }
  else
  {
    v9 = (*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(_QWORD *)this + 120))(this);
    result = (float)a2;
    *(float *)(v9 + 4 * a3) = (float)a2;
  }
  return result;
}

void kaldi::quasar::CoreMLTensorData::AssignScalar(kaldi::quasar::CoreMLTensorData *this, float a2, int a3)
{
  uint64_t v4;
  void *v5;

  if (*((_QWORD *)this + 5))
  {
    objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithDouble:", a2);
    v4 = objc_claimAutoreleasedReturnValue();
    v5 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v4;

  }
  else
  {
    *(float *)((*(uint64_t (**)(kaldi::quasar::CoreMLTensorData *))(*(_QWORD *)this + 120))(this) + 4 * a3) = a2;
  }
}

float kaldi::quasar::CoreMLTensorData::GetFloatScalar(kaldi::quasar::CoreMLTensorData *this, int a2)
{
  void *v3;
  double v4;
  _QWORD v7[34];

  v3 = (void *)*((_QWORD *)this + 5);
  if (v3)
  {
    objc_msgSend(v3, "doubleValue");
    return v4;
  }
  else
  {
    if (objc_msgSend(*((id *)this + 4), "dataType") != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Asked for float32 of a non-float32 buffer");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
    }
    return *(float *)(objc_msgSend(*((id *)this + 4), "dataPointer") + 4 * a2);
  }
}

uint64_t kaldi::quasar::CoreMLTensorData::GetWritableDataFloat(id *this)
{
  _QWORD v3[34];

  if (objc_msgSend(this[4], "dataType") != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return objc_msgSend(this[4], "dataPointer");
}

uint64_t kaldi::quasar::CoreMLTensorData::GetDataFloat(id *this)
{
  _QWORD v3[34];

  if (objc_msgSend(this[4], "dataType") != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "Asked for float32 of a non-float32 buffer");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return objc_msgSend(this[4], "dataPointer");
}

uint64_t kaldi::quasar::CoreMLTensorData::GetNumDims(kaldi::quasar::CoreMLTensorData *this)
{
  uint64_t v1;
  void *v2;

  if (*((_QWORD *)this + 5))
    return 0;
  objc_msgSend(*((id *)this + 4), "shape");
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  v1 = objc_msgSend(v2, "count");

  return v1;
}

void sub_1ADF93468(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::CoreMLTensorData::GetDimSize(id *this, int a2)
{
  void *v3;
  void *v4;
  uint64_t v5;

  objc_msgSend(this[4], "shape");
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "objectAtIndexedSubscript:", a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "integerValue");

  return v5;
}

void sub_1ADF934D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLTensorData::Reshape()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig(kaldi::quasar::CoreMLNetworkConfig *this)
{
  kaldi::quasar::CoreMLNetworkConfig::~CoreMLNetworkConfig(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = &off_1E5D337C8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(this);
}

id kaldi::quasar::CoreMLTensorData::GetFeatureValue(kaldi::quasar::CoreMLTensorData *this, MLFeatureDescription *a2)
{
  MLFeatureDescription *v3;
  MLFeatureDescription *v4;
  uint64_t v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  _QWORD *v16;
  id v17;
  const char *v18;
  size_t v19;
  _QWORD *v20;
  id v21;
  const char *v22;
  size_t v23;
  _QWORD v24[34];
  id v25;

  v3 = a2;
  v4 = v3;
  if (v3)
  {
    v5 = -[MLFeatureDescription type](v3, "type");
    if ((unint64_t)(v5 - 1) < 2)
    {
      if (*((_QWORD *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"t_ == nil", 9);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
      }
      v6 = *((id *)this + 5);
LABEL_15:
      v14 = v6;
      goto LABEL_18;
    }
    if (v5 != 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Unsupported CoreML input type ", 30);
      -[MLFeatureDescription description](v4, "description");
      v21 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v22 = (const char *)objc_msgSend(v21, "UTF8String");
      v23 = strlen(v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v22, v23);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
  }
  if (!*((_QWORD *)this + 5))
  {
    if (!*((_QWORD *)this + 4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"t_ != nil", 9);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithMultiArray:");
    v6 = (id)objc_claimAutoreleasedReturnValue();
    goto LABEL_15;
  }
  -[MLFeatureDescription multiArrayConstraint](v4, "multiArrayConstraint");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v7, "shape");
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!objc_msgSend(v8, "count"))
  {

    v8 = &unk_1E5D5BF48;
  }
  v25 = 0;
  v9 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v8, 65568, &v25);
  v10 = v25;
  if (!v9)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Could not make temporary MultiArray: ", 37);
    objc_msgSend(v10, "description");
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const char *)objc_msgSend(v17, "UTF8String");
    v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  v11 = objc_msgSend(*((id *)this + 5), "type");
  if (v11 == 1)
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithLongLong:", objc_msgSend(*((id *)this + 5), "int64Value"));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fillWithNumber:", v13);
  }
  else
  {
    if (v11 != 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"unsupported MLFeatureValue type", 31);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    v12 = (void *)MEMORY[0x1E0CB37E8];
    objc_msgSend(*((id *)this + 5), "doubleValue");
    objc_msgSend(v12, "numberWithDouble:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v9, "fillWithNumber:", v13);
  }

  objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithMultiArray:", v9);
  v14 = (void *)objc_claimAutoreleasedReturnValue();

LABEL_18:
  return v14;
}

void sub_1ADF93908(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void kaldi::quasar::CoreMLNetworkPlanObjCData::FillBlankInputs(void *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  id v6;
  _QWORD v7[4];
  id v8;

  v3 = a2;
  objc_msgSend(a1, "modelDescription");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "inputDescriptionsByName");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = ___ZN5kaldi6quasar25CoreMLNetworkPlanObjCData15FillBlankInputsEP7MLModelP19NSMutableDictionaryIP8NSStringP14MLFeatureValueE_block_invoke;
  v7[3] = &unk_1E5D49050;
  v6 = v3;
  v8 = v6;
  objc_msgSend(v5, "enumerateKeysAndObjectsUsingBlock:", v7);

}

void sub_1ADF939C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZN5kaldi6quasar25CoreMLNetworkPlanObjCData15FillBlankInputsEP7MLModelP19NSMutableDictionaryIP8NSStringP14MLFeatureValueE_block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  _QWORD *v17;
  id v18;
  const char *v19;
  size_t v20;
  id v21;
  _QWORD v22[34];

  v5 = a2;
  v6 = a3;
  if ((objc_msgSend(v6, "isOptional") & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "objectForKey:", v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v7)
    {
      if (objc_msgSend(v6, "type") != 5)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unsupported CoreML required non-MultiArray input: ", 50);
        v15 = (const char *)objc_msgSend(objc_retainAutorelease(v5), "UTF8String");
        v16 = strlen(v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
      objc_msgSend(v6, "multiArrayConstraint");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v8, "shape");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v21 = 0;
      v10 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v9, 65568, &v21);
      v11 = v21;
      if (!v10)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Could not build blank array: ", 29);
        objc_msgSend(v11, "debugDescription");
        v18 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v19 = (const char *)objc_msgSend(v18, "UTF8String");
        v20 = strlen(v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
      objc_msgSend(v10, "fillWithNumber:", &unk_1E5D5BFB8);
      v12 = *(void **)(a1 + 32);
      objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithMultiArray:", v10);
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v12, "setObject:forKey:", v13, v5);

    }
  }

}

void sub_1ADF93BF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

kaldi::quasar::CoreMLTensorData *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(kaldi::quasar::CoreMLTensorData *this, const kaldi::quasar::CoreMLTensorData *a2)
{
  _QWORD *v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  _QWORD *v19;
  id v20;
  const char *v21;
  size_t v22;
  _QWORD *v23;
  id v24;
  const char *v25;
  size_t v26;
  id v27;
  _QWORD v28[34];
  id v29;

  v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  *v4 = &off_1E5D33438;
  v4[4] = 0;
  v5 = (void **)(v4 + 4);
  v4[5] = 0;
  v6 = (void *)*((_QWORD *)a2 + 5);
  if (v6)
  {
    v7 = objc_msgSend(v6, "copy");
    v8 = (void *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v7;

    v9 = 0;
  }
  else
  {
    v10 = objc_alloc(MEMORY[0x1E0C9E978]);
    objc_msgSend(*((id *)a2 + 4), "shape");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    v29 = 0;
    v12 = objc_msgSend(v10, "initWithShape:dataType:error:", v11, 65568, &v29);
    v13 = v29;
    v14 = *v5;
    *v5 = (void *)v12;

    v15 = *v5;
    if (!*v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"CoreMLTensorData copy failed: ", 30);
      objc_msgSend(v13, "description");
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = (const char *)objc_msgSend(v20, "UTF8String");
      v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
    v16 = (void *)*((_QWORD *)a2 + 4);
    v27 = v13;
    v17 = objc_msgSend(v16, "copyIntoMultiArray:error:", v15, &v27);
    v9 = v27;

    if ((v17 & 1) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Copy failed: ", 13);
      objc_msgSend(v9, "description");
      v24 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v25 = (const char *)objc_msgSend(v24, "UTF8String");
      v26 = strlen(v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)v25, v26);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
    }
  }

  return this;
}

void sub_1ADF93E44(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;

  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::MLMultiArrayToMatrix(void *a1, int32x2_t *a2)
{
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  id v16;
  const char *v17;
  size_t v18;
  _QWORD *v19;
  id v20;
  const char *v21;
  size_t v22;
  _QWORD v23[34];

  v3 = a1;
  objc_msgSend(v3, "shape");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v3, "strides");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = objc_msgSend(v4, "count");
  if (v6 == 2)
  {
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    v11 = objc_msgSend(v12, "intValue");

    objc_msgSend(v4, "objectAtIndexedSubscript:", 1);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v13, "intValue");

    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "longValue");
  }
  else
  {
    if (v6 != 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected output shape from CoreML: ", 37);
      objc_msgSend(v4, "description");
      v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v17 = (const char *)objc_msgSend(v16, "UTF8String");
      v18 = strlen(v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    objc_msgSend(v4, "objectAtIndexedSubscript:", 0);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = objc_msgSend(v7, "intValue");

    objc_msgSend(v5, "objectAtIndexedSubscript:", 0);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = objc_msgSend(v9, "longValue");
    v11 = 1;
  }

  v14 = objc_msgSend(v3, "dataType");
  if (v14 == 65600)
  {
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v23, objc_msgSend(objc_retainAutorelease(v3), "dataPointer"), v11, v8, v10);
    kaldi::Matrix<float>::Resize(a2, v11, v8, 0, 0);
    kaldi::MatrixBase<float>::CopyFromMat<double>((uint64_t)a2, (uint64_t)v23, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
  }
  else
  {
    if (v14 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unexpected output from CoreML: ", 31);
      objc_msgSend(v3, "description");
      v20 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v21 = (const char *)objc_msgSend(v20, "UTF8String");
      v22 = strlen(v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v21, v22);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)v23, objc_msgSend(objc_retainAutorelease(v3), "dataPointer"), v11, v8, v10);
    kaldi::Matrix<float>::operator=(a2, (uint64_t)v23);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v23);
  }

}

void sub_1ADF94150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void std::default_delete<kaldi::quasar::CoreMLNetworkPlanObjCData>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (a2)
  {

    JUMPOUT(0x1AF44D190);
  }
}

_QWORD *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(_QWORD *a1, int **a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[34];

  v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v6 = &off_1E5D33438;
  v6[4] = 0;
  v7 = v6 + 4;
  v6[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromStdVector((uint64_t)v6, a2, a3);
  if (!*v7 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromStdVector(uint64_t a1, int **a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id *v10;
  void *v11;
  float *v12;
  int *v13;
  int *v14;
  int v15;
  _QWORD *v16;
  id v17;
  const char *v18;
  size_t v19;
  _QWORD v20[34];
  id v21;
  void *v22;
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v23[0] = &unk_1E5D5BE10;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2[1] - *a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v23[1] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v23, 2);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", a2[1] - *a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v22 = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v22, 1);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;

  v21 = 0;
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v7, 65568, &v21);
  v9 = v21;
  v11 = *(void **)(a1 + 32);
  v10 = (id *)(a1 + 32);
  *v10 = (id)v8;

  if (!*v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CoreMLTensorData create failed: ", 32);
    objc_msgSend(v9, "description");
    v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v18 = (const char *)objc_msgSend(v17, "UTF8String");
    v19 = strlen(v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
  }
  v12 = (float *)objc_msgSend(*v10, "dataPointer");
  v13 = *a2;
  v14 = a2[1];
  while (v13 != v14)
  {
    v15 = *v13++;
    *v12++ = (float)v15;
  }

}

void sub_1ADF944E4(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(_QWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD v9[34];

  v6 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v6 = &off_1E5D33438;
  v6[4] = 0;
  v7 = v6 + 4;
  v6[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromStdVector((uint64_t)v6, a2, a3);
  if (!*v7 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromStdVector(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  id *v10;
  void *v11;
  _QWORD *v12;
  id v13;
  const char *v14;
  size_t v15;
  _QWORD v16[34];
  id v17;
  void *v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v19[0] = &unk_1E5D5BE10;
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v19[1] = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v19, 2);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  else
  {
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    v18 = v5;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v18, 1);
    v6 = objc_claimAutoreleasedReturnValue();
  }
  v7 = (void *)v6;

  v17 = 0;
  v8 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v7, 65568, &v17);
  v9 = v17;
  v11 = *(void **)(a1 + 32);
  v10 = (id *)(a1 + 32);
  *v10 = (id)v8;

  if (!*v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"CoreMLTensorData create failed: ", 32);
    objc_msgSend(v9, "description");
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v14 = (const char *)objc_msgSend(v13, "UTF8String");
    v15 = strlen(v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v14, v15);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  memcpy((void *)objc_msgSend(*v10, "dataPointer"), *(const void **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2);

}

void sub_1ADF947EC(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[34];

  v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v4 = &off_1E5D33438;
  v4[4] = 0;
  v5 = v4 + 4;
  v4[5] = 0;
  kaldi::quasar::CoreMLTensorData::CopyFromMatrix((uint64_t)v4, a2);
  if (!*v5 && !a1[5])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"t_ || fv_", 9);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return a1;
}

void kaldi::quasar::CoreMLTensorData::CopyFromMatrix(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  void *v14;
  _BOOL4 v15;
  void *v16;
  const void *v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  id v25;
  const char *v26;
  size_t v27;
  _QWORD v28[34];
  id v29;
  _QWORD v30[3];

  v30[2] = *MEMORY[0x1E0C80C00];
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", kaldi::MatrixBase<float>::NumRows(a2));
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v30[0] = v4;
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", kaldi::MatrixBase<float>::NumCols(a2));
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v30[1] = v5;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v30, 2);
  v6 = (void *)objc_claimAutoreleasedReturnValue();

  v29 = 0;
  v7 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v6, 65568, &v29);
  v8 = v29;
  v9 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v7;

  v10 = *(void **)(a1 + 32);
  if (!v10)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"CoreMLTensorData create failed: ", 32);
    objc_msgSend(v8, "description");
    v25 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v26 = (const char *)objc_msgSend(v25, "UTF8String");
    v27 = strlen(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v26, v27);

    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  objc_msgSend(v10, "strides");
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v11, "objectAtIndexedSubscript:", 0);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  v13 = objc_msgSend(v12, "intValue");

  if (v13 == fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start(a2)
    && (objc_msgSend(v11, "objectAtIndexedSubscript:", 1),
        v14 = (void *)objc_claimAutoreleasedReturnValue(),
        v15 = objc_msgSend(v14, "intValue") == 1,
        v14,
        v15))
  {
    v16 = (void *)objc_msgSend(*(id *)(a1 + 32), "dataPointer");
    v17 = *(const void **)a2;
    v18 = kaldi::MatrixBase<float>::NumCols(a2);
    v19 = kaldi::MatrixBase<float>::NumRows(a2);
    memcpy(v16, v17, 4 * v19 * v18);
  }
  else
  {
    v20 = 0;
    v21 = 0;
    v22 = 4 * (int)kaldi::MatrixBase<float>::NumCols(a2);
    v23 = 4 * v13;
    while (v21 < (int)kaldi::MatrixBase<float>::NumRows(a2))
    {
      memcpy((void *)(objc_msgSend(*(id *)(a1 + 32), "dataPointer") + v20), (const void *)(*(_QWORD *)a2 + 4 * *(_DWORD *)(a2 + 16) * (int)v21++), v22);
      v20 += v23;
    }
  }

}

void sub_1ADF94B9C(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  id *v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  id v17;
  const char *v18;
  size_t v19;
  _QWORD v20[34];
  id v21;

  v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v4 = &off_1E5D33438;
  v4[4] = 0;
  v5 = (id *)(v4 + 4);
  v4[5] = 0;
  v6 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  v7 = (_QWORD *)*a2;
  v8 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 == v8)
  {
    objc_msgSend(MEMORY[0x1E0C9E920], "featureValueWithDouble:", 0.0);
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = (void *)a1[5];
    a1[5] = v13;

    v11 = 0;
  }
  else
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", *v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v6, "addObject:", v9);

      ++v7;
    }
    while (v7 != v8);
    v21 = 0;
    v10 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E978]), "initWithShape:dataType:error:", v6, 65568, &v21);
    v11 = v21;
    v12 = *v5;
    *v5 = (id)v10;

    if (!*v5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
      v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"CoreMLTensorData copy failed: ", 30);
      objc_msgSend(v11, "description");
      v17 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v18 = (const char *)objc_msgSend(v17, "UTF8String");
      v19 = strlen(v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v18, v19);

      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
    }
    objc_msgSend(*v5, "fillWithNumber:", &unk_1E5D5BE28);
  }

  return a1;
}

void sub_1ADF94DD4(_Unwind_Exception *a1)
{
  void **v1;
  void *v2;
  void *v3;

  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf(v1);
  _Unwind_Resume(a1);
}

kaldi::quasar::CoreMLTensorData *kaldi::quasar::CoreMLTensorData::CoreMLTensorData(kaldi::quasar::CoreMLTensorData *this, MLFeatureValue *a2)
{
  MLFeatureValue *v3;
  unint64_t v4;
  uint64_t v5;
  MLMultiArray *v6;
  _QWORD v8[34];

  v3 = a2;
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(this);
  *(_QWORD *)this = &off_1E5D33438;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  if (!v3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"fv", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  v4 = -[MLFeatureValue type](v3, "type");
  if (v4 >= 3)
  {
    if (v4 != 5)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Unsupported feature type: ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
    }
    -[MLFeatureValue multiArrayValue](v3, "multiArrayValue");
    v6 = (MLMultiArray *)objc_claimAutoreleasedReturnValue();
    kaldi::quasar::CoreMLTensorData::SetFromMultiArray(this, v6);
  }
  else
  {
    v5 = -[MLFeatureValue copy](v3, "copy");
    v6 = (MLMultiArray *)*((_QWORD *)this + 5);
    *((_QWORD *)this + 5) = v5;
  }

  return this;
}

void kaldi::quasar::CoreMLTensorData::SetFromMultiArray(kaldi::quasar::CoreMLTensorData *this, MLMultiArray *a2)
{
  MLMultiArray *v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  MLMultiArray *v12;
  id v13;
  void *v14;
  uint64_t v15;
  void *v16;
  MLMultiArray *v17;
  _QWORD *v18;
  id v19;
  const char *v20;
  size_t v21;
  _QWORD *v22;
  id v23;
  const char *v24;
  size_t v25;
  id v26;
  id v27;
  _QWORD v28[34];

  v4 = a2;
  v5 = (void *)*((_QWORD *)this + 5);
  *((_QWORD *)this + 5) = 0;

  if (!v4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"ma", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  v6 = -[MLMultiArray dataType](v4, "dataType");
  if (v6 > 65599)
  {
    if (v6 == 65600)
    {
      v13 = objc_alloc(MEMORY[0x1E0C9E978]);
      -[MLMultiArray shape](v4, "shape");
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      v27 = 0;
      v15 = objc_msgSend(v13, "initWithShape:dataType:error:", v14, 65568, &v27);
      v10 = v27;
      v16 = (void *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v15;

      if (!*((_QWORD *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not make MLMultiArray: ", 29);
        objc_msgSend(v10, "description");
        v23 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v24 = (const char *)objc_msgSend(v23, "UTF8String");
        v25 = strlen(v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, v25);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
      }
      v17 = objc_retainAutorelease(v4);
      vDSP_vdpsp((const double *)-[MLMultiArray dataPointer](v17, "dataPointer"), 1, (float *)objc_msgSend(*((id *)this + 4), "dataPointer"), 1, -[MLMultiArray count](v17, "count"));
    }
    else
    {
      if (v6 != 131104)
        goto LABEL_15;
      v7 = objc_alloc(MEMORY[0x1E0C9E978]);
      -[MLMultiArray shape](v4, "shape");
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v26 = 0;
      v9 = objc_msgSend(v7, "initWithShape:dataType:error:", v8, 65568, &v26);
      v10 = v26;
      v11 = (void *)*((_QWORD *)this + 4);
      *((_QWORD *)this + 4) = v9;

      if (!*((_QWORD *)this + 4))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not make MLMultiArray: ", 29);
        objc_msgSend(v10, "description");
        v19 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        v20 = (const char *)objc_msgSend(v19, "UTF8String");
        v21 = strlen(v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v20, v21);

        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
      }
      v12 = objc_retainAutorelease(v4);
      vDSP_vflt32((const int *)-[MLMultiArray dataPointer](v12, "dataPointer"), 1, (float *)objc_msgSend(*((id *)this + 4), "dataPointer"), 1, -[MLMultiArray count](v12, "count"));
    }

    goto LABEL_13;
  }
  if (v6 != 65552 && v6 != 65568)
  {
LABEL_15:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"not supported MLMultiArray data type: ", 38);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  objc_storeStrong((id *)this + 4, a2);
LABEL_13:

}

void std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer(&v15);
  }
}

void sub_1ADF95478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D2F390;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F4C8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F4F0;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F4C8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F4F0;
  *(_QWORD *)a1 = &unk_1E5D2F390;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1ADF95674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  v17 = *(_QWORD *)(v10 + 184);
  *(_QWORD *)(v10 + 184) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v4 = *(__n128 *)(a2 + 120);
  *(__n128 *)(a1 + 120) = v4;
  v4.n128_u64[0] = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 136) = v4.n128_u64[0];
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  v4.n128_u32[0] = *(_DWORD *)(a2 + 148);
  *(_DWORD *)(a1 + 148) = v4.n128_u32[0];
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v5 = *(_QWORD *)(a2 + 184);
  if (v5)
  {
    v6 = operator new();
    v4 = kaldi::CuMatrix<float>::CuMatrix(v6, v5, 111);
    v7 = *(_QWORD *)(a1 + 184);
    *(_QWORD *)(a1 + 184) = v6;
    if (!v7)
      goto LABEL_7;
    goto LABEL_6;
  }
  v7 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v7)
LABEL_6:
    (*(void (**)(uint64_t, __n128))(*(_QWORD *)v7 + 24))(v7, v4);
LABEL_7:
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t, __n128))(*(_QWORD *)v11 + 16))(v11, v4);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADF95928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2F4C8;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2F390;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F4F0;
  v3 = (quasar::Bitmap *)(a1 + 96);
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v9 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v9 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1ADF95B74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  BOOL v8;
  int *v9;
  __int128 *v10;
  uint64_t v11;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  BOOL v19;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  float *v54;
  uint64_t v55;
  uint64_t i;
  float v57;
  float v58;
  float v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  __int128 *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  void **v71[2];
  int v72;
  _QWORD v73[2];
  uint64_t v74;
  void *__p;
  void *v76;
  __int128 v77;
  uint64_t v78;
  int v79;
  std::string v80;
  int v81;
  float v82;
  int v83;

  v82 = 2.0;
  v83 = -1073741824;
  v81 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v80);
  v79 = -1;
  v77 = 0uLL;
  v78 = 0;
  v6 = (int *)(a1 + 116);
  v7 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v77);
    if (SHIBYTE(v78) < 0)
    {
      v11 = *((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1) == 10)
      {
        if (*(_QWORD *)v77 == 0x61654D736169423CLL && *(_WORD *)(v77 + 8) == 15982)
        {
LABEL_90:
          v26 = (float *)&v83;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v77 + 1);
      }
      else if (*((_QWORD *)&v77 + 1) == 13
             && *(_QWORD *)v77 == 0x74536D617261503CLL
             && *(_QWORD *)(v77 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v26 = (float *)&v81;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v26);
        goto LABEL_132;
      }
      if (v11 == 11)
      {
        if (*(_QWORD *)v77 == 0x6E6152736169423CLL && *(_QWORD *)(v77 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v26 = &v82;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v77 + 1);
      }
      if (v11 != 10)
        goto LABEL_102;
      v15 = *(_QWORD *)v77 == 0x654C5870616D463CLL && *(_WORD *)(v77 + 8) == 15982;
      v9 = (int *)(a1 + 104);
      if (v15)
        goto LABEL_131;
      v11 = *((_QWORD *)&v77 + 1);
      if (*((_QWORD *)&v77 + 1) != 10)
        goto LABEL_102;
      v16 = *(_QWORD *)v77 == 0x654C5970616D463CLL && *(_WORD *)(v77 + 8) == 15982;
      v9 = (int *)(a1 + 108);
      if (v16)
        goto LABEL_131;
      if (v78 < 0)
      {
        v27 = *(_QWORD *)v77 == 0x654C58746C69463CLL && *(_WORD *)(v77 + 8) == 15982;
        v9 = (int *)(a1 + 112);
        if (v27)
          goto LABEL_131;
        v11 = *((_QWORD *)&v77 + 1);
        v28 = *(_QWORD *)v77 == 0x654C59746C69463CLL && *(_WORD *)(v77 + 8) == 15982;
        v9 = (int *)(a1 + 116);
        if (v28)
          goto LABEL_131;
        if (v78 < 0)
        {
LABEL_102:
          if (v11 == 11)
          {
            v29 = *(_QWORD *)v77 == 0x745358746C69463CLL && *(_QWORD *)(v77 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v29)
              goto LABEL_131;
            v11 = *((_QWORD *)&v77 + 1);
            if (*((_QWORD *)&v77 + 1) == 11)
            {
              v30 = *(_QWORD *)v77 == 0x745359746C69463CLL && *(_QWORD *)(v77 + 3) == 0x3E7065745359746CLL;
              v9 = (int *)(a1 + 124);
              if (v30)
                goto LABEL_131;
              if ((v78 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v11 != 6)
            goto LABEL_126;
          v31 = *(_DWORD *)v77 == 1684099132 && *(_WORD *)(v77 + 4) == 15960;
          v9 = (int *)(a1 + 128);
          if (v31)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v77 + 1) != 6)
            goto LABEL_126;
          v10 = (__int128 *)v77;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v78) != 6)
            goto LABEL_126;
LABEL_5:
          v8 = (_DWORD)v77 == 1684099132 && WORD2(v77) == 15960;
          v9 = (int *)(a1 + 128);
          if (v8)
            goto LABEL_131;
          if (v78 < 0)
            goto LABEL_120;
          if (HIBYTE(v78) != 6)
            goto LABEL_126;
          v10 = &v77;
        }
        v32 = *(_DWORD *)v10;
        v33 = *((unsigned __int16 *)v10 + 2);
        v34 = v32 == 1684099132 && v33 == 15961;
        v9 = (int *)(a1 + 132);
        if (v34)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v78) == 6)
        goto LABEL_5;
      if (HIBYTE(v78) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v78))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v77 == 0x61654D736169423CLL && WORD4(v77) == 15982)
            goto LABEL_90;
          if (HIBYTE(v78) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v77 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v77 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v78) == 6)
            goto LABEL_5;
          if (HIBYTE(v78) == 11)
          {
            v18 = (_QWORD)v77 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v77 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v18)
              goto LABEL_131;
            v19 = (_QWORD)v77 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v77 + 3) == 0x3E7065745359746CLL;
            v9 = (int *)(a1 + 124);
            if (v19)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v78) != 10)
            goto LABEL_126;
          v21 = (_QWORD)v77 == 0x654C5870616D463CLL && WORD4(v77) == 15982;
          v9 = (int *)(a1 + 104);
          if (v21)
            goto LABEL_131;
          v22 = (_QWORD)v77 == 0x654C5970616D463CLL && WORD4(v77) == 15982;
          v9 = (int *)(a1 + 108);
          if (v22)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v77 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v77 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v23 = (_QWORD)v77 == 0x654C58746C69463CLL && WORD4(v77) == 15982;
    v9 = (int *)(a1 + 112);
    if (v23)
      goto LABEL_131;
    v24 = (_QWORD)v77 == 0x654C59746C69463CLL && WORD4(v77) == 15982;
    v9 = (int *)(a1 + 116);
    if (v24)
      goto LABEL_131;
LABEL_126:
    v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<LearnRateCoef>");
    v26 = (float *)(a1 + 136);
    if (v35)
      goto LABEL_128;
    v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<BiasLearnRateCoef>");
    v26 = (float *)(a1 + 140);
    if (v36)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<RandomSeed>"))
    {
      v9 = &v79;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v9);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v80);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "<MaxGrad>");
  v26 = (float *)(a1 + 148);
  if (v37)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v77, "</Component>"))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Unknown token ", 14);
    if (v78 >= 0)
      v64 = &v77;
    else
      v64 = (__int128 *)v77;
    if (v78 >= 0)
      v65 = HIBYTE(v78);
    else
      v65 = *((_QWORD *)&v77 + 1);
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v80);
  v38 = *(_DWORD *)(a1 + 8);
  v40 = *(_DWORD *)(a1 + 104);
  v39 = *(_DWORD *)(a1 + 108);
  v41 = v38 / (v39 * v40);
  if (v38 % (v39 * v40))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
  }
  v42 = (v40 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v43 = *(_DWORD *)(a1 + 12);
  v44 = v42 + v42 * ((v39 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v45 = (v43 / v44);
  if (v43 % v44)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v73);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v73);
  }
  if (v79 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v79);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v73, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v71, v45, (*v7 * v41 * *v6), 0, 0);
  if ((int)v45 >= 1)
  {
    v46 = 0;
    v47 = *v7;
    v48 = *v6;
    do
    {
      if (v47 * v41 * v48 >= 1)
      {
        v49 = 0;
        do
        {
          v50 = *(float *)&v81;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v73, 0);
          *((float *)v71[0] + v46 * v72 + v49++) = v50 * v51;
          v47 = *v7;
          v48 = *v6;
        }
        while (v49 < *v7 * v41 * *v6);
      }
      ++v46;
    }
    while (v46 != (_DWORD)v45);
  }
  v52 = kaldi::MatrixBase<float>::NumRows((uint64_t)v71);
  v53 = kaldi::MatrixBase<float>::NumCols((uint64_t)v71);
  kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>(v52, v53, (int32x2_t **)&v68);
  v54 = v68;
  v55 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v68;
  if (v55)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 24))(v55);
    v54 = *(float **)(a1 + 184);
  }
  kaldi::CuMatrixBase<float>::CopyFromMat((uint64_t)v54, (int *)v71, 111);
  v68 = 0;
  v69 = 0;
  v70 = 0;
  kaldi::Vector<float>::Resize((void **)&v68, v45, 0);
  if ((int)v45 >= 1)
  {
    for (i = 0; i != v45; ++i)
    {
      v57 = *(float *)&v83;
      v58 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v59 = v57 + (v58 + -0.5) * v82;
      v68[i] = v59;
    }
  }
  v60 = (_QWORD *)operator new();
  v61 = v69;
  v60[2] = 0;
  v60[3] = 0;
  *v60 = &unk_1E5D341C8;
  v60[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v60, v61, 1);
  v62 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v60;
  if (v62)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v62 + 16))(v62);
    v60 = *(_QWORD **)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v60, (uint64_t)&v68);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v68);
  kaldi::Matrix<float>::~Matrix((uint64_t)v71);
  if (__p)
  {
    v76 = __p;
    operator delete(__p);
  }
  v71[0] = (void **)&v74;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v71);
  if (SHIBYTE(v78) < 0)
    operator delete((void *)v77);
  if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v80.__r_.__value_.__l.__data_);
}

void sub_1ADF96654(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

int32x2_t *kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x2_t **a3@<X8>)
{
  int32x2_t *v6;
  int32x2_t *result;

  v6 = (int32x2_t *)operator new();
  result = kaldi::CuMatrix<float>::CuMatrix(v6, a1, a2, 1, 0, 1);
  *a3 = v6;
  return result;
}

void sub_1ADF96700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(uint64_t a1)
{
  void *v2;
  size_t v3;
  size_t v4;
  int v5;
  size_t v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *result;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22[10];
  BNNSFilterParameters v23;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(int *)(a1 + 104);
  v4 = *(int *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  v6 = *(int *)(a1 + 128);
  v7 = *(int *)(a1 + 132);
  v8 = *(int *)(a1 + 112);
  v9 = *(int *)(a1 + 116);
  v10 = *(int *)(a1 + 120);
  v11 = *(int *)(a1 + 124);
  v12 = ((int)v3 + 2 * (int)v6 - (int)v8) / (int)v10 + 1;
  v13 = ((int)v4 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  v14 = *(_DWORD *)(a1 + 12) / (v13 * v12);
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v5;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v12;
  out_desc.height = v13;
  out_desc.channels = v14;
  out_desc.row_stride = v12;
  out_desc.image_stride = v13 * v12;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v10;
  layer_params.y_stride = v11;
  layer_params.x_padding = v6;
  layer_params.y_padding = v7;
  layer_params.k_width = v8;
  layer_params.k_height = v9;
  layer_params.in_channels = v5;
  layer_params.out_channels = v14;
  *(_QWORD *)&layer_params.weights.data_type = 0x3F80000000010020;
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 192);
  layer_params.weights.data = *(const void **)(v15 + 8);
  layer_params.weights.data_table = 0;
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.bias.data = *(const void **)(v16 + 8);
  layer_params.bias.data_scale = 1.0;
  layer_params.bias.data_table = 0;
  v17 = *(unsigned int *)(v15 + 16);
  if ((_DWORD)v17 == *(_DWORD *)(v15 + 24))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1AE1902B0;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level < 0)
    {
      v20 = *(unsigned int *)(v15 + 20);
    }
    else
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
      v19 = *(_QWORD *)(a1 + 184);
      v17 = *(unsigned int *)(v19 + 16);
      v20 = *(unsigned int *)(v19 + 20);
    }
    memset(&v23, 0, sizeof(v23));
    kaldi::Matrix<float>::Matrix((uint64_t)v22, v20, v17, 1, 1);
    kaldi::CuMatrixBase<float>::CopyToMat<float>(*(_QWORD *)(a1 + 184), v22, 111);
    v21 = kaldi::MatrixBase<float>::NumCols((uint64_t)v22);
    if (v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v22)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = *(const void **)v22;
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v23);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v22);
  }
  return result;
}

void sub_1ADF96968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  BOOL v8;
  float *v9;
  void *v10;
  BOOL v11;
  BOOL v13;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  BOOL v21;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  void (***v50)(void *, uint64_t *, uint64_t, uint64_t);
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v56;
  void **v57;
  uint64_t v58;
  void *__p[2];
  uint64_t v61;
  void *v62[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v62, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v62);
    if ((SHIBYTE(v62[2]) & 0x80000000) == 0)
    {
      v7 = v62;
      switch(HIBYTE(v62[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v8 = v62[0] == (void *)0x6461724778614D3CLL && LOBYTE(v62[1]) == 62;
          v9 = (float *)(a1 + 148);
          if (!v8)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v24 = v62[0] == (void *)0x654C5870616D463CLL && LOWORD(v62[1]) == 15982;
          v18 = a1 + 104;
          if (v24)
            goto LABEL_138;
          if (HIBYTE(v62[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v62[2]) != 10)
            goto LABEL_137;
          v25 = v62[0] == (void *)0x654C5970616D463CLL && LOWORD(v62[1]) == 15982;
          v18 = a1 + 108;
          if (!v25)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v28 = v62[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v62 + 3) == (void *)0x3E7065745358746CLL;
          v18 = a1 + 120;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v62[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v62[2]) != 11)
            goto LABEL_137;
          v29 = v62[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v62 + 3) == (void *)0x3E7065745359746CLL;
          v18 = a1 + 124;
          if (!v29)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v30 = v62[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v62 + 7) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 136);
          if (!v30)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v62[0] != (void *)0x6E6569646172473CLL
            || v62[1] != (void *)0x7079546D726F4E74
            || LOWORD(v62[2]) != 15973)
          {
            v7 = v62;
            switch(HIBYTE(v62[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v21 = v62[0] == (void *)0x61654C736169423CLL
             && v62[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v62[1] + 3) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 140);
          if (!v21)
          {
            switch(HIBYTE(v62[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v10 = v62[1];
    if (v62[1] == (void *)15)
    {
      v11 = *(_QWORD *)v62[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v62[0] + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 136);
      if (v11)
        goto LABEL_109;
    }
    if (v62[1] == (void *)19)
    {
      v13 = *(_QWORD *)v62[0] == 0x61654C736169423CLL
         && *((_QWORD *)v62[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v62[0] + 11) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 140);
      if (v13)
        goto LABEL_109;
      v10 = v62[1];
    }
    if (v10 == (void *)18)
    {
      if (*(_QWORD *)v62[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v62[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v62[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v61 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v61) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v10 = v62[1];
    }
    if (v10 != (void *)9)
      goto LABEL_39;
    v16 = *(_QWORD *)v62[0] == 0x6461724778614D3CLL && *((_BYTE *)v62[0] + 8) == 62;
    v9 = (float *)(a1 + 148);
    if (!v16)
    {
      v10 = v62[1];
LABEL_39:
      if (v10 == (void *)10)
      {
        v17 = *(_QWORD *)v62[0] == 0x654C5870616D463CLL && *((_WORD *)v62[0] + 4) == 15982;
        v18 = a1 + 104;
        if (v17)
          goto LABEL_138;
        v10 = v62[1];
        if (v62[1] == (void *)10)
        {
          v19 = *(_QWORD *)v62[0] == 0x654C5970616D463CLL && *((_WORD *)v62[0] + 4) == 15982;
          v18 = a1 + 108;
          if (v19)
            goto LABEL_138;
          if ((HIBYTE(v62[2]) & 0x80) == 0)
          {
            if (HIBYTE(v62[2]) != 6)
            {
              if (HIBYTE(v62[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v26 = v62[0] == (void *)0x654C58746C69463CLL && LOWORD(v62[1]) == 15982;
              v18 = a1 + 112;
              if (!v26)
              {
                v27 = v62[0] == (void *)0x654C59746C69463CLL && LOWORD(v62[1]) == 15982;
                v18 = a1 + 116;
                if (!v27)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v18);
              goto LABEL_139;
            }
LABEL_101:
            v7 = v62;
LABEL_133:
            v35 = *(_DWORD *)v7;
            v36 = *((unsigned __int16 *)v7 + 2);
            v37 = v35 == 1684099132 && v36 == 15960;
            v18 = a1 + 128;
            if (!v37)
              goto LABEL_137;
            goto LABEL_138;
          }
          v31 = *(_QWORD *)v62[0] == 0x654C58746C69463CLL && *((_WORD *)v62[0] + 4) == 15982;
          v18 = a1 + 112;
          if (v31)
            goto LABEL_138;
          v10 = v62[1];
          v32 = *(_QWORD *)v62[0] == 0x654C59746C69463CLL && *((_WORD *)v62[0] + 4) == 15982;
          v18 = a1 + 116;
          if (v32)
            goto LABEL_138;
          if ((HIBYTE(v62[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v10 != (void *)11)
        goto LABEL_131;
      v33 = *(_QWORD *)v62[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v62[0] + 3) == 0x3E7065745358746CLL;
      v18 = a1 + 120;
      if (v33)
        goto LABEL_138;
      v10 = v62[1];
      if (v62[1] != (void *)11)
        goto LABEL_131;
      v34 = *(_QWORD *)v62[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v62[0] + 3) == 0x3E7065745359746CLL;
      v18 = a1 + 124;
      if (v34)
        goto LABEL_138;
      if ((HIBYTE(v62[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v62[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v10 == (void *)6)
        {
          v7 = (void **)v62[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v62, "<PadY>");
      v18 = a1 + 132;
      if (!v38)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v56 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v62[2]) >= 0)
          v57 = v62;
        else
          v57 = (void **)v62[0];
        if (SHIBYTE(v62[2]) >= 0)
          v58 = HIBYTE(v62[2]);
        else
          v58 = (uint64_t)v62[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)v57, v58);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v9);
LABEL_139:
    if (SHIBYTE(v62[2]) < 0)
      operator delete(v62[0]);
  }
  v39 = *(_DWORD *)(a1 + 8);
  v41 = *(_DWORD *)(a1 + 104);
  v40 = *(_DWORD *)(a1 + 108);
  v42 = v39 / (v40 * v41);
  if (v39 % (v40 * v41))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_154;
  }
  v43 = v41 + 2 * *(_DWORD *)(a1 + 128);
  v44 = *(_DWORD *)(a1 + 112);
  v45 = *(_DWORD *)(a1 + 116);
  v46 = (v43 - v44) / *(_DWORD *)(a1 + 120) + 1;
  v47 = *(_DWORD *)(a1 + 12);
  v48 = v46 + v46 * ((v40 + 2 * *(_DWORD *)(a1 + 132) - v45) / *(_DWORD *)(a1 + 124));
  v49 = (v47 / v48);
  if (v47 % v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_154:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::CuMatrixBase<float>>(v49, (v44 * v42 * v45), (int32x2_t **)__p);
  v50 = (void (***)(void *, uint64_t *, uint64_t, uint64_t))__p[0];
  v51 = *(_QWORD *)(a1 + 184);
  *(void **)(a1 + 184) = __p[0];
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51);
    v50 = *(void (****)(void *, uint64_t *, uint64_t, uint64_t))(a1 + 184);
  }
  (**v50)(v50, a2, a3, a4);
  v52 = (_QWORD *)operator new();
  v52[2] = 0;
  v52[3] = 0;
  *v52 = &unk_1E5D341C8;
  v52[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v52, v49, 1);
  v53 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v52;
  if (v53)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v53 + 16))(v53);
    v52 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v52)(v52, a2, a3);
  v54 = *(_QWORD *)(a1 + 184);
  if (*(_DWORD *)(v54 + 20) != (_DWORD)v49
    || *(_DWORD *)(v54 + 16) != *(_DWORD *)(a1 + 112) * v42 * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_154;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1ADF97518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1[23], a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1[24], a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NumParams(uint64_t a1)
{
  return (*(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
                      + *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20));
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = a1[23];
  v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  v7 = a1[24];
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  _DWORD *v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v10, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v10);
  }
  v5 = a1[23];
  v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  v11 = 0;
  v12 = 0;
  v10 = *(char **)a2;
  LODWORD(v11) = v6;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v5, &v10);
  v7 = (_DWORD *)a1[24];
  v8 = v7[4];
  v11 = 0;
  v12 = 0;
  v10 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum(*(_QWORD *)(a1 + 184));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PerturbParams(uint64_t a1, float a2)
{
  uint64_t v4;
  _QWORD v6[4];
  int32x2_t v7[6];

  kaldi::CuMatrix<float>::CuMatrix(v7, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v7);
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), (uint64_t)v7, 111, a2, 1.0);
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 16);
  v6[0] = &unk_1E5D341C8;
  memset(&v6[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v6, v4, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v6);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 192), (uint64_t)v6, a2, 1.0);
  v6[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v6);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v7);
}

void sub_1ADF97800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::Info(uint64_t *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<float>(a1[23]);
  if ((v16 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)v15[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(a1[24]);
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v19);
}

void sub_1ADF97A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200));
  if ((v32 & 0x80u) == 0)
    v4 = v31;
  else
    v4 = (void **)v31[0];
  if ((v32 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (std::string::size_type)v31[1];
  v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v34, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0)
    v10 = v29;
  else
    v10 = (void **)v29[0];
  if ((v30 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = (std::string::size_type)v29[1];
  v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v36, "\n  bias_grad");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224));
  if ((v28 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (std::string::size_type)v27[1];
  v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v38, ", lr-coef ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v23 = v26;
  else
    v23 = (std::string::size_type)__p[1];
  v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1ADF97D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1ADF97E34()
{
  JUMPOUT(0x1ADF97E0CLL);
}

void sub_1ADF97E3C()
{
  JUMPOUT(0x1ADF97E1CLL);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(a1, a2, a3, a4);
  else
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  std::vector<int>::pointer end;
  int v27;
  int v28;
  int v29;
  int i;
  int v31;
  int v32;
  int v33;
  int *value;
  int v35;
  int v36;
  std::vector<int>::pointer begin;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  int *v43;
  int *v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  int64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  int *v57;
  uint64_t v58;
  uint64x2_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  int *v63;
  int v64;
  int *v65;
  uint64_t v66;
  int v67;
  int64x2_t v68;
  int32x2_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  uint64_t *v76;
  int v77;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  int v82;
  int v83;
  std::vector<int> __p[2];

  v6 = *(_DWORD *)(a1 + 104);
  v7 = *(_DWORD *)(a1 + 108);
  v73 = (v6 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v72 = (v7 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v70 = (v73 + 1);
  v71 = (v72 + 1);
  v8 = v71 * v70;
  v9 = *(_DWORD *)(a1 + 8);
  v74 = *(_DWORD *)(a1 + 12);
  v10 = *(unsigned int *)(a2 + 20);
  v79 = (uint64_t *)(a1 + 296);
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(int *)(a1 + 80);
  v77 = v71 * v70;
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v79, v12);
    v8 = v71 * v70;
    v11 = *v79;
  }
  v13 = a4;
  v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v8)
  {
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v8);
    v8 = v71 * v70;
  }
  if (v8 >= 1)
  {
    v15 = 0;
    do
    {
      kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v13) + v15), v10, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 0, 0);
      v15 += 48;
    }
    while (48 * v77 != v15);
  }
  v76 = (uint64_t *)(a1 + 160);
  v16 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v16)
    std::vector<kaldi::CuMatrix<float>>::resize(v76, v16);
  v17 = *(_DWORD *)(a1 + 132);
  v18 = *(_DWORD *)(a1 + 108);
  v19 = *(_DWORD *)(a1 + 116);
  v83 = -v17;
  v80 = v13;
  if (v17 + v18 - v19 < -v17)
    goto LABEL_65;
  v20 = 0;
  v21 = *(_DWORD *)(a1 + 128);
  v22 = *(_DWORD *)(a1 + 104);
  v23 = *(_DWORD *)(a1 + 112);
  v82 = v9 / (v7 * v6);
  do
  {
    v24 = -v21;
    if (v21 + v22 - v23 < -v21)
      goto LABEL_64;
    v25 = v20;
    do
    {
      v81 = v25;
      memset(__p, 0, 24);
      if (v82 < 1)
        goto LABEL_60;
      end = 0;
      v27 = 0;
      v28 = v24 + v22 * v83;
      v29 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v29 < 1)
          goto LABEL_59;
        for (i = 0; i < v29; ++i)
        {
          if (v23 < 1)
            continue;
          v31 = 0;
          v32 = i + v83;
          do
          {
            if (v32 < 0 || (v33 = *(_DWORD *)(a1 + 108), v32 >= v33))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v31 + v24 >= 0)
              {
                v35 = *(_DWORD *)(a1 + 104);
                if (v31 + v24 < v35)
                {
                  v36 = v28 + v31 + (i + v33 * v27) * v35;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v36;
                    goto LABEL_56;
                  }
                  begin = __p[0].__begin_;
                  v46 = end - __p[0].__begin_;
                  v47 = v46 + 1;
                  if ((unint64_t)(v46 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v48 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v47)
                    v47 = v48 >> 1;
                  if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
                    v41 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v41 = v47;
                  if (v41)
                  {
                    v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v41);
                    begin = __p[0].__begin_;
                    end = __p[0].__end_;
                  }
                  else
                  {
                    v42 = 0;
                  }
                  v43 = (int *)&v42[4 * v46];
                  *v43 = v36;
                  v44 = v43 + 1;
                  while (end != begin)
                  {
                    v49 = *--end;
                    *--v43 = v49;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            begin = __p[0].__begin_;
            v38 = end - __p[0].__begin_;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v40 = (char *)value - (char *)__p[0].__begin_;
            if (v40 >> 1 > v39)
              v39 = v40 >> 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
              v41 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v41);
              begin = __p[0].__begin_;
              end = __p[0].__end_;
            }
            else
            {
              v42 = 0;
            }
            v43 = (int *)&v42[4 * v38];
            *v43 = -1;
            v44 = v43 + 1;
            while (end != begin)
            {
              v45 = *--end;
              *--v43 = v45;
            }
LABEL_53:
            __p[0].__begin_ = v43;
            __p[0].__end_ = v44;
            __p[0].__end_cap_.__value_ = (int *)&v42[4 * v41];
            if (begin)
              operator delete(begin);
            end = v44;
LABEL_56:
            __p[0].__end_ = end;
            ++v31;
            v23 = *(_DWORD *)(a1 + 112);
          }
          while (v31 < v23);
          v29 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v27;
      }
      while (v27 != v82);
LABEL_60:
      v13 = v80;
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v79 + 24 * v80) + 48 * v81, a2, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      v25 = v81 + 1;
      v24 += *(_DWORD *)(a1 + 120);
      v22 = *(_DWORD *)(a1 + 104);
      v21 = *(_DWORD *)(a1 + 128);
      v23 = *(_DWORD *)(a1 + 112);
    }
    while (v24 <= v21 + v22 - v23);
    v18 = *(_DWORD *)(a1 + 108);
    v17 = *(_DWORD *)(a1 + 132);
    v20 = v81 + 1;
    v19 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v83 += *(_DWORD *)(a1 + 124);
  }
  while (v83 <= v17 + v18 - v19);
LABEL_65:
  v50 = (v74 / v77);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v76 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v77 >= 1)
  {
    v51 = 0;
    v52 = 0;
    v53 = 0;
    v54 = 0;
    do
    {
      v55 = *(_QWORD *)(a1 + 160) + 48 * v80;
      v56 = v53 + *(_DWORD *)(v55 + 28);
      v57 = *(int **)(v55 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(_QWORD *)(v55 + 8) + v52);
      LODWORD(__p[0].__end_cap_.__value_) = v74 / v77;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v55 + 20);
      HIDWORD(__p[1].__begin_) = v56;
      __p[1].__end_ = v57;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(_QWORD *)(a1 + 192), 1.0, 0.0);
      kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v80) + v51, CblasNoTrans, *(_QWORD *)(a1 + 184), CblasTrans, 1.0, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v54 += (int)v50;
      v53 -= v50;
      v52 += 4 * (int)v50;
      v51 += 48;
    }
    while (48 * v77 != v51);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v50 >= 1)
  {
    v58 = 0;
    v59 = (uint64x2_t)vdupq_n_s64(v70 - 1);
    v60 = vdupq_n_s64(2uLL);
    v61 = 1;
    do
    {
      if ((v72 & 0x80000000) == 0)
      {
        v62 = 0;
        v63 = &__p[0].__begin_[v61];
        v64 = v58;
        do
        {
          if ((v73 & 0x80000000) == 0)
          {
            v65 = v63;
            v66 = (v70 + 1) & 0x1FFFFFFFELL;
            v67 = v64;
            v68 = (int64x2_t)xmmword_1AE140A90;
            do
            {
              v69 = vmovn_s64((int64x2_t)vcgeq_u64(v59, (uint64x2_t)v68));
              if ((v69.i8[0] & 1) != 0)
                *(v65 - 1) = v67;
              if ((v69.i8[4] & 1) != 0)
                *v65 = v50 + v67;
              v68 = vaddq_s64(v68, v60);
              v67 += 2 * v50;
              v65 += 2;
              v66 -= 2;
            }
            while (v66);
          }
          ++v62;
          v64 += v50 * v70;
          v63 += v73 + 1;
        }
        while (v62 != v71);
      }
      ++v58;
      v61 += (int)v71 * (uint64_t)(int)v70;
    }
    while (v58 != v50);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v76 + 48 * v80, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1ADF9853C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int j;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  kaldi::CuWorkspace *ChildWorkspace;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  int v69;
  _QWORD v70[5];
  void **v71;
  _QWORD v72[4];
  _QWORD v73[3];
  std::vector<int> v74;

  v9 = *(_DWORD *)(a1 + 104);
  v10 = (v9 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v11 = v10 + 1;
  v64 = *(_DWORD *)(a1 + 108);
  v12 = (v64 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v13 = (v12 + 1);
  v14 = v13 * (v10 + 1);
  v61 = *(_DWORD *)(a1 + 8);
  v66 = *(_DWORD *)(a2 + 20);
  v68 = a6;
  v15 = (*(_DWORD *)(a1 + 12) / v14);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v74, *(int *)(a1 + 12));
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i != v15; ++i)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v19 = 0;
        v20 = &v74.__begin_[v17];
        v21 = v16;
        do
        {
          v22 = (v10 + 1);
          v23 = v21;
          v24 = v20;
          if ((v10 & 0x80000000) == 0)
          {
            do
            {
              *v24 = v23;
              v24 += v15;
              ++v23;
              --v22;
            }
            while (v22);
          }
          ++v19;
          v20 += v11 * v15;
          v21 += v11;
        }
        while (v19 != v13);
      }
      ++v17;
      v16 += v14;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * (int)v68, a4, (uint64_t *)&v74);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v73, v14);
  v25 = *(_QWORD *)(a1 + 24);
  if (v68 >= (*(_QWORD *)(a1 + 32) - v25) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v71);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v25 + 8 * v68), -1);
  if (v14 >= 1)
  {
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    do
    {
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v66, *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16), 0, (uint64_t)&v71);
      v30 = v73[0] + v26;
      if ((void ***)(v73[0] + v26) != &v71)
      {
        *(_QWORD *)(v30 + 8) = v72[0];
        *(_OWORD *)(v30 + 16) = *(_OWORD *)&v72[1];
        *(_QWORD *)(v30 + 32) = v72[3];
      }
      v71 = (void **)&unk_1E5D29D40;
      memset(v72, 0, sizeof(v72));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
      v31 = *(_QWORD *)(a1 + 160) + 48 * (int)v68;
      v32 = v28 + *(_DWORD *)(v31 + 28);
      v33 = *(_QWORD *)(v31 + 32);
      v72[0] = *(_QWORD *)(v31 + 8) + v27;
      LODWORD(v72[1]) = v15;
      *(_QWORD *)((char *)&v72[1] + 4) = *(_QWORD *)(v31 + 20);
      HIDWORD(v72[2]) = v32;
      v72[3] = v33;
      v71 = (void **)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat(v73[0] + v26, (uint64_t)&v71, CblasNoTrans, *(_QWORD *)(a1 + 184), CblasNoTrans, 1.0, 0.0);
      v71 = (void **)&unk_1E5D29D40;
      memset(v72, 0, sizeof(v72));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
      v29 += (int)v15;
      v28 -= v15;
      v27 += 4 * (int)v15;
      v26 += 40;
    }
    while (40 * v14 != v26);
  }
  v34 = *(_DWORD *)(a1 + 132);
  v35 = *(_DWORD *)(a1 + 108);
  v36 = *(_DWORD *)(a1 + 116);
  v63 = -v34;
  if (v34 + v35 - v36 >= -v34)
  {
    v37 = 0;
    v38 = *(_DWORD *)(a1 + 128);
    v39 = *(_DWORD *)(a1 + 104);
    v40 = *(_DWORD *)(a1 + 112);
    v60 = v61 / (v64 * v9);
    do
    {
      v41 = -v38;
      if (v38 + v39 - v40 >= -v38)
      {
        v67 = v37;
        do
        {
          if (v60 >= 1)
          {
            v69 = 0;
            v42 = 0;
            v43 = v39 * v63;
            v44 = v41;
            v65 = v41 + v43;
            v59 = v41;
            v62 = -v41 - v43;
            do
            {
              if (v36 >= 1)
              {
                for (j = 0; j < v36; ++j)
                {
                  if (v40 >= 1)
                  {
                    v46 = 0;
                    v47 = v62;
                    v48 = j + v63;
                    v49 = 4 * v42;
                    v50 = -v42;
                    do
                    {
                      if ((v48 & 0x80000000) == 0)
                      {
                        v51 = *(_DWORD *)(a1 + 108);
                        if (v48 < v51 && ((v44 + v46) & 0x80000000) == 0)
                        {
                          v52 = *(_DWORD *)(a1 + 104);
                          if (v44 + v46 < v52)
                          {
                            v53 = v73[0] + 40 * v67;
                            v54 = v50 + *(_DWORD *)(v53 + 28);
                            v55 = *(_QWORD *)(v53 + 32);
                            v72[0] = *(_QWORD *)(v53 + 8) + v49;
                            LODWORD(v72[1]) = 1;
                            *(_QWORD *)((char *)&v72[1] + 4) = *(_QWORD *)(v53 + 20);
                            HIDWORD(v72[2]) = v54;
                            v72[3] = v55;
                            LODWORD(v53) = v52 * (j + v69 * v51);
                            v56 = *(_QWORD *)(a5 + 8) + 4 * (v65 + v46 + v53);
                            LODWORD(v53) = v47 + *(_DWORD *)(a5 + 28) - v53;
                            v57 = *(_QWORD *)(a5 + 32);
                            LODWORD(v70[2]) = 1;
                            *(_QWORD *)((char *)&v70[2] + 4) = *(_QWORD *)(a5 + 20);
                            HIDWORD(v70[3]) = v53;
                            v70[4] = v57;
                            v71 = (void **)&unk_1E5D29D40;
                            v70[0] = &unk_1E5D29D40;
                            v70[1] = v56;
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)v70, (uint64_t)&v71, 111, 1.0, 1.0);
                            v70[0] = &unk_1E5D29D40;
                            memset(&v70[1], 0, 32);
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v70);
                            v71 = (void **)&unk_1E5D29D40;
                            memset(v72, 0, sizeof(v72));
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
                            v40 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      v49 += 4;
                      --v50;
                      ++v46;
                      --v47;
                    }
                    while (v46 < v40);
                    v42 = -v50;
                    v36 = *(_DWORD *)(a1 + 116);
                  }
                }
              }
              ++v69;
            }
            while (v69 != v60);
            v39 = *(_DWORD *)(a1 + 104);
            v38 = *(_DWORD *)(a1 + 128);
            v41 = v59;
          }
          ++v67;
          v41 += *(_DWORD *)(a1 + 120);
        }
        while (v41 <= v38 + v39 - v40);
        v35 = *(_DWORD *)(a1 + 108);
        v34 = *(_DWORD *)(a1 + 132);
        v37 = v67;
      }
      v63 += *(_DWORD *)(a1 + 124);
    }
    while (v63 <= v34 + v35 - v36);
  }
  if (ChildWorkspace)
  {
    kaldi::CuWorkspace::~CuWorkspace(ChildWorkspace);
    MEMORY[0x1AF44D190]();
  }
  v71 = (void **)v73;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v71);
  if (v74.__begin_)
  {
    v74.__end_ = v74.__begin_;
    operator delete(v74.__begin_);
  }
}

void sub_1ADF98B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 272) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v7), v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = *(_QWORD *)(a1 + 184);
        v11 = *(unsigned int *)(v9 + 16);
        v10 = *(unsigned int *)(v9 + 20);
        v12 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v12, v10, v11, 0, 0, 1);
        v13 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v12;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
        v14 = *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20);
        v15 = (_QWORD *)operator new();
        v15[2] = 0;
        v15[3] = 0;
        *v15 = &unk_1E5D341C8;
        v15[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v15, v14, 0);
        v16 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v15;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
        if (v8 == 2)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * v7), *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), *(unsigned int *)(*(_QWORD *)(a1 + 184) + 16), 1, 0);
          kaldi::CuVector<float>::Resize(*(_QWORD *)(a1 + 272) + 32 * v7, *(unsigned int *)(*(_QWORD *)(a1 + 184) + 20), 1);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1ADF9903C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[5];

  v7 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v8 = v7 + v7 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v10 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v10 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v10 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5));
  if (v8 >= 1)
  {
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = v9 / v8;
    v16 = 48 * v8;
    do
    {
      v17 = *(_QWORD *)(a1 + 160) + 48 * a5;
      v18 = v13 + *(_DWORD *)(v17 + 28);
      v19 = *(_QWORD *)(v17 + 32);
      v20[1] = *(_QWORD *)(v17 + 8) + v12;
      LODWORD(v20[2]) = v15;
      *(_QWORD *)((char *)&v20[2] + 4) = *(_QWORD *)(v17 + 20);
      HIDWORD(v20[3]) = v18;
      v20[4] = v19;
      v20[0] = &unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a5), (uint64_t)v20, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * a5) + v11, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5), (uint64_t)v20, 1.0, 1.0);
      v20[0] = &unk_1E5D29D40;
      memset(&v20[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v20);
      v14 += v15;
      v13 -= v15;
      v12 += 4 * v15;
      v11 += 48;
    }
    while (v16 != v11);
  }
}

void sub_1ADF99238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _OWORD *v12;

  a12 = &unk_1E5D29D40;
  *v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14[6];
  int32x2_t v15[6];

  v8 = (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = *(_DWORD *)(a1[23] + 16) * *(_DWORD *)(a1[23] + 20);
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(a1[24] + 16) + a3), 0);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(_QWORD **)(v8 + 200));
  v9 = *(_DWORD *)(a1[24] + 16);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1ADF993D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  *a3 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
      + *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20);
  v6 = *(_QWORD *)(a1 + 200);
  v7 = *(_QWORD *)(a1 + 208) - v6;
  if (v7 && (v8 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v9 = v7 >> 3;
    v10 = v8 >> 3;
    v11 = *(_DWORD *)(a1 + 80);
    if (v11 == 1)
      v11 = 0;
    v12 = v11;
    v13 = v10 - 1;
    if (v9 - 1 != v11 || v13 != v11)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"  ", 2);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    v15 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v6 + 8 * v11));
    v16 = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v12)) + v15;
  }
  else
  {
    v16 = 0;
  }
  *a2 = v16;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  int v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "Weights are already vectorized");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v38);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
  v8 = *(_DWORD *)(*(_QWORD *)(a1 + 184) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 184) + 20);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v8;
  if (v9 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_32;
  }
  kaldi::NewCuSubOrMat<float>(*(_QWORD *)(a1 + 184), a2 != 0, (uint64_t *)&v38);
  v10 = v38;
  v38 = 0;
  v11 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
    v12 = v38;
    v38 = 0;
    if (v12)
      (*(void (**)(void *))(*(_QWORD *)v12 + 24))(v12);
  }
  v13 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v13;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v8;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v8;
  *(_QWORD *)(a3 + 8) += 4 * v8;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, &v38);
  v15 = v38;
  v38 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v38;
    v38 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v19 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v19;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v18;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 140));
  v20 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v21 = *(_DWORD *)(a3 + 16) - v20;
  *(_QWORD *)(a3 + 8) += 4 * v20;
  *(_DWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateBNNSFilter(a1);
  v22 = a4[1];
  v23 = (v22 - *a4) >> 5;
  if (v23 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v23 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_32;
  }
  if (v22 == *a4)
    goto LABEL_28;
  v24 = 0;
  do
  {
    v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v24) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 20);
    if (v25 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_32;
    }
    ++v24;
    v26 = *a4;
    v27 = a4[1];
  }
  while (v24 < (v27 - *a4) >> 5);
  if (v27 != v26)
  {
    v28 = 0;
    do
    {
      v29 = v26 + 32 * v28;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v28), v29, (uint64_t *)&v38);
      v30 = *(_QWORD *)(a1 + 200);
      v31 = v38;
      v38 = 0;
      v32 = *(_QWORD *)(v30 + 8 * v28);
      *(_QWORD *)(v30 + 8 * v28) = v31;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v33 = v38;
      v38 = 0;
      if (v33)
        (*(void (**)(void *))(*(_QWORD *)v33 + 24))(v33);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v28), v29, &v38);
      v34 = *(_QWORD *)(a1 + 224);
      v35 = v38;
      v38 = 0;
      v36 = *(_QWORD *)(v34 + 8 * v28);
      *(_QWORD *)(v34 + 8 * v28) = v35;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
      v37 = v38;
      v38 = 0;
      if (v37)
        (*(void (**)(void *))(*(_QWORD *)v37 + 16))(v37);
      ++v28;
      v26 = *a4;
    }
    while (v28 < (a4[1] - *a4) >> 5);
  }
LABEL_28:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
}

void sub_1ADF99970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1ADF999E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1ADF99A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::CopyQuantized16Bit(a1 - 96);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D2F518;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F650;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F678;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F650;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F678;
  *(_QWORD *)a1 = &unk_1E5D2F518;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1ADF99CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADF99F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2F650;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2F518;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F678;
  v3 = (quasar::Bitmap *)(a1 + 96);
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1ADF9A198(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  BOOL v8;
  int *v9;
  __int128 *v10;
  uint64_t v11;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  BOOL v19;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  float v55;
  float v56;
  float v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69[2];
  int v70;
  _QWORD v71[2];
  uint64_t v72;
  void *__p;
  void *v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  std::string v78;
  int v79;
  float v80;
  int v81;

  v80 = 2.0;
  v81 = -1073741824;
  v79 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v78);
  v77 = -1;
  v75 = 0uLL;
  v76 = 0;
  v6 = (int *)(a1 + 116);
  v7 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v75);
    if (SHIBYTE(v76) < 0)
    {
      v11 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) == 10)
      {
        if (*(_QWORD *)v75 == 0x61654D736169423CLL && *(_WORD *)(v75 + 8) == 15982)
        {
LABEL_90:
          v26 = (float *)&v81;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v75 + 1);
      }
      else if (*((_QWORD *)&v75 + 1) == 13
             && *(_QWORD *)v75 == 0x74536D617261503CLL
             && *(_QWORD *)(v75 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v26 = (float *)&v79;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v26);
        goto LABEL_132;
      }
      if (v11 == 11)
      {
        if (*(_QWORD *)v75 == 0x6E6152736169423CLL && *(_QWORD *)(v75 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v26 = &v80;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v75 + 1);
      }
      if (v11 != 10)
        goto LABEL_102;
      v15 = *(_QWORD *)v75 == 0x654C5870616D463CLL && *(_WORD *)(v75 + 8) == 15982;
      v9 = (int *)(a1 + 104);
      if (v15)
        goto LABEL_131;
      v11 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) != 10)
        goto LABEL_102;
      v16 = *(_QWORD *)v75 == 0x654C5970616D463CLL && *(_WORD *)(v75 + 8) == 15982;
      v9 = (int *)(a1 + 108);
      if (v16)
        goto LABEL_131;
      if (v76 < 0)
      {
        v27 = *(_QWORD *)v75 == 0x654C58746C69463CLL && *(_WORD *)(v75 + 8) == 15982;
        v9 = (int *)(a1 + 112);
        if (v27)
          goto LABEL_131;
        v11 = *((_QWORD *)&v75 + 1);
        v28 = *(_QWORD *)v75 == 0x654C59746C69463CLL && *(_WORD *)(v75 + 8) == 15982;
        v9 = (int *)(a1 + 116);
        if (v28)
          goto LABEL_131;
        if (v76 < 0)
        {
LABEL_102:
          if (v11 == 11)
          {
            v29 = *(_QWORD *)v75 == 0x745358746C69463CLL && *(_QWORD *)(v75 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v29)
              goto LABEL_131;
            v11 = *((_QWORD *)&v75 + 1);
            if (*((_QWORD *)&v75 + 1) == 11)
            {
              v30 = *(_QWORD *)v75 == 0x745359746C69463CLL && *(_QWORD *)(v75 + 3) == 0x3E7065745359746CLL;
              v9 = (int *)(a1 + 124);
              if (v30)
                goto LABEL_131;
              if ((v76 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v11 != 6)
            goto LABEL_126;
          v31 = *(_DWORD *)v75 == 1684099132 && *(_WORD *)(v75 + 4) == 15960;
          v9 = (int *)(a1 + 128);
          if (v31)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v75 + 1) != 6)
            goto LABEL_126;
          v10 = (__int128 *)v75;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v76) != 6)
            goto LABEL_126;
LABEL_5:
          v8 = (_DWORD)v75 == 1684099132 && WORD2(v75) == 15960;
          v9 = (int *)(a1 + 128);
          if (v8)
            goto LABEL_131;
          if (v76 < 0)
            goto LABEL_120;
          if (HIBYTE(v76) != 6)
            goto LABEL_126;
          v10 = &v75;
        }
        v32 = *(_DWORD *)v10;
        v33 = *((unsigned __int16 *)v10 + 2);
        v34 = v32 == 1684099132 && v33 == 15961;
        v9 = (int *)(a1 + 132);
        if (v34)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v76) == 6)
        goto LABEL_5;
      if (HIBYTE(v76) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v76))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v75 == 0x61654D736169423CLL && WORD4(v75) == 15982)
            goto LABEL_90;
          if (HIBYTE(v76) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v75 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v76) == 6)
            goto LABEL_5;
          if (HIBYTE(v76) == 11)
          {
            v18 = (_QWORD)v75 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v18)
              goto LABEL_131;
            v19 = (_QWORD)v75 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E7065745359746CLL;
            v9 = (int *)(a1 + 124);
            if (v19)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v76) != 10)
            goto LABEL_126;
          v21 = (_QWORD)v75 == 0x654C5870616D463CLL && WORD4(v75) == 15982;
          v9 = (int *)(a1 + 104);
          if (v21)
            goto LABEL_131;
          v22 = (_QWORD)v75 == 0x654C5970616D463CLL && WORD4(v75) == 15982;
          v9 = (int *)(a1 + 108);
          if (v22)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v75 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v75 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v23 = (_QWORD)v75 == 0x654C58746C69463CLL && WORD4(v75) == 15982;
    v9 = (int *)(a1 + 112);
    if (v23)
      goto LABEL_131;
    v24 = (_QWORD)v75 == 0x654C59746C69463CLL && WORD4(v75) == 15982;
    v9 = (int *)(a1 + 116);
    if (v24)
      goto LABEL_131;
LABEL_126:
    v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<LearnRateCoef>");
    v26 = (float *)(a1 + 136);
    if (v35)
      goto LABEL_128;
    v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<BiasLearnRateCoef>");
    v26 = (float *)(a1 + 140);
    if (v36)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<RandomSeed>"))
    {
      v9 = &v77;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v9);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v78);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<MaxGrad>");
  v26 = (float *)(a1 + 148);
  if (v37)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "</Component>"))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Unknown token ", 14);
    if (v76 >= 0)
      v62 = &v75;
    else
      v62 = (__int128 *)v75;
    if (v76 >= 0)
      v63 = HIBYTE(v76);
    else
      v63 = *((_QWORD *)&v75 + 1);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v78);
  v38 = *(_DWORD *)(a1 + 8);
  v40 = *(_DWORD *)(a1 + 104);
  v39 = *(_DWORD *)(a1 + 108);
  v41 = v38 / (v39 * v40);
  if (v38 % (v39 * v40))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
  v42 = (v40 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v43 = *(_DWORD *)(a1 + 12);
  v44 = v42 + v42 * ((v39 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v45 = (v43 / v44);
  if (v43 % v44)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
  if (v77 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v77);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v71, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v69, v45, (*v7 * v41 * *v6), 0, 0);
  if ((int)v45 >= 1)
  {
    v46 = 0;
    v47 = *v7;
    v48 = *v6;
    do
    {
      if (v47 * v41 * v48 >= 1)
      {
        v49 = 0;
        do
        {
          v50 = *(float *)&v79;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v71, 0);
          *((float *)v69[0] + v46 * v70 + v49++) = v50 * v51;
          v47 = *v7;
          v48 = *v6;
        }
        while (v49 < *v7 * v41 * *v6);
      }
      ++v46;
    }
    while (v46 != (_DWORD)v45);
  }
  v52 = kaldi::MatrixBase<float>::NumRows((uint64_t)v69);
  v53 = kaldi::MatrixBase<float>::NumCols((uint64_t)v69);
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>(v52, v53, (uint64_t *)&v66);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)v66);
  kaldi::QuantizedMatrixBase<signed char>::CopyFromMat(*(_QWORD *)(a1 + 184), (uint64_t)v69);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  kaldi::Vector<float>::Resize((void **)&v66, v45, 0);
  if ((int)v45 >= 1)
  {
    for (i = 0; i != v45; ++i)
    {
      v55 = *(float *)&v81;
      v56 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v57 = v55 + (v56 + -0.5) * v80;
      v66[i] = v57;
    }
  }
  v58 = (_QWORD *)operator new();
  v59 = v67;
  v58[2] = 0;
  v58[3] = 0;
  *v58 = &unk_1E5D341C8;
  v58[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v58, v59, 1);
  v60 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v58;
  if (v60)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
    v58 = *(_QWORD **)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v58, (uint64_t)&v66);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v66);
  kaldi::Matrix<float>::~Matrix((uint64_t)v69);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  v69[0] = (void **)&v72;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v69);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_1ADF9AC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADF9AD00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(uint64_t a1)
{
  void *v2;
  size_t v3;
  size_t v4;
  int v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  const void *v18;
  int v19;
  void *result;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  BNNSFilterParameters v24;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(int *)(a1 + 104);
  v4 = *(int *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  v7 = *(int *)(a1 + 128);
  v8 = *(int *)(a1 + 132);
  v9 = *(int *)(a1 + 112);
  v10 = *(int *)(a1 + 116);
  v11 = *(int *)(a1 + 120);
  v12 = *(int *)(a1 + 124);
  v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  out_desc.channels = v5 / (v14 * v13);
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = out_desc.channels;
  layer_params.weights.data_type = BNNSDataTypeInt8;
  layer_params.weights.data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(_QWORD *)(a1 + 184));
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 192);
  v17 = *(float *)(v15 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v17;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  v18 = *(const void **)(v16 + 8);
  *(_QWORD *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.data = v18;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  kaldi::QuantizedMatrixBase<short>::NumCols(v15);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  if (v19 == kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1AE1902B0;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v24, 0, sizeof(v24));
    v21 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    v22 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v23, v21, v22, 1, 1);
    kaldi::MatrixBase<float>::CopyFromMat<signed char>((uint64_t)v23, *(float **)(a1 + 184), 111);
    LODWORD(v21) = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
    if ((_DWORD)v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v23)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = (const void *)v23[0];
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v24);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v23);
  }
  return result;
}

void sub_1ADF9AFA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  BOOL v8;
  float *v9;
  void *v10;
  BOOL v11;
  BOOL v13;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  BOOL v21;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  void **v54;
  uint64_t v55;
  void *__p[2];
  uint64_t v58;
  void *v59[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v59, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v59);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
    {
      v7 = v59;
      switch(HIBYTE(v59[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v8 = v59[0] == (void *)0x6461724778614D3CLL && LOBYTE(v59[1]) == 62;
          v9 = (float *)(a1 + 148);
          if (!v8)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v24 = v59[0] == (void *)0x654C5870616D463CLL && LOWORD(v59[1]) == 15982;
          v18 = a1 + 104;
          if (v24)
            goto LABEL_138;
          if (HIBYTE(v59[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v59[2]) != 10)
            goto LABEL_137;
          v25 = v59[0] == (void *)0x654C5970616D463CLL && LOWORD(v59[1]) == 15982;
          v18 = a1 + 108;
          if (!v25)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v28 = v59[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v59 + 3) == (void *)0x3E7065745358746CLL;
          v18 = a1 + 120;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v59[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v59[2]) != 11)
            goto LABEL_137;
          v29 = v59[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v59 + 3) == (void *)0x3E7065745359746CLL;
          v18 = a1 + 124;
          if (!v29)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v30 = v59[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v59 + 7) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 136);
          if (!v30)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v59[0] != (void *)0x6E6569646172473CLL
            || v59[1] != (void *)0x7079546D726F4E74
            || LOWORD(v59[2]) != 15973)
          {
            v7 = v59;
            switch(HIBYTE(v59[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v21 = v59[0] == (void *)0x61654C736169423CLL
             && v59[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v59[1] + 3) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 140);
          if (!v21)
          {
            switch(HIBYTE(v59[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v10 = v59[1];
    if (v59[1] == (void *)15)
    {
      v11 = *(_QWORD *)v59[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v59[0] + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 136);
      if (v11)
        goto LABEL_109;
    }
    if (v59[1] == (void *)19)
    {
      v13 = *(_QWORD *)v59[0] == 0x61654C736169423CLL
         && *((_QWORD *)v59[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v59[0] + 11) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 140);
      if (v13)
        goto LABEL_109;
      v10 = v59[1];
    }
    if (v10 == (void *)18)
    {
      if (*(_QWORD *)v59[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v59[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v59[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v58 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v58) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v10 = v59[1];
    }
    if (v10 != (void *)9)
      goto LABEL_39;
    v16 = *(_QWORD *)v59[0] == 0x6461724778614D3CLL && *((_BYTE *)v59[0] + 8) == 62;
    v9 = (float *)(a1 + 148);
    if (!v16)
    {
      v10 = v59[1];
LABEL_39:
      if (v10 == (void *)10)
      {
        v17 = *(_QWORD *)v59[0] == 0x654C5870616D463CLL && *((_WORD *)v59[0] + 4) == 15982;
        v18 = a1 + 104;
        if (v17)
          goto LABEL_138;
        v10 = v59[1];
        if (v59[1] == (void *)10)
        {
          v19 = *(_QWORD *)v59[0] == 0x654C5970616D463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 108;
          if (v19)
            goto LABEL_138;
          if ((HIBYTE(v59[2]) & 0x80) == 0)
          {
            if (HIBYTE(v59[2]) != 6)
            {
              if (HIBYTE(v59[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v26 = v59[0] == (void *)0x654C58746C69463CLL && LOWORD(v59[1]) == 15982;
              v18 = a1 + 112;
              if (!v26)
              {
                v27 = v59[0] == (void *)0x654C59746C69463CLL && LOWORD(v59[1]) == 15982;
                v18 = a1 + 116;
                if (!v27)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v18);
              goto LABEL_139;
            }
LABEL_101:
            v7 = v59;
LABEL_133:
            v35 = *(_DWORD *)v7;
            v36 = *((unsigned __int16 *)v7 + 2);
            v37 = v35 == 1684099132 && v36 == 15960;
            v18 = a1 + 128;
            if (!v37)
              goto LABEL_137;
            goto LABEL_138;
          }
          v31 = *(_QWORD *)v59[0] == 0x654C58746C69463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 112;
          if (v31)
            goto LABEL_138;
          v10 = v59[1];
          v32 = *(_QWORD *)v59[0] == 0x654C59746C69463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 116;
          if (v32)
            goto LABEL_138;
          if ((HIBYTE(v59[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v10 != (void *)11)
        goto LABEL_131;
      v33 = *(_QWORD *)v59[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v59[0] + 3) == 0x3E7065745358746CLL;
      v18 = a1 + 120;
      if (v33)
        goto LABEL_138;
      v10 = v59[1];
      if (v59[1] != (void *)11)
        goto LABEL_131;
      v34 = *(_QWORD *)v59[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v59[0] + 3) == 0x3E7065745359746CLL;
      v18 = a1 + 124;
      if (v34)
        goto LABEL_138;
      if ((HIBYTE(v59[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v59[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v10 == (void *)6)
        {
          v7 = (void **)v59[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, "<PadY>");
      v18 = a1 + 132;
      if (!v38)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v59[2]) >= 0)
          v54 = v59;
        else
          v54 = (void **)v59[0];
        if (SHIBYTE(v59[2]) >= 0)
          v55 = HIBYTE(v59[2]);
        else
          v55 = (uint64_t)v59[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v9);
LABEL_139:
    if (SHIBYTE(v59[2]) < 0)
      operator delete(v59[0]);
  }
  v39 = *(_DWORD *)(a1 + 8);
  v41 = *(_DWORD *)(a1 + 104);
  v40 = *(_DWORD *)(a1 + 108);
  v42 = v39 / (v40 * v41);
  if (v39 % (v40 * v41))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_152;
  }
  v43 = v41 + 2 * *(_DWORD *)(a1 + 128);
  v44 = *(_DWORD *)(a1 + 112);
  v45 = *(_DWORD *)(a1 + 116);
  v46 = (v43 - v44) / *(_DWORD *)(a1 + 120) + 1;
  v47 = *(_DWORD *)(a1 + 12);
  v48 = v46 + v46 * ((v40 + 2 * *(_DWORD *)(a1 + 132) - v45) / *(_DWORD *)(a1 + 124));
  v49 = (v47 / v48);
  if (v47 % v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_152:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<signed char>>(v49, (v44 * v42 * v45), (uint64_t *)__p);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)__p[0]);
  kaldi::QuantizedMatrix<signed char>::Read(*(float **)(a1 + 184), a2, a3, a4);
  v50 = (_QWORD *)operator new();
  v50[2] = 0;
  v50[3] = 0;
  *v50 = &unk_1E5D341C8;
  v50[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v50, v49, 1);
  v51 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v50;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    v50 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v50)(v50, a2, a3);
  if (kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184)) != (_DWORD)v49
    || kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) != *(_DWORD *)(a1 + 112)
                                                                                        * v42
                                                                                        * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_152;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1ADF9BB44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<signed char>::Write(*(int **)(a1 + 184), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(*(_QWORD *)(a1 + 192), a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  return *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v2;
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<signed char>((uint64_t *)&v10, *(float **)(a1 + 184));
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v7 = *(unsigned int **)(a1 + 184);
  v12 = 0;
  v13 = 0;
  v11 = *(char **)a2;
  LODWORD(v12) = v6;
  kaldi::QuantizedMatrixBase<signed char>::CopyRowsFromVec(v7, &v11);
  v8 = *(_DWORD **)(a1 + 192);
  v9 = v8[4];
  v12 = 0;
  v13 = 0;
  v11 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v8, (uint64_t)&v11);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::QuantizedMatrixBase<signed char>::Sum(*(int **)(a1 + 184));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<signed char>::AddMat();
}

uint64_t sub_1ADF9BE14()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  _QWORD v4[4];
  uint64_t v5;

  v2 = *(unsigned int *)(*(_QWORD *)(v0 + 192) + 16);
  v4[0] = &unk_1E5D341C8;
  memset(&v4[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v2, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v4);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v0 + 192), (uint64_t)v4, v1, 1.0);
  v4[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v5);
}

void sub_1ADF9BE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Info(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<signed char>(*(kaldi::quasar::Vocab **)(a1 + 184));
  if ((v16 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)v15[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 192));
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v19);
}

void sub_1ADF9C0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200));
  if ((v32 & 0x80u) == 0)
    v4 = v31;
  else
    v4 = (void **)v31[0];
  if ((v32 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (std::string::size_type)v31[1];
  v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v34, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0)
    v10 = v29;
  else
    v10 = (void **)v29[0];
  if ((v30 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = (std::string::size_type)v29[1];
  v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v36, "\n  bias_grad");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224));
  if ((v28 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (std::string::size_type)v27[1];
  v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v38, ", lr-coef ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v23 = v26;
  else
    v23 = (std::string::size_type)__p[1];
  v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1ADF9C3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1ADF9C4BC()
{
  JUMPOUT(0x1ADF9C494);
}

void sub_1ADF9C4C4()
{
  JUMPOUT(0x1ADF9C4A4);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(a1, a2, a3, a4);
  else
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::vector<int>::pointer end;
  int v29;
  int v30;
  int v31;
  int i;
  int v33;
  int v34;
  int v35;
  int *value;
  int v37;
  int v38;
  std::vector<int>::pointer begin;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int *v59;
  double v60;
  uint64_t v61;
  uint64x2_t v62;
  int64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int *v68;
  uint64_t v69;
  int v70;
  int64x2_t v71;
  int32x2_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  std::vector<int> __p[2];

  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v76 = (v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v75 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v73 = (v76 + 1);
  v74 = (v75 + 1);
  v80 = v74 * v73;
  v9 = *(_DWORD *)(a1 + 8);
  v77 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v81 = a2;
  v10 = *(unsigned int *)(a2 + 20);
  v82 = (uint64_t *)(a1 + 296);
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v82, v12);
    v11 = *v82;
  }
  v13 = a4;
  v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v80)
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v80);
  if (v80 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (int32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v13) + v15);
      v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v16, v10, v17, 0, 0);
      v15 += 48;
    }
    while (48 * v80 != v15);
  }
  v79 = (uint64_t *)(a1 + 160);
  v18 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v18)
    std::vector<kaldi::CuMatrix<float>>::resize(v79, v18);
  v19 = *(_DWORD *)(a1 + 132);
  v20 = *(_DWORD *)(a1 + 108);
  v21 = *(_DWORD *)(a1 + 116);
  v86 = -v19;
  v83 = v13;
  if (v19 + v20 - v21 < -v19)
    goto LABEL_65;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 128);
  v24 = *(_DWORD *)(a1 + 104);
  v25 = *(_DWORD *)(a1 + 112);
  v85 = v9 / (v8 * v7);
  do
  {
    v26 = -v23;
    if (v23 + v24 - v25 < -v23)
      goto LABEL_64;
    v27 = v22;
    do
    {
      v84 = v27;
      memset(__p, 0, 24);
      if (v85 < 1)
        goto LABEL_60;
      end = 0;
      v29 = 0;
      v30 = v26 + v24 * v86;
      v31 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v31 < 1)
          goto LABEL_59;
        for (i = 0; i < v31; ++i)
        {
          if (v25 < 1)
            continue;
          v33 = 0;
          v34 = i + v86;
          do
          {
            if (v34 < 0 || (v35 = *(_DWORD *)(a1 + 108), v34 >= v35))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v33 + v26 >= 0)
              {
                v37 = *(_DWORD *)(a1 + 104);
                if (v33 + v26 < v37)
                {
                  v38 = v30 + v33 + (i + v35 * v29) * v37;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v38;
                    goto LABEL_56;
                  }
                  begin = __p[0].__begin_;
                  v48 = end - __p[0].__begin_;
                  v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v50 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v49)
                    v49 = v50 >> 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v49;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
                    begin = __p[0].__begin_;
                    end = __p[0].__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (int *)&v44[4 * v48];
                  *v45 = v38;
                  v46 = v45 + 1;
                  while (end != begin)
                  {
                    v51 = *--end;
                    *--v45 = v51;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            begin = __p[0].__begin_;
            v40 = end - __p[0].__begin_;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v42 = (char *)value - (char *)__p[0].__begin_;
            if (v42 >> 1 > v41)
              v41 = v42 >> 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
              v43 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
              begin = __p[0].__begin_;
              end = __p[0].__end_;
            }
            else
            {
              v44 = 0;
            }
            v45 = (int *)&v44[4 * v40];
            *v45 = -1;
            v46 = v45 + 1;
            while (end != begin)
            {
              v47 = *--end;
              *--v45 = v47;
            }
LABEL_53:
            __p[0].__begin_ = v45;
            __p[0].__end_ = v46;
            __p[0].__end_cap_.__value_ = (int *)&v44[4 * v43];
            if (begin)
              operator delete(begin);
            end = v46;
LABEL_56:
            __p[0].__end_ = end;
            ++v33;
            v25 = *(_DWORD *)(a1 + 112);
          }
          while (v33 < v25);
          v31 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v29;
      }
      while (v29 != v85);
LABEL_60:
      v13 = v83;
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v82 + 24 * v83) + 48 * v84, v81, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      v27 = v84 + 1;
      v26 += *(_DWORD *)(a1 + 120);
      v24 = *(_DWORD *)(a1 + 104);
      v23 = *(_DWORD *)(a1 + 128);
      v25 = *(_DWORD *)(a1 + 112);
    }
    while (v26 <= v23 + v24 - v25);
    v20 = *(_DWORD *)(a1 + 108);
    v19 = *(_DWORD *)(a1 + 132);
    v22 = v84 + 1;
    v21 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v86 += *(_DWORD *)(a1 + 124);
  }
  while (v86 <= v19 + v20 - v21);
LABEL_65:
  v52 = (v77 / v80);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v79 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v80 >= 1)
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      v57 = *(_QWORD *)(a1 + 160) + 48 * v83;
      v58 = v55 + *(_DWORD *)(v57 + 28);
      v59 = *(int **)(v57 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(_QWORD *)(v57 + 8) + v54);
      LODWORD(__p[0].__end_cap_.__value_) = v77 / v80;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v57 + 20);
      HIDWORD(__p[1].__begin_) = v58;
      __p[1].__end_ = v59;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(_QWORD *)(a1 + 192), 1.0, 0.0);
      LODWORD(v60) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>((uint64_t)__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v83) + v53, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 112, v60, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v56 += (int)v52;
      v55 -= v52;
      v54 += 4 * (int)v52;
      v53 += 48;
    }
    while (48 * v80 != v53);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v52 >= 1)
  {
    v61 = 0;
    v62 = (uint64x2_t)vdupq_n_s64(v73 - 1);
    v63 = vdupq_n_s64(2uLL);
    v64 = 1;
    do
    {
      if ((v75 & 0x80000000) == 0)
      {
        v65 = 0;
        v66 = &__p[0].__begin_[v64];
        v67 = v61;
        do
        {
          if ((v76 & 0x80000000) == 0)
          {
            v68 = v66;
            v69 = (v73 + 1) & 0x1FFFFFFFELL;
            v70 = v67;
            v71 = (int64x2_t)xmmword_1AE140A90;
            do
            {
              v72 = vmovn_s64((int64x2_t)vcgeq_u64(v62, (uint64x2_t)v71));
              if ((v72.i8[0] & 1) != 0)
                *(v68 - 1) = v70;
              if ((v72.i8[4] & 1) != 0)
                *v68 = v52 + v70;
              v71 = vaddq_s64(v71, v63);
              v70 += 2 * v52;
              v68 += 2;
              v69 -= 2;
            }
            while (v69);
          }
          ++v65;
          v67 += v52 * v73;
          v66 += v76 + 1;
        }
        while (v65 != v74);
      }
      ++v61;
      v64 += (int)v74 * (uint64_t)(int)v73;
    }
    while (v61 != v52);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v79 + 48 * v83, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1ADF9CBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int j;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  kaldi::CuWorkspace *ChildWorkspace;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD v74[5];
  void **v75;
  _QWORD v76[4];
  _QWORD v77[3];
  std::vector<int> v78;

  v68 = *(_DWORD *)(a1 + 104);
  v10 = (v68 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v11 = v10 + 1;
  v67 = *(_DWORD *)(a1 + 108);
  v12 = (v67 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v13 = (v12 + 1);
  v14 = v13 * (v10 + 1);
  v64 = *(_DWORD *)(a1 + 8);
  v15 = (*(_DWORD *)(a1 + 12) / v14);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v72 = *(_DWORD *)(a2 + 20);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v78, *(int *)(a1 + 12));
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i != v15; ++i)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v19 = 0;
        v20 = &v78.__begin_[v17];
        v21 = v16;
        do
        {
          v22 = (v10 + 1);
          v23 = v21;
          v24 = v20;
          if ((v10 & 0x80000000) == 0)
          {
            do
            {
              *v24 = v23;
              v24 += v15;
              ++v23;
              --v22;
            }
            while (v22);
          }
          ++v19;
          v20 += v11 * v15;
          v21 += v11;
        }
        while (v19 != v13);
      }
      ++v17;
      v16 += v14;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * a6, a4, (uint64_t *)&v78);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v77, v14);
  v25 = *(_QWORD *)(a1 + 24);
  if (a6 >= (unint64_t)((*(_QWORD *)(a1 + 32) - v25) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v25 + 8 * a6), -1);
  if (v14 >= 1)
  {
    v26 = v13 * v11;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 40 * v26;
    do
    {
      v32 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v72, v32, 0, (uint64_t)&v75);
      v33 = v77[0] + v27;
      if ((void ***)(v77[0] + v27) != &v75)
      {
        *(_QWORD *)(v33 + 8) = v76[0];
        *(_OWORD *)(v33 + 16) = *(_OWORD *)&v76[1];
        *(_QWORD *)(v33 + 32) = v76[3];
      }
      v75 = (void **)&unk_1E5D29D40;
      memset(v76, 0, sizeof(v76));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v34 = *(_QWORD *)(a1 + 160) + 48 * a6;
      v35 = v29 + *(_DWORD *)(v34 + 28);
      v36 = *(_QWORD *)(v34 + 32);
      v76[0] = *(_QWORD *)(v34 + 8) + v28;
      LODWORD(v76[1]) = v15;
      *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(v34 + 20);
      HIDWORD(v76[2]) = v35;
      v76[3] = v36;
      v75 = (void **)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat<signed char>(v77[0] + v27, (uint64_t)&v75, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 111, COERCE_DOUBLE(__PAIR64__(v76[2], 1.0)), 0.0);
      v75 = (void **)&unk_1E5D29D40;
      memset(v76, 0, sizeof(v76));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v30 += (int)v15;
      v29 -= v15;
      v28 += 4 * (int)v15;
      v27 += 40;
    }
    while (v31 != v27);
  }
  v37 = *(_DWORD *)(a1 + 132);
  v38 = *(_DWORD *)(a1 + 108);
  v39 = *(_DWORD *)(a1 + 116);
  v66 = -v37;
  if (v37 + v38 - v39 >= -v37)
  {
    v40 = 0;
    v41 = *(_DWORD *)(a1 + 128);
    v42 = *(_DWORD *)(a1 + 104);
    v43 = *(_DWORD *)(a1 + 112);
    v63 = v64 / (v67 * v68);
    do
    {
      v44 = -v41;
      if (v41 + v42 - v43 >= -v41)
      {
        v71 = v40;
        do
        {
          if (v63 >= 1)
          {
            v73 = 0;
            v45 = 0;
            v46 = v42 * v66;
            v47 = v44;
            v69 = v44 + v46;
            v62 = v44;
            v65 = -v44 - v46;
            do
            {
              if (v39 >= 1)
              {
                for (j = 0; j < v39; ++j)
                {
                  if (v43 >= 1)
                  {
                    v49 = 0;
                    v50 = v65;
                    v51 = j + v66;
                    v52 = 4 * v45;
                    v53 = -v45;
                    do
                    {
                      if ((v51 & 0x80000000) == 0)
                      {
                        v54 = *(_DWORD *)(a1 + 108);
                        if (v51 < v54 && ((v47 + v49) & 0x80000000) == 0)
                        {
                          v55 = *(_DWORD *)(a1 + 104);
                          if (v47 + v49 < v55)
                          {
                            v56 = v77[0] + 40 * v71;
                            v57 = v53 + *(_DWORD *)(v56 + 28);
                            v58 = *(_QWORD *)(v56 + 32);
                            v76[0] = *(_QWORD *)(v56 + 8) + v52;
                            LODWORD(v76[1]) = 1;
                            *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(v56 + 20);
                            HIDWORD(v76[2]) = v57;
                            v76[3] = v58;
                            LODWORD(v56) = v55 * (j + v73 * v54);
                            v59 = *(_QWORD *)(a5 + 8) + 4 * (v69 + v49 + v56);
                            LODWORD(v56) = v50 + *(_DWORD *)(a5 + 28) - v56;
                            v60 = *(_QWORD *)(a5 + 32);
                            LODWORD(v74[2]) = 1;
                            *(_QWORD *)((char *)&v74[2] + 4) = *(_QWORD *)(a5 + 20);
                            HIDWORD(v74[3]) = v56;
                            v74[4] = v60;
                            v75 = (void **)&unk_1E5D29D40;
                            v74[0] = &unk_1E5D29D40;
                            v74[1] = v59;
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)v74, (uint64_t)&v75, 111, 1.0, 1.0);
                            v74[0] = &unk_1E5D29D40;
                            memset(&v74[1], 0, 32);
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v74);
                            v75 = (void **)&unk_1E5D29D40;
                            memset(v76, 0, sizeof(v76));
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
                            v43 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      v52 += 4;
                      --v53;
                      ++v49;
                      --v50;
                    }
                    while (v49 < v43);
                    v45 = -v53;
                    v39 = *(_DWORD *)(a1 + 116);
                  }
                }
              }
              ++v73;
            }
            while (v73 != v63);
            v42 = *(_DWORD *)(a1 + 104);
            v41 = *(_DWORD *)(a1 + 128);
            v44 = v62;
          }
          ++v71;
          v44 += *(_DWORD *)(a1 + 120);
        }
        while (v44 <= v41 + v42 - v43);
        v38 = *(_DWORD *)(a1 + 108);
        v37 = *(_DWORD *)(a1 + 132);
        v40 = v71;
      }
      v66 += *(_DWORD *)(a1 + 124);
    }
    while (v66 <= v37 + v38 - v39);
  }
  if (ChildWorkspace)
  {
    kaldi::CuWorkspace::~CuWorkspace(ChildWorkspace);
    MEMORY[0x1AF44D190]();
  }
  v75 = (void **)v77;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v75);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_1ADF9D234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 272) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v7), v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
        v11 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v11, v9, v10, 0, 0, 1);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
        v14 = (_QWORD *)operator new();
        v14[2] = 0;
        v14[3] = 0;
        *v14 = &unk_1E5D341C8;
        v14[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v14, v13, 0);
        v15 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v14;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        if (v8 == 2)
        {
          v16 = (int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * v7);
          v17 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
          v18 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
          kaldi::CuMatrix<float>::Resize(v16, v17, v18, 1, 0);
          v19 = *(_QWORD *)(a1 + 272) + 32 * v7;
          v20 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
          kaldi::CuVector<float>::Resize(v19, v20, 1);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1ADF9D720(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[5];

  v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v11 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v12 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v12 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v11 / v10;
    v18 = 48 * v10;
    do
    {
      v19 = *(_QWORD *)(a1 + 160) + 48 * a5;
      v20 = v15 + *(_DWORD *)(v19 + 28);
      v21 = *(_QWORD *)(v19 + 32);
      v22[1] = *(_QWORD *)(v19 + 8) + v14;
      LODWORD(v22[2]) = v17;
      *(_QWORD *)((char *)&v22[2] + 4) = *(_QWORD *)(v19 + 20);
      HIDWORD(v22[3]) = v20;
      v22[4] = v21;
      v22[0] = &unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a5), (uint64_t)v22, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * a5) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5), (uint64_t)v22, 1.0, 1.0);
      v22[0] = &unk_1E5D29D40;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v16 += v17;
      v15 -= v17;
      v14 += 4 * v17;
      v13 += 48;
    }
    while (v18 != v13);
  }
}

void sub_1ADF9D92C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _OWORD *v12;

  a12 = &unk_1E5D29D40;
  *v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14[6];
  int32x2_t v15[6];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + a3), 0);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(_QWORD **)(v8 + 200));
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1ADF9DB14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  *a3 = v6 + result * v7;
  v9 = *(_QWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 208) - v9;
  if (v10 && (v11 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v12 = v10 >> 3;
    v13 = v11 >> 3;
    v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1)
      v14 = 0;
    v15 = v14;
    v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v18 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v9 + 8 * v14));
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15));
    v19 = result + v18;
  }
  else
  {
    v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "Weights are already vectorized");
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v38);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
  v8 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v8;
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_29;
  }
  v11 = *(int **)(a1 + 184);
  v12 = operator new();
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v12, v11);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v12);
  v13 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v13;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v9;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * (int)v9;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, &v38);
  v15 = v38;
  v38 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v38;
    v38 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v19 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v19;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v18;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 140));
  v20 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v21 = *(_DWORD *)(a3 + 16) - v20;
  *(_QWORD *)(a3 + 8) += 4 * v20;
  *(_DWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  v22 = a4[1];
  v23 = (v22 - *a4) >> 5;
  if (v23 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v23 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_29;
  }
  if (v22 == *a4)
    goto LABEL_25;
  v24 = 0;
  do
  {
    v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v24) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 20);
    if (v25 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_29;
    }
    ++v24;
    v26 = *a4;
    v27 = a4[1];
  }
  while (v24 < (v27 - *a4) >> 5);
  if (v27 != v26)
  {
    v28 = 0;
    do
    {
      v29 = v26 + 32 * v28;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v28), v29, (uint64_t *)&v38);
      v30 = *(_QWORD *)(a1 + 200);
      v31 = v38;
      v38 = 0;
      v32 = *(_QWORD *)(v30 + 8 * v28);
      *(_QWORD *)(v30 + 8 * v28) = v31;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v33 = v38;
      v38 = 0;
      if (v33)
        (*(void (**)(void *))(*(_QWORD *)v33 + 24))(v33);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v28), v29, &v38);
      v34 = *(_QWORD *)(a1 + 224);
      v35 = v38;
      v38 = 0;
      v36 = *(_QWORD *)(v34 + 8 * v28);
      *(_QWORD *)(v34 + 8 * v28) = v35;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
      v37 = v38;
      v38 = 0;
      if (v37)
        (*(void (**)(void *))(*(_QWORD *)v37 + 16))(v37);
      ++v28;
      v26 = *a4;
    }
    while (v28 < (a4[1] - *a4) >> 5);
  }
LABEL_25:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
}

void sub_1ADF9E0B8(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1ADF9E150(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(v2, a1);
  return v2;
}

void sub_1ADF9E1C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::CopyQuantized16Bit(a1 - 96);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

double kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D2F6A0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F7D8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F800;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a1 + 136) = _D1;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 329) = 0u;
  return result;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F7D8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F800;
  *(_QWORD *)a1 = &unk_1E5D2F6A0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1ADF9E414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 == a2)
  {
    *(_BYTE *)(a1 + 344) = 0;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
    *(_BYTE *)(a1 + 344) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  }
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADF9E6B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  void **v8;

  *(_QWORD *)(a1 + 88) = &unk_1E5D2F7D8;
  v2 = (quasar::Bitmap *)(a1 + 88);
  *(_QWORD *)a1 = &unk_1E5D2F6A0;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F800;
  v3 = (quasar::Bitmap *)(a1 + 96);
  v4 = *(void **)(a1 + 152);
  if (v4)
  {
    BNNSFilterDestroy(v4);
    *(_QWORD *)(a1 + 152) = 0;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 376));
  v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(_QWORD *)(a1 + 360) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 296);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 272);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 248);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 224);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)(a1 + 200);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v7 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), 0);
  v8 = (void **)(a1 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(uint64_t a1)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::~Convolutional2DComponent(a1 - 96);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1ADF9E900(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  int *v7;
  BOOL v8;
  int *v9;
  __int128 *v10;
  uint64_t v11;
  BOOL v15;
  BOOL v16;
  BOOL v18;
  BOOL v19;
  BOOL v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  float *v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  int v32;
  int v33;
  BOOL v34;
  BOOL v35;
  BOOL v36;
  BOOL v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  float v50;
  float v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  float v55;
  float v56;
  float v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  __int128 *v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  float *v66;
  uint64_t v67;
  uint64_t v68;
  void **v69[2];
  int v70;
  _QWORD v71[2];
  uint64_t v72;
  void *__p;
  void *v74;
  __int128 v75;
  uint64_t v76;
  int v77;
  std::string v78;
  int v79;
  float v80;
  int v81;

  v80 = 2.0;
  v81 = -1073741824;
  v79 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &v78);
  v77 = -1;
  v75 = 0uLL;
  v76 = 0;
  v6 = (int *)(a1 + 116);
  v7 = (int *)(a1 + 112);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_137;
    kaldi::ReadToken(a2, 0, (uint64_t)&v75);
    if (SHIBYTE(v76) < 0)
    {
      v11 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) == 10)
      {
        if (*(_QWORD *)v75 == 0x61654D736169423CLL && *(_WORD *)(v75 + 8) == 15982)
        {
LABEL_90:
          v26 = (float *)&v81;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v75 + 1);
      }
      else if (*((_QWORD *)&v75 + 1) == 13
             && *(_QWORD *)v75 == 0x74536D617261503CLL
             && *(_QWORD *)(v75 + 5) == 0x3E7665646474536DLL)
      {
LABEL_89:
        v26 = (float *)&v79;
LABEL_128:
        kaldi::ReadBasicType<float>(a2, 0, v26);
        goto LABEL_132;
      }
      if (v11 == 11)
      {
        if (*(_QWORD *)v75 == 0x6E6152736169423CLL && *(_QWORD *)(v75 + 3) == 0x3E65676E61527361)
        {
LABEL_91:
          v26 = &v80;
          goto LABEL_128;
        }
        v11 = *((_QWORD *)&v75 + 1);
      }
      if (v11 != 10)
        goto LABEL_102;
      v15 = *(_QWORD *)v75 == 0x654C5870616D463CLL && *(_WORD *)(v75 + 8) == 15982;
      v9 = (int *)(a1 + 104);
      if (v15)
        goto LABEL_131;
      v11 = *((_QWORD *)&v75 + 1);
      if (*((_QWORD *)&v75 + 1) != 10)
        goto LABEL_102;
      v16 = *(_QWORD *)v75 == 0x654C5970616D463CLL && *(_WORD *)(v75 + 8) == 15982;
      v9 = (int *)(a1 + 108);
      if (v16)
        goto LABEL_131;
      if (v76 < 0)
      {
        v27 = *(_QWORD *)v75 == 0x654C58746C69463CLL && *(_WORD *)(v75 + 8) == 15982;
        v9 = (int *)(a1 + 112);
        if (v27)
          goto LABEL_131;
        v11 = *((_QWORD *)&v75 + 1);
        v28 = *(_QWORD *)v75 == 0x654C59746C69463CLL && *(_WORD *)(v75 + 8) == 15982;
        v9 = (int *)(a1 + 116);
        if (v28)
          goto LABEL_131;
        if (v76 < 0)
        {
LABEL_102:
          if (v11 == 11)
          {
            v29 = *(_QWORD *)v75 == 0x745358746C69463CLL && *(_QWORD *)(v75 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v29)
              goto LABEL_131;
            v11 = *((_QWORD *)&v75 + 1);
            if (*((_QWORD *)&v75 + 1) == 11)
            {
              v30 = *(_QWORD *)v75 == 0x745359746C69463CLL && *(_QWORD *)(v75 + 3) == 0x3E7065745359746CLL;
              v9 = (int *)(a1 + 124);
              if (v30)
                goto LABEL_131;
              if ((v76 & 0x8000000000000000) == 0)
                goto LABEL_113;
            }
          }
          if (v11 != 6)
            goto LABEL_126;
          v31 = *(_DWORD *)v75 == 1684099132 && *(_WORD *)(v75 + 4) == 15960;
          v9 = (int *)(a1 + 128);
          if (v31)
            goto LABEL_131;
LABEL_120:
          if (*((_QWORD *)&v75 + 1) != 6)
            goto LABEL_126;
          v10 = (__int128 *)v75;
        }
        else
        {
LABEL_113:
          if (HIBYTE(v76) != 6)
            goto LABEL_126;
LABEL_5:
          v8 = (_DWORD)v75 == 1684099132 && WORD2(v75) == 15960;
          v9 = (int *)(a1 + 128);
          if (v8)
            goto LABEL_131;
          if (v76 < 0)
            goto LABEL_120;
          if (HIBYTE(v76) != 6)
            goto LABEL_126;
          v10 = &v75;
        }
        v32 = *(_DWORD *)v10;
        v33 = *((unsigned __int16 *)v10 + 2);
        v34 = v32 == 1684099132 && v33 == 15961;
        v9 = (int *)(a1 + 132);
        if (v34)
          goto LABEL_131;
        goto LABEL_126;
      }
      if (HIBYTE(v76) == 6)
        goto LABEL_5;
      if (HIBYTE(v76) != 10)
        goto LABEL_126;
    }
    else
    {
      switch(HIBYTE(v76))
      {
        case 6:
          goto LABEL_5;
        case 0xA:
          if ((_QWORD)v75 == 0x61654D736169423CLL && WORD4(v75) == 15982)
            goto LABEL_90;
          if (HIBYTE(v76) != 6)
            goto LABEL_65;
          goto LABEL_5;
        case 0xB:
          if ((_QWORD)v75 == 0x6E6152736169423CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E65676E61527361)
            goto LABEL_91;
          if (HIBYTE(v76) == 6)
            goto LABEL_5;
          if (HIBYTE(v76) == 11)
          {
            v18 = (_QWORD)v75 == 0x745358746C69463CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E7065745358746CLL;
            v9 = (int *)(a1 + 120);
            if (v18)
              goto LABEL_131;
            v19 = (_QWORD)v75 == 0x745359746C69463CLL && *(_QWORD *)((char *)&v75 + 3) == 0x3E7065745359746CLL;
            v9 = (int *)(a1 + 124);
            if (v19)
              goto LABEL_131;
            goto LABEL_126;
          }
LABEL_65:
          if (HIBYTE(v76) != 10)
            goto LABEL_126;
          v21 = (_QWORD)v75 == 0x654C5870616D463CLL && WORD4(v75) == 15982;
          v9 = (int *)(a1 + 104);
          if (v21)
            goto LABEL_131;
          v22 = (_QWORD)v75 == 0x654C5970616D463CLL && WORD4(v75) == 15982;
          v9 = (int *)(a1 + 108);
          if (v22)
            goto LABEL_131;
          break;
        case 0xD:
          if ((_QWORD)v75 != 0x74536D617261503CLL || *(_QWORD *)((char *)&v75 + 5) != 0x3E7665646474536DLL)
            goto LABEL_126;
          goto LABEL_89;
        default:
          goto LABEL_126;
      }
    }
    v23 = (_QWORD)v75 == 0x654C58746C69463CLL && WORD4(v75) == 15982;
    v9 = (int *)(a1 + 112);
    if (v23)
      goto LABEL_131;
    v24 = (_QWORD)v75 == 0x654C59746C69463CLL && WORD4(v75) == 15982;
    v9 = (int *)(a1 + 116);
    if (v24)
      goto LABEL_131;
LABEL_126:
    v35 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<LearnRateCoef>");
    v26 = (float *)(a1 + 136);
    if (v35)
      goto LABEL_128;
    v36 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<BiasLearnRateCoef>");
    v26 = (float *)(a1 + 140);
    if (v36)
      goto LABEL_128;
    if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<RandomSeed>"))
    {
      v9 = &v77;
LABEL_131:
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v9);
      goto LABEL_132;
    }
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<GradientNormType>"))
      break;
    kaldi::ReadToken(a2, 0, (uint64_t)&v78);
LABEL_132:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v37 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "<MaxGrad>");
  v26 = (float *)(a1 + 148);
  if (v37)
    goto LABEL_128;
  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v75, "</Component>"))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"Unknown token ", 14);
    if (v76 >= 0)
      v62 = &v75;
    else
      v62 = (__int128 *)v75;
    if (v76 >= 0)
      v63 = HIBYTE(v76);
    else
      v63 = *((_QWORD *)&v75 + 1);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)v62, v63);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", a typo in config?", 19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" (ParamStddev|BiasMean|BiasRange|FmapXLen|FmapYLen|FiltXLen|FiltYLen|FiltXStep|FiltYStep|ConnectFmap|LearnRateCoef|BiasLearnRateCoef|RandomSeed|GradientNormType|MaxGrad)", 169);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
LABEL_137:
  *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v78);
  v38 = *(_DWORD *)(a1 + 8);
  v40 = *(_DWORD *)(a1 + 104);
  v39 = *(_DWORD *)(a1 + 108);
  v41 = v38 / (v39 * v40);
  if (v38 % (v39 * v40))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0", 45);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
  v42 = (v40 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v43 = *(_DWORD *)(a1 + 12);
  v44 = v42 + v42 * ((v39 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v45 = (v43 / v44);
  if (v43 % v44)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v71);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0", 52);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v71);
  }
  if (v77 >= 1)
    kaldi::UniformRandomNumber::SetRandomSeeds(a3, v77);
  kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v71, a3);
  kaldi::Matrix<float>::Matrix((uint64_t)v69, v45, (*v7 * v41 * *v6), 0, 0);
  if ((int)v45 >= 1)
  {
    v46 = 0;
    v47 = *v7;
    v48 = *v6;
    do
    {
      if (v47 * v41 * v48 >= 1)
      {
        v49 = 0;
        do
        {
          v50 = *(float *)&v79;
          kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v71, 0);
          *((float *)v69[0] + v46 * v70 + v49++) = v50 * v51;
          v47 = *v7;
          v48 = *v6;
        }
        while (v49 < *v7 * v41 * *v6);
      }
      ++v46;
    }
    while (v46 != (_DWORD)v45);
  }
  v52 = kaldi::MatrixBase<float>::NumRows((uint64_t)v69);
  v53 = kaldi::MatrixBase<float>::NumCols((uint64_t)v69);
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>(v52, v53, (uint64_t *)&v66);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)v66);
  kaldi::QuantizedMatrixBase<short>::CopyFromMat(*(_QWORD *)(a1 + 184), (uint64_t)v69);
  v66 = 0;
  v67 = 0;
  v68 = 0;
  kaldi::Vector<float>::Resize((void **)&v66, v45, 0);
  if ((int)v45 >= 1)
  {
    for (i = 0; i != v45; ++i)
    {
      v55 = *(float *)&v81;
      v56 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
      v57 = v55 + (v56 + -0.5) * v80;
      v66[i] = v57;
    }
  }
  v58 = (_QWORD *)operator new();
  v59 = v67;
  v58[2] = 0;
  v58[3] = 0;
  *v58 = &unk_1E5D341C8;
  v58[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v58, v59, 1);
  v60 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v58;
  if (v60)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 16))(v60);
    v58 = *(_QWORD **)(a1 + 192);
  }
  kaldi::CuVectorBase<float>::CopyFromVec<float>(v58, (uint64_t)&v66);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  kaldi::Vector<float>::Destroy((uint64_t)&v66);
  kaldi::Matrix<float>::~Matrix((uint64_t)v69);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  v69[0] = (void **)&v72;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v69);
  if (SHIBYTE(v76) < 0)
    operator delete((void *)v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
}

void sub_1ADF9F3C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 153) < 0)
    operator delete(*(void **)(v1 - 176));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = kaldi::QuantizedMatrix<short>::QuantizedMatrix(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADF9F468(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D0C4068EB0291);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(uint64_t a1)
{
  void *v2;
  size_t v3;
  size_t v4;
  int v5;
  int v6;
  size_t v7;
  size_t v8;
  size_t v9;
  size_t v10;
  size_t v11;
  size_t v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  const void *v18;
  int v19;
  void *result;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[5];
  BNNSFilterParameters v24;
  BNNSFilterParameters filter_params;
  BNNSConvolutionLayerParameters layer_params;
  BNNSImageStackDescriptor out_desc;
  BNNSImageStackDescriptor in_desc;

  v2 = *(void **)(a1 + 152);
  if (v2)
  {
    BNNSFilterDestroy(v2);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v3 = *(int *)(a1 + 104);
  v4 = *(int *)(a1 + 108);
  v5 = *(_DWORD *)(a1 + 12);
  v6 = *(_DWORD *)(a1 + 8) / ((int)v4 * (int)v3);
  v7 = *(int *)(a1 + 128);
  v8 = *(int *)(a1 + 132);
  v9 = *(int *)(a1 + 112);
  v10 = *(int *)(a1 + 116);
  v11 = *(int *)(a1 + 120);
  v12 = *(int *)(a1 + 124);
  v13 = ((int)v3 + 2 * (int)v7 - (int)v9) / (int)v11 + 1;
  v14 = ((int)v4 + 2 * (int)v8 - (int)v10) / (int)v12 + 1;
  in_desc.width = v3;
  in_desc.height = v4;
  in_desc.channels = v6;
  in_desc.row_stride = v3;
  in_desc.image_stride = (int)v4 * (int)v3;
  in_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&in_desc.data_scale = 1065353216;
  out_desc.width = v13;
  out_desc.height = v14;
  out_desc.channels = v5 / (v14 * v13);
  out_desc.row_stride = v13;
  out_desc.image_stride = v14 * v13;
  out_desc.data_type = BNNSDataTypeFloat32;
  *(_QWORD *)&out_desc.data_scale = 1065353216;
  memset(&layer_params.weights.data_bias, 0, 96);
  layer_params.x_stride = v11;
  layer_params.y_stride = v12;
  layer_params.x_padding = v7;
  layer_params.y_padding = v8;
  layer_params.k_width = v9;
  layer_params.k_height = v10;
  layer_params.in_channels = v6;
  layer_params.out_channels = out_desc.channels;
  layer_params.weights.data_type = BNNSDataTypeInt16;
  layer_params.weights.data = (const void *)kaldi::QuantizedMatrixBase<signed char>::Data(*(_QWORD *)(a1 + 184));
  v15 = *(_QWORD *)(a1 + 184);
  v16 = *(_QWORD *)(a1 + 192);
  v17 = *(float *)(v15 + 12);
  layer_params.bias.data_type = BNNSDataTypeFloat32;
  layer_params.weights.data_scale = 1.0 / v17;
  layer_params.weights.data_bias = 0.0;
  layer_params.weights.data_table = 0;
  v18 = *(const void **)(v16 + 8);
  *(_QWORD *)&layer_params.bias.data_scale = 1065353216;
  layer_params.bias.data = v18;
  layer_params.bias.data_table = 0;
  layer_params.activation.function = BNNSActivationFunctionIdentity;
  kaldi::QuantizedMatrixBase<short>::NumCols(v15);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v19 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  if (v19 == kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)))
  {
    filter_params = *(BNNSFilterParameters *)ymmword_1AE1902B0;
    result = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &filter_params);
    *(_QWORD *)(a1 + 152) = result;
  }
  else
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"Unsupported BNNS filter weight arrangement", 42);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    memset(&v24, 0, sizeof(v24));
    v21 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
    v22 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::Matrix<float>::Matrix((uint64_t)v23, v21, v22, 1, 1);
    kaldi::MatrixBase<float>::CopyFromMat<short>((uint64_t)v23, *(float **)(a1 + 184), 111);
    LODWORD(v21) = kaldi::MatrixBase<float>::NumCols((uint64_t)v23);
    if ((_DWORD)v21 != fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>::Start((uint64_t)v23)
      && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&filter_params);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&filter_params, (uint64_t)"It did not work", 15);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&filter_params);
    }
    layer_params.weights.data = (const void *)v23[0];
    *(_QWORD *)(a1 + 152) = BNNSFilterCreateConvolutionLayer(&in_desc, &out_desc, &layer_params, &v24);
    return (void *)kaldi::Matrix<float>::~Matrix((uint64_t)v23);
  }
  return result;
}

void sub_1ADF9F710(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)va1);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  BOOL v8;
  float *v9;
  void *v10;
  BOOL v11;
  BOOL v13;
  BOOL v16;
  BOOL v17;
  uint64_t v18;
  BOOL v19;
  BOOL v21;
  BOOL v24;
  BOOL v25;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  BOOL v33;
  BOOL v34;
  int v35;
  int v36;
  BOOL v37;
  _BOOL4 v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  void **v54;
  uint64_t v55;
  void *__p[2];
  uint64_t v58;
  void *v59[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v59, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v59);
    if ((SHIBYTE(v59[2]) & 0x80000000) == 0)
    {
      v7 = v59;
      switch(HIBYTE(v59[2]))
      {
        case 6:
          goto LABEL_133;
        case 9:
LABEL_4:
          v8 = v59[0] == (void *)0x6461724778614D3CLL && LOBYTE(v59[1]) == 62;
          v9 = (float *)(a1 + 148);
          if (!v8)
            goto LABEL_8;
          goto LABEL_109;
        case 0xA:
LABEL_69:
          v24 = v59[0] == (void *)0x654C5870616D463CLL && LOWORD(v59[1]) == 15982;
          v18 = a1 + 104;
          if (v24)
            goto LABEL_138;
          if (HIBYTE(v59[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v59[2]) != 10)
            goto LABEL_137;
          v25 = v59[0] == (void *)0x654C5970616D463CLL && LOWORD(v59[1]) == 15982;
          v18 = a1 + 108;
          if (!v25)
            goto LABEL_79;
          goto LABEL_138;
        case 0xB:
LABEL_89:
          v28 = v59[0] == (void *)0x745358746C69463CLL && *(void **)((char *)v59 + 3) == (void *)0x3E7065745358746CLL;
          v18 = a1 + 120;
          if (v28)
            goto LABEL_138;
          if (HIBYTE(v59[2]) == 6)
            goto LABEL_101;
          if (HIBYTE(v59[2]) != 11)
            goto LABEL_137;
          v29 = v59[0] == (void *)0x745359746C69463CLL && *(void **)((char *)v59 + 3) == (void *)0x3E7065745359746CLL;
          v18 = a1 + 124;
          if (!v29)
            goto LABEL_137;
          goto LABEL_138;
        case 0xF:
          v30 = v59[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v59 + 7) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 136);
          if (!v30)
            goto LABEL_137;
          goto LABEL_109;
        case 0x12:
LABEL_61:
          if (v59[0] != (void *)0x6E6569646172473CLL
            || v59[1] != (void *)0x7079546D726F4E74
            || LOWORD(v59[2]) != 15973)
          {
            v7 = v59;
            switch(HIBYTE(v59[2]))
            {
              case 6:
                goto LABEL_133;
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              default:
                goto LABEL_137;
            }
          }
          goto LABEL_102;
        case 0x13:
          v21 = v59[0] == (void *)0x61654C736169423CLL
             && v59[1] == (void *)0x6F43657461526E72
             && *(void **)((char *)&v59[1] + 3) == (void *)0x3E66656F43657461;
          v9 = (float *)(a1 + 140);
          if (!v21)
          {
            switch(HIBYTE(v59[2]))
            {
              case 9:
                goto LABEL_4;
              case 0xA:
                goto LABEL_69;
              case 0xB:
                goto LABEL_89;
              case 0xC:
              case 0xD:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
                goto LABEL_137;
              case 0x12:
                goto LABEL_61;
              default:
                goto LABEL_8;
            }
          }
          goto LABEL_109;
        default:
          goto LABEL_137;
      }
    }
    v10 = v59[1];
    if (v59[1] == (void *)15)
    {
      v11 = *(_QWORD *)v59[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v59[0] + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 136);
      if (v11)
        goto LABEL_109;
    }
    if (v59[1] == (void *)19)
    {
      v13 = *(_QWORD *)v59[0] == 0x61654C736169423CLL
         && *((_QWORD *)v59[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v59[0] + 11) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 140);
      if (v13)
        goto LABEL_109;
      v10 = v59[1];
    }
    if (v10 == (void *)18)
    {
      if (*(_QWORD *)v59[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v59[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v59[0] + 8) == 15973)
      {
LABEL_102:
        __p[0] = 0;
        __p[1] = 0;
        v58 = 0;
        kaldi::ReadToken(a2, a3, (uint64_t)__p);
        *(_DWORD *)(a1 + 144) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
        if (SHIBYTE(v58) < 0)
          operator delete(__p[0]);
        goto LABEL_139;
      }
      v10 = v59[1];
    }
    if (v10 != (void *)9)
      goto LABEL_39;
    v16 = *(_QWORD *)v59[0] == 0x6461724778614D3CLL && *((_BYTE *)v59[0] + 8) == 62;
    v9 = (float *)(a1 + 148);
    if (!v16)
    {
      v10 = v59[1];
LABEL_39:
      if (v10 == (void *)10)
      {
        v17 = *(_QWORD *)v59[0] == 0x654C5870616D463CLL && *((_WORD *)v59[0] + 4) == 15982;
        v18 = a1 + 104;
        if (v17)
          goto LABEL_138;
        v10 = v59[1];
        if (v59[1] == (void *)10)
        {
          v19 = *(_QWORD *)v59[0] == 0x654C5970616D463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 108;
          if (v19)
            goto LABEL_138;
          if ((HIBYTE(v59[2]) & 0x80) == 0)
          {
            if (HIBYTE(v59[2]) != 6)
            {
              if (HIBYTE(v59[2]) != 10)
                goto LABEL_137;
LABEL_79:
              v26 = v59[0] == (void *)0x654C58746C69463CLL && LOWORD(v59[1]) == 15982;
              v18 = a1 + 112;
              if (!v26)
              {
                v27 = v59[0] == (void *)0x654C59746C69463CLL && LOWORD(v59[1]) == 15982;
                v18 = a1 + 116;
                if (!v27)
                  goto LABEL_137;
              }
LABEL_138:
              kaldi::ReadBasicType<int>(a2, a3, v18);
              goto LABEL_139;
            }
LABEL_101:
            v7 = v59;
LABEL_133:
            v35 = *(_DWORD *)v7;
            v36 = *((unsigned __int16 *)v7 + 2);
            v37 = v35 == 1684099132 && v36 == 15960;
            v18 = a1 + 128;
            if (!v37)
              goto LABEL_137;
            goto LABEL_138;
          }
          v31 = *(_QWORD *)v59[0] == 0x654C58746C69463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 112;
          if (v31)
            goto LABEL_138;
          v10 = v59[1];
          v32 = *(_QWORD *)v59[0] == 0x654C59746C69463CLL && *((_WORD *)v59[0] + 4) == 15982;
          v18 = a1 + 116;
          if (v32)
            goto LABEL_138;
          if ((HIBYTE(v59[2]) & 0x80) == 0)
            goto LABEL_8;
        }
      }
      if (v10 != (void *)11)
        goto LABEL_131;
      v33 = *(_QWORD *)v59[0] == 0x745358746C69463CLL && *(_QWORD *)((char *)v59[0] + 3) == 0x3E7065745358746CLL;
      v18 = a1 + 120;
      if (v33)
        goto LABEL_138;
      v10 = v59[1];
      if (v59[1] != (void *)11)
        goto LABEL_131;
      v34 = *(_QWORD *)v59[0] == 0x745359746C69463CLL && *(_QWORD *)((char *)v59[0] + 3) == 0x3E7065745359746CLL;
      v18 = a1 + 124;
      if (v34)
        goto LABEL_138;
      if ((HIBYTE(v59[2]) & 0x80) == 0)
      {
LABEL_8:
        if (HIBYTE(v59[2]) == 6)
          goto LABEL_101;
      }
      else
      {
LABEL_131:
        if (v10 == (void *)6)
        {
          v7 = (void **)v59[0];
          goto LABEL_133;
        }
      }
LABEL_137:
      v38 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v59, "<PadY>");
      v18 = a1 + 132;
      if (!v38)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v59[2]) >= 0)
          v54 = v59;
        else
          v54 = (void **)v59[0];
        if (SHIBYTE(v59[2]) >= 0)
          v55 = HIBYTE(v59[2]);
        else
          v55 = (uint64_t)v59[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)v54, v55);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
      goto LABEL_138;
    }
LABEL_109:
    kaldi::ReadBasicType<float>(a2, a3, v9);
LABEL_139:
    if (SHIBYTE(v59[2]) < 0)
      operator delete(v59[0]);
  }
  v39 = *(_DWORD *)(a1 + 8);
  v41 = *(_DWORD *)(a1 + 104);
  v40 = *(_DWORD *)(a1 + 108);
  v42 = v39 / (v40 * v41);
  if (v39 % (v40 * v41))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "input_dim_ % (fmap_x_len_ * fmap_y_len_) == 0");
    goto LABEL_152;
  }
  v43 = v41 + 2 * *(_DWORD *)(a1 + 128);
  v44 = *(_DWORD *)(a1 + 112);
  v45 = *(_DWORD *)(a1 + 116);
  v46 = (v43 - v44) / *(_DWORD *)(a1 + 120) + 1;
  v47 = *(_DWORD *)(a1 + 12);
  v48 = v46 + v46 * ((v40 + 2 * *(_DWORD *)(a1 + 132) - v45) / *(_DWORD *)(a1 + 124));
  v49 = (v47 / v48);
  if (v47 % v48)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "output_dim_ % (out_fmap_x_len * out_fmap_y_len) == 0");
LABEL_152:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  kaldi::nnet1::NewMatrix<kaldi::QuantizedMatrix<short>>(v49, (v44 * v42 * v45), (uint64_t *)__p);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), (uint64_t)__p[0]);
  kaldi::QuantizedMatrix<short>::Read(*(float **)(a1 + 184), a2, a3, a4);
  v50 = (_QWORD *)operator new();
  v50[2] = 0;
  v50[3] = 0;
  *v50 = &unk_1E5D341C8;
  v50[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v50, v49, 1);
  v51 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v50;
  if (v51)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v51 + 16))(v51);
    v50 = *(_QWORD **)(a1 + 192);
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))*v50)(v50, a2, a3);
  if (kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184)) != (_DWORD)v49
    || kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) != *(_DWORD *)(a1 + 112)
                                                                                        * v42
                                                                                        * *(_DWORD *)(a1 + 116))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "filters_->NumRows() == num_output_fmaps && filters_->NumCols() == num_input_fmaps * filt_x_len_ * filt_y_len_");
    goto LABEL_152;
  }
  *(_BYTE *)(a1 + 16) = 0;
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 144), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FmapYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYLen>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltXStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<FiltYStep>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadX>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<PadY>");
  return kaldi::WriteBasicType<int>(a2, a3);
}

void sub_1ADFA02AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::WriteData(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 168))(a1);
  kaldi::QuantizedMatrix<short>::Write(*(int **)(a1 + 184), a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(*(_QWORD *)(a1 + 192), a2, a3);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NumParams(uint64_t a1)
{
  int v2;

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  return *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16)
       + kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v2;
}

const void **kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetParams(uint64_t a1, void **a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat<short>((uint64_t *)&v10, *(float **)(a1 + 184));
  v7 = *(_QWORD *)(a1 + 192);
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetParams(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int *v7;
  _DWORD *v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_DWORD *)(a2 + 8);
  if (v4 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v11, "wei_src.Dim() == NumParams()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v11);
  }
  v5 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v6 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v5;
  v7 = *(unsigned int **)(a1 + 184);
  v12 = 0;
  v13 = 0;
  v11 = *(char **)a2;
  LODWORD(v12) = v6;
  kaldi::QuantizedMatrixBase<short>::CopyRowsFromVec(v7, &v11);
  v8 = *(_DWORD **)(a1 + 192);
  v9 = v8[4];
  v12 = 0;
  v13 = 0;
  v11 = (char *)(*(_QWORD *)a2 + 4 * v6);
  LODWORD(v12) = v9;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v8, (uint64_t)&v11);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SumParams(uint64_t a1)
{
  float v2;

  v2 = kaldi::QuantizedMatrixBase<short>::Sum(*(int **)(a1 + 184));
  return v2 + kaldi::CuVectorBase<float>::Sum(*(_QWORD *)(a1 + 192));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PerturbParams(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int32x2_t v4[6];

  v2 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v3 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  kaldi::CuMatrix<float>::CuMatrix(v4, v2, v3, 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v4);
  kaldi::QuantizedMatrixBase<short>::AddMat();
}

uint64_t sub_1ADFA057C()
{
  uint64_t v0;
  float v1;
  uint64_t v2;
  _QWORD v4[4];
  uint64_t v5;

  v2 = *(unsigned int *)(*(_QWORD *)(v0 + 192) + 16);
  v4[0] = &unk_1E5D341C8;
  memset(&v4[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v4, v2, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v4);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(v0 + 192), (uint64_t)v4, v1, 1.0);
  v4[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v4);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v5);
}

void sub_1ADFA05F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Info(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  unsigned __int8 v16;
  _QWORD v17[11];
  char v18;
  uint64_t v19;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 168))(a1, v17, 0);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" OutSizeX:", 10);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" OutSizeY:", 10);
  v3 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" InFmaps:", 9);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" OutFmaps:", 10);
  std::ostream::operator<<();
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"\n filters: ", 11);
  kaldi::nnet1::MomentStatistics<short>(*(kaldi::quasar::Vocab **)(a1 + 184));
  if ((v16 & 0x80u) == 0)
    v6 = v15;
  else
    v6 = (void **)v15[0];
  if ((v16 & 0x80u) == 0)
    v7 = v16;
  else
    v7 = (uint64_t)v15[1];
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"\n bias: ", 8);
  kaldi::nnet1::MomentStatistics<float>(*(_QWORD *)(a1 + 192));
  if ((v14 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v14 & 0x80u) == 0)
    v11 = v14;
  else
    v11 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
  if ((char)v14 < 0)
    operator delete(__p[0]);
  if ((char)v16 < 0)
    operator delete(v15[0]);
  std::stringbuf::str();
  v17[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v17[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v18 < 0)
    operator delete((void *)v17[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v19);
}

void sub_1ADFA0844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::ostringstream::~ostringstream((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InfoGradient(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  void *__p[2];
  unsigned __int8 v26;
  void *v27[2];
  unsigned __int8 v28;
  void *v29[2];
  unsigned __int8 v30;
  void *v31[2];
  unsigned __int8 v32;
  std::string v33;
  std::string v34;
  std::string v35;
  std::string v36;
  std::string v37;
  std::string v38;
  std::string v39;

  std::string::basic_string[abi:ne180100]<0>(&v33, "\n  ");
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 200));
  if ((v32 & 0x80u) == 0)
    v4 = v31;
  else
    v4 = (void **)v31[0];
  if ((v32 & 0x80u) == 0)
    v5 = v32;
  else
    v5 = (std::string::size_type)v31[1];
  v6 = std::string::append(&v33, (const std::string::value_type *)v4, v5);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v34, ", lr-coef ");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v30 & 0x80u) == 0)
    v10 = v29;
  else
    v10 = (void **)v29[0];
  if ((v30 & 0x80u) == 0)
    v11 = v30;
  else
    v11 = (std::string::size_type)v29[1];
  v12 = std::string::append(&v35, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v36.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v36, "\n  bias_grad");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v37.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::MomentStatistics<float>((_QWORD *)(a1 + 224));
  if ((v28 & 0x80u) == 0)
    v16 = v27;
  else
    v16 = (void **)v27[0];
  if ((v28 & 0x80u) == 0)
    v17 = v28;
  else
    v17 = (std::string::size_type)v27[1];
  v18 = std::string::append(&v37, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v38.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v38, ", lr-coef ");
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v39.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v39.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  kaldi::nnet1::ToString<float>();
  if ((v26 & 0x80u) == 0)
    v22 = __p;
  else
    v22 = (void **)__p[0];
  if ((v26 & 0x80u) == 0)
    v23 = v26;
  else
    v23 = (std::string::size_type)__p[1];
  v24 = std::string::append(&v39, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((char)v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if ((char)v28 < 0)
    operator delete(v27[0]);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if ((char)v30 < 0)
    operator delete(v29[0]);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1ADFA0B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_1ADFA0C24()
{
  JUMPOUT(0x1ADFA0BFCLL);
}

void sub_1ADFA0C2C()
{
  JUMPOUT(0x1ADFA0C0CLL);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 || !*(_BYTE *)(a1 + 17))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(a1, a2, a3, a4);
  else
    BNNSFilterApplyBatch(*(void **)(a1 + 152), *(int *)(a2 + 20), *(const void **)(a2 + 8), *(int *)(a2 + 24), *(void **)(a3 + 8), *(int *)(a3 + 24));
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::PropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  uint64_t v27;
  std::vector<int>::pointer end;
  int v29;
  int v30;
  int v31;
  int i;
  int v33;
  int v34;
  int v35;
  int *value;
  int v37;
  int v38;
  std::vector<int>::pointer begin;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  int *v45;
  int *v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  int64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int *v59;
  double v60;
  uint64_t v61;
  uint64x2_t v62;
  int64x2_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  int *v68;
  uint64_t v69;
  int v70;
  int64x2_t v71;
  int32x2_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  int v76;
  int v77;
  uint64_t *v79;
  int v80;
  uint64_t v81;
  uint64_t *v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  std::vector<int> __p[2];

  v7 = *(_DWORD *)(a1 + 104);
  v8 = *(_DWORD *)(a1 + 108);
  v76 = (v7 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v75 = (v8 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v73 = (v76 + 1);
  v74 = (v75 + 1);
  v80 = v74 * v73;
  v9 = *(_DWORD *)(a1 + 8);
  v77 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v81 = a2;
  v10 = *(unsigned int *)(a2 + 20);
  v82 = (uint64_t *)(a1 + 296);
  v11 = *(_QWORD *)(a1 + 296);
  v12 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 304) - v11) >> 3) < v12)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(v82, v12);
    v11 = *v82;
  }
  v13 = a4;
  v14 = (uint64_t *)(v11 + 24 * a4);
  if (0xAAAAAAAAAAAAAAABLL * ((v14[1] - *v14) >> 4) < v80)
    std::vector<kaldi::CuMatrix<float>>::resize(v14, v80);
  if (v80 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = (int32x2_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v13) + v15);
      v17 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuMatrix<float>::Resize(v16, v10, v17, 0, 0);
      v15 += 48;
    }
    while (48 * v80 != v15);
  }
  v79 = (uint64_t *)(a1 + 160);
  v18 = *(int *)(a1 + 80);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 4) < v18)
    std::vector<kaldi::CuMatrix<float>>::resize(v79, v18);
  v19 = *(_DWORD *)(a1 + 132);
  v20 = *(_DWORD *)(a1 + 108);
  v21 = *(_DWORD *)(a1 + 116);
  v86 = -v19;
  v83 = v13;
  if (v19 + v20 - v21 < -v19)
    goto LABEL_65;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 128);
  v24 = *(_DWORD *)(a1 + 104);
  v25 = *(_DWORD *)(a1 + 112);
  v85 = v9 / (v8 * v7);
  do
  {
    v26 = -v23;
    if (v23 + v24 - v25 < -v23)
      goto LABEL_64;
    v27 = v22;
    do
    {
      v84 = v27;
      memset(__p, 0, 24);
      if (v85 < 1)
        goto LABEL_60;
      end = 0;
      v29 = 0;
      v30 = v26 + v24 * v86;
      v31 = *(_DWORD *)(a1 + 116);
      do
      {
        if (v31 < 1)
          goto LABEL_59;
        for (i = 0; i < v31; ++i)
        {
          if (v25 < 1)
            continue;
          v33 = 0;
          v34 = i + v86;
          do
          {
            if (v34 < 0 || (v35 = *(_DWORD *)(a1 + 108), v34 >= v35))
            {
              value = __p[0].__end_cap_.__value_;
            }
            else
            {
              value = __p[0].__end_cap_.__value_;
              if (v33 + v26 >= 0)
              {
                v37 = *(_DWORD *)(a1 + 104);
                if (v33 + v26 < v37)
                {
                  v38 = v30 + v33 + (i + v35 * v29) * v37;
                  if (end < __p[0].__end_cap_.__value_)
                  {
                    *end++ = v38;
                    goto LABEL_56;
                  }
                  begin = __p[0].__begin_;
                  v48 = end - __p[0].__begin_;
                  v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  v50 = (char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_;
                  if (((char *)__p[0].__end_cap_.__value_ - (char *)__p[0].__begin_) >> 1 > v49)
                    v49 = v50 >> 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                    v43 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v43 = v49;
                  if (v43)
                  {
                    v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
                    begin = __p[0].__begin_;
                    end = __p[0].__end_;
                  }
                  else
                  {
                    v44 = 0;
                  }
                  v45 = (int *)&v44[4 * v48];
                  *v45 = v38;
                  v46 = v45 + 1;
                  while (end != begin)
                  {
                    v51 = *--end;
                    *--v45 = v51;
                  }
                  goto LABEL_53;
                }
              }
            }
            if (end < value)
            {
              *end++ = -1;
              goto LABEL_56;
            }
            begin = __p[0].__begin_;
            v40 = end - __p[0].__begin_;
            v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v42 = (char *)value - (char *)__p[0].__begin_;
            if (v42 >> 1 > v41)
              v41 = v42 >> 1;
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
              v43 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v43 = v41;
            if (v43)
            {
              v44 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&__p[0].__end_cap_, v43);
              begin = __p[0].__begin_;
              end = __p[0].__end_;
            }
            else
            {
              v44 = 0;
            }
            v45 = (int *)&v44[4 * v40];
            *v45 = -1;
            v46 = v45 + 1;
            while (end != begin)
            {
              v47 = *--end;
              *--v45 = v47;
            }
LABEL_53:
            __p[0].__begin_ = v45;
            __p[0].__end_ = v46;
            __p[0].__end_cap_.__value_ = (int *)&v44[4 * v43];
            if (begin)
              operator delete(begin);
            end = v46;
LABEL_56:
            __p[0].__end_ = end;
            ++v33;
            v25 = *(_DWORD *)(a1 + 112);
          }
          while (v33 < v25);
          v31 = *(_DWORD *)(a1 + 116);
        }
LABEL_59:
        ++v29;
      }
      while (v29 != v85);
LABEL_60:
      v13 = v83;
      kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(*v82 + 24 * v83) + 48 * v84, v81, (uint64_t *)__p);
      if (__p[0].__begin_)
      {
        __p[0].__end_ = __p[0].__begin_;
        operator delete(__p[0].__begin_);
      }
      v27 = v84 + 1;
      v26 += *(_DWORD *)(a1 + 120);
      v24 = *(_DWORD *)(a1 + 104);
      v23 = *(_DWORD *)(a1 + 128);
      v25 = *(_DWORD *)(a1 + 112);
    }
    while (v26 <= v23 + v24 - v25);
    v20 = *(_DWORD *)(a1 + 108);
    v19 = *(_DWORD *)(a1 + 132);
    v22 = v84 + 1;
    v21 = *(_DWORD *)(a1 + 116);
LABEL_64:
    v86 += *(_DWORD *)(a1 + 124);
  }
  while (v86 <= v19 + v20 - v21);
LABEL_65:
  v52 = (v77 / v80);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*v79 + 48 * v13), *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 3, 0);
  if (v80 >= 1)
  {
    v53 = 0;
    v54 = 0;
    v55 = 0;
    v56 = 0;
    do
    {
      v57 = *(_QWORD *)(a1 + 160) + 48 * v83;
      v58 = v55 + *(_DWORD *)(v57 + 28);
      v59 = *(int **)(v57 + 32);
      __p[0].__end_ = (std::vector<int>::pointer)(*(_QWORD *)(v57 + 8) + v54);
      LODWORD(__p[0].__end_cap_.__value_) = v77 / v80;
      *(int **)((char *)&__p[0].__end_cap_.__value_ + 4) = *(int **)(v57 + 20);
      HIDWORD(__p[1].__begin_) = v58;
      __p[1].__end_ = v59;
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddVecToRows((uint64_t)__p, *(_QWORD *)(a1 + 192), 1.0, 0.0);
      LODWORD(v60) = 1.0;
      kaldi::CuMatrixBase<float>::AddMatMat<short>((uint64_t)__p, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * v83) + v53, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 112, v60, 1.0);
      __p[0].__begin_ = (std::vector<int>::pointer)&unk_1E5D29D40;
      memset(&__p[0].__end_, 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)__p);
      v56 += (int)v52;
      v55 -= v52;
      v54 += 4 * (int)v52;
      v53 += 48;
    }
    while (48 * v80 != v53);
  }
  std::vector<int>::vector(__p, *(int *)(a1 + 12));
  if ((int)v52 >= 1)
  {
    v61 = 0;
    v62 = (uint64x2_t)vdupq_n_s64(v73 - 1);
    v63 = vdupq_n_s64(2uLL);
    v64 = 1;
    do
    {
      if ((v75 & 0x80000000) == 0)
      {
        v65 = 0;
        v66 = &__p[0].__begin_[v64];
        v67 = v61;
        do
        {
          if ((v76 & 0x80000000) == 0)
          {
            v68 = v66;
            v69 = (v73 + 1) & 0x1FFFFFFFELL;
            v70 = v67;
            v71 = (int64x2_t)xmmword_1AE140A90;
            do
            {
              v72 = vmovn_s64((int64x2_t)vcgeq_u64(v62, (uint64x2_t)v71));
              if ((v72.i8[0] & 1) != 0)
                *(v68 - 1) = v70;
              if ((v72.i8[4] & 1) != 0)
                *v68 = v52 + v70;
              v71 = vaddq_s64(v71, v63);
              v70 += 2 * v52;
              v68 += 2;
              v69 -= 2;
            }
            while (v69);
          }
          ++v65;
          v67 += v52 * v73;
          v66 += v76 + 1;
        }
        while (v65 != v74);
      }
      ++v61;
      v64 += (int)v74 * (uint64_t)(int)v73;
    }
    while (v61 != v52);
  }
  kaldi::CuMatrixBase<float>::CopyCols(a3, *v79 + 48 * v83, (uint64_t *)__p);
  if (__p[0].__begin_)
  {
    __p[0].__end_ = __p[0].__begin_;
    operator delete(__p[0].__begin_);
  }
}

void sub_1ADFA133C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::BackpropagateCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  uint64_t v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  int *v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int j;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  kaldi::CuWorkspace *ChildWorkspace;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  uint64_t v71;
  int v72;
  int v73;
  _QWORD v74[5];
  void **v75;
  _QWORD v76[4];
  _QWORD v77[3];
  std::vector<int> v78;

  v68 = *(_DWORD *)(a1 + 104);
  v10 = (v68 + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120);
  v11 = v10 + 1;
  v67 = *(_DWORD *)(a1 + 108);
  v12 = (v67 + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124);
  v13 = (v12 + 1);
  v14 = v13 * (v10 + 1);
  v64 = *(_DWORD *)(a1 + 8);
  v15 = (*(_DWORD *)(a1 + 12) / v14);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v72 = *(_DWORD *)(a2 + 20);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 160) + 48 * a6), *(unsigned int *)(a4 + 20), *(unsigned int *)(a4 + 16), 3, 0);
  std::vector<int>::vector(&v78, *(int *)(a1 + 12));
  if ((int)v15 >= 1)
  {
    v16 = 0;
    v17 = 0;
    for (i = 0; i != v15; ++i)
    {
      if ((v12 & 0x80000000) == 0)
      {
        v19 = 0;
        v20 = &v78.__begin_[v17];
        v21 = v16;
        do
        {
          v22 = (v10 + 1);
          v23 = v21;
          v24 = v20;
          if ((v10 & 0x80000000) == 0)
          {
            do
            {
              *v24 = v23;
              v24 += v15;
              ++v23;
              --v22;
            }
            while (v22);
          }
          ++v19;
          v20 += v11 * v15;
          v21 += v11;
        }
        while (v19 != v13);
      }
      ++v17;
      v16 += v14;
    }
  }
  kaldi::CuMatrixBase<float>::CopyCols(*(_QWORD *)(a1 + 160) + 48 * a6, a4, (uint64_t *)&v78);
  std::vector<kaldi::CuSubMatrix<float>>::vector(v77, v14);
  v25 = *(_QWORD *)(a1 + 24);
  if (a6 >= (unint64_t)((*(_QWORD *)(a1 + 32) - v25) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v75, (uint64_t)"Convolutional2DComponent needs workspace set to perform back-propagation", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v75);
  }
  ChildWorkspace = (kaldi::CuWorkspace *)kaldi::CuWorkspace::GetChildWorkspace(*(kaldi::CuWorkspace **)(v25 + 8 * a6), -1);
  if (v14 >= 1)
  {
    v26 = v13 * v11;
    v27 = 0;
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v31 = 40 * v26;
    do
    {
      v32 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
      kaldi::CuWorkspace::GetMatrix<float>(ChildWorkspace, v72, v32, 0, (uint64_t)&v75);
      v33 = v77[0] + v27;
      if ((void ***)(v77[0] + v27) != &v75)
      {
        *(_QWORD *)(v33 + 8) = v76[0];
        *(_OWORD *)(v33 + 16) = *(_OWORD *)&v76[1];
        *(_QWORD *)(v33 + 32) = v76[3];
      }
      v75 = (void **)&unk_1E5D29D40;
      memset(v76, 0, sizeof(v76));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v34 = *(_QWORD *)(a1 + 160) + 48 * a6;
      v35 = v29 + *(_DWORD *)(v34 + 28);
      v36 = *(_QWORD *)(v34 + 32);
      v76[0] = *(_QWORD *)(v34 + 8) + v28;
      LODWORD(v76[1]) = v15;
      *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(v34 + 20);
      HIDWORD(v76[2]) = v35;
      v76[3] = v36;
      v75 = (void **)&unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat<short>(v77[0] + v27, (uint64_t)&v75, 111, *(kaldi::quasar::Vocab **)(a1 + 184), 111, COERCE_DOUBLE(__PAIR64__(v76[2], 1.0)), 0.0);
      v75 = (void **)&unk_1E5D29D40;
      memset(v76, 0, sizeof(v76));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
      v30 += (int)v15;
      v29 -= v15;
      v28 += 4 * (int)v15;
      v27 += 40;
    }
    while (v31 != v27);
  }
  v37 = *(_DWORD *)(a1 + 132);
  v38 = *(_DWORD *)(a1 + 108);
  v39 = *(_DWORD *)(a1 + 116);
  v66 = -v37;
  if (v37 + v38 - v39 >= -v37)
  {
    v40 = 0;
    v41 = *(_DWORD *)(a1 + 128);
    v42 = *(_DWORD *)(a1 + 104);
    v43 = *(_DWORD *)(a1 + 112);
    v63 = v64 / (v67 * v68);
    do
    {
      v44 = -v41;
      if (v41 + v42 - v43 >= -v41)
      {
        v71 = v40;
        do
        {
          if (v63 >= 1)
          {
            v73 = 0;
            v45 = 0;
            v46 = v42 * v66;
            v47 = v44;
            v69 = v44 + v46;
            v62 = v44;
            v65 = -v44 - v46;
            do
            {
              if (v39 >= 1)
              {
                for (j = 0; j < v39; ++j)
                {
                  if (v43 >= 1)
                  {
                    v49 = 0;
                    v50 = v65;
                    v51 = j + v66;
                    v52 = 4 * v45;
                    v53 = -v45;
                    do
                    {
                      if ((v51 & 0x80000000) == 0)
                      {
                        v54 = *(_DWORD *)(a1 + 108);
                        if (v51 < v54 && ((v47 + v49) & 0x80000000) == 0)
                        {
                          v55 = *(_DWORD *)(a1 + 104);
                          if (v47 + v49 < v55)
                          {
                            v56 = v77[0] + 40 * v71;
                            v57 = v53 + *(_DWORD *)(v56 + 28);
                            v58 = *(_QWORD *)(v56 + 32);
                            v76[0] = *(_QWORD *)(v56 + 8) + v52;
                            LODWORD(v76[1]) = 1;
                            *(_QWORD *)((char *)&v76[1] + 4) = *(_QWORD *)(v56 + 20);
                            HIDWORD(v76[2]) = v57;
                            v76[3] = v58;
                            LODWORD(v56) = v55 * (j + v73 * v54);
                            v59 = *(_QWORD *)(a5 + 8) + 4 * (v69 + v49 + v56);
                            LODWORD(v56) = v50 + *(_DWORD *)(a5 + 28) - v56;
                            v60 = *(_QWORD *)(a5 + 32);
                            LODWORD(v74[2]) = 1;
                            *(_QWORD *)((char *)&v74[2] + 4) = *(_QWORD *)(a5 + 20);
                            HIDWORD(v74[3]) = v56;
                            v74[4] = v60;
                            v75 = (void **)&unk_1E5D29D40;
                            v74[0] = &unk_1E5D29D40;
                            v74[1] = v59;
                            kaldi::CuMatrixBase<float>::AddMat((uint64_t)v74, (uint64_t)&v75, 111, 1.0, 1.0);
                            v74[0] = &unk_1E5D29D40;
                            memset(&v74[1], 0, 32);
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v74);
                            v75 = (void **)&unk_1E5D29D40;
                            memset(v76, 0, sizeof(v76));
                            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v75);
                            v43 = *(_DWORD *)(a1 + 112);
                          }
                        }
                      }
                      v52 += 4;
                      --v53;
                      ++v49;
                      --v50;
                    }
                    while (v49 < v43);
                    v45 = -v53;
                    v39 = *(_DWORD *)(a1 + 116);
                  }
                }
              }
              ++v73;
            }
            while (v73 != v63);
            v42 = *(_DWORD *)(a1 + 104);
            v41 = *(_DWORD *)(a1 + 128);
            v44 = v62;
          }
          ++v71;
          v44 += *(_DWORD *)(a1 + 120);
        }
        while (v44 <= v41 + v42 - v43);
        v38 = *(_DWORD *)(a1 + 108);
        v37 = *(_DWORD *)(a1 + 132);
        v40 = v71;
      }
      v66 += *(_DWORD *)(a1 + 124);
    }
    while (v66 <= v37 + v38 - v39);
  }
  if (ChildWorkspace)
  {
    kaldi::CuWorkspace::~CuWorkspace(ChildWorkspace);
    MEMORY[0x1AF44D190]();
  }
  v75 = (void **)v77;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v75);
  if (v78.__begin_)
  {
    v78.__end_ = v78.__begin_;
    operator delete(v78.__begin_);
  }
}

void sub_1ADFA199C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, kaldi::CuWorkspace *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  void *v26;

  a24 = v24 - 136;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a24);
  v26 = *(void **)(v24 - 112);
  if (v26)
  {
    *(_QWORD *)(v24 - 104) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 148) = a3;
  *(_DWORD *)(result + 144) = a2;
  *(_BYTE *)(result + 344) = 0;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::NormalizeGradients(uint64_t a1, int a2, float a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v9;

  v4 = a3;
  v6 = *(_DWORD *)(a1 + 144);
  if (v6 == 3)
  {
    if (a3 >= 0.0 && a3 <= 1.0)
    {
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), *(_QWORD *)(a1 + 248) + 48 * a2, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a2), *(_QWORD *)(a1 + 272) + 32 * a2, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a3 > 0.0)
    {
      v9 = a2;
      if (*(_BYTE *)(a1 + 84))
        v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), (int *)(*(_QWORD *)(a1 + 248) + 48 * a2), v4);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v9), (_QWORD *)(*(_QWORD *)(a1 + 272) + 32 * v9), v4);
    }
  }
  else if (v6 == 1 && a3 > 0.0)
  {
    v7 = a2;
    if (*(_BYTE *)(a1 + 84))
      v4 = (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * a2) * a3;
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a2), v4);
    kaldi::nnet1::UpdatableComponent::ClipGradient(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v7), v4);
  }
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(a1, a2, a3, a4, a5);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int32x2_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  int32x2_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(_BYTE *)(a1 + 344))
  {
    v2 = *(_DWORD *)(a1 + 144);
    v3 = *(_DWORD *)(a1 + 80);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)(a1 + 200);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 200, v4);
    v6 = (_QWORD *)(a1 + 224);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize(a1 + 224, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 248), v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)(a1 + 272), v4);
    if (v4 >= 1)
    {
      v7 = 0;
      v8 = v2 & 0xFFFFFFFE;
      do
      {
        v9 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
        v10 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
        v11 = (int32x2_t *)operator new();
        kaldi::CuMatrix<float>::CuMatrix(v11, v9, v10, 0, 0, 1);
        v12 = *(_QWORD *)(*v5 + 8 * v7);
        *(_QWORD *)(*v5 + 8 * v7) = v11;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
        v13 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
        v14 = (_QWORD *)operator new();
        v14[2] = 0;
        v14[3] = 0;
        *v14 = &unk_1E5D341C8;
        v14[1] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v14, v13, 0);
        v15 = *(_QWORD *)(*v6 + 8 * v7);
        *(_QWORD *)(*v6 + 8 * v7) = v14;
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
        if (v8 == 2)
        {
          v16 = (int32x2_t *)(*(_QWORD *)(a1 + 248) + 48 * v7);
          v17 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
          v18 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
          kaldi::CuMatrix<float>::Resize(v16, v17, v18, 1, 0);
          v19 = *(_QWORD *)(a1 + 272) + 32 * v7;
          v20 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
          kaldi::CuVector<float>::Resize(v19, v20, 1);
          if (*(_DWORD *)(a1 + 144) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*(_QWORD *)(a1 + 248) + 48 * v7, 1.0);
            kaldi::CuVectorBase<float>::Set(*(_QWORD *)(a1 + 272) + 32 * v7, 1.0);
          }
        }
        ++v7;
      }
      while (v7 != v4);
    }
    std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 320), v4);
    *(_BYTE *)(a1 + 344) = 1;
  }
}

void sub_1ADFA1E88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AccumGradientsCpu(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD v22[5];

  v9 = (*(_DWORD *)(a1 + 104) + 2 * *(_DWORD *)(a1 + 128) - *(_DWORD *)(a1 + 112)) / *(_DWORD *)(a1 + 120) + 1;
  v10 = v9 + v9 * ((*(_DWORD *)(a1 + 108) + 2 * *(_DWORD *)(a1 + 132) - *(_DWORD *)(a1 + 116)) / *(_DWORD *)(a1 + 124));
  v11 = *(_DWORD *)(a1 + 12);
  kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  *(_DWORD *)(*(_QWORD *)(a1 + 320) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v12 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(*(_QWORD *)(v12 + 8 * a5) + 32) = a4;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5) + 24) = a4;
  kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v12 + 8 * a5));
  kaldi::CuVectorBase<float>::SetZero(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5));
  if (v10 >= 1)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v11 / v10;
    v18 = 48 * v10;
    do
    {
      v19 = *(_QWORD *)(a1 + 160) + 48 * a5;
      v20 = v15 + *(_DWORD *)(v19 + 28);
      v21 = *(_QWORD *)(v19 + 32);
      v22[1] = *(_QWORD *)(v19 + 8) + v14;
      LODWORD(v22[2]) = v17;
      *(_QWORD *)((char *)&v22[2] + 4) = *(_QWORD *)(v19 + 20);
      HIDWORD(v22[3]) = v20;
      v22[4] = v21;
      v22[0] = &unk_1E5D29D40;
      kaldi::CuMatrixBase<float>::AddMatMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * a5), (uint64_t)v22, CblasTrans, *(_QWORD *)(*(_QWORD *)(a1 + 296) + 24 * a5) + v13, CblasNoTrans, 1.0, 1.0);
      kaldi::CuVectorBase<float>::AddRowSumMat(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * a5), (uint64_t)v22, 1.0, 1.0);
      v22[0] = &unk_1E5D29D40;
      memset(&v22[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v22);
      v16 += v17;
      v15 -= v17;
      v14 += 4 * v17;
      v13 += 48;
    }
    while (v18 != v13);
  }
}

void sub_1ADFA2094(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _OWORD *v12;

  a12 = &unk_1E5D29D40;
  *v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a12);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unsupported");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  int v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int32x2_t v14[6];
  int32x2_t v15[6];

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  kaldi::CuMatrix<float>::CuMatrix(v15, *(unsigned int *)(a3 + 20), *(unsigned int *)(a3 + 16), 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v14, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 0, 0, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 112))(v8, a2, v15, 0);
  (*(void (**)(uint64_t, uint64_t, int32x2_t *, uint64_t, int32x2_t *, _QWORD))(*(_QWORD *)v8 + 128))(v8, a2, v15, a3, v14, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  LODWORD(a3) = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * a3;
  kaldi::Vector<float>::Resize(a4, (*(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + a3), 0);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4;
  LODWORD(v12) = a3;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v11, **(_QWORD **)(v8 + 200));
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v12 = 0;
  v13 = 0;
  v11 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v12) = v9;
  kaldi::CuVectorBase<float>::CopyToVec<float>(**(const void ****)(v8 + 224), (uint64_t)&v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v14);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v15);
}

void sub_1ADFA227C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetNormalizedLearningRate(uint64_t a1, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v2 = *(_QWORD *)(a1 + 352);
  v3 = *(_QWORD *)(a1 + 360) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  int v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD v22[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  v6 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v7 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  result = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
  *a3 = v6 + result * v7;
  v9 = *(_QWORD *)(a1 + 200);
  v10 = *(_QWORD *)(a1 + 208) - v9;
  if (v10 && (v11 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) != 0)
  {
    v12 = v10 >> 3;
    v13 = v11 >> 3;
    v14 = *(_DWORD *)(a1 + 80);
    if (v14 == 1)
      v14 = 0;
    v15 = v14;
    v16 = v13 - 1;
    if (v12 - 1 != v14 || v16 != v14)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Unexpected mismatch in indexes: ", 32);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
      v21 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"  ", 2);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v18 = kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v9 + 8 * v14));
    result = kaldi::CuVectorBase<float>::CountZeros(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15));
    v19 = result + v18;
  }
  else
  {
    v19 = 0;
  }
  *a2 = v19;
  return result;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v8;
  unsigned int v9;
  unsigned int v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "Weights are already vectorized");
LABEL_29:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v38);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Performing vectorization of convolutional 2d component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
  v8 = kaldi::quasar::Vocab::VocabSize(*(kaldi::quasar::Vocab **)(a1 + 184));
  v9 = kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184)) * v8;
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_29;
  }
  v11 = *(int **)(a1 + 184);
  v12 = operator new();
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(v12, v11);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(a1 + 184), v12);
  v13 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v13;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v9;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 136));
  v14 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * (int)v9;
  *(_DWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 192), a2, &v38);
  v15 = v38;
  v38 = 0;
  v16 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v15;
  if (v16)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
    v17 = v38;
    v38 = 0;
    if (v17)
      (*(void (**)(void *))(*(_QWORD *)v17 + 16))(v17);
  }
  v18 = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
  v19 = *(_QWORD *)(a3 + 8);
  v38 = &unk_1E5D29D70;
  v39 = v19;
  v41 = *(_QWORD *)(a3 + 24);
  v40 = v18;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v38, *(float *)(a1 + 140));
  v20 = *(int *)(*(_QWORD *)(a1 + 192) + 16);
  v21 = *(_DWORD *)(a3 + 16) - v20;
  *(_QWORD *)(a3 + 8) += 4 * v20;
  *(_DWORD *)(a3 + 16) = v21;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  v22 = a4[1];
  v23 = (v22 - *a4) >> 5;
  if (v23 != (uint64_t)(*(_QWORD *)(a1 + 208) - *(_QWORD *)(a1 + 200)) >> 3
    || v23 != (uint64_t)(*(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "veccorrs->size() == filters_grad_.size() && veccorrs->size() == bias_grad_.size()");
    goto LABEL_29;
  }
  if (v22 == *a4)
    goto LABEL_25;
  v24 = 0;
  do
  {
    v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v24) + 16)
        + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 16)
        * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v24) + 20);
    if (v25 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v38, "(filters_grad_[ic]->NumRows() * filters_grad_[ic]->NumCols() + bias_grad_[ic]->Dim()) == NumParams()");
      goto LABEL_29;
    }
    ++v24;
    v26 = *a4;
    v27 = a4[1];
  }
  while (v24 < (v27 - *a4) >> 5);
  if (v27 != v26)
  {
    v28 = 0;
    do
    {
      v29 = v26 + 32 * v28;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 200) + 8 * v28), v29, (uint64_t *)&v38);
      v30 = *(_QWORD *)(a1 + 200);
      v31 = v38;
      v38 = 0;
      v32 = *(_QWORD *)(v30 + 8 * v28);
      *(_QWORD *)(v30 + 8 * v28) = v31;
      if (v32)
        (*(void (**)(uint64_t))(*(_QWORD *)v32 + 24))(v32);
      v33 = v38;
      v38 = 0;
      if (v33)
        (*(void (**)(void *))(*(_QWORD *)v33 + 24))(v33);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 224) + 8 * v28), v29, &v38);
      v34 = *(_QWORD *)(a1 + 224);
      v35 = v38;
      v38 = 0;
      v36 = *(_QWORD *)(v34 + 8 * v28);
      *(_QWORD *)(v34 + 8 * v28) = v35;
      if (v36)
        (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
      v37 = v38;
      v38 = 0;
      if (v37)
        (*(void (**)(void *))(*(_QWORD *)v37 + 16))(v37);
      ++v28;
      v26 = *a4;
    }
    while (v28 < (a4[1] - *a4) >> 5);
  }
LABEL_25:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v38, (uint64_t)"Done  vectorization of convolutional 2D component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v38);
  }
}

void sub_1ADFA2820(uint64_t a1, ...)
{
  va_list va;

  va_start(va, a1);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(v2, a1);
  return v2;
}

void sub_1ADFA28B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized8Bit(a1 - 88);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent(v2, a1);
  return v2;
}

void sub_1ADFA2928(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C4054C49D3DLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(uint64_t a1)
{
  return kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::CopyQuantized16Bit(a1 - 96);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::EnsureCorrs(a1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 208) - 8));
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) - 8));
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 265;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::GetType()
{
  return 266;
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::GetType()
{
  return 267;
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, int a3)
{
  float v6;
  float v7;
  float v8;
  int v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int *v16;
  int v17;
  int *v18;
  int v19;
  float v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  _QWORD v24[34];

  kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(a1);
  v7 = *(float *)(a1 + 64);
  v6 = *(float *)(a1 + 68);
  v8 = *(float *)(a1 + 72);
  v9 = *(_DWORD *)(a1 + 76);
  *(_QWORD *)(*(_QWORD *)(a1 + 184) + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 192) + 24) = a2;
  v10 = *(unsigned int *)(a1 + 80);
  if (a3 >= 0)
    v11 = a3;
  else
    v11 = *(_DWORD *)(a1 + 80);
  if ((_DWORD)v10 == 1)
    v12 = 0;
  else
    v12 = v11;
  v13 = v12;
  v14 = *(uint64_t **)(a1 + 200);
  *(_QWORD *)(v14[v12] + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v12) + 24) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 248) + 48 * v12 + 32) = a2;
  *(_QWORD *)(*(_QWORD *)(a1 + 272) + 32 * v12 + 24) = a2;
  if (v12 == (_DWORD)v10)
  {
    kaldi::CuMatrixBase<float>::AddMat(v14[v12], *v14, 111, 1.0, 0.0);
    kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v13), **(_QWORD **)(a1 + 224), 1.0, 0.0);
    if (*(int *)(a1 + 80) > 1)
    {
      v15 = 1;
      do
      {
        kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v13), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v15), 111, 1.0, 1.0);
        kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v13), *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v15++), 1.0, 1.0);
      }
      while (v15 < *(int *)(a1 + 80));
    }
    v16 = *(int **)(a1 + 320);
    v16[v13] = 0;
    if ((int)v10 >= 1)
    {
      v17 = 0;
      v18 = v16;
      do
      {
        v19 = *v18++;
        v17 += v19;
        v16[v13] = v17;
        --v10;
      }
      while (v10);
    }
  }
  v20 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v20 = v20 / (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * v13);
  v21 = *(_QWORD *)(a1 + 352);
  if (v13 >= (*(_QWORD *)(a1 + 360) - v21) >> 2)
  {
    LODWORD(v24[0]) = 2143289344;
    std::vector<float>::resize(a1 + 352, (int)v13 + 1, v24);
    v21 = *(_QWORD *)(a1 + 352);
  }
  *(float *)(v21 + 4 * v13) = v20;
  if (*(float *)(a1 + 148) >= 0.0)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 248))(a1, v13);
  if (v7 != 0.0)
    kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), *(_QWORD *)(a1 + 184), 111, (float)-(float)(v20 * v7) * (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * v13), 1.0);
  if (v6 != 0.0)
    kaldi::cu::RegularizeL1<float>(*(_QWORD *)(a1 + 184), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v13), (float)(v6 * v20) * (float)*(int *)(*(_QWORD *)(a1 + 320) + 4 * v13), v20);
  if (v8 > 0.0)
  {
    if (*(int *)(a1 + 80) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
    }
    if (*(_QWORD *)(a1 + 384) == *(_QWORD *)(a1 + 376))
      kaldi::nnet1::Convolutional2DComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 376), v9, v8);
  }
  kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(a1 + 184), *(_QWORD *)(*(_QWORD *)(a1 + 200) + 8 * v13), 111, -(float)(v20 * *(float *)(a1 + 136)), 1.0);
  kaldi::CuVectorBase<float>::AddVec(*(_QWORD *)(a1 + 192), *(_QWORD *)(*(_QWORD *)(a1 + 224) + 8 * v13), -(float)(v20 * *(float *)(a1 + 140)), 1.0);
  v22 = *(_BYTE **)(a1 + 320);
  if ((_DWORD)v13 == *(_DWORD *)(a1 + 80))
  {
    v23 = *(_BYTE **)(a1 + 328);
    if (v22 != v23)
      bzero(v22, ((v23 - v22 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v22[4 * v13] = 0;
  }
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F650;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F678;
  *(_QWORD *)a1 = &unk_1E5D2F518;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1ADFA2E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(_QWORD *)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADFA30B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F7D8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F800;
  *(_QWORD *)a1 = &unk_1E5D2F6A0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(a1, a2);
  return a1;
}

void sub_1ADFA3240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(_QWORD *)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADFA34E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::CuSubMatrix<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::AlternativeSelectionSpan>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 40 * a2;
    v6 = 40 * a2;
    v7 = (_OWORD *)(v4 + 8);
    do
    {
      *v7 = 0uLL;
      v7[1] = 0uLL;
      *((_QWORD *)v7 - 1) = &unk_1E5D29D40;
      v7 = (_OWORD *)((char *)v7 + 40);
      v6 -= 40;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADFA35B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F7D8;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F800;
  *(_QWORD *)a1 = &unk_1E5D2F6A0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(a1, a2);
  return a1;
}

void sub_1ADFA3708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::AssignMembers<kaldi::QuantizedMatrix<signed char>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<short>::QuantizedMatrix<signed char>(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<short>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADFA39AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::Convolutional2DComponent<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = off_1E5D32508;
  v4 = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)(a1 + 24), *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 3);
  *(_QWORD *)a1 = off_1E5D2E4A0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 71) = *(_OWORD *)(a2 + 71);
  *(_OWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2F650;
  *(_QWORD *)(a1 + 96) = &unk_1E5D2F678;
  *(_QWORD *)a1 = &unk_1E5D2F518;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(a1, a2);
  return a1;
}

void sub_1ADFA3B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  quasar::Bitmap *v11;
  quasar::Bitmap *v12;
  void *v14;
  void *v15;
  uint64_t v16;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(v10 + 376));
  v14 = *(void **)(v10 + 352);
  if (v14)
  {
    *(_QWORD *)(v10 + 360) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v10 + 320);
  if (v15)
  {
    *(_QWORD *)(v10 + 328) = v15;
    operator delete(v15);
  }
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v16 = *(_QWORD *)(v10 + 192);
  *(_QWORD *)(v10 + 192) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100]((uint64_t *)(v10 + 184), 0);
  a10 = (void **)(v10 + 160);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  quasar::Bitmap::~Bitmap(v12);
  quasar::Bitmap::~Bitmap(v11);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)v10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::AssignMembers<kaldi::QuantizedMatrix<short>>(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[34];

  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 320), *(char **)(a2 + 320), *(_QWORD *)(a2 + 328), (uint64_t)(*(_QWORD *)(a2 + 328) - *(_QWORD *)(a2 + 320)) >> 2);
  *(_BYTE *)(a1 + 344) = 0;
  if (a1 != a2)
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 352), *(char **)(a2 + 352), *(_QWORD *)(a2 + 360), (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2);
  v4 = *(int **)(a2 + 184);
  if (v4)
  {
    v5 = operator new();
    kaldi::QuantizedMatrix<signed char>::QuantizedMatrix<short>(v5, v4);
    v6 = (uint64_t *)(a1 + 184);
    v7 = v5;
  }
  else
  {
    v6 = (uint64_t *)(a1 + 184);
    v7 = 0;
  }
  std::unique_ptr<kaldi::QuantizedMatrix<signed char>>::reset[abi:ne180100](v6, v7);
  if (*(_QWORD *)(a2 + 192))
  {
    v8 = (_QWORD *)operator new();
    v9 = *(unsigned int *)(*(_QWORD *)(a2 + 192) + 16);
    *v8 = &unk_1E5D341C8;
    v8[1] = 0;
    v8[2] = 0;
    v8[3] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v8, v9, 1);
    v10 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = v8;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v8 = *(_QWORD **)(a1 + 192);
    }
    kaldi::CuVectorBase<float>::CopyFromVec(v8, *(_QWORD *)(a2 + 192));
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(a1 + 192) = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11);
  }
  kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::UpdateBNNSFilter(a1);
  if (*(_QWORD *)(a2 + 384) != *(_QWORD *)(a2 + 376))
    kaldi::nnet1::Convolutional2DComponent<kaldi::QuantizedMatrix<signed char>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 376));
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"After assign, Convolution filter has padding? ", 46);
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    kaldi::QuantizedMatrixBase<short>::NumCols(*(_QWORD *)(a1 + 184));
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v12);
  }
}

void sub_1ADFA3DDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

_QWORD *quasar::CaseMapOptions::options@<X0>(quasar::CaseMapOptions *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 320;
  *a2 = result;
  return result;
}

uint64_t quasar::CaseMapBlock::init(quasar::CaseMapBlock *this)
{
  _QWORD *v2;
  uint64_t result;
  uint64_t v4;
  char *v5;
  std::locale::id *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  std::string __p;
  std::locale v11;
  _QWORD v12[2];
  _QWORD v13[51];
  _QWORD v14[20];

  v14[19] = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)((char *)this + 328);
  result = quasar::OptionValue<std::string>::value((_QWORD *)this + 41);
  v4 = *(unsigned __int8 *)(result + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(result + 8);
  if (v4)
  {
    quasar::OptionValue<std::string>::value(v2);
    std::ifstream::basic_ifstream(v12);
    if (v13[15] && (*((_BYTE *)&v13[2] + *(_QWORD *)(v12[0] - 24)) & 2) == 0)
    {
      memset(&__p, 0, sizeof(__p));
      v5 = (char *)this + 488;
      v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
      while (1)
      {
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(v12[0] - 24)));
        v7 = std::locale::use_facet(&v11, v6);
        v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
        std::locale::~locale(&v11);
        v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&__p, v8);
        if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
          break;
        kaldi::Trim(&__p);
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v5, (unsigned __int8 *)&__p, (uint64_t)&__p);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    v12[0] = *MEMORY[0x1E0DE4F40];
    *(_QWORD *)((char *)v12 + *(_QWORD *)(v12[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1AF44CA70](v13);
    std::istream::~istream();
    return MEMORY[0x1AF44D094](v14);
  }
  return result;
}

void sub_1ADFA4028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t `virtual thunk to'quasar::CaseMapBlock::init(quasar::CaseMapBlock *this)
{
  return quasar::CaseMapBlock::init((quasar::CaseMapBlock *)((char *)this + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::CaseMapBlock::adjustSpan(quasar::CaseMapBlock *this, quasar::PTree *a2, int a3, int a4)
{
  int v6;
  int v8;
  int v9;
  quasar *v10;
  void *__p[2];
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17[2];
  char v18;

  v6 = (int)a2;
  std::string::basic_string[abi:ne180100]<0>(__p, "start");
  v8 = quasar::PTree::getInt<int>((uint64_t)this, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "end");
  v9 = quasar::PTree::getInt<int>((uint64_t)this, (__int128 *)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (v8 > a4)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "start");
    LODWORD(__p[0]) = quasar::getType((quasar *)(v8 + v6));
    std::to_string((std::string *)&__p[1], v8 + v6);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    quasar::PTree::replaceChild((uint64_t)this, (__int128 *)v17, (uint64_t)__p);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    if (v18 < 0)
      operator delete(v17[0]);
  }
  if (v9 >= a3)
  {
    std::string::basic_string[abi:ne180100]<0>(v17, "end");
    v10 = (quasar *)(v9 + v6);
    LODWORD(__p[0]) = quasar::getType(v10);
    std::to_string((std::string *)&__p[1], (int)v10);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 1;
    quasar::PTree::replaceChild((uint64_t)this, (__int128 *)v17, (uint64_t)__p);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    if (v18 < 0)
      operator delete(v17[0]);
  }
}

void sub_1ADFA41F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  quasar::PTree::~PTree((quasar::PTree *)&a10);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::CaseMapBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  quasar::MetaInfo::Impl **v9;
  quasar::MetaInfo::Impl **v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  quasar::MetaInfo::Impl *v14;
  __int128 v15;
  unsigned __int8 *v16;
  std::string *v17;
  std::string::size_type size;
  int v19;
  unint64_t v20;
  void **v21;
  uint64_t v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  void **v26;
  uint64_t v27;
  quasar::PTree *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t ChildOptional;
  quasar::PTree *v33;
  uint64_t v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  std::string::size_type v41;
  uint64_t v42;
  std::string *v43;
  unsigned __int8 *v45;
  int v46;
  unsigned __int8 *v47;
  int v48;
  unsigned int v49;
  char *v50;
  std::string *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  uint64_t v55;
  int v56;
  unsigned __int8 *v57;
  std::string *v58;
  int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  quasar::PTree *v65;
  uint64_t v66;
  uint64_t v67;
  quasar::MetaInfo::Impl **v68;
  _QWORD *v69;
  _QWORD *v70;
  unint64_t v71;
  unint64_t v72;
  void *v73[3];
  uint64_t v74;
  std::string v75;
  char v76;
  std::string v77;
  quasar::MetaInfo::Impl **v78;
  quasar::MetaInfo::Impl **v79;
  uint64_t v80;
  void *__p[2];
  void *v82;
  void *v83[2];
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;

  v6 = a1;
  v7 = *a3;
  v8 = a3[1];
  if (v7 == v8)
  {
    quasar::ProcessingBlock::send((uint64_t)a1 + *(_QWORD *)(*a1 - 24), (uint64_t)a3, 0);
  }
  else
  {
    v78 = 0;
    v79 = 0;
    v80 = 0;
    std::vector<quasar::TranslationPhraseInternal>::__init_with_size[abi:ne180100]<quasar::TranslationPhraseInternal*,quasar::TranslationPhraseInternal*>(&v78, v7, v8, 0x8F5C28F5C28F5C29 * ((v8 - v7) >> 3));
    v9 = v78;
    v10 = v79;
    if (v78 != v79)
    {
      v70 = v6 + 3;
      v68 = v79;
      v69 = v6;
      while (1)
      {
        v11 = (uint64_t)v9[17];
        if ((quasar::MetaInfo::Impl *)v11 != v9[18] && (quasar::CaseMapBlock::capitalize(v6, v11) & 1) != 0)
          break;
LABEL_137:
        v9 += 25;
        if (v9 == v10)
          goto LABEL_138;
      }
      v12 = (uint64_t)v9[17];
      if (*(char *)(v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v77, *(const std::string::value_type **)v12, *(_QWORD *)(v12 + 8));
        v12 = (uint64_t)v9[17];
      }
      else
      {
        v13 = *(_OWORD *)v12;
        v77.__r_.__value_.__r.__words[2] = *(_QWORD *)(v12 + 16);
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = v13;
      }
      quasar::OptionValue<std::string>::value(v70);
      quasar::CaseMapBlock::mapString(v12, 0, (std::string *)v83);
      v14 = v9[17];
      if (*((char *)v14 + 23) < 0)
        operator delete(*(void **)v14);
      v15 = *(_OWORD *)v83;
      *((_QWORD *)v14 + 2) = v84;
      *(_OWORD *)v14 = v15;
      v16 = (unsigned __int8 *)v9[17];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v77;
      else
        v17 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      else
        size = v77.__r_.__value_.__l.__size_;
      quasar::utf8::codepointsCtr(v17, size, 0, size, (unint64_t)v73);
      if ((_BYTE)v74)
      {
        v19 = (int)v73[0];
        v20 = v3 & 0xFFFFFFFF00000000 | LODWORD(v73[0]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v73;
        v82 = v73[2];
        memset(v73, 0, sizeof(v73));
        if (quasar::gLogLevel >= 1)
        {
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          *(_OWORD *)v83 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
          if (SHIBYTE(v82) >= 0)
            v21 = __p;
          else
            v21 = (void **)__p[0];
          if (SHIBYTE(v82) >= 0)
            v22 = HIBYTE(v82);
          else
            v22 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v21, v22);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v83);
        }
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
        v19 = 0;
        v20 = v3 & 0xFFFFFFFF00000000;
        if (!(_BYTE)v74 && SHIBYTE(v73[2]) < 0)
        {
          operator delete(v73[0]);
          v19 = 0;
        }
      }
      if ((char)v16[23] < 0)
      {
        v24 = *(unsigned __int8 **)v16;
        v23 = *((_QWORD *)v16 + 1);
      }
      else
      {
        v23 = v16[23];
        v24 = v16;
      }
      quasar::utf8::codepointsCtr(v24, v23, 0, v23, (unint64_t)v73);
      v72 = v20;
      if ((_BYTE)v74)
      {
        v25 = (int)v73[0];
        v71 = v4 & 0xFFFFFFFF00000000 | LODWORD(v73[0]);
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v73;
        v82 = v73[2];
        memset(v73, 0, sizeof(v73));
        if (quasar::gLogLevel >= 1)
        {
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          *(_OWORD *)v83 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
          if (SHIBYTE(v82) >= 0)
            v26 = __p;
          else
            v26 = (void **)__p[0];
          if (SHIBYTE(v82) >= 0)
            v27 = HIBYTE(v82);
          else
            v27 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)v26, v27);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v83);
        }
        if (SHIBYTE(v82) < 0)
          operator delete(__p[0]);
        v25 = 0;
        v71 = v4 & 0xFFFFFFFF00000000;
        if (!(_BYTE)v74 && SHIBYTE(v73[2]) < 0)
        {
          operator delete(v73[0]);
          v25 = 0;
        }
      }
      v28 = (quasar::PTree *)(v25 - v19);
      if (v25 == v19)
      {
LABEL_134:
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        v10 = v68;
        v6 = v69;
        v4 = v71;
        v3 = v72;
        goto LABEL_137;
      }
      v29 = quasar::MetaInfo::get((quasar::MetaInfo *)(v9 + 24));
      v30 = v29;
      LODWORD(v73[0]) = *(_DWORD *)v29;
      if (*(char *)(v29 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v73[1], *(const std::string::value_type **)(v29 + 8), *(_QWORD *)(v29 + 16));
      }
      else
      {
        v31 = *(_OWORD *)(v29 + 8);
        v74 = *(_QWORD *)(v29 + 24);
        *(_OWORD *)&v73[1] = v31;
      }
      memset(&v75, 0, sizeof(v75));
      std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v75, *(_QWORD *)(v30 + 32), *(_QWORD *)(v30 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(v30 + 40) - *(_QWORD *)(v30 + 32)) >> 3));
      v76 = *(_BYTE *)(v30 + 56);
      std::string::basic_string[abi:ne180100]<0>(v83, "alignment-queries");
      ChildOptional = quasar::PTree::getChildOptional((uint64_t)v73, (uint64_t)v83);
      v33 = (quasar::PTree *)ChildOptional;
      if (SBYTE7(v84) < 0)
      {
        operator delete(v83[0]);
        if (!v33)
        {
LABEL_133:
          quasar::PTree::~PTree((quasar::PTree *)v73);
          goto LABEL_134;
        }
      }
      else if (!ChildOptional)
      {
        goto LABEL_133;
      }
      v34 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      v35 = v77.__r_.__value_.__r.__words[0];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v77;
      else
        v36 = (std::string *)v77.__r_.__value_.__r.__words[0];
      if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
      else
        v37 = v77.__r_.__value_.__l.__size_;
      v38 = v16[23];
      if ((char)v16[23] < 0)
      {
        v39 = *(unsigned __int8 **)v16;
        v40 = *((_QWORD *)v16 + 1);
        if (!v37)
          goto LABEL_74;
      }
      else
      {
        v39 = v16;
        v40 = v16[23];
        if (!v37)
          goto LABEL_74;
      }
      if (v40)
      {
        v41 = v37 - 1;
        v42 = v40 - 1;
        v43 = v36;
        do
        {
          if (v43->__r_.__value_.__s.__data_[0] != *v39)
            break;
          v43 = (std::string *)((char *)v43 + 1);
          ++v39;
          if (!v41)
            break;
          --v41;
        }
        while (v42--);
LABEL_75:
        if (v43 == (std::string *)((char *)v36 + v37))
        {
          if (quasar::gLogLevel <= 0)
          {
            v46 = (_DWORD)v43 - (_DWORD)v36;
            goto LABEL_89;
          }
        }
        else
        {
          if ((v38 & 0x80) != 0)
          {
            v45 = *(unsigned __int8 **)v16;
            v38 = *((_QWORD *)v16 + 1);
          }
          else
          {
            v45 = v16;
          }
          v47 = &v45[v38];
          v48 = quasar::gLogLevel;
          if (v39 != v47 || quasar::gLogLevel <= 0)
          {
LABEL_84:
            if ((v34 & 0x80u) == 0)
              v49 = &v77;
            else
              v49 = v35;
            v46 = (_DWORD)v43 - v49;
            if (v48 >= 5)
            {
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              *(_OWORD *)v83 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"original upcase region start: ", 30);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v83);
              v34 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
              v35 = v77.__r_.__value_.__r.__words[0];
            }
LABEL_89:
            if ((v34 & 0x80u) == 0)
              v50 = (char *)&v77 + v34;
            else
              v50 = (char *)(v35 + v77.__r_.__value_.__l.__size_);
            if ((v34 & 0x80u) == 0)
              v51 = &v77;
            else
              v51 = (std::string *)v35;
            v52 = v16[23];
            if ((char)v16[23] < 0)
            {
              v54 = *(unsigned __int8 **)v16;
              v53 = (unsigned __int8 *)(*(_QWORD *)v16 + *((_QWORD *)v16 + 1));
            }
            else
            {
              v53 = &v16[v52];
              v54 = v16;
            }
            v55 = 0;
            do
            {
              v56 = v55;
              v57 = &v53[v55];
              v58 = (std::string *)&v50[v55];
              if (&v50[v55] == (char *)v51 || v57 == v54)
                break;
              --v55;
            }
            while (HIBYTE(v58[-1].__r_.__value_.__r.__words[2]) == *(v57 - 1));
            if (v58 == v51)
            {
              if (quasar::gLogLevel <= 0)
              {
                v62 = (_DWORD)v50 - (_DWORD)v51 + v56 - 2;
LABEL_118:
                v63 = quasar::PTree::begin(v33);
                v64 = quasar::PTree::end(v33);
                while (v63 != v64)
                {
                  std::string::basic_string[abi:ne180100]<0>(v83, "projections");
                  v65 = (quasar::PTree *)quasar::PTree::getChildOptional(v63 + 24, (uint64_t)v83);
                  if (SBYTE7(v84) < 0)
                    operator delete(v83[0]);
                  if (v65)
                  {
                    if (quasar::gLogLevel >= 6)
                    {
                      v98 = 0u;
                      v99 = 0u;
                      v96 = 0u;
                      v97 = 0u;
                      v94 = 0u;
                      v95 = 0u;
                      v92 = 0u;
                      v93 = 0u;
                      v90 = 0u;
                      v91 = 0u;
                      v88 = 0u;
                      v89 = 0u;
                      v86 = 0u;
                      v87 = 0u;
                      v84 = 0u;
                      v85 = 0u;
                      *(_OWORD *)v83 = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Adjusting alignment projections", 31);
                      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v83);
                    }
                    v66 = quasar::PTree::begin(v65);
                    v67 = quasar::PTree::end(v65);
                    while (v66 != v67)
                    {
                      quasar::CaseMapBlock::adjustSpan((quasar::CaseMapBlock *)(v66 + 24), v28, v46, v62);
                      v66 += 88;
                    }
                  }
                  else
                  {
                    if (quasar::gLogLevel >= 6)
                    {
                      v98 = 0u;
                      v99 = 0u;
                      v96 = 0u;
                      v97 = 0u;
                      v94 = 0u;
                      v95 = 0u;
                      v92 = 0u;
                      v93 = 0u;
                      v90 = 0u;
                      v91 = 0u;
                      v88 = 0u;
                      v89 = 0u;
                      v86 = 0u;
                      v87 = 0u;
                      v84 = 0u;
                      v85 = 0u;
                      *(_OWORD *)v83 = 0u;
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"Adjusting alignment queries", 27);
                      quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)v83);
                    }
                    quasar::CaseMapBlock::adjustSpan((quasar::CaseMapBlock *)(v63 + 24), v28, v46, v62);
                  }
                  v63 += 88;
                }
                quasar::MetaInfo::update(v9 + 24, (const quasar::PTree *)v73);
                goto LABEL_133;
              }
            }
            else
            {
              if ((v52 & 0x80) != 0)
                v16 = *(unsigned __int8 **)v16;
              v60 = quasar::gLogLevel;
              if (v57 != v16 || quasar::gLogLevel <= 0)
                goto LABEL_112;
            }
            v98 = 0u;
            v99 = 0u;
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            v92 = 0u;
            v93 = 0u;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            *(_OWORD *)v83 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"No mismatch found - this should never happen)", 45);
            quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v83);
            LOBYTE(v34) = *((_BYTE *)&v77.__r_.__value_.__s + 23);
            LODWORD(v35) = v77.__r_.__value_.__l.__data_;
            v60 = quasar::gLogLevel;
LABEL_112:
            if ((v34 & 0x80u) == 0)
              v61 = &v77;
            else
              v61 = v35;
            v62 = (_DWORD)v50 - 2 + v56 - v61;
            if (v60 > 4)
            {
              v98 = 0u;
              v99 = 0u;
              v96 = 0u;
              v97 = 0u;
              v94 = 0u;
              v95 = 0u;
              v92 = 0u;
              v93 = 0u;
              v90 = 0u;
              v91 = 0u;
              v88 = 0u;
              v89 = 0u;
              v86 = 0u;
              v87 = 0u;
              v84 = 0u;
              v85 = 0u;
              *(_OWORD *)v83 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"original upcase region end: ", 28);
              std::ostream::operator<<();
              quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v83);
            }
            goto LABEL_118;
          }
        }
        v98 = 0u;
        v99 = 0u;
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        *(_OWORD *)v83 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v83);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)"No mismatch found - this should never happen)", 45);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v83);
        v34 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        v35 = v77.__r_.__value_.__r.__words[0];
        v48 = quasar::gLogLevel;
        goto LABEL_84;
      }
LABEL_74:
      v43 = v36;
      goto LABEL_75;
    }
LABEL_138:
    quasar::ProcessingBlock::send((uint64_t)v6 + *(_QWORD *)(*v6 - 24), (uint64_t)&v78, 0);
    v83[0] = &v78;
    std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)v83);
  }
}

void sub_1ADFA4B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,int a24,__int16 a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,void *a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  quasar::PTree::~PTree((quasar::PTree *)&a17);
  if (SHIBYTE(a32) < 0)
    operator delete(__p);
  a17 = &a33;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  _Unwind_Resume(a1);
}

uint64_t quasar::CaseMapBlock::capitalize(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  int v8;
  std::string *p_p;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  void *v18;
  char v19;
  std::string __p;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  std::string v24;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v24 = *(std::string *)a2;
  kaldi::Trim(&v24);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  kaldi::SplitStringToVector(&v24, " ", 1, (uint64_t)&v21);
  if (v21 == v22)
  {
    v3 = 1;
    goto LABEL_37;
  }
  if (!*(_BYTE *)quasar::OptionValue<BOOL>::value(a1 + 23))
  {
    v4 = v21;
    std::string::basic_string[abi:ne180100]<0>(&v18, "");
    quasar::CaseMapBlock::mapString((uint64_t)v4, 1u, &__p);
    v5 = v4[23];
    if ((v5 & 0x80u) == 0)
      v6 = v4[23];
    else
      v6 = *((_QWORD *)v4 + 1);
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    if (v6 == size)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((v5 & 0x80) != 0)
      {
        v3 = memcmp(*(const void **)v4, p_p, *((_QWORD *)v4 + 1)) == 0;
        goto LABEL_29;
      }
      if (v4[23])
      {
        v10 = v5 - 1;
        do
        {
          v12 = *v4++;
          v11 = v12;
          v14 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          v13 = v14;
          v16 = v10-- != 0;
          v3 = v11 == v13;
        }
        while (v11 == v13 && v16);
LABEL_29:
        if ((v8 & 0x80000000) == 0)
          goto LABEL_31;
        goto LABEL_30;
      }
      v3 = 1;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_31:
        if (v19 < 0)
          operator delete(v18);
        goto LABEL_33;
      }
    }
    else
    {
      v3 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_31;
    }
LABEL_30:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  v3 = 1;
LABEL_33:
  if (a1[64])
  {
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1 + 61, v21))
    {
      v3 = 0;
    }
    else
    {
      v3 = v3;
    }
  }
LABEL_37:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1ADFA4E78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (a15 < 0)
    operator delete(__p);
  a16 = &a19;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (*(char *)(v19 - 41) < 0)
    operator delete(*(void **)(v19 - 64));
  _Unwind_Resume(a1);
}

void quasar::CaseMapBlock::mapString(uint64_t a1@<X0>, unsigned int a2@<W2>, std::string *a3@<X8>)
{
  int v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  std::vector<char> v27;
  UErrorCode v28;

  v28 = U_ZERO_ERROR;
  memset(&v27, 0, sizeof(v27));
  if (a2 > 1)
  {
    if (quasar::gLogLevel >= 2)
    {
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unsupported mapping operation", 29);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v10);
    }
LABEL_7:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    {
LABEL_25:
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 16);
      goto LABEL_26;
    }
LABEL_8:
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    goto LABEL_26;
  }
  if (!ucasemap_open())
    goto LABEL_7;
  if (a2 == 1)
    v6 = ucasemap_utf8ToLower();
  else
    v6 = ucasemap_utf8ToTitle();
  if ((std::vector<char>::pointer)v6 <= (std::vector<char>::pointer)(v27.__end_ - v27.__begin_))
  {
    if ((std::vector<char>::pointer)v6 < (std::vector<char>::pointer)(v27.__end_ - v27.__begin_))
      v27.__end_ = &v27.__begin_[v6];
  }
  else
  {
    std::vector<signed char>::__append(&v27, v6 - (unint64_t)(v27.__end_ - v27.__begin_));
  }
  if (v28 >= U_ILLEGAL_ARGUMENT_ERROR && v28 != U_BUFFER_OVERFLOW_ERROR)
  {
    if (quasar::gLogLevel < 2)
      goto LABEL_24;
LABEL_23:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    v10 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v10);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v10, (uint64_t)"Unicode error (ICU): ", 21);
    v8 = u_errorName(v28);
    v9 = strlen(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v10);
LABEL_24:
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_25;
    goto LABEL_8;
  }
  v28 = U_ZERO_ERROR;
  if (a2 == 1)
    ucasemap_utf8ToLower();
  else
    ucasemap_utf8ToTitle();
  if (v28 >= U_ILLEGAL_ARGUMENT_ERROR)
  {
    if (quasar::gLogLevel < 2)
      goto LABEL_24;
    goto LABEL_23;
  }
  ucasemap_close();
  std::string::basic_string[abi:ne180100](a3, v27.__begin_, v27.__end_ - v27.__begin_);
LABEL_26:
  if (v27.__begin_)
  {
    v27.__end_ = v27.__begin_;
    operator delete(v27.__begin_);
  }
}

void sub_1ADFA5324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  v11 = *(void **)(v9 - 80);
  if (v11)
  {
    *(_QWORD *)(v9 - 72) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

void `virtual thunk to'quasar::CaseMapBlock::process(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  quasar::CaseMapBlock::process((_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 96)), a2, a3);
}

uint64_t quasar::CaseMapBlock::minConfigVersion(quasar::CaseMapBlock *this)
{
  return 167;
}

uint64_t `virtual thunk to'quasar::CaseMapBlock::minConfigVersion(quasar::CaseMapBlock *this)
{
  return 167;
}

void quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADFA54A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::CaseMapOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::CaseMapBlock::~CaseMapBlock(quasar::CaseMapBlock *this)
{
  char **v2;

  *(_QWORD *)this = off_1E5D34B28;
  v2 = (char **)((char *)this + 528);
  *((_QWORD *)this + 66) = &off_1E5D34BD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(_QWORD *)this = off_1E5D03C30;
  *((_QWORD *)this + 66) = &unk_1E5D03CB8;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
}

{
  char **v2;

  *(_QWORD *)this = off_1E5D34B28;
  v2 = (char **)((char *)this + 528);
  *((_QWORD *)this + 66) = &off_1E5D34BD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(_QWORD *)this = off_1E5D03C30;
  *((_QWORD *)this + 66) = &unk_1E5D03CB8;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapBlock *)((char *)this + 8));
  quasar::ProcessingBlock::~ProcessingBlock(v2);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::CaseMapBlock::blockType(quasar::CaseMapBlock *this)
{
  return "CaseMapBlock";
}

void `virtual thunk to'quasar::CaseMapBlock::~CaseMapBlock(quasar::CaseMapBlock *this)
{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D34B28;
  *((_QWORD *)v1 + 66) = &off_1E5D34BD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(v1 + 488));
  *(_QWORD *)v1 = off_1E5D03C30;
  *((_QWORD *)v1 + 66) = &unk_1E5D03CB8;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 66);
}

{
  char *v1;

  v1 = (char *)this + *(_QWORD *)(*(_QWORD *)this - 24);
  *(_QWORD *)v1 = off_1E5D34B28;
  *((_QWORD *)v1 + 66) = &off_1E5D34BD0;
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(v1 + 488));
  *(_QWORD *)v1 = off_1E5D03C30;
  *((_QWORD *)v1 + 66) = &unk_1E5D03CB8;
  quasar::CaseMapOptions::~CaseMapOptions((quasar::CaseMapOptions *)(v1 + 8));
  quasar::ProcessingBlock::~ProcessingBlock((char **)v1 + 66);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::CaseMapBlock::blockType(quasar::CaseMapBlock *this)
{
  return "CaseMapBlock";
}

void quasar::CaseMapOptions::~CaseMapOptions(quasar::CaseMapOptions *this)
{
  *(_QWORD *)this = &off_1E5D35108;
  *((_QWORD *)this + 40) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 456, *((_QWORD **)this + 58));
  if (*((char *)this + 447) < 0)
    operator delete(*((void **)this + 53));
  *((_QWORD *)this + 40) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 408);
  if (*((char *)this + 399) < 0)
    operator delete(*((void **)this + 47));
  if (*((char *)this + 375) < 0)
    operator delete(*((void **)this + 44));
  if (*((char *)this + 351) < 0)
    operator delete(*((void **)this + 41));
  *((_QWORD *)this + 22) = &unk_1E5D34860;
  std::__tree<std::string>::destroy((uint64_t)this + 296, *((char **)this + 38));
  *((_QWORD *)this + 22) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  *((_QWORD *)this + 2) = &unk_1E5D347F0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 152, *((_QWORD **)this + 20));
  if (*((char *)this + 143) < 0)
    operator delete(*((void **)this + 15));
  *((_QWORD *)this + 2) = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)a1 = off_1E5D17568;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v12 = a1 + 64;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v13 = a1 + 40;
  v14 = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x1AF44C9E0](a1 + 16, a3);
  MEMORY[0x1AF44C9E0](v13, a4);
  *(_QWORD *)(a1 + 112) = a5;
  MEMORY[0x1AF44C9E0](v12, a6);
  MEMORY[0x1AF44C9E0](v14, a7);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  return a1;
}

void sub_1ADFA58F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  TParam::TParam();
  _Unwind_Resume(a1);
}

uint64_t TParam::TParam(uint64_t a1, int a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E5D17568;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 8) = a2;
  MEMORY[0x1AF44C9E0](a1 + 16, a3);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return a1;
}

void sub_1ADFA599C(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*(void **)(v1 + 88));
  TParam::TParam();
  _Unwind_Resume(a1);
}

void TParam::~TParam(void **this)
{
  *this = off_1E5D17568;
  if (*((char *)this + 111) < 0)
    operator delete(this[11]);
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

uint64_t TParam::getValidConfig(TParam *this, uint64_t a2)
{
  unint64_t v2;

  v2 = *((_QWORD *)this + 14);
  while (((v2 >> (a2 + 33)) & 1) == 0)
  {
    if (((v2 >> (a2 + 9)) & 1) != 0)
      return a2;
    a2 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 17) + 64) + 32 * a2);
  }
  a2 += 24;
  return a2;
}

uint64_t TParam::getValidOriginalConfig(TParam *this, uint64_t a2)
{
  unint64_t i;

  for (i = *((_QWORD *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return a2;
}

uint64_t TParam::notifyChange(uint64_t this, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = *(_QWORD **)(this + 136);
  if (v2)
  {
    v3 = v2[16];
    v2[16] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, this);
    v2[16] = v3;
  }
  return this;
}

void sub_1ADFA5AF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TParam::getActiveConfigHandle(TParam *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 17) + 128);
}

uint64_t TParam::flagsSet(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 + 112) & a2;
  v4 = a2;
  return std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(&v3, 0, (uint64_t)&v4, 0, &v4);
}

BOOL TBoolParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  char v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  TLocaleInfo *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  BOOL v21;

  v21 = 0;
  {
    v16 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v16);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v16;
  }
  v7 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v21);
  v8 = v21;
  if (v21)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v19);
    v10 = v20;
    v11 = (void **)v19[0];
    loggableUnicode(a3, __p);
    if (v10 >= 0)
      v13 = v19;
    else
      v13 = v11;
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v12, v13, v14);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    TBoolParam::set(a1, a2, v7);
  }
  return v8;
}

void sub_1ADFA5C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x1AF44D190](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::set(uint64_t this, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_BYTE *)(a2 + this + 176) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 33);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1ADFA5D64(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

BOOL TBoolParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  char v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  TLocaleInfo *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  BOOL v21;

  v21 = 0;
  {
    v16 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v16);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v16;
  }
  v7 = TLocaleInfo::stringToBool(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, (uint64_t)a3, &v21);
  v8 = v21;
  if (v21)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v19);
    v10 = v20;
    v11 = (void **)v19[0];
    loggableUnicode(a3, __p);
    if (v10 >= 0)
      v13 = v19;
    else
      v13 = v11;
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is out of range, was '%s', expected a BOOLean.\n", v12, v13, v14);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    TBoolParam::setOriginal(a1, a2, v7);
  }
  return v8;
}

void sub_1ADFA5EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x1AF44D190](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::setOriginal(uint64_t this, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(_BYTE *)(this + a2 + 152) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 9);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1ADFA5F80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

TIntParam *TIntParam::TIntParam(TIntParam *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, uint64_t a8, uint64_t a9)
{
  std::exception_vtbl *v14;
  _QWORD *exception;
  void *__p[2];
  char v17;
  std::exception v18[3];
  char v19;

  *(_QWORD *)TParam::TParam((uint64_t)a1, 2, a2, a3, a4, a8, a9) = &off_1E5D183D8;
  if (a5 > a6
    || (*((_DWORD *)a1 + 38) = a5, *((_DWORD *)a1 + 39) = a6, TIntParam::setOriginal(a1, 0, a7)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    TException::TException(v18, (__int128 *)__p);
    v18[0].__vftable = (std::exception_vtbl *)&unk_1E5D167E0;
    if (v19 >= 0)
      v14 = (std::exception_vtbl *)&v18[1];
    else
      v14 = v18[1].__vftable;
    conditionalAssert((const char *)v14, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 205);
    TException::~TException(v18);
    if (v17 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v18, "Failed to create Int param");
    TException::TException(exception, (__int128 *)v18);
    *exception = &unk_1E5D167E0;
  }
  return a1;
}

{
  return TIntParam::TIntParam(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1ADFA60CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  void *v22;
  int v23;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TIntParam::TIntParam(uint64_t a1, uint64_t a2)
{
  TIntParam *v3;
  std::exception_vtbl *v5;
  _QWORD *exception;
  void *__p[2];
  char v8;
  std::exception v9[3];
  char v10;

  v3 = (TIntParam *)TParam::TParam(a1, 2, a2);
  *(_QWORD *)v3 = &off_1E5D183D8;
  *((_QWORD *)v3 + 19) = 0;
  if (TIntParam::setOriginal(v3, 0, 0))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create Int param");
    TException::TException(v9, (__int128 *)__p);
    v9[0].__vftable = (std::exception_vtbl *)&unk_1E5D167E0;
    if (v10 >= 0)
      v5 = (std::exception_vtbl *)&v9[1];
    else
      v5 = v9[1].__vftable;
    conditionalAssert((const char *)v5, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 215);
    TException::~TException(v9);
    if (v8 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "Failed to create Int param");
    TException::TException(exception, (__int128 *)v9);
    *exception = &unk_1E5D167E0;
  }
  return a1;
}

void sub_1ADFA626C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  void *v22;
  int v23;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
    {
LABEL_6:
      TParam::~TParam(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v23)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TIntParam::setValue(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  int v7;
  unsigned int *v8;
  int v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void **v13;
  TLocaleInfo *v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  BOOL v20;

  v20 = 0;
  {
    v15 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v15);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
  }
  v7 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v20);
  if (!v20 && v7 >= *(_DWORD *)(a1 + 152) && v7 <= *(_DWORD *)(a1 + 156))
    return TIntParam::set((TIntParam *)a1, a2, v7);
  v8 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v8 = *(unsigned int **)v8;
  loggableUnicode(v8, v18);
  v9 = v19;
  v10 = (void **)v18[0];
  loggableUnicode(a3, __p);
  if (v9 >= 0)
    v12 = v18;
  else
    v12 = v10;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v11, v12, v13, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  return 1;
}

void sub_1ADFA6444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x1AF44D190](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::setValueOriginal(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unsigned __int8 v6;
  int v7;
  unsigned int *v8;
  int v9;
  void **v10;
  uint64_t v11;
  void **v12;
  void **v13;
  TLocaleInfo *v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;
  BOOL v20;

  v20 = 0;
  {
    v15 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v15);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v15;
  }
  v7 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v20);
  if (!v20 && v7 >= *(_DWORD *)(a1 + 152) && v7 <= *(_DWORD *)(a1 + 156))
    return TIntParam::setOriginal((TIntParam *)a1, a2, v7);
  v8 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v8 = *(unsigned int **)v8;
  loggableUnicode(v8, v18);
  v9 = v19;
  v10 = (void **)v18[0];
  loggableUnicode(a3, __p);
  if (v9 >= 0)
    v12 = v18;
  else
    v12 = v10;
  if (v17 >= 0)
    v13 = __p;
  else
    v13 = (void **)__p[0];
  tknPrintf("Error: %s : parameter value is out of range, was '%s', expected an int in the range [%d,%d].\n", v11, v12, v13, *(unsigned int *)(a1 + 152), *(unsigned int *)(a1 + 156));
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  return 1;
}

void sub_1ADFA6610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  MEMORY[0x1AF44D190](v25, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TIntParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v13;
  void (__cdecl **v14)(std::wostringstream *__hidden);
  std::wstringbuf v15;
  void (__cdecl **v16)(std::wostringstream *__hidden);
  std::locale v17;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v6 = (uint64_t)*(v14 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1AF44D0A0](&v16);
}

void sub_1ADFA6804(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  *(_QWORD *)(a1 + 112) = &unk_1E5D05A78;
  *(_QWORD *)a1 = &unk_1E5D05A50;
  std::ios_base::init((std::ios_base *)(a1 + 112), (void *)(a1 + 8));
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = -1;
  std::wstreambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1ADFA68E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::wostream::~wostream();
  MEMORY[0x1AF44D0A0](v1);
  _Unwind_Resume(a1);
}

uint64_t std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1AF44D0A0](v2);
  return a1;
}

uint64_t TIntParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  unint64_t i;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v14;
  void (__cdecl **v15)(std::wostringstream *__hidden);
  std::wstringbuf v16;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::locale v18;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  v6 = (uint64_t)*(v15 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (i = *(_QWORD *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1AF44D0A0](&v17);
}

void sub_1ADFA6B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValue(uint64_t a1, uint64_t a2, __int32 *a3)
{
  unsigned __int8 v6;
  double v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  TLocaleInfo *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  BOOL v21;

  v21 = 0;
  {
    v16 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v16);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v16;
  }
  v7 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v21);
  v8 = v21;
  if (v21)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v19);
    v10 = v20;
    v11 = (void **)v19[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v10 >= 0)
      v13 = v19;
    else
      v13 = v11;
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v12, v13, v14);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    TFloatParam::set(a1, a2, v7);
  }
  return v8;
}

void sub_1ADFA6CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x1AF44D190](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::set(uint64_t this, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(double *)(this + 8 * a2 + 344) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 33);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1ADFA6DA0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

BOOL TFloatParam::setValueOriginal(uint64_t a1, uint64_t a2, __int32 *a3)
{
  unsigned __int8 v6;
  double v7;
  _BOOL4 v8;
  unsigned int *v9;
  int v10;
  void **v11;
  uint64_t v12;
  void **v13;
  void **v14;
  TLocaleInfo *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  BOOL v21;

  v21 = 0;
  {
    v16 = (TLocaleInfo *)operator new();
    TLocaleInfo::TLocaleInfo(v16);
    TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v16;
  }
  v7 = TLocaleInfo::stringToFloat(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, a3, &v21);
  v8 = v21;
  if (v21)
  {
    v9 = (unsigned int *)(a1 + 16);
    if (*(char *)(a1 + 39) < 0)
      v9 = *(unsigned int **)v9;
    loggableUnicode(v9, v19);
    v10 = v20;
    v11 = (void **)v19[0];
    loggableUnicode((unsigned int *)a3, __p);
    if (v10 >= 0)
      v13 = v19;
    else
      v13 = v11;
    if (v18 >= 0)
      v14 = __p;
    else
      v14 = (void **)__p[0];
    tknPrintf("Error: %s : parameter value is not a float, was '%s'.\n", v12, v13, v14);
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
  }
  else
  {
    TFloatParam::setOriginal(a1, a2, v7);
  }
  return v8;
}

void sub_1ADFA6EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  MEMORY[0x1AF44D190](v23, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::setOriginal(uint64_t this, uint64_t a2, double a3)
{
  _QWORD *v3;
  uint64_t v4;

  *(double *)(this + 8 * a2 + 152) = a3;
  *(_QWORD *)(this + 112) |= 1 << (a2 + 9);
  v3 = *(_QWORD **)(this + 136);
  if (v3)
  {
    v4 = v3[16];
    v3[16] = a2;
    this = (*(uint64_t (**)(_QWORD *, uint64_t))(*v3 + 16))(v3, this);
    v3[16] = v4;
  }
  return this;
}

void sub_1ADFA6FB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v13;
  void (__cdecl **v14)(std::wostringstream *__hidden);
  std::wstringbuf v15;
  void (__cdecl **v16)(std::wostringstream *__hidden);
  std::locale v17;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v14);
  v6 = (uint64_t)*(v14 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v14 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v14 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v15.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v17, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v17);
  }
  std::locale::~locale(&v13);
  TParam::getValidConfig(a1, a2);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v15);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1AF44D0A0](&v16);
}

void sub_1ADFA714C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t TFloatParam::getValueOriginal(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const std::locale *v7;
  std::locale *v8;
  std::locale *v9;
  unint64_t i;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  std::locale v14;
  void (__cdecl **v15)(std::wostringstream *__hidden);
  std::wstringbuf v16;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::locale v18;

  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v15);
  v6 = (uint64_t)*(v15 - 3);
  v7 = std::locale::classic();
  std::ios_base::getloc((const std::ios_base *)((char *)&v15 + v6));
  std::ios_base::imbue((std::ios_base *)((char *)&v15 + v6), v7);
  std::locale::~locale((std::locale *)&__p);
  v8 = *(std::locale **)((char *)&v16.__einp_ + v6);
  if (v8)
  {
    (*((void (**)(std::locale *, const std::locale *))v8->__locale_ + 2))(v8, v7);
    v9 = v8 + 1;
    std::locale::locale(&v18, v9);
    std::locale::operator=(v9, v7);
    std::locale::~locale(&v18);
  }
  std::locale::~locale(&v14);
  for (i = *(_QWORD *)(a1 + 112);
        ((i >> (a2 + 9)) & 1) == 0;
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v16);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1AF44D0A0](&v17);
}

void sub_1ADFA7338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15, char a16)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a16);
  _Unwind_Resume(a1);
}

_QWORD *TStringParam::TStringParam(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int32 *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v9;
  std::exception_vtbl *v11;
  _QWORD *exception;
  void *__p[2];
  char v14;
  std::exception v15[3];
  char v16;

  v9 = (_QWORD *)TParam::TParam((uint64_t)a1, 4, a2, a3, a4, a6, a7);
  *v9 = &unk_1E5D16288;
  bzero(v9 + 19, 0x4C8uLL);
  if (TStringParam::setOriginal(a1, 0, a5))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Failed to create String param");
    TException::TException(v15, (__int128 *)__p);
    v15[0].__vftable = (std::exception_vtbl *)&unk_1E5D167E0;
    if (v16 >= 0)
      v11 = (std::exception_vtbl *)&v15[1];
    else
      v11 = v15[1].__vftable;
    conditionalAssert((const char *)v11, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 338);
    TException::~TException(v15);
    if (v14 < 0)
      operator delete(__p[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v15, "Failed to create String param");
    TException::TException(exception, (__int128 *)v15);
    *exception = &unk_1E5D167E0;
  }
  return a1;
}

void sub_1ADFA74AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;
  void *v22;
  int v23;
  uint64_t v25;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v23 & 1) == 0)
      goto LABEL_6;
  }
  else if (!v23)
  {
LABEL_6:
    __p = v21 + 169;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v21 + 166;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    __p = v21 + 163;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v25 = 144;
    while (1)
    {
      if (SHIBYTE(v21[v25 + 18]) < 0)
        operator delete(v21[v25 + 16]);
      v25 -= 3;
      if (!(v25 * 8))
      {
        TParam::~TParam(v21);
        _Unwind_Resume(a1);
      }
    }
  }
  __cxa_free_exception(v22);
  goto LABEL_6;
}

uint64_t TStringParam::setOriginal(_QWORD *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __int32 *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v6 = a1[163];
  if (a1[164] != v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0)
        v9 = *(const __int32 **)v9;
      if (!wcscmp(a3, v9))
        break;
      ++v8;
      v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3))
        return 1;
    }
  }
  MEMORY[0x1AF44C9E0](&a1[3 * a2 + 19], a3);
  a1[14] |= 1 << (a2 + 9);
  v11 = (_QWORD *)a1[17];
  if (!v11)
    return 0;
  v12 = v11[16];
  v11[16] = a2;
  (*(void (**)(_QWORD *, _QWORD *))(*v11 + 16))(v11, a1);
  result = 0;
  v11[16] = v12;
  return result;
}

void sub_1ADFA766C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

_QWORD *TStringParam::TStringParam(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)TParam::TParam((uint64_t)a1, 4, a2);
  *v3 = &unk_1E5D16288;
  bzero(v3 + 19, 0x4C8uLL);
  TStringParam::setOriginal(a1, 0, &dword_1AE19045C);
  return a1;
}

void sub_1ADFA76E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  void **v10;
  uint64_t v12;

  a10 = v10 + 169;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 166;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = v10 + 163;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  v12 = 144;
  while (1)
  {
    if (SHIBYTE(v10[v12 + 18]) < 0)
      operator delete(v10[v12 + 16]);
    v12 -= 3;
    if (!(v12 * 8))
    {
      TParam::~TParam(v10);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TStringParam::setAllowables(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 *v8;
  unint64_t v9;
  std::vector<std::wstring> *v10;
  __int128 *v11;
  unint64_t v12;
  unsigned int *v14;
  uint64_t v15;
  void **v16;
  unsigned int *v17;
  uint64_t v18;
  void **v19;
  void *__p[2];
  char v21;

  if (a3)
  {
    v8 = *(__int128 **)(a3 + 8);
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - *(_QWORD *)a3) >> 3);
    if (v9 != 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
    {
      v14 = (unsigned int *)(a1 + 16);
      if (*(char *)(a1 + 39) < 0)
        v14 = *(unsigned int **)v14;
      loggableUnicode(v14, __p);
      if (v21 >= 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      tknPrintf("Error: %s : Mismatch in the number of (allowable, grammar) entries", v15, v16);
      goto LABEL_24;
    }
    v10 = (std::vector<std::wstring> *)(a1 + 1328);
    if (a1 + 1328 != a3)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(v10, *(std::wstring **)a3, v8, v9);
  }
  if (!a4)
  {
LABEL_9:
    if (a1 + 1304 != a2)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1304), *(std::wstring **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
    return 0;
  }
  v11 = *(__int128 **)(a4 + 8);
  v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - *(_QWORD *)a4) >> 3);
  if (v12 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3))
  {
    if (a1 + 1352 != a4)
      std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>((std::vector<std::wstring> *)(a1 + 1352), *(std::wstring **)a4, v11, v12);
    goto LABEL_9;
  }
  v17 = (unsigned int *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v17 = *(unsigned int **)v17;
  loggableUnicode(v17, __p);
  if (v21 >= 0)
    v19 = __p;
  else
    v19 = (void **)__p[0];
  tknPrintf("Error: %s : Mismatch in the number of (allowable, description) entries", v18, v19);
LABEL_24:
  if (v21 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1ADFA78CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t TStringParam::set(_QWORD *a1, uint64_t a2, __int32 *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  const __int32 *v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t v12;

  v6 = a1[163];
  if (a1[164] != v6)
  {
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v9 = (const __int32 *)(v6 + v7);
      if (*(char *)(v6 + v7 + 23) < 0)
        v9 = *(const __int32 **)v9;
      if (!wcscmp(a3, v9))
        break;
      ++v8;
      v6 = a1[163];
      v7 += 24;
      if (v8 >= 0xAAAAAAAAAAAAAAABLL * ((a1[164] - v6) >> 3))
        return 1;
    }
  }
  MEMORY[0x1AF44C9E0](&a1[3 * a2 + 91], a3);
  a1[14] |= 1 << (a2 + 33);
  v11 = (_QWORD *)a1[17];
  if (!v11)
    return 0;
  v12 = v11[16];
  v11[16] = a2;
  (*(void (**)(_QWORD *, _QWORD *))(*v11 + 16))(v11, a1);
  result = 0;
  v11[16] = v12;
  return result;
}

void sub_1ADFA79E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 128) = v2;
  _Unwind_Resume(a1);
}

uint64_t TStringParam::getGrammarValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  const __int32 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const __int32 *v10;
  uint64_t v11;
  int *v12;
  uint64_t v14;
  std::wstringbuf::string_type *p_p;
  std::wstringbuf::string_type __p;
  void (__cdecl **v17)(std::wostringstream *__hidden);
  std::wstringbuf v18;
  void (__cdecl **v19)(std::wostringstream *__hidden);

  v5 = (_QWORD *)((char *)a1 + 24 * TParam::getValidConfig(a1, a2));
  v6 = (const __int32 *)(v5 + 19);
  if (*((char *)v5 + 175) < 0)
    v6 = *(const __int32 **)v6;
  v7 = *((_QWORD *)a1 + 163);
  if (*((_QWORD *)a1 + 164) == v7)
    goto LABEL_9;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = (const __int32 *)(v7 + v8);
    if (*(char *)(v7 + v8 + 23) < 0)
      v10 = *(const __int32 **)v10;
    if (!wcscmp(v6, v10))
      break;
    ++v9;
    v7 = *((_QWORD *)a1 + 163);
    v8 += 24;
    if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)a1 + 164) - v7) >> 3))
      goto LABEL_9;
  }
  v14 = *((_QWORD *)a1 + 166);
  if (v14 != *((_QWORD *)a1 + 167))
  {
    v12 = (int *)(v14 + v8);
    if ((*(char *)(v14 + v8 + 23) & 0x80000000) == 0 || (v12 = *(int **)v12) != 0)
    {
      v11 = a3;
      return TBuffer<wchar_t>::assign(v11, v12);
    }
  }
  if (*(_QWORD *)(*((_QWORD *)a1 + 17) + 112) > 4uLL)
  {
LABEL_9:
    v11 = a3;
    v12 = (int *)v6;
    return TBuffer<wchar_t>::assign(v11, v12);
  }
  std::wostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v17);
  std::wostream::operator<<();
  std::wstringbuf::str(&__p, &v18);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::wstringbuf::string_type *)__p.__r_.__value_.__r.__words[0];
  TBuffer<wchar_t>::assign(a3, (int *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__str_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__str_.__r_.__value_.__l.__data_);
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  return MEMORY[0x1AF44D0A0](&v19);
}

void sub_1ADFA7BC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  std::wostringstream::~wostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void TParamManager::~TParamManager(TParamManager *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  char *v11;
  char *v12;
  void *v13;
  void **v14;

  *(_QWORD *)this = &off_1E5D164F8;
  v2 = (char *)this + 48;
  v3 = (char *)this + 40;
  v4 = (char *)*((_QWORD *)this + 5);
  if (v4 != (char *)this + 48)
  {
    do
    {
      v5 = *((_QWORD *)v4 + 5);
      if (v5 && (v6 = v5 - 1, v7 = *((_QWORD *)this + 2), v6 < (*((_QWORD *)this + 3) - v7) >> 3))
      {
        v8 = *(_QWORD *)(v7 + 8 * v6);
        v9 = TParam::flagsSet(v8, 8);
        if (v8)
          v10 = v9 == 0;
        else
          v10 = 1;
        if (!v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      }
      else
      {
        TParam::flagsSet(0, 8);
      }
      v11 = (char *)*((_QWORD *)v4 + 1);
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = *(char **)v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (char *)*((_QWORD *)v4 + 2);
          v10 = *(_QWORD *)v12 == (_QWORD)v4;
          v4 = v12;
        }
        while (!v10);
      }
      v4 = v12;
    }
    while (v12 != v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this + 88, *((char **)this + 12));
  v14 = (void **)((char *)this + 64);
  std::vector<std::pair<unsigned long,std::wstring>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__tree<int>::destroy((uint64_t)v3, *((_QWORD **)this + 6));
  v13 = (void *)*((_QWORD *)this + 2);
  if (v13)
  {
    *((_QWORD *)this + 3) = v13;
    operator delete(v13);
  }
}

{
  TParamManager::~TParamManager(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t TParamManager::begin@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(this + 40);
  return this;
}

uint64_t TParamManager::end@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = this + 48;
  return this;
}

uint64_t TParamManager::find@<X0>(uint64_t a1@<X0>, const __int32 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  const __int32 *v5;

  v5 = a2;
  result = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, &v5);
  *a3 = result;
  return result;
}

uint64_t TParamManager::add(TParamManager *this, TParam *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  const __int32 *v21;
  uint64_t v22;
  const __int32 *v24;
  const __int32 **v25;

  v6 = *((_QWORD *)this + 4);
  v4 = (char *)this + 32;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 2);
    v18 = (char *)*((_QWORD *)this + 3);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 2) = v16;
    *((_QWORD *)this + 3) = v8;
    *((_QWORD *)this + 4) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 3) = v8;
  v21 = (const __int32 *)((char *)a2 + 16);
  if (*((char *)a2 + 39) < 0)
    v21 = *(const __int32 **)v21;
  v22 = ((uint64_t)v8 - *((_QWORD *)this + 2)) >> 3;
  v24 = v21;
  v25 = &v24;
  std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__emplace_unique_key_args<wchar_t const*,std::piecewise_construct_t const&,std::tuple<wchar_t const* const&>,std::tuple<>>((uint64_t **)this + 5, &v24, (uint64_t)&std::piecewise_construct, (uint64_t **)&v25)[5] = v22;
  *((_QWORD *)a2 + 17) = this;
  return (uint64_t)(*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 3;
}

unint64_t TParamManager::newConfig(uint64_t a1, __int32 *a2, std::exception_vtbl *a3)
{
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  std::exception_vtbl *v9;
  _QWORD *exception;
  void *v11[2];
  char v12;
  std::exception v13[2];
  char v14;
  char v15;

  v5 = (uint64_t *)(a1 + 64);
  v13[0].__vftable = a3;
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v13[1], a2);
  std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](v5, (uint64_t)v13);
  if (v15 < 0)
    operator delete(v13[1].__vftable);
  v7 = ((uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5) - 1;
  if (v7 >= 0x18)
  {
    tknPrintf("Error: Too many parameter configurations were defined; max number of configurations is %lld\n", v6, 22);
    std::string::basic_string[abi:ne180100]<0>(v11, "");
    TException::TException(v13, (__int128 *)v11);
    v13[0].__vftable = (std::exception_vtbl *)&unk_1E5D16668;
    if (v15 >= 0)
      v9 = (std::exception_vtbl *)&v13[1];
    else
      v9 = v13[1].__vftable;
    conditionalAssert((const char *)v9, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 556);
    TException::~TException(v13);
    if (v12 < 0)
      operator delete(v11[0]);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    TException::TException(exception, (__int128 *)v13);
    *exception = &unk_1E5D16668;
  }
  std::wstring::basic_string[abi:ne180100]<0>((uint64_t)v13, a2);
  v11[0] = v13;
  *((_QWORD *)std::__tree<std::__value_type<std::wstring,TWordBlock *>,std::__map_value_compare<std::wstring,std::__value_type<std::wstring,TWordBlock *>,std::less<std::wstring>,true>,std::allocator<std::__value_type<std::wstring,TWordBlock *>>>::__emplace_unique_key_args<std::wstring,std::piecewise_construct_t const&,std::tuple<std::wstring&&>,std::tuple<>>((uint64_t **)(a1 + 88), (uint64_t)v13, (uint64_t)&std::piecewise_construct, (_OWORD **)v11)+ 7) = v7;
  if (v14 < 0)
    operator delete(v13[0].__vftable);
  return v7;
}

void sub_1ADFA8058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  void *v26;
  int v27;

  if (a22 < 0)
  {
    operator delete(__p);
    if ((v27 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v27)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v26);
  goto LABEL_6;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  __int128 v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - *a1) >> 5;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v5 - *a1;
    if (v12 >> 4 > v11)
      v11 = v12 >> 4;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v13 = 0x7FFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    v17[4] = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v13);
    else
      v14 = 0;
    v15 = &v14[32 * v10];
    v17[0] = v14;
    v17[1] = v15;
    v17[3] = &v14[32 * v13];
    *(_QWORD *)v15 = *(_QWORD *)a2;
    v16 = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v15 + 3) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v15 + 8) = v16;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v17[2] = v15 + 32;
    std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(a1, v17);
    v9 = a1[1];
    result = std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)v17);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(v7 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(v7 + 8) = v8;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1ADFA81F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::IndexRuleLmeWordTagger::Rule>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void TParamManager::initParam(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t **a6)
{
  uint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  void *v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  std::exception_vtbl *v32;
  uint64_t v33;
  std::exception *v34;
  std::__split_buffer<std::wstring>::pointer v35;
  char v36;
  int v37;
  std::exception_vtbl *v38;
  uint64_t v39;
  std::exception *v40;
  std::__split_buffer<std::wstring>::pointer v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::exception_vtbl *v46;
  uint64_t v47;
  std::exception *v48;
  std::__split_buffer<std::wstring>::pointer p_p;
  char v50;
  int v51;
  std::exception_vtbl *v52;
  uint64_t v53;
  std::exception *v54;
  std::__split_buffer<std::wstring>::pointer first;
  uint64_t v56;
  uint64_t v57;
  std::__split_buffer<std::wstring>::pointer v58;
  uint64_t v59;
  uint64_t v60;
  std::__split_buffer<std::wstring>::pointer v61;
  uint64_t v62;
  std::__split_buffer<std::wstring>::pointer v63;
  char v64;
  uint64_t v65;
  std::__split_buffer<std::wstring>::pointer v66;
  char v67;
  char v68;
  char v69;
  uint64_t v70;
  std::vector<std::wstring>::pointer v71;
  __int128 v72;
  std::vector<std::wstring>::pointer end;
  __int128 v74;
  std::vector<std::wstring>::pointer v75;
  __int128 v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  std::wstring *v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  std::wstring *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  std::wstring *v88;
  std::wstring *v89;
  __int128 v90;
  std::wstring *v91;
  uint64_t v92;
  std::__split_buffer<std::wstring>::pointer v93;
  std::vector<std::wstring>::pointer begin;
  uint64_t v95;
  std::__split_buffer<std::wstring>::pointer v96;
  std::wstring *v97;
  __int128 v98;
  std::wstring *v99;
  uint64_t v100;
  std::__split_buffer<std::wstring>::pointer v101;
  std::wstring *v102;
  __int128 v103;
  std::wstring *v104;
  uint64_t v105;
  std::__split_buffer<std::wstring>::pointer v106;
  uint64_t v107;
  std::__split_buffer<std::wstring>::pointer v108;
  uint64_t v109;
  std::__split_buffer<std::wstring>::pointer v110;
  uint64_t v111;
  std::__split_buffer<std::wstring>::pointer v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  unsigned int *v116;
  unsigned int *v117;
  unsigned int *v118;
  uint64_t v119;
  int v120;
  std::exception_vtbl *v121;
  uint64_t v122;
  std::exception *v123;
  std::__split_buffer<std::wstring>::pointer v124;
  uint64_t v125;
  void *v126;
  int64x2_t *v127;
  _QWORD *v128;
  int v129;
  std::exception_vtbl *v130;
  uint64_t v131;
  std::exception *v132;
  std::__split_buffer<std::wstring>::pointer v133;
  int64x2_t *v134;
  _QWORD *v135;
  uint64_t v136;
  void *v137;
  int64x2_t *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  char *v144;
  _DWORD *v145;
  _QWORD *v146;
  unsigned int *v147;
  unsigned __int8 v148;
  int v149;
  unsigned __int8 v150;
  int v151;
  uint64_t v152;
  void *v153;
  int64x2_t *v154;
  _QWORD *v155;
  std::vector<std::wstring> *v156;
  std::vector<std::wstring> *v157;
  unsigned __int8 v158;
  unsigned int v159;
  uint64_t v160;
  unsigned __int8 v161;
  unsigned int v162;
  uint64_t v163;
  unsigned __int8 v164;
  unsigned int v165;
  uint64_t v166;
  std::vector<std::wstring>::pointer data;
  int v168;
  std::wstring *v169;
  std::wstring *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unsigned int *v174;
  int v175;
  std::exception_vtbl *v176;
  uint64_t v177;
  std::exception *v178;
  std::__split_buffer<std::wstring>::pointer v179;
  uint64_t v180;
  unint64_t v181;
  void *v182;
  uint64_t v183;
  unsigned int *v184;
  uint64_t v185;
  std::__split_buffer<std::wstring>::pointer v186;
  int64x2_t *v187;
  _QWORD *v188;
  void *v189;
  uint64_t v190;
  unsigned int *v191;
  uint64_t v192;
  std::__split_buffer<std::wstring>::pointer v193;
  int64x2_t *v194;
  _QWORD *v195;
  int64x2_t *v196;
  _QWORD *exception;
  int64x2_t *v198;
  _QWORD *v199;
  uint64_t v200;
  void *v201;
  int64x2_t *v202;
  _QWORD *v203;
  uint64_t v204;
  void *v205;
  int64x2_t *v206;
  _QWORD *v207;
  uint64_t v208;
  void *v209;
  int64x2_t *v210;
  _QWORD *v211;
  int v212;
  std::exception_vtbl *v213;
  uint64_t v214;
  std::exception *v215;
  std::__split_buffer<std::wstring>::pointer v216;
  int64x2_t *v217;
  _QWORD *v218;
  uint64_t v219;
  void *v220;
  int64x2_t *v221;
  _QWORD *v222;
  uint64_t v223;
  void *v224;
  int64x2_t *v225;
  _QWORD *v226;
  int v227;
  std::exception_vtbl *v228;
  uint64_t v229;
  std::exception *v230;
  std::__split_buffer<std::wstring>::pointer v231;
  int64x2_t *v232;
  _QWORD *v233;
  uint64_t v234;
  void *v235;
  int64x2_t *v236;
  _QWORD *v237;
  TLocaleInfo *v238;
  TLocaleInfo *v239;
  uint64_t v240;
  void *v241;
  int64x2_t *v242;
  _QWORD *v243;
  uint64_t v244;
  void *v245;
  int64x2_t *v246;
  _QWORD *v247;
  uint64_t v248;
  void *v249;
  int64x2_t *v250;
  _QWORD *v251;
  uint64_t v252;
  void *v253;
  int64x2_t *v254;
  _QWORD *v255;
  uint64_t v256;
  void *v257;
  int64x2_t *v258;
  _QWORD *v259;
  TLocaleInfo *v260;
  int v261;
  std::exception_vtbl *v262;
  uint64_t v263;
  std::exception *v264;
  std::__split_buffer<std::wstring>::pointer v265;
  int64x2_t *v266;
  _QWORD *v267;
  TLocaleInfo *v268;
  int v269;
  std::exception_vtbl *v270;
  uint64_t v271;
  std::exception *v272;
  std::__split_buffer<std::wstring>::pointer v273;
  int64x2_t *v274;
  _QWORD *v275;
  TLocaleInfo *v276;
  int v277;
  std::exception_vtbl *v278;
  uint64_t v279;
  std::exception *v280;
  std::__split_buffer<std::wstring>::pointer v281;
  int64x2_t *v282;
  _QWORD *v283;
  uint64_t v284;
  void *v285;
  int64x2_t *v286;
  _QWORD *v287;
  unsigned int *v288;
  char v289;
  char v291;
  unint64_t v292;
  unsigned int *v293;
  uint64_t v294;
  uint64_t Config;
  uint64_t *v296;
  int v297;
  uint64_t v298;
  unsigned int *v299;
  unsigned int *v300;
  uint64_t v301;
  uint64_t v302;
  unsigned int *v303;
  std::vector<std::wstring> v304;
  std::vector<std::wstring> v305;
  std::vector<std::wstring> v306;
  void *v307[3];
  void *v308[3];
  std::exception_vtbl *v309;
  char v310;
  __int128 v311;
  std::wstring::size_type v312;
  std::__split_buffer<std::wstring> __p;
  const char *v314;
  __int128 v315;
  uint64_t v316;
  const char *v317;
  uint64_t v318;
  __int128 v319;
  const char *v320;
  __int128 v321;
  uint64_t v322;
  const char *v323;
  __int128 v324;
  uint64_t v325;
  const char *v326;
  __int128 v327;
  uint64_t v328;
  const char *v329;
  __int128 v330;
  uint64_t v331;
  const char *v332;
  __int128 v333;
  uint64_t v334;
  const char *v335;
  __int128 v336;
  uint64_t v337;
  const char *v338;
  uint64_t v339;
  __int128 v340;
  const char *v341;
  uint64_t v342;
  __int128 v343;
  const char *v344;
  uint64_t v345;
  __int128 v346;
  const char *v347;
  uint64_t v348;
  __int128 v349;
  const char *v350;
  uint64_t v351;
  __int128 v352;
  std::exception v353;
  int64x2_t v354;
  uint64_t v355;
  const char *v356;
  __int128 v357;
  uint64_t v358;
  const char *v359;
  __int128 v360;
  uint64_t v361;
  uint64_t v362;

  v362 = *MEMORY[0x1E0C80C00];
  v315 = xmmword_1AE140A90;
  v314 = "N";
  if (a4)
    v11 = 2;
  else
    v11 = 0;
  v316 = -1;
  v317 = "D";
  v318 = v11;
  v319 = xmmword_1AE13F780;
  v321 = xmmword_1AE144E70;
  v320 = "V";
  v324 = xmmword_1AE144E70;
  v322 = 4;
  v323 = "O";
  v325 = 4;
  v327 = xmmword_1AE144E70;
  v326 = "F";
  v328 = 4;
  v330 = xmmword_1AE144E70;
  v329 = "S";
  v331 = 4;
  v333 = xmmword_1AE144E70;
  v332 = "F";
  v334 = -1;
  v336 = xmmword_1AE144E70;
  v335 = "M";
  v337 = -1;
  v338 = "M";
  v339 = 2;
  v340 = xmmword_1AE13F780;
  v341 = "A";
  v342 = 2;
  v343 = xmmword_1AE13F780;
  v344 = "D";
  v345 = v11;
  v346 = xmmword_1AE190410;
  v347 = "V";
  v348 = 2;
  v349 = xmmword_1AE190410;
  v350 = "R";
  v351 = 2;
  v352 = xmmword_1AE190420;
  v12 = TFileObject::verify(a2, (uint64_t)&v314, 0xDuLL, 1);
  v310 = v12;
  if (v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v353, (__int128 *)&__p);
    v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
    if (v355 >= 0)
      v196 = &v354;
    else
      v196 = (int64x2_t *)v354.i64[0];
    conditionalAssert(v196->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 768);
    TException::~TException(&v353);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v353, "");
    TException::TException(exception, (__int128 *)&v353);
    *exception = &unk_1E5D16BC8;
  }
  v309 = 0;
  v13 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5;
  v353.__vftable = 0;
  std::vector<wchar_t const*>::vector(v308, v13, &v353);
  v14 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5;
  v353.__vftable = 0;
  std::vector<wchar_t const*>::vector(v307, v14, &v353);
  memset(&v306, 0, sizeof(v306));
  memset(&v305, 0, sizeof(v305));
  memset(&v304, 0, sizeof(v304));
  Config = TParamManager::getConfig(a1, (__int32 *)"F");
  v294 = TParamManager::getConfig(a1, (__int32 *)"S");
  v289 = a5;
  v297 = a4;
  v296 = (uint64_t *)a2;
  v15 = *(_QWORD *)(a2 + 24);
  if (v15)
  {
    v291 = 0;
    v298 = 0;
    v299 = 0;
    v293 = 0;
    v288 = 0;
    v300 = 0;
    v301 = 0;
    v302 = 0;
    v303 = 0;
    while (1)
    {
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"N"))
      {
        v22 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v310 |= v22;
        v309 = *(std::exception_vtbl **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D"))
      {
        v24 = TFileObject::verify((TFileObject *)v15, 0, 1);
        v310 |= v24;
        v302 = *(_QWORD *)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"O")
        || !wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        v23 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v310 |= v23;
        v303 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"D"))
        break;
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"V"))
      {
        if (*(_DWORD *)(v15 + 40))
        {
          loggableFileObject((uint64_t *)v15);
          if (v354.i8[15] >= 0)
            v26 = &v353;
          else
            v26 = v353.__vftable;
LABEL_37:
          tknPrintf("Error: %sBad attribute declaration, expected an object\n", v25, v26);
LABEL_38:
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          v310 = 1;
          goto LABEL_139;
        }
        v43 = *(_QWORD *)(v15 + 24);
        if (!v43)
          goto LABEL_139;
        while (2)
        {
          v44 = TParamManager::getConfig(a1, *(__int32 **)(v43 + 8));
          if ((unint64_t)(v44 + 1) <= 1)
          {
            loggableFileObject((uint64_t *)v15);
            v45 = v354.i8[15];
            v46 = v353.__vftable;
            loggableUnicode(*(unsigned int **)(v43 + 8), &__p);
            if (v45 >= 0)
              v48 = &v353;
            else
              v48 = (std::exception *)v46;
            p_p = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              p_p = __p.__first_;
            tknPrintf("Error: %sInvalid configuration name: '%s'\n", v47, v48, p_p);
            goto LABEL_84;
          }
          v50 = TFileObject::verify((TFileObject *)v43, 0, a3 == 4);
          v310 |= v50;
          if (*((_QWORD *)v307[0] + v44))
          {
            loggableFileObject((uint64_t *)v15);
            v51 = v354.i8[15];
            v52 = v353.__vftable;
            loggableUnicode(*(unsigned int **)(v43 + 8), &__p);
            if (v51 >= 0)
              v54 = &v353;
            else
              v54 = (std::exception *)v52;
            first = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              first = __p.__first_;
            tknPrintf("Error: %sDuplicate parameter setting for '%s' configuration\n", v53, v54, first);
LABEL_84:
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            v310 = 1;
          }
          else
          {
            *((_QWORD *)v307[0] + v44) = *(_QWORD *)(v43 + 24);
          }
          v43 = *(_QWORD *)(v43 + 16);
          if (!v43)
            goto LABEL_139;
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        v27 = *(_QWORD *)(a1 + 112);
        v354 = (int64x2_t)xmmword_1AE15FCA0;
        v353.__vftable = (std::exception_vtbl *)&dword_1AE19045C;
        v355 = -1;
        if ((TFileObject::verify(v15, (uint64_t)&v353, 1uLL, 1) & 1) != 0)
        {
          v301 = 0;
          v28 = 1;
          goto LABEL_138;
        }
        v56 = *(_QWORD *)(v15 + 24);
        if (!v56)
        {
          v28 = 0;
          v301 = 0;
          goto LABEL_137;
        }
        v301 = 0;
        v28 = 0;
        while (2)
        {
          if ((TFileObject::verify((TFileObject *)v56, 0, 0) & 1) != 0)
          {
LABEL_95:
            v28 = 1;
            goto LABEL_118;
          }
          if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"e"))
          {
            v59 = v301 | 1;
          }
          else
          {
            if (v27 <= 2 && !wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"d"))
            {
              loggableFileObject((uint64_t *)v15);
              v61 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v61 = __p.__first_;
              tknPrintf("Warning: %s'deprecated' attribute is not functional\n", v60, v61);
              goto LABEL_114;
            }
            if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"h"))
            {
              v59 = v301 | 0x20;
            }
            else if (!wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"r"))
            {
              v59 = v301 | 0x100;
            }
            else
            {
              if (wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"u"))
              {
                if (v27 > 2 || wcscmp(*(const __int32 **)(v56 + 24), (const __int32 *)"p"))
                {
                  loggableFileObject((uint64_t *)v15);
                  v58 = (std::__split_buffer<std::wstring>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0)
                    v58 = __p.__first_;
                  tknPrintf("Error: %sUnknown flag\n", v57, v58);
                  if (SHIBYTE(__p.__end_) < 0)
                    operator delete(__p.__first_);
                  goto LABEL_95;
                }
                loggableFileObject((uint64_t *)v15);
                v63 = (std::__split_buffer<std::wstring>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0)
                  v63 = __p.__first_;
                tknPrintf("Warning: %s'persistent' attribute is not functional\n", v62, v63);
LABEL_114:
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
LABEL_118:
                v56 = *(_QWORD *)(v56 + 16);
                if (!v56)
                {
                  if ((~(_BYTE)v301 & 0x21) == 0)
                  {
                    loggableFileObject((uint64_t *)v15);
                    v66 = (std::__split_buffer<std::wstring>::pointer)&__p;
                    if (SHIBYTE(__p.__end_) < 0)
                      v66 = __p.__first_;
                    tknPrintf("Error: %sParam cannot be exposed and hidden at the same time\n", v65, v66);
                    if (SHIBYTE(__p.__end_) < 0)
                      operator delete(__p.__first_);
                    v28 = 1;
                  }
                  if ((v301 & 2) != 0)
                  {
LABEL_138:
                    v310 |= v28 & 1;
                    goto LABEL_139;
                  }
LABEL_137:
                  v301 |= 4uLL;
                  goto LABEL_138;
                }
                continue;
              }
              v59 = v301 | 2;
            }
          }
          break;
        }
        v301 = v59;
        goto LABEL_118;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"F"))
      {
        if (Config == -1)
        {
          tknPrintf("Error: \"Format\" detected but no format config exists\n", v16);
          v310 = 1;
        }
        v42 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v310 |= v42;
        v300 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"S"))
      {
        if (v294 == -1)
        {
          tknPrintf("Error: \"SpellOut\" detected but no spellout config exists\n", v17);
          v310 = 1;
        }
        v64 = TFileObject::verify((TFileObject *)v15, 0, a3 == 4);
        v310 |= v64;
        v299 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        v67 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v310 |= v67;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v354.i8[15] >= 0)
            v241 = &v353;
          else
            v241 = v353.__vftable;
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v240, v241);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v242 = &v354;
          else
            v242 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v242->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 905);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v243 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v243, (__int128 *)&v353);
          *v243 = &unk_1E5D16BC8;
        }
        v288 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"M"))
      {
        v68 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v310 |= v68;
        if (a3 != 2)
        {
          loggableFileObject((uint64_t *)v15);
          if (v354.i8[15] >= 0)
            v249 = &v353;
          else
            v249 = v353.__vftable;
          tknPrintf("Error: %sInvalid attribute for given parameter type\n", v248, v249);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v250 = &v354;
          else
            v250 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v250->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 915);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v251 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v251, (__int128 *)&v353);
          *v251 = &unk_1E5D16BC8;
        }
        v293 = *(unsigned int **)(v15 + 24);
        goto LABEL_139;
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"A"))
      {
        v292 = *(_QWORD *)(a1 + 112);
        v354 = vdupq_n_s64(1uLL);
        v353.__vftable = (std::exception_vtbl *)&dword_1AE19045C;
        v357 = xmmword_1AE15FCA0;
        v355 = -1;
        v356 = "G";
        v358 = -1;
        v359 = "D";
        v360 = xmmword_1AE15FCA0;
        v361 = -1;
        if ((TFileObject::verify(v15, (uint64_t)&v353, 3uLL, 1) & 1) != 0)
        {
          v69 = 1;
          goto LABEL_232;
        }
        v70 = *(_QWORD *)(v15 + 24);
        if (!v70)
        {
          v69 = 0;
LABEL_217:
          if (v305.__end_ != v305.__begin_
            && (char *)v306.__end_ - (char *)v306.__begin_ != (char *)v305.__end_ - (char *)v305.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            v108 = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              v108 = __p.__first_;
            tknPrintf("Error: %sMismatch in the counts of allowables and Grammar associations\n", v107, v108);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v69 = 1;
          }
          if (v304.__end_ != v304.__begin_
            && (char *)v306.__end_ - (char *)v306.__begin_ != (char *)v304.__end_ - (char *)v304.__begin_)
          {
            loggableFileObject((uint64_t *)v15);
            v110 = (std::__split_buffer<std::wstring>::pointer)&__p;
            if (SHIBYTE(__p.__end_) < 0)
              v110 = __p.__first_;
            tknPrintf("Error: %sMismatch in the counts of allowables and associated descriptions\n", v109, v110);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v69 = 1;
          }
          if (a3)
          {
LABEL_232:
            v310 |= v69 & 1;
            v291 = 1;
            if (a3 == 4 || a3 == 1)
              goto LABEL_139;
            if (a3)
              goto LABEL_683;
          }
          else
          {
            if (((0xAAAAAAAAAAAAAAABLL * (((char *)v306.__end_ - (char *)v306.__begin_) >> 3)) | 2) != 2)
            {
              loggableFileObject((uint64_t *)v15);
              v112 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v112 = __p.__first_;
              tknPrintf("Error: %sBoth 'true' and 'false' must be defined for BOOLean allowables\n", v111, v112);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v69 = 1;
            }
            v310 |= v69 & 1;
          }
          if (*(_QWORD *)(a1 + 112) <= 5uLL)
          {
LABEL_683:
            loggableFileObject((uint64_t *)v15);
            if (v354.i8[15] >= 0)
              v285 = &v353;
            else
              v285 = v353.__vftable;
            tknPrintf("Error: %sInvalid attribute for given parameter type\n", v284, v285);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v286 = &v354;
            else
              v286 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v286->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 927);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v287 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v287, (__int128 *)&v353);
            *v287 = &unk_1E5D16BC8;
          }
          v291 = 1;
          goto LABEL_139;
        }
        v69 = 0;
        while (2)
        {
          if ((TFileObject::verify((TFileObject *)v70, 0, 1) & 1) != 0)
          {
LABEL_148:
            v69 = 1;
            goto LABEL_149;
          }
          if (!wcscmp(*(const __int32 **)(v70 + 8), &dword_1AE19045C))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v311, *(__int32 **)(v70 + 24));
            end = v306.__end_;
            if (v306.__end_ >= v306.__end_cap_.__value_)
            {
              v77 = 0xAAAAAAAAAAAAAAABLL * (((char *)v306.__end_ - (char *)v306.__begin_) >> 3);
              v78 = v77 + 1;
              if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v306.__end_cap_.__value_ - (char *)v306.__begin_) >> 3) > v78)
                v78 = 0x5555555555555556 * (((char *)v306.__end_cap_.__value_ - (char *)v306.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v306.__end_cap_.__value_ - (char *)v306.__begin_) >> 3) >= 0x555555555555555)
                v79 = 0xAAAAAAAAAAAAAAALL;
              else
                v79 = v78;
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v306.__end_cap_;
              if (v79)
                v80 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v306.__end_cap_, v79);
              else
                v80 = 0;
              v89 = v80 + v77;
              __p.__first_ = v80;
              __p.__begin_ = v89;
              __p.__end_cap_.__value_ = &v80[v79];
              v90 = v311;
              v89->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
              v312 = 0;
              v311 = 0uLL;
              __p.__end_ = v89 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v306, &__p);
              v91 = v306.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v306.__end_ = v91;
              if (SHIBYTE(v312) < 0)
                operator delete((void *)v311);
            }
            else
            {
              v74 = v311;
              v306.__end_->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v74;
              v306.__end_ = end + 1;
            }
            if (!a3)
            {
              if (wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)"t")
                && wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)"f"))
              {
                loggableFileObject((uint64_t *)v15);
                v93 = (std::__split_buffer<std::wstring>::pointer)&__p;
                if (SHIBYTE(__p.__end_) < 0)
                  v93 = __p.__first_;
                tknPrintf("Error: %sBoolean allowables must be 'true' and 'false'\n", v92, v93);
                goto LABEL_214;
              }
              begin = v306.__begin_;
              if ((std::vector<std::wstring>::pointer)((char *)v306.__end_ - (char *)v306.__begin_) == (std::vector<std::wstring>::pointer)48)
              {
                if (SHIBYTE(v306.__begin_->__r_.__value_.__r.__words[2]) < 0)
                  begin = (std::vector<std::wstring>::pointer)v306.__begin_->__r_.__value_.__l.__data_;
                if (!wcscmp(*(const __int32 **)(v70 + 24), (const __int32 *)begin))
                {
                  loggableFileObject((uint64_t *)v15);
                  v96 = (std::__split_buffer<std::wstring>::pointer)&__p;
                  if (SHIBYTE(__p.__end_) < 0)
                    v96 = __p.__first_;
                  tknPrintf("Error: %sDuplicate BOOLean allowable\n", v95, v96);
                  goto LABEL_214;
                }
              }
            }
          }
          else if (!wcscmp(*(const __int32 **)(v70 + 8), (const __int32 *)"G"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v311, *(__int32 **)(v70 + 24));
            v75 = v305.__end_;
            if (v305.__end_ >= v305.__end_cap_.__value_)
            {
              v81 = 0xAAAAAAAAAAAAAAABLL * (((char *)v305.__end_ - (char *)v305.__begin_) >> 3);
              v82 = v81 + 1;
              if (v81 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v305.__end_cap_.__value_ - (char *)v305.__begin_) >> 3) > v82)
                v82 = 0x5555555555555556 * (((char *)v305.__end_cap_.__value_ - (char *)v305.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v305.__end_cap_.__value_ - (char *)v305.__begin_) >> 3) >= 0x555555555555555)
                v83 = 0xAAAAAAAAAAAAAAALL;
              else
                v83 = v82;
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v305.__end_cap_;
              if (v83)
                v84 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v305.__end_cap_, v83);
              else
                v84 = 0;
              v97 = v84 + v81;
              __p.__first_ = v84;
              __p.__begin_ = v97;
              __p.__end_cap_.__value_ = &v84[v83];
              v98 = v311;
              v97->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&v97->__r_.__value_.__l.__data_ = v98;
              v312 = 0;
              v311 = 0uLL;
              __p.__end_ = v97 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v305, &__p);
              v99 = v305.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v305.__end_ = v99;
              if (SHIBYTE(v312) < 0)
                operator delete((void *)v311);
            }
            else
            {
              v76 = v311;
              v305.__end_->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&v75->__r_.__value_.__l.__data_ = v76;
              v305.__end_ = v75 + 1;
            }
            if (!a3)
            {
              loggableFileObject((uint64_t *)v15);
              v101 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v101 = __p.__first_;
              tknPrintf("Error: %sGrammar attribute not supported in Boolean allowables\n", v100, v101);
              goto LABEL_214;
            }
          }
          else if (!wcscmp(*(const __int32 **)(v70 + 8), (const __int32 *)"D"))
          {
            std::wstring::basic_string[abi:ne180100]<0>((uint64_t)&v311, *(__int32 **)(v70 + 24));
            v71 = v304.__end_;
            if (v304.__end_ >= v304.__end_cap_.__value_)
            {
              v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v304.__end_ - (char *)v304.__begin_) >> 3);
              v86 = v85 + 1;
              if (v85 + 1 > 0xAAAAAAAAAAAAAAALL)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              if (0x5555555555555556 * (((char *)v304.__end_cap_.__value_ - (char *)v304.__begin_) >> 3) > v86)
                v86 = 0x5555555555555556 * (((char *)v304.__end_cap_.__value_ - (char *)v304.__begin_) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v304.__end_cap_.__value_ - (char *)v304.__begin_) >> 3) >= 0x555555555555555)
                v87 = 0xAAAAAAAAAAAAAAALL;
              else
                v87 = v86;
              __p.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v304.__end_cap_;
              if (v87)
                v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v304.__end_cap_, v87);
              else
                v88 = 0;
              v102 = v88 + v85;
              __p.__first_ = v88;
              __p.__begin_ = v102;
              __p.__end_cap_.__value_ = &v88[v87];
              v103 = v311;
              v102->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&v102->__r_.__value_.__l.__data_ = v103;
              v312 = 0;
              v311 = 0uLL;
              __p.__end_ = v102 + 1;
              std::vector<std::wstring>::__swap_out_circular_buffer(&v304, &__p);
              v104 = v304.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v304.__end_ = v104;
              if (SHIBYTE(v312) < 0)
                operator delete((void *)v311);
            }
            else
            {
              v72 = v311;
              v304.__end_->__r_.__value_.__r.__words[2] = v312;
              *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
              v304.__end_ = v71 + 1;
            }
            if (v292 <= 5)
            {
              loggableFileObject((uint64_t *)v15);
              v106 = (std::__split_buffer<std::wstring>::pointer)&__p;
              if (SHIBYTE(__p.__end_) < 0)
                v106 = __p.__first_;
              tknPrintf("Error: %sDescription attribute not supported in allowables if version < 6\n", v105, v106);
LABEL_214:
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              goto LABEL_148;
            }
          }
LABEL_149:
          v70 = *(_QWORD *)(v70 + 16);
          if (!v70)
            goto LABEL_217;
          continue;
        }
      }
      if (!wcscmp(*(const __int32 **)(v15 + 8), (const __int32 *)"R"))
      {
        v18 = TFileObject::verify((TFileObject *)v15, 0, 0);
        v310 |= v18;
        v19 = TParamManager::nameToParam(a1, *(const __int32 **)(v15 + 24));
        v298 = v19;
        if (!v19 || *(_DWORD *)(v19 + 8))
        {
          loggableFileObject((uint64_t *)v15);
          if (v354.i8[15] >= 0)
            v21 = &v353;
          else
            v21 = v353.__vftable;
          tknPrintf("Error: %sAttribute must reference a previously-defined BOOLean parameter name\n", v20, v21);
          goto LABEL_38;
        }
      }
LABEL_139:
      v15 = *(_QWORD *)(v15 + 16);
      if (!v15)
        goto LABEL_246;
    }
    if (*(_DWORD *)(v15 + 40))
    {
      loggableFileObject((uint64_t *)v15);
      if (v354.i8[15] >= 0)
        v26 = &v353;
      else
        v26 = v353.__vftable;
      goto LABEL_37;
    }
    v29 = *(_QWORD *)(v15 + 24);
    if (!v29)
      goto LABEL_139;
    while (1)
    {
      v30 = TParamManager::getConfig(a1, *(__int32 **)(v29 + 8));
      if ((unint64_t)(v30 + 1) <= 1)
        break;
      v36 = TFileObject::verify((TFileObject *)v29, 0, a3 == 4);
      v310 |= v36;
      if (*((_QWORD *)v308[0] + v30))
      {
        loggableFileObject((uint64_t *)v15);
        v37 = v354.i8[15];
        v38 = v353.__vftable;
        loggableUnicode(*(unsigned int **)(v29 + 8), &__p);
        if (v37 >= 0)
          v40 = &v353;
        else
          v40 = (std::exception *)v38;
        v41 = (std::__split_buffer<std::wstring>::pointer)&__p;
        if (SHIBYTE(__p.__end_) < 0)
          v41 = __p.__first_;
        tknPrintf("Error: %sDuplicate default setting for '%s' configuration\n", v39, v40, v41);
        goto LABEL_58;
      }
      *((_QWORD *)v308[0] + v30) = *(_QWORD *)(v29 + 24);
LABEL_63:
      v29 = *(_QWORD *)(v29 + 16);
      if (!v29)
        goto LABEL_139;
    }
    loggableFileObject((uint64_t *)v15);
    v31 = v354.i8[15];
    v32 = v353.__vftable;
    loggableUnicode(*(unsigned int **)(v29 + 8), &__p);
    if (v31 >= 0)
      v34 = &v353;
    else
      v34 = (std::exception *)v32;
    v35 = (std::__split_buffer<std::wstring>::pointer)&__p;
    if (SHIBYTE(__p.__end_) < 0)
      v35 = __p.__first_;
    tknPrintf("Error: %sInvalid configuration name: '%s'\n", v33, v34, v35);
LABEL_58:
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    if (v354.i8[15] < 0)
      operator delete(v353.__vftable);
    v310 = 1;
    goto LABEL_63;
  }
  v301 = 0;
  v302 = 0;
  v303 = 0;
  v299 = 0;
  v300 = 0;
  v288 = 0;
  v293 = 0;
  v298 = 0;
  v291 = 0;
LABEL_246:
  if (v310)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(&v353, (__int128 *)&__p);
    v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
    if (v355 >= 0)
      v198 = &v354;
    else
      v198 = (int64x2_t *)v354.i64[0];
    conditionalAssert(v198->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 942);
    TException::~TException(&v353);
    if (SHIBYTE(__p.__end_) < 0)
      operator delete(__p.__first_);
    v199 = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(&v353, "");
    TException::TException(v199, (__int128 *)&v353);
    *v199 = &unk_1E5D16BC8;
  }
  v353.__vftable = v309;
  v113 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::find<wchar_t const*>(a1 + 40, (const __int32 **)&v353);
  v114 = a4;
  v115 = v296;
  v116 = v299;
  v117 = v300;
  v118 = v303;
  v119 = v113;
  if (v297)
  {
    if (a1 + 48 != v113)
    {
      if (std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>((uint64_t)a6, (const __int32 **)&v309))
      {
        if (*(_QWORD *)(a1 + 112) >= 7uLL)
        {
          loggableFileObject(v296);
          v227 = v354.i8[15];
          v228 = v353.__vftable;
          loggableUnicode((unsigned int *)v309, &__p);
          v230 = &v353;
          if (v227 < 0)
            v230 = (std::exception *)v228;
          if (SHIBYTE(__p.__end_) >= 0)
            v231 = (std::__split_buffer<std::wstring>::pointer)&__p;
          else
            v231 = __p.__first_;
          tknPrintf("Error: %sParameter '%s' has been overridden multiple times\n", v229, v230, v231);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v232 = &v354;
          else
            v232 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v232->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 970);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v233 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v233, (__int128 *)&v353);
          *v233 = &unk_1E5D16BC8;
        }
        loggableFileObject(v296);
        v120 = v354.i8[15];
        v121 = v353.__vftable;
        loggableUnicode((unsigned int *)v309, &__p);
        v123 = &v353;
        if (v120 < 0)
          v123 = (std::exception *)v121;
        if (SHIBYTE(__p.__end_) >= 0)
          v124 = (std::__split_buffer<std::wstring>::pointer)&__p;
        else
          v124 = __p.__first_;
        tknPrintf("Warning: %sParameter '%s' has been overridden multiple times\n", v122, v123, v124);
        v118 = v303;
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if (v354.i8[15] < 0)
          operator delete(v353.__vftable);
      }
      else
      {
        std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(a6, (const __int32 **)&v309, (uint64_t *)&v309);
      }
      v141 = *(_QWORD *)(v119 + 40);
      if (v141 && (v142 = v141 - 1, v143 = *(_QWORD *)(a1 + 16), v142 < (*(_QWORD *)(a1 + 24) - v143) >> 3))
      {
        v140 = *(_QWORD *)(v143 + 8 * v142);
        if (!a3)
          goto LABEL_312;
      }
      else
      {
        v140 = 0;
        if (!a3)
        {
LABEL_312:
          if ((v291 & 1) != 0
            && (std::vector<std::wstring>::pointer)((char *)v304.__end_ - (char *)v304.__begin_) == (std::vector<std::wstring>::pointer)48)
          {
            if (v140)
            else
              v144 = 0;
            data = v306.__begin_;
            if (SHIBYTE(v306.__begin_->__r_.__value_.__r.__words[2]) < 0)
              data = (std::vector<std::wstring>::pointer)v306.__begin_->__r_.__value_.__l.__data_;
            v168 = wcscmp((const __int32 *)data, (const __int32 *)"t");
            v169 = &v304.__begin_[v168 == 0];
            if (SHIBYTE(v169->__r_.__value_.__r.__words[2]) < 0)
              v169 = (std::wstring *)v169->__r_.__value_.__r.__words[0];
            v170 = &v304.__begin_[v168 != 0];
            if (SHIBYTE(v170->__r_.__value_.__r.__words[2]) < 0)
              v170 = (std::wstring *)v170->__r_.__value_.__r.__words[0];
            MEMORY[0x1AF44C9E0](v144 + 200, v169);
            MEMORY[0x1AF44C9E0](v144 + 224, v170);
          }
          goto LABEL_387;
        }
      }
LABEL_324:
      if (a3 == 2)
      {
        if (v140)
        else
          v145 = 0;
        v147 = v288;
        if (v288)
        {
          if ((v148 & 1) == 0
          {
            v238 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v238);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v238;
            v114 = v297;
            v115 = v296;
            v116 = v299;
            v117 = v300;
            v118 = v303;
            v147 = v288;
          }
          v149 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v147, (BOOL *)&v310);
        }
        else
        {
          v149 = v145[38];
        }
        if (v310)
        {
          loggableFileObject(v115);
          if (v354.i8[15] >= 0)
            v220 = &v353;
          else
            v220 = v353.__vftable;
          tknPrintf("Error: %sParameter min value is not an integer\n", v219, v220);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v221 = &v354;
          else
            v221 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v221->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1058);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v222 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v222, (__int128 *)&v353);
          *v222 = &unk_1E5D16BC8;
        }
        if (v293)
        {
          if ((v150 & 1) == 0
          {
            v239 = (TLocaleInfo *)operator new();
            TLocaleInfo::TLocaleInfo(v239);
            TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v239;
            v114 = v297;
            v115 = v296;
            v116 = v299;
            v117 = v300;
            v118 = v303;
          }
          v151 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v293, (BOOL *)&v310);
          if (v310)
          {
            loggableFileObject(v115);
            if (v354.i8[15] >= 0)
              v153 = &v353;
            else
              v153 = v353.__vftable;
            tknPrintf("Error: %sParameter max value is not an integer\n", v152, v153);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v154 = &v354;
            else
              v154 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v154->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1065);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v155 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v155, (__int128 *)&v353);
            *v155 = &unk_1E5D16BC8;
          }
        }
        else
        {
          v151 = v145[39];
        }
        if (v149 > v151)
        {
          loggableFileObject(v115);
          if (v354.i8[15] >= 0)
            v224 = &v353;
          else
            v224 = v353.__vftable;
          tknPrintf("Error: %sInvalid range\n", v223, v224);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v225 = &v354;
          else
            v225 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v225->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1071);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v226 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v226, (__int128 *)&v353);
          *v226 = &unk_1E5D16BC8;
        }
        v145[38] = v149;
        v145[39] = v151;
      }
      else if (a3 == 4 || a3 == 1)
      {
        if (v140)
        else
          v146 = 0;
        if ((v291 & 1) != 0)
        {
          v156 = v305.__begin_ == v305.__end_ ? 0 : &v305;
          v157 = v304.__begin_ == v304.__end_ ? 0 : &v304;
          if (TStringParam::setAllowables((uint64_t)v146, (uint64_t)&v306, (uint64_t)v156, (uint64_t)v157))
          {
            loggableFileObject(v296);
            if (v354.i8[15] >= 0)
              v245 = &v353;
            else
              v245 = v353.__vftable;
            tknPrintf("Error: %sParameter allowable list is invalid\n", v244, v245);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v246 = &v354;
            else
              v246 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v246->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1092);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v247 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v247, (__int128 *)&v353);
            *v247 = &unk_1E5D16BC8;
          }
        }
        if (a3 == 1)
        {
          if (v118)
          {
            if ((v158 & 1) == 0
            {
              v260 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v260);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v260;
              v114 = v297;
              v115 = v296;
              v116 = v299;
              v117 = v300;
            }
            v159 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v303, (BOOL *)&v310);
            v160 = v146[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v146[164] - v160) >> 3) < v159)
            {
              loggableFileObject(v115);
              v261 = v354.i8[15];
              v262 = v353.__vftable;
              loggableUnicode(v303, &__p);
              v264 = &v353;
              if (v261 < 0)
                v264 = (std::exception *)v262;
              if (SHIBYTE(__p.__end_) >= 0)
                v265 = (std::__split_buffer<std::wstring>::pointer)&__p;
              else
                v265 = __p.__first_;
              tknPrintf("Error: %sParameter Original value is out of range, was '%s', expected an int in the range [0,%llu].\n", v263, v264, v265, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146[164] - v146[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              if (v354.i8[15] < 0)
                operator delete(v353.__vftable);
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v353, (__int128 *)&__p);
              v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
              if (v355 >= 0)
                v266 = &v354;
              else
                v266 = (int64x2_t *)v354.i64[0];
              conditionalAssert(v266->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1104);
              TException::~TException(&v353);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v267 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v353, "");
              TException::TException(v267, (__int128 *)&v353);
              *v267 = &unk_1E5D16BC8;
            }
            v118 = (unsigned int *)(v160 + 24 * v159);
            if (*((char *)v118 + 23) < 0)
              v118 = *(unsigned int **)v118;
          }
          if (v117)
          {
            if ((v161 & 1) == 0
            {
              v268 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v268);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v268;
              v114 = v297;
              v115 = v296;
              v116 = v299;
              v117 = v300;
            }
            v162 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v117, (BOOL *)&v310);
            v163 = v146[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v146[164] - v163) >> 3) < v162)
            {
              loggableFileObject(v115);
              v269 = v354.i8[15];
              v270 = v353.__vftable;
              loggableUnicode(v300, &__p);
              v272 = &v353;
              if (v269 < 0)
                v272 = (std::exception *)v270;
              if (SHIBYTE(__p.__end_) >= 0)
                v273 = (std::__split_buffer<std::wstring>::pointer)&__p;
              else
                v273 = __p.__first_;
              tknPrintf("Error: %sParameter Format value is out of range, was '%s', expected an int in the range [0,%llu].\n", v271, v272, v273, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146[164] - v146[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              if (v354.i8[15] < 0)
                operator delete(v353.__vftable);
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v353, (__int128 *)&__p);
              v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
              if (v355 >= 0)
                v274 = &v354;
              else
                v274 = (int64x2_t *)v354.i64[0];
              conditionalAssert(v274->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1115);
              TException::~TException(&v353);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v275 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v353, "");
              TException::TException(v275, (__int128 *)&v353);
              *v275 = &unk_1E5D16BC8;
            }
            v117 = (unsigned int *)(v163 + 24 * v162);
            if (*((char *)v117 + 23) < 0)
              v117 = *(unsigned int **)v117;
          }
          if (v116)
          {
            if ((v164 & 1) == 0
            {
              v276 = (TLocaleInfo *)operator new();
              TLocaleInfo::TLocaleInfo(v276);
              TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v276;
              v114 = v297;
              v115 = v296;
              v116 = v299;
            }
            v165 = TLocaleInfo::stringToUInt(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v116, (BOOL *)&v310);
            v166 = v146[163];
            if (0xAAAAAAAAAAAAAAABLL * ((v146[164] - v166) >> 3) < v165)
            {
              loggableFileObject(v115);
              v277 = v354.i8[15];
              v278 = v353.__vftable;
              loggableUnicode(v299, &__p);
              v280 = &v353;
              if (v277 < 0)
                v280 = (std::exception *)v278;
              if (SHIBYTE(__p.__end_) >= 0)
                v281 = (std::__split_buffer<std::wstring>::pointer)&__p;
              else
                v281 = __p.__first_;
              tknPrintf("Error: %sParameter SpellOut value is out of range, was '%s', expected an int in the range [0,%llu].\n", v279, v280, v281, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v146[164] - v146[163]) >> 3));
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              if (v354.i8[15] < 0)
                operator delete(v353.__vftable);
              std::string::basic_string[abi:ne180100]<0>(&__p, "");
              TException::TException(&v353, (__int128 *)&__p);
              v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
              if (v355 >= 0)
                v282 = &v354;
              else
                v282 = (int64x2_t *)v354.i64[0];
              conditionalAssert(v282->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1126);
              TException::~TException(&v353);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v283 = __cxa_allocate_exception(0x20uLL);
              std::string::basic_string[abi:ne180100]<0>(&v353, "");
              TException::TException(v283, (__int128 *)&v353);
              *v283 = &unk_1E5D16BC8;
            }
            v116 = (unsigned int *)(v166 + 24 * v165);
            if (*((char *)v116 + 23) < 0)
              v116 = *(unsigned int **)v116;
          }
        }
      }
LABEL_387:
      if (*(char *)(v140 + 111) < 0)
        v171 = *(_QWORD *)(v140 + 96);
      else
        v171 = *(unsigned __int8 *)(v140 + 111);
      v172 = v298;
      v173 = v302;
      if (!v171)
        goto LABEL_399;
      v174 = v118;
      loggableFileObject(v115);
      v175 = v354.i8[15];
      v176 = v353.__vftable;
      loggableUnicode((unsigned int *)v309, &__p);
      v178 = &v353;
      if (v175 < 0)
        v178 = (std::exception *)v176;
      if (SHIBYTE(__p.__end_) >= 0)
        v179 = (std::__split_buffer<std::wstring>::pointer)&__p;
      else
        v179 = __p.__first_;
      tknPrintf("Warning: %sParameter '%s' is deprecated\n", v177, v178, v179);
      v118 = v174;
      v172 = v298;
      v173 = v302;
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (v354.i8[15] < 0)
      {
        operator delete(v353.__vftable);
        if (!v302)
        {
LABEL_401:
          *(_QWORD *)(v140 + 112) |= v301;
          if (v172)
            *(_QWORD *)(v140 + 144) = v172;
          if (*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64) >= 0x21uLL)
          {
            v180 = 0;
            v181 = 1;
            do
            {
              if (*((_QWORD *)v308[0] + v181)
                && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 40))(v140, v181))
              {
                v182 = &v353;
                loggableFileObject(v115);
                if (v354.i8[15] < 0)
                  v182 = v353.__vftable;
                v183 = *(_QWORD *)(a1 + 64) + v180;
                v184 = (unsigned int *)(v183 + 40);
                if (*(char *)(v183 + 63) < 0)
                  v184 = *(unsigned int **)v184;
                loggableUnicode(v184, &__p);
                if (SHIBYTE(__p.__end_) >= 0)
                  v186 = (std::__split_buffer<std::wstring>::pointer)&__p;
                else
                  v186 = __p.__first_;
                tknPrintf("Error: %sIncorrect default setting for '%s' configuration\n", v185, v182, v186);
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
                if (v354.i8[15] < 0)
                  operator delete(v353.__vftable);
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                TException::TException(&v353, (__int128 *)&__p);
                v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
                if (v355 >= 0)
                  v187 = &v354;
                else
                  v187 = (int64x2_t *)v354.i64[0];
                conditionalAssert(v187->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1148);
                TException::~TException(&v353);
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
                v188 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v353, "");
                TException::TException(v188, (__int128 *)&v353);
                *v188 = &unk_1E5D16BC8;
              }
              if (*((_QWORD *)v307[0] + v181)
                && (*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 32))(v140, v181))
              {
                v189 = &v353;
                loggableFileObject(v115);
                if (v354.i8[15] < 0)
                  v189 = v353.__vftable;
                v190 = *(_QWORD *)(a1 + 64) + v180;
                v191 = (unsigned int *)(v190 + 40);
                if (*(char *)(v190 + 63) < 0)
                  v191 = *(unsigned int **)v191;
                loggableUnicode(v191, &__p);
                if (SHIBYTE(__p.__end_) >= 0)
                  v193 = (std::__split_buffer<std::wstring>::pointer)&__p;
                else
                  v193 = __p.__first_;
                tknPrintf("Error: %sIncorrect value setting for '%s' configuration\n", v192, v189, v193);
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
                if (v354.i8[15] < 0)
                  operator delete(v353.__vftable);
                std::string::basic_string[abi:ne180100]<0>(&__p, "");
                TException::TException(&v353, (__int128 *)&__p);
                v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
                if (v355 >= 0)
                  v194 = &v354;
                else
                  v194 = (int64x2_t *)v354.i64[0];
                conditionalAssert(v194->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1154);
                TException::~TException(&v353);
                if (SHIBYTE(__p.__end_) < 0)
                  operator delete(__p.__first_);
                v195 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(&v353, "");
                TException::TException(v195, (__int128 *)&v353);
                *v195 = &unk_1E5D16BC8;
              }
              ++v181;
              v180 += 32;
            }
            while (v181 < (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 5);
          }
          if (v118
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v140 + 40))(v140, 1, v118))
          {
            loggableFileObject(v115);
            if (v354.i8[15] >= 0)
              v201 = &v353;
            else
              v201 = v353.__vftable;
            tknPrintf("Error: %sIncorrect setting of Original attribute\n", v200, v201);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v202 = &v354;
            else
              v202 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v202->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1162);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v203 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v203, (__int128 *)&v353);
            *v203 = &unk_1E5D16BC8;
          }
          if (v117
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v140 + 40))(v140, Config, v117))
          {
            loggableFileObject(v115);
            if (v354.i8[15] >= 0)
              v205 = &v353;
            else
              v205 = v353.__vftable;
            tknPrintf("Error: %sIncorrect setting of Format attribute\n", v204, v205);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v206 = &v354;
            else
              v206 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v206->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1168);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v207 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v207, (__int128 *)&v353);
            *v207 = &unk_1E5D16BC8;
          }
          if (v116
            && (*(unsigned int (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)v140 + 40))(v140, v294, v116))
          {
            loggableFileObject(v115);
            if (v354.i8[15] >= 0)
              v209 = &v353;
            else
              v209 = v353.__vftable;
            tknPrintf("Error: %sIncorrect setting of SpellOut attribute\n", v208, v209);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v210 = &v354;
            else
              v210 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v210->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1174);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v211 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v211, (__int128 *)&v353);
            *v211 = &unk_1E5D16BC8;
          }
          if (!v114)
          {
            TParamManager::add((TParamManager *)a1, (TParam *)v140);
            goto LABEL_425;
          }
          if (*(char *)(v140 + 111) < 0)
          {
            if (!*(_QWORD *)(v140 + 96))
              goto LABEL_425;
          }
          else if (!*(_BYTE *)(v140 + 111))
          {
            goto LABEL_425;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v140);
          goto LABEL_425;
        }
      }
      else
      {
LABEL_399:
        if (!v173)
          goto LABEL_401;
      }
      MEMORY[0x1AF44C9E0](v140 + 40, v173);
      goto LABEL_401;
    }
    if ((v289 & 1) == 0)
    {
      loggableFileObject(v296);
      v129 = v354.i8[15];
      v130 = v353.__vftable;
      loggableUnicode((unsigned int *)v309, &__p);
      v132 = &v353;
      if (v129 < 0)
        v132 = (std::exception *)v130;
      if (SHIBYTE(__p.__end_) >= 0)
        v133 = (std::__split_buffer<std::wstring>::pointer)&__p;
      else
        v133 = __p.__first_;
      tknPrintf("Error: %sParameter '%s' does not exist\n", v131, v132, v133);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      if (v354.i8[15] < 0)
        operator delete(v353.__vftable);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v353, (__int128 *)&__p);
      v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
      if (v355 >= 0)
        v134 = &v354;
      else
        v134 = (int64x2_t *)v354.i64[0];
      conditionalAssert(v134->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 955);
      TException::~TException(&v353);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      v135 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v353, "");
      TException::TException(v135, (__int128 *)&v353);
      *v135 = &unk_1E5D16BC8;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 8))
    {
      if (a1 + 48 != v113)
      {
        loggableFileObject(v296);
        v212 = v354.i8[15];
        v213 = v353.__vftable;
        loggableUnicode((unsigned int *)v309, &__p);
        v215 = &v353;
        if (v212 < 0)
          v215 = (std::exception *)v213;
        if (SHIBYTE(__p.__end_) >= 0)
          v216 = (std::__split_buffer<std::wstring>::pointer)&__p;
        else
          v216 = __p.__first_;
        tknPrintf("Error: %sParameter '%s' already exists\n", v214, v215, v216);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        if (v354.i8[15] < 0)
          operator delete(v353.__vftable);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v353, (__int128 *)&__p);
        v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
        if (v355 >= 0)
          v217 = &v354;
        else
          v217 = (int64x2_t *)v354.i64[0];
        conditionalAssert(v217->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 995);
        TException::~TException(&v353);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        v218 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v353, "");
        TException::TException(v218, (__int128 *)&v353);
        *v218 = &unk_1E5D16BC8;
      }
      if (*(_QWORD *)(a1 + 112) > 4uLL)
      {
        if (!*((_QWORD *)v308[0] + 1))
        {
          loggableFileObject(v296);
          if (v354.i8[15] >= 0)
            v235 = &v353;
          else
            v235 = v353.__vftable;
          tknPrintf("Error: %s'Root' default setting is mandatory\n", v234, v235);
          if (v354.i8[15] < 0)
            operator delete(v353.__vftable);
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          TException::TException(&v353, (__int128 *)&__p);
          v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
          if (v355 >= 0)
            v236 = &v354;
          else
            v236 = (int64x2_t *)v354.i64[0];
          conditionalAssert(v236->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1009);
          TException::~TException(&v353);
          if (SHIBYTE(__p.__end_) < 0)
            operator delete(__p.__first_);
          v237 = __cxa_allocate_exception(0x20uLL);
          std::string::basic_string[abi:ne180100]<0>(&v353, "");
          TException::TException(v237, (__int128 *)&v353);
          *v237 = &unk_1E5D16BC8;
        }
      }
      else if (!v303)
      {
        loggableFileObject(v296);
        if (v354.i8[15] >= 0)
          v126 = &v353;
        else
          v126 = v353.__vftable;
        tknPrintf("Error: %s'Original' attribute is mandatory\n", v125, v126);
        if (v354.i8[15] < 0)
          operator delete(v353.__vftable);
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        TException::TException(&v353, (__int128 *)&__p);
        v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
        if (v355 >= 0)
          v127 = &v354;
        else
          v127 = (int64x2_t *)v354.i64[0];
        conditionalAssert(v127->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1003);
        TException::~TException(&v353);
        if (SHIBYTE(__p.__end_) < 0)
          operator delete(__p.__first_);
        v128 = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(&v353, "");
        TException::TException(v128, (__int128 *)&v353);
        *v128 = &unk_1E5D16BC8;
      }
      switch(a3)
      {
        case 0:
          v140 = operator new();
          TBoolParam::TBoolParam(v140, (uint64_t)v309);
          break;
        case 1:
          if ((v291 & 1) == 0)
          {
            loggableFileObject(v296);
            if (v354.i8[15] >= 0)
              v253 = &v353;
            else
              v253 = v353.__vftable;
            tknPrintf("Error: %s'Allowables' attribute is mandatory\n", v252, v253);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v254 = &v354;
            else
              v254 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v254->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1039);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v255 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v255, (__int128 *)&v353);
            *v255 = &unk_1E5D16BC8;
          }
          goto LABEL_321;
        case 2:
          if (!v288 || !v293)
          {
            loggableFileObject(v296);
            if (v354.i8[15] >= 0)
              v257 = &v353;
            else
              v257 = v353.__vftable;
            tknPrintf("Error: %s'Min' and 'Max' attributes are mandatory\n", v256, v257);
            if (v354.i8[15] < 0)
              operator delete(v353.__vftable);
            std::string::basic_string[abi:ne180100]<0>(&__p, "");
            TException::TException(&v353, (__int128 *)&__p);
            v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
            if (v355 >= 0)
              v258 = &v354;
            else
              v258 = (int64x2_t *)v354.i64[0];
            conditionalAssert(v258->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1025);
            TException::~TException(&v353);
            if (SHIBYTE(__p.__end_) < 0)
              operator delete(__p.__first_);
            v259 = __cxa_allocate_exception(0x20uLL);
            std::string::basic_string[abi:ne180100]<0>(&v353, "");
            TException::TException(v259, (__int128 *)&v353);
            *v259 = &unk_1E5D16BC8;
          }
          v140 = operator new();
          TIntParam::TIntParam(v140, (uint64_t)v309);
          break;
        case 3:
          v140 = operator new();
          TFloatParam::TFloatParam(v140, (uint64_t)v309);
          break;
        case 4:
LABEL_321:
          v140 = operator new();
          TStringParam::TStringParam((_QWORD *)v140, (uint64_t)v309);
          break;
        default:
          v140 = 0;
          break;
      }
      v301 |= 8uLL;
      if (!a3)
        goto LABEL_312;
      goto LABEL_324;
    }
    if ((v289 & 1) == 0)
    {
      loggableFileObject(v296);
      if (v354.i8[15] >= 0)
        v137 = &v353;
      else
        v137 = v353.__vftable;
      tknPrintf("Error: %sThis param manager does not support param creation\n", v136, v137);
      if (v354.i8[15] < 0)
        operator delete(v353.__vftable);
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      TException::TException(&v353, (__int128 *)&__p);
      v353.__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
      if (v355 >= 0)
        v138 = &v354;
      else
        v138 = (int64x2_t *)v354.i64[0];
      conditionalAssert(v138->i8, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 988);
      TException::~TException(&v353);
      if (SHIBYTE(__p.__end_) < 0)
        operator delete(__p.__first_);
      v139 = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v353, "");
      TException::TException(v139, (__int128 *)&v353);
      *v139 = &unk_1E5D16BC8;
    }
  }
LABEL_425:
  v353.__vftable = (std::exception_vtbl *)&v304;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v353);
  v353.__vftable = (std::exception_vtbl *)&v305;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v353);
  v353.__vftable = (std::exception_vtbl *)&v306;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v353);
  if (v307[0])
  {
    v307[1] = v307[0];
    operator delete(v307[0]);
  }
  if (v308[0])
  {
    v308[1] = v308[0];
    operator delete(v308[0]);
  }
}

void sub_1ADFAB7A0(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, int a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__pa,uint64_t a44,int a45,__int16 a46,char a47,char a48,std::__split_buffer<std::wstring> *a49,uint64_t a50)
{
  uint64_t v50;
  uint64_t v51;

  MEMORY[0x1AF44D190](v51, 0x1070C40ADD13FEBLL);
  if (a2 == 1)
  {
    __cxa_begin_catch(a1);
    if ((a27 & 0x100000000) == 0)
    {
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
    }
    __cxa_rethrow();
  }
  JUMPOUT(0x1ADFABE10);
}

void sub_1ADFABDF0()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADFABE10);
}

void sub_1ADFABDFC(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADFABE00);
  __clang_call_terminate(a1);
}

void sub_1ADFABE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char **a33,uint64_t a34,uint64_t a35,char *a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t *a58)
{
  a58 = (uint64_t *)&a33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a58);
  a33 = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  a36 = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a36);
  if (__p)
  {
    a43 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a45)
  {
    a46 = (uint64_t)a45;
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

void TParamManager::init(TParamManager *this, const TFileObject *a2, char a3)
{
  uint64_t v6;
  int v7;
  int v8;
  _QWORD *v9;
  std::exception_vtbl *v10;
  _QWORD *exception;
  __int128 __p;
  uint64_t v13;
  std::exception v14[3];
  char v15;
  const char *v16;
  __int128 v17;
  uint64_t v18;
  const char *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  __int128 v23;
  uint64_t v24;
  const char *v25;
  __int128 v26;
  uint64_t v27;
  const char *v28;
  __int128 v29;
  uint64_t v30;
  const char *v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  const char *v37;
  __int128 v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  __int128 v42;
  const char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v16 = "O";
  v17 = xmmword_1AE15FCA0;
  v18 = -1;
  v19 = "O";
  v20 = xmmword_1AE15FCA0;
  v21 = -1;
  v22 = "O";
  v23 = xmmword_1AE15FCA0;
  v24 = -1;
  v25 = "O";
  v26 = xmmword_1AE15FCA0;
  v27 = 3;
  v28 = "O";
  v29 = xmmword_1AE15FCA0;
  v30 = -1;
  v31 = "C";
  v32 = xmmword_1AE15FCA0;
  v33 = -1;
  v34 = "C";
  v35 = xmmword_1AE15FCA0;
  v36 = -1;
  v37 = "C";
  v38 = xmmword_1AE15FCA0;
  v39 = -1;
  v40 = "C";
  v41 = 3;
  v42 = xmmword_1AE190430;
  v43 = "C";
  v44 = 3;
  v45 = xmmword_1AE13F780;
  if (TFileObject::verify((uint64_t)a2, (uint64_t)&v16, 0xAuLL, 1))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    TException::TException(v14, &__p);
    v14[0].__vftable = (std::exception_vtbl *)&unk_1E5D16BC8;
    if (v15 >= 0)
      v10 = (std::exception_vtbl *)&v14[1];
    else
      v10 = v14[1].__vftable;
    conditionalAssert((const char *)v10, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1218);
    TException::~TException(v14);
    if (SHIBYTE(v13) < 0)
      operator delete((void *)__p);
    exception = __cxa_allocate_exception(0x20uLL);
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    TException::TException(exception, (__int128 *)v14);
    *exception = &unk_1E5D16BC8;
  }
  *((_QWORD *)&__p + 1) = 0;
  v13 = 0;
  *(_QWORD *)&__p = (char *)&__p + 8;
  v6 = *((_QWORD *)a2 + 3);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_31;
  }
  do
  {
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v8 = 0;
LABEL_15:
      v7 = 1;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v8 = 0;
      v7 = 0;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v7 = 1;
LABEL_19:
      v8 = 4;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      goto LABEL_19;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v7 = 1;
LABEL_22:
      v8 = 2;
      goto LABEL_23;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      goto LABEL_22;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
    {
      v8 = 1;
      goto LABEL_15;
    }
    if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
    {
      v7 = 0;
      v8 = 1;
    }
    else
    {
      if (!wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"O"))
      {
        v7 = 1;
      }
      else
      {
        if (wcscmp(*(const __int32 **)(v6 + 8), (const __int32 *)"C"))
          goto LABEL_24;
        v7 = 0;
      }
      v8 = 3;
    }
LABEL_23:
    TParamManager::initParam((uint64_t)this, v6, v8, v7, a3, (uint64_t **)&__p);
LABEL_24:
    v6 = *(_QWORD *)(v6 + 16);
  }
  while (v6);
  v9 = (_QWORD *)*((_QWORD *)&__p + 1);
LABEL_31:
  std::__tree<int>::destroy((uint64_t)&__p, v9);
}

void sub_1ADFAC300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _QWORD *v27[61];

  std::__tree<int>::destroy((uint64_t)v27, v27[1]);
  _Unwind_Resume(a1);
}

void TParamManager::initialize(TParamManager *this, TInputStream *a2, char a3)
{
  const TFileObject *v6;
  int *NextToken;
  char v8;
  __int32 *v9;
  __int32 *v10;
  __int32 *v11;
  uint64_t Config;
  __int32 *v13;
  unint64_t v14;
  uint64_t v15;
  void **v16;
  __int32 *v17;
  __int32 *v18;
  __int32 *v19;
  uint64_t v20;
  void **v21;
  const char *v22;
  _QWORD *v23;
  const char *v24;
  _QWORD *exception;
  TFileObject *v26;
  void *v27[2];
  char v28;
  void *__p[2];
  char v30;
  char v31;
  __int32 *__s;
  __int128 v33;
  _BYTE v34[785];
  char v35;
  std::exception v36;
  __int128 v37;
  _BYTE v38[1024];
  char v39;
  _QWORD v40[11];

  if (*((_BYTE *)a2 + 8))
  {
    if (TInputStream::verifyHeader((uint64_t)a2, "Parameter", (uint64_t)pParameterVersion, 7))
    {
      std::string::basic_string[abi:ne180100]<0>(&__s, "");
      TException::TException(&v36, (__int128 *)&__s);
      v36.__vftable = (std::exception_vtbl *)&unk_1E5D16668;
      if (v38[7] >= 0)
        v24 = (const char *)&v37;
      else
        v24 = (const char *)v37;
      conditionalAssert(v24, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1282);
      TException::~TException(&v36);
      if (SHIBYTE(v33) < 0)
        operator delete(__s);
      exception = __cxa_allocate_exception(0x20uLL);
      std::string::basic_string[abi:ne180100]<0>(&v36, "");
      TException::TException(exception, (__int128 *)&v36);
      *exception = &unk_1E5D16668;
    }
    *((_QWORD *)this + 14) = *((_QWORD *)a2 + 12);
    TFileObjectParser::TFileObjectParser((TFileObjectParser *)v40, a2);
    v6 = (const TFileObject *)v40[0];
    if (*((_QWORD *)this + 14) >= 5uLL)
    {
      v26 = (TFileObject *)v40[0];
      v36.__vftable = (std::exception_vtbl *)v38;
      v37 = xmmword_1AE1418C0;
      v39 = 1;
      TInputStream::getStringParameter((uint64_t)a2, "ConfigurationNames", (uint64_t)&v36, &dword_1AE19045C);
      if (*((_QWORD *)&v37 + 1))
      {
        __s = (__int32 *)v34;
        v33 = xmmword_1AE1418C0;
        v35 = 1;
        if (*((_QWORD *)&v37 + 1) >= (unint64_t)v37)
        {
          if (v39)
          {
            LODWORD(__p[0]) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v36, *((unint64_t *)&v37 + 1), (int *)__p, 1uLL);
            NextToken = (int *)v36.__vftable;
            --*((_QWORD *)&v37 + 1);
          }
          else
          {
            NextToken = (int *)v36.__vftable;
            if ((_QWORD)v37)
              *((_DWORD *)v36.__vftable + v37 - 1) = 0;
          }
        }
        else
        {
          NextToken = (int *)v36.__vftable;
          *((_DWORD *)&v36.~exception + *((_QWORD *)&v37 + 1)) = 0;
        }
        if (*NextToken)
        {
          v8 = 0;
          while (1)
          {
            NextToken = getNextToken(NextToken, (uint64_t)&__s, (__int32 *)",");
            if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33)
            {
              if (v35)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                v9 = __s;
                --*((_QWORD *)&v33 + 1);
              }
              else
              {
                v9 = __s;
                if ((_QWORD)v33)
                  __s[(_QWORD)v33 - 1] = 0;
              }
            }
            else
            {
              v9 = __s;
              __s[*((_QWORD *)&v33 + 1)] = 0;
            }
            v10 = wcschr(v9, 58);
            v11 = v10;
            if (v10)
            {
              Config = TParamManager::getConfig((uint64_t)this, v10 + 1);
              if (Config == -1)
              {
                if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33)
                {
                  if (v35)
                  {
                    LODWORD(v27[0]) = 0;
                    TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)v27, 1uLL);
                    v13 = __s;
                    --*((_QWORD *)&v33 + 1);
                  }
                  else
                  {
                    v13 = __s;
                    if ((_QWORD)v33)
                      __s[(_QWORD)v33 - 1] = 0;
                  }
                }
                else
                {
                  v13 = __s;
                  __s[*((_QWORD *)&v33 + 1)] = 0;
                }
                loggableUnicode((unsigned int *)v13, __p);
                if (v30 >= 0)
                  v16 = __p;
                else
                  v16 = (void **)__p[0];
                tknPrintf("Error: Parent configuration not defined: '%s'\n", v15, v16);
                if (v30 < 0)
                  operator delete(__p[0]);
                v8 = 1;
              }
              v14 = *((_QWORD *)&v33 + 1);
              if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                  v14 = --*((_QWORD *)&v33 + 1);
                }
                else if ((_QWORD)v33)
                {
                  __s[(_QWORD)v33 - 1] = 0;
                }
              }
              else
              {
                __s[*((_QWORD *)&v33 + 1)] = 0;
              }
              *v11 = 0;
            }
            else
            {
              v14 = *((_QWORD *)&v33 + 1);
              Config = 1;
            }
            if (v14 >= (unint64_t)v33)
            {
              if (v35)
              {
                LODWORD(__p[0]) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&__s, v14, (int *)__p, 1uLL);
                v17 = __s;
                --*((_QWORD *)&v33 + 1);
              }
              else
              {
                v17 = __s;
                if ((_QWORD)v33)
                  __s[(_QWORD)v33 - 1] = 0;
              }
            }
            else
            {
              v17 = __s;
              __s[v14] = 0;
            }
            if (TParamManager::getConfig((uint64_t)this, v17) == -1)
            {
              if ((v8 & 1) != 0)
                goto LABEL_62;
              if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(__p[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)__p, 1uLL);
                  v19 = __s;
                  --*((_QWORD *)&v33 + 1);
                }
                else
                {
                  v19 = __s;
                  if ((_QWORD)v33)
                    __s[(_QWORD)v33 - 1] = 0;
                }
              }
              else
              {
                v19 = __s;
                __s[*((_QWORD *)&v33 + 1)] = 0;
              }
              TParamManager::newConfig((uint64_t)this, v19, (std::exception_vtbl *)Config);
              v8 = 0;
              if (!*NextToken)
                break;
            }
            else
            {
              if (*((_QWORD *)&v33 + 1) >= (unint64_t)v33)
              {
                if (v35)
                {
                  LODWORD(v27[0]) = 0;
                  TBuffer<wchar_t>::insert((uint64_t)&__s, *((unint64_t *)&v33 + 1), (int *)v27, 1uLL);
                  v18 = __s;
                  --*((_QWORD *)&v33 + 1);
                }
                else
                {
                  v18 = __s;
                  if ((_QWORD)v33)
                    __s[(_QWORD)v33 - 1] = 0;
                }
              }
              else
              {
                v18 = __s;
                __s[*((_QWORD *)&v33 + 1)] = 0;
              }
              loggableUnicode((unsigned int *)v18, __p);
              if (v30 >= 0)
                v21 = __p;
              else
                v21 = (void **)__p[0];
              tknPrintf("Error: Duplicate configuration name: '%s'\n", v20, v21);
              if (v30 < 0)
                operator delete(__p[0]);
LABEL_62:
              v8 = 1;
              if (!*NextToken)
              {
                std::string::basic_string[abi:ne180100]<0>(v27, "");
                TException::TException(__p, (__int128 *)v27);
                __p[0] = &unk_1E5D16BC8;
                if (v31 >= 0)
                  v22 = (const char *)&__p[1];
                else
                  v22 = (const char *)__p[1];
                conditionalAssert(v22, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/params.cpp", 1327);
                TException::~TException((std::exception *)__p);
                if (v28 < 0)
                  operator delete(v27[0]);
                v23 = __cxa_allocate_exception(0x20uLL);
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                TException::TException(v23, (__int128 *)__p);
                *v23 = &unk_1E5D16BC8;
              }
            }
          }
        }
        if (v35 && __s != (__int32 *)v34 && __s)
          MEMORY[0x1AF44D160]();
      }
      if (v39 && v36.__vftable != (std::exception_vtbl *)v38 && v36.__vftable)
        MEMORY[0x1AF44D160]();
      v6 = v26;
    }
    TParamManager::init(this, v6, a3);
    TFileObjectParser::~TFileObjectParser((TFileObjectParser *)v40);
  }
}

void sub_1ADFACA64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, std::exception a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  uint64_t v24;
  unint64_t v27;

  if (LOBYTE(STACK[0x490]))
  {
    if (a24 != a11 && a24 != 0)
      MEMORY[0x1AF44D160]();
  }
  if (LOBYTE(STACK[0x8B0]))
  {
    v27 = STACK[0x498];
    if (STACK[0x498] != a12)
    {
      if (v27)
        MEMORY[0x1AF44D160](v27, 0x1000C8052888210);
    }
  }
  TFileObjectParser::~TFileObjectParser((TFileObjectParser *)(v24 - 168));
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::getValue(TParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (*((_BYTE *)a1 + TParam::getValidConfig(a1, a2) + 152))
    v4 = "t";
  else
    v4 = "f";
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

uint64_t TBoolParam::getValueOriginal(TBoolParam *a1, uint64_t a2, uint64_t a3)
{
  char *v4;

  if (TBoolParam::getOriginal(a1, a2))
    v4 = "t";
  else
    v4 = "f";
  return TBuffer<wchar_t>::assign(a3, (int *)v4);
}

void TFloatParam::~TFloatParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x1AF44D190);
}

void TIntParam::~TIntParam(void **this)
{
  TParam::~TParam(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__equal_aligned[abi:ne180100]<std::__bitset<1ul,64ul>,true,true>(_QWORD *a1, unsigned int a2, uint64_t a3, unsigned int a4, _QWORD *a5)
{
  int64_t v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;

  v5 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
  if (v5 >= 1)
  {
    if (a2)
    {
      if (v5 >= (unint64_t)(64 - a2))
        v6 = 64 - a2;
      else
        v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)a1);
      if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v6)) & (-1 << a2) & (*a1 ^ *a5)) != 0)
        return 0;
      v5 -= v6;
      ++a5;
      ++a1;
    }
    if (v5 >= 64)
    {
      while (*a5 == *a1)
      {
        v7 = v5 - 64;
        ++a1;
        ++a5;
        v8 = v5 <= 127;
        v5 -= 64;
        if (v8)
          goto LABEL_14;
      }
      return 0;
    }
    v7 = v5;
LABEL_14:
    if (v7 >= 1 && (*a1 ^ *a5) << -(char)v7)
      return 0;
  }
  return 1;
}

void TLogicException::~TLogicException(std::exception *this)
{
  TException::~TException(this);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'std::wostringstream::~wostringstream(_QWORD *a1)
{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  JUMPOUT(0x1AF44D0A0);
}

{
  char *v1;

  v1 = (char *)a1 + *(_QWORD *)(*a1 - 24);
  if (v1[95] < 0)
    operator delete(*((void **)v1 + 9));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1AF44D0A0](v1 + 112);
  JUMPOUT(0x1AF44D190);
}

void std::wostringstream::~wostringstream(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 112;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::wstreambuf::~wstreambuf();
  std::wostream::~wostream();
  MEMORY[0x1AF44D0A0](v1);
  JUMPOUT(0x1AF44D190);
}

uint64_t TBoolParam::TBoolParam(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = TParam::TParam(a1, 0, a2);
  *(_QWORD *)v3 = off_1E5D15920;
  *(_OWORD *)(v3 + 200) = 0u;
  *(_OWORD *)(v3 + 216) = 0u;
  *(_OWORD *)(v3 + 232) = 0u;
  *(_BYTE *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 112) |= 0x200uLL;
  v4 = *(_QWORD **)(v3 + 136);
  if (v4)
  {
    v5 = v4[16];
    v4[16] = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, a1);
    v4[16] = v5;
  }
  return a1;
}

void sub_1ADFAD050(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v4 = v2;
  v6 = v3;
  v7 = 0;
  *(_QWORD *)(v4 + 128) = v6;
  while (1)
  {
    if (SHIBYTE(v1[v7 + 30]) < 0)
      operator delete(v1[v7 + 28]);
    v7 -= 3;
    if (v7 == -6)
    {
      TParam::~TParam(v1);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t TFloatParam::TFloatParam(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = (_QWORD *)TParam::TParam(a1, 3, a2);
  *v3 = &off_1E5D15B98;
  v3[19] = 0;
  v3[14] |= 0x200uLL;
  v4 = (_QWORD *)v3[17];
  if (v4)
  {
    v5 = v4[16];
    v4[16] = 0;
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, a1);
    v4[16] = v5;
  }
  return a1;
}

void sub_1ADFAD10C(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = v3;
  *(_QWORD *)(v2 + 128) = v4;
  TParam::~TParam(v1);
  _Unwind_Resume(a1);
}

uint64_t TBoolParam::getOriginal(TBoolParam *this, uint64_t a2)
{
  unint64_t i;

  for (i = *((_QWORD *)this + 14);
        ((i >> (a2 + 9)) & 1) == 0;
  return *((unsigned __int8 *)this + a2 + 152);
}

std::wstringbuf::string_type *__cdecl std::wstringbuf::str(std::wstringbuf::string_type *__return_ptr retstr, std::wstringbuf::string_type *this)
{
  std::wstring::value_type v2;
  int *size;
  std::wstring::pointer data;
  int *v5;

  v2 = this[4].__r_.__value_.__s.__data_[0];
  if ((v2 & 0x10) != 0)
  {
    size = (int *)this[3].__r_.__value_.__r.__words[2];
    data = this[2].__r_.__value_.__l.__data_;
    if (size < data)
    {
      this[3].__r_.__value_.__r.__words[2] = (std::wstring::size_type)data;
      size = data;
    }
    v5 = (int *)this[1].__r_.__value_.__r.__words[2];
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      *(_OWORD *)&retstr->__r_.__value_.__l.__data_ = 0uLL;
      retstr->__r_.__value_.__r.__words[2] = 0;
      return this;
    }
    v5 = (int *)this->__r_.__value_.__r.__words[2];
    size = (int *)this[1].__r_.__value_.__l.__size_;
  }
  return (std::wstringbuf::string_type *)std::basic_string<char32_t>::__init_with_size[abi:ne180100]<char32_t const*,char32_t const*>(retstr, v5, size, size - v5);
}

void std::vector<std::wstring>::__assign_with_size[abi:ne180100]<std::wstring*,std::wstring*>(std::vector<std::wstring> *this, std::wstring *__str, __int128 *a3, unint64_t a4)
{
  std::__compressed_pair<std::wstring *> *p_end_cap;
  std::wstring *begin;
  unint64_t v10;
  unint64_t v11;
  std::wstring *v12;
  std::wstring *v13;
  std::wstring *v14;
  std::wstring *v15;
  std::vector<std::wstring>::pointer end;

  p_end_cap = &this->__end_cap_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100](this, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    v13 = (std::wstring *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, v13, begin);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>((uint64_t)p_end_cap, (__int128 *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(__str, (std::wstring *)a3, begin);
  v15 = v14;
  end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(end[-1].__r_.__value_.__l.__data_);
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_1ADFAD314(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADFAD31C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::wstring *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::wstring>,std::wstring*,std::wstring*,std::wstring*>(uint64_t a1, __int128 *a2, __int128 *a3, std::wstring *this)
{
  std::wstring *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  std::wstring *v11;
  std::wstring *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::basic_string<char32_t>::__init_copy_ctor_external(v4, *(const std::wstring::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADFAD3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::wstring *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::wstring *,std::wstring *,std::wstring *,0>(std::wstring *__str, std::wstring *a2, std::wstring *this)
{
  const std::wstring *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::wstring::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::wstring *)v4;
}

uint64_t std::vector<std::pair<unsigned long,std::wstring>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v8 - 32) = v9;
      v8 -= 32;
      v10 = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v8;
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<unsigned long,std::wstring>>,std::reverse_iterator<std::pair<unsigned long,std::wstring>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::IndexRuleLmeWordTagger::Rule>,std::reverse_iterator<quasar::IndexRuleLmeWordTagger::Rule*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<wchar_t const*>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1ADFAD5E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__count_unique<wchar_t const*>(uint64_t a1, const __int32 **a2)
{
  uint64_t **v2;
  uint64_t v4;

  v2 = *(uint64_t ***)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((wcscmp(*a2, (const __int32 *)v2[4]) & 0x80000000) == 0)
      {
        if ((wcscmp((const __int32 *)v2[4], *a2) & 0x80000000) == 0)
          return v4;
        ++v2;
      }
      v2 = (uint64_t **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *std::__tree<wchar_t const*,TWideCharCompare,std::allocator<wchar_t const*>>::__emplace_unique_key_args<wchar_t const*,wchar_t const* const&>(uint64_t **a1, const __int32 **a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<wchar_t const*,TSymbol *>,std::__map_value_compare<wchar_t const*,std::__value_type<wchar_t const*,TSymbol *>,TWideCharCompare,true>,std::allocator<std::__value_type<wchar_t const*,TSymbol *>>>::__find_equal<wchar_t const*>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x28uLL);
    v6[4] = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

kaldi::quasar::TorchEncoderDecoder::AttentionModel *kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this, char a2, char a3, char a4)
{
  *(_QWORD *)this = &off_1E5D33840;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  *((_BYTE *)this + 1136) = a2;
  *((_BYTE *)this + 1137) = a3;
  *((_BYTE *)this + 1138) = a4;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_QWORD *)this + 143) = &unk_1E5D34170;
  *((_BYTE *)this + 1184) = 0;
  return this;
}

void sub_1ADFAD77C(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;

  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(kaldi::quasar::TorchEncoderDecoder::AttentionModel *this)
{
  kaldi::nnet1::Nnet *v2;

  *(_QWORD *)this = &off_1E5D33840;
  v2 = (kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 8);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 1144);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet(v2);
}

{
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState(int32x2_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  int32x2_t *v5;
  uint64_t v8;
  unsigned __int32 v9;
  int32x2_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD v14[4];
  _QWORD v15[4];

  v5 = a1 + 143;
  if (*(int *)(a2 + 20) < 1)
  {
    kaldi::CuMatrix<float>::Resize(v5, 0, 0, 0, 0);
  }
  else
  {
    kaldi::CuMatrix<float>::Resize(v5, a4, *(unsigned int *)(a2 + 16), 2, 0);
    v8 = *(_QWORD *)&a1[144] + 4 * a1[146].i32[0] * a3;
    v9 = a1[145].u32[0];
    v10 = a1[147];
    v15[0] = &unk_1E5D29D70;
    v15[1] = v8;
    v15[3] = v10;
    v15[2] = v9;
    v11 = *(_QWORD *)(a2 + 8);
    v12 = *(_DWORD *)(a2 + 16);
    v13 = *(_QWORD *)(a2 + 32);
    v14[0] = &unk_1E5D29D70;
    v14[1] = v11;
    v14[3] = v13;
    v14[2] = v12;
    kaldi::CuVectorBase<float>::CopyFromVec(v15, (uint64_t)v14);
  }
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(uint64_t a1, int32x2_t *a2, int a3)
{
  _DWORD *v6;
  void *__p;
  void *v8;
  _DWORD *v9;

  kaldi::CuMatrix<float>::Resize(a2, *(_DWORD *)(a1 + 1164) > 0, *(unsigned int *)(a1 + 1160), 0, 0);
  if (a2[2].i32[1] >= 1)
  {
    v6 = operator new(4uLL);
    __p = v6;
    *v6 = a3;
    v8 = v6 + 1;
    v9 = v6 + 1;
    kaldi::CuMatrixBase<float>::CopyRows((uint64_t)a2, a1 + 1144, &__p);
    if (__p)
    {
      v8 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADFAD980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD v12[35];

  if (*(_BYTE *)(a1 + 1137))
  {
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whe_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whe_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 8));
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 8));
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    if (*(_BYTE *)(a1 + 1137))
      goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 1138))
  {
LABEL_8:
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whd_", 12);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whd_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384));
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384));
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
      if (kaldi::g_kaldi_verbose_level >= 1)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Reading Whc_", 12);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
      }
    }
    v10 = (uint64_t **)(a1 + 760);
    kaldi::nnet1::Nnet::Read(v10, a2, a3, a4);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Whc_.Dims() ", 12);
      kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)v10);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" ", 1);
      kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)v10);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
    }
  }
}

void sub_1ADFADC44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int32x2_t *a4@<X3>, int32x2_t *a5@<X4>, std::vector<unsigned int> *a6@<X8>)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  unsigned __int32 v24;
  int32x2_t v25;
  uint64_t v26;
  unsigned __int32 v27;
  int32x2_t v28;
  uint64_t v29;
  std::vector<unsigned int> *v30;
  std::vector<unsigned int>::pointer begin;
  size_t v32;
  uint64_t v34;
  unsigned int v35;
  _QWORD v37[5];
  std::vector<unsigned int>::size_type __sz;
  void *__src;
  uint64_t v40;
  int32x2_t v41;
  _OWORD v42[2];
  char v43;
  int32x2_t v44;
  _OWORD v45[2];
  char v46;
  int32x2_t v47;
  __int128 v48;
  __int128 v49;
  char v50;

  v35 = *(_DWORD *)(a3 + 20);
  v49 = 0u;
  v48 = 0u;
  v47 = (int32x2_t)&unk_1E5D34170;
  v50 = 0;
  if (*(_BYTE *)(a1 + 1138))
  {
    memset(v45, 0, sizeof(v45));
    v44 = (int32x2_t)&unk_1E5D34170;
    v46 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, &v44, -1, 0);
    kaldi::CuMatrix<float>::Resize(&v47, *(unsigned int *)(a2 + 20), v35, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v47, a2, CblasNoTrans, (uint64_t)&v44, CblasTrans, 1.0, 1.0);
LABEL_5:
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
    goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 1137))
  {
    memset(v45, 0, sizeof(v45));
    v44 = (int32x2_t)&unk_1E5D34170;
    v46 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, &v44, -1, 0);
    memset(v42, 0, sizeof(v42));
    v41 = (int32x2_t)&unk_1E5D34170;
    v43 = 0;
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 384), a3, &v41, -1, 0);
    kaldi::CuMatrix<float>::Resize(&v47, HIDWORD(v45[0]), v35, 0, 0);
    kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v47, (uint64_t)&v44, CblasNoTrans, (uint64_t)&v41, CblasTrans, 1.0, 1.0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v41);
    goto LABEL_5;
  }
  kaldi::CuMatrix<float>::Resize(&v47, *(unsigned int *)(a2 + 20), v35, 0, 0);
  kaldi::CuMatrixBase<float>::AddMatMat((uint64_t)&v47, a2, CblasNoTrans, a3, CblasTrans, 1.0, 1.0);
LABEL_6:
  kaldi::CuMatrix<float>::Transpose((uint64_t)&v47);
  v34 = a3;
  __sz = 0;
  __src = 0;
  v40 = 0;
  kaldi::CuMatrixBase<float>::FindRowMaxId((uint64_t)&v47, (int *)&__sz);
  v11 = v35;
  kaldi::CuMatrix<float>::Resize(a4, v35, *(unsigned int *)(a2 + 16), 0, 0);
  kaldi::CuMatrix<float>::Resize(a5, v35, DWORD2(v48), 0, 0);
  if ((int)v35 >= 1)
  {
    v12 = 0;
    do
    {
      memset(v42, 0, 24);
      v41 = (int32x2_t)&unk_1E5D341C8;
      kaldi::CuVector<float>::Resize((uint64_t)&v41, DWORD2(v48), 0);
      v44 = (int32x2_t)&unk_1E5D29D70;
      *(_QWORD *)&v45[0] = v48 + 4 * (int)v49 * v12;
      *(_QWORD *)&v45[1] = *((_QWORD *)&v49 + 1);
      *((_QWORD *)&v45[0] + 1) = DWORD2(v48);
      kaldi::CuVector<float>::operator=((uint64_t)&v41, (uint64_t)&v44);
      if (*(_BYTE *)(a1 + 1136))
      {
        kaldi::CuVectorBase<float>::ApplyExp((uint64_t)&v41);
        if (*(_DWORD *)(a1 + 1164) <= v12)
        {
          kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 1144), (v12 + 1), DWORD2(v42[0]), 2, 0);
          v19 = *(_QWORD *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v12;
          v20 = *(_DWORD *)(a1 + 1160);
          v21 = *(_QWORD *)(a1 + 1176);
          v44 = (int32x2_t)&unk_1E5D29D70;
          *(_QWORD *)&v45[0] = v19;
          *(_QWORD *)&v45[1] = v21;
          *((_QWORD *)&v45[0] + 1) = v20;
          kaldi::CuVectorBase<float>::CopyFromVec(&v44, (uint64_t)&v41);
        }
        else
        {
          v45[0] = 0uLL;
          v44 = (int32x2_t)&unk_1E5D341C8;
          *(_QWORD *)&v45[1] = *(_QWORD *)&v42[1];
          kaldi::CuVector<float>::Resize((uint64_t)&v44, DWORD2(v42[0]), 1);
          kaldi::CuVectorBase<float>::CopyFromVec(&v44, (uint64_t)&v41);
          v13 = *(_QWORD *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v12;
          v14 = *(_DWORD *)(a1 + 1160);
          v15 = *(_QWORD *)(a1 + 1176);
          v37[0] = &unk_1E5D29D70;
          v37[1] = v13;
          v37[3] = v15;
          v37[2] = v14;
          kaldi::CuVectorBase<float>::DivElements((uint64_t)&v41, (uint64_t)v37);
          v16 = *(_QWORD *)(a1 + 1152) + 4 * *(_DWORD *)(a1 + 1168) * v12;
          v17 = *(_DWORD *)(a1 + 1160);
          v18 = *(_QWORD *)(a1 + 1176);
          v37[0] = &unk_1E5D29D70;
          v37[1] = v16;
          v37[3] = v18;
          v37[2] = v17;
          kaldi::CuVectorBase<float>::AddVec((uint64_t)v37, (uint64_t)&v44, 1.0, 1.0);
          v44 = (int32x2_t)&unk_1E5D341C8;
          kaldi::CuVector<float>::Destroy((uint64_t)&v44);
          v11 = v35;
        }
        v22 = kaldi::CuVectorBase<float>::Sum((uint64_t)&v41);
        kaldi::CuVectorBase<float>::Scale((uint64_t)&v41, 1.0 / v22);
      }
      else
      {
        kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)&v41);
      }
      v23 = *(_QWORD *)&a5[1] + 4 * a5[3].i32[0] * v12;
      v24 = a5[2].u32[0];
      v25 = a5[4];
      v44 = (int32x2_t)&unk_1E5D29D70;
      *(_QWORD *)&v45[0] = v23;
      *(int32x2_t *)&v45[1] = v25;
      *((_QWORD *)&v45[0] + 1) = v24;
      kaldi::CuVectorBase<float>::CopyFromVec(&v44, (uint64_t)&v41);
      kaldi::CuMatrix<float>::CuMatrix(&v44, a2, 111);
      kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v44, (uint64_t)&v41);
      v26 = *(_QWORD *)&a4[1] + 4 * a4[3].i32[0] * v12;
      v27 = a4[2].u32[0];
      v28 = a4[4];
      v37[0] = &unk_1E5D29D70;
      v37[1] = v26;
      v37[3] = v28;
      v37[2] = v27;
      kaldi::CuVectorBase<float>::AddRowSumMat((uint64_t)v37, (uint64_t)&v44, 1.0, 111.0);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
      v41 = (int32x2_t)&unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)&v41);
      ++v12;
    }
    while ((_DWORD)v11 != v12);
  }
  if (*(_BYTE *)(a1 + 1138))
  {
    memset(v45, 0, sizeof(v45));
    v44 = (int32x2_t)&unk_1E5D34170;
    v46 = 0;
    kaldi::CuMatrix<float>::Resize(&v44, v11, (*(_DWORD *)(v34 + 16) + a4[2].i32[0]), 0, 0);
    DWORD2(v42[0]) = a4[2].i32[0];
    *(_QWORD *)((char *)v42 + 12) = *(_QWORD *)((char *)v45 + 12);
    DWORD1(v42[1]) = DWORD1(v45[1]);
    *((_QWORD *)&v42[1] + 1) = *((_QWORD *)&v45[1] + 1);
    v41 = (int32x2_t)&unk_1E5D29D40;
    *(_QWORD *)&v42[0] = *(_QWORD *)&v45[0];
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v41, (uint64_t)a4, 111);
    v29 = a4[2].i32[0];
    LODWORD(v37[2]) = *(_DWORD *)(v34 + 16);
    *(_QWORD *)((char *)&v37[2] + 4) = *(_QWORD *)((char *)v45 + 12);
    HIDWORD(v37[3]) = DWORD1(v45[1]) - v29;
    v37[4] = *((_QWORD *)&v45[1] + 1);
    v37[0] = &unk_1E5D29D40;
    v37[1] = *(_QWORD *)&v45[0] + 4 * v29;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v37, v34, 111);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)&v44, a4, -1, 0);
    kaldi::CuMatrixBase<float>::ApplyTanh((uint64_t)a4);
    v37[0] = &unk_1E5D29D40;
    memset(&v37[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v37);
    v41 = (int32x2_t)&unk_1E5D29D40;
    memset(v42, 0, sizeof(v42));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v41);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
    v30 = a6;
  }
  else
  {
    v30 = a6;
    if (*(_BYTE *)(a1 + 1137))
    {
      memset(v45, 0, sizeof(v45));
      v44 = (int32x2_t)&unk_1E5D34170;
      v46 = 0;
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 760), (uint64_t)a4, &v44, -1, 0);
      kaldi::CuMatrix<float>::operator=(a4, &v44);
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v44);
    }
  }
  v30->__begin_ = 0;
  v30->__end_ = 0;
  v30->__end_cap_.__value_ = 0;
  if ((_DWORD)__sz)
  {
    std::vector<int>::resize(v30, (int)__sz);
    begin = v30->__begin_;
    v32 = 4 * (int)__sz;
  }
  else
  {
    v32 = 0;
    begin = 0;
  }
  memcpy(begin, __src, v32);
  if (__src)
    free(__src);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v47);
}

void sub_1ADFAE310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a30);
  kaldi::CuMatrix<float>::~CuMatrix(v30 - 152);
  _Unwind_Resume(a1);
}

kaldi::quasar::TorchEncoderDecoder *kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  clockid_t v2;
  void *__p[2];
  char v5;

  *(_QWORD *)this = &off_1E5D33860;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  *((_OWORD *)this + 71) = 0u;
  *(_OWORD *)((char *)this + 1160) = 0u;
  *((_QWORD *)this + 144) = (char *)this + 1160;
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  kaldi::nnet1::Nnet::Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928), 0, 0, 0);
  *(_OWORD *)((char *)this + 3144) = 0u;
  *(_OWORD *)((char *)this + 3128) = 0u;
  *((_QWORD *)this + 390) = &unk_1E5D34170;
  *((_BYTE *)this + 3160) = 0;
  *(_OWORD *)((char *)this + 3176) = 0u;
  *(_OWORD *)((char *)this + 3192) = 0u;
  *((_QWORD *)this + 396) = &unk_1E5D34170;
  *((_BYTE *)this + 3208) = 0;
  *(_OWORD *)((char *)this + 3224) = 0u;
  *(_OWORD *)((char *)this + 3240) = 0u;
  *((_QWORD *)this + 402) = &unk_1E5D34170;
  *((_BYTE *)this + 3256) = 0;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *((_QWORD *)this + 408) = &unk_1E5D34170;
  *((_BYTE *)this + 3304) = 0;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *((_QWORD *)this + 414) = &unk_1E5D34170;
  *((_BYTE *)this + 3352) = 0;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *((_QWORD *)this + 420) = &unk_1E5D34170;
  *((_BYTE *)this + 3400) = 0;
  *((_QWORD *)this + 428) = 0;
  *((_OWORD *)this + 213) = 0u;
  *((_OWORD *)this + 215) = 0u;
  *((_OWORD *)this + 216) = 0u;
  *((_QWORD *)this + 429) = &unk_1E5D34170;
  *((_BYTE *)this + 3472) = 0;
  *(_OWORD *)((char *)this + 3480) = 0u;
  *(_OWORD *)((char *)this + 3496) = 0u;
  *(_OWORD *)((char *)this + 3516) = xmmword_1AE190A50;
  *((_DWORD *)this + 883) = 1;
  *((_QWORD *)this + 442) = 0xFFFFFFFF00000002;
  *((_QWORD *)this + 451) = 0;
  *((_QWORD *)this + 452) = 0;
  *((_OWORD *)this + 224) = 0u;
  *((_OWORD *)this + 223) = 0u;
  *((_OWORD *)this + 222) = 0u;
  *((_QWORD *)this + 450) = (char *)this + 3608;
  *(_OWORD *)((char *)this + 3640) = 0u;
  *(_OWORD *)((char *)this + 3656) = 0u;
  *(_OWORD *)((char *)this + 3624) = 0u;
  std::string::basic_string[abi:ne180100]<0>(__p, "UNK");
  kaldi::quasar::BPE::BPE((uint64_t)this + 3672, 1, (__int128 *)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  *((_QWORD *)this + 500) = 0;
  *((_OWORD *)this + 249) = 0u;
  *((_OWORD *)this + 251) = 0u;
  *((_OWORD *)this + 252) = 0u;
  *((_QWORD *)this + 489) = 0;
  *(_QWORD *)((char *)this + 3918) = 0;
  *((_DWORD *)this + 994) = 0;
  *(_OWORD *)((char *)this + 3928) = 0u;
  *(_OWORD *)((char *)this + 3944) = 0u;
  *(_OWORD *)((char *)this + 3960) = 0u;
  *((_QWORD *)this + 501) = &unk_1E5D34170;
  *((_BYTE *)this + 4048) = 0;
  *((_BYTE *)this + 4080) = 1;
  kaldi::Timer::Reset((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 4056), v2);
  *(_OWORD *)((char *)this + 4136) = 0u;
  *(_OWORD *)((char *)this + 4152) = 0u;
  *(_OWORD *)((char *)this + 4104) = 0u;
  *(_OWORD *)((char *)this + 4120) = 0u;
  *(_OWORD *)((char *)this + 4088) = 0u;
  return this;
}

void sub_1ADFAE6A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, kaldi::quasar::TorchEncoderDecoder::AttentionModel *a14, kaldi::nnet1::Nnet *a15, kaldi::nnet1::Nnet *a16, _QWORD **a17, uint64_t a18, kaldi::nnet1::Nnet *a19, kaldi::nnet1::Nnet *a20,kaldi::nnet1::Nnet *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  void **v27;
  uint64_t v28;
  uint64_t *v29;
  void **v30;
  uint64_t v31;
  uint64_t v32;
  kaldi::quasar::BPE *v33;
  void **v34;
  uint64_t v35;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  kaldi::CuMatrix<float>::~CuMatrix(v35);
  v37 = *v30;
  if (*v30)
  {
    *(_QWORD *)(v28 + 3992) = v37;
    operator delete(v37);
  }
  kaldi::quasar::TorchEncoderDecoder::TorchEncoderDecoder(v28, v34, v27, v33);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(v28 + 3664), 0);
  v38 = *(_QWORD *)(v28 + 3656);
  *(_QWORD *)(v28 + 3656) = 0;
  if (v38)
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](v28 + 3656, v38);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 + 3640);
  v39 = *(_QWORD *)(v28 + 3632);
  *(_QWORD *)(v28 + 3632) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *v29;
  *v29 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy(v28 + 3600, *(_QWORD **)(v28 + 3608));
  if (*(char *)(v28 + 3599) < 0)
    operator delete(*(void **)(v28 + 3576));
  if (*(char *)(v28 + 3575) < 0)
    operator delete(*(void **)(v28 + 3552));
  kaldi::Vector<float>::Destroy(v32);
  kaldi::CuMatrix<float>::~CuMatrix(v28 + 3432);
  __p = (void *)(v28 + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  kaldi::CuMatrix<float>::~CuMatrix(v31);
  kaldi::CuMatrix<float>::~CuMatrix(a9);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  kaldi::CuMatrix<float>::~CuMatrix(a11);
  kaldi::CuMatrix<float>::~CuMatrix(a12);
  kaldi::CuMatrix<float>::~CuMatrix(a13);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel(a14);
  kaldi::nnet1::Nnet::~Nnet(a15);
  kaldi::nnet1::Nnet::~Nnet(a16);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a18, *a17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 + 1136);
  kaldi::nnet1::Nnet::~Nnet(a19);
  kaldi::nnet1::Nnet::~Nnet(a20);
  kaldi::nnet1::Nnet::~Nnet(a21);
  _Unwind_Resume(a1);
}

void sub_1ADFAE83C()
{
  JUMPOUT(0x1ADFAE824);
}

void sub_1ADFAE844()
{
  JUMPOUT(0x1ADFAE82CLL);
}

void kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(kaldi::quasar::TorchEncoderDecoder *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;

  *(_QWORD *)this = &off_1E5D33860;
  if (*((_BYTE *)this + 3920) && (int)((*((_QWORD *)this + 96) - *((_QWORD *)this + 95)) >> 3) >= 1)
    kaldi::nnet1::Nnet::ReleaseComponent((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760), 0);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 4008);
  v2 = (void *)*((_QWORD *)this + 498);
  if (v2)
  {
    *((_QWORD *)this + 499) = v2;
    operator delete(v2);
  }
  if (*((char *)this + 3975) < 0)
    operator delete(*((void **)this + 494));
  if (*((char *)this + 3951) < 0)
    operator delete(*((void **)this + 491));
  kaldi::quasar::BPE::~BPE((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 3672));
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)this + 458, 0);
  v3 = *((_QWORD *)this + 457);
  *((_QWORD *)this + 457) = 0;
  if (v3)
    std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)this + 3656, v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 3640);
  v4 = *((_QWORD *)this + 454);
  *((_QWORD *)this + 454) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 453);
  *((_QWORD *)this + 453) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::destroy((uint64_t)this + 3600, *((_QWORD **)this + 451));
  if (*((char *)this + 3599) < 0)
    operator delete(*((void **)this + 447));
  if (*((char *)this + 3575) < 0)
    operator delete(*((void **)this + 444));
  kaldi::Vector<float>::Destroy((uint64_t)this + 3480);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3432);
  v6 = (void **)((char *)this + 3408);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3360);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3312);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3264);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3216);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3168);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 3120);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1928));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1552));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 1176));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 1152, *((_QWORD **)this + 145));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1136);
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 760));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 384));
  kaldi::nnet1::Nnet::~Nnet((kaldi::quasar::TorchEncoderDecoder *)((char *)this + 8));
}

{
  kaldi::quasar::TorchEncoderDecoder::~TorchEncoderDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::quasar::TorchEncoderDecoder::ResetHistoryState(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  _QWORD **v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  _QWORD **v8;
  _QWORD **v9;

  if (a2)
    kaldi::nnet1::Nnet::ResetHistoryStateIfExists((uint64_t)this + 8);
  kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 384, 0, 0, 0, 0);
  kaldi::nnet1::Nnet::ResetHistoryStateIfExists(*((_QWORD *)this + 142));
  *(_QWORD *)((char *)this + 3508) = 0;
  kaldi::nnet1::Nnet::GetHistoricalComponents(*((kaldi::nnet1::Nnet **)this + 142), &v8);
  v3 = v9;
  if (v9 != v8)
  {
    v4 = 0;
    v3 = v8;
    do
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*v3[v4] + 72))(v3[v4]);
      v6 = &unk_1E5D2C5B0;
      v7 = *(_DWORD *)(v5 + 8);
      if (v7 != 1)
      {
        v7 = 1;
        (*(void (**)(_QWORD *, void **))(*v8[v4] + 80))(v8[v4], &v6);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v6);
      ++v4;
      v3 = v8;
    }
    while (v4 != v9 - v8);
  }
  if (v3)
  {
    v9 = v3;
    operator delete(v3);
  }
}

void sub_1ADFAEB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  _QWORD **v14;
  uint64_t v15;
  unint64_t v16;
  int32x2_t *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  clockid_t v28;
  _QWORD **v29;
  __int128 v30;
  __int128 v31;
  char v32;
  __int128 __p;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[48];

  v6 = (double *)(a1 + 4056);
  v7 = a1 + 4112;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v36, v6, v7, &__p);
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  v9 = *a2;
  v8 = a2[1];
  if (v8 != *a2)
  {
    v10 = (_QWORD *)(v8 - 48);
    v11 = (_QWORD *)(v8 - 48);
    do
    {
      v12 = *v11;
      v11 -= 6;
      (*(void (**)(_QWORD *))(v12 + 16))(v10);
      v13 = v10 == (_QWORD *)v9;
      v10 = v11;
    }
    while (!v13);
  }
  a2[1] = v9;
  if (kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v29);
    std::vector<kaldi::CuMatrix<float>>::resize(a2, (uint64_t)(v30 - (_QWORD)v29) >> 3);
    v14 = (_QWORD **)v30;
    if ((_QWORD **)v30 != v29)
    {
      v15 = 0;
      v16 = 0;
      v14 = v29;
      do
      {
        *((_QWORD *)&__p + 1) = 0;
        v34 = 0;
        v35 = 0;
        *(_QWORD *)&__p = &unk_1E5D341C8;
        (*(void (**)(_QWORD *, __int128 *, uint64_t, _QWORD))(*v14[v16] + 48))(v14[v16], &__p, a3, 0);
        v17 = (int32x2_t *)(*a2 + v15);
        if ((int)v34 < 1)
        {
          kaldi::CuMatrix<float>::Resize(v17, 0, 0, 0, 0);
        }
        else
        {
          kaldi::CuMatrix<float>::Resize(v17, 1, v34, 0, 0);
          kaldi::CuMatrixBase<float>::CopyRowsFromVec(*a2 + v15, (uint64_t)&__p);
        }
        *(_QWORD *)&__p = &unk_1E5D341C8;
        kaldi::CuVector<float>::Destroy((uint64_t)&__p);
        ++v16;
        v14 = v29;
        v15 += 48;
      }
      while (v16 < (uint64_t)(v30 - (_QWORD)v29) >> 3);
    }
    if (v14)
    {
      *(_QWORD *)&v30 = v14;
      operator delete(v14);
    }
  }
  v18 = *(_DWORD *)(a1 + 3336);
  v19 = *(_QWORD *)(a1 + 3320) + 4 * (int)(v18 * a3);
  v20 = *(_DWORD *)(a1 + 3340) - v18 * a3;
  v21 = *(_QWORD *)(a1 + 3344);
  DWORD2(v30) = *(_DWORD *)(a1 + 3328);
  HIDWORD(v30) = 1;
  *(_QWORD *)&v31 = __PAIR64__(v20, v18);
  *((_QWORD *)&v31 + 1) = v21;
  v29 = (_QWORD **)&unk_1E5D29D40;
  *(_QWORD *)&v30 = v19;
  kaldi::CuMatrix<float>::CuMatrix(&__p, &v29, 111);
  v22 = a2[1];
  if (v22 >= a2[2])
  {
    v23 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float>>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    v23 = v22 + 48;
    a2[1] = v22 + 48;
  }
  a2[1] = v23;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  v29 = (_QWORD **)&unk_1E5D29D40;
  v30 = 0u;
  v31 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v29);
  kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, 2, 0, 0, 0);
  **((_QWORD **)&__p + 1) = vcvt_f32_s32(*(int32x2_t *)(a1 + 3508));
  v24 = a2[1];
  if (v24 >= a2[2])
  {
    v25 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(a2, (uint64_t)&__p);
  }
  else
  {
    kaldi::CuMatrix<float>::CuMatrix(a2[1], &__p, 111);
    v25 = v24 + 48;
    a2[1] = v24 + 48;
  }
  a2[1] = v25;
  if (*(_BYTE *)(a1 + 3913))
  {
    v31 = 0u;
    v30 = 0u;
    v29 = (_QWORD **)&unk_1E5D34170;
    v32 = 0;
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::GetHistoryState(a1 + 1928, (int32x2_t *)&v29, a3);
    v26 = a2[1];
    if (v26 >= a2[2])
    {
      v27 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>(a2, (uint64_t)&v29);
    }
    else
    {
      kaldi::CuMatrix<float>::CuMatrix(a2[1], &v29, 111);
      v27 = v26 + 48;
      a2[1] = v26 + 48;
    }
    a2[1] = v27;
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v29);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v36, v28);
}

void sub_1ADFAEEB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;
  uint64_t v25;
  clockid_t v27;

  *(_QWORD *)(v24 + 8) = v25;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a15);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a24, v27);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::SetHistoryState(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  double *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  clockid_t v25;
  int v26;
  uint64_t v27;
  float *v28;
  float v29;
  uint64_t v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  __int128 __p;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  int v39;
  _BYTE v40[48];

  v8 = (double *)(a1 + 4056);
  v9 = a1 + 4120;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v40, v8, v9, &__p);
  if (SHIBYTE(v36) < 0)
    operator delete((void *)__p);
  if (!kaldi::nnet1::Nnet::HasHistory(*(kaldi::nnet1::Nnet **)(a1 + 1136)))
  {
    v12 = 0;
    goto LABEL_16;
  }
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v31);
  v10 = v32;
  if (v32 == v31)
  {
    v12 = 0;
    if (v32)
    {
LABEL_13:
      v32 = v10;
      operator delete(v10);
    }
  }
  else
  {
    v11 = 0;
    v12 = 0;
    v10 = v31;
    do
    {
      v13 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v10 + v12) + 72))(*((_QWORD *)v10 + v12));
      v38 = &unk_1E5D2C5B0;
      v39 = *(_DWORD *)(v13 + 8);
      if (v39 != (_DWORD)a4)
      {
        v39 = a4;
        (*(void (**)(_QWORD, void **))(**((_QWORD **)v31 + v12) + 80))(*((_QWORD *)v31 + v12), &v38);
      }
      v14 = *a2 + v11;
      v15 = *(_DWORD *)(v14 + 16);
      if (v15 < 1)
      {
        *((_QWORD *)&__p + 1) = 0;
        v36 = 0;
        v37 = 0;
        *(_QWORD *)&__p = &unk_1E5D341C8;
        (*(void (**)(_QWORD, __int128 *, uint64_t, _QWORD))(**((_QWORD **)v31 + v12) + 64))(*((_QWORD *)v31 + v12), &__p, a3, 0);
        *(_QWORD *)&__p = &unk_1E5D341C8;
        kaldi::CuVector<float>::Destroy((uint64_t)&__p);
      }
      else
      {
        v16 = *((_QWORD *)v31 + v12);
        v17 = *(_QWORD *)(v14 + 8);
        v18 = *(_QWORD *)(v14 + 32);
        *(_QWORD *)&__p = &unk_1E5D29D70;
        *((_QWORD *)&__p + 1) = v17;
        v37 = v18;
        v36 = v15;
        (*(void (**)(uint64_t, __int128 *, uint64_t, _QWORD))(*(_QWORD *)v16 + 64))(v16, &__p, a3, 0);
      }
      kaldi::nnet1::HistoryOptions::~HistoryOptions((kaldi::nnet1::HistoryOptions *)&v38);
      ++v12;
      v10 = v31;
      v11 += 48;
    }
    while (v12 < ((_BYTE *)v32 - (_BYTE *)v31) >> 3);
    if (v31)
      goto LABEL_13;
  }
LABEL_16:
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), a4, *(unsigned int *)(*a2 + 48 * v12 + 16), 2, 0);
  v19 = *(_QWORD *)(a1 + 3320) + 4 * *(_DWORD *)(a1 + 3336) * (int)a3;
  v20 = *(_DWORD *)(a1 + 3328);
  v21 = *(_QWORD *)(a1 + 3344);
  *(_QWORD *)&__p = &unk_1E5D29D70;
  *((_QWORD *)&__p + 1) = v19;
  v37 = v21;
  v36 = v20;
  v22 = *a2 + 48 * v12;
  v23 = *(void **)(v22 + 8);
  LODWORD(v21) = *(_DWORD *)(v22 + 16);
  v24 = *(_QWORD *)(v22 + 32);
  v31 = &unk_1E5D29D70;
  v32 = v23;
  v34 = v24;
  v33 = v21;
  kaldi::CuVectorBase<float>::CopyFromVec(&__p, (uint64_t)&v31);
  v26 = *(_DWORD *)(a1 + 3512);
  v27 = *a2;
  v28 = *(float **)(*a2 + 48 * (v12 + 1) + 8);
  v29 = v28[1];
  if (v29 != (float)v26)
  {
    v30 = *(_QWORD *)(a1 + 3408) + 48 * v26;
    kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((_QWORD *)a1, v30, v30, *(kaldi::nnet1::Nnet **)(a1 + 1136));
    v27 = *a2;
    v28 = *(float **)(*a2 + 48 * (v12 + 1) + 8);
    v29 = v28[1];
  }
  *(_DWORD *)(a1 + 3512) = (int)v29;
  *(_DWORD *)(a1 + 3508) = (int)*v28;
  if (*(_BYTE *)(a1 + 3913))
    kaldi::quasar::TorchEncoderDecoder::AttentionModel::SetHistoryState((int32x2_t *)(a1 + 1928), v27 + 48 * v12 + 96, a3, a4);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v40, v25);
}

void sub_1ADFAF2A4(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a22, a2);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(_QWORD *result, uint64_t a2, uint64_t a3, kaldi::nnet1::Nnet *a4)
{
  _QWORD *v7;
  int v8;
  const void *Component;
  void *v10;
  const void *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if ((int)((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3) >= 1)
  {
    v7 = result;
    v8 = 0;
    do
    {
      Component = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v8);
      if (v10)
      {
        result = (_QWORD *)(*(uint64_t (**)(void *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 24))(v10, a2, a3, 0);
      }
      else
      {
        v11 = (const void *)kaldi::nnet1::Nnet::GetComponent(a4, v8);
        if (result)
        {
          v12 = result;
          v13 = result[23];
          if ((int)(1736263375 * ((unint64_t)(result[24] - v13) >> 3)) >= 1)
          {
            v14 = 0;
            v15 = 0;
            do
            {
              result = (_QWORD *)kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues(v7, a2, a3, v13 + v14);
              ++v15;
              v13 = v12[23];
              v14 += 376;
            }
            while (v15 < (int)(1736263375 * ((unint64_t)(v12[24] - v13) >> 3)));
          }
        }
      }
      ++v8;
    }
    while (v8 < (int)((*((_QWORD *)a4 + 1) - *(_QWORD *)a4) >> 3));
  }
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::AddTag(uint64_t a1, uint64_t a2, int a3, int32x2_t *a4, int a5)
{
  float v10;
  unsigned int v11;
  __int32 v12;
  int32x2_t v13;
  __int32 v14;
  __int32 v15;
  int32x2_t v16;
  __int32 v17;
  float *v18;
  uint64_t v19;
  unsigned int v20;
  int32x2_t v21;
  void *v22;
  __int128 v23;
  __int128 v24;

  kaldi::CuMatrix<float>::Resize(a4, (*(_DWORD *)(a2 + 20) + 1), 1, 0, 0);
  v10 = (float)a3;
  if ((*(_BYTE *)(a1 + 3919) == 0) == a5)
  {
    v17 = a4[2].i32[0];
    v18 = (float *)a4[1];
    *v18 = v10;
    v19 = a4[3].i32[0];
    v20 = a4[3].i32[1] - v19;
    v21 = a4[4];
    *((_QWORD *)&v23 + 1) = __PAIR64__(*(_DWORD *)(a2 + 20), v17);
    *(_QWORD *)&v24 = __PAIR64__(v20, v19);
    *((int32x2_t *)&v24 + 1) = v21;
    v22 = &unk_1E5D29D40;
    *(_QWORD *)&v23 = &v18[v19];
  }
  else
  {
    v11 = *(_DWORD *)(a2 + 20);
    v12 = a4[2].i32[0];
    v13 = a4[1];
    v14 = a4[3].i32[0];
    *(float *)(*(_QWORD *)&v13 + 4 * (int)(v14 * v11)) = v10;
    v15 = a4[3].i32[1];
    v16 = a4[4];
    *((_QWORD *)&v23 + 1) = __PAIR64__(v11, v12);
    *(_QWORD *)&v24 = __PAIR64__(v15, v14);
    *((int32x2_t *)&v24 + 1) = v16;
    v22 = &unk_1E5D29D40;
    *(int32x2_t *)&v23 = v13;
  }
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v22, a2, 111);
  v22 = &unk_1E5D29D40;
  v23 = 0u;
  v24 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
}

void sub_1ADFAF59C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  va_list va;

  va_start(va, a2);
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::TorchEncoderDecoder::Reverse(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_BYTE *)this + 3919) == 0;
}

void kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int32x2_t v19;
  int v20;
  int v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[5];

  kaldi::CuMatrix<float>::Resize((int32x2_t *)a4, *(unsigned int *)(a3 + 20), (*(_DWORD *)(a3 + 16) + 1), 0, 0);
  v9 = *(_QWORD *)(a4 + 8);
  v10 = *(_DWORD *)(a4 + 28);
  v11 = *(_QWORD *)(a4 + 32);
  LODWORD(v25[2]) = *(_DWORD *)(a3 + 16);
  *(_QWORD *)((char *)&v25[2] + 4) = *(_QWORD *)(a4 + 20);
  HIDWORD(v25[3]) = v10;
  v25[4] = v11;
  v25[0] = &unk_1E5D29D40;
  v25[1] = v9;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v25, a3, 111);
  v12 = *(unsigned int *)(a3 + 20);
  if ((int)v12 >= 1)
  {
    v13 = 0;
    v14 = *(int *)(a4 + 24);
    v15 = (float *)(*(_QWORD *)(a4 + 8) + 4 * *(unsigned int *)(a3 + 16));
    v16 = (uint64x2_t)vdupq_n_s64(v12 - 1);
    v17 = (int64x2_t)xmmword_1AE140A90;
    v18 = vdupq_n_s64(2uLL);
    do
    {
      v19 = vmovn_s64((int64x2_t)vcgeq_u64(v16, (uint64x2_t)v17));
      if ((v19.i8[0] & 1) != 0)
      {
        if (a5)
          v20 = v13;
        else
          v20 = 0;
        *v15 = (float)(v20 + a2);
      }
      if ((v19.i8[4] & 1) != 0)
      {
        if (a5)
          v21 = v13 + 1;
        else
          v21 = 0;
        v15[v14] = (float)(v21 + a2);
      }
      v13 += 2;
      v17 = vaddq_s64(v17, v18);
      v15 += 2 * v14;
    }
    while (((v12 + 1) & 0x1FFFFFFFELL) != v13);
  }
  v22 = &unk_1E5D29D40;
  v23 = 0u;
  v24 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v22);
  v25[0] = &unk_1E5D29D40;
  memset(&v25[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v25);
}

void sub_1ADFAF744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  _OWORD *v6;
  va_list va;

  va_start(va, a6);
  *v6 = 0u;
  v6[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::StartFeedforward(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  int32x2_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  int32x2_t v13[34];

  if (a4)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Custom embedding is not supported for TorchEncoderDecoder");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v13);
  }
  v7 = *(_QWORD *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 3416) - v7) >> 4) <= a3)
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
  else
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(v7 + 48 * a3), 0, 0, 0, 0);
  kaldi::CuMatrix<float>::CuMatrix(v13, a2, 111);
  if (*(_BYTE *)(a1 + 3917))
  {
    v11 = 0u;
    v10 = 0u;
    v9 = (int32x2_t)&unk_1E5D34170;
    v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, a2, *(_DWORD *)(a1 + 3516) - 1, &v9, 0);
    kaldi::CuMatrix<float>::operator=(v13, &v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  if (*(_BYTE *)(a1 + 3918))
  {
    v11 = 0u;
    v10 = 0u;
    v9 = (int32x2_t)&unk_1E5D34170;
    v12 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddTag(a1, (uint64_t)v13, *(_DWORD *)(a1 + 3520) - 1, &v9, 1);
    kaldi::CuMatrix<float>::operator=(v13, &v9);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
  }
  kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1, (uint64_t)v13, a3);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v13);
}

void sub_1ADFAF8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 880);
}

void kaldi::quasar::TorchEncoderDecoder::EncFeedforward(uint64_t a1, uint64_t a2, int a3)
{
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD **v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD **v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  __int128 v25;
  _QWORD **v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int *v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  clockid_t v49;
  int v50;
  uint64_t v51;
  int *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int32x2_t *p_p;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  _QWORD **v63;
  uint64_t v64;
  __int128 v65;
  _QWORD *v66;
  int v67;
  unsigned int v68;
  kaldi::nnet1::Nnet *v69;
  int v70;
  void *v71;
  _QWORD v72[4];
  int32x2_t v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int32x2_t v78;
  _QWORD v79[4];
  char v80;
  int32x2_t v81;
  _QWORD v82[4];
  char v83;
  int32x2_t v84;
  _QWORD v85[4];
  int32x2_t v86;
  _OWORD v87[2];
  char v88;
  void *__p;
  _OWORD v90[2];
  char v91;
  _QWORD **v92;
  _BYTE *v93;
  _QWORD **v94;
  _BYTE *v95;
  _BYTE v96[56];

  v6 = (double *)(a1 + 4056);
  v7 = a1 + 4104;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  v8 = kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v96, v6, v7, (__int128 *)&__p);
  if (SHIBYTE(v90[0]) < 0)
    operator delete(__p);
  v9 = *(_QWORD *)(a1 + 3408);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 3416) - v9) >> 4) <= a3)
  {
    v8 = (uint64_t)std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 3408), a3 + 1);
    v9 = *(_QWORD *)(a1 + 3408);
  }
  *(_DWORD *)(a1 + 3512) = a3;
  v10 = *(_DWORD *)(v9 + 48 * a3 + 20);
  if (*(_BYTE *)(a1 + 3915))
  {
    memset(v90, 0, sizeof(v90));
    __p = &unk_1E5D34170;
    v91 = 0;
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(v8, v10, a2, (uint64_t)&__p, 1);
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), (uint64_t)&__p, (int32x2_t *)(a1 + 3120), -1, 0);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
  }
  else
  {
    kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 8), a2, (int32x2_t *)(a1 + 3120), -1, 0);
  }
  v70 = v10;
  kaldi::nnet1::Nnet::GetHistoricalComponents((kaldi::nnet1::Nnet *)(a1 + 8), &v94);
  v69 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::GetHistoricalComponents(*(kaldi::nnet1::Nnet **)(a1 + 1136), &v92);
  if (*(_BYTE *)(a1 + 3504))
  {
    if (v10 >= 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Handover is not supported for stream input.", 43);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    if (*(_BYTE *)(a1 + 3506))
    {
      if (*(_DWORD *)(a1 + 3548) == 3)
      {
        if (*(_BYTE *)(a1 + 3505))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Model type requires full handover.", 34);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
        }
        v11 = v94;
        if (v95 != (_BYTE *)v94)
        {
          v12 = 0;
          do
          {
            memset(v90, 0, sizeof(v90));
            __p = &unk_1E5D34170;
            v91 = 0;
            (*(void (**)(_QWORD *, void **, _QWORD))(*v11[v12] + 40))(v11[v12], &__p, 0);
            kaldi::CuMatrix<float>::CuMatrix(&v86, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            v13 = *(_DWORD *)(a1 + 3976);
            *(_QWORD *)((char *)&v85[1] + 4) = *(_QWORD *)((char *)v87 + 12);
            LODWORD(v85[1]) = v13;
            HIDWORD(v85[2]) = DWORD1(v87[1]);
            v85[3] = *((_QWORD *)&v87[1] + 1);
            v84 = (int32x2_t)&unk_1E5D29D40;
            v85[0] = *(_QWORD *)&v87[0];
            *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)v90 + 12);
            LODWORD(v82[1]) = v13;
            HIDWORD(v82[2]) = DWORD1(v90[1]);
            v82[3] = *((_QWORD *)&v90[1] + 1);
            v81 = (int32x2_t)&unk_1E5D29D40;
            v82[0] = *(_QWORD *)&v90[0];
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
            v81 = (int32x2_t)&unk_1E5D29D40;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            v84 = (int32x2_t)&unk_1E5D29D40;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            v14 = *(unsigned int *)(a1 + 3976);
            *(_QWORD *)((char *)&v85[1] + 4) = *(_QWORD *)((char *)v87 + 12);
            LODWORD(v85[1]) = v14;
            HIDWORD(v85[2]) = DWORD1(v87[1]) - v14;
            v85[3] = *((_QWORD *)&v87[1] + 1);
            v84 = (int32x2_t)&unk_1E5D29D40;
            v85[0] = *(_QWORD *)&v87[0] + 4 * v14;
            *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)v90 + 12);
            LODWORD(v82[1]) = v14;
            HIDWORD(v82[2]) = DWORD1(v90[1]) - 2 * v14;
            v82[3] = *((_QWORD *)&v90[1] + 1);
            v81 = (int32x2_t)&unk_1E5D29D40;
            v82[0] = *(_QWORD *)&v90[0] + 8 * v14;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
            v81 = (int32x2_t)&unk_1E5D29D40;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            v84 = (int32x2_t)&unk_1E5D29D40;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
            kaldi::CuMatrix<float>::CuMatrix(&v84, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            v15 = *(unsigned int *)(a1 + 3976);
            *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)&v85[1] + 4);
            LODWORD(v82[1]) = v15;
            HIDWORD(v82[2]) = HIDWORD(v85[2]);
            v82[3] = v85[3];
            v81 = (int32x2_t)&unk_1E5D29D40;
            v82[0] = v85[0];
            LODWORD(v79[1]) = v15;
            *(_QWORD *)((char *)&v79[1] + 4) = *(_QWORD *)((char *)v90 + 12);
            HIDWORD(v79[2]) = DWORD1(v90[1]) - v15;
            v79[3] = *((_QWORD *)&v90[1] + 1);
            v78 = (int32x2_t)&unk_1E5D29D40;
            v79[0] = *(_QWORD *)&v90[0] + 4 * v15;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v81, (uint64_t)&v78, 111);
            v78 = (int32x2_t)&unk_1E5D29D40;
            memset(v79, 0, sizeof(v79));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
            v81 = (int32x2_t)&unk_1E5D29D40;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            v16 = *(unsigned int *)(a1 + 3976);
            *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)&v85[1] + 4);
            LODWORD(v82[1]) = v16;
            HIDWORD(v82[2]) = HIDWORD(v85[2]) - v16;
            v82[3] = v85[3];
            v81 = (int32x2_t)&unk_1E5D29D40;
            v82[0] = v85[0] + 4 * v16;
            LODWORD(v79[1]) = v16;
            *(_QWORD *)((char *)&v79[1] + 4) = *(_QWORD *)((char *)v90 + 12);
            HIDWORD(v79[2]) = DWORD1(v90[1]) - 3 * v16;
            v79[3] = *((_QWORD *)&v90[1] + 1);
            v78 = (int32x2_t)&unk_1E5D29D40;
            v79[0] = *(_QWORD *)&v90[0] + 4 * (3 * v16);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v81, (uint64_t)&v78, 111);
            v78 = (int32x2_t)&unk_1E5D29D40;
            memset(v79, 0, sizeof(v79));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
            v81 = (int32x2_t)&unk_1E5D29D40;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            memset(v82, 0, sizeof(v82));
            v81 = (int32x2_t)&unk_1E5D34170;
            v83 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1552), (uint64_t)&v86, &v81, -1, 0);
            memset(v79, 0, sizeof(v79));
            v78 = (int32x2_t)&unk_1E5D34170;
            v80 = 0;
            kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&v84, &v78, -1, 0);
            kaldi::CuMatrix<float>::CuMatrix(&v73, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            LODWORD(v72[1]) = *(_DWORD *)(a1 + 3976);
            *(_QWORD *)((char *)&v72[1] + 4) = v75;
            HIDWORD(v72[2]) = v76;
            v72[3] = v77;
            v71 = &unk_1E5D29D40;
            v72[0] = v74;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v71, (uint64_t)&v81, 111);
            v71 = &unk_1E5D29D40;
            memset(v72, 0, sizeof(v72));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
            LODWORD(v72[1]) = *(_DWORD *)(a1 + 3976);
            *(_QWORD *)((char *)&v72[1] + 4) = v75;
            HIDWORD(v72[2]) = v76 - LODWORD(v72[1]);
            v72[3] = v77;
            v71 = &unk_1E5D29D40;
            v72[0] = v74 + 4 * LODWORD(v72[1]);
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v71, (uint64_t)&v78, 111);
            v71 = &unk_1E5D29D40;
            memset(v72, 0, sizeof(v72));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v71);
            (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v92[v12] + 56))(v92[v12], &v73, 0);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v73);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v78);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v81);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v86);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
            ++v12;
            v11 = v94;
          }
          while (v12 != (v95 - (_BYTE *)v94) >> 3);
        }
        goto LABEL_33;
      }
      memset(v90, 0, sizeof(v90));
      __p = &unk_1E5D34170;
      v91 = 0;
      v20 = *(_DWORD *)(a1 + 3976) << (*(_BYTE *)(a1 + 3505) == 0);
      kaldi::CuMatrix<float>::Resize((int32x2_t *)&__p, 1, v20 * ((unint64_t)(v95 - (_BYTE *)v94) >> 3), 0, 0);
      v21 = v94;
      if (v95 != (_BYTE *)v94)
      {
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0uLL;
        do
        {
          v87[0] = v25;
          v87[1] = v25;
          v86 = (int32x2_t)&unk_1E5D34170;
          v88 = 0;
          (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v21[v24] + 40))(v21[v24], &v86, 0);
          *(_QWORD *)((char *)&v85[1] + 4) = *(_QWORD *)((char *)v90 + 12);
          LODWORD(v85[1]) = v20;
          HIDWORD(v85[2]) = v22 + DWORD1(v90[1]);
          v85[3] = *((_QWORD *)&v90[1] + 1);
          v84 = (int32x2_t)&unk_1E5D29D40;
          v85[0] = *(_QWORD *)&v90[0] + 4 * v23;
          *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)v87 + 12);
          LODWORD(v82[1]) = v20;
          HIDWORD(v82[2]) = DWORD1(v87[1]);
          v82[3] = *((_QWORD *)&v87[1] + 1);
          v81 = (int32x2_t)&unk_1E5D29D40;
          v82[0] = *(_QWORD *)&v87[0];
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&v81, 111);
          v81 = (int32x2_t)&unk_1E5D29D40;
          memset(v82, 0, sizeof(v82));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
          v84 = (int32x2_t)&unk_1E5D29D40;
          memset(v85, 0, sizeof(v85));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v86);
          v25 = 0uLL;
          ++v24;
          v21 = v94;
          v23 += v20;
          v22 -= v20;
        }
        while (v24 != (v95 - (_BYTE *)v94) >> 3);
      }
      memset(v87, 0, sizeof(v87));
      v86 = (int32x2_t)&unk_1E5D34170;
      v88 = 0;
      kaldi::nnet1::Nnet::Feedforward((uint64_t *)(a1 + 1176), (uint64_t)&__p, &v86, -1, 0);
      v26 = v92;
      if (v93 != (_BYTE *)v92)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        do
        {
          if (*(_BYTE *)(a1 + 3505))
          {
            kaldi::CuMatrix<float>::CuMatrix(&v84, 1, (2 * *(_DWORD *)(a1 + 3976)), 0, 0, 0);
            v30 = *(_DWORD *)(a1 + 3976);
            *(_QWORD *)((char *)&v82[1] + 4) = *(_QWORD *)((char *)&v85[1] + 4);
            LODWORD(v82[1]) = v30;
            HIDWORD(v82[2]) = HIDWORD(v85[2]);
            v82[3] = v85[3];
            v81 = (int32x2_t)&unk_1E5D29D40;
            v82[0] = v85[0];
            LODWORD(v79[1]) = v20;
            *(_QWORD *)((char *)&v79[1] + 4) = *(_QWORD *)((char *)v87 + 12);
            HIDWORD(v79[2]) = v27 + DWORD1(v87[1]);
            v79[3] = *((_QWORD *)&v87[1] + 1);
            v78 = (int32x2_t)&unk_1E5D29D40;
            v79[0] = *(_QWORD *)&v87[0] + 4 * v28;
            kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v81, (uint64_t)&v78, 111);
            v78 = (int32x2_t)&unk_1E5D29D40;
            memset(v79, 0, sizeof(v79));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v78);
            v81 = (int32x2_t)&unk_1E5D29D40;
            memset(v82, 0, sizeof(v82));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v81);
            (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v92[v29] + 56))(v92[v29], &v84, 0);
            kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v84);
          }
          else
          {
            v31 = v26[v29];
            *(_QWORD *)((char *)&v85[1] + 4) = *(_QWORD *)((char *)v87 + 12);
            LODWORD(v85[1]) = v20;
            HIDWORD(v85[2]) = v27 + DWORD1(v87[1]);
            v85[3] = *((_QWORD *)&v87[1] + 1);
            v84 = (int32x2_t)&unk_1E5D29D40;
            v85[0] = *(_QWORD *)&v87[0] + 4 * v28;
            (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v31 + 56))(v31, &v84, 0);
            v84 = (int32x2_t)&unk_1E5D29D40;
            memset(v85, 0, sizeof(v85));
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
          }
          ++v29;
          v26 = v92;
          v28 += v20;
          v27 -= v20;
        }
        while (v29 != (v93 - (_BYTE *)v92) >> 3);
      }
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v86);
LABEL_32:
      kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
      goto LABEL_33;
    }
    if (*(_BYTE *)(a1 + 3505))
    {
      kaldi::CuMatrix<float>::CuMatrix((int32x2_t *)&__p, 1, *(unsigned int *)(a1 + 3976), 0, 0, 0);
      v17 = v94;
      if (v95 != (_BYTE *)v94)
      {
        v18 = 0;
        do
        {
          memset(v87, 0, sizeof(v87));
          v86 = (int32x2_t)&unk_1E5D34170;
          v88 = 0;
          (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v17[v18] + 40))(v17[v18], &v86, 0);
          v19 = *(unsigned int *)(a1 + 3976);
          *(_QWORD *)((char *)&v85[1] + 4) = *(_QWORD *)((char *)v87 + 12);
          LODWORD(v85[1]) = v19;
          HIDWORD(v85[2]) = DWORD1(v87[1]) - v19;
          v85[3] = *((_QWORD *)&v87[1] + 1);
          v84 = (int32x2_t)&unk_1E5D29D40;
          v85[0] = *(_QWORD *)&v87[0] + 4 * v19;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v84, (uint64_t)&__p, 111);
          v84 = (int32x2_t)&unk_1E5D29D40;
          memset(v85, 0, sizeof(v85));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v84);
          (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v92[v18] + 56))(v92[v18], &v86, 0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v86);
          ++v18;
          v17 = v94;
        }
        while (v18 != (v95 - (_BYTE *)v94) >> 3);
      }
      goto LABEL_32;
    }
    v63 = v94;
    if (v95 != (_BYTE *)v94)
    {
      v64 = 0;
      v65 = 0uLL;
      do
      {
        v90[0] = v65;
        v90[1] = v65;
        __p = &unk_1E5D34170;
        v91 = 0;
        (*(void (**)(_QWORD *, void **, _QWORD))(*v63[v64] + 40))(v63[v64], &__p, 0);
        v66 = v92[v64];
        v67 = 2 * *(_DWORD *)(a1 + 3976);
        if (*(_BYTE *)(a1 + 3919))
          v68 = 2 * *(_DWORD *)(a1 + 3976);
        else
          v68 = 0;
        *(_QWORD *)((char *)v87 + 12) = *(_QWORD *)((char *)v90 + 12);
        DWORD2(v87[0]) = v67;
        DWORD1(v87[1]) = DWORD1(v90[1]) - v68;
        *((_QWORD *)&v87[1] + 1) = *((_QWORD *)&v90[1] + 1);
        v86 = (int32x2_t)&unk_1E5D29D40;
        *(_QWORD *)&v87[0] = *(_QWORD *)&v90[0] + 4 * v68;
        (*(void (**)(_QWORD *, int32x2_t *, _QWORD))(*v66 + 56))(v66, &v86, 0);
        v86 = (int32x2_t)&unk_1E5D29D40;
        memset(v87, 0, sizeof(v87));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v86);
        kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__p);
        v65 = 0uLL;
        ++v64;
        v63 = v94;
      }
      while (v64 != (v95 - (_BYTE *)v94) >> 3);
    }
  }
LABEL_33:
  if (kaldi::nnet1::Nnet::IsBidirectionalRnn(v69) && *(_DWORD *)(a1 + 3548) != 3)
  {
    if (v70 >= 1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"BidirectionalEncoder is not supported for stream input.", 55);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
    }
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512)), *(unsigned int *)(a1 + 3140), (*(_DWORD *)(a1 + 3136) / 2), 0, 0);
    v38 = (int *)(*(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512));
    v39 = *(_DWORD *)(a1 + 3136);
    v40 = *(_QWORD *)(a1 + 3128);
    v41 = *(_DWORD *)(a1 + 3148);
    v42 = *(_QWORD *)(a1 + 3152);
    *(_QWORD *)((char *)v90 + 12) = *(_QWORD *)(a1 + 3140);
    DWORD2(v90[0]) = v39 / 2;
    DWORD1(v90[1]) = v41;
    *((_QWORD *)&v90[1] + 1) = v42;
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v90[0] = v40;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v38, (uint64_t)&__p, 111);
    __p = &unk_1E5D29D40;
    memset(v90, 0, sizeof(v90));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    v43 = *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    v44 = *(_DWORD *)(a1 + 3136) / 2;
    v45 = *(_QWORD *)(a1 + 3128) + 4 * v44;
    v46 = *(_DWORD *)(a1 + 3148) - v44;
    v47 = *(_QWORD *)(a1 + 3152);
    *(_QWORD *)((char *)v90 + 12) = *(_QWORD *)(a1 + 3140);
    DWORD2(v90[0]) = v44;
    DWORD1(v90[1]) = v46;
    *((_QWORD *)&v90[1] + 1) = v47;
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v90[0] = v45;
    kaldi::CuMatrixBase<float>::AddMat(v43, (uint64_t)&__p, 111, 1.0, 1.0);
    __p = &unk_1E5D29D40;
    memset(v90, 0, sizeof(v90));
  }
  else
  {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(*(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512)), (*(_DWORD *)(a1 + 3140) + v70), *(unsigned int *)(a1 + 3136), 2, 0);
    v32 = *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
    v33 = *(_DWORD *)(v32 + 16);
    v34 = *(_DWORD *)(v32 + 24);
    v35 = *(_QWORD *)(v32 + 8) + 4 * (int)(v34 * v70);
    v36 = *(_DWORD *)(v32 + 28) - v34 * v70;
    v37 = *(_QWORD *)(v32 + 32);
    *((_QWORD *)&v90[0] + 1) = __PAIR64__(*(_DWORD *)(a1 + 3140), v33);
    *(_QWORD *)&v90[1] = __PAIR64__(v36, v34);
    *((_QWORD *)&v90[1] + 1) = v37;
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v90[0] = v35;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&__p, a1 + 3120, 111);
    __p = &unk_1E5D29D40;
    memset(v90, 0, sizeof(v90));
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  v48 = *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512);
  kaldi::quasar::TorchEncoderDecoder::SetAttentionKeyAndValues((_QWORD *)a1, v48, v48, *(kaldi::nnet1::Nnet **)(a1 + 1136));
  if (*(_BYTE *)(a1 + 3919))
  {
    v50 = 0;
    if (v70)
      goto LABEL_43;
  }
  else
  {
    v50 = *(_DWORD *)(a1 + 3140) - 1;
    if (v70)
      goto LABEL_43;
  }
  v51 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), 1, v51, 0, 0);
LABEL_43:
  if (!*(_BYTE *)(a1 + 3504))
    goto LABEL_53;
  if ((kaldi::nnet1::Nnet::IsBidirectionalRnn(v69) & 1) != 0)
  {
    v52 = (int *)(a1 + 3312);
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::CuMatrixBase<float>::SetZero((uint64_t)v52);
      goto LABEL_53;
    }
    v58 = *(_DWORD *)(a1 + 3144);
    v59 = *(_QWORD *)(a1 + 3128) + 4 * (int)(v58 * v50);
    v60 = *(_DWORD *)(a1 + 3148) - v58 * v50;
    v61 = *(_QWORD *)(a1 + 3152);
    DWORD2(v87[0]) = *(_DWORD *)(a1 + 3136);
    HIDWORD(v87[0]) = 1;
    *(_QWORD *)&v87[1] = __PAIR64__(v60, v58);
    *((_QWORD *)&v87[1] + 1) = v61;
    v86 = (int32x2_t)&unk_1E5D29D40;
    *(_QWORD *)&v87[0] = v59;
    if (*(_BYTE *)(a1 + 3919))
      v62 = SDWORD2(v87[0]) / 2;
    else
      v62 = 0;
    DWORD2(v90[0]) = SDWORD2(v87[0]) / 2;
    HIDWORD(v90[0]) = 1;
    LODWORD(v90[1]) = v58;
    DWORD1(v90[1]) = v60 - v62;
    *((_QWORD *)&v90[1] + 1) = v61;
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v90[0] = v59 + 4 * v62;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>(v52, (uint64_t)&__p, 111);
    __p = &unk_1E5D29D40;
    memset(v90, 0, sizeof(v90));
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
    v86 = (int32x2_t)&unk_1E5D29D40;
    memset(v87, 0, sizeof(v87));
    p_p = &v86;
  }
  else
  {
    v53 = *(_DWORD *)(a1 + 3144);
    v54 = *(_QWORD *)(a1 + 3128) + 4 * (int)(v53 * v50);
    v55 = *(_DWORD *)(a1 + 3148) - v53 * v50;
    v56 = *(_QWORD *)(a1 + 3152);
    DWORD2(v90[0]) = *(_DWORD *)(a1 + 3136);
    HIDWORD(v90[0]) = 1;
    *(_QWORD *)&v90[1] = __PAIR64__(v55, v53);
    *((_QWORD *)&v90[1] + 1) = v56;
    __p = &unk_1E5D29D40;
    *(_QWORD *)&v90[0] = v54;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)(a1 + 3312), (uint64_t)&__p, 111);
    __p = &unk_1E5D29D40;
    memset(v90, 0, sizeof(v90));
    p_p = (int32x2_t *)&__p;
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)p_p);
LABEL_53:
  if (v92)
  {
    v93 = v92;
    operator delete(v92);
  }
  if (v94)
  {
    v95 = v94;
    operator delete(v94);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v96, v49);
}

void sub_1ADFB09DC()
{
  _OWORD *v0;

  *v0 = 0u;
  v0[1] = 0u;
  JUMPOUT(0x1ADFB0A28);
}

void sub_1ADFB0A30()
{
  JUMPOUT(0x1ADFB0C80);
}

void sub_1ADFB0A40(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  if (a55 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADFB0C98);
}

void sub_1ADFB0A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a50);
  JUMPOUT(0x1ADFB0C90);
}

void sub_1ADFB0A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _OWORD *v38;

  a38 = &unk_1E5D29D40;
  *v38 = 0u;
  v38[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a38);
  JUMPOUT(0x1ADFB0C60);
}

void sub_1ADFB0A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  _OWORD *v44;
  uint64_t v45;

  a44 = v45 + 16;
  *v44 = 0u;
  v44[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a44);
  JUMPOUT(0x1ADFB0C68);
}

void sub_1ADFB0AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;

  *v40 = 0u;
  v40[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  a32 = v38;
  *v39 = 0u;
  v39[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a38);
  JUMPOUT(0x1ADFB0C60);
}

void sub_1ADFB0ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  kaldi::CuMatrix<float>::~CuMatrix(&a38);
  JUMPOUT(0x1ADFB0C60);
}

void sub_1ADFB0AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  _OWORD *v38;
  uint64_t v39;

  a38 = v39 + 16;
  *v38 = 0u;
  v38[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a38);
  JUMPOUT(0x1ADFB0C60);
}

void sub_1ADFB0AFC(_Unwind_Exception *a1, clockid_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  v4 = *(void **)(v2 - 184);
  if (v4)
  {
    *(_QWORD *)(v2 - 176) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v2 - 160);
  if (v5)
  {
    *(_QWORD *)(v2 - 152) = v5;
    operator delete(v5);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v2 - 136), a2);
  _Unwind_Resume(a1);
}

void sub_1ADFB0B08()
{
  JUMPOUT(0x1ADFB0C68);
}

void sub_1ADFB0B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  uint64_t v38;
  _OWORD *v39;
  _OWORD *v40;

  a32 = v38 + 16;
  *v39 = 0u;
  v39[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a38 = v38 + 16;
  *v40 = 0u;
  v40[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a38);
  JUMPOUT(0x1ADFB0C60);
}

void sub_1ADFB0B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  uint64_t v32;
  _OWORD *v33;
  _OWORD *v34;

  *v34 = 0u;
  v34[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a26);
  a32 = v32;
  *v33 = 0u;
  v33[1] = 0u;
  JUMPOUT(0x1ADFB0BA8);
}

void sub_1ADFB0BB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a32);
  JUMPOUT(0x1ADFB0C10);
}

void sub_1ADFB0C20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38)
{
  _OWORD *v38;
  _OWORD *v39;

  a32 = &unk_1E5D29D40;
  *v39 = 0u;
  v39[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a32);
  a38 = &unk_1E5D29D40;
  *v38 = 0u;
  v38[1] = 0u;
  JUMPOUT(0x1ADFB0C50);
}

void sub_1ADFB0C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a44);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a50);
  JUMPOUT(0x1ADFB0C70);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Feedforward(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  _QWORD v8[34];
  int32x2_t v9;
  __int128 v10;
  __int128 v11;
  char v12;

  v11 = 0u;
  v10 = 0u;
  v9 = (int32x2_t)&unk_1E5D34170;
  v12 = 0;
  if (*(_BYTE *)(a1 + 3916))
    kaldi::quasar::TorchEncoderDecoder::AddPositionEmbedding(a1, *(_DWORD *)(a1 + 3508), (uint64_t)a2, (uint64_t)&v9, 0);
  else
    kaldi::CuMatrix<float>::operator=(&v9, a2);
  switch(*(_DWORD *)(a1 + 3548))
  {
    case 0:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(a1, &v9, a3, a4);
      break;
    case 1:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(a1, &v9, a3, a4);
      break;
    case 2:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(a1, &v9, a3, a4);
      break;
    case 3:
      kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(a1, &v9, a3, a4);
      break;
    default:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Un-supported model type : ", 26);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  ++*(_DWORD *)(a1 + 3508);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v9);
}

void sub_1ADFB0DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::CuMatrix<float>::~CuMatrix(v1 - 80);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelN(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  clockid_t v12;
  uint64_t v13;
  uint64_t v14;
  clockid_t v15;
  clockid_t v16;
  const void *Component;
  Ngram *v18;
  uint64_t Trie;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  clockid_t v27;
  clockid_t v28;
  void *v29[5];
  std::vector<unsigned int>::size_type __sz;
  void *__src;
  uint64_t v32;
  void *__p[2];
  char v34;
  _BYTE v35[48];

  v8 = (double *)(a1 + 4056);
  v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v35, v8, v9, (__int128 *)__p);
  if (v34 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (__int128 *)v29);
  if (SHIBYTE(v29[2]) < 0)
    operator delete(v29[0]);
  v10 = a2[2].u32[1];
  v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v10, v11, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3264), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (__int128 *)v29);
  if (SHIBYTE(v29[2]) < 0)
    operator delete(v29[0]);
  v13 = *(unsigned int *)(a1 + 3284);
  v14 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), v13, v14, 0, 0);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3312));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v15);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (__int128 *)v29);
  if (SHIBYTE(v29[2]) < 0)
    operator delete(v29[0]);
  if (*(_BYTE *)(a1 + 3922))
  {
    Component = (const void *)kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), *(_DWORD *)(a1 + 3540));
    __sz = 0;
    __src = 0;
    v32 = 0;
    Trie = Ngram::getTrie(v18);
    v20 = *(unsigned __int8 *)(a1 + 3917);
    v21 = (void *)(*(_QWORD *)(Trie + 8) + 4 * v20);
    LODWORD(v20) = *(_DWORD *)(Trie + 28) - v20;
    v22 = *(void **)(Trie + 32);
    LODWORD(v29[2]) = *(_DWORD *)(Trie + 16) - *(unsigned __int8 *)(a1 + 3918);
    *(void **)((char *)&v29[2] + 4) = *(void **)(Trie + 20);
    HIDWORD(v29[3]) = v20;
    v29[4] = v22;
    v29[0] = &unk_1E5D29D40;
    v29[1] = v21;
    kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 4008), (int32x2_t *)v29);
    v29[0] = &unk_1E5D29D40;
    memset(&v29[1], 0, 32);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)v29);
    kaldi::CuMatrixBase<float>::FindRowMaxId(a1 + 4008, (int *)&__sz);
    v23 = *(void **)(a1 + 3984);
    v24 = (*(_QWORD *)(a1 + 3992) - (_QWORD)v23) >> 2;
    if ((_DWORD)__sz != (_DWORD)v24)
    {
      std::vector<int>::resize((std::vector<unsigned int> *)(a1 + 3984), (int)__sz);
      v23 = *(void **)(a1 + 3984);
      LODWORD(v24) = __sz;
    }
    memcpy(v23, __src, 4 * (int)v24);
    if (__src)
      free(__src);
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v16);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (__int128 *)v29);
  if (SHIBYTE(v29[2]) < 0)
  {
    operator delete(v29[0]);
    if (a4)
      goto LABEL_16;
  }
  else if (a4)
  {
LABEL_16:
    v25 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_19;
  }
  v25 = -1;
LABEL_19:
  if (*(_QWORD *)(a1 + 3664))
    v26 = *(uint64_t **)(a1 + 3664);
  else
    v26 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v26, a1 + 3216, a3, v25, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v35, v28);
}

void sub_1ADFB1170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _OWORD *v29;
  clockid_t v31;
  clockid_t v32;

  *v29 = 0u;
  v29[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a20, v31);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a29, v32);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelM(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  double *v8;
  uint64_t v9;
  clockid_t v10;
  void *v11;
  clockid_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  clockid_t v25;
  int v26;
  uint64_t *v27;
  clockid_t v28;
  clockid_t v29;
  unsigned __int32 v30;
  void *v31[2];
  char v32;
  _QWORD v33[5];
  _BYTE v34[40];
  void *__p[2];
  char v36;
  _BYTE v37[56];

  v8 = (double *)(a1 + 4056);
  v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v8, v9, (__int128 *)__p);
  if (v36 < 0)
    operator delete(__p[0]);
  v30 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (__int128 *)v34);
  if ((v34[23] & 0x80000000) != 0)
    operator delete(*(void **)v34);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), (std::vector<unsigned int> *)v34);
  v11 = *(void **)(a1 + 3984);
  if (v11)
  {
    *(_QWORD *)(a1 + 3992) = v11;
    operator delete(v11);
    *(_QWORD *)(a1 + 3984) = 0;
    *(_QWORD *)(a1 + 3992) = 0;
    *(_QWORD *)(a1 + 4000) = 0;
  }
  *(_OWORD *)(a1 + 3984) = *(_OWORD *)v34;
  *(_QWORD *)(a1 + 4000) = *(_QWORD *)&v34[16];
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v10);
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (__int128 *)v34);
  if ((v34[23] & 0x80000000) != 0)
    operator delete(*(void **)v34);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  v13 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v14 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v30, (v14 + v13), 0, 0);
  v15 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  v16 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v17 = *(_QWORD *)(a1 + 3272) + 4 * v15;
  v18 = *(_DWORD *)(a1 + 3292) - v15;
  v19 = *(_QWORD *)(a1 + 3296);
  *(_DWORD *)&v34[16] = v16;
  *(_QWORD *)&v34[20] = *(_QWORD *)(a1 + 3284);
  *(_DWORD *)&v34[28] = v18;
  *(_QWORD *)&v34[32] = v19;
  *(_QWORD *)v34 = &unk_1E5D29D40;
  *(_QWORD *)&v34[8] = v17;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v34, a1 + 3360, 111);
  v20 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  v21 = *(_QWORD *)(a1 + 3272);
  v22 = *(_DWORD *)(a1 + 3292);
  v23 = *(_QWORD *)(a1 + 3296);
  LODWORD(v33[2]) = v20;
  *(_QWORD *)((char *)&v33[2] + 4) = *(_QWORD *)(a1 + 3284);
  HIDWORD(v33[3]) = v22;
  v33[4] = v23;
  v33[0] = &unk_1E5D29D40;
  v33[1] = v21;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v33, a1 + 3168, 111);
  v24 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), v30, v24, 0, 0);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (__int128 *)v31);
  if (v32 < 0)
    operator delete(v31[0]);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3312));
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v25);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (__int128 *)v31);
  if (v32 < 0)
    operator delete(v31[0]);
  if (a4)
    v26 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
  else
    v26 = -1;
  if (*(_QWORD *)(a1 + 3664))
    v27 = *(uint64_t **)(a1 + 3664);
  else
    v27 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v27, a1 + 3216, a3, v26, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v28);
  v33[0] = &unk_1E5D29D40;
  memset(&v33[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v33);
  *(_QWORD *)v34 = &unk_1E5D29D40;
  memset(&v34[8], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v34);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v29);
}

void sub_1ADFB15DC(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _OWORD *v35;
  _OWORD *v36;
  uint64_t v37;
  clockid_t v39;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a30, a2);
  a17 = &unk_1E5D29D40;
  *v36 = 0u;
  v36[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a17);
  a22 = &unk_1E5D29D40;
  *v35 = 0u;
  v35[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a22);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v37 - 136), v39);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelT(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  clockid_t v11;
  clockid_t v12;
  int v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  clockid_t v18;
  void *v19;
  int v20;
  int v21;
  unsigned int *v22;
  int v23;
  unsigned int *v24;
  int v25;
  uint64_t *v26;
  clockid_t v27;
  clockid_t v28;
  void *v29[2];
  char v30;
  std::vector<unsigned int> v31[2];
  void *v32[5];
  void *__p[2];
  char v34;
  _BYTE v35[56];

  v8 = (double *)(a1 + 4056);
  v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v35, v8, v9, (__int128 *)__p);
  if (v34 < 0)
    operator delete(__p[0]);
  v10 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (__int128 *)v32);
  if (SHIBYTE(v32[2]) < 0)
    operator delete(v32[0]);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  std::string::basic_string[abi:ne180100]<0>(v32, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (__int128 *)v32);
  if (SHIBYTE(v32[2]) < 0)
    operator delete(v32[0]);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3168), (int32x2_t *)(a1 + 3312), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v12);
  v13 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3216), v10, (2 * v13), 0, 0);
  v14 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v15 = *(void **)(a1 + 3224);
  v16 = *(_DWORD *)(a1 + 3244);
  v17 = *(void **)(a1 + 3248);
  LODWORD(v32[2]) = v14;
  *(void **)((char *)&v32[2] + 4) = *(void **)(a1 + 3236);
  HIDWORD(v32[3]) = v16;
  v32[4] = v17;
  v32[0] = &unk_1E5D29D40;
  v32[1] = v15;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v32, a1 + 3312, 111);
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (__int128 *)v31);
  if (SHIBYTE(v31[0].__end_cap_.__value_) < 0)
    operator delete(v31[0].__begin_);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), v31);
  v19 = *(void **)(a1 + 3984);
  if (v19)
  {
    *(_QWORD *)(a1 + 3992) = v19;
    operator delete(v19);
    *(_QWORD *)(a1 + 3984) = 0;
    *(_QWORD *)(a1 + 3992) = 0;
    *(_QWORD *)(a1 + 4000) = 0;
  }
  *(std::vector<unsigned int> *)(a1 + 3984) = v31[0];
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v18);
  v20 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v21 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v22 = (unsigned int *)(*(_QWORD *)(a1 + 3224) + 4 * v20);
  v23 = *(_DWORD *)(a1 + 3244) - v20;
  v24 = *(unsigned int **)(a1 + 3248);
  LODWORD(v31[0].__end_cap_.__value_) = v21;
  *(unsigned int **)((char *)&v31[0].__end_cap_.__value_ + 4) = *(unsigned int **)(a1 + 3236);
  HIDWORD(v31[1].__begin_) = v23;
  v31[1].__end_ = v24;
  v31[0].__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
  v31[0].__end_ = v22;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v31, a1 + 3360, 111);
  std::string::basic_string[abi:ne180100]<0>(v29, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (__int128 *)v29);
  if (v30 < 0)
  {
    operator delete(v29[0]);
    if (a4)
      goto LABEL_13;
  }
  else if (a4)
  {
LABEL_13:
    v25 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  v25 = -1;
LABEL_16:
  if (*(_QWORD *)(a1 + 3664))
    v26 = *(uint64_t **)(a1 + 3664);
  else
    v26 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v26, a1 + 3216, a3, v25, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v27);
  v31[0].__begin_ = (std::vector<unsigned int>::pointer)&unk_1E5D29D40;
  memset(&v31[0].__end_, 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v31);
  v32[0] = &unk_1E5D29D40;
  memset(&v32[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v35, v28);
}

void sub_1ADFB1A34(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  _OWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  clockid_t v43;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a33, a2);
  a16 = (void *)(v40 + 16);
  *v38 = 0u;
  v38[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a16);
  a25 = (void *)(v40 + 16);
  *v39 = 0u;
  v39[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a25);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v41 - 136), v43);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::FeedforwardModelF(uint64_t a1, int32x2_t *a2, int32x2_t *a3, int a4)
{
  double *v8;
  uint64_t v9;
  uint64_t v10;
  clockid_t v11;
  int v12;
  int v13;
  int v14;
  void *v15;
  int v16;
  void *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  clockid_t v23;
  clockid_t v24;
  void *v25;
  int32x2_t *v26;
  int v27;
  uint64_t *v28;
  clockid_t v29;
  clockid_t v30;
  std::vector<unsigned int> v31;
  _QWORD v32[5];
  void *v33[5];
  void *__p[2];
  char v35;
  _BYTE v36[56];

  v8 = (double *)(a1 + 4056);
  v9 = a1 + 4128;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v36, v8, v9, (__int128 *)__p);
  if (v35 < 0)
    operator delete(__p[0]);
  v10 = a2[2].u32[1];
  std::string::basic_string[abi:ne180100]<0>(v33, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4160, (__int128 *)v33);
  if (SHIBYTE(v33[2]) < 0)
    operator delete(v33[0]);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)(a1 + 760), a2, (int32x2_t *)(a1 + 3168), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v11);
  v12 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v13 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3264), v10, (v13 + v12), 0, 0);
  v14 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  v15 = *(void **)(a1 + 3272);
  v16 = *(_DWORD *)(a1 + 3292);
  v17 = *(void **)(a1 + 3296);
  LODWORD(v33[2]) = v14;
  *(void **)((char *)&v33[2] + 4) = *(void **)(a1 + 3284);
  HIDWORD(v33[3]) = v16;
  v33[4] = v17;
  v33[0] = &unk_1E5D29D40;
  v33[1] = v15;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v33, a1 + 3168, 111);
  v18 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  v19 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  v20 = *(_QWORD *)(a1 + 3272) + 4 * v18;
  v21 = *(_DWORD *)(a1 + 3292) - v18;
  v22 = *(_QWORD *)(a1 + 3296);
  LODWORD(v32[2]) = v19;
  *(_QWORD *)((char *)&v32[2] + 4) = *(_QWORD *)(a1 + 3284);
  HIDWORD(v32[3]) = v21;
  v32[4] = v22;
  v32[0] = &unk_1E5D29D40;
  v32[1] = v20;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v32, a1 + 3312, 111);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4136, (__int128 *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0)
    operator delete(v31.__begin_);
  kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>(*(uint64_t **)(a1 + 1136), (int32x2_t *)(a1 + 3264), (int32x2_t *)(a1 + 3312), 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v23);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4144, (__int128 *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0)
    operator delete(v31.__begin_);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Feedforward(a1 + 1928, *(_QWORD *)(a1 + 3408) + 48 * *(int *)(a1 + 3512), a1 + 3312, (int32x2_t *)(a1 + 3360), (int32x2_t *)(a1 + 3432), &v31);
  v25 = *(void **)(a1 + 3984);
  if (v25)
  {
    *(_QWORD *)(a1 + 3992) = v25;
    operator delete(v25);
    *(_QWORD *)(a1 + 3984) = 0;
    *(_QWORD *)(a1 + 3992) = 0;
    *(_QWORD *)(a1 + 4000) = 0;
  }
  *(std::vector<unsigned int> *)(a1 + 3984) = v31;
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v24);
  v26 = kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3216), (int32x2_t *)(a1 + 3360));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3312), v26);
  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)__p, v8, a1 + 4152, (__int128 *)&v31);
  if (SHIBYTE(v31.__end_cap_.__value_) < 0)
  {
    operator delete(v31.__begin_);
    if (a4)
      goto LABEL_13;
  }
  else if (a4)
  {
LABEL_13:
    v27 = ((*(_QWORD *)(a1 + 392) - *(_QWORD *)(a1 + 384)) >> 3) - 1;
    goto LABEL_16;
  }
  v27 = -1;
LABEL_16:
  if (*(_QWORD *)(a1 + 3664))
    v28 = *(uint64_t **)(a1 + 3664);
  else
    v28 = (uint64_t *)(a1 + 384);
  kaldi::nnet1::Nnet::Feedforward(v28, a1 + 3216, a3, v27, 0);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)__p, v29);
  v32[0] = &unk_1E5D29D40;
  memset(&v32[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
  v33[0] = &unk_1E5D29D40;
  memset(&v33[1], 0, 32);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v33);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v36, v30);
}

void sub_1ADFB1EC8(_Unwind_Exception *a1, clockid_t a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  _OWORD *v33;
  _OWORD *v34;
  uint64_t v35;
  uint64_t v36;
  clockid_t v38;

  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)&a28, a2);
  a15 = v35 + 16;
  *v33 = 0u;
  v33[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a15);
  a20 = (void *)(v35 + 16);
  *v34 = 0u;
  v34[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a20);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v36 - 136), v38);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::Start(_QWORD *a1, clockid_t a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  _QWORD v10[34];

  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a3 + 23))
      goto LABEL_3;
LABEL_9:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Dynamic switch is not support in this platform");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if (*(_QWORD *)(a3 + 8))
    goto LABEL_9;
LABEL_3:
  kaldi::Timer::Reset((kaldi::Timer *)(a1 + 507), a2);
  v4 = (_QWORD *)a1[427];
  v5 = (_QWORD *)a1[426];
  if (v4 != v5)
  {
    v6 = v4 - 6;
    v7 = v4 - 6;
    do
    {
      v8 = *v7;
      v7 -= 6;
      (*(void (**)(_QWORD *))(v8 + 16))(v6);
      v9 = v6 == v5;
      v6 = v7;
    }
    while (!v9);
  }
  a1[427] = v5;
}

double kaldi::quasar::TorchEncoderDecoder::Finish(kaldi::quasar::TorchEncoderDecoder *this, clockid_t a2)
{
  double result;

  result = *((double *)this + 512) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, a2) - *((double *)this + 507);
  *((double *)this + 512) = result;
  return result;
}

void kaldi::quasar::TorchEncoderDecoder::GetTiming(const void **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5[4];
  _QWORD v6[4];
  _QWORD v7[4];
  _QWORD v8[4];
  _QWORD v9[4];
  _QWORD v10[4];
  _QWORD v11[4];
  _QWORD v12[4];
  _QWORD v13[5];

  v13[4] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v5, "time total");
  v5[3] = this[512];
  std::string::basic_string[abi:ne180100]<0>(v6, "time start feedforward");
  v6[3] = this[513];
  std::string::basic_string[abi:ne180100]<0>(v7, "time get history state");
  v7[3] = this[514];
  std::string::basic_string[abi:ne180100]<0>(v8, "time set history state");
  v8[3] = this[515];
  std::string::basic_string[abi:ne180100]<0>(v9, "time feed forward");
  v9[3] = this[516];
  std::string::basic_string[abi:ne180100]<0>(v10, "time decoder");
  v10[3] = this[517];
  std::string::basic_string[abi:ne180100]<0>(v11, "time attention");
  v11[3] = this[518];
  std::string::basic_string[abi:ne180100]<0>(v12, "time readout");
  v12[3] = this[519];
  std::string::basic_string[abi:ne180100]<0>(v13, "time output embedding");
  v13[3] = this[520];
  std::map<std::string,double>::map[abi:ne180100](a2, v5, 9);
  v4 = 36;
  do
  {
    if (*((char *)&v5[v4 - 1] - 1) < 0)
      operator delete((void *)v5[v4 - 4]);
    v4 -= 4;
  }
  while (v4 * 8);
}

void sub_1ADFB224C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v12;

  v12 = 288;
  while (1)
  {
    if (*(char *)(v10 + v12 - 9) < 0)
      operator delete(*(void **)(v10 + v12 - 32));
    v12 -= 32;
    if (!v12)
      _Unwind_Resume(exception_object);
  }
}

int *kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(uint64_t a1, int32x2_t *a2)
{
  uint64_t v3;

  v3 = a1 + 3216;
  kaldi::CuMatrix<float>::Resize(a2, *(unsigned int *)(a1 + 3236), *(unsigned int *)(a1 + 3232), 0, 0);
  return kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a2, v3, 111);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Symbolize(uint64_t a1, __int128 **a2, uint64_t a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  int v17;
  unint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  std::string __p[12];

  v5 = 3624;
  if (a4)
    v5 = 3632;
  v6 = 3524;
  if (a4)
    v6 = 3536;
  v7 = *(_DWORD *)(a1 + v6);
  if (v7 == -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Unknown label not described in the model");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v8 = *a2;
  v9 = a2[1];
  if (*a2 == v9)
    return 0;
  v12 = 0;
  v13 = *(_QWORD *)(a1 + v5);
  v14 = a3 + 16;
  do
  {
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v15 = *v8;
      __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
    }
    v16 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 96))(v13, __p);
    if (v16 == -1)
      v17 = v7;
    else
      v17 = v16;
    if (v17 != v7 || (v12 = (v12 + 1), (a5 & 1) == 0))
    {
      v19 = *(_DWORD **)(a3 + 8);
      v18 = *(_QWORD *)(a3 + 16);
      if ((unint64_t)v19 >= v18)
      {
        v21 = *(_DWORD **)a3;
        v22 = ((uint64_t)v19 - *(_QWORD *)a3) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v24 = v18 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v14, v25);
          v21 = *(_DWORD **)a3;
          v19 = *(_DWORD **)(a3 + 8);
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v17;
        v20 = v27 + 4;
        while (v19 != v21)
        {
          v28 = *--v19;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        *(_QWORD *)a3 = v27;
        *(_QWORD *)(a3 + 8) = v20;
        *(_QWORD *)(a3 + 16) = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *v19 = v17;
        v20 = v19 + 1;
      }
      *(_QWORD *)(a3 + 8) = v20;
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v8 = (__int128 *)((char *)v8 + 24);
  }
  while (v8 != v9);
  return v12;
}

void sub_1ADFB24D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 884);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::UnkSourceId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 881);
}

float kaldi::quasar::TorchEncoderDecoder::Align(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int32x2_t *a5)
{
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  float v21;
  void *__p;
  char *v24;
  unint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v29 = 0;
  v30 = 0;
  v31 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  __p = 0;
  v24 = 0;
  v25 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v9 = *(_DWORD *)(a1 + 3532);
  v10 = v24;
  if ((unint64_t)v24 >= v25)
  {
    v12 = (char *)__p;
    v13 = (v24 - (_BYTE *)__p) >> 2;
    v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = v25 - (_QWORD)__p;
    if ((uint64_t)(v25 - (_QWORD)__p) >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v25, v16);
      v12 = (char *)__p;
      v10 = v24;
    }
    else
    {
      v17 = 0;
    }
    v18 = &v17[4 * v13];
    v19 = &v17[4 * v16];
    *(_DWORD *)v18 = v9;
    v11 = v18 + 4;
    while (v10 != v12)
    {
      v20 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v20;
      v18 -= 4;
    }
    __p = v18;
    v24 = v11;
    v25 = (unint64_t)v19;
    if (v12)
      operator delete(v12);
  }
  else
  {
    *(_DWORD *)v24 = v9;
    v11 = v10 + 4;
  }
  v24 = v11;
  v21 = kaldi::quasar::TorchEncoderDecoder::AlignImpl(a1, a2, (uint64_t *)&__p, (uint64_t)&v29, (uint64_t)&v26, a5, 1, a4);
  if (__p)
  {
    v24 = (char *)__p;
    operator delete(__p);
  }
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return v21;
}

void sub_1ADFB2694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::EosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 883);
}

float kaldi::quasar::TorchEncoderDecoder::AlignImpl(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5, int32x2_t *a6, int a7, uint64_t a8)
{
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  float *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  float v36;
  int v37;
  float v38;
  float v39;
  int v40;
  float v41;
  unint64_t v42;
  float *v43;
  float *v44;
  float *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  float *v51;
  int v52;
  int *v53;
  int v54;
  unint64_t v55;
  int *v56;
  _DWORD *v57;
  int *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  int *v64;
  int v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  int *v73;
  int *v74;
  unint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  kaldi::nnet1::Nnet *v80;
  int v82[8];
  _BYTE v83[12];
  int v84;
  int v85[8];
  uint64_t v86;
  int v87;
  _QWORD v88[4];
  int32x2_t v89;
  float *v90;
  int32x2_t v91;
  __int128 v92;
  __int128 v93;
  char v94;
  int32x2_t v95;
  __int128 v96;
  __int128 v97;
  char v98;
  _QWORD v99[2];
  _QWORD v100[11];
  char v101;
  uint64_t v102;
  void **v103;
  uint64_t v104;
  uint64_t v105;

  v103 = 0;
  v104 = 0;
  v105 = 0;
  kaldi::JoinVectorToString<int>(a2, " ", (uint64_t)&v103);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99, 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Left symbol sequence : ", 23);
    if (v105 >= 0)
      v16 = (void **)&v103;
    else
      v16 = v103;
    if (v105 >= 0)
      v17 = HIBYTE(v105);
    else
      v17 = v104;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" (# ", 4);
    v19 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99);
  }
  kaldi::JoinVectorToString<int>(a3, " ", (uint64_t)&v103);
  if (kaldi::g_kaldi_verbose_level >= 1)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99, 1);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Right symbol sequence : ", 24);
    if (v105 >= 0)
      v21 = (void **)&v103;
    else
      v21 = v103;
    if (v105 >= 0)
      v22 = HIBYTE(v105);
    else
      v22 = v104;
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" (# ", 4);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" including </s>) ", 17);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v99);
  }
  v97 = 0u;
  v96 = 0u;
  v95 = (int32x2_t)&unk_1E5D34170;
  v98 = 0;
  kaldi::CuMatrix<float>::Resize(&v95, (unint64_t)(a2[1] - *a2) >> 2, 1, 0, 0);
  v25 = *a2;
  v26 = a2[1];
  v27 = v26 - *a2;
  if (v26 != *a2)
  {
    v28 = 0;
    v29 = v27 >> 2;
    v30 = (float *)v96;
    if (v29 <= 1)
      v29 = 1;
    v31 = 4 * (int)v97;
    do
    {
      *v30 = (float)(*(_DWORD *)(v25 + 4 * v28++) - 1);
      v30 = (float *)((char *)v30 + v31);
    }
    while (v29 != v28);
  }
  kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1, 1);
  kaldi::quasar::TorchEncoderDecoder::StartFeedforward(a1, (uint64_t)&v95, 0, 0);
  v93 = 0u;
  v92 = 0u;
  v91 = (int32x2_t)&unk_1E5D34170;
  v94 = 0;
  kaldi::CuMatrix<float>::CuMatrix(&v89, 1, 1, 0, 0, 0);
  *v90 = (float)(*(_DWORD *)(a1 + 3528) - 1);
  v88[0] = &unk_1E5D341C8;
  memset(&v88[1], 0, 24);
  v33 = *a3;
  v32 = a3[1];
  if (a7)
    v34 = kaldi::nnet1::Nnet::InputDim((kaldi::nnet1::Nnet *)(a1 + 384)) + 1;
  else
    v34 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 384));
  kaldi::Matrix<float>::Resize(a6, ((unint64_t)(v32 - v33) >> 2) - 1, v34, 0, 0);
  if (*(_QWORD *)(a1 + 3664))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Constrained Softmax with force alignment decoding is not Supported!", 67);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v99);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v99);
  if (a3[1] == *a3)
  {
    v36 = 0.0;
LABEL_81:
    if (a8)
      goto LABEL_84;
  }
  else
  {
    v80 = (kaldi::nnet1::Nnet *)(a1 + 384);
    v35 = 0;
    v36 = 0.0;
    while (1)
    {
      kaldi::quasar::TorchEncoderDecoder::Feedforward(a1, &v89, &v91, 0);
      kaldi::Matrix<float>::Matrix((uint64_t)&v86, HIDWORD(v92), DWORD2(v92), 0, 0);
      kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v91, (int *)&v86, 111);
      v37 = *(_DWORD *)(*a3 + 4 * v35);
      *v90 = (float)(v37 - 1);
      std::ostream::operator<<();
      if (((a3[1] - *a3) >> 2) - 1 > v35)
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v100, (uint64_t)", ", 2);
      v38 = logf(*(float *)(v86 + 4 * (v37 - 1)));
      v36 = v36 - v38;
      if (v37 == *(_DWORD *)(a1 + 3532))
        break;
      v39 = v38;
      if (a6)
      {
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v83, (uint64_t)a6, v35, 1, 0, a6[1].i32[0]);
        if (a7)
          v40 = kaldi::nnet1::Nnet::InputDim(v80);
        else
          v40 = kaldi::nnet1::Nnet::OutputDim(v80);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)v83, 0, v84, 0, v40);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v83);
        if (a7)
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>(a1 + 3216, v85, 111);
          *(float *)(*(_QWORD *)a6 + 4 * a6[2].i32[0] * (int)v35 + 4 * (int)kaldi::nnet1::Nnet::InputDim(v80)) = -v39;
        }
        else
        {
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)&v91, v85, 111);
        }
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
      }
      if (a5)
      {
        v41 = -v39;
        v43 = *(float **)(a5 + 8);
        v42 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v43 >= v42)
        {
          v45 = *(float **)a5;
          v46 = ((uint64_t)v43 - *(_QWORD *)a5) >> 2;
          v47 = v46 + 1;
          if ((unint64_t)(v46 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v48 = v42 - (_QWORD)v45;
          if (v48 >> 1 > v47)
            v47 = v48 >> 1;
          if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
            v49 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v49 = v47;
          if (v49)
          {
            v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v49);
            v45 = *(float **)a5;
            v43 = *(float **)(a5 + 8);
          }
          else
          {
            v50 = 0;
          }
          v51 = (float *)&v50[4 * v46];
          *v51 = v41;
          v44 = v51 + 1;
          while (v43 != v45)
          {
            v52 = *((_DWORD *)v43-- - 1);
            *((_DWORD *)v51-- - 1) = v52;
          }
          *(_QWORD *)a5 = v51;
          *(_QWORD *)(a5 + 8) = v44;
          *(_QWORD *)(a5 + 16) = &v50[4 * v49];
          if (v45)
            operator delete(v45);
        }
        else
        {
          *v43 = v41;
          v44 = v43 + 1;
        }
        *(_QWORD *)(a5 + 8) = v44;
      }
      if (a4)
      {
        v53 = *(int **)(a1 + 3984);
        if (v53 == *(int **)(a1 + 3992))
          v54 = -1;
        else
          v54 = *v53;
        v56 = *(int **)(a4 + 8);
        v55 = *(_QWORD *)(a4 + 16);
        if ((unint64_t)v56 >= v55)
        {
          v58 = *(int **)a4;
          v59 = ((uint64_t)v56 - *(_QWORD *)a4) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = v55 - (_QWORD)v58;
          if (v61 >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v62);
            v58 = *(int **)a4;
            v56 = *(int **)(a4 + 8);
          }
          else
          {
            v63 = 0;
          }
          v64 = (int *)&v63[4 * v59];
          *v64 = v54;
          v57 = v64 + 1;
          while (v56 != v58)
          {
            v65 = *--v56;
            *--v64 = v65;
          }
          *(_QWORD *)a4 = v64;
          *(_QWORD *)(a4 + 8) = v57;
          *(_QWORD *)(a4 + 16) = &v63[4 * v62];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *v56 = v54;
          v57 = v56 + 1;
        }
        *(_QWORD *)(a4 + 8) = v57;
      }
      kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
      if (++v35 >= (a3[1] - *a3) >> 2)
        goto LABEL_81;
    }
    kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
    if (a8)
    {
LABEL_84:
      if (a7)
      {
        v66 = kaldi::MatrixBase<float>::NumRows((uint64_t)a6);
        v67 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        kaldi::Matrix<float>::Matrix((uint64_t)&v86, v66, (v67 - 1), 0, 0);
        v68 = *a3;
        if (a3[1] - *a3 != 4)
        {
          v69 = 0;
          do
          {
            v70 = *(_DWORD *)(v68 + 4 * v69);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)&v86, v69, 1, 0, v87);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v83, a8, --v70, 1, 0, *(_DWORD *)(a8 + 8));
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)v82, a8, v70, 1, 0, *(_DWORD *)(a8 + 8));
            kaldi::MatrixBase<float>::CopyFromMat<float>(v85, v82, 111);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v82);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v83);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
            ++v69;
            v68 = *a3;
          }
          while (((a3[1] - *a3) >> 2) - 1 > v69);
        }
        v71 = kaldi::MatrixBase<float>::NumCols((uint64_t)a6);
        kaldi::SubMatrix<float>::SubMatrix((uint64_t)v85, (uint64_t)a6, 0, a6[1].i32[1], 0, v71 - 1);
        kaldi::MatrixBase<float>::MulElements((uint64_t)v85, (uint64_t)&v86);
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)v85);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v86);
      }
    }
  }
  if (a4)
  {
    if (!*(_BYTE *)(a1 + 3919))
    {
      v73 = *(int **)a4;
      v72 = *(_QWORD *)(a4 + 8);
      if (*(_QWORD *)a4 != v72)
      {
        v74 = (int *)(v72 - 4);
        if (v74 > v73)
        {
          v75 = (unint64_t)(v73 + 1);
          do
          {
            v76 = *(_DWORD *)(v75 - 4);
            *(_DWORD *)(v75 - 4) = *v74;
            *v74-- = v76;
            v77 = v75 >= (unint64_t)v74;
            v75 += 4;
          }
          while (!v77);
        }
      }
    }
  }
  v99[0] = *MEMORY[0x1E0DE4F50];
  v78 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v99 + *(_QWORD *)(v99[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v100[0] = v78;
  v100[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v101 < 0)
    operator delete((void *)v100[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v102);
  v88[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v88);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v91);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v95);
  if (SHIBYTE(v105) < 0)
    operator delete(v103);
  return v36;
}

void sub_1ADFB2F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54)
{
  uint64_t v54;

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a23);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a27);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a54);
  kaldi::CuVector<float>::~CuVector(&a32);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a36);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a42);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a48);
  if (*(char *)(v54 - 105) < 0)
    operator delete(*(void **)(v54 - 128));
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BosTargetId(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned int *)this + 882);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(kaldi::quasar::TorchEncoderDecoder *this, int a2)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 498);
  if (v2 == *((_QWORD *)this + 499))
    return 0xFFFFFFFFLL;
  else
    return *(unsigned int *)(v2 + 4 * a2);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::CheckHasHandover(kaldi::nnet1::Nnet **this)
{
  uint64_t result;

  result = kaldi::nnet1::Nnet::IsRnn((kaldi::nnet1::Nnet *)(this + 1));
  if ((_DWORD)result)
    result = kaldi::nnet1::Nnet::IsRnn(this[142]);
  *((_BYTE *)this + 3504) = result;
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::InputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_QWORD *)this + 453);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::OutputSymbols(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((_QWORD *)this + 454);
}

void kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  _QWORD v20[4];
  _QWORD v21[2];
  int v22;

  v3 = *(_DWORD *)(a1 + 4024);
  if (v3 >= 1)
  {
    v5 = *(_QWORD *)(a1 + 4016) + 4 * *(_DWORD *)(a1 + 4032) * a3;
    v6 = *(_QWORD *)(a1 + 4040);
    v20[0] = &unk_1E5D29D70;
    v20[1] = v5;
    v20[3] = v6;
    v20[2] = v3;
    kaldi::CuVector<float>::CuVector(v21, v20);
    if (v22 >= 1)
    {
      v7 = 0;
      v8 = (_QWORD *)(a2 + 16);
      v9 = *(_DWORD **)(a2 + 8);
      do
      {
        v10 = *(_DWORD *)(v21[1] + 4 * v7);
        if ((unint64_t)v9 >= *v8)
        {
          v12 = *(_DWORD **)a2;
          v13 = ((uint64_t)v9 - *(_QWORD *)a2) >> 2;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v15 = *v8 - (_QWORD)v12;
          if (v15 >> 1 > v14)
            v14 = v15 >> 1;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
            v16 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          if (v16)
          {
            v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a2 + 16, v16);
            v12 = *(_DWORD **)a2;
            v9 = *(_DWORD **)(a2 + 8);
          }
          else
          {
            v17 = 0;
          }
          v18 = &v17[4 * v13];
          *(_DWORD *)v18 = v10;
          v11 = v18 + 4;
          while (v9 != v12)
          {
            v19 = *--v9;
            *((_DWORD *)v18 - 1) = v19;
            v18 -= 4;
          }
          *(_QWORD *)a2 = v18;
          *(_QWORD *)(a2 + 8) = v11;
          *(_QWORD *)(a2 + 16) = &v17[4 * v16];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v9 = v10;
          v11 = v9 + 1;
        }
        *(_QWORD *)(a2 + 8) = v11;
        ++v7;
        v9 = v11;
      }
      while (v7 < v22);
    }
    v21[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v21);
  }
}

void sub_1ADFB3288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(uint64_t a1, void **a2, int a3)
{
  int v6;
  const void *v7;
  const void *v8;
  const void *v9[4];

  kaldi::Vector<float>::Resize(a2, *(unsigned int *)(a1 + 3448), 0);
  v6 = *(_DWORD *)(a1 + 3448);
  if (v6 >= 1)
  {
    v7 = (const void *)(*(_QWORD *)(a1 + 3440) + 4 * *(_DWORD *)(a1 + 3456) * a3);
    v8 = *(const void **)(a1 + 3464);
    v9[0] = &unk_1E5D29D70;
    v9[1] = v7;
    v9[3] = v8;
    v9[2] = (const void *)v6;
    kaldi::CuVectorBase<float>::CopyToVec<float>(v9, (uint64_t)a2);
  }
}

std::vector<int> *kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int **a5, int **a6, _QWORD *a7)
{
  std::vector<int> *result;
  kaldi::nnet1::Nnet *v9;
  kaldi::nnet1::Nnet *v10;

  result = *(std::vector<int> **)(a1 + 3656);
  if (result)
  {
    if (kaldi::quasar::Shortlist::MapShortlist(result, a2, *(_DWORD *)(a1 + 3532) - 1, *(_DWORD *)(a1 + 3536) - 1, a3, a4, a5, a6, a7, 0))
    {
      kaldi::quasar::ShortlistNnetBuilder::ConstrainSoftmax((kaldi::nnet1::Nnet *)(a1 + 384), *(_QWORD **)(a1 + 3656), &v10);
      v9 = v10;
    }
    else
    {
      v9 = 0;
    }
    v10 = 0;
    std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)(a1 + 3664), v9);
    result = (std::vector<int> *)v10;
    v10 = 0;
    if (result)
    {
      kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)result);
      return (std::vector<int> *)MEMORY[0x1AF44D190]();
    }
  }
  return result;
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(kaldi::quasar::TorchEncoderDecoder *this)
{
  if (*((_QWORD *)this + 458))
    return *(unsigned int *)(*((_QWORD *)this + 457) + 24);
  else
    return (*((_DWORD *)this + 883) - 1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(kaldi::quasar::TorchEncoderDecoder *this, uint64_t a2)
{
  if (*((_QWORD *)this + 458))
    return *(unsigned int *)(**((_QWORD **)this + 457) + 4 * (int)a2);
  return a2;
}

unint64_t kaldi::quasar::TorchEncoderDecoder::GetSoftmaxIdx(kaldi::quasar::Shortlist **this, uint64_t a2)
{
  if (this[458])
    return kaldi::quasar::Shortlist::GetSoftmaxIdx(this[457], a2);
  else
    return a2;
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable(uint64_t a1, uint64_t *a2, int a3, const std::string *a4)
{
  _QWORD *Text;
  std::locale::id *v8;
  const std::locale::facet *v9;
  unsigned __int8 v10;
  _QWORD *v11;
  char v12;
  std::string *p_p;
  std::string::size_type v14;
  uint64_t v15;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  uint64_t v20;
  std::string __p;
  char v23;
  _QWORD v24[2];
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  std::locale v28;

  kaldi::ExpectToken(a2, a3, "<SymbolTable>");
  if (a3)
  {
    Text = fst::SymbolTable::Read(a2, a4);
    kaldi::ExpectToken(a2, 1, "</SymbolTable>");
    return Text;
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v24);
  memset(&__p, 0, sizeof(__p));
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v9 = std::locale::use_facet(&v28, v8);
    v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v28);
    v11 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&__p, v10);
    if ((*((_BYTE *)v11 + *(_QWORD *)(*v11 - 24) + 32) & 5) != 0)
      break;
    kaldi::Trim(&__p);
    v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__p.__r_.__value_.__l.__size_ != 14)
        goto LABEL_14;
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(__p.__r_.__value_.__r.__words[2]) != 14)
        goto LABEL_14;
      p_p = &__p;
    }
    v14 = p_p->__r_.__value_.__r.__words[0];
    v15 = *(std::string::size_type *)((char *)p_p->__r_.__value_.__r.__words + 6);
    if (v14 == 0x6C6F626D79532F3CLL && v15 == 0x3E656C6261546C6FLL)
      goto LABEL_22;
LABEL_14:
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = &__p;
    else
      v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v17, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n", 1);
  }
  v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
LABEL_22:
  if (v12 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)&__p);
  Text = fst::SymbolTable::ReadText();
  if (v23 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  v24[0] = *MEMORY[0x1E0DE4F50];
  v20 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v25[0] = v20;
  v25[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v26 < 0)
    operator delete((void *)v25[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v27);
  return Text;
}

void sub_1ADFB3680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
    operator delete(__p);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::ModelFileMap(kaldi::quasar::TorchEncoderDecoder *this)
{
  unsigned __int8 v1;
  _QWORD *v3;

  if ((v1 & 1) == 0
  {
    v3 = (_QWORD *)operator new();
    v3[2] = 0;
    v3[1] = 0;
    *v3 = v3 + 1;
    kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap = (uint64_t)v3;
  }
  return kaldi::quasar::TorchEncoderDecoder::ModelFileMap(void)::modelFileMap;
}

void sub_1ADFB374C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v4;
  unsigned __int8 v6;
  void *__p[2];
  char v8;
  int v9;

  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    v9 = 2;
    kaldi::quasar::TorchEncoderDecoder::ReadMapped(a1, (uint64_t)__p);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6 = 0;
    kaldi::Input::Input(__p, a2, &v6);
    v4 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)__p);
    kaldi::quasar::TorchEncoderDecoder::Read(a1, v4, v6, 0);
    kaldi::Input::~Input((kaldi::Input *)__p);
  }
  return 1;
}

void sub_1ADFB3804(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::TorchEncoderDecoder::ReadMapped(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  fst::MappedFile *v3;
  _QWORD v4[34];

  if (*(_QWORD *)(a1 + 3640))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "Nnet already mapped from a file");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  v2 = (_QWORD *)(a1 + 3640);
  v3 = kaldi::ReadMapped<kaldi::quasar::TorchEncoderDecoder>(a2, a1);
  std::shared_ptr<fst::MappedFile>::reset[abi:ne180100]<fst::MappedFile,void>(v2, (uint64_t)v3);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::Read(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v19;
  _DWORD *v20;
  int v21;
  int v22;
  int v24;
  const std::string *v28;
  uint64_t v29;
  unint64_t v30;
  const std::string *v31;
  uint64_t v32;
  __int128 v33;
  _QWORD *v34;
  _BYTE *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v39;
  BOOL v49;
  unint64_t v50;
  BOOL v52;
  BOOL v53;
  _BYTE *v56;
  _BOOL4 v58;
  _QWORD *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _BYTE *v65;
  uint64_t v66;
  int v69;
  int v70;
  _QWORD *v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  _BYTE *v78;
  uint64_t v79;
  _QWORD *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  std::vector<std::wstring> *v85;
  _QWORD *v86;
  _BYTE *v87;
  uint64_t v88;
  kaldi::nnet1::Nnet *v89;
  uint64_t TrainOptions;
  __int128 v91;
  int v92;
  kaldi::nnet1::Nnet *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t *v96;
  std::__shared_weak_count *end;
  unint64_t *p_size;
  unint64_t v99;
  kaldi::nnet1::Nnet *v100;
  uint64_t ***v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  __int128 v106;
  kaldi::nnet1::Component *Component;
  _QWORD *v108;
  _QWORD *SymbolTable;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  _QWORD *v122;
  _QWORD *v123;
  std::wstring *begin;
  std::string::size_type v125;
  std::string::size_type v126;
  uint64_t v127;
  std::vector<std::wstring>::pointer v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  int v136;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  _QWORD *v151;
  void **v152;
  char v153;
  void **v154;
  _BYTE __str[39];
  std::vector<std::wstring> v157;
  std::string v158;
  const std::string *v159;
  const std::string *v160;
  uint64_t v161;
  std::string *v162;
  _BYTE v163[351];
  uint64_t v164[47];
  uint64_t v165[47];
  __int16 v166;
  char v167;
  int32x2_t v168[9];

  v168[6] = *(int32x2_t *)MEMORY[0x1E0C80C00];
  kaldi::ExpectToken(a2, a3, "<ModelType>");
  kaldi::ReadToken(a2, a3, a1 + 3576);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Full ModelType ", 15);
    v8 = *(char *)(a1 + 3599);
    if (v8 >= 0)
      v9 = a1 + 3576;
    else
      v9 = *(_QWORD *)(a1 + 3576);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 3599);
    else
      v10 = *(_QWORD *)(a1 + 3584);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  v159 = 0;
  v160 = 0;
  v161 = 0;
  kaldi::SplitStringToVector((const std::string *)(a1 + 3576), "_", 1, (uint64_t)&v159);
  if (v159 == v160)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Undefined Torch model type", 26);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
  }
  v11 = a1 + 3552;
  std::string::operator=((std::string *)(a1 + 3552), v159);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"ModelType ", 10);
    v13 = *(char *)(a1 + 3575);
    if (v13 >= 0)
      v14 = a1 + 3552;
    else
      v14 = *(_QWORD *)(a1 + 3552);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 3575);
    else
      v15 = *(_QWORD *)(a1 + 3560);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  v16 = *(char *)(a1 + 3575);
  if (v16 < 0)
  {
    if (*(_QWORD *)(a1 + 3560) != 6)
      goto LABEL_422;
    v20 = *(_DWORD **)v11;
    if (**(_DWORD **)v11 != 1668443988 || *(_WORD *)(*(_QWORD *)v11 + 4) != 20072)
    {
      if (*v20 != 1668443988 || *((_WORD *)v20 + 2) != 19816)
      {
        if (*v20 != 1668443988 || *((_WORD *)v20 + 2) != 21608)
          goto LABEL_32;
LABEL_52:
        v24 = 2;
        goto LABEL_55;
      }
LABEL_54:
      v24 = 1;
      goto LABEL_55;
    }
LABEL_53:
    v24 = 0;
    goto LABEL_55;
  }
  if (v16 != 6)
    goto LABEL_422;
  if (*(_DWORD *)v11 == 1668443988 && *(_WORD *)(a1 + 3556) == 20072)
    goto LABEL_53;
  if (*(_DWORD *)v11 == 1668443988 && *(_WORD *)(a1 + 3556) == 19816)
    goto LABEL_54;
  v19 = *(_DWORD *)v11 == 1668443988 && *(_WORD *)(a1 + 3556) == 21608;
  v20 = (_DWORD *)(a1 + 3552);
  if (v19)
    goto LABEL_52;
LABEL_32:
  v21 = *v20;
  v22 = *((unsigned __int16 *)v20 + 2);
  if (v21 != 1668443988 || v22 != 18024)
  {
LABEL_422:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Unsupported Torch model type : ", 31);
    v143 = *(char *)(a1 + 3575);
    if (v143 >= 0)
      v144 = a1 + 3552;
    else
      v144 = *(_QWORD *)(a1 + 3552);
    if (v143 >= 0)
      v145 = *(unsigned __int8 *)(a1 + 3575);
    else
      v145 = *(_QWORD *)(a1 + 3560);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, v144, v145);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
  }
  v24 = 3;
LABEL_55:
  v153 = 0;
  *(_DWORD *)(a1 + 3548) = v24;
  *(_WORD *)(a1 + 3912) = 0;
  v28 = v159;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (char *)v159) >> 3) >= 2)
  {
    v29 = 0;
    v153 = 0;
    v152 = (void **)(a1 + 3952);
    v154 = (void **)(a1 + 3928);
    v30 = 1;
    do
    {
      v31 = &v28[v29];
      v32 = (uint64_t)&v28[v29 + 1];
      if (SHIBYTE(v31[1].__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__str, *(const std::string::value_type **)v32, v31[1].__r_.__value_.__l.__size_);
      }
      else
      {
        v33 = *(_OWORD *)v32;
        *(_QWORD *)&__str[16] = *(_QWORD *)(v32 + 16);
        *(_OWORD *)__str = v33;
      }
      if ((__str[23] & 0x80000000) != 0)
        std::string::__init_copy_ctor_external(&v158, *(const std::string::value_type **)__str, *(std::string::size_type *)&__str[8]);
      else
        v158 = *(std::string *)__str;
      memset(&v157, 0, sizeof(v157));
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Processing token ", 17);
        if (__str[23] >= 0)
          v35 = __str;
        else
          v35 = *(_BYTE **)__str;
        if (__str[23] >= 0)
          v36 = __str[23];
        else
          v36 = *(_QWORD *)&__str[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
      }
      LODWORD(v37) = __str[23];
      if ((__str[23] & 0x80000000) == 0)
      {
        switch(__str[23])
        {
          case 3:
            if (*(unsigned __int16 *)__str == 20546 && __str[2] == 69)
              goto LABEL_153;
            goto LABEL_137;
          case 4:
            goto LABEL_134;
          case 5:
            goto LABEL_122;
          case 6:
LABEL_116:
            if (*(_DWORD *)__str == 1095781716 && *(unsigned __int16 *)&__str[4] == 21588)
              goto LABEL_150;
            if (__str[23] == 4)
              goto LABEL_134;
            if (__str[23] != 5)
              goto LABEL_137;
LABEL_122:
            if (*(_DWORD *)__str == 1279871043 && __str[4] == 68)
              goto LABEL_127;
LABEL_133:
            if (__str[23] != 4)
              goto LABEL_137;
LABEL_134:
            if (*(_DWORD *)__str == 1416916804)
              goto LABEL_135;
LABEL_137:
            v39 = __str[23];
            break;
          case 7:
LABEL_129:
            if (*(_DWORD *)__str == 1867807056 && *(_DWORD *)&__str[3] == 1751347823)
              goto LABEL_163;
            goto LABEL_133;
          case 9:
            if (*(_QWORD *)__str != 0x53494C54524F4853 || __str[8] != 84)
            {
              switch(__str[23])
              {
                case 4:
                  goto LABEL_134;
                case 5:
                  goto LABEL_122;
                case 6:
                  goto LABEL_116;
                case 7:
                  goto LABEL_129;
                default:
                  goto LABEL_137;
              }
            }
            goto LABEL_147;
          default:
            goto LABEL_137;
        }
LABEL_138:
        if (v39 <= 8)
          goto LABEL_166;
        std::string::basic_string((std::string *)v163, (const std::string *)__str, 0, 7uLL, (std::allocator<char> *)&v162);
        if ((v163[23] & 0x80000000) == 0)
        {
          if (v163[23] == 7)
          {
            v49 = *(_DWORD *)v163 == 1415865409 && *(_DWORD *)&v163[3] == 979853652;
            LODWORD(v37) = __str[23];
            v50 = *(_QWORD *)&__str[8];
            if (v49)
              goto LABEL_222;
            goto LABEL_167;
          }
          LODWORD(v37) = __str[23];
LABEL_166:
          v50 = *(_QWORD *)&__str[8];
          goto LABEL_167;
        }
        v52 = *(_QWORD *)&v163[8] == 7
           && **(_DWORD **)v163 == 1415865409
           && *(_DWORD *)(*(_QWORD *)v163 + 3) == 979853652;
        operator delete(*(void **)v163);
        LODWORD(v37) = __str[23];
        v50 = *(_QWORD *)&__str[8];
        if (v52)
        {
LABEL_222:
          v37 = v37;
          if ((v37 & 0x80u) != 0)
            v37 = v50;
          std::string::basic_string((std::string *)v163, (const std::string *)__str, 7uLL, v37 - 7, (std::allocator<char> *)&v162);
          if (*(char *)(a1 + 3951) < 0)
            operator delete(*v154);
          *(_OWORD *)v154 = *(_OWORD *)v163;
          *(_QWORD *)(a1 + 3944) = *(_QWORD *)&v163[16];
          MEMORY[0x1AF44C914](&v158, "AddTag");
          if (*(char *)(a1 + 3951) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v163, *(const std::string::value_type **)(a1 + 3928), *(_QWORD *)(a1 + 3936));
          }
          else
          {
            *(_OWORD *)v163 = *(_OWORD *)v154;
            *(_QWORD *)&v163[16] = *(_QWORD *)(a1 + 3944);
          }
          std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v157, (std::string *)v163, (__int128 *)&v163[24], 1uLL);
          if ((v163[23] & 0x80000000) != 0)
            operator delete(*(void **)v163);
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            v72 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Extracted add tag : ", 20);
            v73 = *(_BYTE *)(a1 + 3951);
            if (v73 >= 0)
              v74 = a1 + 3928;
            else
              v74 = *(_QWORD *)(a1 + 3928);
            if (v73 >= 0)
              v75 = *(unsigned __int8 *)(a1 + 3951);
            else
              v75 = *(_QWORD *)(a1 + 3936);
            v76 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, v74, v75);
            v77 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v76, (uint64_t)" from ", 6);
            if (__str[23] >= 0)
              v78 = __str;
            else
              v78 = *(_BYTE **)__str;
            if (__str[23] >= 0)
              v79 = __str[23];
            else
              v79 = *(_QWORD *)&__str[8];
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v78, v79);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
          }
          LODWORD(v162) = kaldi::quasar::ToAddTag((uint64_t)v154);
          kaldi::quasar::FromAddTag((int *)&v162, v163);
          if (*(char *)(a1 + 3951) < 0)
            operator delete(*v154);
          *(_OWORD *)v154 = *(_OWORD *)v163;
          *(_QWORD *)(a1 + 3944) = *(_QWORD *)&v163[16];
          *(_BYTE *)(a1 + 3921) = 1;
          if (kaldi::g_kaldi_verbose_level < 0)
            goto LABEL_303;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
          v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"AddTag value ", 13);
          v81 = *(_BYTE *)(a1 + 3951);
          if (v81 >= 0)
            v82 = a1 + 3928;
          else
            v82 = *(_QWORD *)(a1 + 3928);
          if (v81 >= 0)
            v83 = *(unsigned __int8 *)(a1 + 3951);
          else
            v83 = *(_QWORD *)(a1 + 3936);
          goto LABEL_301;
        }
LABEL_167:
        if ((v37 & 0x80u) == 0)
          v50 = v37;
        if (v50 >= 0xC)
        {
          std::string::basic_string((std::string *)v163, (const std::string *)__str, 0, 0xAuLL, (std::allocator<char> *)&v162);
          if ((v163[23] & 0x80000000) == 0)
          {
            if (v163[23] == 10)
            {
              v53 = *(_QWORD *)v163 == 0x616D726F46676154 && *(unsigned __int16 *)&v163[8] == 14964;
              LODWORD(v37) = __str[23];
              if (v53)
                goto LABEL_198;
              goto LABEL_176;
            }
LABEL_229:
            LODWORD(v37) = __str[23];
            if ((__str[23] & 0x80) != 0)
            {
LABEL_230:
              if (*(_QWORD *)&__str[8] != 6)
              {
                if (*(_QWORD *)&__str[8] == 10
                  && **(_QWORD **)__str == 0x626D456572616853
                  && *(_WORD *)(*(_QWORD *)__str + 8) == 25701)
                {
LABEL_256:
                  *(_BYTE *)(a1 + 3920) = 1;
                  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found shared embeddings token", 29);
                    goto LABEL_302;
                  }
                  goto LABEL_303;
                }
                goto LABEL_246;
              }
              if (**(_DWORD **)__str == 1348693573 && *(_WORD *)(*(_QWORD *)__str + 4) == 29551)
              {
LABEL_254:
                *(_BYTE *)(a1 + 3915) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found encoder position embedding token", 38);
                  goto LABEL_302;
                }
                goto LABEL_303;
              }
              v56 = *(_BYTE **)__str;
LABEL_242:
              v69 = *(_DWORD *)v56;
              v70 = *((unsigned __int16 *)v56 + 2);
              if (v69 == 1348691268 && v70 == 29551)
              {
                *(_BYTE *)(a1 + 3916) = 1;
                if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found decoder position embedding token", 38);
                  goto LABEL_302;
                }
                goto LABEL_303;
              }
              goto LABEL_246;
            }
LABEL_177:
            if ((_DWORD)v37 == 6)
            {
              if (*(_DWORD *)__str == 1348693573 && *(unsigned __int16 *)&__str[4] == 29551)
                goto LABEL_254;
              v56 = __str;
              goto LABEL_242;
            }
            if ((_DWORD)v37 == 10
              && *(_QWORD *)__str == 0x626D456572616853
              && *(unsigned __int16 *)&__str[8] == 25701)
            {
              goto LABEL_256;
            }
LABEL_246:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcBos"))
            {
              *(_BYTE *)(a1 + 3917) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found add beginning of sentence tag", 35);
                goto LABEL_302;
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AddSrcEos"))
            {
              *(_BYTE *)(a1 + 3918) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found add end of sentence tag", 29);
                goto LABEL_302;
              }
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "AlignModel"))
            {
              *(_BYTE *)(a1 + 3922) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "ShiftedAlignments"))
            {
              *(_BYTE *)(a1 + 3923) = 1;
            }
            else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "MultipleDecoders"))
            {
              *(_BYTE *)(a1 + 3924) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found multiple decoders token", 29);
                goto LABEL_302;
              }
            }
            else
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "NoSymbolTables"))
              {
                if (kaldi::g_kaldi_verbose_level >= -1)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                  v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Unknown model sub tag ", 22);
                  if (__str[23] >= 0)
                    v87 = __str;
                  else
                    v87 = *(_BYTE **)__str;
                  if (__str[23] >= 0)
                    v88 = __str[23];
                  else
                    v88 = *(_QWORD *)&__str[8];
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, (uint64_t)v87, v88);
                  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                }
                goto LABEL_303;
              }
              *(_BYTE *)(a1 + 3925) = 1;
              if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found 'NoSymbolTables' token", 28);
                goto LABEL_302;
              }
            }
            goto LABEL_303;
          }
          if (*(_QWORD *)&v163[8] != 10)
          {
            operator delete(*(void **)v163);
            goto LABEL_229;
          }
          v58 = **(_QWORD **)v163 != 0x616D726F46676154 || *(_WORD *)(*(_QWORD *)v163 + 8) != 14964;
          operator delete(*(void **)v163);
          LODWORD(v37) = __str[23];
          if (!v58)
          {
LABEL_198:
            v37 = v37;
            if ((v37 & 0x80u) != 0)
              v37 = *(_QWORD *)&__str[8];
            std::string::basic_string((std::string *)v163, (const std::string *)__str, 0xAuLL, v37 - 10, (std::allocator<char> *)&v162);
            if (*(char *)(a1 + 3975) < 0)
              operator delete(*v152);
            *(_OWORD *)v152 = *(_OWORD *)v163;
            *(_QWORD *)(a1 + 3968) = *(_QWORD *)&v163[16];
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
              v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Extracted tag format : ", 23);
              v60 = *(_BYTE *)(a1 + 3975);
              if (v60 >= 0)
                v61 = a1 + 3952;
              else
                v61 = *(_QWORD *)(a1 + 3952);
              if (v60 >= 0)
                v62 = *(unsigned __int8 *)(a1 + 3975);
              else
                v62 = *(_QWORD *)(a1 + 3960);
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, v61, v62);
              v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" from ", 6);
              if (__str[23] >= 0)
                v65 = __str;
              else
                v65 = *(_BYTE **)__str;
              if (__str[23] >= 0)
                v66 = __str[23];
              else
                v66 = *(_QWORD *)&__str[8];
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
            }
            LODWORD(v162) = kaldi::quasar::ToTagFormat(v152);
            kaldi::quasar::FromTagFormat((int *)&v162, v163);
            if (*(char *)(a1 + 3975) < 0)
              operator delete(*v152);
            *(_OWORD *)v152 = *(_OWORD *)v163;
            *(_QWORD *)(a1 + 3968) = *(_QWORD *)&v163[16];
            MEMORY[0x1AF44C914](&v158, "TagFormat");
            if (*(char *)(a1 + 3975) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v163, *(const std::string::value_type **)(a1 + 3952), *(_QWORD *)(a1 + 3960));
            }
            else
            {
              *(_OWORD *)v163 = *(_OWORD *)v152;
              *(_QWORD *)&v163[16] = *(_QWORD *)(a1 + 3968);
            }
            std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string const*,std::string const*>(&v157, (std::string *)v163, (__int128 *)&v163[24], 1uLL);
            if ((v163[23] & 0x80000000) != 0)
              operator delete(*(void **)v163);
            *(_BYTE *)(a1 + 3921) = 1;
            if (kaldi::g_kaldi_verbose_level < 0)
              goto LABEL_303;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            v80 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"TagFormat value ", 16);
            v84 = *(_BYTE *)(a1 + 3975);
            if (v84 >= 0)
              v82 = a1 + 3952;
            else
              v82 = *(_QWORD *)(a1 + 3952);
            if (v84 >= 0)
              v83 = *(unsigned __int8 *)(a1 + 3975);
            else
              v83 = *(_QWORD *)(a1 + 3960);
LABEL_301:
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v80, v82, v83);
LABEL_302:
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
            goto LABEL_303;
          }
        }
LABEL_176:
        if ((v37 & 0x80) != 0)
          goto LABEL_230;
        goto LABEL_177;
      }
      v39 = *(_QWORD *)&__str[8];
      if (*(_QWORD *)&__str[8] == 3 && **(_WORD **)__str == 20546 && *(_BYTE *)(*(_QWORD *)__str + 2) == 69)
      {
LABEL_153:
        if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found BPE token", 15);
          kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
        }
        *(_BYTE *)(a1 + 3912) = 1;
        goto LABEL_303;
      }
      if (*(_QWORD *)&__str[8] == 9)
      {
        if (**(_QWORD **)__str == 0x53494C54524F4853 && *(_BYTE *)(*(_QWORD *)__str + 8) == 84)
        {
LABEL_147:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found SHORTLIST token", 21);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
          }
          v153 = 1;
          goto LABEL_303;
        }
        v39 = *(_QWORD *)&__str[8];
      }
      if (v39 == 6)
      {
        if (**(_DWORD **)__str == 1095781716 && *(_WORD *)(*(_QWORD *)__str + 4) == 21588)
        {
LABEL_150:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found TMPATT token", 18);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
          }
          *(_BYTE *)(a1 + 3913) = 1;
          goto LABEL_303;
        }
        v39 = *(_QWORD *)&__str[8];
      }
      if (v39 == 5)
      {
        if (**(_DWORD **)__str == 1279871043 && *(_BYTE *)(*(_QWORD *)__str + 4) == 68)
        {
LABEL_127:
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found CHILD token", 17);
            goto LABEL_302;
          }
          goto LABEL_303;
        }
        v39 = *(_QWORD *)&__str[8];
      }
      if (v39 == 7)
      {
        if (**(_DWORD **)__str == 1867807056 && *(_DWORD *)(*(_QWORD *)__str + 3) == 1751347823)
        {
LABEL_163:
          *(_BYTE *)(a1 + 3919) = 1;
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found PyTorch token", 19);
            goto LABEL_302;
          }
          goto LABEL_303;
        }
        v39 = *(_QWORD *)&__str[8];
      }
      if (v39 != 4)
        goto LABEL_138;
      if (**(_DWORD **)__str != 1416916804)
        goto LABEL_166;
LABEL_135:
      *(_BYTE *)(a1 + 3914) = 1;
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Found DotT token", 16);
        goto LABEL_302;
      }
LABEL_303:
      v162 = &v158;
      v85 = (std::vector<std::wstring> *)(std::__tree<std::__value_type<std::string,std::vector<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 3600), (const void **)&v158.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v162)+ 7);
      if (v85 != &v157)
        std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v85, (std::string *)v157.__begin_, (__int128 *)v157.__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)v157.__end_ - (char *)v157.__begin_) >> 3));
      *(_QWORD *)v163 = &v157;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
      if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v158.__r_.__value_.__l.__data_);
      if ((__str[23] & 0x80000000) != 0)
        operator delete(*(void **)__str);
      ++v30;
      v28 = v159;
      ++v29;
    }
    while (0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (char *)v159) >> 3) > v30);
  }
  v89 = (kaldi::nnet1::Nnet *)(a1 + 8);
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 8), a2, a3, a4);
  TrainOptions = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8));
  *(_QWORD *)__str = &off_1E5D2D150;
  v91 = *(_OWORD *)(TrainOptions + 8);
  *(_OWORD *)&__str[23] = *(_OWORD *)(TrainOptions + 23);
  *(_OWORD *)&__str[8] = v91;
  __str[38] = 1;
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)(a1 + 8), (const kaldi::nnet1::NnetTrainOptions *)__str, 1);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"dot attention ", 14);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)v163, *(_BYTE *)(a1 + 3913), *(_BYTE *)(a1 + 3914), *(_DWORD *)(a1 + 3548) == 3);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 1936), (uint64_t *)&v163[8]);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 2312), v164);
  kaldi::nnet1::Nnet::operator=((kaldi::nnet1::Nnet *)(a1 + 2688), v165);
  *(_WORD *)(a1 + 3064) = v166;
  *(_BYTE *)(a1 + 3066) = v167;
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 3072), v168);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)v163);
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::Read(a1 + 1928, a2, a3, a4);
  if (*(_BYTE *)(a1 + 3924))
  {
    kaldi::ExpectToken(a2, a3, "<NumDecoders>");
    kaldi::ReadBasicType<int>(a2, a3, a1 + 3544);
    if (*(int *)(a1 + 3544) >= 1)
    {
      v92 = 0;
      do
      {
        kaldi::ExpectToken(a2, a3, "<DecoderLanguage>");
        memset(&v158, 0, sizeof(v158));
        kaldi::ReadToken(a2, a3, (uint64_t)&v158);
        v93 = (kaldi::nnet1::Nnet *)operator new();
        kaldi::nnet1::Nnet::Nnet(v93);
        std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(&v157, (uint64_t)v93);
        kaldi::nnet1::Nnet::Read((uint64_t **)v157.__begin_, a2, a3, a4);
        v94 = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)v157.__begin_);
        *(_QWORD *)v163 = &off_1E5D2D150;
        v95 = *(_OWORD *)(v94 + 8);
        *(_OWORD *)&v163[23] = *(_OWORD *)(v94 + 23);
        *(_OWORD *)&v163[8] = v95;
        v163[38] = 1;
        kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)v157.__begin_, (const kaldi::nnet1::NnetTrainOptions *)v163, 1);
        v162 = &v158;
        v96 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1152), (const void **)&v158.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v162);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v96 + 7, (uint64_t *)&v157);
        kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)v163);
        end = (std::__shared_weak_count *)v157.__end_;
        if (v157.__end_)
        {
          p_size = &v157.__end_->__r_.__value_.__l.__size_;
          do
            v99 = __ldaxr(p_size);
          while (__stlxr(v99 - 1, p_size));
          if (!v99)
          {
            ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
            std::__shared_weak_count::__release_weak(end);
          }
        }
        if (SHIBYTE(v158.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v158.__r_.__value_.__l.__data_);
        ++v92;
      }
      while (v92 < *(_DWORD *)(a1 + 3544));
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 1136), (uint64_t *)(*(_QWORD *)(a1 + 1152) + 56));
    v89 = (kaldi::nnet1::Nnet *)(a1 + 8);
  }
  else
  {
    v100 = (kaldi::nnet1::Nnet *)operator new();
    kaldi::nnet1::Nnet::Nnet(v100);
    std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(v163, (uint64_t)v100);
    v101 = (uint64_t ***)(a1 + 1136);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 1136, (__int128 *)v163);
    v102 = *(std::__shared_weak_count **)&v163[8];
    if (*(_QWORD *)&v163[8])
    {
      v103 = (unint64_t *)(*(_QWORD *)&v163[8] + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    kaldi::nnet1::Nnet::Read(*v101, a2, a3, a4);
    v105 = kaldi::nnet1::Nnet::GetTrainOptions((kaldi::nnet1::Nnet *)*v101);
    *(_QWORD *)v163 = &off_1E5D2D150;
    v106 = *(_OWORD *)(v105 + 8);
    *(_OWORD *)&v163[23] = *(_OWORD *)(v105 + 23);
    *(_OWORD *)&v163[8] = v106;
    v163[38] = 1;
    kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)*v101, (const kaldi::nnet1::NnetTrainOptions *)v163, 1);
    kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)v163);
  }
  if (kaldi::quasar::TorchEncoderDecoder::CheckHasHandover((kaldi::nnet1::Nnet **)a1))
  {
    kaldi::ExpectToken(a2, a3, "<HandoverCellStateOnly>");
    kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 3505));
    kaldi::ExpectToken(a2, a3, "<HasHandoverLayer>");
    kaldi::ReadBasicType<BOOL>(a2, a3, (char *)(a1 + 3506));
    if (*(_BYTE *)(a1 + 3506))
    {
      if (*(_BYTE *)(a1 + 3919) && *(_DWORD *)(a1 + 3548) != 3)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
        v146 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Handover layer not supported with PyTorch models ", 49);
        v147 = *(_BYTE *)(a1 + 3599);
        if (v147 >= 0)
          v148 = a1 + 3576;
        else
          v148 = *(_QWORD *)(a1 + 3576);
        if (v147 >= 0)
          v149 = *(unsigned __int8 *)(a1 + 3599);
        else
          v149 = *(_QWORD *)(a1 + 3584);
        v150 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, v148, v149);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v150, (uint64_t)" Cell handover ", 15);
        v151 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v151, (uint64_t)" Has handover layer ", 20);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
      }
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 1176), a2, a3, a4);
    }
    if (*(_DWORD *)(a1 + 3548) == 3)
    {
      kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 1552), a2, a3, a4);
      *(_BYTE *)(a1 + 3507) = 1;
    }
  }
  if (*(_BYTE *)(a1 + 3920))
  {
    Component = (kaldi::nnet1::Component *)kaldi::nnet1::Nnet::GetComponent(v89, 0);
    kaldi::nnet1::Nnet::AppendComponent((kaldi::nnet1::Nnet *)(a1 + 760), Component);
  }
  else
  {
    kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 760), a2, a3, a4);
  }
  kaldi::nnet1::Nnet::Read((uint64_t **)(a1 + 384), a2, a3, a4);
  LOBYTE(v162) = 0;
  kaldi::ExpectToken(a2, a3, "<HasInputSymbolTable>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v162);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Has input symbol table ", 23);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  if ((_BYTE)v162)
  {
    v108 = std::string::basic_string[abi:ne180100]<0>(v163, "isyms");
    SymbolTable = kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable((uint64_t)v108, a2, a3, (const std::string *)v163);
    v110 = *(_QWORD *)(a1 + 3624);
    *(_QWORD *)(a1 + 3624) = SymbolTable;
    if (v110)
      (*(void (**)(uint64_t))(*(_QWORD *)v110 + 8))(v110);
    if ((v163[23] & 0x80000000) != 0)
      operator delete(*(void **)v163);
  }
  else
  {
    v111 = *(_QWORD *)(a1 + 3624);
    *(_QWORD *)(a1 + 3624) = 0;
    if (v111)
      (*(void (**)(uint64_t))(*(_QWORD *)v111 + 8))(v111);
  }
  if ((_BYTE)v162 && !*(_QWORD *)(a1 + 3624))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Embedded input symbols could not read", 37);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
  }
  if (*(_BYTE *)(a1 + 3919) || *(_BYTE *)(a1 + 3917) || *(_BYTE *)(a1 + 3918))
  {
    v112 = *(_QWORD *)(a1 + 3624);
    if (!v112)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"PyTorch require symbol table", 28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
    }
    *(_DWORD *)(a1 + 3516) = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v112 + 104))(v112, "<s>");
    *(_DWORD *)(a1 + 3520) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3624) + 104))(*(_QWORD *)(a1 + 3624), "</s>");
    v113 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3624) + 104))(*(_QWORD *)(a1 + 3624), "<unk>");
    *(_DWORD *)(a1 + 3524) = v113;
    if (*(_DWORD *)(a1 + 3516) == -1 || *(_DWORD *)(a1 + 3520) == -1 || v113 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Special input symbol(s) not defined <s> </s> <unk> ", 51);
      v138 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v138, (uint64_t)" ", 1);
      v139 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v139, (uint64_t)" ", 1);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Overridding default input symbols <<unk> = ", 43);
      v114 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v114, (uint64_t)", <s> = ", 8);
      v115 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v115, (uint64_t)", </s> =  ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
  }
  kaldi::ExpectToken(a2, a3, "<HasOutputSymbolTable>");
  kaldi::ReadBasicType<BOOL>(a2, a3, (char *)&v162);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Has output symbol table ", 24);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  if ((_BYTE)v162)
  {
    v116 = std::string::basic_string[abi:ne180100]<0>(v163, "osyms");
    v117 = kaldi::quasar::TorchEncoderDecoder::TryReadSymbolTable((uint64_t)v116, a2, a3, (const std::string *)v163);
    v118 = *(_QWORD *)(a1 + 3632);
    *(_QWORD *)(a1 + 3632) = v117;
    if (v118)
      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
    if ((v163[23] & 0x80000000) != 0)
      operator delete(*(void **)v163);
  }
  else
  {
    v119 = *(_QWORD *)(a1 + 3632);
    *(_QWORD *)(a1 + 3632) = 0;
    if (v119)
      (*(void (**)(uint64_t))(*(_QWORD *)v119 + 8))(v119);
  }
  if ((_BYTE)v162 && !*(_QWORD *)(a1 + 3632))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Embedded output symbols could not read", 38);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
  }
  if (*(_BYTE *)(a1 + 3919))
  {
    v120 = *(_QWORD *)(a1 + 3632);
    if (!v120)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"PyTorch requires symbol table", 29);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
    }
    *(_DWORD *)(a1 + 3528) = (*(uint64_t (**)(uint64_t, const char *))(*(_QWORD *)v120 + 104))(v120, "<s>");
    *(_DWORD *)(a1 + 3532) = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3632) + 104))(*(_QWORD *)(a1 + 3632), "</s>");
    v121 = (*(uint64_t (**)(_QWORD, const char *))(**(_QWORD **)(a1 + 3632) + 104))(*(_QWORD *)(a1 + 3632), "<unk>");
    *(_DWORD *)(a1 + 3536) = v121;
    if (*(_DWORD *)(a1 + 3528) == -1 || *(_DWORD *)(a1 + 3532) == -1 || v121 == -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Special output symbol(s) not defined <s> </s> <unk> ", 52);
      v140 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)" ", 1);
      v141 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)" ", 1);
      std::ostream::operator<<();
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v163);
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Overridding default output symbols <<unk> = ", 44);
      v122 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v122, (uint64_t)", <s> = ", 8);
      v123 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v123, (uint64_t)", </s> =  ", 10);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
  }
  if (*(_BYTE *)(a1 + 3912))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Trying to read embedded BPE model ", 34);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
    kaldi::quasar::BPE::Read(a1 + 3672, a2, a3);
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Number of BPE entries : ", 24);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
  }
  if ((v153 & 1) != 0)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Trying to read Shortlist", 24);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
    kaldi::quasar::ShortlistDataBuilder::BuildShortlistDataInOneFile(a2, a3, a4, v163);
    begin = (std::wstring *)operator new();
    v125 = *(_QWORD *)v163;
    *(_QWORD *)v163 = 0;
    v158.__r_.__value_.__r.__words[0] = v125;
    kaldi::quasar::Shortlist::Shortlist((uint64_t)begin, (uint64_t *)&v158);
    v157.__begin_ = begin;
    v126 = v158.__r_.__value_.__r.__words[0];
    v158.__r_.__value_.__r.__words[0] = 0;
    if (v126)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v126 + 64))(v126);
      begin = v157.__begin_;
    }
    v157.__begin_ = 0;
    v127 = *(_QWORD *)(a1 + 3656);
    *(_QWORD *)(a1 + 3656) = begin;
    if (v127)
    {
      std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100](a1 + 3656, v127);
      v128 = v157.__begin_;
      v157.__begin_ = 0;
      if (v128)
        std::default_delete<kaldi::quasar::Shortlist>::operator()[abi:ne180100]((uint64_t)&v157, (uint64_t)v128);
    }
    v129 = *(_QWORD *)v163;
    *(_QWORD *)v163 = 0;
    if (v129)
      (*(void (**)(uint64_t))(*(_QWORD *)v129 + 64))(v129);
  }
  if (*(_BYTE *)(a1 + 3922))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Searching for SupervisedMultiHeadAttention component", 52);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
    }
    v130 = (*(_QWORD *)(*(_QWORD *)(a1 + 1136) + 8) - **(_QWORD **)(a1 + 1136)) >> 3;
    if ((int)v130 >= 1)
    {
      v131 = 0;
      while (1)
      {
        v132 = kaldi::nnet1::Nnet::GetComponent(*(kaldi::nnet1::Nnet **)(a1 + 1136), v131);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v132 + 24))(v132) == 287)
          break;
        if ((_DWORD)v130 == ++v131)
          goto LABEL_414;
      }
      *(_DWORD *)(a1 + 3540) = v131;
    }
  }
LABEL_414:
  v133 = kaldi::nnet1::Nnet::OutputDim(*(kaldi::nnet1::Nnet **)(a1 + 1136));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3312), 1, v133, 0, 0);
  v134 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 760));
  kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 3168), 1, v134, 0, 0);
  v135 = kaldi::nnet1::Nnet::OutputDim(v89);
  if (v135 >= 0)
    v136 = v135;
  else
    v136 = v135 + 1;
  *(_DWORD *)(a1 + 3976) = v136 >> 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v163);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v163, (uint64_t)"Done reading model ", 19);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v163);
  }
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)__str);
  *(_QWORD *)v163 = &v159;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v163);
  return 1;
}

void sub_1ADFB58A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB58B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1ADFB59FCLL);
}

void sub_1ADFB58E8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADFB59FCLL);
}

void sub_1ADFB58F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB5908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::quasar::TorchEncoderDecoder::AttentionModel::~AttentionModel((kaldi::quasar::TorchEncoderDecoder::AttentionModel *)&a31);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB5918()
{
  JUMPOUT(0x1ADFB59DCLL);
}

void sub_1ADFB5920()
{
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB5938()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x10B0C4082B712C9);
  JUMPOUT(0x1ADFB599CLL);
}

void sub_1ADFB5958()
{
  JUMPOUT(0x1ADFB5994);
}

void sub_1ADFB5968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)va);
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB5970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a31);
  JUMPOUT(0x1ADFB59BCLL);
}

void sub_1ADFB5980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    JUMPOUT(0x1ADFB59A8);
  kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions((kaldi::nnet1::NnetTrainOptions *)&a15);
  JUMPOUT(0x1ADFB59ECLL);
}

void sub_1ADFB59B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char *a37)
{
  a37 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  if (a31 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  a37 = &a32;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  _Unwind_Resume(a1);
}

fst::MappedFile *kaldi::ReadMapped<kaldi::quasar::TorchEncoderDecoder>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  if (!v17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v27[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::quasar::TorchEncoderDecoder::Read(a2, v6, v17, *((_QWORD *)v5 + 1));
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADFB5BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::TorchEncoderDecoder::SetMappedFile(uint64_t a1, uint64_t *a2)
{
  _QWORD v2[35];

  if (*(_QWORD *)(a1 + 3640))
  {
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2, 3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Nnet already mapped from a file - ignoring", 42);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v2);
    }
  }
  else
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 3640), a2);
  }
}

void sub_1ADFB5CB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::HasBpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return *((unsigned __int8 *)this + 3912);
}

uint64_t kaldi::quasar::TorchEncoderDecoder::BpeModel(kaldi::quasar::TorchEncoderDecoder *this)
{
  return (uint64_t)this + 3672;
}

_QWORD *kaldi::quasar::TorchEncoderDecoder::SelectModel@<X0>(_QWORD *a1@<X0>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t **v6;
  uint64_t *v7;
  _QWORD *result;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 *v12;

  v6 = (uint64_t **)(a1 + 144);
  if (a1 + 145 == (_QWORD *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)(a1 + 144), (const void **)a2))
  {
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a1 + 142, (uint64_t *)(a1[144] + 56));
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v12 = a2;
    v7 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (const void **)a2, (uint64_t)&std::piecewise_construct, &v12);
    result = std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a1 + 142, v7 + 7);
    v9 = a1[143];
    *a3 = a1[142];
    a3[1] = v9;
    if (v9)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
  }
  return result;
}

_QWORD *std::shared_ptr<kaldi::nnet1::Nnet>::shared_ptr[abi:ne180100]<kaldi::nnet1::Nnet,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45D28;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADFB5DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<kaldi::nnet1::Nnet>::reset[abi:ne180100]((kaldi::nnet1::Nnet **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

kaldi::nnet1::Nnet *std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__on_zero_shared(uint64_t a1)
{
  kaldi::nnet1::Nnet *result;

  result = *(kaldi::nnet1::Nnet **)(a1 + 24);
  if (result)
  {
    kaldi::nnet1::Nnet::~Nnet(result);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::nnet1::Nnet>::__shared_ptr_default_delete<kaldi::nnet1::Nnet,kaldi::nnet1::Nnet>,std::allocator<kaldi::nnet1::Nnet>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t kaldi::quasar::SeevaInferenceConfig::PassToCEConfig(uint64_t this, kaldi::quasar::ComputeEngineConfigItf *a2)
{
  uint64_t v3;
  _QWORD v4[2];
  _QWORD v5[51];
  _QWORD v6[20];

  v3 = this;
  v6[19] = *MEMORY[0x1E0C80C00];
  if (*(char *)(this + 111) < 0)
  {
    if (!*(_QWORD *)(this + 96))
      return this;
  }
  else if (!*(_BYTE *)(this + 111))
  {
    return this;
  }
  std::ifstream::basic_ifstream(v4);
  if (v5[15])
    (*(void (**)(kaldi::quasar::ComputeEngineConfigItf *, _QWORD *, _QWORD, uint64_t))(*(_QWORD *)a2 + 16))(a2, v4, *(unsigned __int8 *)(v3 + 112), v3 + 120);
  v4[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1AF44CA70](v5);
  std::istream::~istream();
  return MEMORY[0x1AF44D094](v6);
}

void sub_1ADFB5F94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ifstream::~ifstream((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaStreamInference::SeevaStreamInference(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v52;
  void *__p;
  void *v54;
  uint64_t v55;

  *(_QWORD *)a1 = &off_1E5D33A68;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = &unk_1E5D33A48;
  v6 = *(_OWORD *)(a3 + 8);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a3 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  v7 = *(_OWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a3 + 48);
  *(_OWORD *)(a1 + 48) = v7;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v8 = *(_OWORD *)(a3 + 56);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a3 + 72);
  *(_OWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a3 + 80);
  v9 = *(_OWORD *)(a3 + 88);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 104);
  *(_OWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a3 + 96) = 0;
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a3 + 112);
  v10 = *(_OWORD *)(a3 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a3 + 136);
  *(_OWORD *)(a1 + 136) = v10;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1E5D33E08;
  v11 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a1 + 176) = v11;
  v12 = *(_OWORD *)(a3 + 176);
  v13 = *(_OWORD *)(a3 + 192);
  v14 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(a1 + 236) = *(_OWORD *)(a3 + 220);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = v14;
  *(_OWORD *)(a1 + 192) = v12;
  v15 = *a4;
  *(_QWORD *)(a1 + 272) = *((_QWORD *)a4 + 2);
  *(_OWORD *)(a1 + 256) = v15;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)a4 = 0;
  v16 = *(__int128 *)((char *)a4 + 24);
  *(_QWORD *)(a1 + 296) = *((_QWORD *)a4 + 5);
  *(_OWORD *)(a1 + 280) = v16;
  *((_QWORD *)a4 + 4) = 0;
  *((_QWORD *)a4 + 5) = 0;
  *((_QWORD *)a4 + 3) = 0;
  v17 = a4[3];
  *(_QWORD *)(a1 + 320) = *((_QWORD *)a4 + 8);
  *(_OWORD *)(a1 + 304) = v17;
  *((_QWORD *)a4 + 7) = 0;
  *((_QWORD *)a4 + 8) = 0;
  *((_QWORD *)a4 + 6) = 0;
  v18 = *(__int128 *)((char *)a4 + 72);
  *(_QWORD *)(a1 + 344) = *((_QWORD *)a4 + 11);
  *(_OWORD *)(a1 + 328) = v18;
  *((_QWORD *)a4 + 9) = 0;
  *((_QWORD *)a4 + 10) = 0;
  *((_QWORD *)a4 + 11) = 0;
  v19 = a4[6];
  *(_QWORD *)(a1 + 368) = *((_QWORD *)a4 + 14);
  *(_OWORD *)(a1 + 352) = v19;
  *((_QWORD *)a4 + 12) = 0;
  *((_QWORD *)a4 + 13) = 0;
  *((_QWORD *)a4 + 14) = 0;
  v20 = *(__int128 *)((char *)a4 + 120);
  *(_QWORD *)(a1 + 392) = *((_QWORD *)a4 + 17);
  *(_OWORD *)(a1 + 376) = v20;
  *((_QWORD *)a4 + 15) = 0;
  *((_QWORD *)a4 + 16) = 0;
  *((_QWORD *)a4 + 17) = 0;
  v21 = a4[9];
  *(_QWORD *)(a1 + 416) = *((_QWORD *)a4 + 20);
  *(_OWORD *)(a1 + 400) = v21;
  *((_QWORD *)a4 + 18) = 0;
  *((_QWORD *)a4 + 19) = 0;
  *((_QWORD *)a4 + 20) = 0;
  v22 = *(__int128 *)((char *)a4 + 168);
  *(_QWORD *)(a1 + 440) = *((_QWORD *)a4 + 23);
  *(_OWORD *)(a1 + 424) = v22;
  *((_QWORD *)a4 + 21) = 0;
  *((_QWORD *)a4 + 22) = 0;
  *((_QWORD *)a4 + 23) = 0;
  v23 = a4[12];
  *(_QWORD *)(a1 + 464) = *((_QWORD *)a4 + 26);
  *(_OWORD *)(a1 + 448) = v23;
  *((_QWORD *)a4 + 24) = 0;
  *((_QWORD *)a4 + 25) = 0;
  *((_QWORD *)a4 + 26) = 0;
  v24 = *(__int128 *)((char *)a4 + 216);
  *(_QWORD *)(a1 + 488) = *((_QWORD *)a4 + 29);
  *(_OWORD *)(a1 + 472) = v24;
  *((_QWORD *)a4 + 27) = 0;
  *((_QWORD *)a4 + 28) = 0;
  *((_QWORD *)a4 + 29) = 0;
  v25 = a4[15];
  *(_QWORD *)(a1 + 512) = *((_QWORD *)a4 + 32);
  *(_OWORD *)(a1 + 496) = v25;
  *((_QWORD *)a4 + 30) = 0;
  *((_QWORD *)a4 + 31) = 0;
  *((_QWORD *)a4 + 32) = 0;
  v26 = *(__int128 *)((char *)a4 + 264);
  *(_QWORD *)(a1 + 536) = *((_QWORD *)a4 + 35);
  *(_OWORD *)(a1 + 520) = v26;
  *((_QWORD *)a4 + 33) = 0;
  *((_QWORD *)a4 + 34) = 0;
  *((_QWORD *)a4 + 35) = 0;
  v27 = a4[18];
  *(_QWORD *)(a1 + 560) = *((_QWORD *)a4 + 38);
  *(_OWORD *)(a1 + 544) = v27;
  *((_QWORD *)a4 + 36) = 0;
  *((_QWORD *)a4 + 37) = 0;
  *((_QWORD *)a4 + 38) = 0;
  v28 = *(__int128 *)((char *)a4 + 312);
  *(_QWORD *)(a1 + 584) = *((_QWORD *)a4 + 41);
  *(_OWORD *)(a1 + 568) = v28;
  *((_QWORD *)a4 + 39) = 0;
  *((_QWORD *)a4 + 40) = 0;
  *((_QWORD *)a4 + 41) = 0;
  v29 = a4[21];
  *(_QWORD *)(a1 + 608) = *((_QWORD *)a4 + 44);
  *(_OWORD *)(a1 + 592) = v29;
  *((_QWORD *)a4 + 42) = 0;
  *((_QWORD *)a4 + 43) = 0;
  *((_QWORD *)a4 + 44) = 0;
  v30 = *(__int128 *)((char *)a4 + 360);
  *(_QWORD *)(a1 + 632) = *((_QWORD *)a4 + 47);
  *(_OWORD *)(a1 + 616) = v30;
  *((_QWORD *)a4 + 45) = 0;
  *((_QWORD *)a4 + 46) = 0;
  *((_QWORD *)a4 + 47) = 0;
  v31 = a4[24];
  *(_QWORD *)(a1 + 656) = *((_QWORD *)a4 + 50);
  *(_OWORD *)(a1 + 640) = v31;
  *((_QWORD *)a4 + 48) = 0;
  *((_QWORD *)a4 + 49) = 0;
  *((_QWORD *)a4 + 50) = 0;
  v32 = *(__int128 *)((char *)a4 + 408);
  *(_QWORD *)(a1 + 680) = *((_QWORD *)a4 + 53);
  *(_OWORD *)(a1 + 664) = v32;
  *((_QWORD *)a4 + 51) = 0;
  *((_QWORD *)a4 + 52) = 0;
  *((_QWORD *)a4 + 53) = 0;
  v33 = a4[27];
  *(_QWORD *)(a1 + 704) = *((_QWORD *)a4 + 56);
  *(_OWORD *)(a1 + 688) = v33;
  *((_QWORD *)a4 + 54) = 0;
  *((_QWORD *)a4 + 55) = 0;
  *((_QWORD *)a4 + 56) = 0;
  v34 = *(__int128 *)((char *)a4 + 456);
  *(_QWORD *)(a1 + 728) = *((_QWORD *)a4 + 59);
  *(_OWORD *)(a1 + 712) = v34;
  *((_QWORD *)a4 + 57) = 0;
  *((_QWORD *)a4 + 58) = 0;
  *((_QWORD *)a4 + 59) = 0;
  v35 = (_QWORD *)(a1 + 736);
  v36 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  v52 = v35;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 56))(v36, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v37 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v37 + 56))(v37, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v38 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v38 + 56))(v38, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v39 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v39 + 48))(v39, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v40 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v40 + 48))(v40, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v41 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 48))(v41, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v42 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v42 + 48))(v42, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v43 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v43 + 56))(v43, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v44 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v44 + 56))(v44, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v45 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v45 + 56))(v45, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v46 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v46 + 48))(v46, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v47 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v47 + 48))(v47, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v48 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v48 + 56))(v48, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v49 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v49 + 56))(v49, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  v50 = *(_QWORD *)(a1 + 8);
  __p = 0;
  v54 = 0;
  v55 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v50 + 56))(v50, &__p);
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  (*(void (**)(_QWORD, _QWORD, float))(*(_QWORD *)*v52 + 104))(*v52, 0, *(float *)(a1 + 24));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 744) + 104))(*(_QWORD *)(a1 + 744), 0, *(float *)(a1 + 168));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 752) + 104))(*(_QWORD *)(a1 + 752), 0, *(float *)(a1 + 172));
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 760) + 96))(*(_QWORD *)(a1 + 760), 1, 0);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 768) + 96))(*(_QWORD *)(a1 + 768), 0xFFFFFFFFLL, 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 776) + 96))(*(_QWORD *)(a1 + 776), *(unsigned int *)(a1 + 188), 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 784) + 96))(*(_QWORD *)(a1 + 784), *(unsigned int *)(a1 + 192), 0);
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 792) + 104))(*(_QWORD *)(a1 + 792), 0, *(float *)(a1 + 196));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 800) + 104))(*(_QWORD *)(a1 + 800), 0, *(float *)(a1 + 200));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 808) + 104))(*(_QWORD *)(a1 + 808), 0, *(float *)(a1 + 204));
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 816) + 96))(*(_QWORD *)(a1 + 816), *(unsigned int *)(a1 + 224), 0);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 824) + 96))(*(_QWORD *)(a1 + 824), *(unsigned int *)(a1 + 228), 0);
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 832) + 104))(*(_QWORD *)(a1 + 832), 0, *(float *)(a1 + 240));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 840) + 104))(*(_QWORD *)(a1 + 840), 0, *(float *)(a1 + 244));
  (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 848) + 104))(*(_QWORD *)(a1 + 848), 0, *(float *)(a1 + 248));
  return a1;
}

void sub_1ADFB677C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12, uint64_t *a13, uint64_t *a14, void **a15, uint64_t *a16, uint64_t *a17, void *__p, uint64_t a19)
{
  uint64_t v19;
  uint64_t *v20;
  void **v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (__p)
    operator delete(__p);
  v28 = *v20;
  *v20 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = *v23;
  *v23 = 0;
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  v30 = *v22;
  *v22 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  v31 = *v26;
  *v26 = 0;
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
  v32 = *v25;
  *v25 = 0;
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v33 = *a9;
  *a9 = 0;
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 8))(v33);
  v34 = *a10;
  *a10 = 0;
  if (v34)
    (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
  v35 = *a11;
  *a11 = 0;
  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  v36 = *a12;
  *a12 = 0;
  if (v36)
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  v37 = *v24;
  *v24 = 0;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  v38 = *a16;
  *a16 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v39 = *a13;
  *a13 = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  v40 = *a14;
  *a14 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v41 = *a17;
  *a17 = 0;
  if (v41)
    (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames(v21);
  kaldi::quasar::SeevaStepInferenceConfig::~SeevaStepInferenceConfig(a15);
  v42 = *(_QWORD *)(v19 + 8);
  *(_QWORD *)(v19 + 8) = 0;
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::~SeevaStreamInference(kaldi::quasar::SeevaStreamInference *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_QWORD *)this = &off_1E5D33A68;
  v2 = *((_QWORD *)this + 106);
  *((_QWORD *)this + 106) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 105);
  *((_QWORD *)this + 105) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 104);
  *((_QWORD *)this + 104) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 103);
  *((_QWORD *)this + 103) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 102);
  *((_QWORD *)this + 102) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *((_QWORD *)this + 101);
  *((_QWORD *)this + 101) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *((_QWORD *)this + 100);
  *((_QWORD *)this + 100) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *((_QWORD *)this + 99);
  *((_QWORD *)this + 99) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *((_QWORD *)this + 98);
  *((_QWORD *)this + 98) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *((_QWORD *)this + 97);
  *((_QWORD *)this + 97) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *((_QWORD *)this + 96);
  *((_QWORD *)this + 96) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *((_QWORD *)this + 95);
  *((_QWORD *)this + 95) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *((_QWORD *)this + 94);
  *((_QWORD *)this + 94) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *((_QWORD *)this + 93);
  *((_QWORD *)this + 93) = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  v16 = *((_QWORD *)this + 92);
  *((_QWORD *)this + 92) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames((void **)this + 32);
  *((_QWORD *)this + 2) = &unk_1E5D33A48;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  v17 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
}

{
  kaldi::quasar::SeevaStreamInference::~SeevaStreamInference(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::SeevaStreamInference::RunInference(uint64_t a1, uint64_t *a2, int a3, int a4, int a5, int *a6, _DWORD *a7, _QWORD *a8)
{
  std::string *v15;
  __n128 v16;
  std::string *v17;
  __int128 *v18;
  std::string::size_type v19;
  __int128 *v20;
  std::string::size_type v21;
  __int128 *v22;
  std::string::size_type v23;
  uint64_t v24;
  __int128 *v25;
  std::string::size_type v26;
  uint64_t v27;
  __int128 *v28;
  std::string::size_type v29;
  __int128 *v30;
  std::string::size_type v31;
  __int128 *v32;
  std::string::size_type v33;
  float v34;
  int v35;
  int v36;
  BOOL v37;
  int v38;
  int v39;
  __int128 *v40;
  std::string::size_type v41;
  __int128 v42;
  float v43;
  __int128 *v44;
  std::string::size_type v45;
  __int128 v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  int v54;
  int v55;
  uint64_t v56;
  __int128 v57;
  float v58;
  int v59;
  float v60;
  float v61;
  float v62;
  __int128 *v63;
  std::string::size_type v64;
  std::string *v65;
  __int128 v66;
  __int128 *v67;
  std::string::size_type v68;
  __int128 v69;
  std::string *v70;
  uint64_t v71;
  std::string *v73;
  std::string *v74;
  void **p_data;
  uint64_t v76;
  std::string *v77;
  unint64_t v78;
  std::string *v79;
  char v80;
  std::string v81;
  uint64_t v82;
  std::string v83;
  __int128 v84;

  *(_QWORD *)&v84 = *MEMORY[0x1E0C80C00];
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v15 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, (__int128 *)(a1 + 256), *a2);
  v17 = v15;
  v77 = v15;
  if (*(float *)(a1 + 240) > 0.0)
  {
    v18 = (__int128 *)(a1 + 448);
    v19 = *(_QWORD *)(a1 + 832);
    if ((unint64_t)v15 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v18, *(_QWORD *)(a1 + 832));
    }
    else
    {
      if (*(char *)(a1 + 471) < 0)
      {
        std::string::__init_copy_ctor_external(v15, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
      }
      else
      {
        v16 = (__n128)*v18;
        v15->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 464);
        *(__n128 *)&v15->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v19;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(float *)(a1 + 244) > 0.0)
  {
    v20 = (__int128 *)(a1 + 688);
    v21 = *(_QWORD *)(a1 + 840);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v20, *(_QWORD *)(a1 + 840));
    }
    else
    {
      if (*(char *)(a1 + 711) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 688), *(_QWORD *)(a1 + 696));
      }
      else
      {
        v16 = (__n128)*v20;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 704);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v21;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(float *)(a1 + 248) > 0.0)
  {
    v22 = (__int128 *)(a1 + 712);
    v23 = *(_QWORD *)(a1 + 848);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v22, *(_QWORD *)(a1 + 848));
    }
    else
    {
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 712), *(_QWORD *)(a1 + 720));
      }
      else
      {
        v16 = (__n128)*v22;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 728);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v23;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(_BYTE *)(a1 + 164))
  {
    v24 = *(_QWORD *)(a1 + 8);
    v73 = 0;
    v74 = 0;
    p_data = 0;
    if (*(char *)(a1 + 615) < 0)
      std::string::__init_copy_ctor_external(&v81, *(const std::string::value_type **)(a1 + 592), *(_QWORD *)(a1 + 600));
    else
      v81 = *(std::string *)(a1 + 592);
    memset(&v83, 0, sizeof(v83));
    v79 = &v83;
    v80 = 0;
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x18uLL);
    v83.__r_.__value_.__l.__size_ = v83.__r_.__value_.__r.__words[0];
    v83.__r_.__value_.__r.__words[2] = v83.__r_.__value_.__r.__words[0] + 24;
    v83.__r_.__value_.__l.__size_ = (std::string::size_type)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v83.__r_.__value_.__r.__words[2], (__int128 *)&v81, (__int128 *)&v82, (std::string *)v83.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, _QWORD))(*(_QWORD *)v24 + 128))(v24, &v76, &v73, &v83, 0);
    v79 = &v83;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    v83.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    v27 = 0;
    goto LABEL_144;
  }
  if (*(float *)(a1 + 168) >= 0.0)
  {
    v25 = (__int128 *)(a1 + 280);
    v26 = *(_QWORD *)(a1 + 744);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v25, *(_QWORD *)(a1 + 744));
    }
    else
    {
      if (*(char *)(a1 + 303) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 280), *(_QWORD *)(a1 + 288));
      }
      else
      {
        v16 = (__n128)*v25;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 296);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v26;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(int *)(a1 + 188) >= 1)
  {
    v28 = (__int128 *)(a1 + 328);
    v29 = *(_QWORD *)(a1 + 776);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v28, *(_QWORD *)(a1 + 776));
    }
    else
    {
      if (*(char *)(a1 + 351) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 328), *(_QWORD *)(a1 + 336));
      }
      else
      {
        v16 = (__n128)*v28;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 344);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v29;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(int *)(a1 + 192) >= 1)
  {
    v30 = (__int128 *)(a1 + 352);
    v31 = *(_QWORD *)(a1 + 784);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v30, *(_QWORD *)(a1 + 784));
    }
    else
    {
      if (*(char *)(a1 + 375) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 352), *(_QWORD *)(a1 + 360));
      }
      else
      {
        v16 = (__n128)*v30;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 368);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v31;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (*(float *)(a1 + 196) > 0.0)
  {
    v32 = (__int128 *)(a1 + 376);
    v33 = *(_QWORD *)(a1 + 792);
    if ((unint64_t)v17 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v32, *(_QWORD *)(a1 + 792));
    }
    else
    {
      if (*(char *)(a1 + 399) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 376), *(_QWORD *)(a1 + 384));
      }
      else
      {
        v16 = (__n128)*v32;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 392);
        *(__n128 *)&v17->__r_.__value_.__l.__data_ = v16;
      }
      v17[1].__r_.__value_.__r.__words[0] = v33;
      v17 = (std::string *)((char *)v17 + 32);
    }
    v77 = v17;
  }
  if (a3)
  {
    v34 = *(float *)(a1 + 200);
    if (v34 > 0.0)
    {
      v35 = *(_DWORD *)(a1 + 216);
      if (v35 >= 1)
      {
        v36 = *(_DWORD *)(a1 + 160) * a4;
        v37 = __OFSUB__(v36, v35);
        v38 = v36 - v35;
        if (!((v38 < 0) ^ v37 | (v38 == 0)))
        {
          v39 = (v38 + *(_DWORD *)(a1 + 220)) / *(_DWORD *)(a1 + 220);
          *a6 = v39;
          v16.n128_f32[0] = v34 - (float)((float)v39 * *(float *)(a1 + 208));
          if (v16.n128_f32[0] < *(float *)(a1 + 212))
            v16.n128_u32[0] = *(_DWORD *)(a1 + 212);
          (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 800) + 104))(*(_QWORD *)(a1 + 800), 0, v16);
          v17 = v77;
        }
      }
      v40 = (__int128 *)(a1 + 400);
      v41 = *(_QWORD *)(a1 + 800);
      if ((unint64_t)v17 >= v78)
      {
        v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v40, *(_QWORD *)(a1 + 800));
      }
      else
      {
        if (*(char *)(a1 + 423) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
        }
        else
        {
          v42 = *v40;
          v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 416);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v42;
        }
        v17[1].__r_.__value_.__r.__words[0] = v41;
        v17 = (std::string *)((char *)v17 + 32);
      }
      v77 = v17;
    }
    v47 = *(_DWORD *)(a1 + 224);
    if (v47 < 1)
      goto LABEL_114;
    if (*(_BYTE *)(a1 + 232) && *a6 >= 1)
    {
      v48 = v47 - *a6;
      v49 = *(_DWORD *)(a1 + 236);
      if (v48 <= v49)
        v50 = v49;
      else
        v50 = v48;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 816) + 96))(*(_QWORD *)(a1 + 816), v50, 0);
      *a7 = v50;
      v17 = v77;
    }
    v51 = a1 + 424;
    v52 = *(_QWORD *)(a1 + 816);
    if ((unint64_t)v17 < v78)
    {
      if (*(char *)(a1 + 447) < 0)
        goto LABEL_111;
      goto LABEL_109;
    }
  }
  else
  {
    v43 = *(float *)(a1 + 204);
    if (v43 > 0.0)
    {
      if (*a6 >= 1)
      {
        v16.n128_f32[0] = v43 - (float)((float)*a6 * *(float *)(a1 + 208));
        if (v16.n128_f32[0] < *(float *)(a1 + 212))
          v16.n128_u32[0] = *(_DWORD *)(a1 + 212);
        (*(void (**)(_QWORD, _QWORD, __n128))(**(_QWORD **)(a1 + 808) + 104))(*(_QWORD *)(a1 + 808), 0, v16);
        v17 = v77;
      }
      v44 = (__int128 *)(a1 + 400);
      v45 = *(_QWORD *)(a1 + 808);
      if ((unint64_t)v17 >= v78)
      {
        v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v44, *(_QWORD *)(a1 + 808));
      }
      else
      {
        if (*(char *)(a1 + 423) < 0)
        {
          std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 400), *(_QWORD *)(a1 + 408));
        }
        else
        {
          v46 = *v44;
          v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 416);
          *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v46;
        }
        v17[1].__r_.__value_.__r.__words[0] = v45;
        v17 = (std::string *)((char *)v17 + 32);
      }
      v77 = v17;
    }
    v53 = *(_DWORD *)(a1 + 228);
    if (v53 < 1)
      goto LABEL_114;
    if (*(_BYTE *)(a1 + 232) && *a6 >= 1)
    {
      v54 = v53 - *a6;
      v55 = *(_DWORD *)(a1 + 236);
      if (v54 <= v55)
        v56 = v55;
      else
        v56 = v54;
      (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 824) + 96))(*(_QWORD *)(a1 + 824), v56, 0);
      v17 = v77;
    }
    v51 = a1 + 424;
    v52 = *(_QWORD *)(a1 + 824);
    if ((unint64_t)v17 < v78)
    {
      if (*(char *)(a1 + 447) < 0)
      {
LABEL_111:
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 424), *(_QWORD *)(a1 + 432));
        goto LABEL_112;
      }
LABEL_109:
      v57 = *(_OWORD *)v51;
      v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(v51 + 16);
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v57;
LABEL_112:
      v17[1].__r_.__value_.__r.__words[0] = v52;
      v17 = (std::string *)((char *)v17 + 32);
      goto LABEL_113;
    }
  }
  v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, (__int128 *)v51, v52);
LABEL_113:
  v77 = v17;
LABEL_114:
  v58 = *(float *)(a1 + 172);
  if (v58 > 0.0)
  {
    v59 = *(_DWORD *)(a1 + 184);
    if (v59 >= 1)
    {
      if (v59 <= a5)
      {
        v60 = (double)(v59 + a5) / (double)v59;
        v61 = v58 + (float)(*(float *)(a1 + 180) * v60);
        if (v61 <= *(float *)(a1 + 176))
          v62 = v61;
        else
          v62 = *(float *)(a1 + 176);
        (*(void (**)(_QWORD, _QWORD, float))(**(_QWORD **)(a1 + 752) + 104))(*(_QWORD *)(a1 + 752), 0, v62);
        if (kaldi::g_kaldi_verbose_level >= 1)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v73, 1);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v73, (uint64_t)"use coverage penalty ", 21);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v73);
        }
      }
      else
      {
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 752) + 104))(*(_QWORD *)(a1 + 752), 0);
      }
    }
    v63 = (__int128 *)(a1 + 304);
    v64 = *(_QWORD *)(a1 + 752);
    v65 = v77;
    if ((unint64_t)v77 >= v78)
    {
      v17 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v63, *(_QWORD *)(a1 + 752));
    }
    else
    {
      if (*(char *)(a1 + 327) < 0)
      {
        std::string::__init_copy_ctor_external(v77, *(const std::string::value_type **)(a1 + 304), *(_QWORD *)(a1 + 312));
      }
      else
      {
        v66 = *v63;
        v77->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 320);
        *(_OWORD *)&v65->__r_.__value_.__l.__data_ = v66;
      }
      v65[1].__r_.__value_.__r.__words[0] = v64;
      v17 = (std::string *)((char *)v65 + 32);
    }
    v77 = v17;
  }
  if (a3)
  {
    v67 = (__int128 *)(a1 + 472);
    v68 = *(_QWORD *)(a1 + 768);
    if ((unint64_t)v17 >= v78)
    {
      v70 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v76, v67, *(_QWORD *)(a1 + 768));
    }
    else
    {
      if (*(char *)(a1 + 495) < 0)
      {
        std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)(a1 + 472), *(_QWORD *)(a1 + 480));
      }
      else
      {
        v69 = *v67;
        v17->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 488);
        *(_OWORD *)&v17->__r_.__value_.__l.__data_ = v69;
      }
      v17[1].__r_.__value_.__r.__words[0] = v68;
      v70 = (std::string *)((char *)v17 + 32);
    }
    v77 = v70;
  }
  v71 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a1 + 591) < 0)
    std::string::__init_copy_ctor_external(&v83, *(const std::string::value_type **)(a1 + 568), *(_QWORD *)(a1 + 576));
  else
    v83 = *(std::string *)(a1 + 568);
  v73 = 0;
  v74 = 0;
  p_data = 0;
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  v81.__r_.__value_.__s.__data_[8] = 0;
  v73 = (std::string *)operator new(0x18uLL);
  v74 = v73;
  p_data = (void **)&v73[1].__r_.__value_.__l.__data_;
  v74 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v83, &v84, v73);
  memset(&v81, 0, sizeof(v81));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, _QWORD *))(*(_QWORD *)v71 + 128))(v71, &v76, &v73, &v81, a8);
  v79 = &v81;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v79);
  v81.__r_.__value_.__r.__words[0] = (std::string::size_type)&v73;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  if (SHIBYTE(v83.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v83.__r_.__value_.__l.__data_);
  v27 = (a8[1] - *a8) >> 3;
LABEL_144:
  v73 = (std::string *)&v76;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v73);
  return v27;
}

void sub_1ADFB762C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v10 - 192) = v9;
  a9 = (void **)(v10 - 200);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::RunInferenceFinal(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  std::string *v7;
  std::string *v8;
  __int128 *v9;
  std::string::size_type v10;
  __int128 v11;
  __int128 *v12;
  std::string::size_type v13;
  __int128 v14;
  __int128 *v15;
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 *v21;
  std::string::size_type v22;
  __int128 v23;
  uint64_t p_size;
  uint64_t v25;
  uint64_t v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::string *v33;
  char v34;
  std::string v35;
  std::string v36;
  __int128 v37;

  *((_QWORD *)&v37 + 1) = *MEMORY[0x1E0C80C00];
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v7 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, (__int128 *)(a1 + 256), *a2);
  v8 = v7;
  v31 = (uint64_t)v7;
  if (*(float *)(a1 + 240) > 0.0)
  {
    v9 = (__int128 *)(a1 + 448);
    v10 = *(_QWORD *)(a1 + 832);
    if ((unint64_t)v7 >= v32)
    {
      v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v9, *(_QWORD *)(a1 + 832));
    }
    else
    {
      if (*(char *)(a1 + 471) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
      }
      else
      {
        v11 = *v9;
        v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 464);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v11;
      }
      v8[1].__r_.__value_.__r.__words[0] = v10;
      v8 = (std::string *)((char *)v8 + 32);
    }
    v31 = (uint64_t)v8;
  }
  if (*(float *)(a1 + 244) > 0.0)
  {
    v12 = (__int128 *)(a1 + 688);
    v13 = *(_QWORD *)(a1 + 840);
    if ((unint64_t)v8 >= v32)
    {
      v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v12, *(_QWORD *)(a1 + 840));
    }
    else
    {
      if (*(char *)(a1 + 711) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 688), *(_QWORD *)(a1 + 696));
      }
      else
      {
        v14 = *v12;
        v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 704);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v14;
      }
      v8[1].__r_.__value_.__r.__words[0] = v13;
      v8 = (std::string *)((char *)v8 + 32);
    }
    v31 = (uint64_t)v8;
  }
  if (*(float *)(a1 + 248) > 0.0)
  {
    v15 = (__int128 *)(a1 + 712);
    v16 = *(_QWORD *)(a1 + 848);
    if ((unint64_t)v8 >= v32)
    {
      v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v15, *(_QWORD *)(a1 + 848));
    }
    else
    {
      if (*(char *)(a1 + 735) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 712), *(_QWORD *)(a1 + 720));
      }
      else
      {
        v17 = *v15;
        v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 728);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v17;
      }
      v8[1].__r_.__value_.__r.__words[0] = v16;
      v8 = (std::string *)((char *)v8 + 32);
    }
    v31 = (uint64_t)v8;
  }
  if (a3)
  {
    if (*(float *)(a1 + 24) >= 0.0)
    {
      v18 = a1 + 280;
      v19 = *(_QWORD *)(a1 + 736);
      if ((unint64_t)v8 < v32)
      {
        if (*(char *)(a1 + 303) < 0)
          goto LABEL_35;
        goto LABEL_33;
      }
      goto LABEL_34;
    }
  }
  else if (*(float *)(a1 + 168) >= 0.0)
  {
    v18 = a1 + 280;
    v19 = *(_QWORD *)(a1 + 744);
    if ((unint64_t)v8 < v32)
    {
      if (*(char *)(a1 + 303) < 0)
      {
LABEL_35:
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 280), *(_QWORD *)(a1 + 288));
        goto LABEL_36;
      }
LABEL_33:
      v20 = *(_OWORD *)v18;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v20;
LABEL_36:
      v8[1].__r_.__value_.__r.__words[0] = v19;
      v8 = (std::string *)((char *)v8 + 32);
      goto LABEL_37;
    }
LABEL_34:
    v8 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, (__int128 *)v18, v19);
LABEL_37:
    v31 = (uint64_t)v8;
  }
  v21 = (__int128 *)(a1 + 472);
  v22 = *(_QWORD *)(a1 + 760);
  if ((unint64_t)v8 >= v32)
  {
    p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v30, v21, *(_QWORD *)(a1 + 760));
  }
  else
  {
    if (*(char *)(a1 + 495) < 0)
    {
      std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a1 + 472), *(_QWORD *)(a1 + 480));
    }
    else
    {
      v23 = *v21;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 488);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v23;
    }
    v8[1].__r_.__value_.__r.__words[0] = v22;
    p_size = (uint64_t)&v8[1].__r_.__value_.__l.__size_;
  }
  v31 = p_size;
  if (*(char *)(a1 + 519) < 0)
    std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(a1 + 496), *(_QWORD *)(a1 + 504));
  else
    v35 = *(std::string *)(a1 + 496);
  if (*(char *)(a1 + 543) < 0)
    std::string::__init_copy_ctor_external(&v36, *(const std::string::value_type **)(a1 + 520), *(_QWORD *)(a1 + 528));
  else
    v36 = *(std::string *)(a1 + 520);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v33 = (std::string *)&v27;
  v34 = 0;
  v27 = (std::string *)operator new(0x30uLL);
  v28 = v27;
  v29 = v27 + 2;
  v25 = 0;
  v28 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v29, (__int128 *)&v35, &v37, v27);
  do
  {
    if (SHIBYTE(v36.__r_.__value_.__r.__words[v25 + 2]) < 0)
      operator delete(*(void **)((char *)&v35 + v25 * 8 + 24));
    v25 -= 3;
  }
  while (v25 != -6);
  v26 = *(_QWORD *)(a1 + 8);
  memset(&v35, 0, sizeof(v35));
  (*(void (**)(uint64_t, uint64_t *, std::string **, std::string *, uint64_t))(*(_QWORD *)v26 + 128))(v26, &v30, &v27, &v35, a4);
  v33 = &v35;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v33);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
  v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v30;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
}

void sub_1ADFB7B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  __p = &a12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::SeevaStreamInference::ResetGraph(kaldi::quasar::SeevaStreamInference *this, const kaldi::quasar::TensorFst *a2)
{
  std::string *v4;
  std::string *v5;
  __int128 *v6;
  std::string::size_type v7;
  __int128 v8;
  std::string *v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t p_size;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  void **p_data;
  void **v18[3];
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void ***v22;
  char v23;
  std::string v24;
  __int128 v25;

  *(_QWORD *)&v25 = *MEMORY[0x1E0C80C00];
  v19 = 0;
  v20 = 0;
  v21 = 0;
  if (*((int *)a2 + 6) >= 1)
  {
    v4 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, (__int128 *)((char *)this + 616), *(_QWORD *)a2);
    v5 = v4;
    v20 = (uint64_t)v4;
    v6 = (__int128 *)((char *)this + 640);
    v7 = *((_QWORD *)a2 + 1);
    if ((unint64_t)v4 >= v21)
    {
      v9 = (std::string *)std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, v6, *((_QWORD *)a2 + 1));
    }
    else
    {
      if (*((char *)this + 663) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)this + 80), *((_QWORD *)this + 81));
      }
      else
      {
        v8 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 82);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v8;
      }
      v5[1].__r_.__value_.__r.__words[0] = v7;
      v9 = (std::string *)((char *)v5 + 32);
    }
    v20 = (uint64_t)v9;
    v10 = (__int128 *)((char *)this + 664);
    v11 = *((_QWORD *)a2 + 2);
    if ((unint64_t)v9 >= v21)
    {
      p_size = std::vector<std::pair<std::string,kaldi::quasar::ComputeEngineBufferItf const&>>::__emplace_back_slow_path<std::string&,kaldi::quasar::ComputeEngineBufferItf&>(&v19, v10, v11);
    }
    else
    {
      if (*((char *)this + 687) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)this + 83), *((_QWORD *)this + 84));
      }
      else
      {
        v12 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 85);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v12;
      }
      v9[1].__r_.__value_.__r.__words[0] = v11;
      p_size = (uint64_t)&v9[1].__r_.__value_.__l.__size_;
    }
    v20 = p_size;
  }
  v14 = *((_QWORD *)this + 1);
  memset(v18, 0, sizeof(v18));
  if (*((char *)this + 567) < 0)
    std::string::__init_copy_ctor_external(&v24, *((const std::string::value_type **)this + 68), *((_QWORD *)this + 69));
  else
    v24 = *(std::string *)((char *)this + 544);
  v15 = 0;
  v16 = 0;
  p_data = 0;
  v22 = (void ***)&v15;
  v23 = 0;
  v15 = (std::string *)operator new(0x18uLL);
  v16 = v15;
  p_data = (void **)&v15[1].__r_.__value_.__l.__data_;
  v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&p_data, (__int128 *)&v24, &v25, v15);
  (*(void (**)(uint64_t, uint64_t *, void ***, std::string **, _QWORD))(*(_QWORD *)v14 + 128))(v14, &v19, v18, &v15, 0);
  v22 = (void ***)&v15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  v15 = (std::string *)v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  v18[0] = (void **)&v19;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v18);
}

void sub_1ADFB7E14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, char a16)
{
  a13 = (void **)&a16;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::SeevaStreamInference::SetAlignTensors(kaldi::quasar::SeevaStreamInference *this, float a2, float a3)
{
  (*(void (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 100) + 104))(*((_QWORD *)this + 100), 0, a2);
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(**((_QWORD **)this + 101) + 104))(*((_QWORD *)this + 101), 0, a3);
}

uint64_t kaldi::quasar::SeevaStreamInference::SetStableTokensTensors(kaldi::quasar::SeevaStreamInference *this, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 102) + 96))(*((_QWORD *)this + 102), a2, 0);
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**((_QWORD **)this + 103) + 96))(*((_QWORD *)this + 103), a3, 0);
}

void kaldi::quasar::SeevaStreamInferenceConfig::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::quasar::SeevaInferenceConfig::Register(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames in each batch, if <0 will feed whole speech in one batch");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 144, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "encoder-only");
  std::string::basic_string[abi:ne180100]<0>(__p, "only streaming the encoder, no partial results");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 148, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "length-penalty-stream");
  std::string::basic_string[abi:ne180100]<0>(__p, "if >= 0, use this value as length penalty during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 152, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "coverage-penalty");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this value as the coverage penalty. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 156, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cover-pen-ceil");
  std::string::basic_string[abi:ne180100]<0>(__p, "the maximum coverage penalty");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 160, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cover-pen-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "dynamically adjusting coverage penalty with this step size");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 164, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-thresh");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, turn on dynamic coverage penalty when encounter this amount of silence");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 168, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-input-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum number of frames to start streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 172, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-input-left");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum number of frames for leftover during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 176, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-aln-weight");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum alignment weight during streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 180, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-init-aln");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum initial peak alignment value for the streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 184, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-cont-aln");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, set the minimum continuous peak alignment value for the streaming. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 188, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "aln-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "reduce the min-aln value by this size to increase streaming");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 192, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-aln-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "the aln-value floor when reduction happens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 196, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-input-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0 && < received_frames, reduce min-aln value to generate partial result if not already so");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 200, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "count-step-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "adjust the min-aln value according to this frequency");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 204, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "init-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of tokens needed for stabilizing the streaming inference at the initial stage");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 208, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cont-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of tokens needed for stabilizing the streaming inference");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 212, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "dynamic-stable-tokens");
  std::string::basic_string[abi:ne180100]<0>(__p, "turn on dynamic stable tokens to encourage streaming");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 216, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-token-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "the stable token floor when reduction happens");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 220, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "utt-end-beam");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, use this beam at the utterance end. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 224, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, scale the LME FST score. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 228, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nonlme-score-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "if > 0, scale the nonLME arc score when LME is active. Otherwise use the value in the graph");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 232, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADFB8798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::SeevaStreamInferenceTensorNames::~SeevaStreamInferenceTensorNames(void **this)
{
  if (*((char *)this + 479) < 0)
    operator delete(this[57]);
  if (*((char *)this + 455) < 0)
    operator delete(this[54]);
  if (*((char *)this + 431) < 0)
    operator delete(this[51]);
  if (*((char *)this + 407) < 0)
    operator delete(this[48]);
  if (*((char *)this + 383) < 0)
    operator delete(this[45]);
  if (*((char *)this + 359) < 0)
    operator delete(this[42]);
  if (*((char *)this + 335) < 0)
    operator delete(this[39]);
  if (*((char *)this + 311) < 0)
    operator delete(this[36]);
  if (*((char *)this + 287) < 0)
    operator delete(this[33]);
  if (*((char *)this + 263) < 0)
    operator delete(this[30]);
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  if (*((char *)this + 119) < 0)
    operator delete(this[12]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

quasar::rescoring::Featurizer *quasar::rescoring::Featurizer::Featurizer(quasar::rescoring::Featurizer *this, const quasar::rescoring::RescorerConfig *a2)
{
  char *v3;
  uint64_t v5[3];
  void **v6;

  *(_QWORD *)this = &off_1E5CFF308;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 35);
  *((_DWORD *)this + 5) = *((_DWORD *)a2 + 436);
  v3 = (char *)this + 24;
  quasar::tennessee::lm::LoadDefaultPersonalizationSlotInfos(v5);
  quasar::tennessee::lm::ExtractPreItnPersonalizationTags(v5, (uint64_t)v3);
  v6 = (void **)v5;
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100](&v6);
  return this;
}

void sub_1ADFB8A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::unique_ptr<quasar::tennessee::lm::flatbuf::PersonalizationSlotInfoT>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float quasar::rescoring::Featurizer::GetTransformedFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, int *a5)
{
  int v6;
  unsigned __int16 *v9;
  unsigned __int16 *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  int v20;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unsigned int v29;
  char *v30;
  int v31;
  uint64_t v32;
  float *v33;
  float v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52[3];
  void *v53;
  void *v54;

  v6 = a4;
  v9 = (unsigned __int16 *)((char *)a5 - *a5);
  if (*v9 < 7u || !v9[3] || !*(int *)((char *)a5 + v9[3] + *(unsigned int *)((char *)a5 + v9[3])))
    return quasar::rescoring::Featurizer::GetAtomicFeatureValue(a1, a2, a3, a4, *(_QWORD *)((char *)a5 + v9[2] + *(unsigned int *)((char *)a5 + v9[2]) + 4));
  quasar::rescoring::CreateTransformedFeatureDesc(a5, (uint64_t)v52);
  v10 = (unsigned __int16 *)((char *)a5 - *a5);
  v11 = *v10;
  v12 = v10[2];
  v13 = *(unsigned int *)((char *)a5 + v12);
  v14 = (unsigned int *)((char *)a5 + v12 + v13);
  v15 = *v14;
  if (v15 < 2)
  {
    if ((_DWORD)v15 != 1)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Unable to compute feature value without feature type.", 53);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
    }
    v22 = *((char *)v14 + 4);
    if (v22 == 20)
    {
      v23 = *(int *)(a1 + 16);
    }
    else if ((v22 - 11) < 4 || v22 == 20)
    {
      v23 = *(int *)(a1 + 20);
    }
    else
    {
      v23 = 1;
    }
    if (v11 >= 9 && (v27 = v10[4]) != 0)
      v28 = *(int *)((char *)a5 + v27);
    else
      v28 = 0;
    v29 = v14[2];
    v30 = quasar::lm::FindOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(a3, v52);
    v31 = kaldi::MatrixBase<float>::NumCols((uint64_t)v30);
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v30) == 1)
      v32 = *(_QWORD *)v30;
    else
      v32 = *(_QWORD *)v30 + 4 * *((_DWORD *)v30 + 4) * v6;
    v33 = (float *)(v32 + 4 * (int)(v28 + v31 / v23 * v29));
  }
  else
  {
    v16 = 8 * v15;
    v17 = (int *)((char *)a5 + v13 + v12 + 8);
    do
    {
      v18 = *v17;
      v17 += 2;
      if (v18)
      {
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v35 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v35, (uint64_t)"Only 1-dimensional feature values supported when performing bivariate transformations.", 86);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v35);
      }
      v16 -= 8;
    }
    while (v16);
    if (v11 >= 9 && (v19 = v10[4]) != 0)
      v20 = *(int *)((char *)a5 + v19);
    else
      v20 = 0;
    v24 = quasar::lm::FindOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(a3, v52);
    kaldi::MatrixBase<float>::NumCols((uint64_t)v24);
    if (kaldi::MatrixBase<float>::NumRows((uint64_t)v24) == 1)
      v25 = *(_QWORD *)v24;
    else
      v25 = *(_QWORD *)v24 + 4 * *((_DWORD *)v24 + 4) * v6;
    v33 = (float *)(v25 + 4 * v20);
  }
  v34 = *v33;
  if (v53)
  {
    v54 = v53;
    operator delete(v53);
  }
  if (v52[0])
  {
    v52[1] = v52[0];
    operator delete(v52[0]);
  }
  return v34;
}

void quasar::rescoring::CreateTransformedFeatureDesc(int *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char v22;
  size_t v23;
  char *v24;
  unsigned int *v25;
  __int128 v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  char *v30;

  v4 = (unsigned __int16 *)((char *)a1 - *a1);
  if (*v4 >= 7u && v4[3])
    v25 = (unsigned int *)((char *)a1 + v4[3] + *(unsigned int *)((char *)a1 + v4[3]));
  else
    v25 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  std::vector<quasar::rescoring::FeatureType>::reserve((unint64_t *)&v28, *(unsigned int *)((char *)a1 + v4[2] + *(unsigned int *)((char *)a1 + v4[2])));
  v5 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 4));
  v6 = *v5;
  v8 = (char *)v5 + v6 + 4;
  v7 = *(unsigned int *)((char *)v5 + v6);
  if ((_DWORD)v7)
  {
    v9 = &v8[8 * v7];
    v10 = v29;
    do
    {
      v11 = *v8;
      if (v10 >= v30)
      {
        v13 = (unint64_t)v28;
        v14 = v10 - v28;
        v15 = v10 - v28 + 1;
        if (v15 < 0)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v30 - v28;
        if (2 * (v30 - v28) > (unint64_t)v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v18[v14];
        v20 = &v18[v14];
        *v20 = v11;
        v12 = (uint64_t)(v20 + 1);
        if (v10 != (char *)v13)
        {
          v21 = &v10[~v13];
          do
          {
            v22 = *--v10;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v10 != (char *)v13);
          v19 = v18;
        }
        v28 = v19;
        v29 = (char *)v12;
        v30 = &v18[v17];
        if (v13)
          operator delete((void *)v13);
      }
      else
      {
        *v10 = v11;
        v12 = (uint64_t)(v10 + 1);
      }
      v29 = (char *)v12;
      v8 += 8;
      v10 = (char *)v12;
    }
    while (v8 != v9);
  }
  v23 = *v25;
  v26 = 0uLL;
  v27 = 0;
  std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation const*,quasar::rescoring::FeatureTransformation const*>(&v26, v25 + 1, (uint64_t)v25 + v23 + 4, v23);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  std::vector<quasar::rescoring::FeatureType>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureType*,quasar::rescoring::FeatureType*>((_QWORD *)a2, v28, (uint64_t)v29, v29 - v28);
  *(_OWORD *)(a2 + 24) = v26;
  v24 = v28;
  *(_QWORD *)(a2 + 40) = v27;
  if (v24)
  {
    v29 = v24;
    operator delete(v24);
  }
}

void sub_1ADFB8F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

float quasar::rescoring::Featurizer::GetCompositeFeatureValue(uint64_t a1, int *a2, uint64_t a3, unint64_t a4, _DWORD *a5)
{
  unint64_t v10;
  unsigned int *v11;
  float v12;
  unsigned int *v13;
  unsigned int v14;

  if (!*a5)
    return 1.0;
  v10 = 0;
  v11 = a5 + 1;
  v12 = 1.0;
  v13 = a5 + 1;
  do
  {
    v14 = *v13++;
    v12 = v12 * quasar::rescoring::Featurizer::GetTransformedFeatureValue(a1, a2, a3, a4, (int *)((char *)v11 + v14));
    ++v10;
    v11 = v13;
  }
  while (v10 < *a5);
  return v12;
}

uint64_t quasar::rescoring::Featurizer::NbestListEntryContainsLMEToken(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  _OWORD v9[17];

  v2 = *a2;
  if (!(_DWORD)v2)
    return 0;
  v3 = 4 * v2;
  while (1)
  {
    v4 = a2[1];
    v5 = (char *)a2 + v4 - *(int *)((char *)a2 + v4 + 4);
    if (*((unsigned __int16 *)v5 + 2) < 0xBu || (v6 = *((unsigned __int16 *)v5 + 7)) == 0)
    {
LABEL_10:
      memset(v9, 0, sizeof(v9));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "N-Best list entry contains token where it is UNKNOWN whether the token is personalized or not.");
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
    }
    v7 = *((unsigned __int8 *)a2 + v4 + v6 + 4);
    if (v7 == 2)
      return 1;
    if (!v7)
      goto LABEL_10;
    ++a2;
    v3 -= 4;
    if (!v3)
      return 0;
  }
}

void quasar::rescoring::Featurizer::~Featurizer(char **this)
{
  *this = (char *)&off_1E5CFF308;
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
}

{
  *this = (char *)&off_1E5CFF308;
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  JUMPOUT(0x1AF44D190);
}

void std::vector<quasar::rescoring::FeatureType>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

_QWORD *std::vector<quasar::rescoring::FeatureTransformation>::__init_with_size[abi:ne180100]<quasar::rescoring::FeatureTransformation const*,quasar::rescoring::FeatureTransformation const*>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<quasar::rescoring::FeatureType>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADFB92A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void TaggedNgramStats::TaggedNgramStats(LMStats *a1, Vocab *a2, int a3)
{
  _QWORD *v4;

  NgramCounts<unsigned long>::NgramCounts(a1, a2, a3);
  *v4 = &off_1E5D16AD8;
  v4[22] = a2;
}

uint64_t TaggedNgramStats::incrementTaggedCounts(TaggedNgramStats *this, const unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD v15[50001];
  uint64_t v16;

  v2 = MEMORY[0x1E0C80A78](this, a2);
  v5 = v4;
  v6 = v3;
  v7 = v2;
  v16 = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned int *)(v2 + 156);
  if ((_DWORD)v8)
  {
    v9 = 0;
    while (1)
    {
      v10 = *(_DWORD *)(v3 + 4 * v9);
      if (v10 == -1)
        break;
      v15[v9++] = v10 & 0xFFFFF;
      if (v8 == v9)
      {
        LODWORD(v9) = v8;
        break;
      }
    }
  }
  else
  {
    LODWORD(v9) = 0;
  }
  v15[v9] = -1;
  result = NgramCounts<unsigned long>::incrementCounts(v2, (uint64_t)v15, 1u, v4);
  v12 = *(unsigned int *)(v7 + 156);
  if ((_DWORD)v12)
  {
    v13 = 0;
    do
    {
      v14 = *(_DWORD *)(v6 + 4 * v13);
      if (v14 == -1)
        break;
      if (v14 >> 20)
      {
        v15[v13++] = v14 | 0xFFFFF;
        result = NgramCounts<unsigned long>::incrementCounts(v7, (uint64_t)v15, v13, v5);
        v12 = *(unsigned int *)(v7 + 156);
      }
      else
      {
        ++v13;
      }
    }
    while (v13 < v12);
  }
  return result;
}

uint64_t TaggedNgramStats::countSentence(TaggedNgramStats *this, const unsigned int *a2)
{
  const unsigned int *v2;
  uint64_t v4;
  int v5;
  unsigned int v6;

  v2 = a2;
  if (*a2 == -1)
  {
    v4 = 0;
    v5 = -1;
  }
  else
  {
    LODWORD(v4) = 0;
    do
    {
      TaggedNgramStats::incrementTaggedCounts(this, a2);
      v4 = (v4 + 1);
      a2 = &v2[v4];
    }
    while (*a2 != -1);
    v5 = *v2;
  }
  *((double *)this + 8) = *((double *)this + 8) + (double)v4;
  if (v5 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 104))(*((_QWORD *)this + 22)))
    *((double *)this + 8) = *((double *)this + 8) + -1.0;
  if ((_DWORD)v4)
  {
    v6 = v2[(v4 - 1)];
    if (v6 == *(_DWORD *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 22) + 120))(*((_QWORD *)this + 22)))
      *((double *)this + 8) = *((double *)this + 8) + -1.0;
  }
  *((double *)this + 7) = *((double *)this + 7) + 1.0;
  return v4;
}

{
  return (*(uint64_t (**)(TaggedNgramStats *, const unsigned int *, uint64_t))(*(_QWORD *)this + 136))(this, a2, 1);
}

void TaggedNgramStats::~TaggedNgramStats(TaggedNgramStats *this)
{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
}

{
  *(_QWORD *)this = &unk_1E5D15AB8;
  Trie<unsigned int,unsigned long>::~Trie((char *)this + 160);
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::HmmTopology::NumPdfClasses(kaldi::HmmTopology *this, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int *v7;
  int v8;
  int v9;

  v2 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, a2);
  v3 = v2[1];
  v4 = v3 - *v2;
  if (v3 == *v2)
    return 1;
  v5 = 0;
  v6 = v4 >> 5;
  if (v6 <= 1)
    v6 = 1;
  v7 = (int *)(*v2 + 4);
  do
  {
    if (v5 <= *(v7 - 1))
      v5 = *(v7 - 1);
    v9 = *v7;
    v7 += 8;
    v8 = v9;
    if (v5 <= v9)
      v5 = v8;
    --v6;
  }
  while (v6);
  return (v5 + 1);
}

void kaldi::HmmTopology::Read(std::vector<int> *a1, uint64_t *a2, char a3)
{
  std::vector<int>::value_type v6;
  std::vector<int>::value_type v7;
  std::vector<int> *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int *begin;
  std::vector<int>::pointer end;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v22;
  uint64_t v23;
  int v24;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  int *v36;
  BOOL v37;
  int v38;
  int v39;
  uint64_t *v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  unint64_t v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v62;
  BOOL v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  _QWORD *v68;
  void **v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  unint64_t *v76;
  char *v77;
  char *v78;
  unint64_t v79;
  _QWORD *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  unint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  char *v96;
  unint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  int *v106;
  std::vector<int>::pointer v107;
  uint64_t v108;
  unsigned int *v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  std::vector<int>::pointer v113;
  unint64_t value;
  std::vector<int>::pointer v115;
  int *v116;
  std::vector<int>::pointer v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  int *v123;
  int v124;
  BOOL v125;
  std::vector<int>::pointer v126;
  std::vector<int>::pointer v127;
  int v128;
  int v129;
  _QWORD *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  void *v135;
  uint64_t v136;
  _QWORD *v137;
  void *v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  __int128 *v144;
  uint64_t v145;
  uint64_t *v146;
  std::vector<int> *v147;
  unsigned int v148;
  unsigned int v149;
  int v150;
  void *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  uint64_t v158;
  uint64_t v159;
  void *__p;
  char *v161;
  char *v162;
  std::vector<int>::value_type __x[2];
  unint64_t *v164;
  _QWORD *v165;
  char *v166;
  unint64_t *v167;
  __int128 v168;
  uint64_t v169;

  kaldi::ExpectToken(a2, a3, "<Topology>");
  if ((a3 & 1) != 0)
  {
    kaldi::ReadIntegerVector<int>(a2, 1, a1, 0, 0, 0, 0);
    kaldi::ReadIntegerVector<int>(a2, 1, a1 + 1, 0, 0, 0, 0);
    __x[0] = 0;
    kaldi::ReadBasicType<int>(a2, 1, (uint64_t)__x);
    v6 = __x[0];
    v7 = __x[0];
    if (__x[0] == -1)
    {
      kaldi::ReadBasicType<int>(a2, 1, (uint64_t)__x);
      v7 = __x[0];
    }
    v8 = a1 + 2;
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::resize((uint64_t *)&a1[2], v7);
    if (__x[0] >= 1)
    {
      v9 = 0;
      do
      {
        LODWORD(v168) = 0;
        kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&v168);
        std::vector<kaldi::HmmTopology::HmmState>::resize((uint64_t *)&v8->__begin_[6 * v9], (int)v168);
        if ((int)v168 >= 1)
        {
          v10 = 0;
          do
          {
            kaldi::ReadBasicType<int>(a2, 1, *(_QWORD *)&v8->__begin_[6 * v9] + 32 * v10);
            v11 = (_DWORD *)(*(_QWORD *)&v8->__begin_[6 * v9] + 32 * v10);
            if (v6 == -1)
              kaldi::ReadBasicType<int>(a2, 1, (uint64_t)(v11 + 1));
            else
              v11[1] = *v11;
            LODWORD(__p) = 0;
            kaldi::ReadBasicType<int>(a2, 1, (uint64_t)&__p);
            std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize(*(_QWORD *)&v8->__begin_[6 * v9] + 32 * v10 + 8, (int)__p);
            if ((int)__p >= 1)
            {
              v12 = 0;
              v13 = 0;
              do
              {
                kaldi::ReadBasicType<int>(a2, 1, *(_QWORD *)(*(_QWORD *)&v8->__begin_[6 * v9] + 32 * v10 + 8) + v12);
                kaldi::ReadBasicType<float>(a2, 1, (float *)(*(_QWORD *)(*(_QWORD *)&v8->__begin_[6 * v9] + 32 * v10 + 8) + v12 + 4));
                ++v13;
                v12 += 8;
              }
              while (v13 < (int)__p);
            }
            ++v10;
          }
          while (v10 < (int)v168);
        }
        ++v9;
      }
      while (v9 < __x[0]);
    }
    kaldi::ExpectToken(a2, 1, "</Topology>");
    goto LABEL_241;
  }
  a1->__end_ = a1->__begin_;
  a1[1].__end_ = a1[1].__begin_;
  begin = a1[2].__begin_;
  v146 = (uint64_t *)&a1[2];
  end = a1[2].__end_;
  while (end != begin)
  {
    end -= 6;
    *(_QWORD *)__x = end;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
  }
  a1[2].__end_ = begin;
  v168 = 0uLL;
  v169 = 0;
  v147 = a1 + 1;
  while (2)
  {
    v16 = std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v168);
    if ((*((_BYTE *)v16 + *(_QWORD *)(*v16 - 24) + 32) & 5) == 0)
    {
      if (SHIBYTE(v169) < 0)
      {
        if (*((_QWORD *)&v168 + 1) == 11
          && *(_QWORD *)v168 == 0x6F6C6F706F542F3CLL
          && *(_QWORD *)(v168 + 3) == 0x3E79676F6C6F706FLL)
        {
          break;
        }
        if (*((_QWORD *)&v168 + 1) != 15)
          goto LABEL_279;
        v17 = (uint64_t *)v168;
      }
      else
      {
        if (HIBYTE(v169) != 15)
        {
          if (HIBYTE(v169) != 11
            || ((_QWORD)v168 == 0x6F6C6F706F542F3CLL
              ? (v125 = *(_QWORD *)((char *)&v168 + 3) == 0x3E79676F6C6F706FLL)
              : (v125 = 0),
                !v125))
          {
LABEL_279:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            v143 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, expected </Topology> or <TopologyEntry>, got ", 73);
            if (v169 >= 0)
              v144 = &v168;
            else
              v144 = (__int128 *)v168;
            if (v169 >= 0)
              v145 = HIBYTE(v169);
            else
              v145 = *((_QWORD *)&v168 + 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v143, (uint64_t)v144, v145);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
          break;
        }
        v17 = (uint64_t *)&v168;
      }
      v19 = *v17;
      v20 = *(uint64_t *)((char *)v17 + 7);
      if (v19 != 0x676F6C6F706F543CLL || v20 != 0x3E7972746E457967)
        goto LABEL_279;
      kaldi::ExpectToken(a2, 0, "<ForPhones>");
      __p = 0;
      v161 = 0;
      v162 = 0;
      v157 = 0;
      v158 = 0;
      v159 = 0;
      while (1)
      {
        std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v157);
        if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) != 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, unexpected end of file while expecting phones.", 74);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
        }
        if (SHIBYTE(v159) < 0)
        {
          if (v158 != 12)
            goto LABEL_48;
          v22 = v157;
        }
        else
        {
          if (SHIBYTE(v159) != 12)
            goto LABEL_48;
          v22 = &v157;
        }
        v23 = *(_QWORD *)v22;
        v24 = v22[2];
        if (v23 == 0x6F6850726F462F3CLL && v24 == 1047749998)
          break;
LABEL_48:
        LODWORD(v154) = 0;
        if ((kaldi::ConvertStringToInteger<int>((uint64_t)&v157, &v154) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
          v137 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology object, expected integer, got instead ", 58);
          if (v159 >= 0)
            v138 = &v157;
          else
            v138 = v157;
          if (v159 >= 0)
            v139 = HIBYTE(v159);
          else
            v139 = v158;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v137, (uint64_t)v138, v139);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
        }
        v26 = v161;
        if (v161 >= v162)
        {
          v28 = (char *)__p;
          v29 = (v161 - (_BYTE *)__p) >> 2;
          v30 = v29 + 1;
          if ((unint64_t)(v29 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v31 = v162 - (_BYTE *)__p;
          if ((v162 - (_BYTE *)__p) >> 1 > v30)
            v30 = v31 >> 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
            v32 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v32 = v30;
          if (v32)
          {
            v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v162, v32);
            v28 = (char *)__p;
            v26 = v161;
          }
          else
          {
            v33 = 0;
          }
          v34 = &v33[4 * v29];
          *(_DWORD *)v34 = v154;
          v27 = v34 + 4;
          while (v26 != v28)
          {
            v35 = *((_DWORD *)v26 - 1);
            v26 -= 4;
            *((_DWORD *)v34 - 1) = v35;
            v34 -= 4;
          }
          __p = v34;
          v161 = v27;
          v162 = &v33[4 * v32];
          if (v28)
            operator delete(v28);
        }
        else
        {
          *(_DWORD *)v161 = v154;
          v27 = v26 + 4;
        }
        v161 = v27;
      }
      v154 = 0;
      v155 = 0;
      v156 = 0;
      v151 = 0;
      v152 = 0;
      v153 = 0;
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
LABEL_67:
      if (SHIBYTE(v153) < 0)
      {
        if (v152 != 7)
        {
          if (v152 != 16
            || (*(_QWORD *)v151 == 0x6F6C6F706F542F3CLL
              ? (v37 = *((_QWORD *)v151 + 1) == 0x3E7972746E457967)
              : (v37 = 0),
                !v37))
          {
LABEL_257:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            v134 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Expected </TopologyEntry> or <State>, got instead ", 50);
            if (v153 >= 0)
              v135 = &v151;
            else
              v135 = v151;
            if (v153 >= 0)
              v136 = HIBYTE(v153);
            else
              v136 = v152;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v134, (uint64_t)v135, v136);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
LABEL_198:
          v107 = a1[2].__begin_;
          v106 = a1[2].__end_;
          if (v106 >= a1[2].__end_cap_.__value_)
          {
            v108 = std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__push_back_slow_path<std::vector<kaldi::HmmTopology::HmmState> const&>(v146, &v154);
          }
          else
          {
            std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState> const&>((uint64_t)v146, &v154);
            v108 = (uint64_t)(v106 + 6);
          }
          a1[2].__end_ = (std::vector<int>::pointer)v108;
          v109 = (unsigned int *)__p;
          if (v161 != __p)
          {
            v110 = 0;
            v111 = -1431655765 * ((unint64_t)((char *)v106 - (char *)v107) >> 3);
            do
            {
              v112 = v109[v110];
              v113 = a1[1].__begin_;
              if ((int)v112 >= (int)((unint64_t)((char *)a1[1].__end_ - (char *)v113) >> 2))
              {
                __x[0] = -1;
                std::vector<int>::resize(v147, (int)v112 + 1, __x);
                v113 = v147->__begin_;
              }
              if (v113[v112] != -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Phone with index ", 17);
                v141 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v141, (uint64_t)" appears in multiple topology entries.", 38);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
              }
              v113[v112] = v111;
              v115 = a1->__end_;
              value = (unint64_t)a1->__end_cap_.__value_;
              if ((unint64_t)v115 >= value)
              {
                v117 = a1->__begin_;
                v118 = v115 - a1->__begin_;
                v119 = v118 + 1;
                if ((unint64_t)(v118 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v120 = value - (_QWORD)v117;
                if (v120 >> 1 > v119)
                  v119 = v120 >> 1;
                if ((unint64_t)v120 >= 0x7FFFFFFFFFFFFFFCLL)
                  v121 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v121 = v119;
                if (v121)
                {
                  v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&a1->__end_cap_, v121);
                  v117 = a1->__begin_;
                  v115 = a1->__end_;
                }
                else
                {
                  v122 = 0;
                }
                v123 = (int *)&v122[4 * v118];
                *v123 = v112;
                v116 = v123 + 1;
                while (v115 != v117)
                {
                  v124 = *--v115;
                  *--v123 = v124;
                }
                a1->__begin_ = v123;
                a1->__end_ = v116;
                a1->__end_cap_.__value_ = (int *)&v122[4 * v121];
                if (v117)
                  operator delete(v117);
              }
              else
              {
                *v115 = v112;
                v116 = v115 + 1;
              }
              a1->__end_ = v116;
              ++v110;
              v109 = (unsigned int *)__p;
            }
            while (v110 < (v161 - (_BYTE *)__p) >> 2);
          }
          if (SHIBYTE(v153) < 0)
            operator delete(v151);
          *(_QWORD *)__x = &v154;
          std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100]((void ***)__x);
          if (SHIBYTE(v159) < 0)
            operator delete(v157);
          if (__p)
          {
            v161 = (char *)__p;
            operator delete(__p);
          }
          continue;
        }
        v36 = (int *)v151;
      }
      else
      {
        if (HIBYTE(v153) != 7)
        {
          if (HIBYTE(v153) != 16)
            goto LABEL_257;
          if (v151 != (void *)0x6F6C6F706F542F3CLL || v152 != 0x3E7972746E457967)
            goto LABEL_257;
          goto LABEL_198;
        }
        v36 = (int *)&v151;
      }
      v38 = *v36;
      v39 = *(int *)((char *)v36 + 3);
      if (v38 != 1635013436 || v39 != 1046836321)
        goto LABEL_257;
      v150 = 0;
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v150);
      if (v150 != (((unint64_t)v155 - v154) >> 5))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"States are expected to be in order from zero, expected ", 55);
        v140 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v140, (uint64_t)", got ", 6);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      v149 = -1;
      if (v153 < 0)
      {
        if (v152 != 10
          || (*(_QWORD *)v151 == 0x73616C436664503CLL ? (v42 = *((unsigned __int16 *)v151 + 4) == 15987) : (v42 = 0),
              !v42))
        {
          if (v152 == 17)
          {
            v41 = (uint64_t *)v151;
            goto LABEL_95;
          }
LABEL_109:
          v52 = v155;
          if ((unint64_t)v155 >= v156)
          {
            v54 = ((uint64_t)v155 - v154) >> 5;
            v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v56 = v156 - v154;
            if ((uint64_t)(v156 - v154) >> 4 > v55)
              v55 = v56 >> 4;
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0)
              v57 = 0x7FFFFFFFFFFFFFFLL;
            else
              v57 = v55;
            v167 = &v156;
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v57);
            v59 = (unint64_t *)&v58[32 * v54];
            *(_QWORD *)__x = v58;
            v164 = v59;
            v166 = &v58[32 * v60];
            *v59 = -1;
            v59[1] = 0;
            v59[2] = 0;
            v59[3] = 0;
            v165 = v59 + 4;
            std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
            v53 = v155;
            std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
          }
          else
          {
            v53 = v155 + 4;
            *v155 = -1;
            v52[1] = 0;
            v52[2] = 0;
            v52[3] = 0;
          }
          v155 = v53;
          goto LABEL_119;
        }
      }
      else
      {
        if (HIBYTE(v153) != 10)
        {
          if (HIBYTE(v153) == 17)
          {
            v41 = (uint64_t *)&v151;
LABEL_95:
            v43 = *v41;
            v44 = v41[1];
            v45 = *((unsigned __int8 *)v41 + 16);
            if (v43 == 0x64726177726F463CLL && v44 == 0x7373616C43666450 && v45 == 62)
            {
              v148 = -1;
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v149);
              kaldi::ReadToken(a2, 0, (uint64_t)&v151);
              kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v148);
              v48 = v149 | ((unint64_t)v148 << 32);
              v49 = v155;
              if ((unint64_t)v155 >= v156)
              {
                v85 = ((uint64_t)v155 - v154) >> 5;
                v86 = v85 + 1;
                if ((unint64_t)(v85 + 1) >> 59)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v87 = v156 - v154;
                if ((uint64_t)(v156 - v154) >> 4 > v86)
                  v86 = v87 >> 4;
                if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFE0)
                  v88 = 0x7FFFFFFFFFFFFFFLL;
                else
                  v88 = v86;
                v167 = &v156;
                v89 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v88);
                v90 = (unint64_t *)&v89[32 * v85];
                *(_QWORD *)__x = v89;
                v164 = v90;
                v166 = &v89[32 * v91];
                *v90 = v48;
                v90[1] = 0;
                v90[2] = 0;
                v90[3] = 0;
                v165 = v90 + 4;
                std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
                v50 = v155;
                std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
              }
              else
              {
                v50 = v155 + 4;
                *v155 = v48;
                v49[1] = 0;
                v49[2] = 0;
                v49[3] = 0;
              }
              v155 = v50;
              kaldi::ReadToken(a2, 0, (uint64_t)&v151);
              goto LABEL_119;
            }
          }
          goto LABEL_109;
        }
        if (v151 != (void *)0x73616C436664503CLL || (unsigned __int16)v152 != 15987)
          goto LABEL_109;
      }
      kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v149);
      v82 = v149 | ((unint64_t)v149 << 32);
      v83 = v155;
      if ((unint64_t)v155 >= v156)
      {
        v92 = ((uint64_t)v155 - v154) >> 5;
        v93 = v92 + 1;
        if ((unint64_t)(v92 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v94 = v156 - v154;
        if ((uint64_t)(v156 - v154) >> 4 > v93)
          v93 = v94 >> 4;
        if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFE0)
          v95 = 0x7FFFFFFFFFFFFFFLL;
        else
          v95 = v93;
        v167 = &v156;
        v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v156, v95);
        v97 = (unint64_t *)&v96[32 * v92];
        *(_QWORD *)__x = v96;
        v164 = v97;
        v166 = &v96[32 * v98];
        *v97 = v82;
        v97[1] = 0;
        v97[2] = 0;
        v97[3] = 0;
        v165 = v97 + 4;
        std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(&v154, __x);
        v84 = v155;
        std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)__x);
      }
      else
      {
        v84 = v155 + 4;
        *v155 = v82;
        v83[1] = 0;
        v83[2] = 0;
        v83[3] = 0;
      }
      v155 = v84;
      kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      if (SHIBYTE(v153) < 0)
      {
        if (v152 != 18)
          goto LABEL_119;
        v99 = (uint64_t *)v151;
      }
      else
      {
        if (SHIBYTE(v153) != 18)
          goto LABEL_119;
        v99 = (uint64_t *)&v151;
      }
      v100 = *v99;
      v101 = v99[1];
      v102 = *((unsigned __int16 *)v99 + 8);
      if (v100 == 0x6F6F4C666C65533CLL && v101 == 0x73616C4366645070 && v102 == 15987)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
        v142 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"pdf classes should be defined using <PdfClass> ", 47);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v142, (uint64_t)"or <ForwardPdfClass>/<SelfLoopPdfClass> pair", 44);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
      }
      while (1)
      {
LABEL_119:
        if (SHIBYTE(v153) < 0)
        {
          v62 = v152;
          if (v152 != 12
            || (*(_QWORD *)v151 == 0x7469736E6172543CLL
              ? (v63 = *((unsigned int *)v151 + 2) == 1047424873)
              : (v63 = 0),
                !v63))
          {
            if (v152 != 7)
              goto LABEL_155;
            if (*(_DWORD *)v151 != 1852393020 || *(_DWORD *)((char *)v151 + 3) != 1047290222)
            {
              v62 = v152;
LABEL_155:
              if (v62 == 8)
              {
                v81 = v151;
                goto LABEL_159;
              }
LABEL_249:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
              v131 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"Reading HmmTopology,  unexpected token ", 39);
              if (v153 >= 0)
                v132 = &v151;
              else
                v132 = v151;
              if (v153 >= 0)
                v133 = HIBYTE(v153);
              else
                v133 = v152;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)v132, v133);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
            }
LABEL_248:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__x);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__x, (uint64_t)"You are trying to read old-format topology with new Kaldi.", 58);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__x);
          }
        }
        else
        {
          if (HIBYTE(v153) != 12)
          {
            if (HIBYTE(v153) != 8)
            {
              if (HIBYTE(v153) != 7)
                goto LABEL_249;
              if ((_DWORD)v151 != 1852393020 || *(_DWORD *)((char *)&v151 + 3) != 1047290222)
                goto LABEL_249;
              goto LABEL_248;
            }
            v81 = &v151;
LABEL_159:
            if (*v81 != 0x3E65746174532F3CLL)
              goto LABEL_249;
            kaldi::ReadToken(a2, 0, (uint64_t)&v151);
            goto LABEL_67;
          }
          if (v151 != (void *)0x7469736E6172543CLL || v152 != 1047424873)
            goto LABEL_249;
        }
        __x[0] = 0;
        v148 = 0;
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)__x);
        kaldi::ReadBasicType<float>(a2, 0, (float *)&v148);
        v64 = v155;
        v65 = __x[0] | ((unint64_t)v148 << 32);
        v66 = (unint64_t *)*(v155 - 2);
        v67 = *(v155 - 1);
        if ((unint64_t)v66 >= v67)
        {
          v69 = (void **)(v155 - 3);
          v70 = *(v155 - 3);
          v71 = ((uint64_t)v66 - v70) >> 3;
          if ((unint64_t)(v71 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v72 = v67 - v70;
          v73 = v72 >> 2;
          if (v72 >> 2 <= (unint64_t)(v71 + 1))
            v73 = v71 + 1;
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8)
            v74 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v74 = v73;
          if (v74)
            v75 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v155 - 1), v74);
          else
            v75 = 0;
          v76 = (unint64_t *)&v75[8 * v71];
          *v76 = v65;
          v68 = v76 + 1;
          v78 = (char *)*(v64 - 3);
          v77 = (char *)*(v64 - 2);
          if (v77 != v78)
          {
            do
            {
              v79 = *((_QWORD *)v77 - 1);
              v77 -= 8;
              *--v76 = v79;
            }
            while (v77 != v78);
            v77 = (char *)*v69;
          }
          *(v64 - 3) = (unint64_t)v76;
          *(v64 - 2) = (unint64_t)v68;
          *(v64 - 1) = (unint64_t)&v75[8 * v74];
          if (v77)
            operator delete(v77);
        }
        else
        {
          *v66 = v65;
          v68 = v66 + 1;
        }
        *(v64 - 2) = (unint64_t)v68;
        kaldi::ReadToken(a2, 0, (uint64_t)&v151);
      }
    }
    break;
  }
  std::__sort<std::__less<int,int> &,int *>();
  v126 = a1->__end_;
  if (a1->__begin_ != v126)
  {
    v127 = a1->__begin_ + 1;
    do
    {
      if (v127 == v126)
        break;
      v129 = *(v127 - 1);
      v128 = *v127++;
    }
    while (v128 > v129);
  }
  if (SHIBYTE(v169) < 0)
    operator delete((void *)v168);
LABEL_241:
  kaldi::HmmTopology::Check((kaldi::HmmTopology *)a1);
}

void sub_1ADFBA760(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v3;
  char v4;
  void *v5[5];
  char v6;
  void *v7;
  void *v8;

  if (v4 < 0)
    operator delete(v3);
  v3 = v5;
  std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (v6 < 0)
    operator delete(v5[3]);
  if (v7)
  {
    v8 = v7;
    operator delete(v7);
  }
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<kaldi::HmmTopology::HmmState>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      while (v3 != v5)
      {
        v6 = *(void **)(v3 - 24);
        if (v6)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 -= 32;
      }
      a1[1] = v5;
    }
  }
  else
  {
    std::vector<kaldi::HmmTopology::HmmState>::__append(a1, a2 - v4);
  }
}

void kaldi::HmmTopology::Check(kaldi::HmmTopology *this)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  int v26;
  int *v27;
  char *v28;
  int *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  int *v36;
  int v37;
  int *v38;
  int *v39;
  int *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  int *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  float v51;
  float v52;
  int v53;
  _QWORD *i;
  int v55;
  uint64_t v56;
  _QWORD *v58;
  unint64_t v59;
  int *v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t *v65;
  _QWORD *v66[2];
  void *__p;
  char *v68;
  unint64_t v69;
  void *v70;
  void *v71;
  _QWORD v72[35];

  v1 = *((_QWORD *)this + 6);
  v2 = *((_QWORD *)this + 7);
  if (v1 == v2 || *(_QWORD *)this == *((_QWORD *)this + 1) || *((_QWORD *)this + 3) == *((_QWORD *)this + 4))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v72, "HmmTopology::Check(), empty object.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
  }
  LOBYTE(v72[0]) = 0;
  std::vector<BOOL>::vector(&v71, 0xAAAAAAAAAAAAAAABLL * ((v2 - v1) >> 3), (unsigned __int8 *)v72);
  v4 = *(int **)this;
  v5 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (v5)
  {
    v6 = v5 >> 2;
    v7 = *((_QWORD *)this + 3);
    v8 = (*((_QWORD *)this + 4) - v7) >> 2;
    v9 = (char *)v71;
    if (v6 <= 1)
      v10 = 1;
    else
      v10 = v6;
    do
    {
      v12 = *v4++;
      v11 = v12;
      if (v8 <= v12
        || (v13 = *(int *)(v7 + 4 * v11),
            v14 = *((_QWORD *)this + 6),
            v15 = *((_QWORD *)this + 7),
            0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) <= v13))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), phone has no valid index.", 47);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      *(_QWORD *)&v9[(v13 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v13;
      --v10;
    }
    while (v10);
  }
  else
  {
    v14 = *((_QWORD *)this + 6);
    v15 = *((_QWORD *)this + 7);
  }
  if (v15 != v14)
  {
    v16 = 0;
    do
    {
      if (((*(_QWORD *)((char *)v71 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), entry with no corresponding phones.", 57);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      v18 = (uint64_t *)(v14 + 24 * v16);
      v17 = *v18;
      v19 = v18[1] - *v18;
      v20 = v19 >> 5;
      v21 = (v19 >> 5) - 1;
      if ((int)(v19 >> 5) <= 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), cannot only have one state (i.e., must have at least one emitting state).", 95);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      if (*(_QWORD *)(v17 + 32 * v21 + 8) != *(_QWORD *)(v17 + 32 * v21 + 16))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), last state must have no transitions.", 58);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      if (*(_DWORD *)(v17 + 32 * v21) != -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), last state must not be emitting.", 54);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      v22 = (v19 >> 5);
      LOBYTE(v72[0]) = 0;
      std::vector<BOOL>::vector(&v70, v22, (unsigned __int8 *)v72);
      v23 = 0;
      __p = 0;
      v68 = 0;
      v63 = (int)((uint64_t)v19 >> 5);
      v69 = 0;
      v62 = v22;
      do
      {
        v24 = *((_QWORD *)this + 6);
        v25 = (int *)(*(_QWORD *)(v24 + 24 * v16) + 32 * v23);
        v26 = *v25;
        if (*v25 != -1)
        {
          v28 = v68;
          v27 = (int *)v69;
          if ((unint64_t)v68 >= v69)
          {
            v30 = (char *)__p;
            v31 = (v68 - (_BYTE *)__p) >> 2;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 62)
              goto LABEL_98;
            v33 = v69 - (_QWORD)__p;
            if ((uint64_t)(v69 - (_QWORD)__p) >> 1 > v32)
              v32 = v33 >> 1;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
              v34 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            if (v34)
            {
              v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69, v34);
              v30 = (char *)__p;
              v28 = v68;
              v26 = *v25;
            }
            else
            {
              v35 = 0;
            }
            v36 = (int *)&v35[4 * v31];
            *v36 = v26;
            v29 = v36 + 1;
            if (v28 == v30)
            {
              v22 = v62;
            }
            else
            {
              v22 = v62;
              do
              {
                v37 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *--v36 = v37;
              }
              while (v28 != v30);
            }
            v27 = (int *)&v35[4 * v34];
            __p = v36;
            v68 = (char *)v29;
            v69 = (unint64_t)v27;
            if (v30)
            {
              operator delete(v30);
              v27 = (int *)v69;
            }
          }
          else
          {
            *(_DWORD *)v68 = v26;
            v29 = (int *)(v28 + 4);
          }
          v68 = (char *)v29;
          v38 = (int *)(*(_QWORD *)(*((_QWORD *)this + 6) + 24 * v16) + 32 * v23 + 4);
          if (v29 >= v27)
          {
            v40 = (int *)__p;
            v41 = ((char *)v29 - (_BYTE *)__p) >> 2;
            v42 = v41 + 1;
            if ((unint64_t)(v41 + 1) >> 62)
LABEL_98:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v43 = (char *)v27 - (_BYTE *)__p;
            if (v43 >> 1 > v42)
              v42 = v43 >> 1;
            if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
              v44 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v44 = v42;
            if (v44)
            {
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v69, v44);
              v40 = (int *)__p;
              v29 = (int *)v68;
            }
            else
            {
              v45 = 0;
            }
            v46 = (int *)&v45[4 * v41];
            *v46 = *v38;
            v39 = v46 + 1;
            if (v29 == v40)
            {
              v22 = v62;
            }
            else
            {
              v22 = v62;
              do
              {
                v47 = *--v29;
                *--v46 = v47;
              }
              while (v29 != v40);
            }
            __p = v46;
            v68 = (char *)v39;
            v69 = (unint64_t)&v45[4 * v44];
            if (v40)
              operator delete(v40);
          }
          else
          {
            *v29 = *v38;
            v39 = v29 + 1;
          }
          v68 = (char *)v39;
          v24 = *((_QWORD *)this + 6);
        }
        v66[0] = 0;
        v66[1] = 0;
        v65 = (uint64_t *)v66;
        v48 = *(_QWORD *)(v24 + 24 * v16);
        v49 = *(_QWORD *)(v48 + 32 * v23 + 8);
        if (*(_QWORD *)(v48 + 32 * v23 + 16) == v49)
        {
          v51 = 0.0;
        }
        else
        {
          v50 = 0;
          v51 = 0.0;
          do
          {
            v52 = *(float *)(v49 + 8 * v50 + 4);
            if (v52 <= 0.0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), negative or zero transition prob.", 55);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            v64 = 0;
            v53 = *(_DWORD *)(v49 + 8 * v50);
            v64 = v53;
            if (v53 == (_DWORD)v21 && *(_DWORD *)(v48 + 32 * v23) == -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"We do not allow any state to be nonemitting and have a transition to the final-state (this would stop the SplitToPhones function from identifying the last state of a phone.", 172);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            if (v53 < 0 || v53 >= (int)v20)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), invalid dest state ", 41);
              std::ostream::operator<<();
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
            }
            for (i = v66[0]; i; i = (_QWORD *)*i)
            {
              v55 = *((_DWORD *)i + 7);
              if (v53 >= v55)
              {
                if (v55 >= v53)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), duplicate transition found.", 49);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
                }
                ++i;
              }
            }
            std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v65, &v64, &v64);
            v51 = v51 + v52;
            *(_QWORD *)((char *)v70 + (((unint64_t)v64 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v64;
            v48 = *(_QWORD *)(*((_QWORD *)this + 6) + 24 * v16);
            ++v50;
            v49 = *(_QWORD *)(v48 + 32 * v23 + 8);
          }
          while (v50 < (*(_QWORD *)(v48 + 32 * v23 + 16) - v49) >> 3);
        }
        v56 = v23 + 1;
        if (v23 + 1 < v63 && fabs(v51 + -1.0) > 0.01 && kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Total probability for state ", 28);
          v58 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in topology entry is ", 22);
          std::ostream::operator<<();
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        }
        std::__tree<int>::destroy((uint64_t)&v65, v66[0]);
        ++v23;
      }
      while (v56 != v22);
      v59 = 1;
      do
      {
        if (((*(_QWORD *)((char *)v70 + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v59) & 1) == 0)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check, state ", 26);
          v61 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" has no input transitions.", 26);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
        }
        ++v59;
      }
      while (v22 != v59);
      std::__sort<std::__less<int,int> &,int *>();
      v60 = std::__unique[abi:ne180100]<std::_ClassicAlgPolicy,std::__wrap_iter<int *>,std::__wrap_iter<int *>,std::__equal_to &>((int *)__p, (int *)v68);
      if (v68 != (char *)v60)
        v68 = (char *)v60;
      if (*(_DWORD *)__p || *(v60 - 1) != ((unint64_t)((char *)v60 - (_BYTE *)__p) >> 2) - 1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"HmmTopology::Check(), pdf_classes are expected to be contiguous and start from zero.", 84);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      v68 = (char *)__p;
      operator delete(__p);
      if (v70)
        operator delete(v70);
      ++v16;
      v14 = *((_QWORD *)this + 6);
    }
    while (v16 < 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 7) - v14) >> 3));
  }
  if (v71)
    operator delete(v71);
}

uint64_t kaldi::HmmTopology::TopologyForPhone(kaldi::HmmTopology *this, int a2)
{
  uint64_t v2;
  int v3;
  _QWORD *v5;
  _QWORD v6[34];

  v2 = *((_QWORD *)this + 3);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 4) - v2) >> 2) || (v3 = *(_DWORD *)(v2 + 4 * a2), v3 == -1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"TopologyForPhone(), phone ", 26);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " not covered.");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return *((_QWORD *)this + 6) + 24 * v3;
}

uint64_t kaldi::HmmTopology::MinLength(kaldi::HmmTopology *this, int a2)
{
  _QWORD *v2;
  std::vector<int>::size_type v3;
  _DWORD *v4;
  int *begin;
  std::vector<int>::pointer end;
  uint64_t v7;
  char v8;
  uint64_t v9;
  _DWORD *v10;
  int *v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::vector<int>::value_type __x;
  std::vector<int> v18;

  v2 = (_QWORD *)kaldi::HmmTopology::TopologyForPhone(this, a2);
  v3 = (uint64_t)(v2[1] - *v2) >> 5;
  __x = 0x7FFFFFFF;
  std::vector<int>::vector(&v18, v3, &__x);
  v4 = (_DWORD *)*v2;
  begin = v18.__begin_;
  *v18.__begin_ = *(_DWORD *)*v2 != -1;
  end = v18.__end_;
  if ((int)((unint64_t)((char *)v18.__end_ - (char *)begin) >> 2) >= 1)
  {
    v7 = 0;
    v8 = 0;
    v9 = ((unint64_t)((char *)v18.__end_ - (char *)begin) >> 2);
    while (1)
    {
      do
      {
        v10 = &v4[8 * v7];
        v11 = (int *)*((_QWORD *)v10 + 1);
        v12 = (int *)*((_QWORD *)v10 + 2);
        while (v11 != v12)
        {
          v13 = *v11;
          v14 = begin[v7];
          if (v4[8 * v13] != -1)
            ++v14;
          if (v14 < begin[v13])
          {
            begin[v13] = v14;
            if (v7 > v13)
              v8 = 1;
          }
          v11 += 2;
        }
        ++v7;
      }
      while (v7 != v9);
      if ((v8 & 1) == 0)
        break;
      v7 = 0;
      v8 = 0;
    }
  }
  v15 = *(end - 1);
  v18.__end_ = begin;
  operator delete(begin);
  return v15;
}

uint64_t std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_QWORD *)(a3 - 32);
      a3 -= 32;
      *(_QWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::HmmTopology::HmmState>,std::reverse_iterator<kaldi::HmmTopology::HmmState*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>,std::reverse_iterator<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__construct_one_at_end[abi:ne180100]<std::vector<kaldi::HmmTopology::HmmState> const&>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(v3, *a2, a2[1], (a2[1] - *a2) >> 5);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1ADFBB4B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__push_back_slow_path<std::vector<kaldi::HmmTopology::HmmState> const&>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<kaldi::HmmTopology::HmmState>::__init_with_size[abi:ne180100]<kaldi::HmmTopology::HmmState*,kaldi::HmmTopology::HmmState*>(v11, *a2, a2[1], (a2[1] - *a2) >> 5);
  v15 += 24;
  std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(v14);
  return v12;
}

void sub_1ADFBB5B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::HmmTopology::HmmState>>,std::reverse_iterator<std::vector<kaldi::HmmTopology::HmmState>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<kaldi::HmmTopology::HmmState>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer(&v15);
  }
}

void sub_1ADFBB92C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::HmmTopology::HmmState>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::HmmTopology::HmmState>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  char *v16;
  _QWORD v17[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if (a2 <= (v6 - (uint64_t)v7) >> 5)
  {
    if (a2)
    {
      v14 = &v7[4 * a2];
      do
      {
        *v7 = -1;
        v7[2] = 0;
        v7[3] = 0;
        v7[1] = 0;
        v7 += 4;
      }
      while (v7 != v14);
      v7 = v14;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = (uint64_t)v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v17[4] = result;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    else
      v13 = 0;
    v15 = &v13[32 * v10];
    v17[0] = v13;
    v17[1] = v15;
    v17[3] = &v13[32 * v12];
    v16 = &v15[32 * a2];
    do
    {
      *(_QWORD *)v15 = -1;
      *((_QWORD *)v15 + 2) = 0;
      *((_QWORD *)v15 + 3) = 0;
      *((_QWORD *)v15 + 1) = 0;
      v15 += 32;
    }
    while (v15 != v16);
    v17[2] = v16;
    std::vector<kaldi::HmmTopology::HmmState>::__swap_out_circular_buffer(a1, v17);
    return std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)v17);
  }
  return result;
}

void sub_1ADFBBA50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADFBBAE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADFBBBBC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t quasar::LRStreamingConfidence::LRStreamingConfidence(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  *(_QWORD *)a1 = &off_1E5D384E8;
  quasar::StreamingConfidence::create_featureMap(a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_DWORD *)(a1 + 80) = 1065353216;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 1065353216;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  quasar::LRStreamingConfidence::loadConfModelFile(a1, a2);
  quasar::LRStreamingConfidence::loadNormalizationStats(a1, a3);
  v6 = a1 + 64;
  while (1)
  {
    v6 = *(_QWORD *)v6;
    if (!v6)
      break;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 88), (int *)(v6 + 16)))
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"feature index=", 14);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" is in models file but missing in normstats file.", 49);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
    }
  }
  v8 = a1 + 104;
  while (1)
  {
    v8 = *(_QWORD *)v8;
    if (!v8)
      break;
    if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)(a1 + 48), (int *)(v8 + 16)))
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"feature index=", 14);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" is in normstats file but missing in model file.", 48);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v11);
    }
  }
  return a1;
}

void sub_1ADFBBE2C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v3);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void quasar::StreamingConfidence::create_featureMap(uint64_t a1@<X8>)
{
  void *__p[2];
  char v4;
  void **v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  std::string::basic_string[abi:ne180100]<0>(__p, "ind");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isfirst");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 1;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isinside");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 2;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_active");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 3;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_bestcost");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 4;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "avg_epsilenceframes");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 5;
  if (v4 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "num_frames");
  v5 = __p;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,float>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,float>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,float>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,float>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a1, (unsigned __int8 *)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v5)+ 10) = 6;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1ADFBC09C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v15);
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::loadConfModelFile(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v4;
  std::locale::id *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  uint64_t v10;
  const char *v11;
  double v12;
  float v13;
  char v14;
  std::string *v15;
  std::string::size_type v16;
  int v17;
  _QWORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  std::string *v29;
  std::string::size_type size;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  std::string v39;
  std::locale v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  std::string v60;
  _BYTE v61[14];
  char v62;
  std::string *v63;

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v40, "Confidence model file cannot be empty. Missing configuration parameter confidence-model-file");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  v62 = 0;
  kaldi::Input::Input(v61, a2, &v62);
  v4 = 0;
  memset(&v60, 0, sizeof(v60));
  v5 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v6 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v61);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet(v40, v5);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(v40);
    v9 = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v60, v8);
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    v57 = 0;
    v58 = 0;
    v59 = 0;
    kaldi::SplitStringToVector(&v60, " ", 1, (uint64_t)&v57);
    v10 = v57;
    if (v58 - v57 != 48)
    {
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      *(_OWORD *)&v40[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Invalid line in file=", 21);
      v24 = *(char *)(a2 + 23);
      if (v24 >= 0)
        v25 = a2;
      else
        v25 = *(_QWORD *)a2;
      if (v24 >= 0)
        v26 = *(unsigned __int8 *)(a2 + 23);
      else
        v26 = *(_QWORD *)(a2 + 8);
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" line=", 6);
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v60;
      else
        v29 = (std::string *)v60.__r_.__value_.__r.__words[0];
      if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
      else
        size = v60.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, size);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    v11 = (const char *)v57;
    if (*(char *)(v57 + 23) < 0)
      v11 = *(const char **)v57;
    v12 = atof(v11);
    if (*(char *)(v10 + 47) < 0)
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)(v10 + 24), *(_QWORD *)(v10 + 32));
    else
      v39 = *(std::string *)(v10 + 24);
    v13 = v12;
    if (std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)(a1 + 8), (unsigned __int8 *)&v39))
    {
      v63 = &v39;
      LODWORD(v40[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, (unsigned __int8 *)&v39, (uint64_t)&std::piecewise_construct, (__int128 **)&v63)+ 10);
      *((float *)&v40[0].__locale_ + 1) = v13;
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(a1 + 48, (int *)v40, v40);
      if ((*((_BYTE *)&v39.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_15;
LABEL_14:
      operator delete(v39.__r_.__value_.__l.__data_);
      goto LABEL_15;
    }
    v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v39.__r_.__value_.__l.__size_ != 9)
        goto LABEL_53;
      v15 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) != 9)
        goto LABEL_53;
      v15 = &v39;
    }
    v16 = v15->__r_.__value_.__r.__words[0];
    v17 = v15->__r_.__value_.__s.__data_[8];
    if (v16 != 0x5045435245544E49 || v17 != 84)
    {
LABEL_53:
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      *(_OWORD *)&v40[0].__locale_ = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
      v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Did not find feature=", 21);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = &v39;
      else
        v32 = (std::string *)v39.__r_.__value_.__r.__words[0];
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v33 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      else
        v33 = v39.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
    }
    *(double *)(a1 + 168) = v13;
    v4 = 1;
    if (v14 < 0)
      goto LABEL_14;
LABEL_15:
    v40[0].__locale_ = (std::locale::__imp *)&v57;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v40);
  }
  if (((*(_QWORD *)(a1 + 72) != 0) & v4) == 0)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"At least one feature weight and Intercept is needed in model file=", 66);
    v35 = *(char *)(a2 + 23);
    if (v35 >= 0)
      v36 = a2;
    else
      v36 = *(_QWORD *)a2;
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a2 + 23);
    else
      v37 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v40);
  }
  if (quasar::gLogLevel >= 4)
  {
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    *(_OWORD *)&v40[0].__locale_ = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v40);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"Successfully loaded streaming confidence model file=", 52);
    v20 = *(char *)(a2 + 23);
    if (v20 >= 0)
      v21 = a2;
    else
      v21 = *(_QWORD *)a2;
    if (v20 >= 0)
      v22 = *(unsigned __int8 *)(a2 + 23);
    else
      v22 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v21, v22);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v40);
  }
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v61);
}

void sub_1ADFBC60C()
{
  JUMPOUT(0x1ADFBC62CLL);
}

void sub_1ADFBC618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void **a18)
{
  uint64_t v18;

  if (a16 < 0)
    operator delete(__p);
  a18 = (void **)(v18 - 176);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (*(char *)(v18 - 129) < 0)
    operator delete(*(void **)(v18 - 152));
  kaldi::Input::~Input((kaldi::Input *)(v18 - 128));
  _Unwind_Resume(a1);
}

void sub_1ADFBC640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::locale a15)
{
  uint64_t v15;

  std::locale::~locale(&a15);
  if (*(char *)(v15 - 129) < 0)
    operator delete(*(void **)(v15 - 152));
  kaldi::Input::~Input((kaldi::Input *)(v15 - 128));
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::loadNormalizationStats(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  kaldi::Input *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  const std::locale::facet *v13;
  unsigned __int8 v14;
  std::string::size_type size;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void **v38;
  uint64_t v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  std::string *v44;
  std::string::size_type v45;
  void *__p;
  _BYTE *v47;
  uint64_t v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::locale v55[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  void **v72;
  uint64_t v73;
  uint64_t v74;
  void **v75;
  uint64_t v76;
  uint64_t v77;
  std::string v78;
  _BYTE v79[14];
  char v80;
  __int128 *v81[3];

  v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, "Confidence normalization stats file cannot be empty. Missing configuration parameter norm-stats-file");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  v80 = 0;
  v5 = (kaldi::Input *)kaldi::Input::Input(v79, a2, &v80);
  memset(&v78, 0, sizeof(v78));
  v6 = (_QWORD *)kaldi::Input::Stream(v5);
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet(v55, MEMORY[0x1E0DE4A90]);
  v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v6, (uint64_t)&v78, v8);
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v9 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v79);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet(v55, MEMORY[0x1E0DE4A90]);
  v11 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, (uint64_t)&v75, v11);
  v72 = 0;
  v73 = 0;
  v74 = 0;
  v12 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)v79);
  std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  v13 = std::locale::use_facet(v55, MEMORY[0x1E0DE4A90]);
  v14 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
  std::locale::~locale(v55);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)&v72, v14);
  size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
  if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v78.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_55;
  v16 = HIBYTE(v77);
  if (v77 < 0)
    v16 = v76;
  if (!v16)
    goto LABEL_55;
  v17 = HIBYTE(v74);
  if (v74 < 0)
    v17 = v73;
  if (!v17)
  {
LABEL_55:
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Normalization statistics is not in the correct format", 53);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  kaldi::SplitStringToVector(&v78, ",", 1, (uint64_t)&v52);
  if (v53 != v52 && 0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != *(_QWORD *)(a1 + 72))
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Number of features does not match with model file, ", 51);
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v44 = &v78;
    else
      v44 = (std::string *)v78.__r_.__value_.__r.__words[0];
    if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v45 = HIBYTE(v78.__r_.__value_.__r.__words[2]);
    else
      v45 = v78.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  v49 = 0;
  v50 = 0;
  v51 = 0;
  kaldi::SplitStringToFloats<float>((uint64_t)&v75, ",", 1, &v49);
  if (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != (v50 - (_BYTE *)v49) >> 2)
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Incorrect number of feature means, ", 35);
    if (v77 >= 0)
      v38 = (void **)&v75;
    else
      v38 = v75;
    if (v77 >= 0)
      v39 = HIBYTE(v77);
    else
      v39 = v76;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)v38, v39);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  __p = 0;
  v47 = 0;
  v48 = 0;
  kaldi::SplitStringToFloats<float>((uint64_t)&v72, ",", 1, &__p);
  v18 = v52;
  if (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) != (v47 - (_BYTE *)__p) >> 2)
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Incorrect number of feature stddevs, ", 37);
    if (v74 >= 0)
      v41 = (void **)&v72;
    else
      v41 = v72;
    if (v74 >= 0)
      v42 = HIBYTE(v74);
    else
      v42 = v73;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
  }
  if (v53 != v52)
  {
    v19 = 0;
    v20 = 0;
    v21 = (_QWORD *)(a1 + 8);
    v22 = a1 + 88;
    v23 = a1 + 128;
    do
    {
      if (!std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v21, (unsigned __int8 *)(v18 + v19)))
      {
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v59 = 0u;
        v57 = 0u;
        v58 = 0u;
        *(_OWORD *)&v55[0].__locale_ = 0u;
        v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Unknown feature=", 16);
        v29 = *(char *)(v18 + v19 + 23);
        if (v29 >= 0)
          v30 = v18 + v19;
        else
          v30 = *(_QWORD *)(v18 + v19);
        if (v29 >= 0)
          v31 = *(unsigned __int8 *)(v18 + v19 + 23);
        else
          v31 = *(_QWORD *)(v18 + v19 + 8);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" in normalization statistics file", 33);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
      }
      v81[0] = (__int128 *)(v18 + v19);
      LODWORD(v55[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (unsigned __int8 *)(v18 + v19), (uint64_t)&std::piecewise_construct, v81)+ 10);
      HIDWORD(v55[0].__locale_) = *((_DWORD *)v49 + v20);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(v22, (int *)v55, v55);
      if (*((float *)__p + v20) == 0.0)
      {
        v70 = 0u;
        v71 = 0u;
        v68 = 0u;
        v69 = 0u;
        v66 = 0u;
        v67 = 0u;
        v64 = 0u;
        v65 = 0u;
        v62 = 0u;
        v63 = 0u;
        v60 = 0u;
        v61 = 0u;
        v59 = 0u;
        v57 = 0u;
        v58 = 0u;
        *(_OWORD *)&v55[0].__locale_ = 0u;
        v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Standard deviation is 0 for feature=", 36);
        v34 = *(char *)(v18 + v19 + 23);
        if (v34 >= 0)
          v35 = v18 + v19;
        else
          v35 = *(_QWORD *)(v18 + v19);
        if (v34 >= 0)
          v36 = *(unsigned __int8 *)(v18 + v19 + 23);
        else
          v36 = *(_QWORD *)(v18 + v19 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v55);
      }
      v81[0] = (__int128 *)(v18 + v19);
      LODWORD(v55[0].__locale_) = *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v21, (unsigned __int8 *)(v18 + v19), (uint64_t)&std::piecewise_construct, v81)+ 10);
      HIDWORD(v55[0].__locale_) = *((_DWORD *)__p + v20);
      std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(v23, (int *)v55, v55);
      ++v20;
      v18 = v52;
      v19 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v53 - v52) >> 3) > v20);
  }
  if (quasar::gLogLevel > 3)
  {
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v59 = 0u;
    v57 = 0u;
    v58 = 0u;
    *(_OWORD *)&v55[0].__locale_ = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Successfully loaded streaming confidence normalization stats file=", 66);
    v25 = *(char *)(a2 + 23);
    if (v25 >= 0)
      v26 = a2;
    else
      v26 = *(_QWORD *)a2;
    if (v25 >= 0)
      v27 = *(unsigned __int8 *)(a2 + 23);
    else
      v27 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v55);
  }
  if (__p)
  {
    v47 = __p;
    operator delete(__p);
  }
  if (v49)
  {
    v50 = v49;
    operator delete(v49);
  }
  v55[0].__locale_ = (std::locale::__imp *)&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v55);
  if (SHIBYTE(v74) < 0)
    operator delete(v72);
  if (SHIBYTE(v77) < 0)
    operator delete(v75);
  if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v78.__r_.__value_.__l.__data_);
  kaldi::Input::~Input((kaldi::Input *)v79);
}

void sub_1ADFBCEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  uint64_t v19;

  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  a19 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  if (*(char *)(v19 - 169) < 0)
    operator delete(*(void **)(v19 - 192));
  if (*(char *)(v19 - 145) < 0)
    operator delete(*(void **)(v19 - 168));
  if (*(char *)(v19 - 121) < 0)
    operator delete(*(void **)(v19 - 144));
  kaldi::Input::~Input((kaldi::Input *)(v19 - 120));
  _Unwind_Resume(a1);
}

double quasar::LRStreamingConfidence::computeStreamingConfidence(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;
  unsigned __int8 *v4;
  uint64_t v5;
  double v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  float v10;
  _QWORD *v11;
  _QWORD *v12;
  double v13;
  float v14;
  long double v15;
  double v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  void *__p[2];
  unsigned __int8 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[2];
  _QWORD v45[11];
  char v46;
  uint64_t v47;
  _QWORD v48[4];
  int v49;

  memset(v48, 0, sizeof(v48));
  v49 = 1065353216;
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
  {
    *(_QWORD *)&v27 = i + 16;
    v4 = std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 8, i + 16, (uint64_t)&std::piecewise_construct, (__int128 **)&v27);
    v5 = *((_QWORD *)i + 5);
    v44[0] = *((unsigned int *)v4 + 10);
    v44[1] = v5;
    std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int,double>>((uint64_t)v48, (int *)v44, (uint64_t)v44);
  }
  v6 = *(double *)(a1 + 168);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v44);
  v7 = *(uint64_t **)(a1 + 64);
  if (v7)
  {
    v8 = (_QWORD *)(a1 + 88);
    v9 = (_QWORD *)(a1 + 128);
    while (1)
    {
      LODWORD(__p[0]) = *((_DWORD *)v7 + 4);
      v10 = *((float *)v7 + 5);
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v48, (int *)__p))
        break;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" feature[", 9);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"] = ", 4);
      *(_QWORD *)&v27 = __p;
      std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v48, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27);
      v12 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" ", 1);
      if (!std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v8, (int *)__p)
        || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v9, (int *)__p))
      {
        if (quasar::gLogLevel >= 2)
        {
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          v34 = 0u;
          v35 = 0u;
          v32 = 0u;
          v33 = 0u;
          v30 = 0u;
          v31 = 0u;
          v28 = 0u;
          v29 = 0u;
          v27 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Missing feature index=", 22);
          v21 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" in means or stddev stats", 25);
          quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
        }
        goto LABEL_24;
      }
      *(_QWORD *)&v27 = __p;
      if (*((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v9, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5) == 0.0)goto LABEL_24;
      *(_QWORD *)&v27 = __p;
      v13 = *((double *)std::__hash_table<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::__unordered_map_hasher<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v48, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 3);
      *(_QWORD *)&v27 = __p;
      v14 = *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v8, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5);
      *(_QWORD *)&v27 = __p;
      v6 = v6
         + v10
         * ((v13 - v14)
          / *((float *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v9, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v27)+ 5));
      v7 = (uint64_t *)*v7;
      if (!v7)
        goto LABEL_10;
    }
    if (quasar::gLogLevel >= 2)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Missing feature index=", 22);
      v22 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" in input features", 18);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v27);
    }
LABEL_24:
    v16 = 0.0;
  }
  else
  {
LABEL_10:
    v15 = exp(v6);
    v16 = v15 / (v15 + 1.0);
    if (quasar::gLogLevel >= 4)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v27 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v27);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v27, (uint64_t)"Evaluated features=", 19);
      std::stringbuf::str();
      if ((v26 & 0x80u) == 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((v26 & 0x80u) == 0)
        v19 = v26;
      else
        v19 = (uint64_t)__p[1];
      v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v18, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", confidence=", 13);
      std::ostream::operator<<();
      if ((char)v26 < 0)
        operator delete(__p[0]);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v27);
    }
  }
  v44[0] = *MEMORY[0x1E0DE4F50];
  v23 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v45[0] = v23;
  v45[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v46 < 0)
    operator delete((void *)v45[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v47);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v48);
  return v16;
}

void sub_1ADFBD3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a51);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v51 - 176);
  _Unwind_Resume(a1);
}

uint64_t quasar::StreamingConfidenceRunner::StreamingConfidenceRunner(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_DWORD *)(a1 + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 24), "");
  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_1ADFBD4A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

double quasar::StreamingConfidenceRunner::compute(uint64_t a1, std::string *__str, int a3, int a4, double a5)
{
  _QWORD *v7;
  double v8;
  double v9;
  double v10;
  int v11;
  std::string *v12;
  uint64_t v13;
  std::string::size_type size;
  std::string::size_type v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  std::string *i;
  double v20;
  _BOOL8 v21;
  _BOOL8 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  const char *v28;
  double v29;
  _OWORD v30[2];
  int v31;

  v7 = (_QWORD *)(a1 + 56);
  v8 = *(double *)(a1 + 56) + (double)a3;
  v9 = *(double *)(a1 + 64);
  v10 = *(double *)(a1 + 72);
  v11 = *(_DWORD *)(a1 + 48);
  *(_DWORD *)(a1 + 48) = v11 + 1;
  *(double *)(a1 + 56) = v8;
  *(double *)(a1 + 64) = v9 + a5;
  *(double *)(a1 + 72) = v10 + (double)a4;
  v12 = (std::string *)(a1 + 24);
  v13 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  size = __str->__r_.__value_.__l.__size_;
  if ((v13 & 0x80u) == 0)
    v15 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  else
    v15 = __str->__r_.__value_.__l.__size_;
  v16 = *(unsigned __int8 *)(a1 + 47);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a1 + 32);
  if (v15 == v16)
  {
    if (v17 >= 0)
      v18 = (unsigned __int8 *)(a1 + 24);
    else
      v18 = (unsigned __int8 *)v12->__r_.__value_.__r.__words[0];
    if ((v13 & 0x80) != 0)
    {
      if (!memcmp(__str->__r_.__value_.__l.__data_, v18, size))
        return *(double *)(a1 + 80);
    }
    else
    {
      if (!(_DWORD)v13)
        return *(double *)(a1 + 80);
      for (i = __str; i->__r_.__value_.__s.__data_[0] == *v18; i = (std::string *)((char *)i + 1))
      {
        ++v18;
        if (!--v13)
          return *(double *)(a1 + 80);
      }
    }
  }
  if ((v11 & 0x80000000) == 0)
  {
    memset(v30, 0, sizeof(v30));
    v31 = 1065353216;
    *(_QWORD *)&v20 = *(unsigned int *)(a1 + 16);
    v28 = "ind";
    v29 = v20;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(v30, (uint64_t)&v28);
    v21 = *(_DWORD *)(a1 + 16) == 0;
    v28 = "isfirst";
    v29 = *(double *)&v21;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(v30, (uint64_t)&v28);
    v22 = *(_DWORD *)(a1 + 16) != 0;
    v28 = "isinside";
    v29 = *(double *)&v22;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(v30, (uint64_t)&v28);
    v23 = *(double *)(a1 + 56) / (double)*(int *)(a1 + 48);
    v28 = "avg_active";
    v29 = v23;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    v24 = *(double *)(a1 + 64) / (double)*(int *)(a1 + 48);
    v28 = "avg_bestcost";
    v29 = v24;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    v25 = *(double *)(a1 + 72) / (double)*(int *)(a1 + 48);
    v28 = "avg_epsilenceframes";
    v29 = v25;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(v30, (uint64_t)&v28);
    *(_QWORD *)&v26 = *(unsigned int *)(a1 + 48);
    v28 = "num_frames";
    v29 = v26;
    std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(v30, (uint64_t)&v28);
    *(double *)(a1 + 80) = (***(double (****)(_QWORD, _OWORD *))a1)(*(_QWORD *)a1, v30);
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v30);
  }
  std::string::operator=(v12, __str);
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 48) = 0;
  v7[1] = 0;
  v7[2] = 0;
  *v7 = 0;
  return *(double *)(a1 + 80);
}

void sub_1ADFBD708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::LRStreamingConfidence::~LRStreamingConfidence(quasar::LRStreamingConfidence *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E5D384E8;
  v2 = (char *)this + 8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_1E5D384E8;
  v2 = (char *)this + 8;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 128);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 88);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 48);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v2);
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::pair<int,float>>(uint64_t a1, int *a2, _DWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *a3;
  *((_DWORD *)v10 + 5) = a3[1];
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADFBD9F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__hash_table<std::__hash_value_type<int,double>,std::__unordered_map_hasher<int,std::__hash_value_type<int,double>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,double>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int,double>>(uint64_t a1, int *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x20uLL);
  *v10 = 0;
  v10[1] = v6;
  *((_DWORD *)v10 + 4) = *(_DWORD *)a3;
  v10[3] = *(_QWORD *)(a3 + 8);
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1ADFBDC14(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,int>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,int>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1ADFBDC8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,int>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (double *)operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0.0;
  v7[1] = 0.0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v7 + 2, *(char **)a2);
  v7[5] = (double)*(int *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADFBDD3C(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,BOOL>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,BOOL>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1ADFBDDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,BOOL>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  double *v7;
  double v8;
  unint64_t result;

  v6 = a1 + 16;
  v7 = (double *)operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0.0;
  v7[1] = 0.0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)v7 + 2, *(char **)a2);
  v8 = 0.0;
  if (*(_BYTE *)(a2 + 8))
    v8 = 1.0;
  v7[5] = v8;
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  *((_QWORD *)v7 + 1) = result;
  return result;
}

void sub_1ADFBDE78(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__emplace_unique_impl<std::pair<char const*,double>>(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *inserted;
  char v4;
  void **v5;
  void *__p;
  uint64_t v8;

  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,double>>((uint64_t)a1, a2, (uint64_t)&__p);
  inserted = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__node_insert_unique(a1, (uint64_t)__p);
  if ((v4 & 1) == 0)
  {
    v5 = (void **)__p;
    __p = 0;
    if (v5)
      std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v8, v5);
  }
  return inserted;
}

void sub_1ADFBDEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **__p, uint64_t a11)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a11, __p);
  _Unwind_Resume(exception_object);
}

unint64_t std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__construct_node<std::pair<char const*,double>>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  unint64_t result;

  v6 = a1 + 16;
  v7 = operator new(0x30uLL);
  *(_QWORD *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v7;
  *(_BYTE *)(a3 + 16) = 0;
  *v7 = 0;
  v7[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(v7 + 2, *(char **)a2);
  v7[5] = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a3 + 16) = 1;
  result = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)(v7 + 2));
  v7[1] = result;
  return result;
}

void sub_1ADFBDFA4(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v1);
  _Unwind_Resume(a1);
}

void kaldi::FbankOptions::~FbankOptions(void **this)
{
  *this = off_1E5D29D98;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

{
  *this = off_1E5D29D98;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
}

{
  *this = off_1E5D29D98;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  JUMPOUT(0x1AF44D190);
}

kaldi::Fbank *kaldi::Fbank::Fbank(kaldi::Fbank *this, const kaldi::FbankOptions *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  _QWORD *v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  float v14;
  int v15;
  uint64_t v16;
  int8x8_t v17;
  uint64_t v18;
  int v19;
  __int128 v21;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = off_1E5D29D98;
  v4 = *(_OWORD *)((char *)a2 + 8);
  *(_QWORD *)((char *)this + 37) = *(_QWORD *)((char *)a2 + 21);
  *(_OWORD *)((char *)this + 24) = v4;
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 2, *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 3) = v5;
  }
  *((_QWORD *)this + 9) = *((_QWORD *)a2 + 7);
  v6 = *((_OWORD *)a2 + 4);
  v7 = *((_OWORD *)a2 + 5);
  v8 = *((_DWORD *)a2 + 24);
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 16) = (char *)this + 136;
  *((_DWORD *)this + 28) = v8;
  *((_OWORD *)this + 5) = v6;
  *((_OWORD *)this + 6) = v7;
  *((_QWORD *)this + 18) = 0;
  kaldi::FeatureWindowFunction::FeatureWindowFunction((kaldi::Fbank *)((char *)this + 152), (const kaldi::FbankOptions *)((char *)a2 + 8));
  *((_QWORD *)this + 22) = 0;
  if (*((_BYTE *)a2 + 99))
  {
    v9 = operator new(0x90uLL);
    v9[2] = 0;
    *v9 = &unk_1E5D41418;
    v9[1] = 0;
    v10 = (int)*((float *)a2 + 3);
    v9[3] = 850045863;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    *((_OWORD *)v9 + 4) = 0u;
    *((_OWORD *)v9 + 5) = 0u;
    *((_OWORD *)v9 + 6) = 0u;
    *((_DWORD *)v9 + 28) = v10;
    v9[16] = 0;
    v9[17] = 0;
    v9[15] = 0;
    *(_QWORD *)&v21 = v9 + 3;
    *((_QWORD *)&v21 + 1) = v9;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this, &v21);
    v11 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
    if (*((_QWORD *)&v21 + 1))
    {
      v12 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v14 = *((float *)a2 + 23);
  if (v14 > 0.0)
    *((float *)this + 30) = logf(v14);
  v15 = kaldi::FrameExtractionOptions::PaddedWindowSize((const kaldi::FbankOptions *)((char *)a2 + 8));
  if ((v15 & (v15 - 1)) == 0)
  {
    v16 = operator new();
    v18 = v16;
    if (v15 >= 0)
      v19 = v15;
    else
      v19 = v15 + 1;
    kaldi::SplitRadixComplexFft<float>::SplitRadixComplexFft(v16, v19 >> 1, v17);
    *(_DWORD *)(v18 + 48) = v15;
    *((_QWORD *)this + 22) = v18;
  }
  kaldi::Fbank::GetMelBanks(this, 1.0);
  return this;
}

void sub_1ADFBE268(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::Fbank::GetMelBanks(kaldi::Fbank *this, float a2)
{
  char **v4;
  uint64_t **v5;
  uint64_t **v6;
  char **v7;
  uint64_t *v8;
  float v10;
  float *v11;

  v10 = a2;
  v5 = (uint64_t **)((char *)this + 136);
  v4 = (char **)*((_QWORD *)this + 17);
  if (!v4)
    goto LABEL_8;
  v6 = (uint64_t **)((char *)this + 136);
  do
  {
    v7 = v4 + 1;
    if (*((float *)v4 + 8) >= a2)
    {
      v7 = v4;
      v6 = (uint64_t **)v4;
    }
    v4 = (char **)*v7;
  }
  while (*v7);
  if (v6 != v5 && *((float *)v6 + 8) <= a2)
    return v6[5];
LABEL_8:
  v8 = (uint64_t *)operator new();
  kaldi::MelBanks::MelBanks(v8, (char *)this + 80, (char *)this + 24, a2);
  v11 = &v10;
  std::__tree<std::__value_type<float,kaldi::MelBanks *>,std::__map_value_compare<float,std::__value_type<float,kaldi::MelBanks *>,std::less<float>,true>,std::allocator<std::__value_type<float,kaldi::MelBanks *>>>::__emplace_unique_key_args<float,std::piecewise_construct_t const&,std::tuple<float const&>,std::tuple<>>(v5 - 1, &v10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v11)[5] = v8;
  return v8;
}

void sub_1ADFBE3B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10A0C409C5A7551);
  _Unwind_Resume(a1);
}

void kaldi::Fbank::~Fbank(kaldi::Fbank *this)
{
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;

  v2 = (char *)this + 128;
  v3 = (char *)*((_QWORD *)this + 16);
  v4 = (char *)this + 136;
  if (v3 != (char *)this + 136)
  {
    do
    {
      v5 = *((_QWORD *)v3 + 5);
      if (v5)
      {
        v11 = (void **)(v5 + 24);
        std::vector<std::pair<int,kaldi::Vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v11);
        kaldi::Vector<float>::Destroy(v5);
        MEMORY[0x1AF44D190](v5, 0x10A0C409C5A7551);
      }
      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
  v9 = *((_QWORD *)this + 22);
  if (v9)
  {
    v10 = kaldi::SplitRadixComplexFft<float>::~SplitRadixComplexFft(v9);
    MEMORY[0x1AF44D190](v10, 0x1090C40943DB512);
  }
  kaldi::Vector<float>::Destroy((uint64_t)this + 152);
  std::__tree<int>::destroy((uint64_t)v2, *((_QWORD **)this + 17));
  *((_QWORD *)this + 2) = off_1E5D29D98;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void kaldi::Fbank::Compute(kaldi::Fbank *a1, uint64_t a2, int32x2_t *a3, void **a4, float a5, uint64_t a6, int a7)
{
  uint64_t *MelBanks;

  MelBanks = kaldi::Fbank::GetMelBanks(a1, a5);
  kaldi::Fbank::ComputeInternal((uint64_t)a1, a2, (uint64_t)MelBanks, a3, a4, a7);
}

void kaldi::Fbank::ComputeInternal(uint64_t a1, uint64_t a2, uint64_t a3, int32x2_t *a4, void **a5, int a6)
{
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  int v14;
  float *v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  int32x2_t v20;
  __int32 v21;
  float *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  _DWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  void **v30;
  uint64_t v31;
  _QWORD *v32;
  float *v34;
  void *v36[2];
  unsigned __int8 v37;
  float *v38;
  int v39;
  int v40;
  uint64_t v41;
  float v42;
  void *__p[3];
  void *v44;
  void *v45;
  uint64_t v46;
  const void *v47[3];
  float *v48;
  uint64_t v49;
  uint64_t v50;
  float *v51;
  int v52;
  int v53;
  uint64_t v54;

  v34 = (float *)(a1 + 24);
  v10 = kaldi::NumFrames(*(_DWORD *)(a2 + 8), a1 + 24);
  if ((_DWORD)v10)
  {
    v11 = v10;
    kaldi::Matrix<float>::Resize(a4, v10, *(_DWORD *)(a1 + 80) + *(unsigned __int8 *)(a1 + 104), 0, 0);
    if (a5)
      kaldi::ExtractWaveformRemainder(a2, v34, a5);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    memset(v47, 0, sizeof(v47));
    v44 = 0;
    v45 = 0;
    v46 = 0;
    std::vector<float>::vector(__p, v11);
    if (v11 >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = *(unsigned __int8 *)(a1 + 104);
      do
      {
        v42 = 1.0;
        if ((v14 || *(_BYTE *)(a1 + 115)) && *(_BYTE *)(a1 + 112))
          v15 = &v42;
        else
          v15 = 0;
        kaldi::ExtractWindow((uint64_t *)a2, v13, (uint64_t)v34, (float **)(a1 + 152), (void **)&v48, v15);
        if (*(_BYTE *)(a1 + 104) || *(_BYTE *)(a1 + 115))
        {
          if (!*(_BYTE *)(a1 + 112))
          {
            v16 = kaldi::VecVec<float>((uint64_t)&v48, (const float **)&v48);
            if (v16 < 1.1755e-38)
              v16 = 1.1755e-38;
            v42 = v16;
          }
          v17 = v42;
          if (!*(_BYTE *)(a1 + 115))
            goto LABEL_20;
          *((float *)__p[0] + v13) = v42;
        }
        v17 = v42;
LABEL_20:
        v18 = logf(v17);
        if ((LODWORD(v18) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&v38);
          kaldi::VectorBase<float>::Write((uint64_t)&v48, &v38, 0);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"Non-finite log energy found for frame ", 38);
          v28 = (_QWORD *)std::ostream::operator<<();
          v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)". Waveform is: ", 15);
          std::stringbuf::str();
          if ((v37 & 0x80u) == 0)
            v30 = v36;
          else
            v30 = (void **)v36[0];
          if ((v37 & 0x80u) == 0)
            v31 = v37;
          else
            v31 = (uint64_t)v36[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
          if ((char)v37 < 0)
            operator delete(v36[0]);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
        }
        v19 = *(_QWORD *)(a1 + 176);
        if (v19)
          kaldi::SplitRadixRealFft<float>::Compute(v19, v48, 1, (float **)&v44);
        else
          kaldi::RealFft<float>((uint64_t)&v48, 1);
        kaldi::ComputePowerSpectrum((uint64_t)&v48);
        v53 = 0;
        v54 = 0;
        v51 = v48;
        v52 = (int)v49 / 2 + 1;
        kaldi::MelBanks::Compute(a3, &v51, (uint64_t)v47);
        if (*(_BYTE *)(a1 + 114))
        {
          kaldi::VectorBase<float>::ApplyFloor((uint64_t)v47, 1.1755e-38);
          kaldi::VectorBase<float>::ApplyLog((uint64_t)v47);
        }
        v20 = *a4;
        v21 = a4[2].i32[0];
        kaldi::MatrixBase<float>::NumCols((uint64_t)a4);
        v22 = (float *)(*(_QWORD *)&v20 + 4 * v21 * (int)v13);
        v23 = *(unsigned __int8 *)(a1 + 104);
        v24 = *(_DWORD *)(a1 + 80);
        v40 = 0;
        v41 = 0;
        v38 = &v22[v23];
        v39 = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v38, v47);
        v14 = *(unsigned __int8 *)(a1 + 104);
        if (*(_BYTE *)(a1 + 104))
        {
          if (*(float *)(a1 + 108) > 0.0 && v18 < *(float *)(a1 + 120))
            v18 = *(float *)(a1 + 120);
          *v22 = v18;
          if (*(_BYTE *)(a1 + 113))
          {
            v25 = *(unsigned int *)(a1 + 80);
            if ((int)v25 >= 1)
            {
              for (i = 0; i != v25; ++i)
              {
                v27 = (_DWORD *)(*(_QWORD *)&v20 + 4 * v21 * v12 + 4 * i);
                *v27 = v27[1];
              }
            }
            v22[(int)v25] = v18;
          }
        }
        ++v13;
        ++v12;
      }
      while (v13 != v11);
    }
    if (*(_BYTE *)(a1 + 115))
      kaldi::SnrTracker::add_frame_energy(*(_QWORD *)a1, (char **)__p);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v44)
    {
      v45 = v44;
      operator delete(v44);
    }
    kaldi::Vector<float>::Destroy((uint64_t)v47);
    kaldi::Vector<float>::Destroy((uint64_t)&v48);
  }
  else
  {
    if (!a6)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v51, (uint64_t)"No frames fit in file (#samples is ", 35);
      v32 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, ")");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v51);
    }
    kaldi::Matrix<float>::Resize(a4, 0, 0, 0, 0);
  }
}

void sub_1ADFBE9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::ostringstream::~ostringstream((uint64_t)va);
  JUMPOUT(0x1ADFBE9F4);
}

void sub_1ADFBE9F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,char a59)
{
  if (__p)
    operator delete(__p);
  if (a53)
    operator delete(a53);
  kaldi::Vector<float>::Destroy((uint64_t)&a56);
  kaldi::Vector<float>::Destroy((uint64_t)&a59);
  _Unwind_Resume(a1);
}

double quasar::corrective_reranking::TokenClassification::TokenClassification(quasar::corrective_reranking::TokenClassification *this)
{
  double result;

  *((_QWORD *)this + 6) = 0;
  result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *((_DWORD *)this + 14) = 4;
  return result;
}

std::string *quasar::corrective_reranking::TokenClassification::TokenClassification(std::string *this, __int128 *a2, uint64_t a3, std::string::size_type *a4)
{
  __int128 v7;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(this[1].__r_.__value_.__r.__words, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  this[2].__r_.__value_.__r.__words[0] = *a4;
  LODWORD(this[2].__r_.__value_.__r.__words[1]) = 4;
  return this;
}

void sub_1ADFBEAD8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::rescoring::GenerateTransformedFeatureValues(int *a1, uint64_t a2, char ***a3, uint64_t **a4)
{
  char **v4;
  uint64_t **v5;
  uint64_t v6;
  int *v7;
  unsigned int *v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  char *v12;
  unint64_t v13;
  int v14;
  unsigned int *v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  float v21;
  _QWORD *v22;
  const char *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  void **v28;
  uint64_t v29;
  int v30;
  unsigned int *v31;
  BOOL v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  float v37;
  int v38;
  unsigned int *v39;
  BOOL v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  float v45;
  float v46;
  float v47;
  unint64_t v48;
  int32x2_t v49;
  int v50;
  uint64_t (***v51)();
  uint64_t v52;
  int v53;
  float v54;
  float v55;
  int32x2_t v56;
  int v57;
  uint64_t v58;
  int v59;
  float v60;
  float v61;
  float v62;
  uint64_t v63;
  int32x2_t v64;
  int v65;
  float v66;
  float v67;
  int32x2_t v68;
  int v69;
  uint64_t v70;
  int v71;
  float v72;
  float v73;
  uint64_t v74;
  int v75;
  unsigned int *v76;
  BOOL v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  float v82;
  int v83;
  unsigned int *v84;
  BOOL v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  float v90;
  int v91;
  int v92;
  int v93;
  unsigned int *v94;
  BOOL v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  float AtomicFeatureValue;
  int v101;
  unsigned int *v102;
  BOOL v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  float v108;
  int v109;
  int v110;
  uint64_t k;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t m;
  int v117;
  unint64_t j;
  int v119;
  uint64_t v120;
  float v121;
  float v122;
  float v123;
  int v124;
  uint64_t v125;
  float v126;
  float v127;
  int v128;
  uint64_t v129;
  int v130;
  int64_t v131;
  int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  BOOL v136;
  unint64_t i;
  float v138;
  float v139;
  int v140;
  uint64_t v141;
  float v142;
  int v143;
  uint64_t v144;
  int v145;
  int64_t v146;
  int v147;
  unsigned int v148;
  unint64_t v149;
  unint64_t v150;
  BOOL v151;
  int v152;
  int64_t v153;
  int v154;
  unsigned int v155;
  unint64_t v156;
  unint64_t v157;
  BOOL v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char **v167;
  unsigned int *v169;
  unsigned int *v171;
  char **v172;
  uint64_t v173;
  unsigned int v174;
  unint64_t v175;
  uint64_t v176;
  void *__p[2];
  int v178;
  unsigned __int8 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  _DWORD *v197;
  int v198;
  int v199;
  uint64_t (**v200)();
  int v201;
  uint64_t (***v202)();
  uint64_t (**v203)();
  int v204;
  uint64_t (***v205)();
  uint64_t (**v206)();
  int v207;
  uint64_t (***v208)();
  uint64_t (**v209)();
  float v210;
  uint64_t (***v211)();
  uint64_t v212;

  v212 = *MEMORY[0x1E0C80C00];
  v4 = *a3;
  v167 = a3[1];
  if (*a3 != v167)
  {
    v5 = a4;
    v6 = a2;
    v7 = a1;
    v8 = (unsigned int *)((char *)a1 + *(unsigned __int16 *)((char *)a1 - *a1 + 6));
    v9 = *(unsigned int *)((char *)v8 + *v8);
    v169 = (unsigned int *)(a2 + 20);
    v171 = (unsigned int *)(a2 + 16);
    if (v9 <= 1)
      v10 = 1;
    else
      v10 = *(unsigned int *)((char *)v8 + *v8);
    v11 = (float)v9;
    v176 = *(unsigned int *)((char *)v8 + *v8);
    while (1)
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v197);
      v12 = v4[3];
      if (v4[4] != v12)
        break;
LABEL_246:
      quasar::lm::InsertOrDie<std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>>>(v5, (uint64_t)v4, (uint64_t)&v197);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v197);
      v4 += 6;
      if (v4 == v167)
        return 1;
    }
    v13 = 0;
    v172 = v4;
    while (1)
    {
      v173 = v12[v13];
      v174 = v173 - 5;
      v175 = v13;
      if (!v13 && v174 >= 3)
        break;
LABEL_24:
      if (quasar::gLogLevel >= 6)
      {
        v195 = 0u;
        v196 = 0u;
        v193 = 0u;
        v194 = 0u;
        v191 = 0u;
        v192 = 0u;
        v189 = 0u;
        v190 = 0u;
        v187 = 0u;
        v188 = 0u;
        v186 = 0u;
        v184 = 0u;
        v185 = 0u;
        v182 = 0u;
        v183 = 0u;
        v180 = 0u;
        v181 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v180);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)"Applying transformation ", 24);
        v23 = "";
        if (v173 <= 0xD)
          v23 = quasar::rescoring::EnumNamesFeatureTransformation(void)::names[v173];
        v24 = strlen(v23);
        v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" ", 1);
        v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"for feature ", 12);
        quasar::rescoring::EnumNameFeatureTypes<std::vector<quasar::rescoring::FeatureType>>((unsigned __int8 **)v4);
        if ((v179 & 0x80u) == 0)
          v28 = __p;
        else
          v28 = (void **)__p[0];
        if ((v179 & 0x80u) == 0)
          v29 = v179;
        else
          v29 = (uint64_t)__p[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)v28, v29);
        if ((char)v179 < 0)
          operator delete(__p[0]);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v180);
      }
      if (v174 > 2)
      {
        switch((int)v173)
        {
          case 1:
            kaldi::MatrixBase<float>::Scale((uint64_t)&v197, -1.0);
            goto LABEL_245;
          case 2:
            for (i = 0; i < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v197); ++i)
            {
              v138 = kaldi::MatrixBase<float>::MinByCol((uint64_t)&v197, i, 1);
              v139 = kaldi::MatrixBase<float>::MaxByCol((uint64_t)&v197, i, 1);
              if ((_DWORD)v176)
              {
                v140 = 0;
                v141 = 0;
                v142 = v139 - v138;
                v143 = v199;
                v144 = (uint64_t)&v197[(int)i];
                do
                {
                  if (v142 <= 0.000001)
                    *(_DWORD *)(v144 + 4 * v140) = 0;
                  else
                    *(float *)(v144 + 4 * v140) = fmaxf(fminf((float)(*(float *)(v144 + 4 * v140) - v138) / v142, 1.0), 0.0);
                  ++v141;
                  v140 += v143;
                }
                while (v176 != v141);
              }
            }
            goto LABEL_245;
          case 3:
          case 11:
          case 12:
          case 13:
            v48 = 0;
            break;
          case 4:
            v130 = v198;
            if (v198)
            {
              v131 = 0;
              do
              {
                *(float *)&v197[v199 * (int)v131 + (v131 >> 32)] = 1.0
                                                                 - *(float *)&v197[v199 * (int)v131 + (v131 >> 32)];
                v132 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v197) - 1;
                if (v132 == HIDWORD(v131))
                  v133 = v131 + 1;
                else
                  v133 = v131;
                if (v132 == HIDWORD(v131))
                  v134 = 0;
                else
                  v134 = (v131 & 0xFFFFFFFF00000000) + 0x100000000;
                v135 = HIDWORD(v134);
                v131 = v134 & 0xFFFFFFFF00000000 | v133;
                if (v135)
                  v136 = 0;
                else
                  v136 = v130 == v133;
              }
              while (!v136);
            }
            goto LABEL_245;
          case 8:
            for (j = 0; j < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v197); ++j)
            {
              if ((_DWORD)v176)
              {
                v119 = 0;
                v120 = 0;
                v121 = 0.0;
                v122 = 0.0;
                do
                {
                  v123 = *(float *)&v197[(int)j + v119];
                  v122 = v122 + v123;
                  v121 = v121 + (float)(v123 * v123);
                  ++v120;
                  v119 += v199;
                }
                while (v176 != v120);
                v124 = 0;
                v125 = 0;
                v126 = v122 / v11;
                v127 = sqrtf((float)(v121 / v11) - (float)(v126 * v126));
                v128 = v199;
                v129 = (uint64_t)&v197[(int)j];
                do
                {
                  if (v127 <= 0.000001)
                    *(_DWORD *)(v129 + 4 * v124) = 0;
                  else
                    *(float *)(v129 + 4 * v124) = (float)(*(float *)(v129 + 4 * v124) - v126) / v127;
                  ++v125;
                  v124 += v128;
                }
                while (v176 != v125);
              }
            }
            goto LABEL_245;
          case 9:
            v145 = v198;
            if (v198)
            {
              v146 = 0;
              do
              {
                *(float *)&v197[v199 * (int)v146 + (v146 >> 32)] = fminf(*(float *)&v197[v199 * (int)v146 + (v146 >> 32)], 0.0);
                v147 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v197) - 1;
                if (v147 == HIDWORD(v146))
                  v148 = v146 + 1;
                else
                  v148 = v146;
                if (v147 == HIDWORD(v146))
                  v149 = 0;
                else
                  v149 = (v146 & 0xFFFFFFFF00000000) + 0x100000000;
                v150 = HIDWORD(v149);
                v146 = v149 & 0xFFFFFFFF00000000 | v148;
                if (v150)
                  v151 = 0;
                else
                  v151 = v145 == v148;
              }
              while (!v151);
            }
            goto LABEL_245;
          case 10:
            v152 = v198;
            if (v198)
            {
              v153 = 0;
              do
              {
                *(float *)&v197[v199 * (int)v153 + (v153 >> 32)] = fmaxf(*(float *)&v197[v199 * (int)v153 + (v153 >> 32)], 0.0);
                v154 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v197) - 1;
                if (v154 == HIDWORD(v153))
                  v155 = v153 + 1;
                else
                  v155 = v153;
                if (v154 == HIDWORD(v153))
                  v156 = 0;
                else
                  v156 = (v153 & 0xFFFFFFFF00000000) + 0x100000000;
                v157 = HIDWORD(v156);
                v153 = v156 & 0xFFFFFFFF00000000 | v155;
                if (v157)
                  v158 = 0;
                else
                  v158 = v152 == v155;
              }
              while (!v158);
            }
            goto LABEL_245;
          default:
            v195 = 0u;
            v196 = 0u;
            v193 = 0u;
            v194 = 0u;
            v191 = 0u;
            v192 = 0u;
            v189 = 0u;
            v190 = 0u;
            v187 = 0u;
            v188 = 0u;
            v186 = 0u;
            v184 = 0u;
            v185 = 0u;
            v182 = 0u;
            v183 = 0u;
            v180 = 0u;
            v181 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v180);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)"Not implemented", 15);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v180);
        }
        while (2)
        {
          if (v48 >= (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v197))
            goto LABEL_245;
          if ((int)v173 > 11)
          {
            if ((_DWORD)v173 != 12)
            {
              if ((_DWORD)v173 != 13)
                goto LABEL_110;
              v56 = (int32x2_t)v197;
              v57 = v197[(int)v48];
              v200 = &off_1E5CFFC20;
              v201 = v57;
              v51 = &v200;
              v202 = &v200;
              if (!(_DWORD)v176)
                goto LABEL_108;
              v58 = 0;
              v59 = v199;
              do
              {
                v60 = *(float *)(*(_QWORD *)&v56 + 4 * v59 * (int)v58 + 4 * (int)v48);
                *(float *)&v180 = v60;
                if (!v202)
                  std::__throw_bad_function_call[abi:ne180100]();
                v61 = (float)((unsigned int (*)(uint64_t (***)(), __int128 *, float))(*v202)[6])(v202, &v180, v60);
                v56 = (int32x2_t)v197;
                v59 = v199;
                *(float *)&v197[v199 * (int)v58++ + (int)v48] = v61;
              }
              while (v176 != v58);
              v51 = v202;
              v13 = v175;
              if (v202 != &v200)
                goto LABEL_104;
              v51 = &v200;
              goto LABEL_108;
            }
            v68 = (int32x2_t)v197;
            v69 = v197[(int)v48];
            v203 = &off_1E5CFFBC8;
            v204 = v69;
            v51 = &v203;
            v205 = &v203;
            if (!(_DWORD)v176)
              goto LABEL_108;
            v70 = 0;
            v71 = v199;
            do
            {
              v72 = *(float *)(*(_QWORD *)&v68 + 4 * v71 * (int)v70 + 4 * (int)v48);
              *(float *)&v180 = v72;
              if (!v205)
                std::__throw_bad_function_call[abi:ne180100]();
              v73 = (float)((unsigned int (*)(uint64_t (***)(), __int128 *, float))(*v205)[6])(v205, &v180, v72);
              v68 = (int32x2_t)v197;
              v71 = v199;
              *(float *)&v197[v199 * (int)v70++ + (int)v48] = v73;
            }
            while (v176 != v70);
            v51 = v205;
            if (v205 != &v203)
            {
              v13 = v175;
              goto LABEL_104;
            }
            v51 = &v203;
            v74 = 4;
            v13 = v175;
          }
          else
          {
            if ((_DWORD)v173 != 3)
            {
              if ((_DWORD)v173 == 11)
              {
                v49 = (int32x2_t)v197;
                v50 = v197[(int)v48];
                v206 = &off_1E5CFFB70;
                v207 = v50;
                v51 = &v206;
                v208 = &v206;
                if (!(_DWORD)v176)
                  goto LABEL_108;
                v52 = 0;
                v53 = v199;
                do
                {
                  v54 = *(float *)(*(_QWORD *)&v49 + 4 * v53 * (int)v52 + 4 * (int)v48);
                  *(float *)&v180 = v54;
                  if (!v208)
                    std::__throw_bad_function_call[abi:ne180100]();
                  v55 = (float)((unsigned int (*)(uint64_t (***)(), __int128 *, float))(*v208)[6])(v208, &v180, v54);
                  v49 = (int32x2_t)v197;
                  v53 = v199;
                  *(float *)&v197[v199 * (int)v52++ + (int)v48] = v55;
                }
                while (v176 != v52);
                v51 = v208;
                v13 = v175;
                if (v208 == &v206)
                {
                  v51 = &v206;
                  goto LABEL_108;
                }
LABEL_104:
                if (v51)
                {
                  v74 = 5;
                  break;
                }
              }
LABEL_110:
              ++v48;
              continue;
            }
            v62 = kaldi::MatrixBase<float>::MinByCol((uint64_t)&v197, v48, 1);
            v209 = &off_1E5CFFB18;
            v210 = v62;
            v51 = &v209;
            v211 = &v209;
            if (!(_DWORD)v176)
              goto LABEL_108;
            v63 = 0;
            v64 = (int32x2_t)v197;
            v65 = v199;
            do
            {
              v66 = *(float *)(*(_QWORD *)&v64 + 4 * v65 * (int)v63 + 4 * (int)v48);
              *(float *)&v180 = v66;
              if (!v211)
                std::__throw_bad_function_call[abi:ne180100]();
              v67 = (float)((unsigned int (*)(uint64_t (***)(), __int128 *, float))(*v211)[6])(v211, &v180, v66);
              v64 = (int32x2_t)v197;
              v65 = v199;
              *(float *)&v197[v199 * (int)v63++ + (int)v48] = v67;
            }
            while (v176 != v63);
            v51 = v211;
            v13 = v175;
            if (v211 != &v209)
              goto LABEL_104;
            v51 = &v209;
LABEL_108:
            v74 = 4;
          }
          break;
        }
        (*v51)[v74]();
        goto LABEL_110;
      }
      if ((_DWORD)v173 == 7)
      {
        v93 = **v4;
        v94 = v171;
        if (v93 == 20 || ((v93 - 11) >= 4 ? (v95 = v93 == 20) : (v95 = 1), v94 = v169, v95))
        {
          v96 = *v94;
          kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, *v94, 0, 0);
          v161 = v96;
          if (v96)
            goto LABEL_145;
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, 1, 0, 0);
          v161 = 1;
LABEL_145:
          v97 = 0;
          v98 = v176;
          do
          {
            if (v98)
            {
              v99 = 0;
              do
              {
                AtomicFeatureValue = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v99, v93 | (unint64_t)(v97 << 32));
                *(float *)(v180 + 4 * (int)v181 * (int)v99++ + 4 * (int)v97) = AtomicFeatureValue;
              }
              while (v10 != v99);
              v98 = v176;
            }
            ++v97;
          }
          while (v97 != v161);
        }
        v101 = (*v172)[1];
        v102 = v171;
        if (v101 == 20 || ((v101 - 11) >= 4 ? (v103 = v101 == 20) : (v103 = 1), v102 = v169, v103))
        {
          v104 = *v102;
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, *v102, 0, 0);
          v164 = v104;
          if (v104)
            goto LABEL_158;
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, 1, 0, 0);
          v164 = 1;
LABEL_158:
          v105 = 0;
          v106 = v176;
          do
          {
            if (v106)
            {
              v107 = 0;
              do
              {
                v108 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v107, v101 | (unint64_t)(v105 << 32));
                *((float *)__p[0] + v178 * (int)v107++ + (int)v105) = v108;
              }
              while (v10 != v107);
              v106 = v176;
            }
            ++v105;
          }
          while (v105 != v164);
        }
        v109 = kaldi::MatrixBase<float>::NumCols((uint64_t)&v180);
        v110 = kaldi::MatrixBase<float>::NumCols((uint64_t)__p);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v197, v176, (v110 * v109), 0, 0);
        if ((_DWORD)v176)
        {
          for (k = 0; k != v176; ++k)
          {
            v112 = 0;
            v113 = 0;
            while (v112 < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)&v180))
            {
              v114 = v6;
              v115 = 0;
              for (m = 0; m < (int)kaldi::MatrixBase<float>::NumCols((uint64_t)__p); ++m)
              {
                if (*(float *)((char *)__p[0] + 4 * v178 * (int)k + (v115 >> 30)) == 0.0)
                  v117 = 2143289344;
                else
                  v117 = *(_DWORD *)(v180 + 4 * (int)v181 * (int)k + 4 * (int)v112);
                *(_DWORD *)((char *)&v197[v199 * (int)k] + (((v113 << 32) + v115) >> 30)) = v117;
                v115 += 0x100000000;
              }
              ++v112;
              v113 += m;
              v6 = v114;
            }
          }
        }
        kaldi::Matrix<float>::~Matrix((uint64_t)__p);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v180);
        v7 = a1;
        v13 = v175;
        goto LABEL_245;
      }
      if ((_DWORD)v173 != 6)
      {
        if ((_DWORD)v173 != 5)
        {
          v195 = 0u;
          v196 = 0u;
          v193 = 0u;
          v194 = 0u;
          v191 = 0u;
          v192 = 0u;
          v189 = 0u;
          v190 = 0u;
          v187 = 0u;
          v188 = 0u;
          v186 = 0u;
          v184 = 0u;
          v185 = 0u;
          v182 = 0u;
          v183 = 0u;
          v180 = 0u;
          v181 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v180);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v180, (uint64_t)"Not implemented", 15);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v180);
        }
        v30 = **v4;
        v31 = v171;
        if (v30 == 20 || ((v30 - 11) >= 4 ? (v32 = v30 == 20) : (v32 = 1), v31 = v169, v32))
        {
          v33 = *v31;
          kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, *v31, 0, 0);
          v162 = v33;
          if (v33)
            goto LABEL_47;
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, 1, 0, 0);
          v162 = 1;
LABEL_47:
          v34 = 0;
          v35 = v176;
          do
          {
            if (v35)
            {
              v36 = 0;
              do
              {
                v37 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v36, v30 | (unint64_t)(v34 << 32));
                *(float *)(v180 + 4 * (int)v181 * (int)v36++ + 4 * (int)v34) = v37;
              }
              while (v10 != v36);
              v35 = v176;
            }
            ++v34;
          }
          while (v34 != v162);
        }
        v38 = (*v172)[1];
        v39 = v171;
        if (v38 == 20 || ((v38 - 11) >= 4 ? (v40 = v38 == 20) : (v40 = 1), v39 = v169, v40))
        {
          v41 = *v39;
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, *v39, 0, 0);
          v165 = v41;
          if (v41)
            goto LABEL_60;
        }
        else
        {
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, 1, 0, 0);
          v165 = 1;
LABEL_60:
          v42 = 0;
          v43 = v176;
          do
          {
            if (v43)
            {
              v44 = 0;
              do
              {
                v45 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v44, v38 | (unint64_t)(v42 << 32));
                *((float *)__p[0] + v178 * (int)v44++ + (int)v42) = v45;
              }
              while (v10 != v44);
              v43 = v176;
            }
            ++v42;
          }
          while (v42 != v165);
        }
        quasar::rescoring::ComputeSpearmanCorrelation((uint64_t)&v180, (uint64_t)__p);
        v47 = v46;
        kaldi::Matrix<float>::~Matrix((uint64_t)__p);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v180);
        kaldi::Matrix<float>::Resize((int32x2_t *)&v197, 1, 4, 0, 0);
        v13 = v175;
        if ((LODWORD(v47) & 0x7FFFFFFFu) >= 0x7F800000)
        {
          v197[3] = 1065353216;
        }
        else if (v47 <= 0.000001)
        {
          if (v47 >= -0.000001)
            v197[2] = 1065353216;
          else
            v197[1] = 1065353216;
        }
        else
        {
          *v197 = 1065353216;
        }
        goto LABEL_245;
      }
      v75 = **v4;
      v76 = v171;
      if (v75 == 20 || ((v75 - 11) >= 4 ? (v77 = v75 == 20) : (v77 = 1), v76 = v169, v77))
      {
        v78 = *v76;
        kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, *v76, 0, 0);
        v160 = v78;
        if (!v78)
          goto LABEL_124;
      }
      else
      {
        kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, 1, 0, 0);
        v160 = 1;
      }
      v79 = 0;
      v80 = v176;
      do
      {
        if (v80)
        {
          v81 = 0;
          do
          {
            v82 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v81, v75 | (unint64_t)(v79 << 32));
            *(float *)(v180 + 4 * (int)v181 * (int)v81++ + 4 * (int)v79) = v82;
          }
          while (v10 != v81);
          v80 = v176;
        }
        ++v79;
      }
      while (v79 != v160);
LABEL_124:
      v83 = (*v172)[1];
      v84 = v171;
      if (v83 != 20)
      {
        v85 = (v83 - 11) < 4 || v83 == 20;
        v84 = v169;
        if (!v85)
        {
          kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, 1, 0, 0);
          v163 = 1;
LABEL_131:
          v87 = 0;
          v88 = v176;
          do
          {
            if (v88)
            {
              v89 = 0;
              do
              {
                v90 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v89, v83 | (unint64_t)(v87 << 32));
                *((float *)__p[0] + v178 * (int)v89++ + (int)v87) = v90;
              }
              while (v10 != v89);
              v88 = v176;
            }
            ++v87;
          }
          while (v87 != v163);
          goto LABEL_137;
        }
      }
      v86 = *v84;
      kaldi::Matrix<float>::Matrix((uint64_t)__p, v176, *v84, 0, 0);
      v163 = v86;
      if (v86)
        goto LABEL_131;
LABEL_137:
      quasar::rescoring::ComputeSpearmanCorrelation((uint64_t)&v180, (uint64_t)__p);
      v92 = v91;
      kaldi::Matrix<float>::~Matrix((uint64_t)__p);
      kaldi::Matrix<float>::~Matrix((uint64_t)&v180);
      kaldi::Matrix<float>::Resize((int32x2_t *)&v197, 1, 1, 1, 0);
      v13 = v175;
      *v197 = v92;
LABEL_245:
      ++v13;
      v4 = v172;
      v12 = v172[3];
      v5 = a4;
      v9 = v176;
      if (v13 >= v172[4] - v12)
        goto LABEL_246;
    }
    v14 = **v4;
    v15 = v171;
    if (v14 == 20 || ((v14 - 11) >= 4 ? (v16 = v14 == 20) : (v16 = 1), v15 = v169, v16))
    {
      v17 = *v15;
      kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, *v15, 0, 0);
      v159 = v17;
      if (!v17)
      {
LABEL_23:
        kaldi::Matrix<float>::operator=((int32x2_t *)&v197, (uint64_t)&v180);
        kaldi::Matrix<float>::~Matrix((uint64_t)&v180);
        v4 = v172;
        v9 = v176;
        v13 = 0;
        goto LABEL_24;
      }
    }
    else
    {
      kaldi::Matrix<float>::Matrix((uint64_t)&v180, v9, 1, 0, 0);
      v159 = 1;
    }
    v18 = 0;
    v19 = v176;
    do
    {
      if (v19)
      {
        v20 = 0;
        do
        {
          v21 = quasar::rescoring::Featurizer::GetAtomicFeatureValue(v6, v7, (uint64_t)v5, v20, v14 | (unint64_t)(v18 << 32));
          *(float *)(v180 + 4 * (int)v181 * (int)v20++ + 4 * (int)v18) = v21;
        }
        while (v10 != v20);
        v19 = v176;
      }
      ++v18;
    }
    while (v18 != v159);
    goto LABEL_23;
  }
  return 1;
}

void sub_1ADFBFCF8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADFBFE88);
}

void sub_1ADFBFD08()
{
  JUMPOUT(0x1ADFBFE88);
}

void sub_1ADFBFD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62)
{
  if (a25 < 0)
    operator delete(__p);
  quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&a28);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a62);
  _Unwind_Resume(a1);
}

void sub_1ADFBFD98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  kaldi::Matrix<float>::~Matrix((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_1ADFBFDA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;
  _QWORD *v61;
  uint64_t v62;

  v61 = *(_QWORD **)(v59 - 160);
  if (v61 == (_QWORD *)(v59 - 184))
  {
    v62 = 4;
    v61 = (_QWORD *)(v59 - 184);
  }
  else
  {
    if (!v61)
      goto LABEL_6;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_6:
  kaldi::Matrix<float>::~Matrix(&a59);
  _Unwind_Resume(a1);
}

void sub_1ADFBFE64()
{
  JUMPOUT(0x1ADFBFE78);
}

void sub_1ADFBFE6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v11 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  JUMPOUT(0x1ADFBFE80);
}

void quasar::rescoring::ComputeSpearmanCorrelation(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  _BOOL4 v12;
  float v13;
  unint64_t *v14;
  uint64_t v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  float v19;
  unint64_t *v20;
  int64_t v21;
  _BOOL4 v23;
  float v24;
  unint64_t *v25;
  float v26;
  float v27;
  float v28;
  unint64_t v29;
  float v30;
  unint64_t v31;
  float v32;
  float v33;
  void *__p;
  _BYTE *v35;
  void *v36[2];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  v4 = kaldi::MatrixBase<float>::NumRows(a1);
  if (v4 != kaldi::MatrixBase<float>::NumRows(a2))
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, "Unable to compute Spearman correlation between two variables of different dimensions.");
LABEL_46:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v36);
  }
  if ((int)kaldi::MatrixBase<float>::NumCols(a1) > 1 || (int)kaldi::MatrixBase<float>::NumCols(a2) >= 2)
  {
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    *(_OWORD *)v36 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v36);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, "Unable to compute Spearman correlation between more than two variables.");
    goto LABEL_46;
  }
  if (kaldi::MatrixBase<float>::NumRows(a1))
  {
    v5 = kaldi::MatrixBase<float>::NumRows(a1);
    quasar::rescoring::ComputeRanks(a1, 1, (uint64_t *)v36);
    quasar::rescoring::ComputeRanks(a2, 1, (uint64_t *)&__p);
    v6 = v5;
    if (v5)
    {
      v7 = (unint64_t *)v36[0];
      v8 = v5 - 1;
      if (v8 >= (v35 - (_BYTE *)__p) >> 3)
        v9 = (v35 - (_BYTE *)__p) >> 3;
      else
        v9 = v5 - 1;
      if (v9 >= ((char *)v36[1] - (char *)v36[0]) >> 3)
        v10 = ((char *)v36[1] - (char *)v36[0]) >> 3;
      else
        v10 = v9;
      v12 = ((char *)v36[1] - (char *)v36[0]) >> 3 <= v9 || (v35 - (_BYTE *)__p) >> 3 == v10;
      v13 = 0.0;
      v14 = (unint64_t *)__p;
      v15 = v5;
      v16 = 0.0;
      do
      {
        if (v12)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v17 = *v7++;
        v16 = v16 + (float)v17;
        v18 = *v14++;
        v13 = v13 + (float)v18;
        --v15;
      }
      while (v15);
      v19 = v16 / (float)(unint64_t)v5;
      v20 = (unint64_t *)v36[0];
      if (v8 >= (v35 - (_BYTE *)__p) >> 3)
        v8 = (v35 - (_BYTE *)__p) >> 3;
      if (v8 >= ((char *)v36[1] - (char *)v36[0]) >> 3)
        v21 = ((char *)v36[1] - (char *)v36[0]) >> 3;
      else
        v21 = v8;
      v23 = ((char *)v36[1] - (char *)v36[0]) >> 3 <= v8 || (v35 - (_BYTE *)__p) >> 3 == v21;
      v24 = 0.0;
      v25 = (unint64_t *)__p;
      v26 = 0.0;
      v27 = 0.0;
      v28 = v13 / (float)(unint64_t)v5;
      do
      {
        if (v23)
          std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
        v29 = *v20++;
        v30 = (float)v29;
        v31 = *v25++;
        v32 = v30 - v19;
        v33 = (float)v31 - v28;
        v27 = v27 + (float)(v32 * v33);
        v26 = v26 + (float)(v32 * v32);
        v24 = v24 + (float)(v33 * v33);
        --v6;
      }
      while (v6);
    }
    if (__p)
    {
      v35 = __p;
      operator delete(__p);
    }
    if (v36[0])
    {
      v36[1] = v36[0];
      operator delete(v36[0]);
    }
  }
}

void sub_1ADFC0174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v12;

  if (__p)
    operator delete(__p);
  if (v12)
    operator delete(v12);
  _Unwind_Resume(a1);
}

void quasar::rescoring::GetDefaultTransformedFeatureDescs(_QWORD *a1@<X8>)
{
  _WORD *v3;
  _WORD *v4;
  _WORD *v5;
  _WORD *v6;
  _WORD *v7;
  _WORD *v8;
  _WORD *v9;
  char *v10;
  _WORD *v11;
  char *v12;
  _WORD *v13;
  char *v14;
  _BYTE *v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  _WORD *v20;
  _WORD *v21;
  _BYTE *v22;
  _WORD *v23;
  _BYTE *v24;
  _BYTE *v25;
  _WORD *v26;
  _BYTE *v27;
  _WORD *v28;
  _BYTE *v29;
  _WORD *v30;
  _BYTE *v31;
  _WORD *v32;
  _BYTE *v33;
  _WORD *v34;
  _BYTE *v35;
  _WORD *v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  _BYTE *v40;
  _BYTE *v41;
  _BYTE *v42;
  _BYTE *v43;
  _BYTE *v44;
  _BYTE *v45;
  _BYTE *v46;
  _BYTE *v47;
  _BYTE *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  void *v52;
  void *v53;
  void *__p;
  void *v55;
  _BYTE *v56;
  void *v57;
  void *v58;
  _BYTE *v59;
  void *v60;
  void *v61;
  _BYTE *v62;
  void *v63;
  void *v64;
  _BYTE *v65;
  void *v66;
  void *v67;
  _BYTE *v68;
  void *v69;
  void *v70;
  _BYTE *v71;
  void *v72;
  void *v73;
  _BYTE *v74;
  void *v75;
  void *v76;
  _BYTE *v77;
  void *v78;
  void *v79;
  _BYTE *v80;
  void *v81;
  void *v82;
  _BYTE *v83;
  void *v84;
  void *v85;
  _BYTE *v86;
  void *v87;
  void *v88;
  _BYTE *v89;
  void *v90;
  void *v91;
  _WORD *v92;
  void *v93;
  void *v94;
  _BYTE *v95;
  void *v96;
  void *v97;
  _WORD *v98;
  void *v99;
  void *v100;
  _BYTE *v101;
  void *v102;
  void *v103;
  _WORD *v104;
  void *v105;
  void *v106;
  _BYTE *v107;
  void *v108;
  void *v109;
  _WORD *v110;
  void *v111;
  void *v112;
  _BYTE *v113;
  void *v114;
  void *v115;
  _WORD *v116;
  void *v117;
  void *v118;
  _BYTE *v119;
  void *v120;
  void *v121;
  _WORD *v122;
  void *v123;
  void *v124;
  _BYTE *v125;
  void *v126;
  void *v127;
  _BYTE *v128;
  void *v129;
  void *v130;
  _WORD *v131;
  void *v132;
  void *v133;
  _BYTE *v134;
  void *v135;
  void *v136;
  _WORD *v137;
  void *v138;
  void *v139;
  _WORD *v140;
  void *v141;
  void *v142;
  _BYTE *v143;
  void *v144;
  void *v145;
  _BYTE *v146;
  void *v147;
  void *v148;
  _BYTE *v149;
  void *v150;
  void *v151;
  _BYTE *v152;
  void *v153;
  void *v154;
  _BYTE *v155;
  void *v156;
  void *v157;
  char *v158;
  void *v159;
  void *v160;
  _WORD *v161;
  void *v162;
  void *v163;
  char *v164;
  void *v165;
  void *v166;
  _WORD *v167;
  void *v168;
  void *v169;
  char *v170;
  void *v171;
  void *v172;
  _WORD *v173;
  void *v174;
  void *v175;
  _WORD *v176;
  void *v177;
  void *v178;
  _WORD *v179;
  void *v180;
  void *v181;
  _WORD *v182;
  void *v183;
  void *v184;
  _WORD *v185;
  void *v186;
  void *v187;
  _WORD *v188;
  void *v189;
  void *v190;
  _QWORD v191[2];
  char v192;
  _QWORD v193[6];
  _QWORD v194[6];
  _QWORD v195[6];
  _QWORD v196[6];
  _QWORD v197[6];
  _QWORD v198[6];
  _QWORD v199[6];
  _QWORD v200[6];
  _QWORD v201[6];
  _QWORD v202[6];
  _QWORD v203[6];
  _QWORD v204[6];
  _QWORD v205[6];
  _QWORD v206[6];
  _QWORD v207[6];
  _QWORD v208[6];
  _QWORD v209[6];
  _QWORD v210[6];
  _QWORD v211[6];
  _QWORD v212[6];
  _QWORD v213[6];
  _QWORD v214[6];
  _QWORD v215[6];
  uint64_t v216;

  v216 = *MEMORY[0x1E0C80C00];
  v3 = operator new(2uLL);
  v189 = v3;
  *v3 = 5121;
  v191[0] = v3 + 1;
  v190 = v3 + 1;
  v4 = operator new(2uLL);
  v186 = v4;
  *v4 = 775;
  v188 = v4 + 1;
  v187 = v4 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v193, (uint64_t)&v189, (uint64_t)&v186);
  v5 = operator new(2uLL);
  v183 = v5;
  *v5 = 5126;
  v185 = v5 + 1;
  v184 = v5 + 1;
  v6 = operator new(2uLL);
  v180 = v6;
  *v6 = 775;
  v182 = v6 + 1;
  v181 = v6 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v194, (uint64_t)&v183, (uint64_t)&v180);
  v7 = operator new(2uLL);
  v177 = v7;
  *v7 = 5122;
  v179 = v7 + 1;
  v178 = v7 + 1;
  v8 = operator new(2uLL);
  v174 = v8;
  *v8 = 775;
  v176 = v8 + 1;
  v175 = v8 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v195, (uint64_t)&v177, (uint64_t)&v174);
  v9 = operator new(2uLL);
  v171 = v9;
  *v9 = 5121;
  v173 = v9 + 1;
  v172 = v9 + 1;
  v10 = (char *)operator new(3uLL);
  v170 = v10 + 3;
  *(_WORD *)v10 = 775;
  v10[2] = 4;
  v168 = v10;
  v169 = v10 + 3;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v196, (uint64_t)&v171, (uint64_t)&v168);
  v11 = operator new(2uLL);
  v165 = v11;
  *v11 = 5126;
  v167 = v11 + 1;
  v166 = v11 + 1;
  v12 = (char *)operator new(3uLL);
  v164 = v12 + 3;
  *(_WORD *)v12 = 775;
  v12[2] = 4;
  v162 = v12;
  v163 = v12 + 3;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v197, (uint64_t)&v165, (uint64_t)&v162);
  v13 = operator new(2uLL);
  v159 = v13;
  *v13 = 5122;
  v161 = v13 + 1;
  v160 = v13 + 1;
  v14 = (char *)operator new(3uLL);
  v158 = v14 + 3;
  *(_WORD *)v14 = 775;
  v14[2] = 4;
  v156 = v14;
  v157 = v14 + 3;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v198, (uint64_t)&v159, (uint64_t)&v156);
  v15 = operator new(1uLL);
  v153 = v15;
  *v15 = 2;
  v155 = v15 + 1;
  v154 = v15 + 1;
  v16 = operator new(1uLL);
  v150 = v16;
  *v16 = 2;
  v152 = v16 + 1;
  v151 = v16 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v199, (uint64_t)&v153, (uint64_t)&v150);
  v17 = operator new(1uLL);
  v147 = v17;
  *v17 = 6;
  v149 = v17 + 1;
  v148 = v17 + 1;
  v18 = operator new(1uLL);
  v144 = v18;
  *v18 = 2;
  v146 = v18 + 1;
  v145 = v18 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v200, (uint64_t)&v147, (uint64_t)&v144);
  v19 = operator new(1uLL);
  v141 = v19;
  *v19 = 7;
  v143 = v19 + 1;
  v142 = v19 + 1;
  v20 = operator new(2uLL);
  v138 = v20;
  *v20 = 513;
  v140 = v20 + 1;
  v139 = v20 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v201, (uint64_t)&v141, (uint64_t)&v138);
  v21 = operator new(2uLL);
  v135 = v21;
  *v21 = 4368;
  v137 = v21 + 1;
  v136 = v21 + 1;
  v22 = operator new(1uLL);
  v132 = v22;
  *v22 = 5;
  v134 = v22 + 1;
  v133 = v22 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v202, (uint64_t)&v135, (uint64_t)&v132);
  v23 = operator new(2uLL);
  v129 = v23;
  *v23 = 4368;
  v131 = v23 + 1;
  v130 = v23 + 1;
  v24 = operator new(1uLL);
  v126 = v24;
  *v24 = 6;
  v128 = v24 + 1;
  v127 = v24 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v203, (uint64_t)&v129, (uint64_t)&v126);
  v25 = operator new(1uLL);
  v123 = v25;
  *v25 = 7;
  v125 = v25 + 1;
  v124 = v25 + 1;
  v26 = operator new(2uLL);
  v120 = v26;
  *v26 = 2568;
  v122 = v26 + 1;
  v121 = v26 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v204, (uint64_t)&v123, (uint64_t)&v120);
  v27 = operator new(1uLL);
  v117 = v27;
  *v27 = 7;
  v119 = v27 + 1;
  v118 = v27 + 1;
  v28 = operator new(2uLL);
  v114 = v28;
  *v28 = 2312;
  v115 = v28 + 1;
  v116 = v28 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v205, (uint64_t)&v117, (uint64_t)&v114);
  v29 = operator new(1uLL);
  v111 = v29;
  *v29 = 11;
  v112 = v29 + 1;
  v113 = v29 + 1;
  v30 = operator new(2uLL);
  v108 = v30;
  *v30 = 2568;
  v109 = v30 + 1;
  v110 = v30 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v206, (uint64_t)&v111, (uint64_t)&v108);
  v31 = operator new(1uLL);
  v105 = v31;
  *v31 = 11;
  v106 = v31 + 1;
  v107 = v31 + 1;
  v32 = operator new(2uLL);
  v102 = v32;
  *v32 = 2312;
  v103 = v32 + 1;
  v104 = v32 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v207, (uint64_t)&v105, (uint64_t)&v102);
  v33 = operator new(1uLL);
  v99 = v33;
  *v33 = 17;
  v100 = v33 + 1;
  v101 = v33 + 1;
  v34 = operator new(2uLL);
  v96 = v34;
  *v34 = 2568;
  v97 = v34 + 1;
  v98 = v34 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v208, (uint64_t)&v99, (uint64_t)&v96);
  v35 = operator new(1uLL);
  v93 = v35;
  *v35 = 17;
  v94 = v35 + 1;
  v95 = v35 + 1;
  v36 = operator new(2uLL);
  v90 = v36;
  *v36 = 2312;
  v91 = v36 + 1;
  v92 = v36 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v209, (uint64_t)&v93, (uint64_t)&v90);
  v37 = operator new(1uLL);
  v87 = v37;
  *v37 = 7;
  v88 = v37 + 1;
  v89 = v37 + 1;
  v38 = operator new(1uLL);
  v84 = v38;
  *v38 = 11;
  v85 = v38 + 1;
  v86 = v38 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v210, (uint64_t)&v87, (uint64_t)&v84);
  v39 = operator new(1uLL);
  v81 = v39;
  *v39 = 7;
  v82 = v39 + 1;
  v83 = v39 + 1;
  v40 = operator new(1uLL);
  v78 = v40;
  *v40 = 12;
  v79 = v40 + 1;
  v80 = v40 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v211, (uint64_t)&v81, (uint64_t)&v78);
  v41 = operator new(1uLL);
  v75 = v41;
  *v41 = 7;
  v76 = v41 + 1;
  v77 = v41 + 1;
  v42 = operator new(1uLL);
  v72 = v42;
  *v42 = 13;
  v73 = v42 + 1;
  v74 = v42 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v212, (uint64_t)&v75, (uint64_t)&v72);
  v43 = operator new(1uLL);
  v69 = v43;
  *v43 = 17;
  v70 = v43 + 1;
  v71 = v43 + 1;
  v44 = operator new(1uLL);
  v66 = v44;
  *v44 = 11;
  v67 = v44 + 1;
  v68 = v44 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v213, (uint64_t)&v69, (uint64_t)&v66);
  v45 = operator new(1uLL);
  v63 = v45;
  *v45 = 17;
  v64 = v45 + 1;
  v65 = v45 + 1;
  v46 = operator new(1uLL);
  v60 = v46;
  *v46 = 12;
  v61 = v46 + 1;
  v62 = v46 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v214, (uint64_t)&v63, (uint64_t)&v60);
  v47 = operator new(1uLL);
  v57 = v47;
  *v47 = 17;
  v58 = v47 + 1;
  v59 = v47 + 1;
  v48 = operator new(1uLL);
  __p = v48;
  *v48 = 13;
  v55 = v48 + 1;
  v56 = v48 + 1;
  std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100]<true,0>(v215, (uint64_t)&v57, (uint64_t)&__p);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v191[1] = a1;
  v192 = 0;
  v49 = operator new(0x450uLL);
  *a1 = v49;
  a1[1] = v49;
  a1[2] = v49 + 138;
  a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const*,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const*,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>((uint64_t)(a1 + 2), (uint64_t)v193, (uint64_t)&v216, v49);
  v50 = 138;
  do
  {
    v51 = &v193[v50];
    v52 = (void *)v191[v50];
    if (v52)
    {
      *(v51 - 2) = v52;
      operator delete(v52);
    }
    v53 = (void *)*(v51 - 6);
    if (v53)
    {
      *(void **)((char *)&v189 + v50 * 8) = v53;
      operator delete(v53);
    }
    v50 -= 6;
  }
  while (v50 * 8);
  if (__p)
  {
    v55 = __p;
    operator delete(__p);
  }
  if (v57)
  {
    v58 = v57;
    operator delete(v57);
  }
  if (v60)
  {
    v61 = v60;
    operator delete(v60);
  }
  if (v63)
  {
    v64 = v63;
    operator delete(v63);
  }
  if (v66)
  {
    v67 = v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  if (v72)
  {
    v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    v76 = v75;
    operator delete(v75);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v81)
  {
    v82 = v81;
    operator delete(v81);
  }
  if (v84)
  {
    v85 = v84;
    operator delete(v84);
  }
  if (v87)
  {
    v88 = v87;
    operator delete(v87);
  }
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  if (v96)
  {
    v97 = v96;
    operator delete(v96);
  }
  if (v99)
  {
    v100 = v99;
    operator delete(v99);
  }
  if (v102)
  {
    v103 = v102;
    operator delete(v102);
  }
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  if (v108)
  {
    v109 = v108;
    operator delete(v108);
  }
  if (v111)
  {
    v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v117)
  {
    v118 = v117;
    operator delete(v117);
  }
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  if (v129)
  {
    v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    v133 = v132;
    operator delete(v132);
  }
  if (v135)
  {
    v136 = v135;
    operator delete(v135);
  }
  if (v138)
  {
    v139 = v138;
    operator delete(v138);
  }
  if (v141)
  {
    v142 = v141;
    operator delete(v141);
  }
  if (v144)
  {
    v145 = v144;
    operator delete(v144);
  }
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  if (v150)
  {
    v151 = v150;
    operator delete(v150);
  }
  if (v153)
  {
    v154 = v153;
    operator delete(v153);
  }
  if (v156)
  {
    v157 = v156;
    operator delete(v156);
  }
  if (v159)
  {
    v160 = v159;
    operator delete(v159);
  }
  if (v162)
  {
    v163 = v162;
    operator delete(v162);
  }
  if (v165)
  {
    v166 = v165;
    operator delete(v165);
  }
  if (v168)
  {
    v169 = v168;
    operator delete(v168);
  }
  if (v171)
  {
    v172 = v171;
    operator delete(v171);
  }
  if (v174)
  {
    v175 = v174;
    operator delete(v174);
  }
  if (v177)
  {
    v178 = v177;
    operator delete(v177);
  }
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
  {
    v184 = v183;
    operator delete(v183);
  }
  if (v186)
  {
    v187 = v186;
    operator delete(v186);
  }
  if (v189)
  {
    v190 = v189;
    operator delete(v189);
  }
}

void sub_1ADFC0C50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  void *a64;
  void *a67;
  void *a70;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t i;
  void *v75;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  void *v87;
  void *v88;
  void *v89;
  void *v90;
  void *v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  void *v99;

  v72 = v70;
  *(_QWORD *)(v72 + 8) = v71;
  std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x458]);
  for (i = 1056; i != -48; i -= 48)
    kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)((char *)&STACK[0x468] + i));
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  if (a16)
    operator delete(a16);
  if (a19)
    operator delete(a19);
  if (a22)
    operator delete(a22);
  if (a25)
    operator delete(a25);
  if (a28)
    operator delete(a28);
  if (a31)
    operator delete(a31);
  if (a34)
    operator delete(a34);
  if (a37)
    operator delete(a37);
  if (a40)
    operator delete(a40);
  if (a43)
    operator delete(a43);
  if (a46)
    operator delete(a46);
  if (a49)
    operator delete(a49);
  if (a52)
    operator delete(a52);
  if (a55)
    operator delete(a55);
  if (a58)
    operator delete(a58);
  if (a61)
    operator delete(a61);
  if (a64)
    operator delete(a64);
  if (a67)
    operator delete(a67);
  if (a70)
    operator delete(a70);
  v75 = (void *)STACK[0x200];
  if (STACK[0x200])
  {
    STACK[0x208] = (unint64_t)v75;
    operator delete(v75);
  }
  v76 = (void *)STACK[0x218];
  if (STACK[0x218])
  {
    STACK[0x220] = (unint64_t)v76;
    operator delete(v76);
  }
  v77 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v77;
    operator delete(v77);
  }
  v78 = (void *)STACK[0x248];
  if (STACK[0x248])
  {
    STACK[0x250] = (unint64_t)v78;
    operator delete(v78);
  }
  v79 = (void *)STACK[0x260];
  if (STACK[0x260])
  {
    STACK[0x268] = (unint64_t)v79;
    operator delete(v79);
  }
  v80 = (void *)STACK[0x278];
  if (STACK[0x278])
  {
    STACK[0x280] = (unint64_t)v80;
    operator delete(v80);
  }
  v81 = (void *)STACK[0x290];
  if (STACK[0x290])
  {
    STACK[0x298] = (unint64_t)v81;
    operator delete(v81);
  }
  v82 = (void *)STACK[0x2A8];
  if (STACK[0x2A8])
  {
    STACK[0x2B0] = (unint64_t)v82;
    operator delete(v82);
  }
  v83 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v83;
    operator delete(v83);
  }
  v84 = (void *)STACK[0x2D8];
  if (STACK[0x2D8])
  {
    STACK[0x2E0] = (unint64_t)v84;
    operator delete(v84);
  }
  v85 = (void *)STACK[0x2F0];
  if (STACK[0x2F0])
  {
    STACK[0x2F8] = (unint64_t)v85;
    operator delete(v85);
  }
  v86 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v86;
    operator delete(v86);
  }
  v87 = (void *)STACK[0x320];
  if (STACK[0x320])
  {
    STACK[0x328] = (unint64_t)v87;
    operator delete(v87);
  }
  v88 = (void *)STACK[0x338];
  if (STACK[0x338])
  {
    STACK[0x340] = (unint64_t)v88;
    operator delete(v88);
  }
  v89 = (void *)STACK[0x350];
  if (STACK[0x350])
  {
    STACK[0x358] = (unint64_t)v89;
    operator delete(v89);
  }
  v90 = (void *)STACK[0x368];
  if (STACK[0x368])
  {
    STACK[0x370] = (unint64_t)v90;
    operator delete(v90);
  }
  v91 = (void *)STACK[0x380];
  if (STACK[0x380])
  {
    STACK[0x388] = (unint64_t)v91;
    operator delete(v91);
  }
  v92 = (void *)STACK[0x398];
  if (STACK[0x398])
  {
    STACK[0x3A0] = (unint64_t)v92;
    operator delete(v92);
  }
  v93 = (void *)STACK[0x3B0];
  if (STACK[0x3B0])
  {
    STACK[0x3B8] = (unint64_t)v93;
    operator delete(v93);
  }
  v94 = (void *)STACK[0x3C8];
  if (STACK[0x3C8])
  {
    STACK[0x3D0] = (unint64_t)v94;
    operator delete(v94);
  }
  v95 = (void *)STACK[0x3E0];
  if (STACK[0x3E0])
  {
    STACK[0x3E8] = (unint64_t)v95;
    operator delete(v95);
  }
  v96 = (void *)STACK[0x3F8];
  if (STACK[0x3F8])
  {
    STACK[0x400] = (unint64_t)v96;
    operator delete(v96);
  }
  v97 = (void *)STACK[0x410];
  if (STACK[0x410])
  {
    STACK[0x418] = (unint64_t)v97;
    operator delete(v97);
  }
  v98 = (void *)STACK[0x428];
  if (STACK[0x428])
  {
    STACK[0x430] = (unint64_t)v98;
    operator delete(v98);
  }
  v99 = (void *)STACK[0x440];
  if (STACK[0x440])
  {
    STACK[0x448] = (unint64_t)v99;
    operator delete(v99);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFC1034()
{
  JUMPOUT(0x1ADFC0DD4);
}

void sub_1ADFC1040()
{
  JUMPOUT(0x1ADFC0DE4);
}

void sub_1ADFC1050()
{
  JUMPOUT(0x1ADFC0DF4);
}

void sub_1ADFC105C()
{
  JUMPOUT(0x1ADFC0E04);
}

void sub_1ADFC106C()
{
  JUMPOUT(0x1ADFC0E14);
}

void sub_1ADFC1078()
{
  JUMPOUT(0x1ADFC0E24);
}

void sub_1ADFC1088()
{
  JUMPOUT(0x1ADFC0E34);
}

void sub_1ADFC1094()
{
  JUMPOUT(0x1ADFC0E44);
}

void sub_1ADFC10A4()
{
  JUMPOUT(0x1ADFC0E54);
}

void sub_1ADFC10B0()
{
  JUMPOUT(0x1ADFC0E64);
}

void sub_1ADFC10C0()
{
  JUMPOUT(0x1ADFC0E74);
}

void sub_1ADFC10CC()
{
  JUMPOUT(0x1ADFC0E84);
}

void sub_1ADFC10DC()
{
  JUMPOUT(0x1ADFC0E94);
}

void sub_1ADFC10E8()
{
  JUMPOUT(0x1ADFC0EA4);
}

void sub_1ADFC10F8()
{
  JUMPOUT(0x1ADFC0EB4);
}

void sub_1ADFC1104()
{
  JUMPOUT(0x1ADFC0EC4);
}

void sub_1ADFC1114()
{
  JUMPOUT(0x1ADFC0ED4);
}

void sub_1ADFC1120()
{
  JUMPOUT(0x1ADFC0EE4);
}

void sub_1ADFC1130()
{
  JUMPOUT(0x1ADFC0EF4);
}

void sub_1ADFC113C()
{
  JUMPOUT(0x1ADFC0F04);
}

void sub_1ADFC114C()
{
  JUMPOUT(0x1ADFC0F14);
}

void sub_1ADFC1158()
{
  JUMPOUT(0x1ADFC0F24);
}

void sub_1ADFC1168()
{
  JUMPOUT(0x1ADFC0F34);
}

void sub_1ADFC1174()
{
  JUMPOUT(0x1ADFC0F44);
}

void sub_1ADFC1184()
{
  JUMPOUT(0x1ADFC0F54);
}

void sub_1ADFC1190()
{
  JUMPOUT(0x1ADFC0F64);
}

void sub_1ADFC11A0()
{
  JUMPOUT(0x1ADFC0F74);
}

void sub_1ADFC11AC()
{
  JUMPOUT(0x1ADFC0F84);
}

void sub_1ADFC11BC()
{
  JUMPOUT(0x1ADFC0F94);
}

void sub_1ADFC11C8()
{
  JUMPOUT(0x1ADFC0FA4);
}

void sub_1ADFC11D8()
{
  JUMPOUT(0x1ADFC0FB4);
}

void sub_1ADFC11E4()
{
  JUMPOUT(0x1ADFC0FC4);
}

void sub_1ADFC11F4()
{
  JUMPOUT(0x1ADFC0FD4);
}

void sub_1ADFC1200()
{
  JUMPOUT(0x1ADFC0FE4);
}

void sub_1ADFC120C()
{
  JUMPOUT(0x1ADFC0FE4);
}

void sub_1ADFC121C()
{
  JUMPOUT(0x1ADFC0FF4);
}

void quasar::rescoring::ComputeRanks(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;

  v17 = 0;
  v18 = 0;
  v16 = 0;
  v19 = (int)kaldi::MatrixBase<float>::NumRows(a1);
  v20 = 0;
  std::vector<unsigned long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>>((char *)&v16, (uint64_t *)&v20, (uint64_t *)&v19, v19);
  v6 = 126 - 2 * __clz(v17 - v16);
  v20 = (uint64_t *)a1;
  if (v17 == v16)
    v7 = 0;
  else
    v7 = v6;
  std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>(v16, v17, &v20, v7, 1);
  std::vector<unsigned long>::vector(a3, v17 - v16);
  v8 = v16;
  if (v17 == v16)
  {
    if (!v16)
      return;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = v17 - v16;
    v13 = *(_QWORD *)a1;
    v14 = *(_DWORD *)(a1 + 16);
    v15 = *a3;
    if (v12 <= 1)
      v12 = 1;
    do
    {
      if (v10 && (!a2 || *(float *)(v13 + 4 * (v9 - v14)) != *(float *)(v13 + 4 * v9)))
        ++v11;
      *(_QWORD *)(v15 + 8 * v8[v10++]) = v11;
      v9 += v14;
    }
    while (v12 != v10);
  }
  v17 = v8;
  operator delete(v8);
}

void sub_1ADFC1344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E5CFFB18;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E5CFFB18;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return vabds_f32(*a2, *(float *)(a1 + 8)) <= 0.000001;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_2>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E5CFFB70;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E5CFFB70;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return vabds_f32(*a2, *(float *)(a1 + 8)) <= 0.000001;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_3>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E5CFFBC8;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E5CFFBC8;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(a1 + 8) < *a2;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_4>,BOOL ()(float)>::target_type()
{
}

void std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_DWORD *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::__clone(uint64_t a1)
{
  _DWORD *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_1E5CFFC20;
  result[2] = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::__clone(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_1E5CFFC20;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  return result;
}

BOOL std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::operator()(uint64_t a1, float *a2)
{
  return *(float *)(a1 + 8) > *a2;
}

uint64_t std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5,std::allocator<quasar::rescoring::GenerateTransformedFeatureValues(quasar::rescoring::NBestList const&,quasar::rescoring::Featurizer const&,std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>> const&,std::map<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>,kaldi::Matrix<float>> *)::$_5>,BOOL ()(float)>::target_type()
{
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const*,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>> const*,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>::pair[abi:ne180100](v4, v6);
      v6 += 48;
      v4 = v11 + 6;
      v11 += 6;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADFC1754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>,std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 48;
      std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

char *std::vector<unsigned long>::__init_with_size[abi:ne180100]<boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<unsigned long,boost::use_default,boost::use_default>>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = *a2;
    v8 = *a3;
    for (i = (_QWORD *)*((_QWORD *)v6 + 1); v8 != v7; ++v7)
      *i++ = v7;
    *((_QWORD *)v6 + 1) = i;
  }
  return result;
}

void sub_1ADFC184C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>(uint64_t *result, uint64_t *a2, uint64_t **a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  float v21;
  uint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  BOOL v35;
  int v36;
  uint64_t *v37;
  uint64_t *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  uint64_t *v68;
  int64_t v69;
  uint64_t *v70;
  int64_t v71;
  int64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  float v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  float v98;
  uint64_t *v99;
  uint64_t *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  float v106;

  v9 = result;
LABEL_2:
  v10 = v9;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v45 = *(a2 - 1);
        v46 = *v10;
        if (*(float *)(**a3 + 4 * *((_DWORD *)*a3 + 4) * (int)v45) < *(float *)(**a3
                                                                                 + 4
                                                                                 * (int)(*((_DWORD *)*a3 + 4) * *v10)))
        {
          *v10 = v45;
          *(a2 - 1) = v46;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v10, v10 + 1, a2 - 1, a3);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v10, v10 + 1, v10 + 2, a2 - 1, a3);
      case 5uLL:
        v47 = v10 + 1;
        v48 = v10 + 2;
        v49 = v10 + 3;
        result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v10, v10 + 1, v10 + 2, v10 + 3, a3);
        v50 = *(a2 - 1);
        v51 = v10[3];
        v52 = **a3;
        v53 = *((_DWORD *)*a3 + 4);
        if (*(float *)(v52 + 4 * v53 * (int)v50) < *(float *)(v52 + 4 * v53 * (int)v51))
        {
          *v49 = v50;
          *(a2 - 1) = v51;
          v54 = *v49;
          v55 = *v48;
          v56 = *(float *)(v52 + 4 * (int)(v53 * *v49));
          if (v56 < *(float *)(v52 + 4 * (int)(v53 * *v48)))
          {
            *v48 = v54;
            *v49 = v55;
            v57 = *v47;
            if (v56 < *(float *)(v52 + 4 * (int)(v53 * *v47)))
            {
              v10[1] = v54;
              v10[2] = v57;
              v58 = *v10;
              if (v56 < *(float *)(v52 + 4 * (int)(v53 * *v10)))
              {
                *v10 = v54;
                v10[1] = v58;
              }
            }
          }
        }
        return result;
      default:
        if (v11 <= 191)
        {
          if ((a5 & 1) != 0)
          {
            if (v10 != a2)
            {
              v59 = v10 + 1;
              if (v10 + 1 != a2)
              {
                v60 = 0;
                v61 = **a3;
                v62 = *((_DWORD *)*a3 + 4);
                v63 = v10;
                do
                {
                  v65 = *v63;
                  v64 = v63[1];
                  v63 = v59;
                  v66 = *(float *)(v61 + 4 * v62 * (int)v64);
                  if (v66 < *(float *)(v61 + 4 * v62 * (int)v65))
                  {
                    v67 = v60;
                    while (1)
                    {
                      *(uint64_t *)((char *)v10 + v67 + 8) = v65;
                      if (!v67)
                        break;
                      v65 = *(uint64_t *)((char *)v10 + v67 - 8);
                      v67 -= 8;
                      if (v66 >= *(float *)(v61 + 4 * v62 * (int)v65))
                      {
                        v68 = (uint64_t *)((char *)v10 + v67 + 8);
                        goto LABEL_75;
                      }
                    }
                    v68 = v10;
LABEL_75:
                    *v68 = v64;
                  }
                  v59 = v63 + 1;
                  v60 += 8;
                }
                while (v63 + 1 != a2);
              }
            }
          }
          else if (v10 != a2)
          {
            v101 = v10 + 1;
            if (v10 + 1 != a2)
            {
              v102 = **a3;
              v103 = *((_DWORD *)*a3 + 4);
              do
              {
                v105 = *v9;
                v104 = v9[1];
                v9 = v101;
                v106 = *(float *)(v102 + 4 * v103 * (int)v104);
                if (v106 < *(float *)(v102 + 4 * v103 * (int)v105))
                {
                  do
                  {
                    *v101 = v105;
                    v105 = *(v101 - 2);
                    --v101;
                  }
                  while (v106 < *(float *)(v102 + 4 * v103 * (int)v105));
                  *v101 = v104;
                }
                v101 = v9 + 1;
              }
              while (v9 + 1 != a2);
            }
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v69 = (v12 - 2) >> 1;
            v70 = *a3;
            v71 = v69;
            do
            {
              v72 = v71;
              if (v69 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = &v10[v73];
                if (2 * v72 + 2 >= (uint64_t)v12)
                {
                  v75 = *v70;
                  v76 = *((_DWORD *)v70 + 4);
                }
                else
                {
                  v75 = *v70;
                  v76 = *((_DWORD *)v70 + 4);
                  if (*(float *)(*v70 + 4 * v76 * *(_DWORD *)v74) < *(float *)(*v70 + 4
                                                                                       * v76
                                                                                       * *((_DWORD *)v74 + 2)))
                  {
                    ++v74;
                    v73 = 2 * v72 + 2;
                  }
                }
                v77 = &v10[v72];
                v78 = *v74;
                v79 = *v77;
                result = (uint64_t *)(v76 * *v77);
                v80 = *(float *)(v75 + 4 * (int)result);
                if (*(float *)(v75 + 4 * (int)(v76 * *v74)) >= v80)
                {
                  do
                  {
                    result = v74;
                    *v77 = v78;
                    if (v69 < v73)
                      break;
                    v81 = 2 * v73;
                    v73 = (2 * v73) | 1;
                    v74 = &v10[v73];
                    v82 = v81 + 2;
                    if (v82 < (uint64_t)v12
                      && *(float *)(v75 + 4 * v76 * *(_DWORD *)v74) < *(float *)(v75 + 4
                                                                                       * v76
                                                                                       * *((_DWORD *)v74 + 2)))
                    {
                      ++v74;
                      v73 = v82;
                    }
                    v78 = *v74;
                    v77 = result;
                  }
                  while (*(float *)(v75 + 4 * (int)(v76 * *v74)) >= v80);
                  *result = v79;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v83 = (unint64_t)v11 >> 3;
            do
            {
              v84 = 0;
              v85 = *v10;
              v86 = *a3;
              v87 = v10;
              do
              {
                v88 = v87;
                v87 += v84 + 1;
                v89 = 2 * v84;
                v84 = (2 * v84) | 1;
                v90 = v89 + 2;
                if (v90 < v83)
                {
                  result = (uint64_t *)*((unsigned int *)v87 + 2);
                  if (*(float *)(*v86 + 4 * *((_DWORD *)v86 + 4) * *(_DWORD *)v87) < *(float *)(*v86
                                                                                                 + 4
                                                                                                 * *((_DWORD *)v86 + 4)
                                                                                                 * (int)result))
                  {
                    ++v87;
                    v84 = v90;
                  }
                }
                *v88 = *v87;
              }
              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              if (v87 == --a2)
              {
                *v87 = v85;
              }
              else
              {
                *v87 = *a2;
                *a2 = v85;
                v91 = (char *)v87 - (char *)v10 + 8;
                if (v91 >= 9)
                {
                  v92 = (((unint64_t)v91 >> 3) - 2) >> 1;
                  v93 = &v10[v92];
                  v94 = *v93;
                  v95 = *v87;
                  v96 = *v86;
                  v97 = *((_DWORD *)v86 + 4);
                  v98 = *(float *)(v96 + 4 * (int)(v97 * *v87));
                  if (*(float *)(v96 + 4 * (int)(v97 * *v93)) < v98)
                  {
                    do
                    {
                      v99 = v93;
                      *v87 = v94;
                      if (!v92)
                        break;
                      v92 = (v92 - 1) >> 1;
                      v93 = &v10[v92];
                      v94 = *v93;
                      v87 = v99;
                    }
                    while (*(float *)(v96 + 4 * (int)(v97 * *v93)) < v98);
                    *v99 = v95;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(&v9[v12 >> 1], v9, a2 - 1, a3);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v9, &v9[v12 >> 1], a2 - 1, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v9 + 1, v14 - 1, a2 - 2, a3);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v9 + 2, &v9[v13 + 1], a2 - 3, a3);
          result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v14 - 1, v14, &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        v16 = *v9;
        v17 = *a3;
        if ((a5 & 1) == 0)
        {
          v18 = *v17;
          v19 = *((_DWORD *)v17 + 4);
          v20 = v19 * v16;
          v21 = *(float *)(v18 + 4 * v19 * (int)v16);
          if (*(float *)(v18 + 4 * v19 * *((_DWORD *)v9 - 2)) < v21)
            goto LABEL_12;
          if (v21 >= *(float *)(v18 + 4 * v19 * *((_DWORD *)a2 - 2)))
          {
            v37 = v9 + 1;
            do
            {
              v10 = v37;
              if (v37 >= a2)
                break;
              ++v37;
            }
            while (v21 >= *(float *)(v18 + 4 * v19 * *(_DWORD *)v10));
          }
          else
          {
            v10 = v9;
            do
              v36 = *((_DWORD *)v10++ + 2);
            while (v21 >= *(float *)(v18 + 4 * v19 * v36));
          }
          v38 = a2;
          if (v10 < a2)
          {
            v38 = a2;
            do
              v39 = *((_DWORD *)v38-- - 2);
            while (v21 < *(float *)(v18 + 4 * v19 * v39));
          }
          if (v10 < v38)
          {
            v40 = *v10;
            v41 = *v38;
            do
            {
              *v10 = v41;
              *v38 = v40;
              do
              {
                v42 = v10[1];
                ++v10;
                v40 = v42;
              }
              while (v21 >= *(float *)(v18 + 4 * v19 * (int)v42));
              do
              {
                v43 = *--v38;
                v41 = v43;
              }
              while (v21 < *(float *)(v18 + 4 * v19 * (int)v43));
            }
            while (v10 < v38);
          }
          v44 = v10 - 1;
          if (v10 - 1 != v9)
            *v9 = *v44;
          a5 = 0;
          *v44 = v16;
          continue;
        }
        v18 = *v17;
        v19 = *((_DWORD *)v17 + 4);
        v20 = v19 * v16;
LABEL_12:
        v22 = 0;
        v23 = *(float *)(v18 + 4 * v20);
        do
          v24 = v9[++v22];
        while (*(float *)(v18 + 4 * v19 * (int)v24) < v23);
        v25 = &v9[v22];
        v26 = a2;
        if (v22 == 1)
        {
          v26 = a2;
          do
          {
            if (v25 >= v26)
              break;
            v28 = *((_DWORD *)v26-- - 2);
          }
          while (*(float *)(v18 + 4 * v19 * v28) >= v23);
        }
        else
        {
          do
            v27 = *((_DWORD *)v26-- - 2);
          while (*(float *)(v18 + 4 * v19 * v27) >= v23);
        }
        if (v25 >= v26)
        {
          v34 = v25 - 1;
        }
        else
        {
          v29 = *v26;
          v30 = &v9[v22];
          v31 = v26;
          do
          {
            *v30 = v29;
            *v31 = v24;
            do
            {
              v32 = v30[1];
              ++v30;
              v24 = v32;
            }
            while (*(float *)(v18 + 4 * v19 * (int)v32) < v23);
            do
            {
              v33 = *--v31;
              v29 = v33;
            }
            while (*(float *)(v18 + 4 * v19 * (int)v33) >= v23);
          }
          while (v30 < v31);
          v34 = v30 - 1;
        }
        if (v34 != v9)
          *v9 = *v34;
        *v34 = v16;
        if (v25 < v26)
        {
LABEL_33:
          result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *,false>(v9, v34, a3, a4, a5 & 1);
          a5 = 0;
          v10 = v34 + 1;
          continue;
        }
        v35 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v9, v34, a3);
        v10 = v34 + 1;
        result = (uint64_t *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(v34 + 1, a2, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_33;
        }
        a2 = v34;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, uint64_t **a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *result;
  v6 = **a4;
  v7 = *((_DWORD *)*a4 + 4);
  v8 = *(float *)(v6 + 4 * (int)(v7 * *a2));
  v9 = *(float *)(v6 + 4 * (int)(v7 * *result));
  v10 = *a3;
  v11 = *(float *)(v6 + 4 * (int)(v7 * *a3));
  if (v8 >= v9)
  {
    if (v11 < v8)
    {
      *a2 = v10;
      *a3 = v4;
      v12 = *result;
      if (*(float *)(v6 + 4 * (int)(v7 * *a2)) < *(float *)(v6 + 4 * (int)(v7 * *result)))
      {
        *result = *a2;
        *a2 = v12;
      }
    }
  }
  else
  {
    if (v11 >= v8)
    {
      *result = v4;
      *a2 = v5;
      if (*(float *)(v6 + 4 * (int)(v7 * *a3)) >= v9)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v10;
    }
    *a3 = v5;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  uint64_t v32;
  uint64_t v33;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v9 = *a1;
      if (*(float *)(**a3 + 4 * *((_DWORD *)*a3 + 4) * (int)v8) < *(float *)(**a3
                                                                              + 4 * (int)(*((_DWORD *)*a3 + 4) * *a1)))
      {
        *a1 = v8;
        *(a2 - 1) = v9;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v22 = a1 + 1;
      v23 = a1 + 2;
      v24 = a1 + 3;
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v25 = *(a2 - 1);
      v26 = a1[3];
      v27 = **a3;
      v28 = *((_DWORD *)*a3 + 4);
      if (*(float *)(v27 + 4 * v28 * (int)v25) < *(float *)(v27 + 4 * v28 * (int)v26))
      {
        *v24 = v25;
        *(a2 - 1) = v26;
        v29 = *v24;
        v30 = *v23;
        v31 = *(float *)(v27 + 4 * (int)(v28 * *v24));
        if (v31 < *(float *)(v27 + 4 * (int)(v28 * *v23)))
        {
          *v23 = v29;
          *v24 = v30;
          v32 = *v22;
          if (v31 < *(float *)(v27 + 4 * (int)(v28 * *v22)))
          {
            a1[1] = v29;
            a1[2] = v32;
            v33 = *a1;
            if (v31 < *(float *)(v27 + 4 * (int)(v28 * *a1)))
            {
              *a1 = v29;
              a1[1] = v33;
            }
          }
        }
      }
      return 1;
    default:
      v10 = a1 + 2;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = **a3;
      v14 = *((_DWORD *)*a3 + 4);
      v15 = 24;
      break;
  }
  while (1)
  {
    v16 = *v11;
    v17 = *v10;
    v18 = *(float *)(v13 + 4 * (int)(v14 * *v11));
    if (v18 < *(float *)(v13 + 4 * (int)(v14 * *v10)))
    {
      v19 = v15;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v19) = v17;
        v20 = v19 - 8;
        if (v19 == 8)
          break;
        v17 = *(uint64_t *)((char *)a1 + v19 - 16);
        v19 -= 8;
        if (v18 >= *(float *)(v13 + 4 * v14 * (int)v17))
        {
          v21 = (uint64_t *)((char *)a1 + v20);
          goto LABEL_13;
        }
      }
      v21 = a1;
LABEL_13:
      *v21 = v16;
      if (++v12 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v15 += 8;
    if (++v11 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::rescoring::ComputeRanks(kaldi::Matrix<float> const&,BOOL)::$_0 &,unsigned long *>(a1, a2, a3, a5);
  v11 = *a3;
  v12 = **a5;
  v13 = *((_DWORD *)*a5 + 4);
  if (*(float *)(v12 + 4 * (int)(v13 * *a4)) < *(float *)(v12 + 4 * (int)(v13 * *a3)))
  {
    *a3 = *a4;
    *a4 = v11;
    v14 = *a2;
    if (*(float *)(v12 + 4 * (int)(v13 * *a3)) < *(float *)(v12 + 4 * (int)(v13 * *a2)))
    {
      *a2 = *a3;
      *a3 = v14;
      v15 = *a1;
      if (*(float *)(v12 + 4 * (int)(v13 * *a2)) < *(float *)(v12 + 4 * (int)(v13 * *a1)))
      {
        *a1 = *a2;
        *a2 = v15;
      }
    }
  }
  return result;
}

uint64_t quasar::QuasarG2PFactory::g2pModelExist(quasar::QuasarG2PFactory *this, quasar::SystemConfig *a2)
{
  uint64_t Ptree;
  const std::string *String;
  _QWORD *v5;
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  std::string *v10;
  std::string::size_type v11;
  uint64_t v12;
  void *__p[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::string v31;

  std::string::basic_string[abi:ne180100]<0>(&v31, "");
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)this, (uint64_t)__p);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "model-file");
  String = (const std::string *)quasar::PTree::getString(Ptree, (__int128 *)__p);
  std::string::operator=(&v31, String);
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  if (quasar::gLogLevel >= 5)
  {
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"model-file", 10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)": ", 2);
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v31;
    else
      v7 = (std::string *)v31.__r_.__value_.__r.__words[0];
    if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
    else
      size = v31.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (quasar::filesystem::exists((char *)&v31) && !quasar::filesystem::is_directory((char *)&v31))
  {
    v12 = 1;
  }
  else
  {
    if (quasar::gLogLevel >= 2)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"modelFile doesn't exist, or it's a directory: ", 46);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v10 = &v31;
      else
        v10 = (std::string *)v31.__r_.__value_.__r.__words[0];
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
      else
        v11 = v31.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
    }
    v12 = 0;
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  return v12;
}

void sub_1ADFC2660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  uint64_t v25;
  void *v27;
  void *v28;
  _QWORD *v29;
  const char *v30;
  size_t v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  _QWORD *v35;
  const char *v36;
  size_t v37;
  _QWORD *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;

  switch(a2)
  {
    case 4:
      v27 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v28 = v27;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"PTree::JsonParseError, Error reading JSON config file: ", 55);
        v30 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        v31 = strlen(v30);
        v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v30, v31);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v32);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
    case 3:
      v33 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v34 = v33;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"PTree::Error, Error reading JSON config file: ", 46);
        v36 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
        v37 = strlen(v36);
        v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)v36, v37);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v38);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
    case 2:
      __cxa_begin_catch(a1);
      __cxa_end_catch();
      goto LABEL_19;
    default:
      if (a2 != 1)
      {
        if (*(char *)(v25 - 33) < 0)
          operator delete(*(void **)(v25 - 56));
        _Unwind_Resume(a1);
      }
      v39 = __cxa_begin_catch(a1);
      if (quasar::gLogLevel >= 2)
      {
        v40 = v39;
        a24 = 0u;
        a25 = 0u;
        a22 = 0u;
        a23 = 0u;
        a20 = 0u;
        a21 = 0u;
        a18 = 0u;
        a19 = 0u;
        a16 = 0u;
        a17 = 0u;
        a14 = 0u;
        a15 = 0u;
        a12 = 0u;
        a13 = 0u;
        a10 = 0u;
        a11 = 0u;
        __p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Error reading JSON config file: ", 32);
        v42 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
        v43 = strlen(v42);
        v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)v42, v43);
        std::endl[abi:ne180100]<char,std::char_traits<char>>(v44);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&__p);
      }
      break;
  }
  __cxa_end_catch();
LABEL_19:
  JUMPOUT(0x1ADFC262CLL);
}

void sub_1ADFC28F4()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADFC2690);
}

void sub_1ADFC2918()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADFC2690);
}

void sub_1ADFC2938()
{
  __cxa_end_catch();
  JUMPOUT(0x1ADFC2690);
}

void quasar::QuasarG2PFactory::createQuasarG2P(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, quasar::SystemConfig *a4@<X3>, int a5@<W4>, void **a6@<X8>)
{
  uint64_t Ptree;
  int v12;
  void **v13;
  int v14;
  __int128 *v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  __int128 v40;
  void *v41;
  int v42;

  v42 = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a4, (uint64_t)__p);
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(v38, "engine-type");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v38, (std::string *)__p);
  std::string::basic_string[abi:ne180100]<0>(v36, "PNSR");
  v12 = BYTE8(v20);
  v13 = __p;
  if (!BYTE8(v20))
    v13 = v36;
  v40 = *(_OWORD *)v13;
  v41 = v13[2];
  v13[1] = 0;
  v13[2] = 0;
  *v13 = 0;
  if (v37 < 0)
  {
    operator delete(v36[0]);
    v12 = BYTE8(v20);
  }
  if (v12 && SBYTE7(v20) < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v38[0]);
  v14 = SHIBYTE(v41);
  if (SHIBYTE(v41) < 0)
  {
    if (*((_QWORD *)&v40 + 1))
    {
      if (*((_QWORD *)&v40 + 1) != 4)
        goto LABEL_30;
      v15 = (__int128 *)v40;
      if (*(_DWORD *)v40 != 1381191248)
      {
LABEL_20:
        if (*(_DWORD *)v15 == 1128612944)
        {
          if (quasar::gLogLevel >= 5)
          {
            v34 = 0u;
            v35 = 0u;
            v32 = 0u;
            v33 = 0u;
            v30 = 0u;
            v31 = 0u;
            v28 = 0u;
            v29 = 0u;
            v26 = 0u;
            v27 = 0u;
            v24 = 0u;
            v25 = 0u;
            v22 = 0u;
            v23 = 0u;
            v20 = 0u;
            v21 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating PDecG2P object", 23);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
          }
          std::make_unique[abi:ne180100]<quasar::PDecG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>(a1, a2, (uint64_t)a3, (uint64_t)a4, (unsigned int *)&v42, (uint64_t *)__p);
          goto LABEL_27;
        }
LABEL_30:
        v34 = 0u;
        v35 = 0u;
        v32 = 0u;
        v33 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        v20 = 0u;
        v21 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown quasar G2P engine type: ", 32);
        if (v14 >= 0)
          v17 = &v40;
        else
          v17 = (__int128 *)v40;
        if (v14 >= 0)
          v18 = v14;
        else
          v18 = *((_QWORD *)&v40 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)v17, v18);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
    }
  }
  else if (HIBYTE(v41))
  {
    if (HIBYTE(v41) != 4)
      goto LABEL_30;
    if ((_DWORD)v40 != 1381191248)
    {
      v15 = &v40;
      goto LABEL_20;
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating PhonetisaurusG2P object", 32);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  std::make_unique[abi:ne180100]<quasar::PhonetisaurusG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>(a1, a2, a3, a4, &v42, (uint64_t *)__p);
LABEL_27:
  *a6 = __p[0];
  if (v14 < 0)
    operator delete((void *)v40);
}

void sub_1ADFC2C88()
{
  JUMPOUT(0x1ADFC2C98);
}

void sub_1ADFC2C94(_Unwind_Exception *exception_object)
{
  char v1;
  uint64_t v2;

  if (v1 < 0)
    operator delete(*(void **)(v2 - 96));
  _Unwind_Resume(exception_object);
}

void sub_1ADFC2CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 && a14 < 0)
    operator delete(__p);
  if (*(char *)(v15 - 97) < 0)
    operator delete(*(void **)(v15 - 120));
  _Unwind_Resume(a1);
}

void sub_1ADFC2CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x1ADFC2CE8);
  JUMPOUT(0x1ADFC2CECLL);
}

void std::make_unique[abi:ne180100]<quasar::PhonetisaurusG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, quasar::SystemConfig *a4@<X3>, int *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v12 = operator new();
  v13 = a1[1];
  v34 = *a1;
  v35 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = a2[1];
  v32 = *a2;
  v33 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = *a5;
  std::string::basic_string[abi:ne180100]<0>(v30, "g2p");
  std::string::basic_string[abi:ne180100]<0>(v28, "");
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  quasar::PhonetisaurusG2P::PhonetisaurusG2P(v12, &v34, &v32, a3, a4, v19, (uint64_t)v30, (__int128 *)v28, (__int128 *)__p);
  *a6 = v12;
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  if (v31 < 0)
    operator delete(v30[0]);
  v20 = v33;
  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1ADFC2EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  uint64_t v28;
  uint64_t v29;

  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v29 - 80);
  MEMORY[0x1AF44D190](v28, 0x10B3C4062A477AELL);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::PDecG2P,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  v12 = operator new();
  v13 = v12;
  v14 = (std::__shared_weak_count *)a1[1];
  v28 = *a1;
  v29 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  quasar::PDecG2P::PDecG2P(v12, &v28, &v26, a3, a4, *a5);
  *a6 = v13;
  v20 = v27;
  if (v27)
  {
    v21 = (unint64_t *)&v27->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = v29;
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1ADFC305C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1AF44D190](v11, 0x10B3C4068F2B42ELL);
  _Unwind_Resume(a1);
}

BOOL quasar::QuasarG2PFactory::isPronGuesserWordpiece(quasar::QuasarG2PFactory *this, const quasar::SystemConfig *a2)
{
  uint64_t PtreeOptional;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2WP_ROOT);
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return PtreeOptional != 0;
}

void sub_1ADFC30EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::QuasarG2PFactory::createPronGuesser(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, quasar::SystemConfig *a4@<X3>, int a5@<W4>, int a6@<W5>, void **a7@<X8>)
{
  uint64_t PtreeOptional;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  void *__p[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;

  v50 = a5;
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::JIT_G2WP_ROOT);
    PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)a4, (uint64_t)__p);
    v13 = PtreeOptional;
    if (SBYTE7(v34) < 0)
    {
      operator delete(__p[0]);
      if (v13)
        goto LABEL_4;
    }
    else if (PtreeOptional)
    {
LABEL_4:
      if (quasar::gLogLevel >= 5)
      {
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        v36 = 0u;
        v37 = 0u;
        v34 = 0u;
        v35 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating JIT G2WP object", 24);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
      }
      v14 = &quasar::JIT_G2WP_ROOT;
LABEL_13:
      std::make_unique[abi:ne180100]<quasar::G2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>(a1, a2, (uint64_t)a3, (uint64_t)a4, (unsigned int *)&v50, (char **)v14, (uint64_t *)__p);
      *a7 = __p[0];
      return;
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2WP_ROOT);
  v15 = quasar::SystemConfig::getPtreeOptional((uint64_t)a4, (uint64_t)__p);
  v16 = v15;
  if (SBYTE7(v34) < 0)
  {
    operator delete(__p[0]);
    if (v16)
      goto LABEL_10;
  }
  else if (v15)
  {
LABEL_10:
    if (quasar::gLogLevel >= 5)
    {
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating G2WP object", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v14 = &quasar::G2WP_ROOT;
    goto LABEL_13;
  }
  v17 = a1[1];
  v31 = *a1;
  v32 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a2[1];
  v29 = *a2;
  v30 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  quasar::QuasarG2PFactory::createQuasarG2P(&v31, &v29, a3, a4, v50, a7);
  v23 = v30;
  if (v30)
  {
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v32;
  if (v32)
  {
    v27 = (unint64_t *)&v32->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1ADFC3394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::G2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, char **a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v14 = operator new();
  v15 = (std::__shared_weak_count *)a1[1];
  v32 = *a1;
  v33 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v30 = *a2;
  v31 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a5;
  std::string::basic_string[abi:ne180100]<0>(__p, *a6);
  quasar::G2WP::G2WP(v14, &v32, &v30, a3, a4, v21, __p);
  *a7 = v14;
  if (v29 < 0)
    operator delete(__p[0]);
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1ADFC3544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  MEMORY[0x1AF44D190](v18, 0x10B3C40EA3A4DEDLL);
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PFactory::createP2WP(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned int a6@<W5>, void **a7@<X8>)
{
  uint64_t Ptree;
  int v14;
  void **v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *__p[2];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43[2];
  char v44;
  void *v45[2];
  char v46;
  __int128 v47;
  void *v48;
  unsigned int v49;

  v49 = a6;
  Ptree = quasar::SystemConfig::getPtree(a4, a5);
  std::string::basic_string[abi:ne180100]<0>(v45, "engine-type");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)v45, (std::string *)__p);
  std::string::basic_string[abi:ne180100]<0>(v43, "PNSR");
  v14 = BYTE8(v27);
  v15 = __p;
  if (!BYTE8(v27))
    v15 = v43;
  v47 = *(_OWORD *)v15;
  v48 = v15[2];
  v15[1] = 0;
  v15[2] = 0;
  *v15 = 0;
  if (v44 < 0)
  {
    operator delete(v43[0]);
    v14 = BYTE8(v27);
  }
  if (v14 && SBYTE7(v27) < 0)
    operator delete(__p[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  v16 = SHIBYTE(v48);
  if (SHIBYTE(v48) < 0)
  {
    v17 = *((_QWORD *)&v47 + 1);
    if (*((_QWORD *)&v47 + 1) == 4)
    {
      if (*(_DWORD *)v47 == 1381191248)
        goto LABEL_24;
      goto LABEL_16;
    }
LABEL_23:
    if (!v17)
      goto LABEL_24;
LABEL_16:
    v18 = HIBYTE(v48);
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown quasar P2WP engine type: ", 33);
    if (v16 >= 0)
      v20 = &v47;
    else
      v20 = (__int128 *)v47;
    if (v16 >= 0)
      v21 = v18;
    else
      v21 = *((_QWORD *)&v47 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (SHIBYTE(v48) != 4 || (_DWORD)v47 != 1381191248)
  {
    v17 = HIBYTE(v48);
    goto LABEL_23;
  }
LABEL_24:
  if (quasar::gLogLevel >= 5)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating PhonetisaurusP2WP object ", 34);
    v23 = *(char *)(a5 + 23);
    if (v23 >= 0)
      v24 = a5;
    else
      v24 = *(_QWORD *)a5;
    if (v23 >= 0)
      v25 = *(unsigned __int8 *)(a5 + 23);
    else
      v25 = *(_QWORD *)(a5 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, v24, v25);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  std::make_unique[abi:ne180100]<quasar::PhonetisaurusP2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,std::string const&>(a1, a2, a3, a4, &v49, a5, (uint64_t *)__p);
  *a7 = __p[0];
  if (v16 < 0)
    operator delete((void *)v47);
}

void sub_1ADFC380C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if ((*(_BYTE *)(v15 - 73) & 0x80) != 0)
    operator delete(*(void **)(v15 - 96));
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<quasar::PhonetisaurusP2WP,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,std::string const&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v14 = operator new();
  v15 = v14;
  v16 = (std::__shared_weak_count *)a1[1];
  v30 = *a1;
  v31 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  v19 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  quasar::PhonetisaurusP2WP::PhonetisaurusP2WP(v14, &v30, &v28, a3, a4, *a5, a6);
  *a7 = v15;
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v31;
  if (v31)
  {
    v26 = (unint64_t *)&v31->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1ADFC39BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  MEMORY[0x1AF44D190](v11, 0x10B3C4062A477AELL);
  _Unwind_Resume(a1);
}

void quasar::QuasarG2PFactory::createG2Embedding(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int a5@<W4>, int a6@<W5>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t PtreeOptional;
  uint64_t v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unsigned int v33;

  v33 = a5;
  if (!a6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::G2EMB_ROOT);
    PtreeOptional = quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
    v15 = PtreeOptional;
    if (SBYTE7(v17) < 0)
    {
      operator delete(__p[0]);
      if (!v15)
        goto LABEL_18;
    }
    else if (!PtreeOptional)
    {
      goto LABEL_18;
    }
    if (quasar::gLogLevel >= 5)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating G2Embedding object", 27);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v13 = &quasar::G2EMB_ROOT;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)quasar::JIT_G2EMB_ROOT);
  v12 = quasar::SystemConfig::getPtreeOptional(a4, (uint64_t)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  if (v12)
  {
    if (quasar::gLogLevel >= 5)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"creating JIT G2Embedding object", 31);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    v13 = &quasar::JIT_G2EMB_ROOT;
LABEL_17:
    std::make_unique[abi:ne180100]<quasar::G2Embedding,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>(a1, a2, a3, a4, &v33, (char **)v13, a7);
    return;
  }
  if (quasar::gLogLevel >= 5)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"G2Embedding is not enabled for JIT", 34);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
LABEL_18:
  *a7 = 0;
}

void sub_1ADFC3C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<quasar::G2Embedding,std::shared_ptr<quasar::PronCache<std::string,std::vector<std::string>>> &,std::shared_ptr<quasar::LmeDataFactory> &,std::string const&,quasar::SystemConfig &,int const&,char const*&>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, char **a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p[2];
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;

  v14 = operator new();
  v15 = (std::__shared_weak_count *)a1[1];
  v32 = *a1;
  v33 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a2[1];
  v30 = *a2;
  v31 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = *a5;
  std::string::basic_string[abi:ne180100]<0>(__p, *a6);
  quasar::G2Embedding::G2Embedding(v14, &v32, &v30, a3, a4, v21, __p);
  *a7 = v14;
  if (v29 < 0)
    operator delete(__p[0]);
  v22 = v31;
  if (v31)
  {
    v23 = (unint64_t *)&v31->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v33;
  if (v33)
  {
    v26 = (unint64_t *)&v33->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
}

void sub_1ADFC3D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  MEMORY[0x1AF44D190](v18, 0x10B3C40BADFA094);
  _Unwind_Resume(a1);
}

void sub_1ADFC4364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

id getSpeakerCodeFilePath(NSString *a1)
{
  NSString *v1;
  NSString *v2;
  void *v3;
  void *v4;
  void *v5;

  v1 = a1;
  EARHelpers::createDirectoryInLibrary((EARHelpers *)CFSTR("/Assistant/SpeakerCode"), v2);
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "stringByAppendingPathComponent:", v1);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_1ADFC4490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADFC49F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void quasar::Location::known(quasar::Location *this, double a2, double a3)
{
  _QWORD *v3;
  _OWORD v4[17];

  if (a2 < -90.0 || a2 > 90.0 || a3 < -180.0 || a3 > 180.0)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Coordinates out of bounds latitude=", 35);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" longitude=", 11);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v4);
  }
}

double quasar::Location::knownOrFallback(uint64_t a1, double result, double a3)
{
  if (result < -90.0 || result > 90.0 || a3 < -180.0 || a3 > 180.0)
    return *(double *)a1;
  return result;
}

void quasar::Location::makeAny(quasar::Location *this, double a2, double a3)
{
  if ((a2 != 360.0 || a3 != 360.0) && (a2 != 1000.0 || a3 != 1000.0))
    quasar::Location::known(this, a2, a3);
}

BOOL quasar::Location::isUnknown(quasar::Location *this)
{
  double v1;

  v1 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v1 == 1000.0)
    return 1;
  if (v1 == 360.0)
    return *(double *)this == 360.0;
  return 0;
}

BOOL quasar::Location::isUndefined(quasar::Location *this)
{
  return *((double *)this + 1) == 1000.0 && *(double *)this == 1000.0;
}

BOOL quasar::Location::isDenied(quasar::Location *this)
{
  return *((double *)this + 1) == 360.0 && *(double *)this == 360.0;
}

BOOL quasar::Location::isKnown(quasar::Location *this)
{
  double v1;

  v1 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v1 == 1000.0)
    return 0;
  if (v1 == 360.0)
    return *(double *)this != 360.0;
  return 1;
}

long double quasar::Location::getDistanceKm(quasar::Location *this, const quasar::Location *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  long double v7;
  std::runtime_error *exception;
  double v10[2];
  double v11[2];

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  if (*(double *)this == 1000.0 && v3 == 1000.0
    || v2 == 360.0 && v3 == 360.0
    || (v4 = *(double *)a2, v5 = *((double *)a2 + 1), *(double *)a2 == 1000.0) && v5 == 1000.0
    || v4 == 360.0 && v5 == 360.0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "This or other location undefined, can't computer distance");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v11[0] = *((double *)this + 1);
  v11[1] = v2;
  v10[0] = v5;
  v10[1] = v4;
  v6 = boost::geometry::strategy::distance::comparable::haversine<double,void>::apply<boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>,boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>>(v11, v10);
  v7 = asin(sqrt(v6));
  return (v7 + v7) * 6366.54904;
}

void sub_1ADFC4DE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

double quasar::Location::getLatitude(quasar::Location *this)
{
  return *(double *)this;
}

double quasar::Location::fromSharedFuture(std::__assoc_sub_state **a1)
{
  std::__assoc_sub_state *v1;
  double v2;
  _QWORD *v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;

  v1 = *a1;
  v2 = 1000.0;
  if (*a1)
  {
    rep = std::chrono::steady_clock::now().__d_.__rep_;
    if (!std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>((uint64_t)v1, &rep))
    {
      std::__assoc_state<quasar::Location>::copy(*a1);
      return *(double *)v4;
    }
  }
  return v2;
}

uint64_t quasar::Location::toString(quasar::Location *this)
{
  uint64_t v2;
  _QWORD v4[2];
  _QWORD v5[11];
  char v6;
  uint64_t v7;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v4);
  quasar::operator<<(v5, (double *)this);
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F50];
  v2 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v5[0] = v2;
  v5[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v6 < 0)
    operator delete((void *)v5[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v7);
}

void sub_1ADFC4F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *quasar::operator<<(_QWORD *a1, double *a2)
{
  double v3;
  const char *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a2[1];
  if (*a2 == 360.0 && v3 == 360.0)
  {
    v4 = "lat=DENIED lon=DENIED";
    v5 = 21;
  }
  else
  {
    if (*a2 != 1000.0 || v3 != 1000.0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"lat=", 4);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" lon=", 5);
      std::ostream::operator<<();
      return a1;
    }
    v4 = "lat=UNDEFINED lon=UNDEFINED";
    v5 = 27;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v4, v5);
  return a1;
}

_QWORD *quasar::Location::statusAsString@<X0>(quasar::Location *this@<X0>, _QWORD *a2@<X8>)
{
  double v2;
  double v3;
  BOOL v4;
  const char *v5;
  char *v7;

  v2 = *(double *)this;
  v3 = *((double *)this + 1);
  v4 = v3 == 360.0 && v2 == 360.0;
  v5 = "KNOWN";
  if (v4)
    v5 = "DENIED";
  if (v3 == 1000.0 && v2 == 1000.0)
    v7 = "UNDEFINED";
  else
    v7 = (char *)v5;
  return std::string::basic_string[abi:ne180100]<0>(a2, v7);
}

long double boost::geometry::strategy::distance::comparable::haversine<double,void>::apply<boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>,boost::geometry::model::point<double,2ul,boost::geometry::cs::spherical_equatorial<boost::geometry::degree>>>(double *a1, double *a2)
{
  double v2;
  unsigned __int8 v3;
  __objc2_class **p_superclass;
  double v5;
  double v6;
  unsigned __int8 v7;
  double v8;
  double v9;
  unsigned __int8 v10;
  double v11;
  double v12;
  unsigned __int8 v13;
  double v14;
  long double v15;
  double v16;
  long double v17;
  long double v18;
  long double v19;
  double v20;
  long double v21;
  long double v22;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double *v34;
  double *v35;
  double *v36;
  double v37;
  double *v38;
  double v39;
  double v40;
  double v41;

  v2 = *a1;
  p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
  if ((v3 & 1) == 0)
  {
    v34 = a2;
    v38 = a1;
    p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
    v25 = v24;
    a2 = v34;
    a1 = v38;
    if (v25)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
      a2 = v34;
      a1 = v38;
    }
  }
  v5 = *((double *)p_superclass + 476);
  v6 = a1[1];
  if ((v7 & 1) == 0)
  {
    v35 = a2;
    v39 = *((double *)p_superclass + 476);
    v5 = v39;
    p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
    a2 = v35;
    if (v26)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      v5 = v39;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
      a2 = v35;
    }
  }
  v8 = *((double *)p_superclass + 476);
  v9 = *a2;
  if ((v10 & 1) == 0)
  {
    v36 = a2;
    v40 = v5;
    v30 = *a2;
    v32 = *((double *)p_superclass + 476);
    v9 = v30;
    v8 = v32;
    v5 = v40;
    p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
    a2 = v36;
    if (v27)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      v9 = v30;
      v8 = v32;
      v5 = v40;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
      a2 = v36;
    }
  }
  v11 = *((double *)p_superclass + 476);
  v12 = a2[1];
  if ((v13 & 1) == 0)
  {
    v37 = a2[1];
    v41 = v5;
    v31 = v9;
    v33 = v8;
    v29 = *((double *)p_superclass + 476);
    v11 = v29;
    v9 = v31;
    v8 = v33;
    v12 = v37;
    v5 = v41;
    p_superclass = &OBJC_METACLASS____EARNLTokenizer.superclass;
    if (v28)
    {
      boost::geometry::math::d2r<double>(void)::conversion_coefficient = 0x3F91DF46A2529D39;
      v11 = v29;
      v9 = v31;
      v8 = v33;
      v12 = v37;
      v5 = v41;
      p_superclass = (__objc2_class **)(&OBJC_METACLASS____EARNLTokenizer + 8);
    }
  }
  v14 = v9 * v11;
  v15 = v6 * v8;
  v16 = v2 * v5;
  v17 = v12 * *((double *)p_superclass + 476);
  v18 = sin((v17 - v15) * 0.5);
  v19 = v18 * v18;
  v20 = cos(v15);
  v21 = v20 * cos(v17);
  v22 = sin((v14 - v16) * 0.5);
  return v19 + v21 * (v22 * v22);
}

uint64_t std::__assoc_sub_state::wait_until<std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  unsigned int v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;
  std::chrono::steady_clock::time_point v6;
  std::chrono::system_clock::time_point v7;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9;
  unsigned int v10;
  uint64_t v11;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 136);
  if ((v4 & 8) != 0)
  {
    v11 = 2;
    goto LABEL_25;
  }
  if ((v4 & 4) != 0)
  {
    v11 = ((v4 >> 2) & 1) == 0;
    goto LABEL_25;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
    {
      v5 = *a2;
      v6.__d_.__rep_ = v5 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v6.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v7.__d_.__rep_)
        {
          v8 = 0;
          goto LABEL_14;
        }
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_13;
          v8 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v8 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_14;
          }
LABEL_13:
          v8 = 1000 * v7.__d_.__rep_;
LABEL_14:
          if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_17;
          }
        }
        v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
LABEL_17:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v13, v9);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    v10 = *(_DWORD *)(a1 + 136);
    if ((v10 & 4) != 0)
      goto LABEL_24;
  }
  v10 = *(_DWORD *)(a1 + 136);
LABEL_24:
  v11 = ((v10 >> 2) & 1) == 0;
  if (v13.__owns_)
LABEL_25:
    std::mutex::unlock(v13.__m_);
  return v11;
}

void std::__assoc_state<quasar::Location>::copy(std::__assoc_sub_state *a1)
{
  void *ptr;
  std::exception_ptr v3;
  std::exception_ptr v4;
  std::exception_ptr v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = &a1->__mut_;
  __lk.__owns_ = 1;
  std::mutex::lock(&a1->__mut_);
  std::__assoc_sub_state::__sub_wait(a1, &__lk);
  ptr = a1->__exception_.__ptr_;
  v5.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v5);
  if (ptr)
  {
    std::exception_ptr::exception_ptr(&v4, &a1->__exception_);
    v3.__ptr_ = &v4;
    std::rethrow_exception(v3);
    __break(1u);
  }
  else if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
  }
}

void sub_1ADFC5494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::mutex *a11, char a12)
{
  std::exception_ptr::~exception_ptr((std::exception_ptr *)&a9);
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t TState::addTrans(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = a2 + 8 * a3;
  *(_QWORD *)(v3 + 16) = result;
  v4 = result + 8 * a3;
  v6 = *(_QWORD *)(v4 + 16);
  v5 = (_QWORD *)(v4 + 16);
  *(_QWORD *)(v3 + 32) = v6;
  if (*v5)
    *(_QWORD *)(*v5 + 8 * a3 + 48) = a2;
  *v5 = a2;
  return result;
}

uint64_t TState::deleteTrans(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = a2 + 8 * a3;
  v6 = *(_QWORD *)(v3 + 32);
  v4 = (_QWORD *)(v3 + 32);
  v5 = v6;
  v7 = v4[2];
  v8 = (_QWORD *)(result + 8 * a3 + 16);
  if (v7)
    v8 = (_QWORD *)(v7 + 8 * a3 + 32);
  *v8 = v5;
  if (v5)
    *(_QWORD *)(v5 + 8 * a3 + 48) = v7;
  *(_QWORD *)(a2 + 8 * a3 + 16) = 0;
  v4[2] = 0;
  *v4 = 0;
  return result;
}

uint64_t TState::getTransCount(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 8 * a2 + 16);
  if (!v2)
    return 0;
  result = 0;
  do
  {
    ++result;
    v2 = *(_QWORD *)(v2 + 8 * a2 + 32);
  }
  while (v2);
  return result;
}

void TFsa::TFsa(TFsa *this)
{
  _OWORD *v1;

  TAllocator::TAllocator(this, 2048);
  v1[3] = 0u;
  *(_OWORD *)((char *)v1 + 104) = 0u;
  v1[4] = 0u;
  v1[5] = 0u;
  *(_OWORD *)((char *)v1 + 120) = 0u;
  *(_OWORD *)((char *)v1 + 136) = 0u;
  *(_OWORD *)((char *)v1 + 152) = 0u;
  *(_OWORD *)((char *)v1 + 168) = 0u;
  *(_OWORD *)((char *)v1 + 184) = 0u;
  TFsa::clear((TFsa *)v1);
}

void sub_1ADFC55D8(_Unwind_Exception *a1)
{
  TAllocator *v1;
  void **v2;
  void **v3;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v5 = 0;
  while (1)
  {
    v6 = *(void **)((char *)v1 + v5 + 176);
    if (v6)
    {
      *(_QWORD *)((char *)v1 + v5 + 184) = v6;
      operator delete(v6);
    }
    v5 -= 24;
    if (v5 == -48)
    {
      v7 = (void *)*((_QWORD *)v1 + 16);
      if (v7)
      {
        *((_QWORD *)v1 + 17) = v7;
        operator delete(v7);
      }
      v8 = *v3;
      if (*v3)
      {
        *((_QWORD *)v1 + 14) = v8;
        operator delete(v8);
      }
      v9 = (void *)*((_QWORD *)v1 + 9);
      if (v9)
      {
        *((_QWORD *)v1 + 10) = v9;
        operator delete(v9);
      }
      v10 = *v2;
      if (*v2)
      {
        *((_QWORD *)v1 + 7) = v10;
        operator delete(v10);
      }
      TAllocator::clear(v1);
      _Unwind_Resume(a1);
    }
  }
}

_QWORD *TFsa::clear(TFsa *this)
{
  _QWORD *result;

  result = TAllocator::clear(this);
  *((_QWORD *)this + 14) = *((_QWORD *)this + 13);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  *((_QWORD *)this + 23) = *((_QWORD *)this + 22);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  *((_QWORD *)this + 17) = *((_QWORD *)this + 16);
  *((_QWORD *)this + 12) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  return result;
}

void TFsa::~TFsa(TFsa *this)
{
  uint64_t i;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  for (i = 0; i != -48; i -= 24)
  {
    v3 = *(void **)((char *)this + i + 176);
    if (v3)
    {
      *(_QWORD *)((char *)this + i + 184) = v3;
      operator delete(v3);
    }
  }
  v4 = (void *)*((_QWORD *)this + 16);
  if (v4)
  {
    *((_QWORD *)this + 17) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 13);
  if (v5)
  {
    *((_QWORD *)this + 14) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 9);
  if (v6)
  {
    *((_QWORD *)this + 10) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  TAllocator::clear(this);
}

_QWORD *TFsa::newState(TAllocator *this, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 9) == v4)
  {
    v5 = TAllocator::allocate(this, 48);
    v6 = (char **)((char *)this + 48);
    *v5 = (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3;
    v5[1] = a2;
    v5[2] = 0;
    v5[3] = 0;
    v5[4] = -1;
    v5[5] = -1;
    v7 = (_QWORD *)*((_QWORD *)this + 7);
    v8 = *((_QWORD *)this + 8);
    if ((unint64_t)v7 >= v8)
    {
      v10 = ((char *)v7 - *v6) >> 3;
      if ((unint64_t)(v10 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v11 = v8 - (_QWORD)*v6;
      v12 = v11 >> 2;
      if (v11 >> 2 <= (unint64_t)(v10 + 1))
        v12 = v10 + 1;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13)
        v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 64, v13);
      else
        v14 = 0;
      v15 = &v14[8 * v10];
      v16 = &v14[8 * v13];
      *(_QWORD *)v15 = v5;
      v9 = v15 + 8;
      v18 = (char *)*((_QWORD *)this + 6);
      v17 = (char *)*((_QWORD *)this + 7);
      if (v17 != v18)
      {
        do
        {
          v19 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v15 - 1) = v19;
          v15 -= 8;
        }
        while (v17 != v18);
        v17 = *v6;
      }
      *((_QWORD *)this + 6) = v15;
      *((_QWORD *)this + 7) = v9;
      *((_QWORD *)this + 8) = v16;
      if (v17)
        operator delete(v17);
    }
    else
    {
      *v7 = v5;
      v9 = v7 + 1;
    }
    *((_QWORD *)this + 7) = v9;
  }
  else
  {
    v5 = *(_QWORD **)(v4 - 8);
    *((_QWORD *)this + 10) = v4 - 8;
    *(_QWORD *)(*((_QWORD *)this + 6) + 8 * *v5) = v5;
    v5[1] = a2;
  }
  ++*((_QWORD *)this + 5);
  return v5;
}

void TFsa::deleteState(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = a2[4];
  if (v4 != -1)
  {
    *(_QWORD *)(a1[19] + 8 * v4) = 0;
    a2[4] = -1;
    --a1[25];
  }
  v5 = a2[5];
  if (v5 != -1)
  {
    *(_QWORD *)(a1[22] + 8 * v5) = 0;
    a2[5] = -1;
    --a1[26];
  }
  TFsa::deleteAllTrans(a1, (uint64_t)a2);
  v6 = a1[11];
  v7 = (_QWORD *)a1[10];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[9];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 11), v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    *(_QWORD *)v15 = a2;
    v8 = v15 + 8;
    v18 = (char *)a1[9];
    v17 = (char *)a1[10];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      v17 = (char *)a1[9];
    }
    a1[9] = v15;
    a1[10] = v8;
    a1[11] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[10] = v8;
  v20 = a1[5];
  *(_QWORD *)(a1[6] + 8 * *a2) = 0;
  a1[5] = v20 - 1;
}

void TFsa::deleteAllTrans(_QWORD *a1, uint64_t a2)
{
  _QWORD *i;
  _QWORD *v5;

  for (i = *(_QWORD **)(a2 + 16); i; i = *(_QWORD **)(a2 + 16))
    TFsa::deleteTrans(a1, i);
  while (1)
  {
    v5 = *(_QWORD **)(a2 + 24);
    if (!v5)
      break;
    TFsa::deleteTrans(a1, v5);
  }
}

_QWORD *TFsa::newTrans(TAllocator *this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  char **v10;
  uint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v8 = *((_QWORD *)this + 17);
  if (*((_QWORD *)this + 16) == v8)
  {
    v9 = TAllocator::allocate(this, 64);
    v10 = (char **)((char *)this + 104);
    v11 = (uint64_t)(*((_QWORD *)this + 14) - *((_QWORD *)this + 13)) >> 3;
    *v9 = a4;
    v9[1] = v11;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    *((_OWORD *)v9 + 3) = 0u;
    v12 = (_QWORD *)*((_QWORD *)this + 14);
    v13 = *((_QWORD *)this + 15);
    if ((unint64_t)v12 >= v13)
    {
      v15 = ((char *)v12 - *v10) >> 3;
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v16 = v13 - (_QWORD)*v10;
      v17 = v16 >> 2;
      if (v16 >> 2 <= (unint64_t)(v15 + 1))
        v17 = v15 + 1;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
        v18 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v18 = v17;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 120, v18);
      else
        v19 = 0;
      v20 = &v19[8 * v15];
      v21 = &v19[8 * v18];
      *(_QWORD *)v20 = v9;
      v14 = v20 + 8;
      v23 = (char *)*((_QWORD *)this + 13);
      v22 = (char *)*((_QWORD *)this + 14);
      if (v22 != v23)
      {
        do
        {
          v24 = *((_QWORD *)v22 - 1);
          v22 -= 8;
          *((_QWORD *)v20 - 1) = v24;
          v20 -= 8;
        }
        while (v22 != v23);
        v22 = *v10;
      }
      *((_QWORD *)this + 13) = v20;
      *((_QWORD *)this + 14) = v14;
      *((_QWORD *)this + 15) = v21;
      if (v22)
        operator delete(v22);
    }
    else
    {
      *v12 = v9;
      v14 = v12 + 1;
    }
    *((_QWORD *)this + 14) = v14;
  }
  else
  {
    v9 = *(_QWORD **)(v8 - 8);
    *((_QWORD *)this + 17) = v8 - 8;
    *(_QWORD *)(*((_QWORD *)this + 13) + 8 * v9[1]) = v9;
    *v9 = a4;
  }
  v9[3] = a2;
  v9[5] = *(_QWORD *)(a2 + 24);
  v25 = *(_QWORD *)(a2 + 24);
  if (v25)
    *(_QWORD *)(v25 + 56) = v9;
  *(_QWORD *)(a2 + 24) = v9;
  v9[2] = a3;
  v9[4] = *(_QWORD *)(a3 + 16);
  v26 = *(_QWORD *)(a3 + 16);
  if (v26)
    *(_QWORD *)(v26 + 48) = v9;
  *(_QWORD *)(a3 + 16) = v9;
  ++*((_QWORD *)this + 12);
  return v9;
}

void TFsa::deleteTrans(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2[7];
  v5 = a2[5];
  v6 = (_QWORD *)(a2[3] + 24);
  if (v4)
    v6 = (_QWORD *)(v4 + 40);
  *v6 = v5;
  if (v5)
    *(_QWORD *)(v5 + 56) = v4;
  a2[3] = 0;
  a2[7] = 0;
  a2[5] = 0;
  v7 = a2[6];
  v8 = a2[4];
  v9 = (_QWORD *)(a2[2] + 16);
  if (v7)
    v9 = (_QWORD *)(v7 + 32);
  *v9 = v8;
  if (v8)
    *(_QWORD *)(v8 + 48) = v7;
  a2[2] = 0;
  a2[6] = 0;
  a2[4] = 0;
  v10 = (uint64_t)(a1 + 18);
  v11 = a1[18];
  v12 = (_QWORD *)a1[17];
  if ((unint64_t)v12 >= v11)
  {
    v14 = a1[16];
    v15 = ((uint64_t)v12 - v14) >> 3;
    if ((unint64_t)(v15 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v11 - v14;
    v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1))
      v17 = v15 + 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v10, v18);
    else
      v19 = 0;
    v20 = &v19[8 * v15];
    v21 = &v19[8 * v18];
    *(_QWORD *)v20 = a2;
    v13 = v20 + 8;
    v23 = (char *)a1[16];
    v22 = (char *)a1[17];
    if (v22 != v23)
    {
      do
      {
        v24 = *((_QWORD *)v22 - 1);
        v22 -= 8;
        *((_QWORD *)v20 - 1) = v24;
        v20 -= 8;
      }
      while (v22 != v23);
      v22 = (char *)a1[16];
    }
    a1[16] = v20;
    a1[17] = v13;
    a1[18] = v21;
    if (v22)
      operator delete(v22);
  }
  else
  {
    *v12 = a2;
    v13 = v12 + 1;
  }
  a1[17] = v13;
  v25 = a1[12];
  *(_QWORD *)(a1[13] + 8 * a2[1]) = 0;
  a1[12] = v25 - 1;
}

void TFsa::addExtremity(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;

  v3 = a2 + 8 * a3;
  v5 = *(_QWORD *)(v3 + 32);
  v4 = (uint64_t *)(v3 + 32);
  if (v5 == -1)
  {
    v8 = a3;
    v9 = a1 + 24 * a3;
    v12 = *(_QWORD *)(v9 + 152);
    v11 = (void **)(v9 + 152);
    v10 = v12;
    v13 = v11 + 1;
    v14 = v11[1];
    v15 = ((uint64_t)v14 - v12) >> 3;
    *v4 = v15;
    v16 = (unint64_t)v11[2];
    if ((unint64_t)v14 >= v16)
    {
      if ((unint64_t)(v15 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = v16 - v10;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v15 + 1))
        v19 = v15 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(v11 + 2), v20);
      else
        v21 = 0;
      v22 = &v21[8 * v15];
      v23 = &v21[8 * v20];
      *(_QWORD *)v22 = a2;
      v17 = v22 + 8;
      v24 = (char *)*v13;
      v25 = (char *)*v11;
      if (*v13 != *v11)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *((_QWORD *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        v24 = (char *)*v11;
      }
      *v11 = v22;
      *v13 = v17;
      v11[2] = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v14 = a2;
      v17 = v14 + 1;
    }
    *v13 = v17;
    ++*(_QWORD *)(a1 + 8 * v8 + 200);
  }
}

_QWORD *TFsa::nfaToDfa(uint64_t a1, TFsa *a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v13[3];
  _BYTE v14[40];
  uint64_t *v15;
  _QWORD *v16[2];
  uint64_t *v17;
  _QWORD *v18[2];
  uint64_t *v19;
  _QWORD *v20[2];

  TAllocator::TAllocator((TAllocator *)v14, 2048);
  v13[0] = (uint64_t)a2;
  v13[1] = a1;
  v13[2] = a3;
  TFsa::clear(a2);
  v20[0] = 0;
  v20[1] = 0;
  v19 = (uint64_t *)v20;
  v7 = *(uint64_t ***)(a1 + 152);
  v6 = *(uint64_t ***)(a1 + 160);
  if (v7 != v6)
  {
    while (!*v7)
    {
      if (++v7 == v6)
        goto LABEL_11;
    }
  }
  if (v7 != v6)
  {
    v8 = *v7;
LABEL_7:
    v17 = v8;
    std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v19, (unint64_t *)&v17, (uint64_t *)&v17);
    v9 = v7 + 1;
    while (v9 != v6)
    {
      v10 = *v9++;
      v8 = v10;
      if (v10)
      {
        v7 = v9 - 1;
        goto LABEL_7;
      }
    }
  }
LABEL_11:
  v18[0] = 0;
  v18[1] = 0;
  v17 = (uint64_t *)v18;
  v16[0] = 0;
  v16[1] = 0;
  v15 = (uint64_t *)v16;
  TFsa::addExtremity(v13[0], (uint64_t)v11, 0);
  TAllocator::clear((TAllocator *)v14);
  std::__tree<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::__map_value_compare<kaldi::WordHypLattice::Node *,std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>,std::less<kaldi::WordHypLattice::Node *>,true>,std::allocator<std::__value_type<kaldi::WordHypLattice::Node *,kaldi::WordHypLattice::RecomputeBestPath(void)::BackTraceToken>>>::destroy(v16[0]);
  std::__tree<int>::destroy((uint64_t)&v17, v18[0]);
  std::__tree<int>::destroy((uint64_t)&v19, v20[0]);
  return TAllocator::clear((TAllocator *)v14);
}

void sub_1ADFC5F78(_Unwind_Exception *a1)
{
  TAllocator *v1;
  uint64_t v2;

  std::__tree<int>::destroy(v2 - 56, *(_QWORD **)(v2 - 48));
  TAllocator::clear(v1);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::epsilonClosure(uint64_t a1, uint64_t **a2)
{
  uint64_t **v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t **v8;
  unint64_t v9;
  BOOL v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17[2];
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;

  if (a2 != (uint64_t **)a1)
    std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a2, *(_QWORD **)a1, (_QWORD *)(a1 + 8));
  std::set<TState const*>::set[abi:ne180100]((uint64_t *)&v18, a1);
  if (v20)
  {
    v4 = a2 + 1;
    do
    {
      v17[0] = 0;
      v17[1] = 0;
      v16 = (uint64_t *)v17;
      std::__tree<int>::destroy((uint64_t)&v18, v19);
      v19 = 0;
      v20 = 0;
      v18 = (uint64_t *)&v19;
      v5 = v16;
      if (v16 != (uint64_t *)v17)
      {
        do
        {
          v6 = v5[4];
          v15 = v6;
          v7 = *v4;
          if (!*v4)
            goto LABEL_17;
          v8 = a2 + 1;
          do
          {
            v9 = v7[4];
            v10 = v9 >= v6;
            if (v9 >= v6)
              v11 = (uint64_t **)v7;
            else
              v11 = (uint64_t **)(v7 + 1);
            if (v10)
              v8 = (uint64_t **)v7;
            v7 = *v11;
          }
          while (*v11);
          if (v8 == v4 || v6 < (unint64_t)v8[4])
          {
LABEL_17:
            std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(a2, &v15, (uint64_t *)&v15);
            std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v18, &v15, (uint64_t *)&v15);
          }
          v12 = (uint64_t *)v5[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (uint64_t *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (uint64_t *)v5[2];
              v14 = *v13 == (_QWORD)v5;
              v5 = v13;
            }
            while (!v14);
          }
          v5 = v13;
        }
        while (v13 != (uint64_t *)v17);
      }
      std::__tree<int>::destroy((uint64_t)&v16, v17[0]);
    }
    while (v20);
  }
  std::__tree<int>::destroy((uint64_t)&v18, v19);
}

void sub_1ADFC6138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<int>::destroy((uint64_t)&a11, a12);
  std::__tree<int>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t *`anonymous namespace'::TNfaToDfa::nfaToDfaRec(uint64_t a1, uint64_t *a2, uint64_t **a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t **v17;
  uint64_t **v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  char v28;
  uint64_t v29;
  BOOL v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t **v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  _QWORD *v49;
  uint64_t i;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v59;
  uint64_t *v60;
  _QWORD *v61[2];
  uint64_t *v62;
  _QWORD *v63[2];
  uint64_t *v64;
  _QWORD *v65;
  uint64_t v66;

  v6 = a2[2] + 1;
  if (v6 >> 61)
    v7 = -1;
  else
    v7 = 8 * v6;
  v8 = TAllocator::allocate((TAllocator *)(a1 + 24), v7);
  v9 = v8;
  v10 = (_QWORD *)*a2;
  v11 = a2 + 1;
  if ((uint64_t *)*a2 == a2 + 1)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v8[v12] = v10[4];
      v13 = (uint64_t *)v10[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (uint64_t *)v10[2];
          v15 = *v14 == (_QWORD)v10;
          v10 = v14;
        }
        while (!v15);
      }
      ++v12;
      v10 = v14;
    }
    while (v14 != v11);
  }
  v8[v12] = 0;
  v17 = a3 + 1;
  v16 = a3[1];
  if (!v16)
    goto LABEL_29;
  v18 = a3 + 1;
  do
  {
    v19 = (unint64_t *)v16[4];
    v20 = v8;
    do
    {
      v21 = *v19;
      v22 = *v20;
      if (!(*v19 | *v20))
      {
        v18 = (uint64_t **)v16;
        goto LABEL_23;
      }
      ++v20;
      ++v19;
    }
    while (v21 == v22);
    if (v21 < v22)
      ++v16;
    else
      v18 = (uint64_t **)v16;
LABEL_23:
    v16 = (uint64_t *)*v16;
  }
  while (v16);
  if (v18 == v17)
  {
LABEL_29:
    v65 = 0;
    v66 = 0;
    v64 = (uint64_t *)&v65;
    v27 = (_QWORD *)*a2;
    if ((uint64_t *)*a2 == v11)
    {
      v28 = 0;
    }
    else
    {
      v28 = 0;
      do
      {
        v29 = v27[4];
        v30 = *(_QWORD *)(v29 + 40) != -1;
        v31 = *(uint64_t **)(v29 + 8);
        if (v31)
        {
          v62 = v31;
          std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
        }
        v32 = (uint64_t *)v27[1];
        if (v32)
        {
          do
          {
            v33 = v32;
            v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          do
          {
            v33 = (uint64_t *)v27[2];
            v15 = *v33 == (_QWORD)v27;
            v27 = v33;
          }
          while (!v15);
        }
        v28 |= v30;
        v27 = v33;
      }
      while (v33 != v11);
      if (v66)
      {
        if (v66 == 1)
        {
          v34 = v64[4];
LABEL_45:
          v35 = TFsa::newState(*(TAllocator **)a1, v34);
          if ((v28 & 1) != 0)
            TFsa::addExtremity(*(_QWORD *)a1, (uint64_t)v35, 1u);
          std::__tree<int>::destroy((uint64_t)&v64, v65);
          v36 = *v17;
          if (*v17)
          {
LABEL_48:
            while (2)
            {
              v37 = (uint64_t **)v36;
              v38 = (unint64_t *)v36[4];
              v39 = v9;
              v40 = v38;
              do
              {
                v41 = *v39;
                v42 = *v40;
                if (!(*v39 | *v40))
                {
                  v43 = v9;
LABEL_55:
                  while (1)
                  {
                    v44 = *v38;
                    v45 = *v43;
                    if (!(*v38 | *v43))
                      break;
                    ++v43;
                    ++v38;
                    if (v44 != v45)
                    {
                      if (v44 < v45)
                      {
                        v17 = v37 + 1;
                        v36 = v37[1];
                        if (v36)
                          goto LABEL_48;
                        goto LABEL_63;
                      }
                      break;
                    }
                  }
                  if (v37)
                    goto LABEL_66;
                  goto LABEL_63;
                }
                ++v40;
                ++v39;
              }
              while (v41 == v42);
              v43 = v9;
              if (v41 >= v42)
                goto LABEL_55;
              v36 = *v37;
              v17 = v37;
              if (*v37)
                continue;
              break;
            }
          }
          else
          {
            v37 = a3 + 1;
          }
LABEL_63:
          v46 = (uint64_t *)v37;
          v37 = (uint64_t **)operator new(0x30uLL);
          v37[4] = (uint64_t *)v9;
          v37[5] = 0;
          *v37 = 0;
          v37[1] = 0;
          v37[2] = v46;
          *v17 = (uint64_t *)v37;
          v47 = (uint64_t *)**a3;
          v48 = (uint64_t *)v37;
          if (v47)
          {
            *a3 = v47;
            v48 = *v17;
          }
          std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a3[1], v48);
          a3[2] = (uint64_t *)((char *)a3[2] + 1);
LABEL_66:
          v37[5] = v35;
          v65 = 0;
          v66 = 0;
          v64 = (uint64_t *)&v65;
          v49 = (_QWORD *)*a2;
          if ((uint64_t *)*a2 != v11)
          {
            do
            {
              for (i = *(_QWORD *)(v49[4] + 24); i; i = *(_QWORD *)(i + 40))
              {
                if (*(_QWORD *)i != -1)
                {
                  v62 = *(uint64_t **)i;
                  std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(&v64, (unint64_t *)&v62, (uint64_t *)&v62);
                }
              }
              v51 = (uint64_t *)v49[1];
              if (v51)
              {
                do
                {
                  v52 = v51;
                  v51 = (uint64_t *)*v51;
                }
                while (v51);
              }
              else
              {
                do
                {
                  v52 = (uint64_t *)v49[2];
                  v15 = *v52 == (_QWORD)v49;
                  v49 = v52;
                }
                while (!v15);
              }
              v49 = v52;
            }
            while (v52 != v11);
            v53 = v64;
            if (v64 != (uint64_t *)&v65)
            {
              do
              {
                v54 = v53[4];
                v63[0] = 0;
                v63[1] = 0;
                v62 = (uint64_t *)v63;
                v61[0] = 0;
                v61[1] = 0;
                v60 = (uint64_t *)v61;
                *TFsa::newTrans(*(TAllocator **)a1, (uint64_t)v35, v55, 0) = v53[4];
                std::__tree<int>::destroy((uint64_t)&v60, v61[0]);
                std::__tree<int>::destroy((uint64_t)&v62, v63[0]);
                v56 = (uint64_t *)v53[1];
                if (v56)
                {
                  do
                  {
                    v57 = v56;
                    v56 = (uint64_t *)*v56;
                  }
                  while (v56);
                }
                else
                {
                  do
                  {
                    v57 = (uint64_t *)v53[2];
                    v15 = *v57 == (_QWORD)v53;
                    v53 = v57;
                  }
                  while (!v15);
                }
                v53 = v57;
              }
              while (v57 != (uint64_t *)&v65);
            }
          }
          std::__tree<int>::destroy((uint64_t)&v64, v65);
          return v35;
        }
        v59 = *(_QWORD *)(a1 + 16);
        if (v59)
        {
          v34 = (*(uint64_t (**)(uint64_t, uint64_t **))(*(_QWORD *)v59 + 16))(v59, &v64);
          goto LABEL_45;
        }
      }
    }
    v34 = 0;
    goto LABEL_45;
  }
  v23 = v18[4];
  v24 = v8;
  while (1)
  {
    v25 = *v24;
    v26 = *v23;
    if (!(*v24 | *v23))
      return v18[5];
    ++v23;
    ++v24;
    if (v25 != v26)
    {
      if (v25 < v26)
        goto LABEL_29;
      return v18[5];
    }
  }
}

void sub_1ADFC6604(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, _QWORD *a17)
{
  std::__tree<int>::destroy((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t *`anonymous namespace'::move(uint64_t *result, uint64_t a2, uint64_t **a3)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *i;
  uint64_t *v8;
  uint64_t *v9;
  BOOL v10;
  uint64_t v11;

  v3 = result + 1;
  v4 = (_QWORD *)*result;
  if ((uint64_t *)*result != result + 1)
  {
    do
    {
      for (i = *(_QWORD **)(v4[4] + 24); i; i = (_QWORD *)i[5])
      {
        if (*i == a2)
        {
          v11 = i[2];
          result = std::__tree<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,std::less<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>,std::allocator<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *>>::__emplace_unique_key_args<kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node *,kaldi::quasar::PrefixTree<int,std::unordered_map<int,int>>::Node * const&>(a3, (unint64_t *)&v11, &v11);
        }
      }
      v8 = (uint64_t *)v4[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (uint64_t *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (uint64_t *)v4[2];
          v10 = *v9 == (_QWORD)v4;
          v4 = v9;
        }
        while (!v10);
      }
      v4 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

uint64_t **std::__tree<TState const*>::__assign_multi<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t **result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          v8[4] = v9[4];
          std::__tree<TState const*>::__node_insert_multi(v5, v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (_QWORD *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (_QWORD *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<TState const*>::__emplace_multi<TState const* const&>(v5, a2 + 4);
      v12 = (_QWORD *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADFC686C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<int>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<TState const*>::__node_insert_multi(uint64_t **a1, uint64_t *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (a2[4] >= (unint64_t)v4[4])
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v3, v5, a2);
  return a2;
}

uint64_t *std::__tree<TState const*>::__emplace_multi<TState const* const&>(uint64_t **a1, unint64_t *a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;

  v4 = (uint64_t *)operator new(0x28uLL);
  v5 = *a2;
  v4[4] = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v5 >= v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v6, v8, v4);
  return v4;
}

uint64_t *std::set<TState const*>::set[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(a1, *(_QWORD **)a2, (_QWORD *)(a2 + 8));
  return a1;
}

void sub_1ADFC69B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<TState const*>::insert[abi:ne180100]<std::__tree_const_iterator<TState const*,std::__tree_node<TState const*,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t **v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(v5, v6, v4 + 4, v4 + 4);
      v7 = (_QWORD *)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v4[2];
          v9 = *v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<TState const*>::__emplace_hint_unique_key_args<TState const*,TState const* const&>(uint64_t **a1, _QWORD *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = (uint64_t **)std::__tree<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>::__find_equal<std::shared_ptr<std::variant<quasar::AlternativeSelectionSpan::Alternative::GenderDescription,quasar::AlternativeSelectionSpan::Alternative::MeaningDescription>>>(a1, a2, &v11, &v10, a3);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = (uint64_t *)operator new(0x28uLL);
    v7[4] = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t quasar::PhonetisaurusG2P::PhonetisaurusG2P(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, quasar::SystemConfig *a5, int a6, uint64_t a7, __int128 *a8, __int128 *a9)
{
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  __int128 v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t Ptree;
  uint64_t Int;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t ModelLoader;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  _QWORD *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  float v56;
  unsigned __int8 v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;

  v12 = a2[1];
  v77 = *a2;
  v78 = (std::__shared_weak_count *)v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a3[1];
  v75 = *a3;
  v76 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  quasar::QuasarG2PBase::QuasarG2PBase(a1, &v77, &v75, a4, a5, a6, a7, a8);
  v18 = v76;
  if (v76)
  {
    p_shared_owners = (unint64_t *)&v76->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v78;
  if (v78)
  {
    v22 = (unint64_t *)&v78->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  *(_QWORD *)a1 = &off_1E5D35F90;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 388) = 0x3000001F4;
  if (*((char *)a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 400), *(const std::string::value_type **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v24 = *a9;
    *(_QWORD *)(a1 + 416) = *((_QWORD *)a9 + 2);
    *(_OWORD *)(a1 + 400) = v24;
  }
  if (quasar::gLogLevel >= 5)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PhonetisaurusG2P root: ", 23);
    v26 = *(char *)(a7 + 23);
    if (v26 >= 0)
      v27 = a7;
    else
      v27 = *(_QWORD *)a7;
    if (v26 >= 0)
      v28 = *(unsigned __int8 *)(a7 + 23);
    else
      v28 = *(_QWORD *)(a7 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a5, a7);
  std::string::basic_string[abi:ne180100]<0>(__p, "num-best");
  *(_DWORD *)(a1 + 384) = quasar::PTree::getInt<int>(Ptree, (__int128 *)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  Int = quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)__p);
  if (SBYTE7(v59) < 0)
    operator delete(__p[0]);
  if ((Int & 0xFF00000000) != 0)
    *(_DWORD *)(a1 + 388) = Int;
  if (quasar::gLogLevel >= 5)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PhonetisaurusG2P Config: model=", 31);
    v32 = *(char *)(a1 + 327);
    if (v32 >= 0)
      v33 = a1 + 304;
    else
      v33 = *(_QWORD *)(a1 + 304);
    if (v32 >= 0)
      v34 = *(unsigned __int8 *)(a1 + 327);
    else
      v34 = *(_QWORD *)(a1 + 312);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)", nBest=", 8);
    v36 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)", beam=", 7);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  if (!quasar::filesystem::exists((char *)(a1 + 304)) || quasar::filesystem::is_directory((char *)(a1 + 304)))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"g2p model file doesn't exist, or it's a directory: ", 51);
    v46 = *(char *)(a1 + 327);
    if (v46 >= 0)
      v47 = a1 + 304;
    else
      v47 = *(_QWORD *)(a1 + 304);
    if (v46 >= 0)
      v48 = *(unsigned __int8 *)(a1 + 327);
    else
      v48 = *(_QWORD *)(a1 + 312);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, v47, v48);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v57 = 0;
  v56 = 0.0;
  v55 = 0;
  v54 = 0;
  ModelLoader = quasar::SystemConfig::getModelLoader(a5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)ModelLoader + 16))(__p, ModelLoader, a1 + 304);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 352, (__int128 *)__p);
  v38 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v39 = (unint64_t *)((char *)__p[1] + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v53 = *(_QWORD *)(a1 + 352);
  std::allocate_shared[abi:ne180100]<Phonetisaurus,std::allocator<Phonetisaurus>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,void>(&v53, &v57, &v56, (float *)&v55 + 1, (float *)&v55, &v54, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 368, (__int128 *)__p);
  v41 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v42 = (unint64_t *)((char *)__p[1] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 368) + 216))
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Phonetisaurus failed to load model!", 35);
    v50 = *(char *)(a1 + 327);
    if (v50 >= 0)
      v51 = a1 + 304;
    else
      v51 = *(_QWORD *)(a1 + 304);
    if (v50 >= 0)
      v52 = *(unsigned __int8 *)(a1 + 327);
    else
      v52 = *(_QWORD *)(a1 + 312);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, v51, v52);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  return a1;
}

{
  return quasar::PhonetisaurusG2P::PhonetisaurusG2P(a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1ADFC6FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;

  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v18 + 423) < 0)
    operator delete(*v21);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v19);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v18);
  _Unwind_Resume(a1);
}

void sub_1ADFC7014()
{
  uint64_t v0;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 104);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v0 - 88);
  JUMPOUT(0x1ADFC7074);
}

void sub_1ADFC7038(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 423) < 0)
    operator delete(*v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v1);
  _Unwind_Resume(a1);
}

void sub_1ADFC7040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1ADFC704CLL);
}

void quasar::PhonetisaurusG2P::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 *v15;
  __int128 v16;
  _BYTE *v17;
  uint64_t v18;
  __int128 *v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  float v30;
  const char *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  void *__p[2];
  unsigned __int8 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  void *v67[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  std::string v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  std::string v85;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    quasar::QuasarG2PBase::chopTokenIntoUTF8Units((quasar::QuasarG2PBase *)a1, &v85);
    if (v85.__r_.__value_.__r.__words[0] != v85.__r_.__value_.__l.__size_)
    {
      v37 = a2;
      v83 = 0uLL;
      v84 = 0;
      v80 = 0;
      v81 = 0;
      v82 = 0;
      if (*(int *)(a1 + 392) >= 1)
      {
        v6 = 0;
        v7 = *(_DWORD *)(a1 + 384);
        do
        {
          v8 = *(_QWORD *)(a1 + 368);
          memset(&v79, 0, sizeof(v79));
          std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v79, (__int128 *)v85.__r_.__value_.__l.__data_, (__int128 *)v85.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0]) >> 3));
          Phonetisaurus::phoneticize(v8, (__int128 **)&v79, v7, *(_DWORD *)(a1 + 388), &v62);
          std::vector<fst::IntervalSet<int>>::__vdeallocate((uint64_t *)&v83);
          v83 = v62;
          v84 = v63;
          *(_QWORD *)&v63 = 0;
          v62 = 0uLL;
          *(_QWORD *)v43 = &v62;
          std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
          *(_QWORD *)v43 = &v79;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v43);
          v9 = v80;
          v10 = v81;
          while (v10 != v9)
          {
            v10 -= 32;
            *(_QWORD *)&v62 = v10;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
          }
          v81 = v9;
          if (!Phonetisaurus::findPaths(*(_QWORD *)(a1 + 368), (uint64_t *)&v83, v7, &v80))
            break;
          ++v7;
          if (quasar::gLogLevel >= 4)
          {
            v77 = 0u;
            v78 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            v69 = 0u;
            v70 = 0u;
            *(_OWORD *)v67 = 0u;
            v68 = 0u;
            v65 = 0u;
            v66 = 0u;
            v63 = 0u;
            v64 = 0u;
            v62 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Increase nbest, and try again. nbest=", 37);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v62);
          }
          ++v6;
        }
        while (v6 < *(_DWORD *)(a1 + 392));
        if (v81 != v80)
        {
          v11 = 0;
          v41 = *MEMORY[0x1E0DE4F50];
          v39 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
          v40 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
          v38 = MEMORY[0x1E0DE4FB8] + 16;
          do
          {
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v62);
            v12 = *(_QWORD *)(v80 + 32 * v11);
            if (*(_QWORD *)(v80 + 32 * v11 + 8) != v12)
            {
              v13 = 0;
              v14 = 0;
              do
              {
                v15 = (__int128 *)(v12 + v13);
                if (*((char *)v15 + 23) < 0)
                {
                  std::string::__init_copy_ctor_external((std::string *)v43, *(const std::string::value_type **)v15, *((_QWORD *)v15 + 1));
                }
                else
                {
                  v16 = *v15;
                  *(_QWORD *)&v43[16] = *((_QWORD *)v15 + 2);
                  *(_OWORD *)v43 = v16;
                }
                std::string::basic_string[abi:ne180100]<0>(__p, " ");
                quasar::replaceAll((uint64_t)v43, (uint64_t)__p, (char *)(a1 + 400));
                if ((char)v61 < 0)
                  operator delete(__p[0]);
                if (v43[23] >= 0)
                  v17 = v43;
                else
                  v17 = *(_BYTE **)v43;
                if (v43[23] >= 0)
                  v18 = v43[23];
                else
                  v18 = *(_QWORD *)&v43[8];
                if (v14 == 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(*(_QWORD *)(v80 + 32 * v11 + 8) - *(_QWORD *)(v80 + 32 * v11)) >> 3)
                          - 1)
                {
                  v19 = &v63;
                }
                else
                {
                  v19 = (__int128 *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v63, (uint64_t)v17, v18);
                  v20 = *(char *)(a1 + 423);
                  if (v20 >= 0)
                    v17 = (_BYTE *)(a1 + 400);
                  else
                    v17 = *(_BYTE **)(a1 + 400);
                  if (v20 >= 0)
                    v18 = *(unsigned __int8 *)(a1 + 423);
                  else
                    v18 = *(_QWORD *)(a1 + 408);
                }
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v17, v18);
                if ((v43[23] & 0x80000000) != 0)
                  operator delete(*(void **)v43);
                ++v14;
                v12 = *(_QWORD *)(v80 + 32 * v11);
                v13 += 24;
              }
              while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v80 + 32 * v11 + 8) - v12) >> 3) > v14);
            }
            std::stringbuf::str();
            if ((v43[23] & 0x80000000) != 0)
            {
              v21 = *(_QWORD *)&v43[8];
              operator delete(*(void **)v43);
              if (v21)
              {
LABEL_44:
                LODWORD(__p[0]) = 1;
                std::stringbuf::str();
                v59 = *(_DWORD *)(v80 + 32 * v11 + 24);
                v22 = a3[1];
                if (v22 >= a3[2])
                {
                  v23 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float>(a3, (int *)__p, (uint64_t)v43, &v59);
                  v24 = a3;
                }
                else
                {
                  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float>((uint64_t)(a3 + 2), a3[1], (int *)__p, (uint64_t)v43, &v59);
                  v23 = v22 + 40;
                  v24 = a3;
                  a3[1] = v22 + 40;
                }
                v24[1] = v23;
                if ((v43[23] & 0x80000000) != 0)
                  operator delete(*(void **)v43);
                if (quasar::gLogLevel < 5)
                  goto LABEL_70;
                v57 = 0u;
                v58 = 0u;
                v55 = 0u;
                v56 = 0u;
                v53 = 0u;
                v54 = 0u;
                v51 = 0u;
                v52 = 0u;
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v45 = 0u;
                v46 = 0u;
                v44 = 0u;
                memset(v43, 0, sizeof(v43));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                v25 = *(char *)(v37 + 23);
                if (v25 >= 0)
                  v26 = v37;
                else
                  v26 = *(_QWORD *)v37;
                if (v25 >= 0)
                  v27 = *(unsigned __int8 *)(v37 + 23);
                else
                  v27 = *(_QWORD *)(v37 + 8);
                v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, v26, v27);
                v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"\t", 1);
                v30 = *(float *)(v80 + 32 * v11 + 24);
                if (v30 == INFINITY)
                {
                  v31 = "Infinity";
                  v32 = 8;
                  goto LABEL_60;
                }
                if (v30 == -INFINITY)
                {
                  v31 = "-Infinity";
                  v32 = 9;
LABEL_60:
                  v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
                }
                else
                {
                  v33 = (_QWORD *)std::ostream::operator<<();
                }
                v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"\t", 1);
                std::stringbuf::str();
                if ((v61 & 0x80u) == 0)
                  v35 = __p;
                else
                  v35 = (void **)__p[0];
                if ((v61 & 0x80u) == 0)
                  v36 = v61;
                else
                  v36 = (uint64_t)__p[1];
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
                if ((char)v61 < 0)
                  operator delete(__p[0]);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v43);
              }
            }
            else if (v43[23])
            {
              goto LABEL_44;
            }
LABEL_70:
            *(_QWORD *)&v62 = v41;
            *(_QWORD *)((char *)&v62 + *(_QWORD *)(v41 - 24)) = v40;
            *(_QWORD *)&v63 = v39;
            *((_QWORD *)&v63 + 1) = v38;
            if (SHIBYTE(v68) < 0)
              operator delete(v67[1]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](&v70);
            ++v11;
          }
          while (v11 < (v81 - v80) >> 5);
        }
      }
      *(_QWORD *)&v62 = &v80;
      std::vector<WordPron>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
      *(_QWORD *)&v62 = &v83;
      std::vector<std::pair<std::vector<int>,float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
    }
    *(_QWORD *)&v62 = &v85;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  }
  else if (quasar::gLogLevel >= 4)
  {
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    *(_OWORD *)v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v62);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v62, (uint64_t)"Empty token received", 20);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v62);
  }
}

void sub_1ADFC76E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a61);
  a61 = a16;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&a61);
  _Unwind_Resume(a1);
}

void quasar::PhonetisaurusG2P::batchDoG2P()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

uint64_t quasar::PhonetisaurusG2P::getG2PVersion(quasar::PhonetisaurusG2P *this)
{
  return 2;
}

_QWORD *std::allocate_shared[abi:ne180100]<Phonetisaurus,std::allocator<Phonetisaurus>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,void>@<X0>(_QWORD *a1@<X1>, unsigned __int8 *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, unsigned int *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x118uLL);
  result = std::__shared_ptr_emplace<Phonetisaurus>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,std::allocator<Phonetisaurus>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADFC7928(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<Phonetisaurus>::__shared_ptr_emplace[abi:ne180100]<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *,BOOL &,float &,float &,float &,int &,std::allocator<Phonetisaurus>,0>(_QWORD *a1, _QWORD *a2, unsigned __int8 *a3, float *a4, float *a5, float *a6, unsigned int *a7)
{
  a1[2] = 0;
  *a1 = &unk_1E5D409D0;
  a1[1] = 0;
  Phonetisaurus::Phonetisaurus(a1 + 3, *a2, *a3, *a7, *a4, *a5, *a6);
  return a1;
}

void sub_1ADFC798C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<Phonetisaurus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D409D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Phonetisaurus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D409D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<Phonetisaurus>::__on_zero_shared(uint64_t a1)
{
  Phonetisaurus::~Phonetisaurus((Phonetisaurus *)(a1 + 24));
}

void Phonetisaurus::~Phonetisaurus(Phonetisaurus *this)
{
  _DWORD *v2;
  int v3;
  void *v4;

  *((_QWORD *)this + 28) = &unk_1E5D256C0;
  v2 = (_DWORD *)*((_QWORD *)this + 29);
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  std::__tree<std::vector<std::string>,quasar::NameEnumerator::EnumComparator,std::allocator<std::vector<std::string>>>::destroy((uint64_t)this + 192, *((char **)this + 25));
  std::__tree<int>::destroy((uint64_t)this + 168, *((_QWORD **)this + 22));
  v4 = (void *)*((_QWORD *)this + 17);
  if (v4)
  {
    *((_QWORD *)this + 18) = v4;
    operator delete(v4);
  }
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  if (*((char *)this + 23) < 0)
    operator delete(*(void **)this);
}

void std::vector<WordPron>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADFC7C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  int v9;
  int v10;
  _BYTE v11[7];

  v6 = *a3;
  v8 = *(std::string::value_type **)a4;
  v7 = *(_QWORD *)(a4 + 8);
  *(_DWORD *)v11 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)&v11[3] = *(_DWORD *)(a4 + 19);
  v9 = *(char *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v10 = *a5;
  *(_DWORD *)a2 = v6;
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 8), v8, v7);
    *(_DWORD *)(a2 + 32) = v10;
    operator delete(v8);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)v11;
    *(_DWORD *)(a2 + 27) = *(_DWORD *)&v11[3];
    *(_BYTE *)(a2 + 31) = v9;
    *(_DWORD *)(a2 + 32) = v10;
  }
}

void sub_1ADFC7CF4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::RecognizePronunciationsBatch(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _BYTE v12[88];
  void **v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  quasar::StopWatch::StopWatch((quasar::StopWatch *)v12, (clockid_t)a2);
  v6 = *a2;
  v15 = 0;
  v7 = operator new(0x20uLL);
  *v7 = &off_1E5D3EC70;
  v7[1] = a1;
  v7[2] = a3;
  v7[3] = v12;
  v15 = v7;
  v8 = quasar::rescoring::NBestListIterator::iterateWithCallback(v6, (uint64_t)v14);
  v9 = v15;
  if (v15 == v14)
  {
    v10 = 4;
    v9 = v14;
    goto LABEL_5;
  }
  if (v15)
  {
    v10 = 5;
LABEL_5:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  v13 = (void **)v12;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v13);
  return v8;
}

void sub_1ADFC7DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v13 = *(_QWORD **)(v11 - 48);
  if (v13 == v10)
  {
    v14 = 4;
    v13 = (_QWORD *)(v11 - 72);
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_6:
  *(_QWORD *)(v11 - 80) = &a10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v11 - 80));
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E5D3EC70;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3EC70;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::operator()(uint64_t a1, int *a2)
{
  unsigned int *v4;
  _QWORD *v5;
  std::string *p_str;
  std::string::size_type size;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int *v10;
  uint64_t v11;
  clockid_t v12;
  uint64_t v13;
  double v14;
  clockid_t v15;
  clockid_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  _QWORD v24[4];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  std::string __str;
  char *v40;
  unsigned int *v41;
  unsigned int *v42;

  v4 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 4));
  std::string::basic_string[abi:ne180100](&__str, (char *)v4 + *v4 + 4, *(unsigned int *)((char *)v4 + *v4));
  if (quasar::gLogLevel >= 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    memset(v24, 0, sizeof(v24));
    v23 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, (uint64_t)"Processing ", 11);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    else
      size = __str.__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_str, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)".", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v23);
  }
  *(_QWORD *)&v26 = 0;
  v25 = 0u;
  v23 = 0u;
  memset(v24, 0, sizeof(v24));
  std::string::operator=((std::string *)&v23, &__str);
  v9 = (unsigned int *)((char *)a2 + *(unsigned __int16 *)((char *)a2 - *a2 + 6));
  v10 = (unsigned int *)((char *)v9 + *v9);
  v11 = *v10;
  if ((_DWORD)v11)
  {
    v42 = v10 + 1;
    v41 = &v10[v11 + 1];
    std::__min_element[abi:ne180100]<quasar::ptt::ExtractPronunciation(quasar::rescoring::NBestList const&)::{lambda(quasar::rescoring::NBestListEntry const*,quasar::rescoring::NBestListEntry const*)#1} &,flatbuffers_2_0_6::VectorIterator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,quasar::rescoring::NBestListEntry const*>,flatbuffers_2_0_6::VectorIterator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,quasar::rescoring::NBestListEntry const*>>(&v42, &v41, &v40);
    quasar::ptt::ExtractPronunciation((int *)&v40[*(unsigned int *)v40], &v21);
  }
  else
  {
    v21 = 0uLL;
    v22 = 0;
  }
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)&v24[1]);
  *(_OWORD *)&v24[1] = v21;
  v24[3] = v22;
  v22 = 0;
  v21 = 0uLL;
  v42 = (unsigned int *)&v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(double *)(v13 + 72);
  if (*(_DWORD *)(v13 + 24))
  {
    v14 = v14 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v12) - *(double *)(v13 + 32);
    v13 = *(_QWORD *)(a1 + 24);
  }
  quasar::StopWatch::resume((quasar::StopWatch *)v13, v12);
  quasar::ptt::PronunciationRecognizer::run(*(_QWORD *)(a1 + 8), &v24[1], 0, &v21);
  std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)&v25);
  v25 = v21;
  *(_QWORD *)&v26 = v22;
  v22 = 0;
  v21 = 0uLL;
  v42 = (unsigned int *)&v21;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v42);
  quasar::StopWatch::pause(*(quasar::StopWatch **)(a1 + 24), v15);
  v17 = *(_QWORD *)(a1 + 24);
  v18 = *(double *)(v17 + 72);
  if (*(_DWORD *)(v17 + 24))
    v18 = v18 + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v16) - *(double *)(v17 + 32);
  *((double *)&v26 + 1) = v18 - v14;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 24);
  if (!v19)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v19 + 48))(v19, &v23);
  *(_QWORD *)&v21 = &v25;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  *(_QWORD *)&v21 = &v24[1];
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  if (SHIBYTE(v24[0]) < 0)
    operator delete((void *)v23);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1ADFC8180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 97) < 0)
    operator delete(*(void **)(v18 - 120));
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0,std::allocator<quasar::ptt::RecognizePronunciationsBatch(quasar::ptt::PronunciationRecognizer &,std::unique_ptr<quasar::rescoring::NBestListIterator>,std::function<void ()(quasar::ptt::RecognizePronunciationResult const&)>)::$_0>,BOOL ()(quasar::rescoring::NBestList const&)>::target_type()
{
}

void quasar::ptt::ExtractPronunciation(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  void *__p[2];
  char v15;
  std::string __dst;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(unsigned __int16 *)((char *)a1 - *a1 + 8);
  v4 = *(unsigned int *)((char *)a1 + v3);
  v5 = (unsigned int *)((char *)a1 + v3 + v4);
  v6 = *v5;
  if ((_DWORD)v6)
  {
    v7 = 0;
    v8 = 4 * v6;
    v9 = (char *)a1 + v3 + v4;
    do
    {
      v10 = *(unsigned int *)&v9[v7 + 4];
      v11 = &v9[v7 + v10 - *(int *)((char *)&v5[v7 / 4 + 1] + v10)];
      if (*((unsigned __int16 *)v11 + 2) >= 7u)
      {
        v12 = *((unsigned __int16 *)v11 + 5);
        if (v12)
        {
          v13 = &v9[v7 + v10 + v12 + *(unsigned int *)&v9[v7 + 4 + v10 + v12]];
          std::string::basic_string[abi:ne180100](&__dst, v13 + 8, *((unsigned int *)v13 + 1));
          std::string::basic_string[abi:ne180100]<0>(__p, " ");
          quasar::splitAndTrimNoEmpty(&__dst, (char *)__p, (uint64_t)a2);
          if (v15 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
        }
      }
      v7 += 4;
    }
    while (v8 != v7);
  }
}

void sub_1ADFC8354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

unsigned int **std::__min_element[abi:ne180100]<quasar::ptt::ExtractPronunciation(quasar::rescoring::NBestList const&)::{lambda(quasar::rescoring::NBestListEntry const*,quasar::rescoring::NBestListEntry const*)#1} &,flatbuffers_2_0_6::VectorIterator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,quasar::rescoring::NBestListEntry const*>,flatbuffers_2_0_6::VectorIterator<flatbuffers_2_0_6::Offset<quasar::rescoring::NBestListEntry>,quasar::rescoring::NBestListEntry const*>>@<X0>(unsigned int **result@<X0>, unsigned int **a2@<X1>, char **a3@<X8>)
{
  char *v3;
  unsigned int *v4;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  float v10;
  float v11;
  char *v12;
  char *v13;
  float v14;
  float v15;
  uint64_t v16;
  unsigned int *v17;

  v3 = (char *)*result;
  v4 = *a2;
  if (*result != *a2 && *result + 1 != v4)
  {
    v6 = v3 + 22;
    do
    {
      v7 = *(unsigned int *)(v6 - 18);
      v8 = v7 - *(int *)&v6[v7 - 18];
      v9 = *(unsigned __int16 *)&v6[v8 - 18];
      v10 = 0.0;
      v11 = 0.0;
      if (v9 >= 0x13 && *(_WORD *)&v6[v8])
        v11 = *(float *)&v6[v7 - 18 + *(unsigned __int16 *)&v6[v8]];
      v12 = &v3[*(unsigned int *)v3];
      v13 = &v12[-*(int *)v12];
      result = (unsigned int **)*(unsigned __int16 *)v13;
      if (result >= 0x13 && *((_WORD *)v13 + 9))
        v10 = *(float *)&v12[*((unsigned __int16 *)v13 + 9)];
      if (v11 < v10)
        goto LABEL_20;
      v14 = 0.0;
      v15 = 0.0;
      if (v9 >= 0xF)
      {
        v16 = *(unsigned __int16 *)&v6[v8 - 4];
        if (v16)
          v15 = *(float *)&v6[v7 - 18 + v16];
      }
      if (result >= 0xF && *((_WORD *)v13 + 7))
        v14 = *(float *)&v12[*((unsigned __int16 *)v13 + 7)];
      if (v15 < v14)
LABEL_20:
        v3 = v6 - 18;
      v17 = (unsigned int *)(v6 - 14);
      v6 += 4;
    }
    while (v17 != v4);
  }
  *a3 = v3;
  return result;
}

uint64_t quasar::NullBlock::minConfigVersion(quasar::NullBlock *this)
{
  return 170;
}

void quasar::NullBlock::~NullBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this);
  JUMPOUT(0x1AF44D190);
}

const char *quasar::NullBlock::blockType(quasar::NullBlock *this)
{
  return "NullBlock";
}

void TaggedNgram::TaggedNgram(TaggedNgram *this, TaggedVocab *a2, int a3)
{
  _QWORD *v4;

  Ngram::Ngram(this, a2, a3);
  *v4 = &off_1E5D15BD8;
  v4[24] = a2;
}

void TaggedNgram::wordProbBO(TaggedNgram *this, uint64_t a2, const unsigned int *a3, int a4)
{
  unsigned int v6;
  uint64_t i;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned int v14[100];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v6 = a2 & 0xFFFFF;
  if (a4)
  {
    for (i = 0; i != a4; ++i)
      v14[i] = a3[i] & 0xFFFFF;
    v14[a4] = -1;
    if (!Ngram::findProb(this, a2 & 0xFFFFF, v14))
    {
      Ngram::findBOW(this, v14);
      v14[a4 - 1] = a3[a4 - 1] | 0xFFFFF;
      if (Ngram::findProb(this, v6, v14))
      {
        if ((*(unsigned int (**)(TaggedNgram *))(*(_QWORD *)this + 264))(this)
          && !*((_BYTE *)this + 8)
          && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
        {
          v12 = (_QWORD *)(*(uint64_t (**)(TaggedNgram *))(*(_QWORD *)this + 24))(this);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"[", 1);
          v13 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"+Tgram]", 7);
        }
      }
      else
      {
        Ngram::findBOW(this, v14);
        (*(void (**)(TaggedNgram *, uint64_t, const unsigned int *, _QWORD))(*(_QWORD *)this + 520))(this, a2, a3, (a4 - 1));
      }
      return;
    }
  }
  else
  {
    v14[0] = -1;
    if (!Ngram::findProb(this, a2 & 0xFFFFF, v14))
      return;
  }
  if ((*(unsigned int (**)(TaggedNgram *))(*(_QWORD *)this + 264))(this)
    && !*((_BYTE *)this + 8)
    && (Debug::debugAll > 1 || *((_DWORD *)this + 3) >= 2u))
  {
    v10 = (_QWORD *)(*(uint64_t (**)(TaggedNgram *))(*(_QWORD *)this + 24))(this);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"[", 1);
    v11 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"gram]", 5);
  }
}

uint64_t TaggedNgram::recomputeBOWs(TaggedNgram *this)
{
  int v2;
  uint64_t v3;
  double v4;
  _QWORD *v5;
  std::locale::id *v6;
  uint64_t v7;
  float *v8;
  double v9;
  double v10;
  float *v11;
  double v12;
  float v13;
  double v14;
  float v17;
  float v18;
  float v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  uint64_t result;
  unsigned int v29;
  _BYTE v30[32];
  _BYTE v31[80];
  int v32;
  _BYTE v33[12];
  int v34;
  std::locale v35;

  v2 = *((_DWORD *)this + 44);
  *(_DWORD *)&v33[8] = 0;
  v34 = 0;
  v32 = 0;
  *(_QWORD *)v33 = (v2 + 1);
  if (v2 == -1 || (Array<unsigned int>::alloc((uint64_t)&v32, v2, 0), *((_DWORD *)this + 44)))
  {
    v3 = 0;
    v4 = -0.000003;
    v5 = (_QWORD *)MEMORY[0x1E0DE4A50];
    v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      TrieIter2<unsigned int,BOnode>::TrieIter2(v31, (char *)this + 152, *(_QWORD *)&v33[4] - 4 * v32, v3, 0);
      while (1)
      {
        v7 = TrieIter2<unsigned int,BOnode>::next((uint64_t)v31);
        v8 = v7 ? (float *)(v7 + 8) : 0;
        if (!v7)
          break;
        LHashIter<unsigned int,float>::LHashIter(v30, v7 + 16, 0);
        v29 = 0;
        v9 = 1.0;
        v10 = 1.0;
        while (1)
        {
          v11 = (float *)LHashIter<unsigned int,float>::next((uint64_t)v30, &v29);
          if (!v11)
            break;
          v12 = 0.0;
          if (*v11 != -INFINITY)
            v12 = exp(*v11 * 2.30258509);
          v9 = v9 - v12;
          if ((_DWORD)v3)
          {
            v13 = (*(float (**)(TaggedNgram *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)this + 520))(this, v29, *(_QWORD *)&v33[4] - 4 * v32, (v3 - 1));
            v14 = 0.0;
            if (v13 != -INFINITY)
              v14 = exp(v13 * 2.30258509);
            v10 = v10 - v14;
          }
        }
        if (v9 > v4 && v9 < 0.0)
          v9 = 0.0;
        if (v10 < 0.0 && v10 > v4)
        {
          if (v9 < 0.0)
          {
LABEL_32:
            v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"BOW numerator for context \"", 27);
            (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 328))(*((_QWORD *)this + 24));
            v21 = operator<<(v20, (_DWORD *)(*(_QWORD *)&v33[4] - 4 * v32));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"\" is ", 5);
            v22 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" < 0\n", 5);
            goto LABEL_36;
          }
LABEL_33:
          v19 = 0.0;
          if (v9 > 0.000003)
          {
            v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"BOW denominator for context \"", 29);
            (*(void (**)(_QWORD))(**((_QWORD **)this + 24) + 328))(*((_QWORD *)this + 24));
            v24 = operator<<(v23, (_DWORD *)(*(_QWORD *)&v33[4] - 4 * v32));
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"\" is ", 5);
            v25 = (_QWORD *)std::ostream::operator<<();
            v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" <= 0", 5);
            std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
            v27 = std::locale::use_facet(&v35, v6);
            ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
            std::locale::~locale(&v35);
            std::ostream::put();
            std::ostream::flush();
            goto LABEL_36;
          }
LABEL_35:
          *v8 = v19;
          goto LABEL_36;
        }
        if (v9 < 0.0)
          goto LABEL_32;
        if (v10 <= 0.0)
          goto LABEL_33;
        if ((_DWORD)v3)
        {
          v17 = log10(v9);
          v18 = log10(v10);
          v19 = v17 - v18;
          goto LABEL_35;
        }
        (*(void (**)(TaggedNgram *, uint64_t, double))(*(_QWORD *)this + 504))(this, *(_QWORD *)&v33[4] - 4 * v32, v9);
LABEL_36:
        LHashIter<unsigned int,double>::~LHashIter((uint64_t)v30);
      }
      TrieIter2<unsigned int,unsigned int>::~TrieIter2(v31);
      v3 = (v3 + 1);
    }
    while (v3 < *((_DWORD *)this + 44));
  }
  result = *(_QWORD *)&v33[4];
  if (*(_QWORD *)&v33[4])
    return MEMORY[0x1AF44D160](*(_QWORD *)&v33[4], 0x1000C8052888210);
  return result;
}

void sub_1ADFC8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::locale a29)
{
  if (a27)
    MEMORY[0x1AF44D160](a27, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

void TaggedNgram::~TaggedNgram(TaggedNgram *this)
{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
}

{
  *(_QWORD *)this = &off_1E5D17188;
  Trie<unsigned int,BOnode>::~Trie((char *)this + 152);
  LM::~LM(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::ptt::ConvertPathsToResultChoices(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t i;
  uint64_t v8[3];
  void **v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  std::vector<std::vector<quasar::Token>>::reserve(a3, (a2[1] - *a2) >> 4);
  v6 = *a2;
  for (i = a2[1]; v6 != i; v6 += 16)
  {
    quasar::ptt::ConvertPathToResultChoice(a1, v6, v8);
    std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>(a3, (uint64_t)v8);
    v9 = (void **)v8;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v9);
  }
}

void sub_1ADFC8CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::ptt::ConvertPathToResultChoice(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  void *__p;
  void *v17;
  uint64_t v18;
  float v19;
  int v20;
  float v21;
  _DWORD v22[6];
  _DWORD *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v17 = 0;
  v18 = 0;
  v15 = 0;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v7 = operator new(0x28uLL);
  *v7 = &off_1E5D3EC18;
  v7[1] = a1;
  v7[2] = &__p;
  v7[3] = &v15;
  v7[4] = a3;
  v23 = v7;
  v8 = quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(a2, v6, (uint64_t)v22);
  v9 = v23;
  if (v23 == v22)
  {
    v10 = 4;
    v9 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_6:
  v12 = *a3;
  v11 = a3[1];
  if ((v8 & 1) == 0)
  {
    v13 = *a3;
    if (v11 != v12)
    {
      do
        quasar::Token::~Token((void **)(v11 - 224));
      while (v11 != v12);
      v13 = *a3;
    }
    a3[1] = v12;
    v11 = v12;
    v12 = v13;
  }
  if (v12 != v11)
  {
    v21 = *((float *)&v15 + 1);
    v22[0] = v15;
    v20 = 0;
    v19 = 0.0;
    if (*(float *)&v15 != 0.0 || v21 != v19)
    {
      v14 = *(float *)&v15 + *(float *)(v11 - 16);
      *(float *)(v11 - 20) = *((float *)&v15 + 1) + *(float *)(v11 - 20);
      *(float *)(v11 - 16) = v14;
    }
  }
  if (__p)
  {
    v17 = __p;
    operator delete(__p);
  }
}

void sub_1ADFC8EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t *a19)
{
  uint64_t *v19;
  uint64_t *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_6:
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

float quasar::ptt::GetResultChoiceCost(uint64_t *a1)
{
  uint64_t v1;
  float result;

  v1 = *a1;
  result = 0.0;
  while (v1 != a1[1])
  {
    result = result + (float)(*(float *)(v1 + 208) + *(float *)(v1 + 204));
    v1 += 224;
  }
  return result;
}

uint64_t quasar::ptt::ConvertPathsToCompactLattice@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  void *v9;
  uint64_t v10;

  v4 = (_QWORD *)operator new();
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(v4);
  *a2 = v4;
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v9);
  v5 = *a1;
  v6 = a1[1];
  while (v5 != v6)
  {
    fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(v5, (uint64_t)&v9, 1);
    fst::Union<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)v4, (uint64_t)&v9);
    v5 += 16;
  }
  v9 = &unk_1E5D25800;
  result = v10;
  if (v10)
  {
    v8 = *(_DWORD *)(v10 + 56) - 1;
    *(_DWORD *)(v10 + 56) = v8;
    if (!v8)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADFC9004(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;

  *v1 = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  _Unwind_Resume(a1);
}

uint64_t quasar::IterLinearFst<fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  _OWORD v13[17];
  uint64_t v14;
  _QWORD v15[3];
  _DWORD *v16;
  uint64_t v17;
  float v18;
  int v19;
  float v20;

  v17 = 0;
  (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 136))(a1, a2, v15);
  for (i = a2; ; i = *(unsigned int *)(v8 + 16))
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v14, a1, i);
    v20 = *((float *)&v14 + 1);
    LODWORD(v13[0]) = v14;
    v19 = 2139095040;
    v18 = INFINITY;
    v7.n128_u32[0] = v14;
    if (*(float *)&v14 != INFINITY)
      break;
    v7.n128_f32[0] = v20;
    if (v20 != v18)
      break;
    if ((*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 40))(a1, i, v20) != 1)
    {
      if (quasar::gLogLevel >= 1)
        goto LABEL_17;
      goto LABEL_18;
    }
    if ((_DWORD)i != (_DWORD)a2)
      fst::ArcIterator<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Reinit(v15, a1, i);
    if (v15[0])
      v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v15[0] + 32))(v15[0]);
    else
      v8 = v15[1] + 20 * v17;
    *(_QWORD *)&v13[0] = v8;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      std::__throw_bad_function_call[abi:ne180100]();
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *))(*(_QWORD *)v9 + 48))(v9, &v14, v13) & 1) == 0)
      goto LABEL_18;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)a1 + 40))(a1, i, v7))
  {
    if (quasar::gLogLevel >= 1)
    {
LABEL_17:
      memset(v13, 0, sizeof(v13));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"FST is not linear.", 18);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
    }
LABEL_18:
    v10 = 0;
    goto LABEL_19;
  }
  *(_QWORD *)&v13[0] = 0;
  v12 = *(_QWORD *)(a3 + 24);
  if (!v12)
    std::__throw_bad_function_call[abi:ne180100]();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t *, _OWORD *))(*(_QWORD *)v12 + 48))(v12, &v14, v13);
LABEL_19:
  if (v15[0])
  {
    (*(void (**)(_QWORD))(*(_QWORD *)v15[0] + 8))(v15[0]);
  }
  else if (v16)
  {
    --*v16;
  }
  return v10;
}

void sub_1ADFC9314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v11;
  _DWORD *v12;

  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  v11 = *(_QWORD *)(v9 - 120);
  if (v11)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  else
  {
    v12 = *(_DWORD **)(v9 - 96);
    if (v12)
      --*v12;
  }
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E5D3EC18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3EC18;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t **a3)
{
  return quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}::operator()(a1 + 8, a2, *a3);
}

uint64_t std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1},std::allocator<quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}>,BOOL ()(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)>::target_type()
{
}

uint64_t quasar::ptt::ConvertPathToResultChoice(quasar::QsrTextSymbolTable const&,fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>> const&)::{lambda(fst::LatticeWeightTpl<float> const&,fst::ArcTpl<fst::LatticeWeightTpl<float>,int> const*)#1}::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3)
{
  float32x2_t *v3;
  __int32 v6;
  uint64_t v7;
  __int32 *v8;
  unint64_t v9;
  _DWORD *v10;
  __int32 *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  __int32 *v17;
  char *v18;
  __int32 v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  uint64_t v27;
  __int32 v28;
  void *v29;
  char v30;
  uint64_t v31;
  void *v32;
  char v33;
  uint64_t v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  int32x2_t v39;

  v3 = *(float32x2_t **)(a1 + 16);
  if (a3)
  {
    *v3 = vadd_f32(*v3, a3[1]);
    v6 = a3->i32[0];
    if (a3->i32[0])
    {
      v7 = *(_QWORD *)(a1 + 8);
      v8 = *(__int32 **)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
      if ((unint64_t)v8 >= v9)
      {
        v11 = *(__int32 **)v7;
        v12 = ((uint64_t)v8 - *(_QWORD *)v7) >> 2;
        v13 = v12 + 1;
        if ((unint64_t)(v12 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v14 = v9 - (_QWORD)v11;
        if (v14 >> 1 > v13)
          v13 = v14 >> 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
          v15 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v15 = v13;
        if (v15)
        {
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v7 + 16, v15);
          v11 = *(__int32 **)v7;
          v8 = *(__int32 **)(v7 + 8);
          v6 = a3->i32[0];
        }
        else
        {
          v16 = 0;
        }
        v17 = (__int32 *)&v16[4 * v12];
        v18 = &v16[4 * v15];
        *v17 = v6;
        v10 = v17 + 1;
        while (v8 != v11)
        {
          v19 = *--v8;
          *--v17 = v19;
        }
        *(_QWORD *)v7 = v17;
        *(_QWORD *)(v7 + 8) = v10;
        *(_QWORD *)(v7 + 16) = v18;
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v8 = v6;
        v10 = v8 + 1;
      }
      *(_QWORD *)(v7 + 8) = v10;
    }
    if (a3->i32[1])
    {
      quasar::Token::Token((quasar::Token *)__p);
      quasar::QsrTextSymbolTable::Find(*(quasar::QsrTextSymbolTable **)a1, &v24);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
      *(_OWORD *)__p = v24;
      v27 = v25;
      v28 = a3->i32[1];
      v20 = *(uint64_t **)(a1 + 24);
      v39 = vrev64_s32(**(int32x2_t **)(a1 + 16));
      v21 = v20[1];
      if (v21 >= v20[2])
      {
        v22 = std::vector<quasar::Token>::__emplace_back_slow_path<quasar::Token&>(v20, (const quasar::Token *)__p);
      }
      else
      {
        quasar::Token::Token((std::string *)v20[1], (const quasar::Token *)__p);
        v22 = v21 + 224;
        v20[1] = v21 + 224;
      }
      v20[1] = v22;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = **(_QWORD **)(a1 + 8);
      **(_QWORD **)(a1 + 16) = 0;
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
      *(_QWORD *)&v24 = &v34;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (v33 < 0)
        operator delete(v32);
      *(_QWORD *)&v24 = &v31;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
      if (v30 < 0)
        operator delete(v29);
      if (SHIBYTE(v27) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *v3 = vadd_f32(*v3, *a2);
  }
  return 1;
}

void sub_1ADFC9698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  quasar::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  float v6;
  _QWORD v7[3];
  uint64_t v8;

  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  v5 = *(unsigned int *)(a2 + 20);
  v7[2] = 0;
  v8 = 0;
  v7[0] = &unk_1E5D341C8;
  v7[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v7, v5, 0);
  v8 = *(_QWORD *)(a3 + 32);
  v6 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v7, a2, 111, v6, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v7, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v7, -0.5);
  kaldi::CuMatrixBase<float>::MulRowsVec(a3, (uint64_t)v7);
  v7[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v7);
}

void sub_1ADFC9788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuVector<float>::~CuVector(&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::BackpropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;
  _QWORD v13[3];
  uint64_t v14;
  _QWORD v15[3];
  uint64_t v16;

  v8 = *(unsigned int *)(a2 + 20);
  v15[2] = 0;
  v16 = 0;
  v15[0] = &unk_1E5D341C8;
  v15[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v15, v8, 0);
  v16 = *(_QWORD *)(a5 + 32);
  v9 = v16;
  v10 = 1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuVectorBase<float>::AddDiagMat2((uint64_t)v15, a2, 111, v10, 0.0);
  kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v15, 1.3553e-20);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v15, -0.5);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v15, a4, 111, 1.0, 0.0);
  kaldi::CuVectorBase<float>::ReplaceValue((uint64_t)v15, 8589900000.0, 0.0);
  kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v15, 3.0);
  v11 = *(unsigned int *)(a5 + 20);
  v13[2] = 0;
  v14 = 0;
  v13[0] = &unk_1E5D341C8;
  v13[1] = 0;
  kaldi::CuVector<float>::Resize((uint64_t)v13, v11, 0);
  v14 = v9;
  kaldi::CuVectorBase<float>::AddDiagMatMat((uint64_t)v13, a4, 111, a2, 112, 1.0, 0.0);
  kaldi::CuVectorBase<float>::MulElements((uint64_t)v13, (uint64_t)v15);
  v12 = -1.0 / (double)*(int *)(a2 + 16);
  kaldi::CuMatrixBase<float>::AddDiagVecMat(a5, (uint64_t)v13, a2, 111, v12, 1.0);
  v13[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v13);
  v15[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v15);
}

void sub_1ADFC991C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::NormalizeComponent::~NormalizeComponent(kaldi::nnet1::NormalizeComponent *this)
{
  kaldi::nnet1::Component::~Component(this);
  JUMPOUT(0x1AF44D190);
}

double kaldi::nnet1::NormalizeComponent::Copy(kaldi::nnet1::NormalizeComponent *this)
{
  uint64_t v2;
  double result;

  v2 = operator new();
  result = *((double *)this + 1);
  *(double *)(v2 + 8) = result;
  *(_WORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)v2 = &off_1E5D2DFA8;
  return result;
}

uint64_t kaldi::nnet1::NormalizeComponent::GetType(kaldi::nnet1::NormalizeComponent *this)
{
  return 1034;
}

uint64_t quasar::PDecG2P::PDecG2P(uint64_t a1, uint64_t *a2, uint64_t *a3, __int128 *a4, quasar::SystemConfig *a5, int a6)
{
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t Ptree;
  uint64_t Int;
  int v25;
  double v26;
  float v27;
  char v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  float v32;
  unsigned int BoolOptional;
  char v34;
  double v35;
  float v36;
  char v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  __int128 *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t ModelLoader;
  _DWORD *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  _DWORD *v63;
  void *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD *v73;
  __int128 *v74;
  uint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  void *__p[2];
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  void *v95;
  std::__shared_weak_count *v96;
  char v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  std::__shared_weak_count *v103;

  v10 = a2[1];
  v102 = *a2;
  v103 = (std::__shared_weak_count *)v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = a3[1];
  v100 = *a3;
  v101 = (std::__shared_weak_count *)v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  std::string::basic_string[abi:ne180100]<0>(&v98, "");
  quasar::QuasarG2PBase::QuasarG2PBase(a1, &v102, &v100, a4, a5, a6, (uint64_t)__p, &v98);
  if (SHIBYTE(v99) < 0)
    operator delete((void *)v98);
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  v16 = v101;
  if (v101)
  {
    p_shared_owners = (unint64_t *)&v101->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  v19 = v103;
  if (v103)
  {
    v20 = (unint64_t *)&v103->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = &off_1E5D3BAD8;
  v22 = (uint64_t *)(a1 + 376);
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "g2p");
  Ptree = quasar::SystemConfig::getPtree((uint64_t)a5, (uint64_t)__p);
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  Int = quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)__p);
  if ((Int & 0xFF00000000) != 0)
    v25 = Int;
  else
    v25 = 4;
  *(_DWORD *)(a1 + 352) = v25;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "lm-weight");
  quasar::PTree::getDoubleOptional(Ptree, (uint64_t)__p);
  v27 = v26;
  if (!v28)
    v27 = 0.0;
  *(float *)(a1 + 356) = v27;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-seq-length");
  v29 = quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)__p);
  if ((v29 & 0xFF00000000) != 0)
    v30 = v29;
  else
    v30 = 100;
  *(_DWORD *)(a1 + 360) = v30;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "max-seq-length-veto-factor");
  v31 = quasar::PTree::getIntOptional<int>(Ptree, (uint64_t)__p);
  v32 = (float)(int)v31;
  if ((v31 & 0xFF00000000) == 0)
    v32 = 0.0;
  *(float *)(a1 + 364) = v32;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "enable-memory-map");
  BoolOptional = (unsigned __int16)quasar::PTree::getBoolOptional(Ptree, (uint64_t)__p);
  if (BoolOptional <= 0x100)
    v34 = 0;
  else
    v34 = BoolOptional;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "veto-factor");
  quasar::PTree::getDoubleOptional(Ptree, (uint64_t)__p);
  v36 = v35;
  if (!v37)
    v36 = 0.5;
  *(float *)(a1 + 372) = v36;
  if (SBYTE7(v79) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v95, "lm-model-file");
  quasar::PTree::getStringOptional(Ptree, (uint64_t)&v95, (std::string *)__p);
  if (BYTE8(v79))
  {
    v98 = *(_OWORD *)__p;
    v99 = v79;
    __p[1] = 0;
    *(_QWORD *)&v79 = 0;
    __p[0] = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v98, "");
    if (BYTE8(v79) && SBYTE7(v79) < 0)
      operator delete(__p[0]);
  }
  if (v97 < 0)
    operator delete(v95);
  if (quasar::gLogLevel >= 5)
  {
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v38 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"PDecG2P Config: model=", 22);
    v39 = *(char *)(a1 + 327);
    if (v39 >= 0)
      v40 = a1 + 304;
    else
      v40 = *(_QWORD *)(a1 + 304);
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(a1 + 327);
    else
      v41 = *(_QWORD *)(a1 + 312);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, v40, v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)", beam=", 7);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", lmWeight=", 11);
    v44 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)", maxSeqLength=", 15);
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)", vetoFactor=", 13);
    v46 = (_QWORD *)std::ostream::operator<<();
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)", lmModelFile=", 14);
    if (v99 >= 0)
      v48 = &v98;
    else
      v48 = (__int128 *)v98;
    if (v99 >= 0)
      v49 = HIBYTE(v99);
    else
      v49 = *((_QWORD *)&v98 + 1);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)v48, v49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)", maxLengthVetoFactor=", 22);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
  *(_DWORD *)(a1 + 368) = 1;
  v51 = operator new();
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::TranslationBeamSearch(v51, *(_DWORD *)(a1 + 360), *(_DWORD *)(a1 + 368), 0, 0, 0, 0, 0, *(float *)(a1 + 372), -1.0, 1.0, 5.0, 1, 0, 0);
  v52 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v51;
  if (v52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
    v51 = *(_QWORD *)(a1 + 384);
  }
  v76 = 0;
  v77 = 0;
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read(v51, a1 + 304, v34 != 0, 0, 0, &v76);
  v53 = v77;
  if (v77)
  {
    v54 = (unint64_t *)&v77->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = HIBYTE(v99);
  v57 = HIBYTE(v99);
  if (v99 < 0)
    v56 = *((_QWORD *)&v98 + 1);
  if (v56)
  {
    ModelLoader = quasar::SystemConfig::getModelLoader(a5);
    (*(void (**)(void **__return_ptr, uint64_t, __int128 *))(*(_QWORD *)ModelLoader + 16))(&v95, ModelLoader, &v98);
    if (!v95)
    {
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v81 = 0u;
      v82 = 0u;
      v79 = 0u;
      v80 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Failed to read lm fst from: ", 28);
      if (v99 >= 0)
        v74 = &v98;
      else
        v74 = (__int128 *)v98;
      if (v99 >= 0)
        v75 = HIBYTE(v99);
      else
        v75 = *((_QWORD *)&v98 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)v74, v75);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v79 = 0;
    v59 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v79, 1uLL);
    v60 = (char *)__p[0];
    v61 = (char *)__p[1];
    v63 = &v59[v62];
    *v59 = 0;
    v64 = v59 + 1;
    while (v61 != v60)
    {
      v65 = *((_DWORD *)v61 - 1);
      v61 -= 4;
      *--v59 = v65;
    }
    __p[0] = v59;
    __p[1] = v64;
    *(_QWORD *)&v79 = v63;
    if (v60)
      operator delete(v60);
    __p[1] = v64;
    v66 = (uint64_t)v95;
    v67 = operator new();
    fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::BackoffDeterministicOnDemandFst(v67, v66, (uint64_t)__p);
    v68 = *v22;
    *v22 = v67;
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 48))(v68);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v69 = v96;
    if (v96)
    {
      v70 = (unint64_t *)&v96->__shared_owners_;
      do
        v71 = __ldaxr(v70);
      while (__stlxr(v71 - 1, v70));
      if (!v71)
      {
        ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
        std::__shared_weak_count::__release_weak(v69);
      }
    }
    v57 = HIBYTE(v99);
  }
  if (v57 < 0)
    operator delete((void *)v98);
  return a1;
}

void sub_1ADFCA110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  if (a19 && a18 < 0)
    operator delete(__p);
  if (*(char *)(v21 - 129) < 0)
    operator delete(*(void **)(v21 - 152));
  v23 = *(_QWORD *)(v19 + 384);
  *(_QWORD *)(v19 + 384) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = *v20;
  *v20 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 48))(v24);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)v19);
  _Unwind_Resume(a1);
}

void quasar::PDecG2P::doG2P(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  std::string::size_type v7;
  std::string::size_type size;
  std::string *v9;
  char v10;
  int v11;
  const std::string::value_type *v12;
  BOOL v13;
  std::string::size_type v14;
  int v15;
  __int128 v16;
  __int128 *v17;
  void **p_data;
  int v19;
  float v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void **v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void **v55;
  void *v56[2];
  unsigned __int8 v57;
  void *__p[2];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  float v75;
  void **v76[2];
  _QWORD v77[11];
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _DWORD v93[8];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 *v102;
  std::string *v103;
  unint64_t v104;
  std::string v105;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v94 = 0u;
      v92 = 0u;
      memset(v93, 0, sizeof(v93));
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v83 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v83);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"Empty token received", 20);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v83);
    }
    return;
  }
  quasar::QuasarG2PBase::chopTokenIntoUTF8Units((quasar::QuasarG2PBase *)a1, &v105);
  v102 = 0;
  v103 = 0;
  v104 = 0;
  size = v105.__r_.__value_.__l.__size_;
  v7 = v105.__r_.__value_.__r.__words[0];
  if (v105.__r_.__value_.__r.__words[0] == v105.__r_.__value_.__l.__size_)
    goto LABEL_93;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = *(char *)(v7 + 23);
    if (v11 < 0)
    {
      v14 = *(_QWORD *)(v7 + 8);
      if (v14 != 1)
      {
        v13 = 0;
        if ((unint64_t)v9 >= v104)
          goto LABEL_21;
        goto LABEL_23;
      }
      v12 = *(const std::string::value_type **)v7;
    }
    else
    {
      v12 = (const std::string::value_type *)v7;
      if (v11 != 1)
      {
        v13 = 0;
        if ((unint64_t)v9 >= v104)
          goto LABEL_21;
LABEL_20:
        v16 = *(_OWORD *)v7;
        v9->__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v16;
LABEL_24:
        ++v9;
        goto LABEL_25;
      }
    }
    v15 = *(unsigned __int8 *)v12;
    v13 = v15 == 124;
    if (v15 != 124)
      goto LABEL_18;
    if ((v10 & 1) != 0)
    {
      v10 = 1;
      goto LABEL_26;
    }
    if (v102 != (__int128 *)v9)
    {
LABEL_18:
      if ((unint64_t)v9 >= v104)
      {
LABEL_21:
        v9 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v102, (__int128 *)v7);
LABEL_25:
        v103 = v9;
        v10 = v13;
        goto LABEL_26;
      }
      if ((v11 & 0x80000000) == 0)
        goto LABEL_20;
      v14 = *(_QWORD *)(v7 + 8);
LABEL_23:
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v7, v14);
      goto LABEL_24;
    }
    v10 = 0;
LABEL_26:
    v7 += 24;
  }
  while (v7 != size);
  v17 = v102;
  if (v102 != (__int128 *)v9)
  {
    p_data = (void **)&v9[-1].__r_.__value_.__l.__data_;
    v19 = SHIBYTE(v9[-1].__r_.__value_.__r.__words[2]);
    if ((v19 & 0x80000000) == 0)
    {
      if (v19 != 1 || *(_BYTE *)p_data != 124)
        goto LABEL_40;
LABEL_39:
      v103 = --v9;
      goto LABEL_40;
    }
    if (v9[-1].__r_.__value_.__l.__size_ == 1 && *(_BYTE *)*p_data == 124)
    {
      operator delete(*p_data);
      v17 = v102;
      goto LABEL_39;
    }
LABEL_40:
    if (v17 != (__int128 *)v9)
    {
      v20 = *(float *)(a1 + 364);
      v21 = (int)(float)(v20 * (float)(0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v17) >> 3)));
      if (v21 <= 1)
        v22 = 1;
      else
        v22 = v21;
      v23 = *(_DWORD *)(a1 + 360);
      v24 = *(_QWORD *)(a1 + 384);
      if (v20 == 0.0 || v22 >= v23)
      {
        *(_DWORD *)(v24 + 5188) = v23;
      }
      else
      {
        *(_DWORD *)(v24 + 5188) = v22;
        if (quasar::gLogLevel >= 5)
        {
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v94 = 0u;
          v92 = 0u;
          memset(v93, 0, sizeof(v93));
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v83 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v83);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v83, (uint64_t)"Reducing maximum sequence length from ", 38);
          v25 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
          v26 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" because of max-seq-length-veto-factor", 38);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v83);
        }
      }
      v99 = 0;
      v100 = 0;
      v101 = 0;
      kaldi::quasar::DecodeOptions<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DecodeOptions((uint64_t)&v83, *(_DWORD *)(a1 + 352), *(_DWORD *)(a1 + 368), *(float *)(a1 + 372));
      v52 = a2;
      v27 = *(_QWORD *)(a1 + 384);
      *((_QWORD *)&v94 + 1) = *(_QWORD *)(a1 + 376);
      v93[6] = 1;
      v93[5] = *(_DWORD *)(a1 + 356);
      *(_QWORD *)&v93[3] = 0;
      kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v27, &v102, (uint64_t)&v83, &v99);
      v29 = v99;
      v28 = v100;
      if (v99 != v100)
      {
        v30 = (void **)*MEMORY[0x1E0DE4F50];
        v54 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
        v55 = *(void ***)(MEMORY[0x1E0DE4F50] + 64);
        v53 = MEMORY[0x1E0DE4FB8] + 16;
        while (1)
        {
          v31 = *(float *)(v29 + 24);
          v32 = *(float *)(v29 + 28);
          v81 = 0;
          v80 = 0;
          v82 = 0;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__init_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>(&v80, *(_QWORD *)v29, *(_QWORD *)(v29 + 8), 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(v29 + 8) - *(_QWORD *)v29) >> 4));
          if (*(_DWORD *)(v29 + 56) != 3)
            break;
LABEL_91:
          v76[0] = (void **)&v80;
          std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100](v76);
          v29 += 272;
          if (v29 == v28)
            goto LABEL_92;
        }
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v76);
        v33 = v80;
        if (v81 != v80)
        {
          v34 = 0;
          v35 = 0;
          do
          {
            v36 = v33 + v34;
            v37 = *(char *)(v36 + 23);
            if (v37 >= 0)
              v38 = v36;
            else
              v38 = *(_QWORD *)v36;
            if (v37 >= 0)
              v39 = *(unsigned __int8 *)(v36 + 23);
            else
              v39 = *(_QWORD *)(v36 + 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, v38, v39);
            v33 = v80;
            v40 = 0xEEEEEEEEEEEEEEEFLL * ((v81 - v80) >> 4);
            if (v35 < v40 - 1)
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)".", 1);
              v33 = v80;
              v40 = 0xEEEEEEEEEEEEEEEFLL * ((v81 - v80) >> 4);
            }
            ++v35;
            v34 += 240;
          }
          while (v35 != v40);
        }
        std::stringbuf::str();
        if (SBYTE7(v59) < 0)
        {
          v41 = __p[1];
          operator delete(__p[0]);
          if (!v41)
          {
LABEL_88:
            v76[0] = v30;
            *(void ***)((char *)v76 + (_QWORD)*(v30 - 3)) = v55;
            v77[0] = v54;
            v77[1] = v53;
            if (v78 < 0)
              operator delete((void *)v77[9]);
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x1AF44D094](&v79);
            goto LABEL_91;
          }
        }
        else if (!BYTE7(v59))
        {
          goto LABEL_88;
        }
        v75 = (float)(v31 + v32) / (float)(0xEEEEEEEEEEEEEEEFLL * ((v81 - v80) >> 4));
        LODWORD(v56[0]) = 1;
        std::stringbuf::str();
        v42 = a3[1];
        if (v42 >= a3[2])
        {
          v43 = std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float &>(a3, (int *)v56, (uint64_t)__p, (int *)&v75);
        }
        else
        {
          std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float &>((uint64_t)(a3 + 2), a3[1], (int *)v56, (uint64_t)__p, (int *)&v75);
          v43 = v42 + 40;
          a3[1] = v42 + 40;
        }
        a3[1] = v43;
        if (SBYTE7(v59) < 0)
          operator delete(__p[0]);
        if (quasar::gLogLevel >= 5)
        {
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          v69 = 0u;
          v70 = 0u;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v63 = 0u;
          v64 = 0u;
          v61 = 0u;
          v62 = 0u;
          v59 = 0u;
          v60 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v44 = *(char *)(v52 + 23);
          if (v44 >= 0)
            v45 = v52;
          else
            v45 = *(_QWORD *)v52;
          if (v44 >= 0)
            v46 = *(unsigned __int8 *)(v52 + 23);
          else
            v46 = *(_QWORD *)(v52 + 8);
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v45, v46);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"\t", 1);
          v48 = (_QWORD *)std::ostream::operator<<();
          v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"\t", 1);
          std::stringbuf::str();
          if ((v57 & 0x80u) == 0)
            v50 = v56;
          else
            v50 = (void **)v56[0];
          if ((v57 & 0x80u) == 0)
            v51 = v57;
          else
            v51 = (uint64_t)v56[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
          if ((char)v57 < 0)
            operator delete(v56[0]);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
        }
        goto LABEL_88;
      }
LABEL_92:
      kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)&v83);
      *(_QWORD *)&v83 = &v99;
      std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
    }
  }
LABEL_93:
  *(_QWORD *)&v83 = &v102;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
  *(_QWORD *)&v83 = &v105;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v83);
}

void sub_1ADFCA9A8(_Unwind_Exception *a1)
{
  unint64_t v1;
  uint64_t v2;

  STACK[0x2A0] = v2 - 160;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = v2 - 136;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  STACK[0x2A0] = v1;
  std::vector<quasar::PronChoice>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A0]);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeTokenized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, __int128 **a2, uint64_t a3, uint64_t *a4)
{
  float v8;
  std::string v10;
  void *__p;
  void *v12;
  uint64_t v13;
  std::string *v14;

  __p = 0;
  v12 = 0;
  v13 = 0;
  memset(&v10, 0, sizeof(v10));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v10, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Symbolize(a1, (uint64_t *)&v10, (uint64_t)&__p, 0);
  v14 = &v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  v8 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, (int **)&__p, a3, a4, (uint64_t *)a2);
  if (__p)
  {
    v12 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_1ADFCAB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16)
{
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void quasar::PDecG2P::batchDoG2P()
{
  _OWORD v0[17];

  memset(v0, 0, sizeof(v0));
  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v0);
}

void quasar::PDecG2P::~PDecG2P(quasar::PDecG2P *this)
{
  quasar::PDecG2P::~PDecG2P(this);
  JUMPOUT(0x1AF44D190);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_1E5D3BAD8;
  v2 = *((_QWORD *)this + 48);
  *((_QWORD *)this + 48) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 47);
  *((_QWORD *)this + 47) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
  quasar::QuasarG2PBase::~QuasarG2PBase((void **)this);
}

uint64_t quasar::PDecG2P::getG2PVersion(quasar::PDecG2P *this)
{
  return 3;
}

uint64_t quasar::PDecG2P::getG2PModelInputSymbolTable(quasar::PDecG2P *this)
{
  return kaldi::quasar::TorchEncoderDecoder::InputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(*((_QWORD *)this + 48)
                                                                                                 + 136));
}

uint64_t kaldi::quasar::DecodeOptions<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DecodeOptions(uint64_t a1, int a2, int a3, float a4)
{
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a2;
  *(_QWORD *)(a1 + 164) = 0x4F0000004F000000;
  *(_QWORD *)(a1 + 176) = 0;
  *(_DWORD *)(a1 + 172) = 0;
  *(_QWORD *)(a1 + 184) = 1;
  *(_DWORD *)(a1 + 192) = 1;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 220) = 0x40A000003F800000;
  *(float *)(a1 + 228) = a4;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 252) = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_QWORD *)(a1 + 236) = 0;
  *(_QWORD *)(a1 + 244) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 264), "");
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = 0x10000;
  *(_BYTE *)(a1 + 308) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 316) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  return a1;
}

void sub_1ADFCADA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;

  a10 = (void **)(v10 + 240);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 159) < 0)
    operator delete(*(void **)(v10 + 136));
  if (*(char *)(v10 + 135) < 0)
    operator delete(*(void **)(v10 + 112));
  if (*(char *)(v10 + 111) < 0)
    operator delete(*(void **)(v10 + 88));
  if (*(char *)(v10 + 87) < 0)
    operator delete(*(void **)(v10 + 64));
  if (*(char *)(v10 + 63) < 0)
    operator delete(*(void **)(v10 + 40));
  if (*(char *)(v10 + 39) < 0)
    operator delete(*v11);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  char *v10;
  float v11;
  const kaldi::quasar::TranslationUtil::NbestElement *v12;
  const kaldi::quasar::TranslationUtil::NbestElement *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  void **v27;
  unint64_t v28;
  void **v29;
  void **v30;
  void **v31;
  void **v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  char **v37;
  BOOL v38;
  uint64_t i;
  uint64_t v40;
  uint64_t v41;
  int v42;
  void **v44;
  float v45;
  char **v46;
  char *v47;
  uint64_t v48;
  _QWORD v49[3];
  void *v50;
  uint64_t v51;
  char **v52;
  char *v53;
  uint64_t v54;
  __int128 *v55;

  v53 = 0;
  v54 = 0;
  v52 = &v53;
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    std::__tree<std::string>::destroy((uint64_t)&v52, v53);
    v10 = v47;
    v52 = v46;
    v53 = v47;
    v54 = v48;
    if (v48)
    {
      *((_QWORD *)v47 + 2) = &v53;
      v46 = &v47;
      v47 = 0;
      v48 = 0;
      v10 = 0;
    }
    else
    {
      v52 = &v53;
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v10);
  }
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v50);
  memset(v49, 0, sizeof(v49));
  v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, a3, (uint64_t)&v50);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, (uint64_t)&v50, a4, a5, (uint64_t)a2);
  if (a4[1] == *a4 && *(_QWORD *)(a3 + 200))
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Re-decode without LM ", 21);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v46);
    }
    kaldi::quasar::DecodeOptions<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::DecodeOptions((uint64_t)&v46, *(_DWORD *)(a3 + 160), *(_DWORD *)(a3 + 216), *(float *)(a3 + 228));
    v11 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeSymbolized<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a2, &v46, a4, a5);
    kaldi::quasar::DecodeOptions<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::~DecodeOptions((uint64_t)&v46);
  }
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v44, *(_DWORD *)(a1 + 5224), *(float *)(a3 + 220), *(float *)(a3 + 224));
  v12 = (const kaldi::quasar::TranslationUtil::NbestElement *)*a4;
  v13 = (const kaldi::quasar::TranslationUtil::NbestElement *)a4[1];
  v46 = (char **)v44;
  *(float *)&v47 = v45;
  if (v13 - v12 < 1)
  {
    v14 = 0;
    v16 = 0;
  }
  else
  {
    v14 = (kaldi::quasar::TranslationUtil::NbestElement *)std::get_temporary_buffer[abi:ne180100]<kaldi::quasar::TranslationUtil::NbestElement>(0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4));
    v16 = v15;
  }
  std::__stable_sort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare &,std::__wrap_iter<kaldi::quasar::TranslationUtil::NbestElement *>>(v12, v13, (float *)&v46, 0xF0F0F0F0F0F0F0F1 * ((v13 - v12) >> 4), v14, v16);
  if (v14)
    operator delete(v14);
  v17 = *a4;
  v18 = a4[1];
  if (*a4 != v18)
  {
    v19 = (int)v44;
    v20 = *((float *)&v44 + 1);
    v21 = v45;
    v22 = powf(v45 + 1.0, *((float *)&v44 + 1));
    do
    {
      v23 = *(float *)(v17 + 24);
      v24 = *(float *)(v17 + 28);
      v25 = (uint64_t)(*(_QWORD *)(v17 + 200) - *(_QWORD *)(v17 + 192)) >> 2;
      if (v19 == 2)
      {
        v26 = powf(v21 + (float)(unint64_t)v25, v20) / v22;
      }
      else
      {
        v26 = 1.0;
        if (v19 == 1)
          v26 = (float)(unint64_t)(v25 + 1);
      }
      *(float *)(v17 + 40) = (float)(v23 + v24) / v26;
      v17 += 272;
    }
    while (v17 != v18);
  }
  if (*(_BYTE *)(a3 + 308))
  {
    kaldi::quasar::TorchEncoderDecoder::GetTiming(*(const void ***)(a1 + 136), (uint64_t)&v46);
    v27 = (void **)v46;
    if (v46 != &v47)
    {
      do
      {
        if (*((char *)v27 + 55) < 0)
        {
          v29 = (void **)v27[4];
          v28 = (unint64_t)v27[5];
        }
        else
        {
          v28 = *((unsigned __int8 *)v27 + 55);
          v29 = v27 + 4;
        }
        if (v28 >= 4)
          v28 = 4;
        if (v28)
        {
          v30 = (void **)((char *)v29 + v28);
          v31 = v29;
          v32 = v30;
          do
          {
            if (*(_BYTE *)v31 == 116)
            {
              v33 = 1u;
              while (v33 != 4)
              {
                if ((void **)((char *)v31 + v33) == v30)
                  goto LABEL_41;
                v34 = *((unsigned __int8 *)v31 + v33);
                v35 = aTime_2[v33++];
                if (v34 != v35)
                  goto LABEL_33;
              }
              v32 = v31;
            }
LABEL_33:
            v31 = (void **)((char *)v31 + 1);
          }
          while (v31 != v30);
LABEL_41:
          if (v32 != v30 && v32 == v29)
          {
            v55 = (__int128 *)(v27 + 4);
            *((double *)v27 + 7) = *((double *)v27 + 7)
                                 - *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v52, (const void **)v27 + 4, (uint64_t)&std::piecewise_construct, &v55)+ 7);
          }
        }
        v36 = (char *)v27[1];
        if (v36)
        {
          do
          {
            v37 = (char **)v36;
            v36 = *(char **)v36;
          }
          while (v36);
        }
        else
        {
          do
          {
            v37 = (char **)v27[2];
            v38 = *v37 == (char *)v27;
            v27 = (void **)v37;
          }
          while (!v38);
        }
        v27 = (void **)v37;
      }
      while (v37 != &v47);
    }
    v40 = *a4;
    for (i = a4[1]; v40 != i; v40 += 272)
    {
      if ((char ***)(v40 + 248) != &v46)
        std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(v40 + 248), v46, &v47);
    }
    std::__tree<std::string>::destroy((uint64_t)&v46, v47);
  }
  v46 = (char **)v49;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&v46);
  v50 = &unk_1E5D25A80;
  v41 = v51;
  if (v51)
  {
    v42 = *(_DWORD *)(v51 + 56) - 1;
    *(_DWORD *)(v51 + 56) = v42;
    if (!v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  std::__tree<std::string>::destroy((uint64_t)&v52, v53);
  return v11;
}

void sub_1ADFCB288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  _DWORD *v13;
  int v14;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a11);
  a9 = (void **)(v11 - 192);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a9);
  *(_QWORD *)(v11 - 168) = &unk_1E5D25A80;
  v13 = *(_DWORD **)(v11 - 160);
  if (v13)
  {
    v14 = v13[14] - 1;
    v13[14] = v14;
    if (!v14)
      (*(void (**)(_DWORD *))(*(_QWORD *)v13 + 8))(v13);
  }
  std::__tree<std::string>::destroy(v11 - 152, *(char **)(v11 - 144));
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::DecodeCore<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, int **a2, uint64_t a3, uint64_t a4)
{
  double *v7;
  uint64_t v8;
  _QWORD *v9;
  void **v10;
  uint64_t v11;
  float v12;
  int v13;
  int v14;
  float v15;
  int v16;
  kaldi::quasar::TorchEncoderDecoder **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  clockid_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  clockid_t v26;
  int v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  __int128 __p;
  uint64_t v33;
  void **v34;
  _QWORD *v35;
  uint64_t v36;
  _BYTE v37[56];

  v7 = (double *)(a1 + 4856);
  v8 = a1 + 5680;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  kaldi::quasar::TimeBlock::TimeBlock((uint64_t)v37, v7, v8, &__p);
  if (SHIBYTE(v33) < 0)
    operator delete((void *)__p);
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    v34 = 0;
    v35 = 0;
    v36 = 0;
    kaldi::JoinVectorToString<int>(a2, ",", (uint64_t)&v34);
    if (kaldi::g_kaldi_verbose_level >= 3)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Input : ", 8);
      if (v36 >= 0)
        v10 = (void **)&v34;
      else
        v10 = v34;
      if (v36 >= 0)
        v11 = HIBYTE(v36);
      else
        v11 = (uint64_t)v35;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
  v12 = (float)(int)(((unint64_t)((char *)a2[1] - (char *)*a2) >> 2)
                   - (*(_DWORD *)(a3 + 236)
                    + *(_DWORD *)(a1 + 5204)));
  v13 = (int)(float)(*(float *)(a1 + 5200) * v12);
  if (v13 <= 1)
    v13 = 1;
  v28 = v13;
  v14 = *(_DWORD *)(a1 + 5188);
  v15 = *(float *)(a1 + 5192);
  if (v15 != -1.0)
  {
    v16 = (int)(float)(v15 * v12);
    if (*(_DWORD *)(a1 + 5196) > v16)
      v16 = *(_DWORD *)(a1 + 5196);
    if (v16 < v14)
      v14 = v16;
  }
  v17 = (kaldi::quasar::TorchEncoderDecoder **)(a1 + 136);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SelectModel((_QWORD **)(a1 + 136), a3 + 136, a3 + 88, &v30);
  v18 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (*(_DWORD *)(a3 + 160))
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Beam decoding", 13);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, a4);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>((uint64_t *)a1, a3, (uint64_t)a2, 0, 0.0);
    v22 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, a3, v14, 1);
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Greedy decoding", 15);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
    }
    kaldi::quasar::TorchEncoderDecoder::Start(*v17, *(clockid_t *)(a3 + 312), a3 + 112);
    v23 = *(_QWORD *)(a1 + 136);
    v24 = *(unsigned int *)(a3 + 288);
    v25 = *(unsigned int *)(a3 + 292);
    __p = 0uLL;
    v33 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a3 + 64, a3 + 88, (uint64_t *)(a3 + 328), (uint64_t)&v34);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v23, a3 + 264, v24, v25, a2, (int **)&__p, &v34);
    std::__tree<int>::destroy((uint64_t)&v34, v35);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a4 + 224))(a4);
    __p = 0uLL;
    v33 = 0;
    v22 = kaldi::quasar::TMTools::GreedyDecode<kaldi::quasar::TorchEncoderDecoder>(*v17, (uint64_t *)a2, (uint64_t)&__p, a3 + 112, a4, v28, v14);
    kaldi::quasar::TorchEncoderDecoder::Finish(*v17, v26);
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)v37, v21);
  return v22;
}

void sub_1ADFCB6D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  clockid_t v21;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
  kaldi::quasar::TimeBlock::~TimeBlock((kaldi::quasar::TimeBlock *)(v19 - 152), v21);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::LatticeToNbest<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t a6)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  __n128 v22;
  _BOOL4 v23;
  uint64_t *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  float v28;
  float v29;
  _DWORD *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  int v37;
  uint64_t v38;
  _DWORD *v39;
  char *v40;
  char *v41;
  _DWORD *v42;
  _DWORD *v43;
  int v44;
  char *v45;
  _DWORD *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  int v55;
  char *v56;
  _DWORD *v57;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  int v65;
  char *v66;
  _DWORD *v67;
  char *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  int v76;
  _BOOL4 v77;
  int v78;
  _QWORD **v79;
  _QWORD *v80;
  _QWORD **v81;
  BOOL v82;
  _QWORD *v83;
  _QWORD *v84;
  std::string *v85;
  std::string::size_type size;
  std::string *v87;
  std::string *v88;
  char *v89;
  std::string::size_type v90;
  float v91;
  float v92;
  _DWORD *v93;
  _DWORD *v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t result;
  int v100;
  uint64_t *v101;
  uint64_t v102;
  int v104;
  _BYTE *v105;
  std::string __p;
  float v108;
  float v109;
  std::string::size_type v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD v114[3];
  char v115[96];
  std::string v116;
  int v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  _QWORD v122[8];
  __int128 v123;
  _QWORD v124[8];
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _BYTE *v128;
  uint64_t v129;
  unsigned int v130;
  void *__src;
  _DWORD *v132;
  unint64_t v133;
  uint64_t v134;
  std::string *v135;
  unint64_t v136;
  _QWORD **v137;
  _QWORD *v138[2];
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  uint64_t v143;
  std::string::size_type v144;
  void *v145[3];
  int32x2_t v146;
  void *v147;
  void *v148;
  uint64_t v149;
  void *v150;
  uint64_t v151;
  float v152;
  int v153;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v150);
  v10 = *(_DWORD *)(a2 + 172);
  if (v10 <= 0)
    v10 = *(_DWORD *)(a2 + 160);
  v146 = vdup_n_s32(0x7F800000u);
  v148 = 0;
  v149 = 0;
  v147 = 0;
  fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(a3, (uint64_t)&v150, v10 + 1, 0, 0, (uint64_t *)&v146, -1, 0);
  if (v147)
  {
    v148 = v147;
    operator delete(v147);
  }
  fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, (uint64_t)&v144, 0.00097656);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(&v142);
  v140 = 0;
  v139 = 0;
  v141 = 0;
  fst::ConvertNbestToVector<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)&v150, &v139);
  v11 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds(a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)&v137);
  v12 = v140;
  v13 = v139;
  if (v140 == v139 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Didn't extract any paths from the lattice", 41);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
    v12 = v140;
    v13 = v139;
  }
  if (v12 != v13)
  {
    v14 = 0;
    v105 = (_BYTE *)(a1 + 5236);
    v101 = a4;
    do
    {
      v15 = (_QWORD *)(v13 + 16 * v14);
      fst::ShortestDistance<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>((uint64_t)v15, (uint64_t)&__p, 0.00097656);
      v144 = __p.__r_.__value_.__r.__words[0];
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v145, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2], (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__l.__size_) >> 2);
      v102 = v14;
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      v135 = 0;
      v134 = 0;
      v136 = 0;
      v16 = (*(uint64_t (**)(_QWORD *))(*v15 + 24))(v15);
      v17 = 0;
      v132 = 0;
      __src = 0;
      v104 = 1;
      v18 = 0.0;
      v19 = 0.0;
      v20 = 0.0;
      v133 = 0;
      v21 = 0.0;
      while (1)
      {
        (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&__p, v15, v16);
        LODWORD(v125) = HIDWORD(__p.__r_.__value_.__r.__words[0]);
        LODWORD(v116.__r_.__value_.__l.__data_) = __p.__r_.__value_.__l.__data_;
        v153 = 2139095040;
        v152 = INFINITY;
        v22.n128_u32[0] = (unsigned __int32)__p.__r_.__value_.__l.__data_;
        if (*(float *)&__p.__r_.__value_.__l.__data_ == INFINITY)
        {
          v22.n128_u32[0] = v125;
          v23 = *(float *)&v125 == v152;
        }
        else
        {
          v23 = 0;
        }
        if (__p.__r_.__value_.__l.__size_)
        {
          __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
          operator delete((void *)__p.__r_.__value_.__l.__size_);
        }
        if (!v23)
          break;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48))
          v24 = 0;
        else
          v24 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v15[1] + 64) + 8 * (int)v16) + 48);
        v125 = *v24;
        v126 = v24[1];
        v128 = 0;
        v129 = 0;
        v127 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v127, (const void *)v24[2], v24[3], (v24[3] - v24[2]) >> 2);
        v16 = *((unsigned int *)v24 + 10);
        v130 = v16;
        if ((v125 & 0x80000000) != 0)
        {
          v104 = -(int)v125;
          LODWORD(v125) = 0;
        }
        v25 = HIDWORD(v125);
        if (!HIDWORD(v125))
        {
          v29 = *((float *)&v126 + 1);
          v28 = *(float *)&v126;
          v18 = v18 + *(float *)&v126;
          v19 = v19 + *((float *)&v126 + 1);
          goto LABEL_137;
        }
        v26 = v132;
        if ((unint64_t)v132 >= v133)
        {
          v30 = __src;
          v31 = ((char *)v132 - (_BYTE *)__src) >> 2;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v33 = v133 - (_QWORD)__src;
          if ((uint64_t)(v133 - (_QWORD)__src) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v133, v34);
            v26 = v132;
            v30 = __src;
            v25 = HIDWORD(v125);
          }
          else
          {
            v35 = 0;
          }
          v36 = &v35[4 * v31];
          *(_DWORD *)v36 = v25;
          v27 = v36 + 4;
          while (v26 != v30)
          {
            v37 = *--v26;
            *((_DWORD *)v36 - 1) = v37;
            v36 -= 4;
          }
          __src = v36;
          v132 = v27;
          v133 = (unint64_t)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v132 = HIDWORD(v125);
          v27 = v26 + 1;
        }
        v132 = v27;
        memset(&v116, 0, sizeof(v116));
        v118 = 0u;
        v119 = 0u;
        v120 = 0u;
        v121 = 0u;
        memset(v122, 0, sizeof(v122));
        v123 = 0u;
        memset(v124, 0, 60);
        v39 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122[1], 1uLL);
        v40 = (char *)v122[0];
        v41 = (char *)*((_QWORD *)&v121 + 1);
        *v39 = v125;
        v42 = v39 + 1;
        v43 = v39;
        while (v40 != v41)
        {
          v44 = *((_DWORD *)v40 - 1);
          v40 -= 4;
          *--v43 = v44;
        }
        *((_QWORD *)&v121 + 1) = v43;
        v122[0] = v39 + 1;
        v122[1] = &v39[v38];
        if (v41)
          operator delete(v41);
        v122[0] = v42;
        v45 = (char *)v124[5];
        if (v124[5] >= v124[6])
        {
          v47 = (char *)v124[4];
          v48 = (uint64_t)(v124[5] - v124[4]) >> 2;
          v49 = v48 + 1;
          if ((unint64_t)(v48 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v50 = v124[6] - v124[4];
          if ((uint64_t)(v124[6] - v124[4]) >> 1 > v49)
            v49 = v50 >> 1;
          if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
            v51 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v51 = v49;
          if (v51)
          {
            v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[6], v51);
            v45 = (char *)v124[5];
            v47 = (char *)v124[4];
          }
          else
          {
            v52 = 0;
          }
          v53 = &v52[4 * v48];
          *(_DWORD *)v53 = HIDWORD(v125);
          v46 = v53 + 4;
          while (v45 != v47)
          {
            v54 = *((_DWORD *)v45 - 1);
            v45 -= 4;
            *((_DWORD *)v53 - 1) = v54;
            v53 -= 4;
          }
          v124[4] = v53;
          v124[5] = v46;
          v124[6] = &v52[4 * v51];
          if (v47)
            operator delete(v47);
        }
        else
        {
          *(_DWORD *)v124[5] = HIDWORD(v125);
          v46 = v45 + 4;
        }
        v124[5] = v46;
        v55 = HIDWORD(v126);
        v56 = (char *)v124[2];
        if (v124[2] >= v124[3])
        {
          v58 = (char *)v124[1];
          v59 = (uint64_t)(v124[2] - v124[1]) >> 2;
          v60 = v59 + 1;
          if ((unint64_t)(v59 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v61 = v124[3] - v124[1];
          if ((uint64_t)(v124[3] - v124[1]) >> 1 > v60)
            v60 = v61 >> 1;
          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
            v62 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v62 = v60;
          if (v62)
          {
            v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v124[3], v62);
            v56 = (char *)v124[2];
            v58 = (char *)v124[1];
          }
          else
          {
            v63 = 0;
          }
          v64 = &v63[4 * v59];
          *(_DWORD *)v64 = v55;
          v57 = v64 + 4;
          while (v56 != v58)
          {
            v65 = *((_DWORD *)v56 - 1);
            v56 -= 4;
            *((_DWORD *)v64 - 1) = v65;
            v64 -= 4;
          }
          v124[1] = v64;
          v124[2] = v57;
          v124[3] = &v63[4 * v62];
          if (v58)
            operator delete(v58);
        }
        else
        {
          *(_DWORD *)v124[2] = HIDWORD(v126);
          v57 = v56 + 4;
        }
        v124[2] = v57;
        v122[6] = v122[5];
        memset(&__p, 0, sizeof(__p));
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, v127, (uint64_t)v128, (v128 - (_BYTE *)v127) >> 2);
        if (v122[5])
        {
          v122[6] = v122[5];
          operator delete((void *)v122[5]);
        }
        *(std::string *)&v122[5] = __p;
        v66 = (char *)*((_QWORD *)&v123 + 1);
        if (*((_QWORD *)&v123 + 1) >= v124[0])
        {
          v68 = (char *)v123;
          v69 = (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 2;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v71 = v124[0] - v123;
          if ((uint64_t)(v124[0] - v123) >> 1 > v70)
            v70 = v71 >> 1;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
            v72 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v124, v72);
            v66 = (char *)*((_QWORD *)&v123 + 1);
            v68 = (char *)v123;
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[4 * v69];
          *(_DWORD *)v74 = v17;
          v67 = v74 + 4;
          while (v66 != v68)
          {
            v75 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *(_QWORD *)&v123 = v74;
          *((_QWORD *)&v123 + 1) = v67;
          v124[0] = &v73[4 * v72];
          if (v68)
            operator delete(v68);
        }
        else
        {
          **((_DWORD **)&v123 + 1) = v17;
          v67 = v66 + 4;
        }
        *((_QWORD *)&v123 + 1) = v67;
        v29 = *((float *)&v126 + 1);
        v28 = *(float *)&v126;
        *(_QWORD *)&v121 = v126;
        v117 = HIDWORD(v125) - 1;
        if (HIDWORD(v125) == *(_DWORD *)(a1 + 5184) + 1)
        {
          v76 = *(unsigned __int8 *)(a2 + 307);
          v77 = *(_BYTE *)(a2 + 307) == 0;
          if (a5 && *v105 && !*(_BYTE *)(a2 + 307))
          {
            if (!*(_BYTE *)(a1 + 5240)
              || !kaldi::quasar::PhraseBook::Find(*(_QWORD **)(a1 + 392), *a5 + 24 * (int)v125, (uint64_t)&v116))
            {
              std::string::operator=(&v116, (const std::string *)(*a5 + 24 * (int)v125));
            }
            if (v11)
            {
              v78 = (*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 96))(v11, &v116);
              if (v78 != -1)
                v117 = v78 - 1;
            }
            goto LABEL_114;
          }
          if (a6 && *v105)
          {
            v89 = *(char **)a6;
            v117 = *(_DWORD *)(*(_QWORD *)a6 + 4 * (int)v125);
            if (!v76)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11, *(int *)&v89[4 * (int)v125] + 1);
              goto LABEL_111;
            }
            goto LABEL_114;
          }
        }
        else
        {
          v77 = *(_BYTE *)(a2 + 307) == 0;
        }
        if (v11 && v77)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v11 + 88))(&__p, v11);
LABEL_111:
          if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v116.__r_.__value_.__l.__data_);
          v116 = __p;
        }
LABEL_114:
        v79 = v137;
        if (v137 != v138)
        {
          while (*((_DWORD *)v79 + 7) != v117)
          {
            v80 = v79[1];
            if (v80)
            {
              do
              {
                v81 = (_QWORD **)v80;
                v80 = (_QWORD *)*v80;
              }
              while (v80);
            }
            else
            {
              do
              {
                v81 = (_QWORD **)v79[2];
                v82 = *v81 == v79;
                v79 = v81;
              }
              while (!v82);
            }
            v79 = v81;
            if (v81 == v138)
              goto LABEL_133;
          }
          if (v79 != v138)
          {
            if (kaldi::g_kaldi_verbose_level >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 5);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown replacement disabled for: ", 34);
              v83 = (_QWORD *)std::ostream::operator<<();
              v84 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v83, (uint64_t)" / ", 3);
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v85 = &v116;
              else
                v85 = (std::string *)v116.__r_.__value_.__r.__words[0];
              if ((v116.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v116.__r_.__value_.__r.__words[2]);
              else
                size = v116.__r_.__value_.__l.__size_;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v84, (uint64_t)v85, size);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
            }
            MEMORY[0x1AF44C914](&v116, "");
            v117 = *(_DWORD *)(a1 + 5184);
          }
        }
LABEL_133:
        v87 = v135;
        if ((unint64_t)v135 >= v136)
        {
          v88 = (std::string *)std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement const&>(&v134, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
        }
        else
        {
          kaldi::quasar::TranslationUtil::PathElement::PathElement(v135, (const kaldi::quasar::TranslationUtil::PathElement *)&v116);
          v88 = v87 + 10;
        }
        ++v17;
        v135 = v88;
        v16 = v130;
        kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&v116);
LABEL_137:
        if (v127)
        {
          v128 = v127;
          operator delete(v127);
        }
        v21 = v21 + v29;
        v20 = v20 + v28;
      }
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t, __n128))(*v15 + 32))(&__p, v15, v16, v22);
      v90 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__assign_with_size[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement*,kaldi::quasar::TranslationUtil::PathElement*>((uint64_t)&__p, v134, (uint64_t)v135, 0xEEEEEEEEEEEEEEEFLL * (((uint64_t)v135 - v134) >> 4));
      v108 = v20 + *(float *)&v90;
      v109 = v21 + *((float *)&v90 + 1);
      (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t))(*v15 + 32))(&v116, v15, v16);
      v92 = *((float *)v116.__r_.__value_.__r.__words + 1);
      v91 = *(float *)&v116.__r_.__value_.__l.__data_;
      v110 = v116.__r_.__value_.__r.__words[0];
      if (v116.__r_.__value_.__l.__size_)
      {
        v116.__r_.__value_.__r.__words[2] = v116.__r_.__value_.__l.__size_;
        operator delete((void *)v116.__r_.__value_.__l.__size_);
        v92 = *((float *)&v110 + 1);
        v91 = *(float *)&v110;
      }
      *(float *)&v110 = v18 + v91;
      *((float *)&v110 + 1) = v19 + v92;
      v112 = v104;
      if (a5)
        kaldi::JoinVectorToString<std::string>(a5, " ", (uint64_t)&v113);
      if (a6)
      {
        if (v114 != (_QWORD *)a6)
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v114, *(char **)a6, *(_QWORD *)(a6 + 8), (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2);
        v111 = (uint64_t)(*(_QWORD *)(a6 + 8) - *(_QWORD *)a6) >> 2;
        v93 = (_DWORD *)v114[0];
        v94 = (_DWORD *)v114[1];
        while (v93 != v94)
          ++*v93++;
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v115, (char *)__src, (uint64_t)v132, ((char *)v132 - (_BYTE *)__src) >> 2);
      v95 = v101[1];
      if (v95 >= v101[2])
      {
        v96 = std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement const&>(v101, (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)v101[1], (const kaldi::quasar::TranslationUtil::NbestElement *)&__p);
        v96 = v95 + 272;
        v101[1] = v95 + 272;
      }
      v101[1] = v96;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__p);
      if (__src)
      {
        v132 = __src;
        operator delete(__src);
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v134;
      std::vector<kaldi::quasar::TranslationUtil::PathElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      v14 = v102 + 1;
      v13 = v139;
    }
    while (v102 + 1 != (v140 - v139) >> 4);
  }
  std::__tree<int>::destroy((uint64_t)&v137, v138[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v139;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v142 = &unk_1E5D25A80;
  v97 = v143;
  if (v143)
  {
    v98 = *(_DWORD *)(v143 + 56) - 1;
    *(_DWORD *)(v143 + 56) = v98;
    if (!v98)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
  }
  if (v145[0])
  {
    v145[1] = v145[0];
    operator delete(v145[0]);
  }
  v150 = &unk_1E5D25A80;
  result = v151;
  if (v151)
  {
    v100 = *(_DWORD *)(v151 + 56) - 1;
    *(_DWORD *)(v151 + 56) = v100;
    if (!v100)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADFCC3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  uint64_t v29;
  _DWORD *v31;
  int v32;
  void *v33;
  _DWORD *v34;
  int v35;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a29);
  std::__tree<int>::destroy((uint64_t)&STACK[0x310], (_QWORD *)STACK[0x318]);
  a29 = (uint64_t)&STACK[0x328];
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a29);
  *(_QWORD *)(v29 - 240) = &unk_1E5D25A80;
  v31 = *(_DWORD **)(v29 - 232);
  if (v31)
  {
    v32 = v31[14] - 1;
    v31[14] = v32;
    if (!v32)
      (*(void (**)(_DWORD *))(*(_QWORD *)v31 + 8))(v31);
  }
  v33 = *(void **)(v29 - 216);
  if (v33)
  {
    *(_QWORD *)(v29 - 208) = v33;
    operator delete(v33);
  }
  *(_QWORD *)(v29 - 160) = &unk_1E5D25A80;
  v34 = *(_DWORD **)(v29 - 152);
  if (v34)
  {
    v35 = v34[14] - 1;
    v34[14] = v35;
    if (!v35)
      (*(void (**)(_DWORD *))(*(_QWORD *)v34 + 8))(v34);
  }
  _Unwind_Resume(a1);
}

double kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Init<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  int v19;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"entered Init with #ActiveHyps: ", 31);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v18);
  }
  *(_QWORD *)(a1 + 5712) = a3;
  kaldi::quasar::TorchEncoderDecoder::Start(*(_QWORD **)(a1 + 136), *(clockid_t *)(a2 + 312), a2 + 112);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 224))(*(_QWORD *)(a1 + 5712));
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 200))(a3);
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 5712) + 176))(*(_QWORD *)(a1 + 5712), v7);
  *(_DWORD *)(a1 + 5720) = -1;
  *(int32x2_t *)(a1 + 5728) = vdup_n_s32(0x7F800000u);
  std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 5736), 0, 0, 0);
  v8 = *(_DWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 5760) = 0x3F8000004F000000;
  if (v8 == 1)
    *(float *)(a1 + 5764) = 1.0 - *(float *)(a2 + 180);
  kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::NbestCompare::NbestCompare((uint64_t)&v18, *(_DWORD *)(a2 + 216), *(float *)(a2 + 220), *(float *)(a2 + 224));
  *(_QWORD *)(a1 + 5768) = v18;
  *(_DWORD *)(a1 + 5776) = v19;
  *(_QWORD *)(a1 + 5792) = *(_QWORD *)(a1 + 5784);
  std::vector<kaldi::Matrix<float>>::resize((uint64_t *)(a1 + 4952), 1uLL);
  kaldi::Matrix<float>::Resize(*(int32x2_t **)(a1 + 4952), 0, 0, 0, 0);
  v9 = *(_QWORD **)(a1 + 5136);
  v10 = *(_QWORD **)(a1 + 5128);
  if (v9 != v10)
  {
    v11 = v9 - 6;
    v12 = v9 - 6;
    do
    {
      v13 = *v12;
      v12 -= 6;
      (*(void (**)(_QWORD *))(v13 + 16))(v11);
      v14 = v11 == v10;
      v11 = v12;
    }
    while (!v14);
  }
  *(_QWORD *)(a1 + 5136) = v10;
  v15 = *(_QWORD *)(a1 + 5160);
  v16 = *(_QWORD *)(a1 + 5152);
  while (v15 != v16)
    v15 = kaldi::Matrix<float>::~Matrix(v15 - 40);
  *(_QWORD *)(a1 + 5160) = v16;
  result = 0.0;
  *(_QWORD *)(a1 + 5832) = 0;
  *(_QWORD *)(a1 + 5872) = *(_QWORD *)(a1 + 5864);
  return result;
}

void sub_1ADFCC7B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Read<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, float a5)
{
  uint64_t *v10;
  uint64_t v11;
  int v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30[3];
  void *__p;
  void *v32;
  uint64_t v33;
  int32x2_t v34;
  __int128 v35;
  __int128 v36;
  char v37;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v34, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v34, (uint64_t)"entered Read to process #tokens: ", 33);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v34);
  }
  v10 = a1 + 619;
  v11 = a1[619];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[620] - v11) >> 3) <= a4)
  {
    std::vector<kaldi::Matrix<float>>::resize(a1 + 619, a4 + 1);
    v11 = *v10;
  }
  v36 = 0u;
  v35 = 0u;
  v34 = (int32x2_t)&unk_1E5D34170;
  v37 = 0;
  v12 = kaldi::MatrixBase<float>::NumRows(v11 + 40 * a4);
  kaldi::Matrix<float>::Resize((int32x2_t *)(*v10 + 40 * a4), v12 + ((*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2), 1, 2, 0);
  v13 = *(int **)a3;
  v14 = *v10;
  v15 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v15)
  {
    v16 = v15 >> 2;
    v17 = (uint64_t *)(v14 + 40 * a4);
    v18 = *((_DWORD *)v17 + 2);
    v19 = *v17;
    v20 = *((int *)v17 + 4);
    v21 = v12;
    if ((unint64_t)(v15 >> 2) <= 1)
      v16 = 1;
    v22 = (float *)(v19 + 4 * (int)v20 * (uint64_t)v12);
    v23 = 4 * v20;
    do
    {
      v24 = *v13++;
      *v22 = (float)v24;
      v22 = (float *)((char *)v22 + v23);
      ++v21;
      --v16;
    }
    while (v16);
  }
  else
  {
    v18 = *(_DWORD *)(v14 + 40 * a4 + 8);
  }
  kaldi::SubMatrix<float>::SubMatrix((uint64_t)&__p, v14 + 40 * a4, v12, (unint64_t)v15 >> 2, 0, v18);
  kaldi::CuMatrix<float>::operator=(&v34, (int *)&__p);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&__p);
  v25 = a1[17];
  if (v12)
  {
    kaldi::quasar::TorchEncoderDecoder::EncFeedforward(a1[17], (uint64_t)&v34, a4);
  }
  else
  {
    v26 = *(unsigned int *)(a2 + 288);
    v27 = *(unsigned int *)(a2 + 292);
    __p = 0;
    v32 = 0;
    v33 = 0;
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::SuppressedIds((uint64_t)a1, a2 + 64, a2 + 88, (uint64_t *)(a2 + 328), (uint64_t)v30);
    kaldi::quasar::TorchEncoderDecoder::ConstrainSoftmax(v25, a2 + 264, v26, v27, (int **)a3, (int **)&__p, v30);
    std::__tree<int>::destroy((uint64_t)v30, (_QWORD *)v30[1]);
    if (__p)
    {
      v32 = __p;
      operator delete(__p);
    }
    kaldi::quasar::TorchEncoderDecoder::ResetHistoryState((kaldi::quasar::TorchEncoderDecoder *)a1[17], 1);
    v28 = a1[17];
    if (*(_DWORD *)(a2 + 300))
      kaldi::quasar::TorchEncoderDecoder::EncFeedforward(v28, (uint64_t)&v34, a4);
    else
      kaldi::quasar::TorchEncoderDecoder::StartFeedforward(v28, (uint64_t)&v34, a4, 0);
    kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::AddInitialHypToCurrent<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>((uint64_t)a1, a2, a4, a5);
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v34);
}

void sub_1ADFCCA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::__tree<int>::destroy((uint64_t)&a9, a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&a16);
  _Unwind_Resume(a1);
}

float kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Write<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v7;
  clockid_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int32x2_t *v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::vector<int> *v18;
  std::vector<int> *v19;
  int *end;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::vector<unsigned int> *v53;
  std::vector<unsigned int> *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  char *v69;
  int v70;
  int VocabWordIdx;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  float v79;
  int v80;
  int v81;
  char v82;
  float v83;
  float v84;
  int v85;
  float v86;
  int v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  float v91;
  float v92;
  char *v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  void *v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  int v101;
  uint64_t *v102;
  void *v103;
  float v104;
  int SoftmaxEosId;
  int v106;
  char *v107;
  uint64_t v108;
  uint64_t *v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  float *v116;
  char *v117;
  float v118;
  int v119;
  float v120;
  float v121;
  float v122;
  float v123;
  int v124;
  std::vector<int> *v125;
  std::vector<int> *v126;
  int v127;
  float v128;
  float v129;
  float v130;
  float v131;
  BOOL v132;
  int64_t v133;
  unint64_t v134;
  float v135;
  std::vector<int> *v136;
  char v137;
  float v138;
  char *v139;
  int *v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  BOOL v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  int v150;
  char *v151;
  unsigned int v152;
  unsigned int v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  _QWORD *v168;
  float v169;
  int v170;
  float v171;
  float v172;
  float v173;
  uint64_t v174;
  uint64_t v175;
  float v176;
  float v177;
  _BYTE *v178;
  _BYTE *v179;
  uint64_t v180;
  uint64_t v181;
  float v182;
  float *v183;
  float *v184;
  uint64_t v185;
  uint64_t v186;
  float *v187;
  uint64_t v188;
  unint64_t v189;
  float *v190;
  float v191;
  float v192;
  float *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  float *v197;
  int32x2_t v198;
  int v199;
  int v200;
  _DWORD *v201;
  int v202;
  float v203;
  float v204;
  char v205;
  uint64_t v207;
  char *v208;
  void *v209;
  int64_t v210;
  unint64_t v211;
  unint64_t v212;
  char *v213;
  uint64_t *v214;
  char *v215;
  char *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t *v219;
  uint64_t *v220;
  uint64_t v221;
  void *v222;
  _QWORD *v223;
  uint64_t *v224;
  uint64_t *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  float v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  float v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v241;
  void **v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  __n128 v246;
  _BOOL4 v247;
  uint64_t v248;
  uint64_t v249;
  char v250;
  void **v251;
  int v252;
  int v253;
  _QWORD *v255;
  void **v256;
  uint64_t v257;
  _QWORD *v258;
  _QWORD *v259;
  int v260;
  int *v261;
  unint64_t v262;
  _DWORD *v263;
  int *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t v268;
  char *v269;
  int *v270;
  int v271;
  uint64_t v272;
  int v273;
  _QWORD *v274;
  _QWORD *v275;
  _QWORD *v276;
  float v277;
  char *v278;
  int v279;
  int64_t v280;
  _QWORD *v281;
  uint64_t v282;
  int32x2_t *v283;
  int32x2_t *v284;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  float v289;
  _BOOL4 v290;
  uint64_t v291;
  uint64_t v292;
  int64_t v293;
  int BestAlignment;
  BOOL v295;
  unsigned __int8 *v296;
  int32x2_t v297;
  void *v298;
  void *v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  void *v303;
  uint64_t v304;
  void *v305[2];
  __int128 v306;
  void **v307;
  void *v308;
  void *v309;
  _DWORD *v310;
  unint64_t v311;
  int v312;
  void *v313;
  _BYTE *v314;
  uint64_t v315;
  void *v316[2];
  __int128 v317;
  void **v318;
  void *v319;
  void *v320;
  uint64_t v321;
  _DWORD v322[2];
  void *v323;
  void *v324;
  uint64_t v325;
  void *v326;
  _BYTE *v327;
  uint64_t v328;
  _OWORD v329[2];
  int v330;
  void *v331;
  _BYTE *v332;
  uint64_t v333;
  char *v334;
  char *v335;
  unint64_t v336;
  void *v337[2];
  __int128 v338;
  int v339;
  void *v340;
  _BYTE *v341;
  uint64_t v342;
  std::vector<int> *v343;
  std::vector<int> *v344;
  std::vector<int> *v345;
  void *__src;
  void *v347;
  unint64_t v348;
  _BYTE __p[40];
  __int128 v350;

  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"entered Write with #ActiveHyps: ", 32);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" at decoding-position: ", 23);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  v347 = 0;
  __src = 0;
  v348 = 0;
  v344 = 0;
  v343 = 0;
  v345 = 0;
  v341 = 0;
  v340 = 0;
  v342 = 0;
  std::priority_queue<float>::push((uint64_t)&v340, &kaldi::quasar::kMaxCost);
  if (*(float *)(a2 + 320) != 0.0)
  {
    v9 = *(_QWORD *)(a1 + 136);
    if (!*(_BYTE *)(v9 + 3922) || !*(_BYTE *)(v9 + 3923))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Decoder repetition detection requires an alignment model with shifted alignments!", 81);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
    }
  }
  v290 = (*(_QWORD *)(a2 + 200) || *(_QWORD *)(a2 + 208)) && (*(_DWORD *)(a2 + 184) - 1) < 2;
  v291 = a2;
  if (a3 >= 1)
  {
    v296 = (unsigned __int8 *)(a1 + 5238);
    v10 = *(_DWORD *)(a2 + 188);
    v11 = *(int *)(a1 + 5836);
    v280 = v11 + a3;
    v284 = (int32x2_t *)(a1 + 4976);
    v282 = 0;
    v283 = (int32x2_t *)(a1 + 5024);
    v12 = (int32x2_t *)(a1 + 5072);
    v13 = 1.0;
    v14 = 0x4F0000004F000000;
    v277 = 2147500000.0;
    v15 = 0x4F0000004F000000;
    v279 = v10;
    v278 = (char *)(a1 + 5784);
    v281 = (_QWORD *)(a1 + 5808);
    while (1)
    {
      v16 = *(_QWORD *)(a1 + 5784);
      v17 = *(_QWORD *)(a1 + 5792);
      if (v16 == v17)
        goto LABEL_320;
      if ((v10 != 1) | v282 & 1)
      {
        if (v10 == 2)
        {
          if (*(float *)v340 < v277)
            goto LABEL_320;
        }
        else if (v10 || SHIDWORD(v282) >= *(_DWORD *)(a2 + 160))
        {
          goto LABEL_320;
        }
      }
      if (*(float *)(a2 + 320) != 0.0 && *(_BYTE *)(*(_QWORD *)v16 + 200))
        goto LABEL_320;
      v18 = v343;
      v19 = v344;
      if (v344 != v343)
      {
        do
        {
          end = v19[-2].__end_;
          if (end)
          {
            v19[-2].__end_cap_.__value_ = end;
            operator delete(end);
          }
          v19 = (std::vector<int> *)((char *)v19 - 56);
        }
        while (v19 != v18);
        v17 = *(_QWORD *)(a1 + 5792);
        v16 = *(_QWORD *)(a1 + 5784);
      }
      v344 = v18;
      *(_OWORD *)v337 = 0u;
      v338 = 0u;
      v339 = 1065353216;
      v286 = v11;
      if (v17 != v16)
      {
        v21 = 0;
        do
        {
          *(_DWORD *)__p = 0;
          *(_DWORD *)__p = **(_DWORD **)(v16 + 8 * v21);
          v307 = (void **)__p;
          v22 = std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)v337, (int *)__p, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
          v23 = v22;
          v24 = (unint64_t *)v22[4];
          v25 = (uint64_t)(v22 + 5);
          v26 = v22[5];
          if ((unint64_t)v24 >= v26)
          {
            v28 = (unint64_t *)v22[3];
            v29 = v24 - v28;
            if ((unint64_t)(v29 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v30 = v26 - (_QWORD)v28;
            v31 = (uint64_t)(v26 - (_QWORD)v28) >> 2;
            if (v31 <= v29 + 1)
              v31 = v29 + 1;
            if (v30 >= 0x7FFFFFFFFFFFFFF8)
              v32 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v32 = v31;
            if (v32)
            {
              v33 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v25, v32);
              v28 = (unint64_t *)v23[3];
              v24 = (unint64_t *)v23[4];
            }
            else
            {
              v33 = 0;
            }
            v34 = (unint64_t *)&v33[8 * v29];
            *v34 = v21;
            v27 = v34 + 1;
            while (v24 != v28)
            {
              v35 = *--v24;
              *--v34 = v35;
            }
            v23[3] = v34;
            v23[4] = v27;
            v23[5] = &v33[8 * v32];
            if (v28)
              operator delete(v28);
          }
          else
          {
            *v24 = v21;
            v27 = v24 + 1;
          }
          v23[4] = v27;
          ++v21;
          v16 = *(_QWORD *)(a1 + 5784);
        }
        while (v21 < (*(_QWORD *)(a1 + 5792) - v16) >> 3);
        v36 = (_QWORD *)v338;
LABEL_45:
        v288 = v36;
        if (v36)
        {
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"input_batch_idx: ", 17);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
          kaldi::CuMatrix<float>::Resize(v284, (v288[4] - v288[3]) >> 3, 1, 0, 0);
          v37 = (_QWORD *)v288[3];
          v38 = (_QWORD *)v288[4];
          if (v37 != v38)
          {
            v39 = 0;
            do
            {
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"hyp_idx: ", 9);
                std::ostream::operator<<();
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              v40 = *(_QWORD *)(*(_QWORD *)(a1 + 5784) + 8 * *v37);
              if (v11 >= 1 && *(_DWORD *)(v40 + 40) == *(_DWORD *)(a1 + 5180))
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Final word in hyp list", 22);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
              }
              v41 = *(_QWORD *)(v40 + 56);
              v42 = *(_QWORD *)(v40 + 64);
              v43 = v42 - v41;
              if (v42 != v41)
              {
                v44 = 0;
                v45 = v43 >> 2;
                if (v45 <= 1)
                  v45 = 1;
                v46 = *(_QWORD *)(a1 + 4984) + 4 * *(_DWORD *)(a1 + 5000) * (int)v39;
                do
                {
                  *(float *)(v46 + 4 * v44) = (float)*(int *)(v41 + 4 * v44);
                  ++v44;
                }
                while (v45 != v44);
              }
              kaldi::quasar::TorchEncoderDecoder::SetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)(v40 + 8), v39, (v288[4] - v288[3]) >> 3);
              v39 = (v39 + 1);
              ++v37;
            }
            while (v37 != v38);
          }
          kaldi::quasar::TorchEncoderDecoder::Feedforward(*(_QWORD *)(a1 + 136), v284, v283, 0);
          v292 = *(unsigned int *)(a1 + 5040);
          kaldi::Matrix<float>::Resize(v12, (v288[4] - v288[3]) >> 3, v292, 0, 0);
          kaldi::CuMatrixBase<float>::CopyToMat<float>((uint64_t)v283, (int *)v12, 111);
          v47 = (_QWORD *)v288[3];
          v287 = (_QWORD *)v288[4];
          if (v47 == v287)
            goto LABEL_191;
          v48 = 0;
          while (1)
          {
            v49 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *v47);
            kaldi::quasar::TorchEncoderDecoder::GetHistoryState(*(_QWORD *)(a1 + 136), (uint64_t *)v49 + 1, v48);
            ++*(_DWORD *)(a1 + 5216);
            v316[0] = 0;
            v316[1] = 0;
            *(_QWORD *)&v317 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetCurrentAlignment(*(_QWORD *)(a1 + 136), v316, v48);
            v50 = (uint64_t *)(v49 + 52);
            v51 = *((_QWORD *)v49 + 27);
            if (v51 >= *((_QWORD *)v49 + 28))
            {
              v52 = std::vector<kaldi::Vector<float>>::__push_back_slow_path<kaldi::Vector<float> const&>(v50, (uint64_t)v316);
            }
            else
            {
              std::vector<kaldi::Vector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::Vector<float> const&>((uint64_t)v50, (uint64_t)v316);
              v52 = v51 + 24;
            }
            *((_QWORD *)v49 + 27) = v52;
            v335 = 0;
            v334 = 0;
            v336 = 0;
            BestAlignment = kaldi::quasar::TorchEncoderDecoder::GetBestAlignment(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v48);
            v332 = 0;
            v331 = 0;
            v333 = 0;
            kaldi::quasar::TorchEncoderDecoder::GetAlignmentProbabilities(*(_QWORD *)(a1 + 136), (uint64_t)&v331, v48);
            if (kaldi::quasar::TorchEncoderDecoder::Reverse(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)))
              BestAlignment = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v49) + ~BestAlignment;
            if (*(float *)(a2 + 320) != 0.0)
            {
              v307 = (void **)(v49 + 10);
              v53 = (std::vector<unsigned int> *)std::__hash_table<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)(v49 + 20), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
              v54 = v53 + 1;
              v55 = (unint64_t)((char *)v53[1].__end_ - (char *)v53[1].__begin_) >> 2;
              if (BestAlignment + 1 > (int)v55)
                LODWORD(v55) = BestAlignment + 1;
              std::vector<int>::resize(v53 + 1, (int)v55);
              if ((int)v54->__begin_[BestAlignment] >= 1)
              {
                v307 = (void **)(v49 + 10);
                v56 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 40), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
                ++*((_DWORD *)v56 + 5);
              }
              v307 = (void **)(v49 + 10);
              v57 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v49 + 30), v49 + 10, (uint64_t)&std::piecewise_construct, (_DWORD **)&v307);
              ++*((_DWORD *)v57 + 5);
              ++v54->__begin_[BestAlignment];
            }
            if (*(_BYTE *)(a1 + 5673))
            {
              memset(&__p[8], 0, 32);
              *(_QWORD *)__p = &unk_1E5D34170;
              LOBYTE(v350) = 0;
              v58 = *(_QWORD *)(a1 + 5136);
              v59 = *(_QWORD *)(a1 + 5128);
              if (v58 >= *(_QWORD *)(a1 + 5144))
              {
                v60 = std::vector<kaldi::CuMatrix<float>>::__push_back_slow_path<kaldi::CuMatrix<float> const&>((uint64_t *)(a1 + 5128), (uint64_t)__p);
              }
              else
              {
                kaldi::CuMatrix<float>::CuMatrix(*(_QWORD *)(a1 + 5136), __p, 111);
                v60 = v58 + 48;
                *(_QWORD *)(a1 + 5136) = v58 + 48;
              }
              *(_QWORD *)(a1 + 5136) = v60;
              v61 = kaldi::SubMatrix<float>::SubMatrix((uint64_t)v329, a1 + 5072, v48, 1, 0, *(_DWORD *)(a1 + 5080));
              kaldi::Matrix<float>::Matrix(&v307, v329, 111, v61);
              v62 = *(_QWORD *)(a1 + 5160);
              if (v62 >= *(_QWORD *)(a1 + 5168))
              {
                v63 = std::vector<kaldi::Matrix<float>>::__push_back_slow_path<kaldi::Matrix<float>>((uint64_t *)(a1 + 5152), (uint64_t)&v307);
              }
              else
              {
                kaldi::Matrix<float>::Matrix(*(_QWORD *)(a1 + 5160), &v307);
                v63 = v62 + 40;
                *(_QWORD *)(a1 + 5160) = v62 + 40;
              }
              v64 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - v59) >> 4);
              *(_QWORD *)(a1 + 5160) = v63;
              kaldi::Matrix<float>::~Matrix((uint64_t)&v307);
              quasar::Bitmap::~Bitmap((quasar::Bitmap *)v329);
              kaldi::quasar::TorchEncoderDecoder::CopyDecoderHiddenState(*(_QWORD *)(a1 + 136), (int32x2_t *)(*(_QWORD *)(a1 + 5128) + 48 * (int)v64));
              kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
              BestAlignment = v64;
            }
            if (*(_DWORD *)(a2 + 184) != 2)
              break;
            v65 = *(_QWORD *)(a2 + 208);
            v66 = v49[9];
            v311 = 0;
            (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v65 + 136))(v65, v66, &v307);
            v67 = -1;
            while (1)
            {
              if (!v307)
              {
                if (v311 >= (unint64_t)v309)
                  goto LABEL_155;
LABEL_90:
                v68 = (*((_DWORD *)v308 + 4 * v311) - 1);
LABEL_91:
                v67 = *((_DWORD *)v308 + 4 * v311 + 3);
                goto LABEL_92;
              }
              if ((*((unsigned int (**)(void **))*v307 + 3))(v307))
                break;
              if (!v307)
                goto LABEL_90;
              v68 = (*(_DWORD *)(*((uint64_t (**)(void))*v307 + 4))() - 1);
              if (!v307)
                goto LABEL_91;
              v67 = *(_DWORD *)((*((uint64_t (**)(void **))*v307 + 4))(v307) + 12);
              if (v307)
              {
                v69 = (char *)(*((uint64_t (**)(void **))*v307 + 4))(v307);
                goto LABEL_93;
              }
LABEL_92:
              v69 = (char *)v308 + 16 * v311;
LABEL_93:
              v70 = *((_DWORD *)v69 + 2);
              VocabWordIdx = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v68);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * (int)v68);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = VocabWordIdx;
              *(_DWORD *)&__p[36] = v67;
              LODWORD(v350) = v70;
              v72 = v335;
              if ((unint64_t)v335 >= v336)
              {
                v74 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v335 = *(_QWORD *)__p;
                *((_QWORD *)v72 + 2) = 0;
                *((_QWORD *)v72 + 3) = 0;
                *((_QWORD *)v72 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v72 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v73 = *(_QWORD *)&__p[32];
                *((_DWORD *)v72 + 10) = v350;
                *((_QWORD *)v72 + 4) = v73;
                v74 = (uint64_t *)(v72 + 48);
              }
              v335 = (char *)v74;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
              if (v307)
                (*((void (**)(void **))*v307 + 5))(v307);
              else
                ++v311;
            }
            if (v307)
            {
              (*((void (**)(void))*v307 + 1))();
              goto LABEL_157;
            }
LABEL_155:
            if (v310)
              --*v310;
LABEL_157:
            *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v49[9]);
            LODWORD(v307) = 2139095040;
            if (*(float *)__p != INFINITY)
            {
              v104 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 208) + 32))(*(_QWORD *)(a2 + 208), v49[9]);
              SoftmaxEosId = kaldi::quasar::TorchEncoderDecoder::GetSoftmaxEosId(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
              v106 = *(_DWORD *)(a1 + 5180);
              *(_DWORD *)__p = *(_DWORD *)(*(_QWORD *)(a1 + 5072)
                                         + 4 * *(_DWORD *)(a1 + 5088) * (int)v48
                                         + 4 * SoftmaxEosId);
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v106;
              *(_DWORD *)&__p[36] = v67;
              *(float *)&v350 = v104;
              v107 = v335;
              if ((unint64_t)v335 >= v336)
              {
                v109 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v335 = *(_QWORD *)__p;
                *((_QWORD *)v107 + 2) = 0;
                *((_QWORD *)v107 + 3) = 0;
                *((_QWORD *)v107 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v107 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v108 = *(_QWORD *)&__p[32];
                *((_DWORD *)v107 + 10) = v350;
                *((_QWORD *)v107 + 4) = v108;
                v109 = (uint64_t *)(v107 + 48);
              }
              v335 = (char *)v109;
              if (*(_QWORD *)&__p[8])
              {
                *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
                operator delete(*(void **)&__p[8]);
              }
            }
            std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v334, (uint64_t)v335, (uint64_t)&v307, 0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4));
LABEL_164:
            v110 = v335;
            v111 = v334;
            if (*(_BYTE *)(a1 + 5239))
            {
              a2 = v291;
            }
            else
            {
              v112 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4));
              if (v335 == v334)
                v113 = 0;
              else
                v113 = v112;
              std::__introsort<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *,false>((std::vector<int> *)v334, (uint64_t *)v335, (uint64_t)&v307, v113, 1);
              a2 = v291;
              std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::erase((uint64_t)&v334, (uint64_t)&v334[48 * *(int *)(v291 + 160)], (uint64_t)v335);
              v110 = v335;
              v111 = v334;
            }
            if (v110 == v111 && kaldi::g_kaldi_verbose_level >= -1)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Nothing left in heap", 20);
              kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            }
            if (*(_DWORD *)(a2 + 184) != 5)
            {
              v116 = (float *)v334;
              v117 = v335;
              goto LABEL_187;
            }
            v114 = *(_QWORD *)(a1 + 5840);
            v115 = *(int *)(a1 + 5836);
            v116 = (float *)v334;
            v117 = v335;
            if (v115 >= (*(_QWORD *)(a1 + 5848) - v114) >> 2)
            {
LABEL_187:
              while (v116 != (float *)v117)
              {
                v118 = *(float *)(a1 + 5764);
                v119 = *v296;
                v120 = *v116;
                v121 = logf(*v116);
                if (!v119)
                  v121 = v120;
                v122 = -(float)(v118 * v121);
                v123 = *(float *)(a2 + 180) * v116[10];
                v124 = *((_DWORD *)v116 + 8);
                *(float *)__p = v123 + (float)(v122 + (float)(*((float *)v49 + 11) + *((float *)v49 + 12)));
                *(float *)&__p[4] = v122;
                *(float *)&__p[8] = v123;
                *(_DWORD *)&__p[12] = BestAlignment;
                memset(&__p[16], 0, 24);
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v331, (uint64_t)v332, (v332 - (_BYTE *)v331) >> 2);
                LODWORD(v350) = v124;
                *((float *)&v350 + 1) = v116[9];
                *((_QWORD *)&v350 + 1) = *v47;
                v125 = v344;
                if (v344 >= v345)
                {
                  v126 = (std::vector<int> *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement const&>((uint64_t *)&v343, (uint64_t)__p);
                }
                else
                {
                  *(_OWORD *)&v344->__begin_ = *(_OWORD *)__p;
                  v125[1].__begin_ = 0;
                  v125[1].__end_ = 0;
                  v125->__end_cap_.__value_ = 0;
                  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v125->__end_cap_.__value_, *(const void **)&__p[16], *(uint64_t *)&__p[24], (uint64_t)(*(_QWORD *)&__p[24] - *(_QWORD *)&__p[16]) >> 2);
                  *(_OWORD *)&v125[1].__end_cap_.__value_ = v350;
                  v126 = (std::vector<int> *)((char *)v125 + 56);
                }
                v344 = v126;
                if (*(_QWORD *)&__p[16])
                {
                  *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
                  operator delete(*(void **)&__p[16]);
                }
                v116 += 12;
              }
            }
            else if (v335 != v334)
            {
              if (*((_DWORD *)v334 + 8) != *(_DWORD *)(v114 + 4 * v115))
                *(_QWORD *)(a1 + 5848) = v114;
              goto LABEL_187;
            }
            if (v331)
            {
              v332 = v331;
              operator delete(v331);
            }
            *(_QWORD *)__p = &v334;
            std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            kaldi::Vector<float>::Destroy((uint64_t)v316);
            v48 = (v48 + 1);
            if (++v47 == v287)
            {
LABEL_191:
              v36 = (_QWORD *)*v288;
              v12 = (int32x2_t *)(a1 + 5072);
              v11 = v286;
              goto LABEL_45;
            }
          }
          v75 = kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v49);
          if (!(_DWORD)v292)
            goto LABEL_164;
          v76 = 0;
          LODWORD(v77) = (int)(float)(*(float *)(a1 + 5200)
                                    * (float)(v75 - (*(_DWORD *)(a1 + 5204) + *(_DWORD *)(v291 + 236))));
          if ((int)v77 <= 1)
            v77 = 1;
          else
            v77 = v77;
          if (v286 >= v77)
            v78 = a4;
          else
            v78 = 0;
          while (1)
          {
            v79 = *(float *)(*(_QWORD *)(a1 + 5072) + 4 * (int)v48 * *(_DWORD *)(a1 + 5088) + 4 * v76);
            v80 = kaldi::quasar::TorchEncoderDecoder::GetVocabWordIdx(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v76);
            v81 = v80;
            if (v80 == *(_DWORD *)(a1 + 5180))
              v82 = v78;
            else
              v82 = 1;
            if ((v82 & 1) == 0)
            {
              if (!*v47)
              {
                v84 = *(float *)(a1 + 5764);
                v85 = *v296;
                v86 = logf(v79);
                if (!v85)
                  v86 = v79;
                *(float *)(a1 + 5760) = -(float)(v84 * v86);
                *(_DWORD *)(a1 + 5720) = v49[8];
              }
              if (kaldi::g_kaldi_verbose_level >= 5)
              {
                kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Skipping target eos symbol", 26);
                kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
              }
              goto LABEL_151;
            }
            if (v80 == *(_DWORD *)(a1 + 5184)
              && (kaldi::quasar::TorchEncoderDecoder::HasBpeModel(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136)) & 1) != 0)
            {
              goto LABEL_151;
            }
            if (v290)
            {
              if (v81 != *(_DWORD *)(a1 + 5180))
              {
                if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v291 + 200) + 32))(*(_QWORD *)(v291 + 200), v49[9], (v81 + 1), __p) & 1) == 0)
                {
                  v88 = *(_DWORD *)(a1 + 5184);
                  if (v88 < 0
                    || ((*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _BYTE *))(**(_QWORD **)(v291 + 200) + 32))(*(_QWORD *)(v291 + 200), v49[9], (v88 + 1), __p) & 1) == 0)
                  {
                    goto LABEL_151;
                  }
                }
                v87 = *(_DWORD *)&__p[12];
                v83 = *(float *)&__p[8];
                goto LABEL_130;
              }
              *(_DWORD *)__p = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v291 + 200) + 16))(*(_QWORD *)(v291 + 200), v49[9]);
              LODWORD(v307) = 2139095040;
              if (*(float *)__p == INFINITY)
                goto LABEL_151;
              v83 = (*(float (**)(_QWORD, _QWORD))(**(_QWORD **)(v291 + 200) + 16))(*(_QWORD *)(v291 + 200), v49[9]);
            }
            else
            {
              v83 = 0.0;
            }
            v87 = -1;
LABEL_130:
            if (*(_DWORD *)(v291 + 184) == 5)
            {
              v89 = *(_QWORD *)(a1 + 5840);
              v90 = *(int *)(a1 + 5836);
              if (v90 < (*(_QWORD *)(a1 + 5848) - v89) >> 2)
              {
                v91 = *(float *)(v291 + 180);
                v92 = (v13 - v91) * v79;
                if (*(_DWORD *)(v89 + 4 * v90) != v81)
                  v91 = -0.0;
                v79 = v91 + v92;
              }
            }
            if (*(_BYTE *)(a1 + 5239))
            {
              v93 = v335;
              v94 = 0xAAAAAAAAAAAAAAABLL * ((v335 - v334) >> 4);
              v95 = *(int *)(v291 + 160);
              if (v94 == v95 && v79 > *(float *)v334)
              {
                std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::MinHeapCompare,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement *>>((uint64_t)v334, (uint64_t)v335, (uint64_t)&v307, v94);
                v96 = v335;
                v97 = (void *)*((_QWORD *)v335 - 5);
                if (v97)
                {
                  *((_QWORD *)v335 - 4) = v97;
                  operator delete(v97);
                }
                v93 = v96 - 48;
                v335 = v93;
                v95 = *(int *)(v291 + 160);
                v94 = 0xAAAAAAAAAAAAAAABLL * ((v93 - v334) >> 4);
              }
              if (v94 >= v95)
                goto LABEL_151;
              *(float *)__p = v79;
              memset(&__p[8], 0, 24);
              *(_DWORD *)&__p[32] = v81;
              *(_DWORD *)&__p[36] = v87;
              *(float *)&v350 = v83;
              if ((unint64_t)v93 >= v336)
              {
                v99 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement const&>((uint64_t *)&v334, (uint64_t)__p);
              }
              else
              {
                *(_QWORD *)v93 = *(_QWORD *)__p;
                *((_QWORD *)v93 + 2) = 0;
                *((_QWORD *)v93 + 3) = 0;
                *((_QWORD *)v93 + 1) = 0;
                std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)v93 + 1, *(const void **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
                v98 = *(_QWORD *)&__p[32];
                *((_DWORD *)v93 + 10) = v350;
                *((_QWORD *)v93 + 4) = v98;
                v99 = (uint64_t *)(v93 + 48);
              }
              v335 = (char *)v99;
              std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::MinHeapCompare &,std::__wrap_iter<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement *>>((uint64_t)v334, (uint64_t)v99, (uint64_t)&v307, 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - v334) >> 4));
              v103 = *(void **)&__p[8];
              if (!*(_QWORD *)&__p[8])
                goto LABEL_151;
LABEL_150:
              *(_QWORD *)&__p[16] = v103;
              operator delete(v103);
              goto LABEL_151;
            }
            *(float *)__p = v79;
            memset(&__p[8], 0, 24);
            *(_DWORD *)&__p[32] = v81;
            *(_DWORD *)&__p[36] = v87;
            *(float *)&v350 = v83;
            v100 = v335;
            if ((unint64_t)v335 >= v336)
            {
              v102 = (uint64_t *)std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>>::__push_back_slow_path<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::HeapElement>((uint64_t *)&v334, (uint64_t)__p);
              v103 = *(void **)&__p[8];
              v335 = (char *)v102;
              if (!*(_QWORD *)&__p[8])
                goto LABEL_151;
              goto LABEL_150;
            }
            *(_QWORD *)v335 = *(_QWORD *)__p;
            *((_QWORD *)v100 + 1) = 0;
            *((_QWORD *)v100 + 2) = 0;
            *((_QWORD *)v100 + 3) = 0;
            *(_OWORD *)(v100 + 8) = *(_OWORD *)&__p[8];
            *((_QWORD *)v100 + 3) = *(_QWORD *)&__p[24];
            memset(&__p[8], 0, 24);
            v101 = v350;
            *((_QWORD *)v100 + 4) = *(_QWORD *)&__p[32];
            *((_DWORD *)v100 + 10) = v101;
            v335 = v100 + 48;
LABEL_151:
            if (v292 == ++v76)
              goto LABEL_164;
          }
        }
      }
      if (v11 == v280 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Beam decoder hit maximum sequence length", 40);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      if (v344 == v343)
      {
        if (kaldi::g_kaldi_verbose_level >= -1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Pruned all hyps, nothing left to expand", 39);
          kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        }
      }
      else
      {
        std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::ScoreElement *,false>(v343, (unint64_t)v344, (uint64_t)&v307, 126 - 2 * __clz(0x6DB6DB6DB6DB6DB7 * (((char *)v344 - (char *)v343) >> 3)), 1);
        LODWORD(v14) = v343->__begin_;
        v127 = *(_DWORD *)(a1 + 5768);
        if (v127 == 2)
        {
          v129 = *(float *)(a1 + 5776);
          v130 = *(float *)(a1 + 5772);
          v131 = powf(v129 + (float)(unint64_t)(v11 + 1), v130);
          v128 = v131 / powf(v129 + 1.0, v130);
        }
        else
        {
          v128 = (float)(unint64_t)(v11 + 2);
          if (v127 != 1)
            v128 = 1.0;
        }
        v277 = *(float *)&v14 / v128;
      }
      memset(v329, 0, sizeof(v329));
      v330 = 1065353216;
      v132 = *(float *)(a2 + 164) < 2147500000.0 || *(float *)(a2 + 168) < 2147500000.0;
      v295 = v132;
      v133 = v11 + 1;
      if (*(int *)(a2 + 160) >= 1)
        break;
LABEL_307:
      if (kaldi::g_kaldi_verbose_level > 4)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"At output position ", 19);
        v218 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v218, (uint64_t)", # surviving hypotheses: ", 26);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v219 = *(uint64_t **)(a1 + 5784);
      v220 = *(uint64_t **)(a1 + 5792);
      while (v219 != v220)
      {
        if (*v219)
        {
          v221 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(*v219);
          MEMORY[0x1AF44D190](v221, 0x10B0C406F3D429DLL);
        }
        ++v219;
      }
      v222 = __src;
      if (v278 == (char *)&__src)
      {
        v10 = v279;
      }
      else
      {
        std::vector<kaldi::CuWorkspace *>::__assign_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>(v278, (char *)__src, (uint64_t)v347, ((_BYTE *)v347 - (_BYTE *)__src) >> 3);
        v10 = v279;
        v222 = __src;
      }
      v347 = v222;
      ++*(_DWORD *)(a1 + 5836);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v329);
      std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)v337);
      v11 = v133;
      if (v133 >= v280)
        goto LABEL_320;
    }
    v134 = 0;
    v135 = (float)(unint64_t)v133;
    v289 = (float)(unint64_t)(v11 + 2);
    v293 = v11 + 1;
    while (1)
    {
      v136 = v343;
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v344 - (char *)v343) >> 3) <= v134)
        goto LABEL_307;
      v137 = !v295;
      if (!v134)
        v137 = 1;
      if ((v137 & 1) == 0)
      {
        v138 = *((float *)&v343->__begin_ + 14 * v134);
        if ((float)(*(float *)&v14 + *(float *)(a2 + 164)) < v138
          || (float)(*(float *)&v14 * (float)(*(float *)(a2 + 168) + 1.0)) < v138)
        {
          goto LABEL_307;
        }
      }
      v139 = (char *)v343 + 56 * v134;
      v140 = *(int **)(*(_QWORD *)(a1 + 5784) + 8 * *((_QWORD *)v139 + 6));
      v141 = v139 + 40;
      if (*((_DWORD *)v139 + 10) != *(_DWORD *)(a1 + 5180))
      {
        v143 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
        if (v143 > 1)
        {
          v145 = v140[8];
          v146 = __OFSUB__(v145, 1);
          v147 = (v145 - 1);
          if (((v147 & 0x80000000) != 0) != v146)
            v148 = 0;
          else
            v148 = v147 / v143;
          v316[0] = 0;
          v316[0] = (void *)(*(int *)v141 + (v148 << 32));
          v157 = std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v329, (unint64_t *)v316);
          v158 = *(_QWORD *)(a1 + 4960);
          v159 = *(_QWORD *)(a1 + 4952);
          if (v157)
          {
            v307 = v316;
            v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v161 = v158 - v159;
          }
          else
          {
            if (v158 == v159)
            {
              v164 = 0xCCCCCCCCCCCCCCCDLL * ((v158 - v159) >> 3);
              v165 = -1;
            }
            else
            {
              v162 = 0;
              do
              {
                v163 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
                ++v162;
                v164 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
              }
              while (v162 < v164);
              v165 = v163;
            }
            v192 = *(float *)v139;
            v307 = v316;
            v193 = (float *)std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v193[6] = v192;
            *((_DWORD *)v193 + 7) = (v165 - 1) / v164;
            v194 = *(_QWORD *)(a1 + 4960);
            v195 = *(_QWORD *)(a1 + 4952);
            v307 = v316;
            v160 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)v316, (uint64_t)&std::piecewise_construct, &v307);
            v161 = v194 - v195;
          }
          v144 = *v140 - 858993459 * (v161 >> 3) * *((_DWORD *)v160 + 7) + 1;
          if (kaldi::g_kaldi_verbose_level >= 5)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"using lattice state:", 20);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
          }
        }
        else
        {
          v144 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        }
        v314 = 0;
        v315 = 0;
        v313 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v313, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((_QWORD *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((_QWORD *)&v136[1].__begin_ + 7 * v134) - *((_QWORD *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
        *(_OWORD *)v316 = 0u;
        v317 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v316[1], v313, (uint64_t)v314, (v314 - (_BYTE *)v313) >> 2);
        if (v313)
        {
          v314 = v313;
          operator delete(v313);
        }
        v196 = (char *)v136 + 56 * v134;
        v198 = *(int32x2_t *)(v196 + 4);
        v197 = (float *)(v196 + 4);
        v316[0] = (void *)vrev64_s32(v198);
        if (*((_DWORD *)&v136->__end_ + 14 * v134 + 1) >= (signed int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140)
                                                                      + *(unsigned __int8 *)(*(_QWORD *)(a1 + 136)
                                                                                           + 3918)))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Adding invalid arc ", 19);
          v274 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v274, (uint64_t)" ", 1);
          v275 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v275, (uint64_t)" ", 1);
          v276 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)" ", 1);
          kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
        }
        v199 = *(_DWORD *)v141 + 1;
        LODWORD(v307) = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
        HIDWORD(v307) = v199;
        v308 = v316[0];
        v310 = 0;
        v311 = 0;
        v309 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, v316[1], v317, (uint64_t)(v317 - (unint64_t)v316[1]) >> 2);
        v312 = v144;
        (*(void (**)(_QWORD, _QWORD, void ***))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v140[8], &v307);
        std::vector<std::pair<int,int>>::resize((uint64_t)v281, v144 + 1);
        v200 = *(_DWORD *)v141;
        v201 = (_DWORD *)(*v281 + 8 * v144);
        *v201 = v140[8];
        v201[1] = v200;
        if (*(float *)(v291 + 320) == 0.0
          || !std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>((_QWORD *)v140 + 20, (int *)v141))
        {
          v205 = 0;
        }
        else
        {
          v334 = v141;
          v202 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 40), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v334)+ 5);
          v334 = v141;
          v203 = (float)v202
               / (float)*((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)(v140 + 30), (int *)v141, (uint64_t)&std::piecewise_construct, (_DWORD **)&v334)+ 5);
          v204 = *(float *)(v291 + 316);
          v205 = v203 > v204;
          if (v203 > v204 && kaldi::g_kaldi_verbose_level >= 1)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repeating token in beam: ", 25);
            std::ostream::operator<<();
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
            v205 = 1;
          }
        }
        v207 = operator new();
        kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::Hyp(v207, v144, *((_DWORD *)&v136[1].__end_cap_.__value_ + 14 * v134 + 1), *(_DWORD *)v141, v205, (uint64_t)v140, *v197, v197[1]);
        v208 = (char *)v347;
        a2 = v291;
        v133 = v293;
        v12 = (int32x2_t *)(a1 + 5072);
        if ((unint64_t)v347 >= v348)
        {
          v210 = ((_BYTE *)v347 - (_BYTE *)__src) >> 3;
          if ((unint64_t)(v210 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v211 = (uint64_t)(v348 - (_QWORD)__src) >> 2;
          if (v211 <= v210 + 1)
            v211 = v210 + 1;
          if (v348 - (unint64_t)__src >= 0x7FFFFFFFFFFFFFF8)
            v212 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v212 = v211;
          if (v212)
          {
            v213 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v348, v212);
            a2 = v291;
            v133 = v293;
            v12 = (int32x2_t *)(a1 + 5072);
          }
          else
          {
            v213 = 0;
          }
          v214 = (uint64_t *)&v213[8 * v210];
          *v214 = v207;
          v209 = v214 + 1;
          v215 = (char *)v347;
          v216 = (char *)__src;
          if (v347 != __src)
          {
            do
            {
              v217 = *((_QWORD *)v215 - 1);
              v215 -= 8;
              *--v214 = v217;
            }
            while (v215 != v216);
            v215 = (char *)__src;
          }
          __src = v214;
          v347 = v209;
          v348 = (unint64_t)&v213[8 * v212];
          if (v215)
            operator delete(v215);
        }
        else
        {
          *(_QWORD *)v347 = v207;
          v209 = v208 + 8;
        }
        v347 = v209;
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        if (v316[1])
        {
          *(void **)&v317 = v316[1];
          operator delete(v316[1]);
        }
        goto LABEL_306;
      }
      LODWORD(v142) = (int)(float)(*(float *)(a1 + 5200)
                                 * (float)(int)(kaldi::MatrixBase<float>::NumRows(*(_QWORD *)(a1 + 4952) + 40 * *v140)
                                              - (*(_DWORD *)(a1 + 5204)
                                               + *(_DWORD *)(a2 + 236))));
      v142 = (int)v142 <= 1 ? 1 : v142;
      if (v286 >= v142)
        break;
      *(int32x2_t *)(a1 + 5728) = vrev64_s32((int32x2_t)vadd_f32(*(float32x2_t *)(v140 + 11), *(float32x2_t *)((char *)&v136->__begin_ + 56 * v134 + 4)));
      *(_DWORD *)(a1 + 5720) = v140[8];
      *(_DWORD *)(a1 + 5760) = *(_DWORD *)v139;
      v12 = (int32x2_t *)(a1 + 5072);
LABEL_306:
      if ((uint64_t)++v134 >= *(int *)(a2 + 160))
        goto LABEL_307;
    }
    v149 = v140[8];
    v308 = 0;
    v309 = 0;
    v310 = 0;
    if (*(_BYTE *)(a1 + 5704))
    {
      v328 = 0;
      v326 = 0;
      v327 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v326, *((const void **)&v136->__end_cap_.__value_ + 7 * v134), *((_QWORD *)&v136[1].__begin_ + 7 * v134), (uint64_t)(*((_QWORD *)&v136[1].__begin_ + 7 * v134) - *((_QWORD *)&v136->__end_cap_.__value_ + 7 * v134)) >> 2);
      memset(__p, 0, 32);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], v326, (uint64_t)v327, (v327 - (_BYTE *)v326) >> 2);
      v307 = *(void ***)__p;
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v308, *(char **)&__p[8], *(uint64_t *)&__p[16], (uint64_t)(*(_QWORD *)&__p[16] - *(_QWORD *)&__p[8]) >> 2);
      if (*(_QWORD *)&__p[8])
      {
        *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
        operator delete(*(void **)&__p[8]);
      }
      if (v326)
      {
        v327 = v326;
        operator delete(v326);
      }
      v149 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
      v150 = *(_DWORD *)v141 + 1;
      *(_DWORD *)__p = *((_DWORD *)&v136->__end_ + 14 * v134 + 1);
      *(_DWORD *)&__p[4] = v150;
      *(_QWORD *)&__p[8] = v307;
      memset(&__p[16], 0, 24);
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
      LODWORD(v350) = v149;
      (*(void (**)(_QWORD, _QWORD, _BYTE *))(**(_QWORD **)(a1 + 5712) + 208))(*(_QWORD *)(a1 + 5712), v140[8], __p);
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v308, 0, 0, 0);
      if (*(_QWORD *)&__p[16])
      {
        *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
        operator delete(*(void **)&__p[16]);
      }
    }
    v151 = (char *)v136 + 56 * v134;
    v152 = *((_DWORD *)v151 + 1);
    v153 = *((_DWORD *)v151 + 2);
    v307 = (void **)__PAIR64__(v152, v153);
    v154 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 4960) - *(_QWORD *)(a1 + 4952)) >> 3);
    if (v154 > 1)
    {
      v156 = ((int)v149 - 1) / v154;
      v334 = 0;
      v334 = (char *)(*(int *)v141 + (v156 << 32));
      v12 = (int32x2_t *)(a1 + 5072);
      if (std::__hash_table<long long,std::hash<long long>,std::equal_to<long long>,std::allocator<long long>>::find<long long>(v329, (unint64_t *)&v334))
      {
        if (kaldi::g_kaldi_verbose_level >= 5)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"dropping worse identical hyp; score-diff: ",
            42);
          v316[0] = &v334;
          std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)&v334, (uint64_t)&std::piecewise_construct, (_QWORD **)v316);
          std::ostream::operator<<();
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
        }
      }
      else
      {
        v166 = *(_QWORD *)(a1 + 5712);
        v318 = v307;
        v320 = 0;
        v321 = 0;
        v319 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v319, v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
        (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)v166 + 184))(v166, v149, &v318);
        if (v319)
        {
          v320 = v319;
          operator delete(v319);
        }
        v167 = *(_DWORD *)v139;
        v316[0] = &v334;
        v168 = std::__hash_table<std::__hash_value_type<long long,std::pair<float,int>>,std::__unordered_map_hasher<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::hash<long long>,std::equal_to<long long>,true>,std::__unordered_map_equal<long long,std::__hash_value_type<long long,std::pair<float,int>>,std::equal_to<long long>,std::hash<long long>,true>,std::allocator<std::__hash_value_type<long long,std::pair<float,int>>>>::__emplace_unique_key_args<long long,std::piecewise_construct_t const&,std::tuple<long long const&>,std::tuple<>>((uint64_t)v329, (unint64_t *)&v334, (uint64_t)&std::piecewise_construct, (_QWORD **)v316);
        *((_DWORD *)v168 + 6) = v167;
        *((_DWORD *)v168 + 7) = v156;
      }
    }
    else
    {
      v155 = *(_QWORD *)(a1 + 5712);
      v322[0] = v153;
      v322[1] = v152;
      v324 = 0;
      v325 = 0;
      v323 = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v323, v308, (uint64_t)v309, ((_BYTE *)v309 - (_BYTE *)v308) >> 2);
      (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v155 + 184))(v155, v149, v322);
      v12 = (int32x2_t *)(a1 + 5072);
      if (v323)
      {
        v324 = v323;
        operator delete(v323);
      }
    }
    v169 = *(float *)v139;
    if (*(float *)v139 <= *(float *)&v15)
    {
      *(_DWORD *)(a1 + 5832) = v149;
      *(float *)&v15 = v169;
    }
    v170 = *(_DWORD *)(a1 + 5768);
    if (v170 == 2)
    {
      v172 = *(float *)(a1 + 5776);
      v173 = *(float *)(a1 + 5772);
      v174 = v14;
      v175 = v15;
      v176 = v135;
      v177 = powf(v172 + v135, v173);
      v171 = v177 / powf(v172 + 1.0, v173);
      v135 = v176;
      v15 = v175;
      v14 = v174;
      v13 = 1.0;
      v133 = v293;
    }
    else
    {
      v171 = 1.0;
      v133 = v293;
      if (v170 == 1)
        v171 = v289;
    }
    *(float *)__p = v169 / v171;
    std::priority_queue<float>::push((uint64_t)&v340, __p);
    v178 = v341;
    v179 = v340;
    v180 = (v341 - (_BYTE *)v340) >> 2;
    if (v180 <= (unint64_t)*(int *)(a2 + 192))
    {
LABEL_268:
      if (v308)
      {
        v309 = v308;
        operator delete(v308);
      }
      LOBYTE(v282) = (v134 == 0) | v282;
      ++HIDWORD(v282);
      goto LABEL_306;
    }
    if (v341 - (_BYTE *)v340 >= 5)
    {
      v181 = 0;
      v182 = *(float *)v340;
      v183 = (float *)v340;
      do
      {
        v184 = v183;
        v183 += v181 + 1;
        v185 = 2 * v181;
        v181 = (2 * v181) | 1;
        v186 = v185 + 2;
        if (v186 < v180 && *v183 < v183[1])
        {
          ++v183;
          v181 = v186;
        }
        *v184 = *v183;
      }
      while (v181 <= (uint64_t)((unint64_t)(v180 - 2) >> 1));
      v187 = (float *)(v178 - 4);
      if (v183 != (float *)(v178 - 4))
      {
        *v183 = *v187;
        *v187 = v182;
        v188 = (char *)v183 - v179 + 4;
        if (v188 < 5)
          goto LABEL_267;
        v189 = (((unint64_t)v188 >> 2) - 2) >> 1;
        v190 = (float *)&v179[4 * v189];
        v191 = *v190;
        v182 = *v183;
        if (*v190 >= *v183)
          goto LABEL_267;
        do
        {
          *v183 = v191;
          v183 = v190;
          if (!v189)
            break;
          v189 = (v189 - 1) >> 1;
          v190 = (float *)&v179[4 * v189];
          v191 = *v190;
        }
        while (*v190 < v182);
      }
      *v183 = v182;
    }
LABEL_267:
    v341 = v178 - 4;
    goto LABEL_268;
  }
  HIDWORD(v282) = 0;
  LODWORD(v15) = 1325400064;
LABEL_320:
  if (!a4)
    goto LABEL_360;
  if (!HIDWORD(v282) && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No hyps finished, setting ", 26);
    v223 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v223, (uint64_t)" partial hyps to final", 22);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
  }
  v224 = *(uint64_t **)(a1 + 5784);
  v225 = *(uint64_t **)(a1 + 5792);
  if (v224 != v225)
  {
    while (1)
    {
      if (HIDWORD(v282))
      {
        v226 = *v224;
        if (!*v224)
          goto LABEL_344;
      }
      else
      {
        v227 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
        v228 = *v224;
        if (*(_BYTE *)(*v224 + 200))
        {
          v229 = *(float *)(a2 + 320);
          if (v229 == 0.0)
            v230 = -3;
          else
            v230 = -4;
          if (v229 != 0.0 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Repetitions detected, beam search aborted.", 42);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
            v228 = *v224;
          }
        }
        else
        {
          v230 = -3;
        }
        v231 = *(_QWORD *)(a1 + 5712);
        v232 = *(unsigned int *)(v228 + 32);
        *(_DWORD *)__p = v230;
        memset(&__p[4], 0, 36);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
        LODWORD(v350) = v227;
        (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v231 + 208))(v231, v232, __p);
        a2 = v291;
        if (*(_QWORD *)&__p[16])
        {
          *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
          operator delete(*(void **)&__p[16]);
        }
        v233 = *(_QWORD *)(a1 + 5712);
        *(_OWORD *)v305 = 0u;
        v306 = 0u;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v305[1], 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v233 + 184))(v233, v227, v305);
        if (v305[1])
        {
          *(void **)&v306 = v305[1];
          operator delete(v305[1]);
        }
        v226 = *v224;
        v234 = *(float *)(*v224 + 48);
        if ((float)(*(float *)(*v224 + 44) + v234) < *(float *)&v15)
          *(float *)&v15 = *(float *)(*v224 + 44) + v234;
        ++*(_DWORD *)(a1 + 5212);
      }
      v235 = kaldi::quasar::TranslationBeamSearch<kaldi::quasar::TorchEncoderDecoder>::Hyp::~Hyp(v226);
      MEMORY[0x1AF44D190](v235, 0x10B0C406F3D429DLL);
LABEL_344:
      if (++v224 == v225)
      {
        v224 = *(uint64_t **)(a1 + 5784);
        break;
      }
    }
  }
  *(_QWORD *)(a1 + 5792) = v224;
  *(_DWORD *)(a1 + 5836) = 0;
  if (!HIDWORD(v282) && *(_DWORD *)(a1 + 5720) != -1)
  {
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Setting longest vetoted translation as best ", 44);
      std::ostream::operator<<();
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
    }
    v236 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 5712) + 200))(*(_QWORD *)(a1 + 5712));
    v237 = *(_QWORD *)(a1 + 5712);
    v238 = *(unsigned int *)(a1 + 5720);
    memset(&__p[4], 0, 36);
    *(_DWORD *)__p = -2;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[16], 0, 0, 0);
    LODWORD(v350) = v236;
    (*(void (**)(uint64_t, uint64_t, _BYTE *))(*(_QWORD *)v237 + 208))(v237, v238, __p);
    if (*(_QWORD *)&__p[16])
    {
      *(_QWORD *)&__p[24] = *(_QWORD *)&__p[16];
      operator delete(*(void **)&__p[16]);
    }
    v239 = *(_QWORD *)(a1 + 5712);
    v301 = *(_QWORD *)(a1 + 5728);
    v303 = 0;
    v304 = 0;
    v302 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v302, *(const void **)(a1 + 5736), *(_QWORD *)(a1 + 5744), (uint64_t)(*(_QWORD *)(a1 + 5744) - *(_QWORD *)(a1 + 5736)) >> 2);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v239 + 184))(v239, v236, &v301);
    if (v302)
    {
      v303 = v302;
      operator delete(v302);
    }
    LODWORD(v15) = *(_DWORD *)(a1 + 5760);
    ++*(_DWORD *)(a1 + 5208);
  }
  kaldi::quasar::TorchEncoderDecoder::Finish(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136), v8);
  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"# of cached states ", 19);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
  }
  if (*(_DWORD *)(a2 + 184) == 5)
  {
    *(_QWORD *)(a1 + 5848) = *(_QWORD *)(a1 + 5840);
    if (*(float *)(a2 + 180) > 0.0 && !*(_BYTE *)(a2 + 306))
    {
      fst::VectorFst<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>>>::VectorFst(v329);
      v241 = *(_QWORD *)(a1 + 5712);
      v297 = vdup_n_s32(0x7F800000u);
      v299 = 0;
      v300 = 0;
      v298 = 0;
      fst::ShortestPath<fst::ArcTpl<fst::LatticeWeightWithStateTpl<fst::LatticeWeightTpl<float>,float,std::vector<float>>,int>>(v241, (uint64_t)v329, 1, 0, 0, (uint64_t *)&v297, -1, 0);
      v242 = (void **)(a1 + 5840);
      if (v298)
      {
        v299 = v298;
        operator delete(v298);
      }
      v243 = *((_QWORD *)&v329[0] + 1);
      v244 = *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 88);
      while (1)
      {
        v245 = *(_QWORD *)(*(_QWORD *)(v243 + 64) + 8 * v244);
        *(_QWORD *)__p = *(_QWORD *)v245;
        memset(&__p[8], 0, 24);
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p[8], *(const void **)(v245 + 8), *(_QWORD *)(v245 + 16), (uint64_t)(*(_QWORD *)(v245 + 16) - *(_QWORD *)(v245 + 8)) >> 2);
        LODWORD(v337[0]) = *(_DWORD *)&__p[4];
        LODWORD(v307) = *(_DWORD *)__p;
        LODWORD(v316[0]) = 2139095040;
        LODWORD(v334) = 2139095040;
        v246.n128_u32[0] = *(_DWORD *)__p;
        if (*(float *)__p == INFINITY)
        {
          v246.n128_u32[0] = (unsigned __int32)v337[0];
          v247 = *(float *)v337 == *(float *)&v334;
        }
        else
        {
          v247 = 0;
        }
        if (*(_QWORD *)&__p[8])
        {
          *(_QWORD *)&__p[16] = *(_QWORD *)&__p[8];
          operator delete(*(void **)&__p[8]);
        }
        if (!v247)
        {
          *(_QWORD *)&v329[0] = &unk_1E5D25A80;
          v272 = *((_QWORD *)&v329[0] + 1);
          if (*((_QWORD *)&v329[0] + 1))
          {
            v273 = *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 56) - 1;
            *(_DWORD *)(*((_QWORD *)&v329[0] + 1) + 56) = v273;
            if (!v273)
              (*(void (**)(uint64_t, __n128))(*(_QWORD *)v272 + 8))(v272, v246);
          }
          goto LABEL_360;
        }
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 56) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 48))
          v248 = 0;
        else
          v248 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v329[0] + 1) + 64) + 8 * v244) + 48);
        v307 = *(void ***)v248;
        v308 = *(void **)(v248 + 8);
        v310 = 0;
        v311 = 0;
        v309 = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v309, *(const void **)(v248 + 16), *(_QWORD *)(v248 + 24), (uint64_t)(*(_QWORD *)(v248 + 24) - *(_QWORD *)(v248 + 16)) >> 2);
        v244 = *(_DWORD *)(v248 + 40);
        v312 = v244;
        if ((v307 & 0x80000000) != 0)
          LODWORD(v307) = 0;
        if (HIDWORD(v307))
          break;
LABEL_417:
        if (v309)
        {
          v310 = v309;
          operator delete(v309);
        }
        v243 = *((_QWORD *)&v329[0] + 1);
      }
      v249 = kaldi::quasar::TorchEncoderDecoder::OutputSymbols(*(kaldi::quasar::TorchEncoderDecoder **)(a1 + 136));
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v249 + 88))(v337, v249, SHIDWORD(v307));
      v250 = BYTE7(v338);
      if (SBYTE7(v338) < 0)
      {
        if (v337[1] != (void *)3)
          goto LABEL_390;
        v251 = (void **)v337[0];
      }
      else
      {
        if (SBYTE7(v338) != 3)
          goto LABEL_390;
        v251 = v337;
      }
      v252 = *(unsigned __int16 *)v251;
      v253 = *((unsigned __int8 *)v251 + 2);
      if (v252 == 38626 && v253 == 129)
      {
LABEL_415:
        v244 = v312;
        if (v250 < 0)
          operator delete(v337[0]);
        goto LABEL_417;
      }
LABEL_390:
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 3);
        v255 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"For 'partial_bias' lm-mode, storing token: ", 43);
        if ((SBYTE7(v338) & 0x80u) == 0)
          v256 = v337;
        else
          v256 = (void **)v337[0];
        if ((SBYTE7(v338) & 0x80u) == 0)
          v257 = BYTE7(v338);
        else
          v257 = (uint64_t)v337[1];
        v258 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v255, (uint64_t)v256, v257);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v258, (uint64_t)" (", 2);
        v259 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v259, (uint64_t)")", 1);
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
      }
      v260 = HIDWORD(v307) - 1;
      v261 = *(int **)(a1 + 5848);
      v262 = *(_QWORD *)(a1 + 5856);
      if ((unint64_t)v261 >= v262)
      {
        v264 = (int *)*v242;
        v265 = ((char *)v261 - (_BYTE *)*v242) >> 2;
        v266 = v265 + 1;
        if ((unint64_t)(v265 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v267 = v262 - (_QWORD)v264;
        if (v267 >> 1 > v266)
          v266 = v267 >> 1;
        if ((unint64_t)v267 >= 0x7FFFFFFFFFFFFFFCLL)
          v268 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v268 = v266;
        if (v268)
        {
          v269 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 5856, v268);
          v261 = *(int **)(a1 + 5848);
          v264 = *(int **)(a1 + 5840);
        }
        else
        {
          v269 = 0;
        }
        v270 = (int *)&v269[4 * v265];
        *v270 = v260;
        v263 = v270 + 1;
        while (v261 != v264)
        {
          v271 = *--v261;
          *--v270 = v271;
        }
        *(_QWORD *)(a1 + 5840) = v270;
        *(_QWORD *)(a1 + 5848) = v263;
        *(_QWORD *)(a1 + 5856) = &v269[4 * v268];
        if (v264)
          operator delete(v264);
      }
      else
      {
        *v261 = v260;
        v263 = v261 + 1;
      }
      *(_QWORD *)(a1 + 5848) = v263;
      v250 = BYTE7(v338);
      goto LABEL_415;
    }
  }
LABEL_360:
  if (v340)
  {
    v341 = v340;
    operator delete(v340);
  }
  *(_QWORD *)__p = &v343;
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (__src)
  {
    v347 = __src;
    operator delete(__src);
  }
  return *(float *)&v15;
}

void sub_1ADFCF6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a52);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&STACK[0x220]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x300]);
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFCF74C()
{
  JUMPOUT(0x1ADFCF844);
}

void sub_1ADFCF754()
{
  JUMPOUT(0x1ADFCF85CLL);
}

void sub_1ADFCF788()
{
  JUMPOUT(0x1ADFCF854);
}

void sub_1ADFCF790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&STACK[0x300]);
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFCF7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,_DWORD *a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  v62 = (void *)STACK[0x308];
  if (STACK[0x308])
  {
    STACK[0x310] = (unint64_t)v62;
    operator delete(v62);
  }
  if (a52)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a52 + 8))(a52);
  }
  else if (a55)
  {
    --*a55;
  }
  v63 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v64 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v64;
    operator delete(v64);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v65 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v65;
    operator delete(v65);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFCF7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  if (STACK[0x310])
  {
    STACK[0x318] = STACK[0x310];
    JUMPOUT(0x1ADFCF7E8);
  }
  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  kaldi::Vector<float>::Destroy(&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table(&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100](&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFCF7FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  void *v62;
  void *v63;
  void *v64;

  v62 = (void *)STACK[0x250];
  if (STACK[0x250])
  {
    STACK[0x258] = (unint64_t)v62;
    operator delete(v62);
  }
  STACK[0x300] = (unint64_t)&STACK[0x268];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::HeapElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  kaldi::Vector<float>::Destroy((uint64_t)&a61);
  std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::~__hash_table((uint64_t)&STACK[0x280]);
  v63 = (void *)STACK[0x2B0];
  if (STACK[0x2B0])
  {
    STACK[0x2B8] = (unint64_t)v63;
    operator delete(v63);
  }
  STACK[0x300] = (unint64_t)&STACK[0x2D0];
  std::vector<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement,std::allocator<kaldi::quasar::TranslationBeamSearch<kaldi::quasar::Encdec>::ScoreElement>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x300]);
  v64 = (void *)STACK[0x2E8];
  if (STACK[0x2E8])
  {
    STACK[0x2F0] = (unint64_t)v64;
    operator delete(v64);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::PronChoice>::__emplace_back_slow_path<quasar::PronType,std::string,float &>(uint64_t *a1, int *a2, uint64_t a3, int *a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t *v18;

  v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - *a1) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) >= 0x333333333333333)
    v10 = 0x666666666666666;
  else
    v10 = v6;
  v18 = a1 + 2;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>((uint64_t)(a1 + 2), v10);
  else
    v11 = 0;
  v14 = v11;
  v15 = &v11[40 * v5];
  v17 = &v11[40 * v10];
  std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float &>((uint64_t)(a1 + 2), (uint64_t)v15, a2, a3, a4);
  v16 = v15 + 40;
  std::vector<quasar::PronChoice>::__swap_out_circular_buffer(a1, &v14);
  v12 = a1[1];
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)&v14);
  return v12;
}

void sub_1ADFCF9B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::PronChoice>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::PronChoice>::construct[abi:ne180100]<quasar::PronChoice,quasar::PronType,std::string,float &>(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, int *a5)
{
  int v6;
  std::string::size_type v7;
  std::string::value_type *v8;
  int v9;
  int v10;
  _BYTE v11[7];

  v6 = *a3;
  v8 = *(std::string::value_type **)a4;
  v7 = *(_QWORD *)(a4 + 8);
  *(_DWORD *)v11 = *(_DWORD *)(a4 + 16);
  *(_DWORD *)&v11[3] = *(_DWORD *)(a4 + 19);
  v9 = *(char *)(a4 + 23);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v10 = *a5;
  *(_DWORD *)a2 = v6;
  if (v9 < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a2 + 8), v8, v7);
    *(_DWORD *)(a2 + 32) = v10;
    operator delete(v8);
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v8;
    *(_QWORD *)(a2 + 16) = v7;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)v11;
    *(_DWORD *)(a2 + 27) = *(_DWORD *)&v11[3];
    *(_BYTE *)(a2 + 31) = v9;
    *(_DWORD *)(a2 + 32) = v10;
  }
}

void sub_1ADFCFA64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::ptt::PronunciationRecognizer::RequestContext::RequestContext(uint64_t result, _QWORD *a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v6 = a2[1];
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  *(_QWORD *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = a6;
  return result;
}

uint64_t quasar::ptt::PronunciationRecognizer::PronunciationRecognizer(uint64_t a1, const quasar::SystemConfig *a2, __int128 *a3)
{
  uint64_t v5;
  _OWORD *v6;
  __int128 v7;
  size_t v8;
  std::string *v9;
  const void *v10;
  std::string *v11;
  __int128 v12;
  std::string v14;

  v5 = quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)a1, a2, 1, 1);
  v6 = (_OWORD *)(v5 + 1544);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(v5 + 1544), *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    *(_QWORD *)(v5 + 1560) = *((_QWORD *)a3 + 2);
    *v6 = v7;
  }
  quasar::ptt::PronunciationRecognizer::Params::Params((quasar::ptt::PronunciationRecognizer::Params *)(a1 + 1568));
  quasar::ptt::Decoder::Params::Params((quasar::ptt::Decoder::Params *)(a1 + 1752));
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1856) = 0u;
  *(_OWORD *)(a1 + 1840) = 0u;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1808) = 0u;
  *(_OWORD *)(a1 + 1792) = 0u;
  *(_OWORD *)(a1 + 1900) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  if (*(char *)(a1 + 1567) >= 0)
    v8 = *(unsigned __int8 *)(a1 + 1567);
  else
    v8 = *(_QWORD *)(a1 + 1552);
  v9 = &v14;
  std::string::basic_string[abi:ne180100]((uint64_t)&v14, v8 + 1);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*(char *)(a1 + 1567) >= 0)
      v10 = v6;
    else
      v10 = *(const void **)(a1 + 1544);
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 46;
  v11 = std::string::append(&v14, "am-force-alignment");
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 1984) = *((_QWORD *)&v11->__r_.__value_.__l + 2);
  *(_OWORD *)(a1 + 1968) = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 1992) = 0;
  quasar::ptt::PronunciationRecognizer::registerAndParseParams((quasar::ptt::PronunciationRecognizer *)a1);
  quasar::ptt::PronunciationRecognizer::loadModelsAndInitializeDecoder((quasar::ptt::PronunciationRecognizer *)a1);
  return a1;
}

void sub_1ADFCFC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  quasar::SystemConfig *v16;

  quasar::SystemConfig::~SystemConfig(v16);
  _Unwind_Resume(a1);
}

void quasar::ptt::PronunciationRecognizer::registerAndParseParams(quasar::ptt::PronunciationRecognizer *this)
{
  size_t v2;
  std::string *p_p;
  char *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  std::string *v13;
  char *v14;
  std::string v15;
  std::string v16;
  std::string __p;
  std::string v18;

  quasar::SystemConfig::getPrefix(this, &v18);
  if (*((char *)this + 1567) >= 0)
    v2 = *((unsigned __int8 *)this + 1567);
  else
    v2 = *((_QWORD *)this + 194);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v2 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v2)
  {
    if (*((char *)this + 1567) >= 0)
      v4 = (char *)this + 1544;
    else
      v4 = (char *)*((_QWORD *)this + 193);
    memmove(p_p, v4, v2);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v2) = 46;
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::ptt::PronunciationRecognizer::Params::registerParams((quasar::ptt::PronunciationRecognizer *)((char *)this + 1568), this);
  quasar::ptt::Decoder::Params::registerParams((quasar::ptt::PronunciationRecognizer *)((char *)this + 1752), this);
  quasar::QsrTextSymbolTable::Register((quasar::ptt::PronunciationRecognizer *)((char *)this + 1800), this, 170, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(&v15, "Root to use to configure forced alignment. If not specified, will look at .");
  v5 = std::string::append(&v15, "am-force-alignment");
  v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  v7 = std::string::append(&v16, " at the current level.");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v16, "am-force-alignment-root");
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = &__p;
  else
    v9 = (std::string *)__p.__r_.__value_.__r.__words[0];
  std::string::basic_string[abi:ne180100]<0>(&v15, (char *)v9);
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&v16.__r_.__value_.__l.__data_, (uint64_t)this + 1968, (uint64_t)&v15, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
  quasar::SystemConfig::readPtreeAtPrefix(this, 0, 0);
  if (quasar::SystemConfig::getPtreeOptional((uint64_t)this, (uint64_t)this + 1968))
  {
    v10 = operator new();
    quasar::RealignAmFusionDecoder::RealignAmFusionDecoder(v10, (__int128 *)this + 123);
    v11 = *((_QWORD *)this + 249);
    *((_QWORD *)this + 249) = v10;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 160))(v11);
    if (*((char *)this + 1991) >= 0)
      v12 = *((unsigned __int8 *)this + 1991);
    else
      v12 = *((_QWORD *)this + 247);
    v13 = &v16;
    std::string::basic_string[abi:ne180100]((uint64_t)&v16, v12 + 1);
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
    if (v12)
    {
      if (*((char *)this + 1991) >= 0)
        v14 = (char *)this + 1968;
      else
        v14 = (char *)*((_QWORD *)this + 246);
      memmove(v13, v14, v12);
    }
    *(_WORD *)((char *)&v13->__r_.__value_.__l.__data_ + v12) = 46;
    quasar::SystemConfig::setPrefix((std::string *)this, &v16);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    (***((void (****)(_QWORD, quasar::ptt::PronunciationRecognizer *))this + 249))(*((_QWORD *)this + 249), this);
    quasar::SystemConfig::readPtreeAtPrefix(this, 0, 0);
  }
  quasar::SystemConfig::setPrefix((std::string *)this, &v18);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

void sub_1ADFCFFFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  if (a21 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (*(char *)(v28 - 33) < 0)
    operator delete(*(void **)(v28 - 56));
  _Unwind_Resume(exception_object);
}

_QWORD **quasar::ptt::PronunciationRecognizer::loadModelsAndInitializeDecoder(quasar::ptt::PronunciationRecognizer *this)
{
  uint64_t ModelLoader;
  _QWORD *Text;
  uint64_t v4;
  std::__shared_weak_count *size;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  const void *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  _QWORD *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  __int128 v70;
  void *__p[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  std::__shared_weak_count *v89;
  std::string v90[2];
  unsigned __int8 *v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  __int128 v95;
  unsigned __int8 *v96;
  std::__shared_weak_count *v97;
  _QWORD *v98;

  ModelLoader = quasar::SystemConfig::getModelLoader(this);
  quasar::ptt::UnigramPhoneticConfusion::loadFromPhonomapFst((quasar::ptt::PronunciationRecognizer *)((char *)this + 1568), *((float *)this + 433), (uint64_t *)&v98);
  kaldi::quasar::Vocab::OOvWord((quasar::ptt::PronunciationRecognizer *)((char *)this + 1600), v90);
  fst::SymbolTableTextOptions::SymbolTableTextOptions((fst::SymbolTableTextOptions *)__p);
  Text = fst::SymbolTable::ReadText((uint64_t)v90);
  v4 = *((_QWORD *)this + 224);
  *((_QWORD *)this + 224) = Text;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  if (SHIBYTE(v72) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(v90[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v90[0].__r_.__value_.__l.__data_);
  __p[0] = (void *)quasar::SystemConfig::getConfigFileVersion(this);
  quasar::QsrTextSymbolTable::init((const std::string *)this + 75, (const quasar::SystemConfig::Version *)__p, 0, 0, 1);
  kaldi::quasar::Vocab::OOvWord((quasar::ptt::PronunciationRecognizer *)((char *)this + 1632), (std::string *)__p);
  v96 = 0;
  v97 = 0;
  quasar::ModelLoader::readFstNetwork(ModelLoader, (uint64_t)__p, &v96, (uint64_t *)v90);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1944, (__int128 *)v90);
  size = (std::__shared_weak_count *)v90[0].__r_.__value_.__l.__size_;
  if (v90[0].__r_.__value_.__l.__size_)
  {
    v6 = (unint64_t *)(v90[0].__r_.__value_.__l.__size_ + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v8 = v97;
  if (v97)
  {
    p_shared_owners = (unint64_t *)&v97->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (SBYTE7(v72) < 0)
    operator delete(__p[0]);
  v95 = 0uLL;
  v93 = 0;
  v94 = 0;
  kaldi::quasar::Vocab::OOvWord((quasar::ptt::PronunciationRecognizer *)((char *)this + 1664), (std::string *)__p);
  v91 = 0;
  v92 = 0;
  quasar::ModelLoader::readFstNetwork(ModelLoader, (uint64_t)__p, &v91, (uint64_t *)v90);
  v11 = v92;
  if (v92)
  {
    v12 = (unint64_t *)&v92->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SBYTE7(v72) < 0)
    operator delete(__p[0]);
  std::allocate_shared[abi:ne180100]<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::allocator<fst::BackoffDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>&,void>((uint64_t)v90[0].__r_.__value_.__l.__data_, __p);
  v14 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  v95 = v14;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v19 = (unint64_t *)((char *)__p[1] + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)v90[0].__r_.__value_.__l.__size_;
  if (v90[0].__r_.__value_.__l.__size_)
  {
    v22 = (unint64_t *)(v90[0].__r_.__value_.__l.__size_ + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  memset(v90, 0, sizeof(v90));
  kaldi::quasar::Vocab::OOvWord((quasar::ptt::PronunciationRecognizer *)((char *)this + 1696), (std::string *)__p);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)ModelLoader + 16))(&v88, ModelLoader, __p);
  if (SBYTE7(v72) < 0)
    operator delete(__p[0]);
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v88 + 64))(v88, 0x10000000, 0) != 0x10000000)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"bigGFst: input label is not sorted!", 35);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v24 = v88;
  v25 = operator new(4uLL);
  __p[0] = v25;
  *v25 = 0;
  __p[1] = v25 + 1;
  *(_QWORD *)&v72 = v25 + 1;
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v90, v24, 0, 0x20000uLL, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v90[0].__r_.__value_.__l.__size_ - v90[0].__r_.__value_.__r.__words[0] != 16)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Expected only a single model, received ", 39);
    v61 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)".", 1);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&v93, (uint64_t *)v90[0].__r_.__value_.__l.__data_);
  v26 = v89;
  if (v89)
  {
    v27 = (unint64_t *)&v89->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  __p[0] = &v90[1];
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = v90;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v29 = v98;
  v30 = (const void *)*((_QWORD *)this + 243);
  v70 = v95;
  if (*((_QWORD *)&v95 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v68 = v93;
  v69 = v94;
  if (v94)
  {
    v33 = (unint64_t *)&v94->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  quasar::ptt::Decoder::create((uint64_t)this + 1752, (uint64_t)v29, v30, (uint64_t *)&v70, &v68, (uint64_t *)__p);
  v35 = __p[0];
  __p[0] = 0;
  v36 = *((_QWORD *)this + 245);
  *((_QWORD *)this + 245) = v35;
  if (v36)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    v37 = __p[0];
    __p[0] = 0;
    if (v37)
      (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
  }
  v38 = v69;
  if (v69)
  {
    v39 = (unint64_t *)&v69->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = *((_QWORD *)this + 249);
  if (v44)
  {
    v66 = 0;
    v67 = 0;
    v64 = 0;
    v65 = 0;
    v62 = 0;
    v63 = 0;
    LOWORD(__p[0]) = 0;
    quasar::Decoder::init(v44, this, &v66, &v64, &v62, __p);
    v45 = v63;
    if (v63)
    {
      v46 = (unint64_t *)&v63->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v65;
    if (v65)
    {
      v49 = (unint64_t *)&v65->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = v67;
    if (v67)
    {
      v52 = (unint64_t *)&v67->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
        std::__shared_weak_count::__release_weak(v51);
      }
    }
  }
  v54 = v94;
  if (v94)
  {
    v55 = (unint64_t *)&v94->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
  if (*((_QWORD *)&v95 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return std::unique_ptr<quasar::ptt::UnigramPhoneticConfusion>::reset[abi:ne180100](&v98, 0);
}

void sub_1ADFD07B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, void *a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 - 176);
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v28 - 160));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 - 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v28 - 80);
  std::unique_ptr<quasar::ptt::UnigramPhoneticConfusion>::reset[abi:ne180100]((_QWORD **)(v28 - 40), 0);
  _Unwind_Resume(a1);
}

void quasar::QsrTextSymbolTable::~QsrTextSymbolTable(void **this)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 16));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void quasar::ptt::PronunciationRecognizer::Params::~Params(quasar::ptt::PronunciationRecognizer::Params *this)
{
  *((_QWORD *)this + 16) = &unk_1E5D343A0;
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  *((_QWORD *)this + 12) = &unk_1E5D343A0;
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  *((_QWORD *)this + 8) = &unk_1E5D343A0;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  *((_QWORD *)this + 4) = &unk_1E5D343A0;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  *(_QWORD *)this = &unk_1E5D343A0;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

uint64_t quasar::ptt::PronunciationRecognizer::run(uint64_t a1, uint64_t *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  std::vector<unsigned int>::pointer end;
  unsigned int *v13;
  std::vector<unsigned int>::pointer begin;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _OWORD v29[17];
  std::vector<unsigned int> v30;

  memset(&v30, 0, sizeof(v30));
  std::vector<int>::reserve(&v30, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1792) + 96))(*(_QWORD *)(a1 + 1792), v8);
      v11 = v10;
      if (v10 == -1)
      {
        memset(v29, 0, sizeof(v29));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Unable to resolve phone '", 25);
        v25 = *(char *)(v8 + 23);
        if (v25 >= 0)
          v26 = v8;
        else
          v26 = *(_QWORD *)v8;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(v8 + 23);
        else
          v27 = *(_QWORD *)(v8 + 8);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"'.", 2);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v29);
      }
      end = v30.__end_;
      if (v30.__end_ >= v30.__end_cap_.__value_)
      {
        begin = v30.__begin_;
        v15 = v30.__end_ - v30.__begin_;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v17 = (char *)v30.__end_cap_.__value_ - (char *)v30.__begin_;
        if (((char *)v30.__end_cap_.__value_ - (char *)v30.__begin_) >> 1 > v16)
          v16 = v17 >> 1;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
          v18 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v30.__end_cap_, v18);
          begin = v30.__begin_;
          end = v30.__end_;
        }
        else
        {
          v19 = 0;
        }
        v20 = (unsigned int *)&v19[4 * v15];
        *v20 = v11;
        v13 = v20 + 1;
        while (end != begin)
        {
          v21 = *--end;
          *--v20 = v21;
        }
        v30.__begin_ = v20;
        v30.__end_ = v13;
        v30.__end_cap_.__value_ = (unsigned int *)&v19[4 * v18];
        if (begin)
          operator delete(begin);
      }
      else
      {
        *v30.__end_ = v10;
        v13 = end + 1;
      }
      v30.__end_ = v13;
      v8 += 24;
    }
    while (v8 != v9);
  }
  v22 = quasar::ptt::PronunciationRecognizer::run(a1, &v30, a3, a4);
  if (v30.__begin_)
  {
    v30.__end_ = v30.__begin_;
    operator delete(v30.__begin_);
  }
  return v22;
}

void sub_1ADFD0C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 112);
  if (v3)
  {
    *(_QWORD *)(v1 - 104) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::ptt::PronunciationRecognizer::run(uint64_t a1, _QWORD *a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t *v25;
  unsigned int v26;
  _QWORD *v27;
  kaldi::TransitionModel *v28;
  uint64_t v29;
  kaldi::SilencePhoneSet *v30;
  kaldi::WordBoundaryInfo *v31;
  void ***v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v46[3];
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  _QWORD v54[3];
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void **v77;
  void **v78[3];
  void ***v79;
  uint64_t v80;

  v4 = a1;
  v80 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)(a2[1] - *a2) >> 2;
  if (v5 < *(int *)(a1 + 1740))
  {
    if (quasar::gLogLevel >= 4)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Input exceeds minimum phone sequence length: ", 45);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" < ", 3);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"; skipping generation.",
        22);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v60);
    }
    return 2;
  }
  v9 = *(unsigned int *)(a1 + 1744);
  if ((int)v9 < 1 || v5 <= v9)
  {
    v12 = *(_QWORD *)(a1 + 1960);
    v13 = *(int *)(v4 + 1728);
    v58 = 0;
    v59 = 0;
    v57 = 0;
    (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 16))(v12, a2, v13, &v57, 0);
    if (v57 == v58)
    {
      v8 = 1;
      goto LABEL_50;
    }
    if (!*(_QWORD *)(v4 + 1992))
    {
      quasar::ptt::ConvertPathsToResultChoices(v4 + 1800, &v57, (uint64_t *)&v60);
      std::vector<std::vector<quasar::Token>>::__vdeallocate((void ***)a3);
      *(_OWORD *)a3 = v60;
      *(_QWORD *)(a3 + 16) = v61;
      *(_QWORD *)&v61 = 0;
      v60 = 0uLL;
      v78[0] = (void **)&v60;
      std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](v78);
LABEL_43:
      if (*(_BYTE *)(v4 + 1736))
      {
        v39 = *(uint64_t **)(a3 + 8);
        v40 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v39 - *(_QWORD *)a3) >> 3));
        if (v39 == *(uint64_t **)a3)
          v41 = 0;
        else
          v41 = v40;
        std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(*(uint64_t **)a3, v39, v41, 1);
      }
      v8 = 0;
      goto LABEL_50;
    }
    if (!a4)
    {
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Unable to run AM fusion decoder without request context.", 56);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v60);
    }
    quasar::ptt::ConvertPathsToCompactLattice(&v57, &v60);
    v14 = v60;
    fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v55);
    fst::ConvertLatticeSkinny<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>,int>(v14, (uint64_t)&v55);
    fst::RmEpsilon<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(&v55, 1, -1, INFINITY, 0.00097656);
    memset(v54, 0, sizeof(v54));
    v15 = *(_QWORD *)(v4 + 1992);
    v16 = (std::__shared_weak_count *)a4[1];
    v51 = *a4;
    v52 = v16;
    if (v16)
    {
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    v60 = 0uLL;
    *(_QWORD *)&v61 = 0;
    quasar::RealignAmFusionDecoder::redecodeLattice(v15, &v51, *((_DWORD *)a4 + 4), (uint64_t)&v55, (kaldi::LatticeScoreCache *)v54, a4[3], (uint64_t *)&v60, (quasar::SymbolTableList *)a4[4], &v53, *((_DWORD *)a4 + 5));
    v78[0] = (void **)&v60;
    std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](v78);
    v19 = v52;
    if (v52)
    {
      v20 = (unint64_t *)&v52->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v22 = v53;
    if (v53)
    {
      *(_QWORD *)&v60 = *(int *)(v4 + 1728);
      *((_QWORD *)&v60 + 1) = v53;
      LODWORD(v61) = *((_DWORD *)a4 + 5);
      *((_QWORD *)&v61 + 1) = a4[3];
      LOBYTE(v62) = 0;
      v48 = 0;
      v49 = 0;
      v50 = 0;
      v47 = v14;
      quasar::CalculateJoinedNBest<1ul>::operator()((uint64_t)v78, (uint64_t)&v60, &v47, (uint64_t *)&v48);
      v43 = v22;
      v44 = v4;
      v23 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 40))(*a4);
      v25 = v48;
      v24 = v49;
      if (v48 != v49)
      {
        v26 = v23;
        v27 = *(_QWORD **)(v4 + 1992);
        v28 = (kaldi::TransitionModel *)v27[126];
        v29 = v27[69];
        v30 = (kaldi::SilencePhoneSet *)(v27 + 94);
        v31 = (kaldi::WordBoundaryInfo *)v27[88];
        while (1)
        {
          v78[0] = (void **)&off_1E5CFF908;
          v79 = v78;
          quasar::CreateResultChoice<1ul>(v25, (quasar::QsrTextSymbolTable *)(v44 + 1800), v29, v30, v31, v28, v26, (uint64_t)v78, v46);
          std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)a3, (uint64_t)v46);
          v77 = (void **)v46;
          std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v77);
          v32 = v79;
          if (v79 == v78)
            break;
          if (v79)
          {
            v33 = 5;
LABEL_27:
            ((void (*)(void))(*v32)[v33])();
          }
          v25 += 3;
          if (v25 == v24)
            goto LABEL_29;
        }
        v32 = v78;
        v33 = 4;
        goto LABEL_27;
      }
LABEL_29:
      v78[0] = (void **)&v48;
      std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100](v78);
      v4 = v44;
      v22 = v43;
    }
    else
    {
      if (quasar::gLogLevel < 2)
      {
LABEL_39:
        kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)v54);
        v55 = &unk_1E5D256C0;
        v37 = v56;
        if (v56)
        {
          v38 = *(_DWORD *)(v56 + 56) - 1;
          *(_DWORD *)(v56 + 56) = v38;
          if (!v38)
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        if (v22)
          goto LABEL_43;
        v8 = 4;
LABEL_50:
        *(_QWORD *)&v60 = &v57;
        std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v60);
        return v8;
      }
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"AM force alignment failed during PTT.", 37);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v60);
    }
    v36 = v53;
    v53 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
    goto LABEL_39;
  }
  if (quasar::gLogLevel >= 4)
  {
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v60, (uint64_t)"Input exceeds maximum phone sequence length: ", 45);
    v34 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" > ", 3);
    v35 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"; skipping generation.",
      22);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v60);
  }
  return 3;
}

void sub_1ADFD128C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_1ADFD129C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[4];
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (v3)
    (*(void (**)())(*(_QWORD *)v3 + 8))();
  kaldi::LatticeScoreCache::~LatticeScoreCache((kaldi::LatticeScoreCache *)v4);
  v4[3] = &unk_1E5D256C0;
  v0 = v5;
  if (v5)
  {
    v1 = *(_DWORD *)(v5 + 56) - 1;
    *(_DWORD *)(v5 + 56) = v1;
    if (!v1)
      (*(void (**)(uint64_t))(*(_QWORD *)v0 + 8))(v0);
  }
  if (v2)
    (*(void (**)())(*(_QWORD *)v2 + 8))();
  v7 = &v6;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100](&v7);
  JUMPOUT(0x1ADFD1400);
}

void sub_1ADFD12A8()
{
  JUMPOUT(0x1ADFD13E0);
}

void sub_1ADFD12F4()
{
  JUMPOUT(0x1ADFD1394);
}

void sub_1ADFD1300()
{
  JUMPOUT(0x1ADFD13E8);
}

void sub_1ADFD130C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1ADFD1318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v19 - 104);
  if (v20 == (_QWORD *)(v19 - 128))
  {
    v21 = 4;
    v20 = (_QWORD *)(v19 - 128);
  }
  else
  {
    if (!v20)
    {
LABEL_6:
      *(_QWORD *)(v19 - 128) = &a19;
      std::vector<std::vector<quasar::NBestToken<1ul>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v19 - 128));
      JUMPOUT(0x1ADFD1374);
    }
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
  goto LABEL_6;
}

void sub_1ADFD13F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a33);
  JUMPOUT(0x1ADFD1400);
}

void quasar::CreateResultChoice<1ul>(uint64_t *a1@<X0>, quasar::QsrTextSymbolTable *a2@<X1>, uint64_t a3@<X2>, kaldi::SilencePhoneSet *a4@<X3>, kaldi::WordBoundaryInfo *a5@<X4>, kaldi::TransitionModel *a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  char *v14;
  uint64_t v15;
  int32x2_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void **v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  _BOOL4 isSilencePhone;
  uint64_t v29;
  kaldi::WordBoundaryInfo *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unsigned int *v50;
  unsigned int v51;
  int32x2_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  std::string *v60;
  std::string::size_type size;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string v75;
  __int128 v76;
  _OWORD v77[4];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  _BYTE v81[160];
  void *__p;
  char *v83;
  char *v84;
  void *v85;
  char *v86;
  char *v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char v92;
  _QWORD v93[22];

  v93[19] = *MEMORY[0x1E0C80C00];
  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  std::vector<quasar::Token>::reserve(a9, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  v85 = 0;
  v86 = 0;
  v87 = 0;
  v14 = (char *)operator new(8uLL);
  __p = v14;
  *(_QWORD *)v14 = 0;
  v83 = v14 + 8;
  v84 = v14 + 8;
  std::vector<long long>::reserve(&__p, 0x2E8BA2E8BA2E8BA3 * ((a1[1] - *a1) >> 3));
  v15 = *a1;
  v65 = a1[1];
  if (*a1 != v65)
  {
    v16 = vdup_n_s32(a7);
    do
    {
      v17 = a9[1];
      if (v17 >= a9[2])
      {
        v18 = std::vector<quasar::Token>::__emplace_back_slow_path<>(a9);
        v19 = a9;
      }
      else
      {
        quasar::Token::Token((quasar::Token *)a9[1]);
        v18 = v17 + 224;
        v19 = a9;
        a9[1] = v17 + 224;
      }
      v19[1] = v18;
      quasar::QsrTextSymbolTable::Find(a2, &v76);
      v20 = (void **)(v18 - 224);
      if (*(char *)(v18 - 201) < 0)
        operator delete(*v20);
      v21 = v76;
      *(_QWORD *)(v18 - 208) = *(_QWORD *)&v77[0];
      v70 = v18 - 224;
      v72 = v18;
      *(_OWORD *)v20 = v21;
      *(_DWORD *)(v18 - 200) = *(_DWORD *)v15;
      v22 = *(_QWORD *)(v15 + 16);
      v23 = *(_QWORD *)(v15 + 24) - v22;
      v24 = v23 >> 2;
      if (v23)
      {
        v25 = 0;
        do
        {
          v26 = *(_DWORD *)(v22 + 4 * v25);
          v27 = kaldi::TransitionModel::TransitionIdToPhone(a6, v26);
          isSilencePhone = kaldi::SilencePhoneSet::isSilencePhone(a4, v27);
          if (!isSilencePhone)
            LODWORD(v24) = v25;
          if (!isSilencePhone && kaldi::TransitionModel::IsFinal(a6, v26))
          {
            if ((kaldi::WordBoundaryInfo::TypeOfPhone(a5, v27) & 0xFFFFFFFE) == 2)
            {
              v29 = a3;
              v30 = a5;
              v31 = ((v86 - (_BYTE *)v85) >> 2) + 1;
              v32 = v83;
              if (v83 >= v84)
              {
                v34 = (char *)__p;
                v35 = (v83 - (_BYTE *)__p) >> 3;
                v36 = v35 + 1;
                if ((unint64_t)(v35 + 1) >> 61)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v37 = v84 - (_BYTE *)__p;
                if ((v84 - (_BYTE *)__p) >> 2 > v36)
                  v36 = v37 >> 2;
                if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF8)
                  v38 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v38 = v36;
                if (v38)
                {
                  v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v84, v38);
                  v34 = (char *)__p;
                  v32 = v83;
                }
                else
                {
                  v39 = 0;
                }
                v40 = (uint64_t *)&v39[8 * v35];
                *v40 = v31;
                v33 = (char *)(v40 + 1);
                while (v32 != v34)
                {
                  v41 = *((_QWORD *)v32 - 1);
                  v32 -= 8;
                  *--v40 = v41;
                }
                __p = v40;
                v83 = v33;
                v84 = &v39[8 * v38];
                if (v34)
                  operator delete(v34);
              }
              else
              {
                *(_QWORD *)v83 = v31;
                v33 = v32 + 8;
              }
              v83 = v33;
              a5 = v30;
              a3 = v29;
            }
            v42 = v86;
            if (v86 >= v87)
            {
              v44 = (char *)v85;
              v45 = (v86 - (_BYTE *)v85) >> 2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v47 = v87 - (_BYTE *)v85;
              if ((v87 - (_BYTE *)v85) >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v87, v48);
                v44 = (char *)v85;
                v42 = v86;
              }
              else
              {
                v49 = 0;
              }
              v50 = (unsigned int *)&v49[4 * v45];
              *v50 = v27;
              v43 = (char *)(v50 + 1);
              while (v42 != v44)
              {
                v51 = *((_DWORD *)v42 - 1);
                v42 -= 4;
                *--v50 = v51;
              }
              v85 = v50;
              v86 = v43;
              v87 = &v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *(_DWORD *)v86 = v27;
              v43 = v42 + 4;
            }
            v86 = v43;
          }
          ++v25;
          v22 = *(_QWORD *)(v15 + 16);
        }
        while (v25 < (*(_QWORD *)(v15 + 24) - v22) >> 2);
      }
      v52 = vmovn_s64(*(int64x2_t *)(v15 + 40));
      *(_DWORD *)(v72 - 188) = a7 + a7 * (*(_OWORD *)(v15 + 40) + v24);
      *(int32x2_t *)(v72 - 196) = vmul_s32(v16, v52);
      *(_QWORD *)&v88 = v70;
      v53 = *(_QWORD *)(a8 + 24);
      if (!v53)
        std::__throw_bad_function_call[abi:ne180100]();
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)v53 + 48))(v53, v15, &v88);
      v15 += 88;
    }
    while (v15 != v65);
  }
  if (0x6DB6DB6DB6DB6DB7 * ((a9[1] - *a9) >> 5) + 1 == (v83 - (_BYTE *)__p) >> 3)
  {
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v76);
    v54 = *MEMORY[0x1E0DE4F50];
    v71 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v73 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    if (a9[1] != *a9)
    {
      v55 = 0;
      v67 = MEMORY[0x1E0DE4FB8] + 16;
      do
      {
        v56 = __p;
        v57 = *((_QWORD *)__p + v55);
        v58 = v55 + 1;
        while (v57 < v56[v58])
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a3 + 88))(&v75, a3, *((int *)v85 + v57));
          kaldi::quasar::Lexicon::BasifyPhone(&v75);
          v59 = (char *)v77 + *(_QWORD *)(*(_QWORD *)&v77[0] - 24);
          if ((v59[32] & 5) == 0)
          {
            (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD, uint64_t, uint64_t))(**((_QWORD **)v59 + 5)
                                                                                             + 32))(&v88, *((_QWORD *)v59 + 5), 0, 1, 16);
            if (v93[0] >= 1)
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)" ", 1);
          }
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v60 = &v75;
          else
            v60 = (std::string *)v75.__r_.__value_.__r.__words[0];
          if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v75.__r_.__value_.__r.__words[2]);
          else
            size = v75.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v77, (uint64_t)v60, size);
          if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v75.__r_.__value_.__l.__data_);
          ++v57;
          v56 = __p;
        }
        std::stringbuf::str();
        v62 = *a9 + 224 * v55;
        v63 = v62 + 48;
        if (*(char *)(v62 + 71) < 0)
          operator delete(*(void **)v63);
        v64 = v88;
        *(_QWORD *)(v63 + 16) = v89;
        *(_OWORD *)v63 = v64;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v88);
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::swap[abi:ne180100]((uint64_t *)&v88, (uint64_t *)&v76);
        *(_QWORD *)&v88 = v54;
        *(_QWORD *)((char *)&v88 + *(_QWORD *)(v54 - 24)) = v71;
        v89 = v73;
        v90 = v67;
        if (v92 < 0)
          operator delete(v91);
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x1AF44D094](v93);
        ++v55;
      }
      while (v58 < 0x6DB6DB6DB6DB6DB7 * ((a9[1] - *a9) >> 5));
    }
    *(_QWORD *)&v76 = v54;
    *(_QWORD *)((char *)&v77[-1] + *(_QWORD *)(v54 - 24)) = v71;
    *(_QWORD *)&v77[0] = v73;
    *((_QWORD *)&v77[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    if (SHIBYTE(v79) < 0)
      operator delete(*((void **)&v78 + 1));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1AF44D094](v81);
  }
  else if (quasar::gLogLevel >= 2)
  {
    v80 = 0u;
    memset(v81, 0, 144);
    v78 = 0u;
    v79 = 0u;
    memset(v77, 0, sizeof(v77));
    v76 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v76);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v76, (uint64_t)"Unable to generate phone sequence for result choice due to mismatched alignment.", 80);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v76);
  }
  if (__p)
  {
    v83 = (char *)__p;
    operator delete(__p);
  }
  if (v85)
  {
    v86 = (char *)v85;
    operator delete(v85);
  }
}

void sub_1ADFD1B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,uint64_t a59,void *a60,uint64_t a61)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a21);
  if (__p)
  {
    a58 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a60)
  {
    a61 = (uint64_t)a60;
    operator delete(a60);
  }
  a21 = a17;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void quasar::ptt::PronunciationRecognizer::run(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, __int128 *a4@<X8>)
{
  _QWORD *v5;
  _OWORD v6[17];
  __int128 v7;
  uint64_t v8;

  v7 = 0uLL;
  v8 = 0;
  if (quasar::ptt::PronunciationRecognizer::run(a1, a2, (uint64_t)&v7, a3))
  {
    if (quasar::gLogLevel >= 4)
    {
      memset(v6, 0, sizeof(v6));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"PTT failed due to result code ", 30);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)".", 1);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v6);
    }
  }
  else
  {
    *a4 = v7;
    *((_QWORD *)a4 + 2) = v8;
    a4 = &v7;
  }
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  *((_QWORD *)a4 + 2) = 0;
  *(_QWORD *)&v6[0] = &v7;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)v6);
}

void sub_1ADFD1D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 64);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void quasar::ptt::PronunciationRecognizer::Params::registerParams(quasar::ptt::PronunciationRecognizer::Params *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-confusion-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to Phonetic Confusion model component.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-syms-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to phone symbol table.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 32, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lg-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to LG FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 64, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "inv-g-fst-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to G negated FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 96, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "big-g-fst-file-list");
  std::string::basic_string[abi:ne180100]<0>(__p, "Path to Big G FST.");
  quasar::SystemConfig::Register<quasar::filesystem::Path>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 1, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nbest-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum size of output n-best list.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "phonetic-confusion-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scale factor for phonetic confusion component log-proabilities.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 270, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-phone-sequence-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum phone sequence length for which to generate alternatives (defaults to 1).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 172, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-phone-sequence-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum phone sequence length for which to generate alternatives (ignored if zero or lower).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 176, (uint64_t)__p, 0, 273, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADFD2164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

quasar::ptt::PronunciationRecognizer::Params *quasar::ptt::PronunciationRecognizer::Params::Params(quasar::ptt::PronunciationRecognizer::Params *this)
{
  _QWORD *v2;

  v2 = quasar::filesystem::Path::Path(this);
  quasar::filesystem::Path::Path(v2 + 4);
  quasar::filesystem::Path::Path((_QWORD *)this + 8);
  quasar::filesystem::Path::Path((_QWORD *)this + 12);
  quasar::filesystem::Path::Path((_QWORD *)this + 16);
  *((_QWORD *)this + 20) = 0x3F8000000000000ALL;
  *((_BYTE *)this + 168) = 1;
  *(_QWORD *)((char *)this + 172) = 0xFFFFFFFF00000001;
  return this;
}

void sub_1ADFD223C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 96) = &unk_1E5D343A0;
  if (*(char *)(v1 + 127) < 0)
    operator delete(*(void **)(v1 + 104));
  *(_QWORD *)(v1 + 64) = &unk_1E5D343A0;
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  *(_QWORD *)(v1 + 32) = &unk_1E5D343A0;
  if (*(char *)(v1 + 63) < 0)
    operator delete(*(void **)(v1 + 40));
  *(_QWORD *)v1 = &unk_1E5D343A0;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

void quasar::SystemConfig::Register<quasar::filesystem::Path>(uint64_t a1, const void **a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t *v15;
  uint64_t *v16;
  uint64_t **v17;
  void *__p[2];
  char v19;
  uint64_t v20;
  void **v21;

  quasar::SystemConfig::Register(a1, a2, a3);
  quasar::SystemConfig::Version::Version(&v20, a6, a7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v15 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1464), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v15[7] = v20;
  if (v19 < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::Version::Version(&v20, a8, a9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  v21 = __p;
  v16 = std::__tree<std::__value_type<std::string,quasar::SystemConfig::Version>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::SystemConfig::Version>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::SystemConfig::Version>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(a1 + 1488), (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v21);
  v16[7] = v20;
  if (v19 < 0)
  {
    operator delete(__p[0]);
    if (!a5)
      return;
  }
  else if (!a5)
  {
    return;
  }
  __p[0] = (void *)(a1 + 816);
  v17 = (uint64_t **)(std::__tree<std::__value_type<std::string,std::set<std::string>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<std::string>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<std::string>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 1512), (const void **)(a1 + 816), (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 7);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)(a1 + 816), a2, (uint64_t)__p);
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v17, (const void **)__p, (uint64_t)__p);
  if (v19 < 0)
    operator delete(__p[0]);
}

void sub_1ADFD245C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v11;
  quasar::Token *v12;
  char *v13;
  char *v14;
  uint64_t *v15;

  v2 = *a1;
  v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v5 = (uint64_t)(a1 + 2);
  v6 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v2) >> 5);
  if (2 * v6 > v4)
    v4 = 2 * v6;
  if (v6 >= 0x92492492492492)
    v7 = 0x124924924924924;
  else
    v7 = v4;
  v15 = a1 + 2;
  if (v7)
    v8 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v5, v7);
  else
    v8 = 0;
  v11 = v8;
  v12 = (quasar::Token *)&v8[224 * v3];
  v14 = &v8[224 * v7];
  quasar::Token::Token(v12);
  v13 = (char *)v12 + 224;
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v11);
  v9 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_1ADFD2578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E5CFF908;
  return result;
}

void std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E5CFF908;
}

float std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::operator()(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  float result;

  v3 = *a3;
  *(int32x2_t *)(v3 + 204) = vrev64_s32(*(int32x2_t *)(a2 + 56));
  result = *(float *)(a2 + 12);
  *(float *)(v3 + 216) = result;
  return result;
}

uint64_t std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0,std::allocator<quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_0>,void ()(quasar::NBestToken<1ul> const&,quasar::Token*)>::target_type()
{
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,false>(uint64_t *a1, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  __int128 v17;
  uint64_t v18;
  float v19;
  uint64_t v20;
  float v21;
  uint64_t *v22;
  uint64_t *v23;
  float v24;
  float v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  float v31;
  char v32;
  float v33;
  float v34;
  uint64_t *v35;
  float v36;
  float v37;
  uint64_t *v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  float v44;
  float ResultChoiceCost;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  float v53;
  uint64_t v54;
  char *v55;
  float v56;
  uint64_t v57;
  int64_t v58;
  int64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t *v62;
  float v63;
  uint64_t *v64;
  float v65;
  uint64_t *v66;
  uint64_t v67;
  float v68;
  float v69;
  int64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t *v81;
  float v82;
  uint64_t *v83;
  float v84;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  float v89;
  void **v90;
  float v91;
  float v92;
  uint64_t *v93;
  uint64_t *v94;
  __int128 v95;
  uint64_t v96;
  void **v97;
  __int128 v98;
  uint64_t v99;

void sub_1ADFD3134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  a11 = (void **)&a15;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  float ResultChoiceCost;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a2, a3, a4);
  ResultChoiceCost = quasar::ptt::GetResultChoiceCost(a5);
  if (ResultChoiceCost < quasar::ptt::GetResultChoiceCost(a4))
  {
    v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    v12 = a4[1];
    a4[1] = a5[1];
    a5[1] = v12;
    v13 = a4[2];
    a4[2] = a5[2];
    a5[2] = v13;
    v14 = quasar::ptt::GetResultChoiceCost(a4);
    if (v14 < quasar::ptt::GetResultChoiceCost(a3))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      v16 = a3[1];
      a3[1] = a4[1];
      a4[1] = v16;
      v17 = a3[2];
      a3[2] = a4[2];
      a4[2] = v17;
      v18 = quasar::ptt::GetResultChoiceCost(a3);
      if (v18 < quasar::ptt::GetResultChoiceCost(a2))
      {
        v19 = *a2;
        *a2 = *a3;
        *a3 = v19;
        v20 = a2[1];
        a2[1] = a3[1];
        a3[1] = v20;
        v21 = a2[2];
        a2[2] = a3[2];
        a3[2] = v21;
        v22 = quasar::ptt::GetResultChoiceCost(a2);
        if (v22 < quasar::ptt::GetResultChoiceCost(a1))
        {
          v23 = *a1;
          *a1 = *a2;
          *a2 = v23;
          v24 = a1[1];
          a1[1] = a2[1];
          a2[1] = v24;
          v25 = a1[2];
          a1[2] = a2[2];
          a2[2] = v25;
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  float ResultChoiceCost;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  uint64_t v24;

  ResultChoiceCost = quasar::ptt::GetResultChoiceCost(a2);
  v7 = quasar::ptt::GetResultChoiceCost(a1);
  v8 = quasar::ptt::GetResultChoiceCost(a3);
  v9 = quasar::ptt::GetResultChoiceCost(a2);
  if (ResultChoiceCost < v7)
  {
    v11 = a1 + 2;
    v10 = *a1;
    if (v8 >= v9)
    {
      *a1 = *a2;
      *a2 = v10;
      v20 = a1[1];
      a1[1] = a2[1];
      a2[1] = v20;
      v11 = a2 + 2;
      v21 = a1[2];
      a1[2] = a2[2];
      a2[2] = v21;
      v22 = quasar::ptt::GetResultChoiceCost(a3);
      if (v22 >= quasar::ptt::GetResultChoiceCost(a2))
        return;
      v23 = *a2;
      *a2 = *a3;
      *a3 = v23;
      v12 = a2[1];
      a2[1] = a3[1];
    }
    else
    {
      *a1 = *a3;
      *a3 = v10;
      v12 = a1[1];
      a1[1] = a3[1];
    }
    a3[1] = v12;
    v16 = a3 + 2;
    goto LABEL_10;
  }
  if (v8 < v9)
  {
    v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
    v14 = a2[1];
    a2[1] = a3[1];
    a3[1] = v14;
    v16 = a2 + 2;
    v15 = a2[2];
    a2[2] = a3[2];
    a3[2] = v15;
    v17 = quasar::ptt::GetResultChoiceCost(a2);
    if (v17 < quasar::ptt::GetResultChoiceCost(a1))
    {
      v18 = *a1;
      *a1 = *a2;
      *a2 = v18;
      v19 = a1[1];
      a1[1] = a2[1];
      a2[1] = v19;
      v11 = a1 + 2;
LABEL_10:
      v24 = *v11;
      *v11 = *v16;
      *v16 = v24;
    }
  }
}

uint64_t std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2)
{
  _BOOL8 v4;
  float ResultChoiceCost;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  char *v15;
  float v16;
  uint64_t v17;
  __int128 v19;
  uint64_t v20;
  void **v21;

  v4 = 1;
  switch(0xAAAAAAAAAAAAAAABLL * (a2 - a1))
  {
    case 0uLL:
    case 1uLL:
      return v4;
    case 2uLL:
      ResultChoiceCost = quasar::ptt::GetResultChoiceCost(a2 - 3);
      if (ResultChoiceCost < quasar::ptt::GetResultChoiceCost(a1))
      {
        v6 = *a1;
        *a1 = *(a2 - 3);
        *(a2 - 3) = v6;
        v7 = a1[1];
        a1[1] = *(a2 - 2);
        *(a2 - 2) = v7;
        v8 = a1[2];
        a1[2] = *(a2 - 1);
        *(a2 - 1) = v8;
      }
      return v4;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a2 - 3);
      return v4;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6, a2 - 3);
      return v4;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*,0>(a1, a1 + 3, a1 + 6, a1 + 9, a2 - 3);
      return v4;
    default:
      v9 = a1 + 6;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a1 + 3, a1 + 6);
      v10 = a1 + 9;
      if (a1 + 9 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = quasar::ptt::GetResultChoiceCost(v10);
    if (v13 < quasar::ptt::GetResultChoiceCost(v9))
      break;
LABEL_14:
    v9 = v10;
    v11 += 24;
    v10 += 3;
    if (v10 == a2)
      return 1;
  }
  v19 = *(_OWORD *)v10;
  v20 = v10[2];
  v10[1] = 0;
  v10[2] = 0;
  *v10 = 0;
  v14 = v11;
  while (1)
  {
    v15 = (char *)a1 + v14;
    std::vector<quasar::Token>::__vdeallocate((void **)((char *)a1 + v14 + 72));
    *(_OWORD *)(v15 + 72) = *((_OWORD *)v15 + 3);
    *((_QWORD *)v15 + 11) = *((_QWORD *)v15 + 8);
    *((_QWORD *)v15 + 7) = 0;
    *((_QWORD *)v15 + 8) = 0;
    *((_QWORD *)v15 + 6) = 0;
    if (v14 == -48)
      break;
    v16 = quasar::ptt::GetResultChoiceCost((uint64_t *)&v19);
    v14 -= 24;
    if (v16 >= quasar::ptt::GetResultChoiceCost((uint64_t *)v15 + 3))
    {
      v17 = (uint64_t)a1 + v14 + 72;
      goto LABEL_12;
    }
  }
  v17 = (uint64_t)a1;
LABEL_12:
  std::vector<quasar::Token>::__vdeallocate((void **)v17);
  *(_OWORD *)v17 = v19;
  *(_QWORD *)(v17 + 16) = v20;
  v20 = 0;
  v19 = 0uLL;
  if (++v12 != 8)
  {
    v21 = (void **)&v19;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v21);
    goto LABEL_14;
  }
  v4 = v10 + 3 == a2;
  v21 = (void **)&v19;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&v21);
  return v4;
}

void sub_1ADFD3720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  float ResultChoiceCost;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::ptt::PronunciationRecognizer::run(std::vector<int> const&,std::vector<std::vector<quasar::Token>> *,quasar::ptt::PronunciationRecognizer::RequestContext const*)::$_1 &,std::vector<quasar::Token>*>(a1, a2, a3);
  ResultChoiceCost = quasar::ptt::GetResultChoiceCost(a4);
  if (ResultChoiceCost < quasar::ptt::GetResultChoiceCost(a3))
  {
    v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    v11 = a3[2];
    a3[2] = a4[2];
    a4[2] = v11;
    v12 = quasar::ptt::GetResultChoiceCost(a3);
    if (v12 < quasar::ptt::GetResultChoiceCost(a2))
    {
      v13 = *a2;
      *a2 = *a3;
      *a3 = v13;
      v14 = a2[1];
      a2[1] = a3[1];
      a3[1] = v14;
      v15 = a2[2];
      a2[2] = a3[2];
      a3[2] = v15;
      v16 = quasar::ptt::GetResultChoiceCost(a2);
      if (v16 < quasar::ptt::GetResultChoiceCost(a1))
      {
        v17 = *a1;
        *a1 = *a2;
        *a2 = v17;
        v18 = a1[1];
        a1[1] = a2[1];
        a2[1] = v18;
        v19 = a1[2];
        a1[2] = a2[2];
        a2[2] = v19;
      }
    }
  }
}

_QWORD **std::unique_ptr<quasar::ptt::UnigramPhoneticConfusion>::reset[abi:ne180100](_QWORD **result, _QWORD *a2)
{
  _QWORD *v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    *v2 = &off_1E5D3B708;
    kaldi::Matrix<float>::~Matrix((uint64_t)(v2 + 1));
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

void sub_1ADFD3998(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADFD3A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1ADFD3B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1ADFD3CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void *v15;

  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);

  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<quasar::PhonesetMapping,std::allocator<quasar::PhonesetMapping>,std::string,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  std::string *v4;
  std::string *result;

  v4 = (std::string *)operator new(0x30uLL);
  result = std::__shared_ptr_emplace<quasar::PhonesetMapping>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::PhonesetMapping>,0>(v4, a1);
  *a2 = v4 + 1;
  a2[1] = v4;
  return result;
}

void sub_1ADFD3D60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<quasar::PhonesetMapping>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::PhonesetMapping>,0>(std::string *a1, __int128 *a2)
{
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D42CD0;
  a1->__r_.__value_.__l.__size_ = 0;
  quasar::PhonesetMapping::PhonesetMapping(a1 + 1, a2);
  return a1;
}

void sub_1ADFD3DAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42CD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42CD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::PhonesetMapping>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void quasar::PhoneticMatchAlignmentSpan::toPTree(quasar **this@<X0>, int a2@<W1>, quasar::PTree *a3@<X8>)
{
  void *v6[2];
  char v7;
  std::string v8[2];
  void *__p[2];
  char v10;
  _BYTE v11[64];

  quasar::PTree::PTree(a3);
  if (a2)
  {
    quasar::PTree::PTree((quasar::PTree *)v11);
    quasar::phraseToPtree(this, (quasar::PTree *)v11);
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    if (v10 < 0)
      operator delete(__p[0]);
    quasar::PTree::PTree((quasar::PTree *)__p);
    quasar::phraseToPtree(this + 3, (quasar::PTree *)__p);
    std::string::basic_string[abi:ne180100]<0>(v8, "rawOutput");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v8, (uint64_t)__p, 1);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    quasar::PTree::PTree((quasar::PTree *)v8);
    quasar::phraseToPtree(this + 6, (quasar::PTree *)v8);
    std::string::basic_string[abi:ne180100]<0>(v6, "output");
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)v6, (uint64_t)v8, 1);
    if (v7 < 0)
      operator delete(v6[0]);
    quasar::PTree::~PTree((quasar::PTree *)v8);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    quasar::PTree::~PTree((quasar::PTree *)v11);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "input");
    quasar::tokens2Str((uint64_t *)this, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    if (v10 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "rawOutput");
    quasar::tokens2Str((uint64_t *)this + 3, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    if (v10 < 0)
      operator delete(__p[0]);
    std::string::basic_string[abi:ne180100]<0>(__p, "output");
    quasar::tokens2Str((uint64_t *)this + 6, v8);
    quasar::PTree::PTree(v11, v8);
    quasar::PTree::putChild((uint64_t)a3, (uint64_t)__p, (uint64_t)v11, 1);
    quasar::PTree::~PTree((quasar::PTree *)v11);
    if (SHIBYTE(v8[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v8[0].__r_.__value_.__l.__data_);
    if (v10 < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADFD4080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  quasar::PTree *v32;
  uint64_t v33;

  quasar::PTree::~PTree((quasar::PTree *)(v33 - 96));
  if (a21 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  quasar::PTree::~PTree(v32);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchAlignmentSpan::clear(quasar::PhoneticMatchAlignmentSpan *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t j;
  uint64_t v7;

  v2 = *((_QWORD *)this + 1);
  v3 = *(_QWORD *)this;
  while (v2 != v3)
    quasar::Token::~Token((void **)(v2 - 224));
  *((_QWORD *)this + 1) = v3;
  v5 = *((_QWORD *)this + 3);
  for (i = *((_QWORD *)this + 4); i != v5; quasar::Token::~Token((void **)(i - 224)))
    ;
  *((_QWORD *)this + 4) = v5;
  v7 = *((_QWORD *)this + 6);
  for (j = *((_QWORD *)this + 7); j != v7; quasar::Token::~Token((void **)(j - 224)))
    ;
  *((_QWORD *)this + 7) = v7;
}

BOOL quasar::PhoneticMatchAlignmentSpan::empty(quasar::PhoneticMatchAlignmentSpan *this)
{
  return *(_QWORD *)this == *((_QWORD *)this + 1)
      && *((_QWORD *)this + 3) == *((_QWORD *)this + 4)
      && *((_QWORD *)this + 6) == *((_QWORD *)this + 7);
}

uint64_t quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches(_QWORD *a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v2 = a1[3];
  v3 = a1[4];
  if (v2 == v3)
    return 0;
  v5 = *((_BYTE *)a2 + 23);
  if (v5 >= 0)
    v6 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  else
    v6 = a2[1];
  if (v5 >= 0)
    v7 = (unsigned __int8 *)a2;
  else
    v7 = *a2;
  while (1)
  {
    v8 = *(unsigned __int8 *)(v2 + 71);
    if (*(char *)(v2 + 71) < 0)
    {
      if (!*(_QWORD *)(v2 + 56))
        goto LABEL_23;
    }
    else if (!*(_BYTE *)(v2 + 71))
    {
      goto LABEL_23;
    }
    if ((v8 & 0x80u) == 0)
      v9 = (unsigned __int8 *)*(unsigned __int8 *)(v2 + 71);
    else
      v9 = *(unsigned __int8 **)(v2 + 56);
    if (v9 != v6)
      goto LABEL_23;
    if ((v8 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v2 + 71))
      return -1227133513 * ((a1[1] - *a1) >> 5);
    v10 = 0;
    while (*(unsigned __int8 *)(v2 + v10 + 48) == v7[v10])
    {
      if (v8 == ++v10)
        return -1227133513 * ((a1[1] - *a1) >> 5);
    }
LABEL_23:
    v2 += 224;
    if (v2 == v3)
      return 0;
  }
  if (memcmp(*(const void **)(v2 + 48), v7, *(_QWORD *)(v2 + 56)))
    goto LABEL_23;
  return -1227133513 * ((a1[1] - *a1) >> 5);
}

uint64_t quasar::isBadLmeReplacement(uint64_t *a1, uint64_t *a2, uint64_t **a3)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  __int128 v8;
  uint64_t *v9;
  __int128 *v10;
  __int128 *v11;
  __int128 v12;
  char v13;
  void *v14;
  unint64_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  void **v19;
  int v20;
  int v21;
  int v22;
  _BOOL4 v23;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  const std::string::value_type *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type size;
  _QWORD *v34;
  uint64_t *v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  void *v54[2];
  unsigned __int8 v55;
  std::string v56;
  std::string v57;
  _QWORD v58[3];
  std::string v59;
  uint64_t v60;
  std::string *v61;
  unint64_t v62;
  std::string v63;

  quasar::tokens2Str(a1, &v63);
  v60 = 0;
  v61 = 0;
  v62 = 0;
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    v7 = 0;
    do
    {
      if (*(char *)(v5 + 71) < 0)
      {
        if (*(_QWORD *)(v5 + 56))
        {
LABEL_7:
          if ((unint64_t)v7 >= v62)
          {
            v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v60, (__int128 *)v5);
          }
          else
          {
            if (*(char *)(v5 + 23) < 0)
            {
              std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(_QWORD *)(v5 + 8));
            }
            else
            {
              v8 = *(_OWORD *)v5;
              v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(v5 + 16);
              *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
            }
            ++v7;
          }
          v61 = v7;
        }
      }
      else if (*(_BYTE *)(v5 + 71))
      {
        goto LABEL_7;
      }
      v5 += 224;
    }
    while (v5 != v6);
  }
  __p[0] = " ";
  __p[1] = (void *)1;
  quasar::join<std::vector<std::string>>(&v60, (uint64_t *)__p);
  v9 = *a3;
  v36 = a3[1];
  if (*a3 != v36)
  {
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, " ");
    quasar::split((uint64_t)&v63, (uint64_t *)__p, 0, (uint64_t)v58);
    if (SBYTE7(v38) < 0)
      operator delete(__p[0]);
    v10 = (__int128 *)v58[0];
    v11 = (__int128 *)v58[1];
    while (1)
    {
      if (v10 == v11)
      {
        __p[0] = v58;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        v9 += 3;
        if (v9 != v36)
          goto LABEL_16;
        goto LABEL_71;
      }
      if (*((char *)v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v57, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v12 = *v10;
        v57.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 + 2);
        *(_OWORD *)&v57.__r_.__value_.__l.__data_ = v12;
      }
      if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v56, v59.__r_.__value_.__l.__data_, v59.__r_.__value_.__l.__size_);
      else
        v56 = v59;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      quasar::replaceLast(&v57, v9, (uint64_t)__p);
      if (SBYTE7(v38) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "_");
      std::string::basic_string[abi:ne180100]<0>(v54, " ");
      quasar::replaceAll((uint64_t)&v57, (uint64_t)__p, (char *)v54);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SBYTE7(v38) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "_");
      std::string::basic_string[abi:ne180100]<0>(v54, " ");
      quasar::replaceAll((uint64_t)&v56, (uint64_t)__p, (char *)v54);
      if ((char)v55 < 0)
        operator delete(v54[0]);
      if (SBYTE7(v38) < 0)
        operator delete(__p[0]);
      if (quasar::endsWith((uint64_t *)v10, v9))
        break;
LABEL_65:
      if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v56.__r_.__value_.__l.__data_);
      if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v57.__r_.__value_.__l.__data_);
      v10 = (__int128 *)((char *)v10 + 24);
    }
    quasar::toLower((uint64_t)&v57, (uint64_t)__p);
    quasar::toLower((uint64_t)&v56, (uint64_t)v54);
    v13 = BYTE7(v38);
    if ((SBYTE7(v38) & 0x80u) == 0)
      v14 = (void *)BYTE7(v38);
    else
      v14 = __p[1];
    v15 = v55;
    v16 = (char)v55;
    if ((v55 & 0x80u) != 0)
      v15 = (unint64_t)v54[1];
    if (v14 != (void *)v15)
    {
      v23 = 1;
      if (((char)v55 & 0x80000000) == 0)
        goto LABEL_59;
      goto LABEL_63;
    }
    if ((v55 & 0x80u) == 0)
      v17 = v54;
    else
      v17 = (void **)v54[0];
    if (SBYTE7(v38) < 0)
    {
      v23 = memcmp(__p[0], v17, (size_t)__p[1]) != 0;
    }
    else
    {
      if (!BYTE7(v38))
      {
        v23 = 0;
        if (((char)v55 & 0x80000000) == 0)
        {
LABEL_59:
          if ((v13 & 0x80) == 0)
            goto LABEL_60;
LABEL_64:
          operator delete(__p[0]);
          if (v23)
          {
LABEL_72:
            if (quasar::gLogLevel >= 4)
            {
              v52 = 0u;
              v53 = 0u;
              v50 = 0u;
              v51 = 0u;
              v48 = 0u;
              v49 = 0u;
              v46 = 0u;
              v47 = 0u;
              v44 = 0u;
              v45 = 0u;
              v42 = 0u;
              v43 = 0u;
              v40 = 0u;
              v41 = 0u;
              v38 = 0u;
              v39 = 0u;
              *(_OWORD *)__p = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Found protected token \"", 23);
              v27 = *((char *)v10 + 23);
              if (v27 >= 0)
                v28 = (const std::string::value_type *)v10;
              else
                v28 = *(const std::string::value_type **)v10;
              if (v27 >= 0)
                v29 = *((unsigned __int8 *)v10 + 23);
              else
                v29 = *((_QWORD *)v10 + 1);
              v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)v28, v29);
              v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\" is phonetically matched to \"", 30);
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v32 = &v59;
              else
                v32 = (std::string *)v59.__r_.__value_.__r.__words[0];
              if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                size = HIBYTE(v59.__r_.__value_.__r.__words[2]);
              else
                size = v59.__r_.__value_.__l.__size_;
              v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, size);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"\"", 1);
              quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
            }
            if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v56.__r_.__value_.__l.__data_);
            if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v57.__r_.__value_.__l.__data_);
            __p[0] = v58;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
            v25 = 1;
            goto LABEL_91;
          }
          goto LABEL_65;
        }
LABEL_63:
        operator delete(v54[0]);
        if ((BYTE7(v38) & 0x80) == 0)
        {
LABEL_60:
          if (v23)
            goto LABEL_72;
          goto LABEL_65;
        }
        goto LABEL_64;
      }
      v18 = BYTE7(v38) - 1;
      v19 = __p;
      do
      {
        v21 = *(unsigned __int8 *)v19;
        v19 = (void **)((char *)v19 + 1);
        v20 = v21;
        v22 = *(unsigned __int8 *)v17;
        v17 = (void **)((char *)v17 + 1);
        v23 = v20 != v22;
      }
      while (v20 == v22 && v18-- != 0);
    }
    if ((v16 & 0x80000000) == 0)
      goto LABEL_59;
    goto LABEL_63;
  }
LABEL_71:
  v25 = 0;
LABEL_91:
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  __p[0] = &v60;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v63.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1ADFD47E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (*(char *)(v54 - 217) < 0)
    operator delete(*(void **)(v54 - 240));
  if (*(char *)(v54 - 185) < 0)
    operator delete(*(void **)(v54 - 208));
  __p = (void *)(v54 - 184);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v54 - 137) < 0)
    operator delete(*(void **)(v54 - 160));
  __p = (void *)(v54 - 136);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchAlignmentSpan::processRawOutput(uint64_t *a1, uint64_t **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v8;
  int isBadLmeReplacement;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t **i;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _QWORD *v30;
  std::string *v31;
  std::string::size_type v32;
  _QWORD *v33;
  _QWORD *v34;
  std::string *v35;
  std::string::size_type v36;
  _QWORD *v37;
  _QWORD *v39;
  std::string *v40;
  std::string::size_type v41;
  _QWORD *v42;
  _QWORD *v43;
  std::string *v44;
  std::string::size_type v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  std::string *v52;
  std::string::size_type v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  std::string *v64;
  std::string::size_type v65;
  _QWORD *v66;
  _QWORD *v67;
  std::string *v68;
  std::string::size_type size;
  _QWORD *v70;
  _QWORD *v71;
  std::string *p_p;
  std::string::size_type v73;
  _QWORD *v74;
  int v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  std::string __p;
  std::string v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98[3];
  uint64_t v99[4];

  v7 = a1;
  memset(v99, 0, 24);
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v99, *a1, a1[1], 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5));
  v8 = v7[3];
  memset(v98, 0, sizeof(v98));
  v78 = v7 + 3;
  std::vector<quasar::Token>::__init_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v98, v8, v7[4], 0x6DB6DB6DB6DB6DB7 * ((v7[4] - v8) >> 5));
  isBadLmeReplacement = quasar::isBadLmeReplacement(v99, v98, a2);
  *(_QWORD *)&v81 = v98;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  *(_QWORD *)&v81 = v99;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v81);
  v11 = *v7;
  v10 = v7[1];
  if (*v7 == v10)
    goto LABEL_16;
  v12 = 0;
  do
  {
    for (i = *(uint64_t ***)(a4 + 16); i; i = (uint64_t **)*i)
      v12 |= quasar::URegularExpressionWrapper::isMatch((URegularExpression **)i[2], v11);
    v11 += 224;
  }
  while (v11 != v10);
  if ((v12 & 1) == 0)
  {
LABEL_16:
    v12 = 0;
LABEL_17:
    v17 = 1;
    goto LABEL_18;
  }
  v14 = v7[3];
  v15 = v7[4];
  if (v14 == v15)
  {
LABEL_124:
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"LME placeholder replacement pmOutput=\"", 38);
      quasar::tokens2Str(v78, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v68 = &v80;
      else
        v68 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        size = v80.__r_.__value_.__l.__size_;
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, size);
      v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"\" with pmInput=\"", 16);
      quasar::tokens2Str(v7, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v73 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v73 = __p.__r_.__value_.__l.__size_;
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)p_p, v73);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)"\"", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    goto LABEL_17;
  }
  v16 = 1;
  do
  {
    if ((*(char *)(v14 + 71) & 0x80000000) == 0)
    {
      if (*(_BYTE *)(v14 + 71))
        goto LABEL_12;
LABEL_11:
      v16 = 0;
      goto LABEL_12;
    }
    if (!*(_QWORD *)(v14 + 56))
      goto LABEL_11;
LABEL_12:
    v14 += 224;
  }
  while (v14 != v15);
  if ((v16 & 1) != 0)
    goto LABEL_124;
  if (quasar::gLogLevel >= 4)
  {
    v96 = 0u;
    v97 = 0u;
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v90 = 0u;
    v91 = 0u;
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v81 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
    v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Bad LME placeholder replacement pmOutput=\"", 42);
    quasar::tokens2Str(v78, &v80);
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v60 = &v80;
    else
      v60 = (std::string *)v80.__r_.__value_.__r.__words[0];
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v61 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      v61 = v80.__r_.__value_.__l.__size_;
    v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
    v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"\" with pmInput=\"", 16);
    quasar::tokens2Str(v7, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v64 = &__p;
    else
      v64 = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v65 = __p.__r_.__value_.__l.__size_;
    v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)v64, v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)"\"", 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
  }
  v17 = 0;
LABEL_18:
  v18 = v7[3];
  v19 = v7[4];
  if (v18 == v19)
  {
    v20 = 0;
    goto LABEL_63;
  }
  v75 = v17;
  v76 = isBadLmeReplacement;
  v77 = v7;
  v20 = 0;
  v21 = 0;
  v22 = *((char *)a3 + 23);
  v23 = a3[1];
  if (v22 >= 0)
    v24 = *((unsigned __int8 *)a3 + 23);
  else
    v24 = a3[1];
  if (v22 < 0)
    a3 = (_QWORD *)*a3;
  v25 = v18;
  while (2)
  {
    v26 = *(unsigned __int8 *)(v25 + 23);
    if ((v26 & 0x80u) == 0)
      v27 = *(unsigned __int8 *)(v25 + 23);
    else
      v27 = *(_QWORD *)(v25 + 8);
    if (v27 == v24)
    {
      if ((v26 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v25, a3, *(_QWORD *)(v25 + 8)))
          goto LABEL_40;
      }
      else if (*(_BYTE *)(v25 + 23))
      {
        v28 = 0;
        while (*(unsigned __int8 *)(v25 + v28) == *((unsigned __int8 *)a3 + v28))
        {
          if (v26 == ++v28)
            goto LABEL_36;
        }
        goto LABEL_40;
      }
LABEL_36:
      if (v22 < 0)
      {
        if (!v23)
          goto LABEL_40;
      }
      else if (!v22)
      {
        goto LABEL_40;
      }
      v20 = 1;
    }
    else
    {
LABEL_40:
      v21 = 1;
    }
    v25 += 224;
    if (v25 != v19)
      continue;
    break;
  }
  v29 = v20 & v21;
  v7 = v77;
  v17 = v75;
  isBadLmeReplacement = v76;
  if ((v29 & 1) != 0)
  {
    std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)(v77 + 6), *v77, v77[1], 0x6DB6DB6DB6DB6DB7 * ((v77[1] - *v77) >> 5));
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Mixture of wildcards and non-wildcards in replacement of input='", 64);
      quasar::tokens2Str(v77, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = &v80;
      else
        v31 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v32 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v32 = v80.__r_.__value_.__l.__size_;
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v31, v32);
      v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v35 = &__p;
      else
        v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v36 = __p.__r_.__value_.__l.__size_;
      v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"' is invalid", 12);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    return 0;
  }
LABEL_63:
  if (((v20 | v12) & 1) != 0)
  {
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Wildcards/placeholders found not replacing input='", 50);
      quasar::tokens2Str(v7, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v40 = &v80;
      else
        v40 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v41 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v41 = v80.__r_.__value_.__l.__size_;
      v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v44 = &__p;
      else
        v44 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v45 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v45 = __p.__r_.__value_.__l.__size_;
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)v44, v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)"'", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
    }
    v47 = (uint64_t)(v7 + 6);
    v48 = *v7;
    v49 = v7[1];
    v50 = 0x6DB6DB6DB6DB6DB7 * ((v49 - *v7) >> 5);
  }
  else
  {
    if (quasar::gLogLevel >= 4)
    {
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v81 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"No wildcards/placeholders found replacing input='", 49);
      quasar::tokens2Str(v7, &v80);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v80;
      else
        v52 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v53 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v53 = v80.__r_.__value_.__l.__size_;
      v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"' with rawOutput='", 18);
      quasar::tokens2Str(v78, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v56 = &__p;
      else
        v56 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v57 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v57 = __p.__r_.__value_.__l.__size_;
      v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"'", 1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v81);
      v18 = v7[3];
      v19 = v7[4];
    }
    v47 = (uint64_t)(v7 + 6);
    v50 = 0x6DB6DB6DB6DB6DB7 * ((v19 - v18) >> 5);
    v48 = v18;
    v49 = v19;
  }
  std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>(v47, v48, v49, v50);
  return v17 & (isBadLmeReplacement ^ 1u);
}

void sub_1ADFD50E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25)
{
  if (a24 < 0)
    operator delete(__p);
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a25);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchResult::inputToks@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  const quasar::Token **v2;
  std::string::pointer data;
  std::string *v5;
  const quasar::Token *v6;
  const quasar::Token *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = (const quasar::Token **)this->__r_.__value_.__r.__words[2];
  data = this[1].__r_.__value_.__l.__data_;
  if (v2 != (const quasar::Token **)data)
  {
    v5 = 0;
    do
    {
      v6 = *v2;
      v7 = v2[1];
      while (v6 != v7)
      {
        if ((unint64_t)v5 >= a2[2])
        {
          this = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, v6);
          v5 = this;
        }
        else
        {
          this = quasar::Token::Token(v5, v6);
          v5 = (std::string *)((char *)v5 + 224);
          a2[1] = (uint64_t)v5;
        }
        a2[1] = (uint64_t)v5;
        v6 = (const quasar::Token *)((char *)v6 + 224);
      }
      v2 += 9;
    }
    while (v2 != (const quasar::Token **)data);
  }
  return this;
}

void sub_1ADFD5250(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

std::string *quasar::PhoneticMatchResult::outputToks@<X0>(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  std::string::size_type v2;
  std::string::pointer data;
  std::string *v5;
  const quasar::Token *v6;
  const quasar::Token *v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = this->__r_.__value_.__r.__words[2];
  data = this[1].__r_.__value_.__l.__data_;
  if ((std::string::pointer)v2 != data)
  {
    v5 = 0;
    do
    {
      v6 = *(const quasar::Token **)(v2 + 48);
      v7 = *(const quasar::Token **)(v2 + 56);
      while (v6 != v7)
      {
        if ((unint64_t)v5 >= a2[2])
        {
          this = (std::string *)std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, v6);
          v5 = this;
        }
        else
        {
          this = quasar::Token::Token(v5, v6);
          v5 = (std::string *)((char *)v5 + 224);
          a2[1] = (uint64_t)v5;
        }
        a2[1] = (uint64_t)v5;
        v6 = (const quasar::Token *)((char *)v6 + 224);
      }
      v2 += 72;
    }
    while ((std::string::pointer)v2 != data);
  }
  return this;
}

void sub_1ADFD5318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::toJSONString(quasar::PhoneticMatchResult *this, int a2)
{
  quasar **v4;
  quasar **v5;
  quasar *v6;
  float v7;
  quasar *v8;
  float v9;
  quasar *v10;
  float v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  void *__p[2];
  char v18;
  void *v19;
  std::string v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _BYTE v25[64];
  _QWORD v26[2];
  _QWORD v27[11];
  char v28;
  uint64_t v29;
  _BYTE v30[64];

  quasar::PTree::PTree((quasar::PTree *)v30);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v26);
  quasar::PTree::PTree((quasar::PTree *)v25);
  v4 = (quasar **)*((_QWORD *)this + 2);
  v5 = (quasar **)*((_QWORD *)this + 3);
  while (v4 != v5)
  {
    quasar::PhoneticMatchAlignmentSpan::toPTree(v4, a2, (quasar::PTree *)&v19);
    quasar::PTree::addChild((quasar::PTree *)v25, (const quasar::PTree *)&v19);
    quasar::PTree::~PTree((quasar::PTree *)&v19);
    v4 += 9;
  }
  v6 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "overallScore");
  v7 = *((float *)this + 3);
  LODWORD(v19) = quasar::getType(v6, v7);
  std::to_string(&v20, v7);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v8 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "matchCost");
  v9 = *(float *)this;
  LODWORD(v19) = quasar::getType(v8, *(float *)this);
  std::to_string(&v20, v9);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  v10 = (quasar *)std::string::basic_string[abi:ne180100]<0>(__p, "graphCost");
  v11 = *((float *)this + 1);
  LODWORD(v19) = quasar::getType(v10, v11);
  std::to_string(&v20, v11);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "numInputPhones");
  v12 = *((_DWORD *)this + 16);
  LODWORD(v19) = quasar::getType((quasar *)v12);
  std::to_string(&v20, v12);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isScoreHigh");
  v13 = *((unsigned __int8 *)this + 68);
  LODWORD(v19) = quasar::getType((quasar *)*((unsigned __int8 *)this + 68));
  std::to_string(&v20, v13);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isPartial");
  v14 = *((unsigned __int8 *)this + 69);
  LODWORD(v19) = quasar::getType((quasar *)*((unsigned __int8 *)this + 69));
  std::to_string(&v20, v14);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "isValid");
  v15 = *((unsigned __int8 *)this + 70);
  LODWORD(v19) = quasar::getType((quasar *)*((unsigned __int8 *)this + 70));
  std::to_string(&v20, v15);
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 1;
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "decoderName");
  quasar::PTree::PTree(&v19, (char *)this + 40);
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)__p, (uint64_t)&v19, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v19);
  if (v18 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(&v19, "spans");
  quasar::PTree::putChild((uint64_t)v30, (uint64_t)&v19, (uint64_t)v25, 1);
  if (v20.__r_.__value_.__s.__data_[15] < 0)
    operator delete(v19);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v30, v27, 0);
  std::stringbuf::str();
  quasar::PTree::~PTree((quasar::PTree *)v25);
  v26[0] = *MEMORY[0x1E0DE4F50];
  v16 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v26 + *(_QWORD *)(v26[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v27[0] = v16;
  v27[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete((void *)v27[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v29);
  quasar::PTree::~PTree((quasar::PTree *)v30);
}

void sub_1ADFD57D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  uint64_t v34;

  if (a20 < 0)
    operator delete(__p);
  quasar::PTree::~PTree((quasar::PTree *)&a26);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a34);
  quasar::PTree::~PTree((quasar::PTree *)(v34 - 128));
  _Unwind_Resume(a1);
}

uint64_t quasar::PhoneticMatchResult::numWildcardWordMatches(uint64_t a1, unsigned __int8 **a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = *(_QWORD **)(a1 + 24);
  if (v2 == v3)
    return 0;
  LODWORD(v5) = 0;
  do
  {
    v5 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches(v2, a2) + v5;
    v2 += 9;
  }
  while (v2 != v3);
  return v5;
}

void quasar::PhoneticMatchResult::computeScores(quasar::PhoneticMatchResult *this, int a2, int a3, float **a4, int a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  float v16;
  float v17;
  float v18;
  float *v19;
  int v20;
  float v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  unint64_t v26;
  float *v27;
  float *v28;
  float v29;
  float v30;
  float v31;
  float v32;
  uint64_t v33;
  uint64_t i;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  float *v38;
  uint64_t v39;
  float **v40;

  v16 = a6 * a9;
  *((_DWORD *)this + 16) = a2;
  v17 = *(float *)this;
  if (a3)
  {
    v17 = v17 / (float)a2;
    v18 = (float)(v16 + a7) / (float)a2;
  }
  else
  {
    v18 = v16 + a7;
  }
  *((float *)this + 1) = v17;
  *((float *)this + 2) = v18;
  *((float *)this + 3) = (float)(v18 - v17) + a10;
  quasar::PhoneticMatchResult::inputToks((std::string *)this, (uint64_t *)&v37);
  v19 = v37;
  if (v37 == v38)
  {
    v40 = &v37;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v22 = 0.0;
  }
  else
  {
    v20 = 0;
    v21 = 0.0;
    do
    {
      v21 = v21 + (float)(v19[10] / 1000.0);
      ++v20;
      v19 += 56;
    }
    while (v19 != v38);
    v40 = &v37;
    std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v22 = v21 / (float)v20;
  }
  v37 = 0;
  v38 = 0;
  v39 = 0;
  std::vector<float>::resize((uint64_t)&v37, 3uLL);
  v23 = v37;
  *v37 = *((float *)this + 3);
  v23[1] = v22;
  v24 = 0.9999;
  if (v22 <= 0.9999)
    v24 = v22;
  if (v22 < 0.0001)
    v24 = 0.0001;
  v25 = log(1.0 / v24 + -1.0);
  v23[2] = -v25;
  if (a5)
  {
    if (v38 != v23)
    {
      v26 = v38 - v23;
      v27 = *a4;
      if (v26 <= 1)
        v26 = 1;
      v28 = v23;
      do
      {
        v29 = *v28++;
        v30 = v29;
        v31 = *v27++;
        a11 = a11 + (float)(v30 * v31);
        --v26;
      }
      while (v26);
    }
    v32 = expf(a11);
    v22 = v32 / (v32 + 1.0);
  }
  v33 = *((_QWORD *)this + 2);
  for (i = *((_QWORD *)this + 3); v33 != i; v33 += 72)
  {
    v35 = *(_QWORD *)(v33 + 24);
    v36 = *(_QWORD *)(v33 + 32);
    while (v35 != v36)
    {
      *(float *)(v35 + 40) = (float)(int)(float)(v22 * 1000.0);
      v35 += 224;
    }
  }
  *((_BYTE *)this + 68) = *((float *)this + 3) > a8;
  v38 = v23;
  operator delete(v23);
}

void sub_1ADFD5B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::PhoneticMatchResult::processRawOutput(uint64_t a1, uint64_t **a2, _QWORD *a3, uint64_t a4)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v10;

  v5 = *(uint64_t **)(a1 + 16);
  v6 = *(uint64_t **)(a1 + 24);
  if (v5 == v6)
  {
    v10 = 1;
  }
  else
  {
    LODWORD(v10) = 1;
    do
    {
      v10 = quasar::PhoneticMatchAlignmentSpan::processRawOutput(v5, a2, a3, a4) & v10;
      v5 += 9;
    }
    while (v5 != v6);
  }
  *(_BYTE *)(a1 + 70) = v10;
  return v10;
}

void quasar::PhoneticMatchResult::preItnOutputToks(std::string *this@<X0>, uint64_t *a2@<X8>)
{
  std::string *v3;
  const quasar::Token *v4;
  const quasar::Token *i;
  int v6;
  std::string::size_type size;
  unint64_t v8;
  uint64_t v9;
  std::string __p[2];
  void *v11;
  char v12;
  uint64_t v13;
  void *v14;
  char v15;
  uint64_t v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21[2];
  uint64_t v22;
  std::string __str;
  const quasar::Token *v24;
  const quasar::Token *v25;
  void **v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = quasar::PhoneticMatchResult::outputToks(this, (uint64_t *)&v24);
  v4 = v24;
  for (i = v25; v4 != i; v4 = (const quasar::Token *)((char *)v4 + 224))
  {
    memset(&__str, 0, sizeof(__str));
    v21[0] = 0;
    v21[1] = 0;
    v22 = 0;
    v6 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v3);
    std::string::basic_string[abi:ne180100]<0>(__p, "~w01");
    v3 = (std::string *)quasar::QsrText::splitOnUserDefinedSymbol(v6, (uint64_t)v4, __p, (uint64_t)&__str, (uint64_t)v21);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (size)
    {
      quasar::Token::Token(__p, v4);
      std::string::operator=(__p, &__str);
      v8 = a2[1];
      if (v8 >= a2[2])
      {
        v9 = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>(a2, (const quasar::Token *)__p);
      }
      else
      {
        quasar::Token::Token((std::string *)a2[1], (const quasar::Token *)__p);
        v9 = v8 + 224;
        a2[1] = v8 + 224;
      }
      a2[1] = v9;
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
      v26 = (void **)&v16;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v26);
      if (v15 < 0)
        operator delete(v14);
      v26 = (void **)&v13;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v26);
      if (v12 < 0)
        operator delete(v11);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v24;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1ADFD5D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::getItnOverrides(std::string *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *v5;
  uint64_t v6;
  uint64_t v7;
  std::string *v8;
  int v9;
  uint64_t v10;
  size_t v11;
  std::string::pointer data;
  int v13;
  std::string::value_type *v14;
  void **v15;
  std::string::size_type v16;
  char v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string::size_type size;
  const std::string::value_type *v21;
  std::string::size_type v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  __int128 *v35;
  uint64_t v36;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  void *v40[2];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  std::string::value_type *v56;
  std::string::size_type v57;
  uint64_t v58;
  void *v59;
  size_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string v64;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  memset(&v64, 0, sizeof(v64));
  v5 = quasar::PhoneticMatchResult::outputToks(a1, &v62);
  v6 = v62;
  v7 = v63;
  if (v62 != v63)
  {
    v8 = 0;
    do
    {
      v59 = 0;
      v60 = 0;
      v61 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
      v9 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      std::string::basic_string[abi:ne180100]<0>(__p, "~w01");
      v5 = (std::string *)quasar::QsrText::splitOnUserDefinedSymbol(v9, v6, (std::string *)__p, (uint64_t)&v59, (uint64_t)&v56);
      if (SBYTE7(v38) < 0)
      {
        operator delete(__p[0]);
        if (!v8)
        {
LABEL_21:
          v5 = (std::string *)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)&v59);
          v8 = v5;
          goto LABEL_67;
        }
      }
      else if (!v8)
      {
        goto LABEL_21;
      }
      v10 = HIBYTE(v61);
      if (v61 >= 0)
        v11 = HIBYTE(v61);
      else
        v11 = v60;
      data = (std::string::pointer)v8[2].__r_.__value_.__s.__data_[15];
      v13 = (char)data;
      if ((char)data < 0)
        data = v8[2].__r_.__value_.__l.__data_;
      if ((std::string::pointer)v11 != data)
        goto LABEL_23;
      if (v13 >= 0)
        v14 = &v8[1].__r_.__value_.__s.__data_[16];
      else
        v14 = (std::string::value_type *)v8[1].__r_.__value_.__r.__words[2];
      if (v61 < 0)
      {
        v5 = (std::string *)memcmp(v59, v14, v60);
        if ((_DWORD)v5)
          goto LABEL_23;
      }
      else if (HIBYTE(v61))
      {
        v15 = &v59;
        while (*(unsigned __int8 *)v15 == *v14)
        {
          v15 = (void **)((char *)v15 + 1);
          ++v14;
          if (!--v10)
            goto LABEL_38;
        }
LABEL_23:
        v16 = HIBYTE(v58);
        v17 = HIBYTE(v58);
        v18 = v57;
        if (v58 >= 0)
          v19 = HIBYTE(v58);
        else
          v19 = v57;
        if (v19)
        {
          size = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v64.__r_.__value_.__l.__size_;
          if (size)
          {
            std::string::append(&v64, " ");
            v16 = HIBYTE(v58);
            v18 = v57;
            v17 = HIBYTE(v58);
          }
          if (v17 >= 0)
            v21 = (const std::string::value_type *)&v56;
          else
            v21 = v56;
          if (v17 >= 0)
            v22 = v16;
          else
            v22 = v18;
          v5 = std::string::append(&v64, v21, v22);
        }
        goto LABEL_67;
      }
LABEL_38:
      v54 = 0uLL;
      v55 = 0;
      v23 = quasar::QsrText::SingletonInstance((quasar::QsrText *)v5);
      quasar::QsrText::decodeQsrText(v23, (uint64_t)&v64, (uint64_t)&v54);
      quasar::ItnOverride::ItnOverride((std::string *)__p, (__int128 *)&v8->__r_.__value_.__r.__words[2], (__int128 *)&v8[1].__r_.__value_.__r.__words[2], &v54);
      std::vector<quasar::ItnOverride>::push_back[abi:ne180100](a3, (__int128 *)__p);
      if (SBYTE7(v41) < 0)
        operator delete(v40[0]);
      if (SHIBYTE(v39) < 0)
        operator delete(*((void **)&v38 + 1));
      if (SBYTE7(v38) < 0)
        operator delete(__p[0]);
      if (quasar::gLogLevel >= 4)
      {
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        *(_OWORD *)v40 = 0u;
        v41 = 0u;
        v38 = 0u;
        v39 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ITN Override: ", 14);
        v25 = v8[1].__r_.__value_.__s.__data_[15];
        if (v25 >= 0)
          v26 = (uint64_t)&v8->__r_.__value_.__r.__words[2];
        else
          v26 = v8->__r_.__value_.__r.__words[2];
        if (v25 >= 0)
          v27 = v8[1].__r_.__value_.__s.__data_[15];
        else
          v27 = (uint64_t)v8[1].__r_.__value_.__l.__data_;
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" ", 1);
        v30 = v8[2].__r_.__value_.__s.__data_[15];
        if (v30 >= 0)
          v31 = (uint64_t)&v8[1].__r_.__value_.__r.__words[2];
        else
          v31 = v8[1].__r_.__value_.__r.__words[2];
        if (v30 >= 0)
          v32 = v8[2].__r_.__value_.__s.__data_[15];
        else
          v32 = (uint64_t)v8[2].__r_.__value_.__l.__data_;
        v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" ", 1);
        if (v55 >= 0)
          v35 = &v54;
        else
          v35 = (__int128 *)v54;
        if (v55 >= 0)
          v36 = HIBYTE(v55);
        else
          v36 = *((_QWORD *)&v54 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v35, v36);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v5 = (std::string *)MEMORY[0x1AF44C914](&v64, "");
      if (SHIBYTE(v55) < 0)
        operator delete((void *)v54);
      v8 = 0;
LABEL_67:
      if (SHIBYTE(v58) < 0)
        operator delete(v56);
      if (SHIBYTE(v61) < 0)
        operator delete(v59);
      v6 += 224;
    }
    while (v6 != v7);
  }
  __p[0] = &v62;
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v64.__r_.__value_.__l.__data_);
}

void sub_1ADFD6184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<quasar::ItnOverride>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void **std::vector<quasar::ItnOverride>::push_back[abi:ne180100](uint64_t *a1, __int128 *a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (unint64_t)*(result - 1);
  if (v7 >= v6)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x1C71C71C71C71C7)
      v15 = 0x38E38E38E38E38ELL;
    else
      v15 = v13;
    v21[4] = result;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)result, v15);
    else
      v16 = 0;
    v17 = &v16[72 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[72 * v15];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[3];
    *((_QWORD *)v17 + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((_QWORD *)a2 + 6) = 0;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    v21[2] = v17 + 72;
    std::vector<quasar::ItnOverride>::__swap_out_circular_buffer(a1, v21);
    v11 = a1[1];
    result = std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer(v21);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[3];
    *(_QWORD *)(v7 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((_QWORD *)a2 + 7) = 0;
    *((_QWORD *)a2 + 8) = 0;
    *((_QWORD *)a2 + 6) = 0;
    v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return result;
}

void sub_1ADFD63DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,std::string,std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void quasar::PhoneticMatchResult::cleanupPartialSpans(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  int v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  const quasar::Token *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  std::string *v47;
  uint64_t p_size;
  uint64_t v49;
  uint64_t *v50;
  __int128 *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t i;
  uint64_t v55;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;

  v3 = *(_QWORD *)(a1 + 16);
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 != v3 && v2 - v3 != 72)
  {
    v5 = 0;
    v6 = 0;
    v7 = "Moving token '";
    do
    {
      v8 = (uint64_t)v7;
      v9 = v5;
      v10 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((_QWORD *)(v3 + 72 * v5), a2);
      v5 = (v6 + 1);
      v11 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((_QWORD *)(v3 + 72 * v5), a2);
      v12 = v10 >= 1 && v11 <= 0;
      if (!v12 || (v13 = v3 + 72 * v9, v15 = *(_QWORD *)(v13 + 24), v14 = *(_QWORD *)(v13 + 32), v15 == v14))
      {
        v7 = (const char *)v8;
      }
      else
      {
        v7 = (const char *)v8;
        do
        {
          if (*(char *)(v14 - 153) < 0)
          {
            if (*(_QWORD *)(v14 - 168))
              break;
          }
          else if (*(_BYTE *)(v14 - 153))
          {
            break;
          }
          if (quasar::gLogLevel >= 5)
          {
            v72 = 0u;
            v73 = 0u;
            v70 = 0u;
            v71 = 0u;
            v68 = 0u;
            v69 = 0u;
            v66 = 0u;
            v67 = 0u;
            v64 = 0u;
            v65 = 0u;
            v62 = 0u;
            v63 = 0u;
            v60 = 0u;
            v61 = 0u;
            v58 = 0u;
            v59 = 0u;
            v57 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
            v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, v8, 14);
            v17 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v9 + 32);
            v20 = *(_QWORD *)(v17 - 224);
            v18 = v17 - 224;
            v19 = v20;
            v21 = *(char *)(v18 + 23);
            if (v21 >= 0)
              v22 = v18;
            else
              v22 = v19;
            if (v21 >= 0)
              v23 = *(unsigned __int8 *)(v18 + 23);
            else
              v23 = *(_QWORD *)(v18 + 8);
            v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, v22, v23);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"' to following span", 19);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v57);
            v3 = *(_QWORD *)(a1 + 16);
          }
          std::vector<quasar::Token>::insert((uint64_t *)(v3 + 72 * v5 + 24), *(std::string **)(v3 + 72 * v5 + 24), (quasar::Token *)(*(_QWORD *)(v3 + 72 * v9 + 32) - 224));
          v25 = *(_QWORD *)(a1 + 16) + 72 * v9;
          quasar::Token::~Token((void **)(*(_QWORD *)(v25 + 32) - 224));
          *(_QWORD *)(v25 + 32) = v26;
          v3 = *(_QWORD *)(a1 + 16);
          v27 = v3 + 72 * v9;
          v28 = *(_QWORD *)(v27 + 24);
          v14 = *(_QWORD *)(v27 + 32);
        }
        while (v28 != v14);
        v2 = *(_QWORD *)(a1 + 24);
      }
      v29 = 0x8E38E38E38E38E39 * ((v2 - v3) >> 3);
      v6 = v5;
    }
    while (v29 - 1 > v5);
    if (v29 - 3 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v30 = 1;
      do
      {
        v31 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((_QWORD *)(v3 + 72 * v30), a2);
        v32 = v30 - 1;
        v33 = quasar::PhoneticMatchAlignmentSpan::numWildcardWordMatches((_QWORD *)(v3 + 72 * (v30 - 1)), a2);
        if (v31 >= 1 && v33 <= 0)
        {
          v35 = v3 + 72 * v30;
          v36 = *(_QWORD *)(v35 + 24);
          if (v36 != *(_QWORD *)(v35 + 32))
          {
            do
            {
              if (*(char *)(v36 + 71) < 0)
              {
                if (*(_QWORD *)(v36 + 56))
                  break;
              }
              else if (*(_BYTE *)(v36 + 71))
              {
                break;
              }
              if (quasar::gLogLevel >= 5)
              {
                v72 = 0u;
                v73 = 0u;
                v70 = 0u;
                v71 = 0u;
                v68 = 0u;
                v69 = 0u;
                v66 = 0u;
                v67 = 0u;
                v64 = 0u;
                v65 = 0u;
                v62 = 0u;
                v63 = 0u;
                v60 = 0u;
                v61 = 0u;
                v58 = 0u;
                v59 = 0u;
                v57 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v57);
                v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v57, (uint64_t)"Moving token '", 14);
                v38 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v30 + 24);
                v39 = *(char *)(v38 + 23);
                if (v39 >= 0)
                  v40 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 72 * v30 + 24);
                else
                  v40 = *(_QWORD *)v38;
                if (v39 >= 0)
                  v41 = *(unsigned __int8 *)(v38 + 23);
                else
                  v41 = *(_QWORD *)(v38 + 8);
                v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' to preceeding span", 20);
                quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v57);
                v3 = *(_QWORD *)(a1 + 16);
              }
              v43 = *(const quasar::Token **)(v3 + 72 * v30 + 24);
              v44 = v3 + 72 * v32;
              v47 = *(std::string **)(v44 + 32);
              v45 = *(_QWORD *)(v44 + 40);
              v46 = (uint64_t *)(v44 + 32);
              if ((unint64_t)v47 >= v45)
              {
                p_size = std::vector<quasar::Token>::__push_back_slow_path<quasar::Token const&>((uint64_t *)(v3 + 72 * v32 + 24), v43);
              }
              else
              {
                quasar::Token::Token(v47, v43);
                p_size = (uint64_t)&v47[9].__r_.__value_.__l.__size_;
                *v46 = (uint64_t)&v47[9].__r_.__value_.__l.__size_;
              }
              *v46 = p_size;
              v49 = *(_QWORD *)(a1 + 16) + 72 * v30;
              v51 = *(__int128 **)(v49 + 32);
              v50 = (uint64_t *)(v49 + 32);
              std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((__int128 *)(*(v50 - 1) + 224), v51, *(v50 - 1));
              v53 = v52;
              for (i = *v50; i != v53; quasar::Token::~Token((void **)(i - 224)))
                ;
              *v50 = v53;
              v3 = *(_QWORD *)(a1 + 16);
              v55 = v3 + 72 * v30;
              v36 = *(_QWORD *)(v55 + 24);
            }
            while (v36 != *(_QWORD *)(v55 + 32));
            v2 = *(_QWORD *)(a1 + 24);
          }
        }
        v30 = (v30 + 1);
      }
      while (-1 - 0x71C71C71C71C71C7 * ((v2 - v3) >> 3) > v30);
    }
  }
}

void sub_1ADFD67CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _QWORD *v11;
  uint64_t v12;

  *v11 = v12;
  _Unwind_Resume(exception_object);
}

__int128 *std::vector<quasar::Token>::insert(uint64_t *a1, std::string *this, quasar::Token *a3)
{
  __int128 *v4;
  std::string *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  std::string *v23;
  char *v24;
  std::string *v25;
  std::string *v26;
  std::string *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *v31;
  char *v32;
  char *v33;
  std::string *v35;
  char *v36;
  char *v37;
  std::string *v38;
  std::string *v39;
  char *v40;
  uint64_t *v41;
  _QWORD v42[5];

  v4 = (__int128 *)this;
  v6 = (std::string *)a1[1];
  v8 = (uint64_t)(a1 + 2);
  v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    v9 = *a1;
    v10 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v6 - *a1) >> 5) + 1;
    if (v10 > 0x124924924924924)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = (uint64_t)this - v9;
    v12 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)this - v9) >> 5);
    v13 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v7 - v9) >> 5);
    if (2 * v13 > v10)
      v10 = 2 * v13;
    if (v13 >= 0x92492492492492)
      v14 = 0x124924924924924;
    else
      v14 = v10;
    v41 = a1 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v14);
    else
      v15 = 0;
    v16 = (std::string *)&v15[224 * v12];
    v37 = v15;
    v38 = v16;
    v39 = v16;
    v40 = &v15[224 * v14];
    if (v12 == v14)
    {
      if (v11 < 1)
      {
        if ((__int128 *)v9 == v4)
          v19 = 1;
        else
          v19 = 2 * v12;
        v42[4] = v8;
        v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>(v8, v19);
        v22 = v20;
        v23 = (std::string *)&v20[224 * (v19 >> 2)];
        v24 = &v20[224 * v21];
        v25 = v38;
        v26 = v38;
        v27 = v23;
        if (v39 != v38)
        {
          v36 = &v20[224 * v21];
          v28 = ((char *)v39 - (char *)v38) / 224;
          v35 = (std::string *)((char *)v23 + 224 * v28);
          v29 = 224 * v28;
          v30 = (uint64_t)&v20[224 * (v19 >> 2)];
          v31 = (__int128 *)v38;
          do
          {
            std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,quasar::Token>(v8, v30, v31);
            v30 += 224;
            v31 += 14;
            v29 -= 224;
          }
          while (v29);
          v26 = v39;
          v27 = v35;
          v24 = v36;
        }
        v32 = v37;
        v33 = v40;
        v37 = v22;
        v38 = v23;
        v42[0] = v32;
        v42[1] = v25;
        v39 = v27;
        v40 = v24;
        v42[2] = v26;
        v42[3] = v33;
        std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)v42);
        v16 = v39;
      }
      else
      {
        if (v12 >= -1)
          v17 = v12 + 1;
        else
          v17 = v12 + 2;
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,quasar::Token *,quasar::Token *,quasar::Token *,0>((__int128 *)v16, (__int128 *)v16, (uint64_t)v16 - 224 * (v17 >> 1));
        v16 = v18;
        v38 = (std::string *)((char *)v38 - 224 * (v17 >> 1));
        v39 = v18;
      }
    }
    quasar::Token::Token(v16, a3);
    v39 = (std::string *)((char *)v39 + 224);
    v4 = (__int128 *)std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v37, v4);
    std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v37);
  }
  else if (this == v6)
  {
    quasar::Token::Token(this, a3);
    a1[1] = (uint64_t)(v4 + 14);
  }
  else
  {
    std::vector<quasar::Token>::__move_range((uint64_t)a1, (__int128 *)this, (unint64_t)v6, (uint64_t)&this[9].__r_.__value_.__l.__size_);
    if (v4 <= (__int128 *)a3)
      a3 = (quasar::Token *)((char *)a3 + 224 * (a1[1] > (unint64_t)a3));
    quasar::Token::operator=((uint64_t)v4, (uint64_t)a3);
  }
  return v4;
}

void sub_1ADFD6AA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)(v14 + 8) = v13;
  _Unwind_Resume(exception_object);
}

std::string *quasar::ItnOverride::ItnOverride(std::string *this, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v8 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v8;
  }
  v9 = this + 2;
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v10 = *a4;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1ADFD6B78(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<quasar::ItnOverride>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>,std::reverse_iterator<quasar::ItnOverride*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  __int128 v17;

  v7 = a7;
  *(_QWORD *)&v17 = a6;
  *((_QWORD *)&v17 + 1) = a7;
  v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v10;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v11 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v11;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v12 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v12;
      v9 -= 72;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 72;
      a3 -= 72;
    }
    while (a3 != a5);
    *((_QWORD *)&v17 + 1) = v9;
  }
  v15 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v14);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::ItnOverride>,std::reverse_iterator<quasar::ItnOverride*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,std::string,std::string>>,std::reverse_iterator<std::tuple<std::string,std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

uint64_t kaldi::Gcd<int>(uint64_t result, int a2)
{
  _QWORD v2[34];

  if ((_DWORD)result && a2)
  {
    while (1)
    {
      LODWORD(result) = (int)result % a2;
      if (!(_DWORD)result)
        break;
      a2 %= (int)result;
      if (!a2)
        goto LABEL_11;
    }
    LODWORD(result) = a2;
  }
  else
  {
    if (!(a2 | result))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "Undefined GCD since m = 0, n = 0.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
    }
    if (!(_DWORD)result)
      LODWORD(result) = a2;
  }
LABEL_11:
  if ((int)result >= 0)
    return result;
  else
    return -(int)result;
}

float kaldi::VecVec<float>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<float>(a1 + 8, (const float **)(a2 + 8));
}

_QWORD *kaldi::CuVector<float>::~CuVector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D341C8;
  v3 = a1 + 1;
  v2 = (void *)a1[1];
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  return a1;
}

_QWORD *kaldi::CuVector<double>::~CuVector(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;

  *a1 = &unk_1E5D341A0;
  v3 = a1 + 1;
  v2 = (void *)a1[1];
  if (v2)
    free(v2);
  *v3 = 0;
  v3[1] = 0;
  return a1;
}

float kaldi::VecVec<float,signed char>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<signed char>((float32x4_t **)(a1 + 8), a2);
}

float kaldi::VecVec<float,short>(uint64_t a1, uint64_t a2)
{
  return kaldi::VecVec<short>((_OWORD **)(a1 + 8), a2);
}

void *kaldi::CuVectorBase<float>::CopyFromVec<float>(void *result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8))
    return kaldi::VectorBase<float>::CopyFromVec((uint64_t)result + 8, (const void **)a2);
  return result;
}

void kaldi::CuVectorBase<float>::CopyFromVec<double>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = &unk_1E5D341A0;
    v7 = 0;
    v8 = 0;
    v9 = v5;
    kaldi::CuVector<double>::Resize((uint64_t)&v6, v3, 1);
    if (*(_DWORD *)(a2 + 8))
    {
      kaldi::VectorBase<double>::CopyFromVec((uint64_t)&v7, (const void **)a2);
      if ((_DWORD)v8)
        kaldi::VectorBase<float>::CopyFromVec<double>(a1 + 8, (double **)&v7);
    }
    v6 = &unk_1E5D341A0;
    if (v7)
      free(v7);
  }
}

void sub_1ADFD6F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

const void **kaldi::CuVectorBase<float>::CopyToVec<float>(const void **result, uint64_t a2)
{
  if (*((_DWORD *)result + 4))
    return (const void **)kaldi::VectorBase<float>::CopyFromVec(a2, result + 1);
  return result;
}

void kaldi::CuVectorBase<float>::AddVec(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v6;

  v6 = a1 + 8;
  if (a4 != 1.0)
    kaldi::VectorBase<float>::Scale(a1 + 8, a4);
  kaldi::VectorBase<float>::AddVec<float>(v6, (const float **)(a2 + 8), a3);
}

_QWORD *kaldi::CuVectorBase<float>::CopyFromVec(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(int *)(a2 + 16);
  if ((_DWORD)v2)
  {
    result = (_QWORD *)result[1];
    if (result)
      return memcpy(result, *(const void **)(a2 + 8), 4 * v2);
  }
  return result;
}

float kaldi::CuVectorBase<float>::ReverseCopyFromVec(uint64_t a1, uint64_t a2)
{
  float result;

  if (*(_DWORD *)(a2 + 16))
    return kaldi::VectorBase<float>::ReverseCopyFromVec(a1 + 8, (uint64_t *)(a2 + 8));
  return result;
}

void *kaldi::CuVectorBase<float>::CopyRowsFromMat(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::CopyRowsFromMat((void **)(a1 + 8), a2 + 8);
}

void kaldi::CuVectorBase<float>::SetZero(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 16))
  {
    if (*(_QWORD *)(a1 + 8))
      kaldi::VectorBase<float>::SetZero(a1 + 8);
  }
}

uint64_t kaldi::CuVectorBase<float>::Set(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Set(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::Add(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::Add(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::Scale(uint64_t a1, float a2)
{
  kaldi::VectorBase<float>::Scale(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::AddRowSumMat(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8;
  void *v9[3];

  v8 = *(unsigned int *)(a2 + 20);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, v8, 1);
  kaldi::VectorBase<float>::Set((uint64_t)v9, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasTrans, (uint64_t)v9, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
}

void sub_1ADFD7098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddColSumMat(uint64_t a1, uint64_t a2, float a3, float a4)
{
  uint64_t v8;
  void *v9[3];

  v8 = *(unsigned int *)(a2 + 16);
  memset(v9, 0, sizeof(v9));
  kaldi::Vector<float>::Resize(v9, v8, 1);
  kaldi::VectorBase<float>::Set((uint64_t)v9, 1.0);
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), CblasNoTrans, (uint64_t)v9, a3, a4);
  kaldi::Vector<float>::Destroy((uint64_t)v9);
}

void sub_1ADFD7134(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CuVectorBase<float>::InvertElements(uint64_t a1)
{
  return kaldi::VectorBase<float>::InvertElements(a1 + 8);
}

float kaldi::CuVectorBase<float>::ApplySoftMax(uint64_t a1)
{
  return kaldi::VectorBase<float>::ApplySoftMax(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyExp(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyExp(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyLog(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyLog(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::ApplyFloor(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyFloor(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::ApplyCeiling(uint64_t a1, float a2)
{
  return kaldi::VectorBase<float>::ApplyCeiling(a1 + 8, a2);
}

void kaldi::CuVectorBase<float>::ApplyMaxNorm(uint64_t a1, float a2)
{
  float **v4;
  float v5;
  void *v6;
  void *v7[3];

  kaldi::CuVector<float>::CuVector(&v6, a1);
  v4 = (float **)(a1 + 8);
  kaldi::VectorBase<float>::MulElements((uint64_t)v7, v4);
  v5 = sqrtf(kaldi::VectorBase<float>::Sum((uint64_t)v7));
  if (v5 > a2)
    kaldi::VectorBase<float>::Scale((uint64_t)v4, a2 / v5);
  v6 = &unk_1E5D341C8;
  if (v7[0])
    free(v7[0]);
}

void sub_1ADFD7210(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)
    free(a10);
  _Unwind_Resume(exception_object);
}

float kaldi::CuVectorBase<float>::MulElements(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::MulElements(a1 + 8, (float **)(a2 + 8));
}

float kaldi::CuVectorBase<float>::Sum(uint64_t a1)
{
  return kaldi::VectorBase<float>::Sum(a1 + 8);
}

void kaldi::CuVectorBase<float>::ApplyPow(uint64_t a1, float a2)
{
  kaldi::VectorBase<float>::ApplyPow(a1 + 8, a2);
}

uint64_t kaldi::CuVectorBase<float>::CountZeros(uint64_t a1)
{
  return kaldi::VectorBase<float>::CountZeros(a1 + 8);
}

uint64_t kaldi::CuVectorBase<float>::SetRandn(uint64_t result)
{
  _OWORD v1[2];
  int v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  char v6;
  uint64_t v7;

  if (*(_DWORD *)(result + 16))
  {
    v4 = 0u;
    v5 = 0u;
    memset(v1, 0, sizeof(v1));
    v2 = 0;
    v3 = &unk_1E5D34170;
    v6 = 0;
    v7 = 0;
    kaldi::CuRand<float>::RandGaussian((uint64_t)v1, result);
    return kaldi::CuRand<float>::~CuRand((uint64_t)v1);
  }
  return result;
}

void sub_1ADFD72C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::CuRand<float>::~CuRand((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::Tanh(uint64_t a1, uint64_t a2)
{
  kaldi::VectorBase<float>::Tanh(a1 + 8, (const float **)(a2 + 8));
}

void kaldi::CuVectorBase<float>::Sigmoid(uint64_t a1, uint64_t a2)
{
  kaldi::VectorBase<float>::Sigmoid(a1 + 8, (const void **)(a2 + 8));
}

void kaldi::CuVectorBase<float>::ApplyTanh(uint64_t a1)
{
  kaldi::VectorBase<float>::ApplyTanh(a1 + 8);
}

float kaldi::CuVectorBase<float>::CopyColFromMat(uint64_t a1, uint64_t a2, int a3)
{
  return kaldi::VectorBase<float>::CopyColFromMat<float>((uint64_t *)(a1 + 8), a2 + 8, a3);
}

void kaldi::CuVectorBase<float>::AddMatVec(uint64_t a1, uint64_t a2, CBLAS_TRANSPOSE a3, uint64_t a4, float a5, float a6)
{
  kaldi::VectorBase<float>::AddMatVec(a1 + 8, (const float **)(a2 + 8), a3, a4 + 8, a5, a6);
}

void kaldi::CuVectorBase<float>::AddVecVec(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  kaldi::VectorBase<float>::AddVecVec(a1 + 8, (const float **)(a2 + 8), (const float **)(a3 + 8), a4, a5);
}

void kaldi::CuVectorBase<float>::AddDiagMat2(uint64_t a1, uint64_t a2, int a3, float a4, float a5)
{
  kaldi::VectorBase<float>::AddDiagMat2(a1 + 8, (const float **)(a2 + 8), a3, a4, a5);
}

void kaldi::CuVectorBase<float>::AddDiagMatMat(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, float a6, float a7)
{
  kaldi::VectorBase<float>::AddDiagMatMat(a1 + 8, (const float **)(a2 + 8), a3, (const float **)(a4 + 8), a5, a6, a7);
}

uint64_t kaldi::CuVectorBase<float>::ReplaceValue(uint64_t a1, float a2, float a3)
{
  return kaldi::VectorBase<float>::ReplaceValue(a1 + 8, a2, a3);
}

float kaldi::CuVectorBase<float>::DivElements(uint64_t a1, uint64_t a2)
{
  return kaldi::VectorBase<float>::DivElements(a1 + 8, (float **)(a2 + 8));
}

uint64_t kaldi::CuVectorBase<float>::ElementsEqual(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int *v6;
  float *v7;
  int v8;
  int v9;
  int v10;
  float v11;

  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
    v4 = (int)v3 < 1;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *(int **)(a2 + 8);
    v6 = *(int **)(a3 + 8);
    v7 = *(float **)(result + 8);
    do
    {
      v9 = *v5++;
      v8 = v9;
      v10 = *v6++;
      if (v8 == v10)
        v11 = 1.0;
      else
        v11 = 0.0;
      *v7++ = v11;
      --v3;
    }
    while (v3);
  }
  return result;
}

void kaldi::CuVectorBase<float>::Write(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v6;
  void *v7[3];

  v6 = *(unsigned int *)(a1 + 16);
  memset(v7, 0, sizeof(v7));
  kaldi::Vector<float>::Resize(v7, v6, 1);
  if (*(_DWORD *)(a1 + 16))
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)v7, (const void **)(a1 + 8));
  kaldi::VectorBase<float>::Write((uint64_t)v7, a2, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v7);
}

void sub_1ADFD7428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<float>::Resize(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 == 3)
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if ((_DWORD)a2 && !a3 && *(_QWORD *)(a1 + 8))
      kaldi::VectorBase<float>::SetZero(a1 + 8);
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v6 = (_QWORD *)(a1 + 8);
      v5 = *(void **)(a1 + 8);
      if (v5)
        free(v5);
      *v6 = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((_DWORD)a2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      kaldi::Vector<float>::Resize(&v9, a2, 0);
      v7 = v9;
      v9 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v7;
      v8 = v10;
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;
      kaldi::Vector<float>::Destroy((uint64_t)&v9);
    }
  }
}

_QWORD *kaldi::CuVector<float>::CuVector(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;

  a1[1] = 0;
  v4 = (void **)(a1 + 1);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = &unk_1E5D341C8;
  a1[3] = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize((uint64_t)a1, *(unsigned int *)(a2 + 16), 1);
  v5 = *(int *)(a2 + 16);
  if ((_DWORD)v5 && *v4)
    memcpy(*v4, *(const void **)(a2 + 8), 4 * v5);
  return a1;
}

_QWORD *kaldi::CuVector<float>::CuVector(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = &unk_1E5D341C8;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = a3;
  kaldi::CuVector<float>::Resize((uint64_t)a1, *(unsigned int *)(a2 + 8), 1);
  if (*(_DWORD *)(a2 + 8))
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)(a1 + 1), (const void **)a2);
  return a1;
}

void kaldi::CuVector<float>::Destroy(uint64_t a1)
{
  void *v1;
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 8);
  v1 = *(void **)(a1 + 8);
  if (v1)
    free(v1);
  *v2 = 0;
  v2[1] = 0;
}

void kaldi::CuVector<float>::~CuVector(_QWORD *a1)
{
  void *v1;
  _QWORD *v2;

  *a1 = &unk_1E5D341C8;
  v2 = a1 + 1;
  v1 = (void *)a1[1];
  if (v1)
    free(v1);
  *v2 = 0;
  v2[1] = 0;
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::CuVector<float>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;

  if (!*(_QWORD *)(a1 + 24))
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  kaldi::CuVector<float>::Resize(a1, *(unsigned int *)(a2 + 16), 1);
  v4 = *(int *)(a2 + 16);
  if ((_DWORD)v4)
  {
    v5 = *(void **)(a1 + 8);
    if (v5)
      memcpy(v5, *(const void **)(a2 + 8), 4 * v4);
  }
  return a1;
}

double kaldi::CuVector<float>::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  kaldi::Vector<float>::Read((uint64_t)&v7, a2, a3, 0);
  v4 = *(void **)(a1 + 8);
  if (v4)
    free(v4);
  *(_QWORD *)(a1 + 8) = v7;
  v5 = v8;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  kaldi::Vector<float>::Destroy((uint64_t)&v7);
  return result;
}

void sub_1ADFD773C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVector<double>::Resize(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;

  if (a3 == 3)
    a3 = *(_DWORD *)(a1 + 16) >= (int)a2;
  if (*(_DWORD *)(a1 + 20) >= (int)a2)
  {
    *(_DWORD *)(a1 + 16) = a2;
    if ((_DWORD)a2 && !a3 && *(_QWORD *)(a1 + 8))
      kaldi::VectorBase<double>::SetZero(a1 + 8);
  }
  else
  {
    if (*(_DWORD *)(a1 + 16))
    {
      v6 = (_QWORD *)(a1 + 8);
      v5 = *(void **)(a1 + 8);
      if (v5)
        free(v5);
      *v6 = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if ((_DWORD)a2)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      kaldi::Vector<double>::Resize(&v9, a2, 0);
      v7 = v9;
      v9 = *(void **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v7;
      v8 = v10;
      v10 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = v8;
      kaldi::Vector<float>::Destroy((uint64_t)&v9);
    }
  }
}

void kaldi::CuVector<double>::~CuVector(_QWORD *a1)
{
  void *v1;
  _QWORD *v2;

  *a1 = &unk_1E5D341A0;
  v2 = a1 + 1;
  v1 = (void *)a1[1];
  if (v1)
    free(v1);
  *v2 = 0;
  v2[1] = 0;
  JUMPOUT(0x1AF44D190);
}

double kaldi::CuVector<double>::Read(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  kaldi::Vector<double>::Read((uint64_t)&v7, a2, a3, 0);
  v4 = *(void **)(a1 + 8);
  if (v4)
    free(v4);
  *(_QWORD *)(a1 + 8) = v7;
  v5 = v8;
  v7 = 0;
  v8 = 0;
  *(_QWORD *)(a1 + 16) = v5;
  kaldi::Vector<float>::Destroy((uint64_t)&v7);
  return result;
}

void sub_1ADFD78F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::CuVectorBase<float>::AddMatVec<signed char>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  kaldi::VectorBase<float>::AddMatVec<signed char>(a1 + 8, a2 + 8, a5, a6, a3, a4);
}

void kaldi::CuVectorBase<float>::AddMatVec<short>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, float a6)
{
  kaldi::VectorBase<float>::AddMatVec<short>(a1 + 8, a2 + 8, a5, a6, a3, a4);
}

void kaldi::MinimumBayesRisk::MbrDecode(kaldi::MinimumBayesRisk *this)
{
  uint64_t v2;
  std::vector<unsigned int> *v3;
  char **v4;
  void **v5;
  std::vector<unsigned int>::pointer begin;
  unint64_t v7;
  double v8;
  uint64_t *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float *v14;
  double v15;
  unsigned int v16;
  int v17;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  int v39;
  unint64_t v40;
  char *v41;
  _DWORD *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  int v50;
  _QWORD *v51;
  char *v52;
  char *v53;
  _QWORD v54[36];

  v2 = 0;
  v3 = (std::vector<unsigned int> *)((char *)this + 88);
  v4 = (char **)((char *)this + 256);
  v5 = (void **)((char *)this + 280);
  v53 = (char *)this + 272;
  v52 = (char *)this + 296;
  while (1)
  {
    kaldi::MinimumBayesRisk::NormalizeEps((uint64_t)this, v3);
    kaldi::MinimumBayesRisk::AccStats(this);
    *((_QWORD *)this + 33) = *((_QWORD *)this + 32);
    *((_QWORD *)this + 36) = *((_QWORD *)this + 35);
    begin = (std::vector<unsigned int>::pointer)*((_QWORD *)this + 11);
    if (*((std::vector<unsigned int>::pointer *)this + 12) == begin)
    {
      v8 = 0.0;
    }
    else
    {
      v7 = 0;
      v8 = 0.0;
      do
      {
        if (*(_BYTE *)this)
        {
          v9 = (uint64_t *)(*((_QWORD *)this + 15) + 24 * v7);
          v10 = begin[v7];
          v11 = *v9;
          v12 = v9[1] - *v9;
          if (v12)
          {
            v13 = v12 >> 3;
            if (v13 <= 1)
              v13 = 1;
            v14 = (float *)(v11 + 4);
            v15 = 0.0;
            do
            {
              if (*((_DWORD *)v14 - 1) == v10)
                v15 = *v14;
              v14 += 2;
              --v13;
            }
            while (v13);
          }
          else
          {
            v15 = 0.0;
          }
          v16 = *(_DWORD *)v11;
          v8 = v8 + v15 - *(float *)(v11 + 4);
          v17 = *((_DWORD *)this + 2);
          if (v16 == v17 || v10 == v17 || v10 == v16)
          {
            v16 = begin[v7];
          }
          else
          {
            if (kaldi::g_kaldi_verbose_level >= 2)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54, 2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Changing word ", 14);
              v20 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" to ", 4);
              std::ostream::operator<<();
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54);
              begin = v3->__begin_;
            }
            begin[v7] = v16;
          }
        }
        else
        {
          v16 = begin[v7];
        }
        if (v16 != *((_DWORD *)this + 2))
        {
          v21 = *((_QWORD *)this + 29);
          v23 = (_QWORD *)*((_QWORD *)this + 33);
          v22 = *((_QWORD *)this + 34);
          if ((unint64_t)v23 >= v22)
          {
            v25 = ((char *)v23 - *v4) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = v22 - (_QWORD)*v4;
            v27 = v26 >> 2;
            if (v26 >> 2 <= (unint64_t)(v25 + 1))
              v27 = v25 + 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
              v28 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v28 = v27;
            if (v28)
              v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v53, v28);
            else
              v29 = 0;
            v30 = &v29[8 * v25];
            *(_QWORD *)v30 = *(_QWORD *)(v21 + 8 * v7);
            v24 = v30 + 8;
            v32 = (char *)*((_QWORD *)this + 32);
            v31 = (char *)*((_QWORD *)this + 33);
            if (v31 != v32)
            {
              do
              {
                v33 = *((_QWORD *)v31 - 1);
                v31 -= 8;
                *((_QWORD *)v30 - 1) = v33;
                v30 -= 8;
              }
              while (v31 != v32);
              v31 = *v4;
            }
            *((_QWORD *)this + 32) = v30;
            *((_QWORD *)this + 33) = v24;
            *((_QWORD *)this + 34) = &v29[8 * v28];
            if (v31)
              operator delete(v31);
          }
          else
          {
            *v23 = *(_QWORD *)(v21 + 8 * v7);
            v24 = v23 + 1;
          }
          *((_QWORD *)this + 33) = v24;
          v34 = (uint64_t *)(*((_QWORD *)this + 15) + 24 * v7);
          v35 = *v34;
          v36 = v34[1] - *v34;
          if (v36)
          {
            v37 = v36 >> 3;
            if ((unint64_t)(v36 >> 3) <= 1)
              v37 = 1;
            v38 = (int *)(v35 + 4);
            v39 = 0;
            do
            {
              if (*(v38 - 1) == v3->__begin_[v7])
                v39 = *v38;
              v38 += 2;
              --v37;
            }
            while (v37);
          }
          else
          {
            v39 = 0;
          }
          v41 = (char *)*((_QWORD *)this + 36);
          v40 = *((_QWORD *)this + 37);
          if ((unint64_t)v41 >= v40)
          {
            v43 = (char *)*v5;
            v44 = (v41 - (_BYTE *)*v5) >> 2;
            v45 = v44 + 1;
            if ((unint64_t)(v44 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v46 = v40 - (_QWORD)v43;
            if (v46 >> 1 > v45)
              v45 = v46 >> 1;
            if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
              v47 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v47 = v45;
            if (v47)
            {
              v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v52, v47);
              v43 = (char *)*((_QWORD *)this + 35);
              v41 = (char *)*((_QWORD *)this + 36);
            }
            else
            {
              v48 = 0;
            }
            v49 = &v48[4 * v44];
            *(_DWORD *)v49 = v39;
            v42 = v49 + 4;
            while (v41 != v43)
            {
              v50 = *((_DWORD *)v41 - 1);
              v41 -= 4;
              *((_DWORD *)v49 - 1) = v50;
              v49 -= 4;
            }
            *((_QWORD *)this + 35) = v49;
            *((_QWORD *)this + 36) = v42;
            *((_QWORD *)this + 37) = &v48[4 * v47];
            if (v43)
              operator delete(v43);
          }
          else
          {
            *(_DWORD *)v41 = v39;
            v42 = v41 + 4;
          }
          *((_QWORD *)this + 36) = v42;
          begin = (std::vector<unsigned int>::pointer)*((_QWORD *)this + 11);
        }
        ++v7;
      }
      while (v7 < (uint64_t)(*((_QWORD *)this + 12) - (_QWORD)begin) >> 2);
    }
    if (kaldi::g_kaldi_verbose_level > 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54, 2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Iter = ", 7);
      v51 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)", delta-Q = ", 12);
      std::ostream::operator<<();
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v54);
    }
    if (v8 == 0.0)
      break;
    if (++v2 == 102)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"Iterating too many times in MbrDecode; stopping.",
          48);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v54);
      }
      break;
    }
  }
  kaldi::MinimumBayesRisk::RemoveEps((uint64_t)this, (uint64_t)v3);
  kaldi::MinimumBayesRisk::RemoveEpsGamma(this);
  kaldi::MinimumBayesRisk::RemoveEpsGammaArcs(this);
}

void sub_1ADFD7E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::MinimumBayesRisk::NormalizeEps(uint64_t a1, std::vector<unsigned int> *a2)
{
  std::vector<unsigned int>::pointer begin;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;

  kaldi::MinimumBayesRisk::RemoveEps(a1, (uint64_t)a2);
  std::vector<int>::resize(a2, (((char *)a2->__end_ - (char *)a2->__begin_) >> 1) | 1);
  begin = a2->__begin_;
  v5 = (char *)a2->__end_ - (char *)a2->__begin_;
  if ((int)(v5 >> 2) >= 2)
  {
    v6 = v5 >> 3;
    v7 = ((v5 >> 3) & 0x7FFFFFFF) + 1;
    v8 = 2 * v6 - 1;
    do
    {
      begin[v8] = begin[(v7 - 2)];
      begin[v8 + 1] = *(_DWORD *)(a1 + 8);
      --v7;
      v8 -= 2;
    }
    while (v7 > 1);
  }
  *begin = *(_DWORD *)(a1 + 8);
}

void kaldi::MinimumBayesRisk::AccStats(kaldi::MinimumBayesRisk *this)
{
  kaldi::MinimumBayesRisk *v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  double v5;
  double v6;
  int v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  float v24;
  double v25;
  double *v26;
  uint64_t v27;
  int v28;
  double *v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  double v35;
  double v36;
  double v37;
  char v38;
  double v39;
  char v40;
  double v41;
  double *v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  long double v46;
  uint64_t v47;
  int v48;
  double v49;
  int v50;
  int v51;
  kaldi::MinimumBayesRisk *v52;
  uint64_t v53;
  uint64_t **v54;
  char v55;
  uint64_t **v56;
  double v57;
  float v58;
  double v59;
  char *v60;
  double v61;
  double v62;
  uint64_t v63;
  uint64_t **v64;
  char v65;
  uint64_t **v66;
  float v67;
  uint64_t v68;
  uint64_t *v69;
  char v70;
  uint64_t *v71;
  __int128 v72;
  uint64_t v73;
  char *v74;
  double v75;
  long double v76;
  uint64_t v77;
  int v78;
  double v79;
  double *v80;
  uint64_t v81;
  double v82;
  uint64_t v83;
  uint64_t **v84;
  char v85;
  double v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  double v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  BOOL v97;
  _QWORD *v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _DWORD *v104;
  _DWORD *v105;
  uint64_t v106;
  double **v107;
  double *v108;
  uint64_t v109;
  unint64_t **v110;
  unsigned int v111;
  unint64_t v112;
  unint64_t *v113;
  void **v114;
  unint64_t v115;
  _QWORD *v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  char *v122;
  unint64_t *v123;
  char *v124;
  unint64_t *v125;
  unint64_t v126;
  double *v127;
  double *v128;
  _QWORD *v129;
  int *v130;
  int *v131;
  int *v132;
  uint64_t **v133;
  uint64_t **v134;
  int *v135;
  int *v136;
  _QWORD *v137;
  _QWORD *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t *v143;
  unint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  int *v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD **v155;
  uint64_t i;
  uint64_t v157;
  _QWORD *v158;
  _QWORD *v159;
  uint64_t *v160;
  uint64_t v161;
  float *v162;
  unint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  unint64_t v167;
  float v168;
  float *v169;
  float v170;
  uint64_t v172;
  float *v173;
  float v174;
  float v175;
  float *v176;
  float v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  void *v183;
  uint64_t v184;
  _DWORD *v185;
  _DWORD *v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  kaldi::MinimumBayesRisk *v190;
  int v191;
  uint64_t *v192;
  uint64_t v193;
  _QWORD *v194;
  uint64_t v195;
  unint64_t v196[2];
  void *v197;
  void *v198;
  uint64_t v199;
  int v200;
  unint64_t *v201;
  uint64_t v202;
  void *v203;
  void *v204;
  uint64_t v205;
  int v206;
  __int128 v207;
  float v208;
  _BYTE *v209;
  uint64_t v210;
  void *v211;
  _BYTE *v212;
  uint64_t v213;
  int v214;
  __int128 v215;
  void *v216;
  _BYTE *v217;
  uint64_t v218;
  void *v219;
  _BYTE *v220;
  uint64_t v221;
  int v222;
  _DWORD *v223;
  __int128 v224;
  void *v225;
  _BYTE *v226;
  uint64_t v227;
  void *__p;
  void *v229;
  uint64_t v230;
  int v231;
  void *v232;
  char v233;
  uint64_t v234;
  void *v235[3];
  void *v236[3];
  _QWORD v237[3];
  _QWORD v238[3];
  _QWORD v239[3];
  std::vector<char> v240;
  void *v241[3];
  _QWORD v242[2];
  int v243;
  double *v244[3];
  uint64_t v245[2];
  int v246;
  void *v247[3];
  int v248;

  v1 = this;
  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 6) - *((_QWORD *)this + 5)) >> 3);
  v3 = *((_QWORD *)this + 12) - *((_QWORD *)this + 11);
  memset(v247, 0, sizeof(v247));
  kaldi::Vector<double>::Resize(v247, v2, 0);
  v187 = v3 >> 2;
  v4 = (v3 >> 2) + 1;
  kaldi::Matrix<double>::Matrix((uint64_t)v245, v2, v4, 0, 0);
  memset(v244, 0, sizeof(v244));
  kaldi::Vector<double>::Resize((void **)v244, v4, 0);
  kaldi::Matrix<double>::Matrix((uint64_t)v242, v2, v4, 0, 0);
  memset(v241, 0, sizeof(v241));
  kaldi::Vector<double>::Resize(v241, v4, 0);
  std::vector<char>::vector(&v240, (int)v4);
  std::vector<std::map<int,double>>::vector(v239, (int)v4);
  std::vector<std::map<int,std::set<int>>>::vector(v238, (int)v4);
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::vector(v237, (int)v4);
  memset(v236, 0, sizeof(v236));
  kaldi::Vector<double>::Resize(v236, v4, 0);
  memset(v235, 0, sizeof(v235));
  kaldi::Vector<double>::Resize(v235, v4, 0);
  v5 = kaldi::MinimumBayesRisk::EditDistance((uint64_t)v1, (int)v2 - 1, v3 >> 2, (uint64_t *)v247, v245, v244);
  v6 = *((double *)v1 + 14);
  if (v6 != 0.0)
  {
    v7 = kaldi::g_kaldi_verbose_level;
    v8 = v5 <= v6 || kaldi::g_kaldi_verbose_level < -1;
    if (v8)
      goto LABEL_8;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"Edit distance increased: ", 25);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" > ", 3);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
  }
  v7 = kaldi::g_kaldi_verbose_level;
LABEL_8:
  v180 = (v3 >> 2) + 1;
  *((double *)v1 + 14) = v5;
  if (v7 >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v223, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"L = ", 4);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v223);
  }
  *(_QWORD *)(v242[0] + 8 * v243 * ((int)v2 - 1) + 8 * (int)v187) = 0x3FF0000000000000;
  v179 = v3;
  v10 = (v3 >> 2);
  v11 = v3 >> 2;
  v190 = v1;
  if ((int)v2 <= 2)
    goto LABEL_77;
  v12 = (int)v2;
  v13 = *((_QWORD *)v1 + 5);
  v14 = v180 - 1;
  v191 = v187 - 1;
  v15 = 8 * v10;
  v193 = 8 * v12 - 8;
  while (2)
  {
    v16 = v12 - 1;
    v17 = *(_QWORD *)(v13 + 24 * (v12 - 1));
    if (*(_QWORD *)(v13 + 24 * (v12 - 1) + 8) == v17)
      goto LABEL_75;
    v181 = v12;
    v18 = 0;
    do
    {
      v189 = v18;
      v19 = *(_DWORD *)(v17 + 4 * v18);
      v20 = *((_QWORD *)v1 + 2) + 72 * v19;
      v21 = *(_OWORD *)v20;
      LODWORD(v216) = *(_DWORD *)(v20 + 16);
      v215 = v21;
      v217 = *(_BYTE **)(v20 + 24);
      v218 = *(_QWORD *)(v20 + 32);
      v220 = 0;
      v221 = 0;
      v219 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v219, *(const void **)(v20 + 40), *(_QWORD *)(v20 + 48), (uint64_t)(*(_QWORD *)(v20 + 48) - *(_QWORD *)(v20 + 40)) >> 2);
      v222 = *(_DWORD *)(v20 + 64);
      v22 = *(int *)(v20 + 4);
      v23 = *(_DWORD *)v20;
      v24 = *(float *)(v20 + 12);
      if (*(_DWORD *)v20 == *((_DWORD *)v1 + 2))
        v25 = 0.0;
      else
        v25 = 1.0;
      v26 = v244[0];
      *v244[0] = *(double *)(v245[0] + 8 * v246 * (int)v22) + v25 + 0.00000999999975;
      if (v11 >= 1)
      {
        v27 = 0;
        do
        {
          v28 = *(_DWORD *)(*((_QWORD *)v1 + 11) + 4 * v27);
          v29 = (double *)(v245[0] + 8 * v246 * (int)v22 + 8 * v27);
          if (v23 == v28)
            v30 = 0.0;
          else
            v30 = 1.0;
          v31 = v29[1];
          v32 = v30 + *v29;
          v33 = *((_DWORD *)v1 + 2);
          if (v23 == v33)
            v34 = 0.0;
          else
            v34 = 1.0;
          v35 = v31 + v34 + 0.00000999999975;
          if (v33 == v28)
            v36 = 0.0;
          else
            v36 = 1.0;
          v37 = v36 + v26[v27];
          if (v35 <= v37)
            v38 = 2;
          else
            v38 = 3;
          if (v35 <= v37)
            v39 = v35;
          else
            v39 = v36 + v26[v27];
          if (v32 <= v37)
            v40 = 1;
          else
            v40 = 3;
          if (v32 <= v37)
            v37 = v32;
          if (v32 > v35)
          {
            v41 = v39;
          }
          else
          {
            v38 = v40;
            v41 = v37;
          }
          v240.__begin_[v27 + 1] = v38;
          v26 = v244[0];
          v244[0][++v27] = v41;
        }
        while (v14 != v27);
      }
      kaldi::VectorBase<double>::SetZero((uint64_t)v241);
      v42 = (double *)v241[0];
      v43 = v24;
      if (v11 >= 1)
      {
        v44 = 0;
        v45 = 8 * (2 * v10 + v187);
        do
        {
          v46 = exp(*((double *)v247[0] + v22) + v43 - *((double *)v247[0] + v16));
          v47 = v242[0];
          v48 = v243;
          v49 = v42[(unint64_t)v15 / 8 + v44] + v46 * *(double *)(v242[0] + v193 * v243 + v15 + 8 * v44);
          v42[(unint64_t)v15 / 8 + v44] = v49;
          v50 = v240.__begin_[v10 + v44];
          switch(v50)
          {
            case 1:
              *(double *)(v47 + 8 * v48 * (int)v22 + 8 * (v191 + v44)) = v49
                                                                                         + *(double *)(v47 + 8 * v48 * (int)v22 + 8 * (v191 + v44));
              v62 = v42[(unint64_t)v15 / 8 + v44];
              v63 = v238[0];
              LODWORD(v196[0]) = v23;
              v248 = v19;
              if (v62 != 0.0)
              {
                LODWORD(v223) = v23;
                *(double *)&v224 = v62;
                v64 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v239[0] + v45), (int *)&v223, &v223);
                if (!v65)
                  *((double *)v64 + 5) = v62 + *((double *)v64 + 5);
                v201 = v196;
                v66 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v63 + v45), (int *)v196, (uint64_t)&std::piecewise_construct, (_DWORD **)&v201);
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(v66 + 5, &v248, &v248);
                v42 = (double *)v241[0];
              }
              v67 = v42[(unint64_t)v15 / 8 + v44];
              *(float *)&v216 = v67;
              v207 = v215;
              v208 = v67;
              v209 = v217;
              v210 = v218;
              v212 = 0;
              v213 = 0;
              v211 = 0;
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v211, v219, (uint64_t)v220, (v220 - (_BYTE *)v219) >> 2);
              v214 = v222;
              if (v208 != 0.0)
              {
                v68 = v237[0];
                LODWORD(v223) = v23;
                v224 = v207;
                *(float *)&v225 = v208;
                v226 = v209;
                v227 = v210;
                v229 = 0;
                v230 = 0;
                __p = 0;
                std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v211, (uint64_t)v212, (v212 - (_BYTE *)v211) >> 2);
                v231 = v214;
                v69 = std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__emplace_unique_key_args<int,std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(v68 + v45, (int *)&v223, (uint64_t)&v223);
                if (!v70)
                {
                  v71 = v69;
                  if (*((float *)v69 + 14) < v208)
                  {
                    v72 = v207;
                    v69[9] = v210;
                    *(_OWORD *)(v69 + 5) = v72;
                    *((float *)v69 + 14) = v208;
                    v69[8] = (uint64_t)v209;
                    if (v69 + 9 != &v210)
                      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)v69 + 80, (char *)v211, (uint64_t)v212, (v212 - (_BYTE *)v211) >> 2);
                    *((_DWORD *)v71 + 26) = v214;
                  }
                }
                if (__p)
                {
                  v229 = __p;
                  operator delete(__p);
                }
              }
              if (v211)
              {
                v212 = v211;
                operator delete(v211);
              }
              v1 = v190;
              v73 = *((_QWORD *)v190 + 8);
              v42 = (double *)v241[0];
              v74 = (char *)v241[0] + v15;
              *(double *)((char *)v236[0] + 8 * v44 + v15) = *(double *)((char *)v236[0] + 8 * v44 + v15)
                                                           + (double)*(int *)(v73 + 4 * v22)
                                                           * *(double *)((char *)v241[0] + 8 * v44 + v15);
              v75 = (double)*(int *)(v73 + 4 * v16);
              v60 = (char *)v235[0] + v15;
              v61 = *(double *)((char *)v235[0] + 8 * v44 + v15) + v75 * *(double *)&v74[8 * v44];
              break;
            case 2:
              v60 = (char *)(v47 + 8 * v48 * (int)v22 + v15);
              v61 = v49 + *(double *)&v60[8 * v44];
              break;
            case 3:
              v42[(v191 + v44)] = v49 + v42[(v191 + v44)];
              v51 = *((_DWORD *)v1 + 2);
              v52 = v1;
              v53 = v238[0];
              LODWORD(v196[0]) = v51;
              v248 = v19;
              if (v49 != 0.0)
              {
                LODWORD(v223) = v51;
                *(double *)&v224 = v49;
                v54 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v239[0] + v45), (int *)&v223, &v223);
                if (!v55)
                  *((double *)v54 + 5) = v49 + *((double *)v54 + 5);
                v201 = v196;
                v56 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)(v53 + v45), (int *)v196, (uint64_t)&std::piecewise_construct, (_DWORD **)&v201);
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(v56 + 5, &v248, &v248);
                v42 = (double *)v241[0];
                v52 = v190;
              }
              v57 = v42[(unint64_t)v15 / 8 + v44];
              v58 = v57;
              *(float *)&v216 = v58;
              v59 = (double)*(int *)(*((_QWORD *)v52 + 8) + 4 * v16);
              *(double *)((char *)v236[0] + 8 * v44 + v15) = *(double *)((char *)v236[0] + 8 * v44 + v15) + v59 * v57;
              *(double *)((char *)v235[0] + 8 * v44 + v15) = *(double *)((char *)v235[0] + 8 * v44 + v15)
                                                           + v59 * v42[(unint64_t)v15 / 8 + v44];
              v1 = v52;
              goto LABEL_70;
            default:
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"Invalid b_arc value", 19);
              kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v223);
          }
          *(double *)&v60[8 * v44] = v61;
LABEL_70:
          --v44;
          v45 -= 24;
        }
        while ((unint64_t)(v10 + v44 + 1) > 1);
      }
      v76 = exp(*((double *)v247[0] + v22) + v43 - *((double *)v247[0] + v16));
      v77 = v242[0];
      v78 = v243;
      v79 = *v42 + v76 * *(double *)(v242[0] + 8 * v16 * v243);
      *v42 = v79;
      *(double *)(v77 + 8 * v78 * (int)v22) = v79 + *(double *)(v77 + 8 * v78 * (int)v22);
      if (v219)
      {
        v220 = v219;
        operator delete(v219);
      }
      v11 = v187;
      v18 = v189 + 1;
      v13 = *((_QWORD *)v1 + 5);
      v17 = *(_QWORD *)(v13 + 24 * v16);
      v14 = v180 - 1;
    }
    while (v189 + 1 < (unint64_t)((*(_QWORD *)(v13 + 24 * v16 + 8) - v17) >> 2));
    v12 = v181;
LABEL_75:
    v193 -= 8;
    v8 = v12 <= 3;
    v12 = v16;
    if (!v8)
      continue;
    break;
  }
LABEL_77:
  kaldi::VectorBase<double>::SetZero((uint64_t)v241);
  if (v11 < 1)
    goto LABEL_100;
  v80 = (double *)v241[0];
  v81 = 8 * (2 * v10 + v11);
  do
  {
    v82 = *(double *)(v242[0] + 8 * v243 + 8 * v10) + v80[v10];
    v80[v10] = v82;
    v83 = v10 - 1;
    v80[(v10 - 1)] = v82 + v80[(v10 - 1)];
    if (v82 != 0.0)
    {
      LODWORD(v223) = *((_DWORD *)v1 + 2);
      *(double *)&v224 = v82;
      v84 = std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>((uint64_t **)(v239[0] + v81), (int *)&v223, &v223);
      if (!v85)
        *((double *)v84 + 5) = v82 + *((double *)v84 + 5);
      v80 = (double *)v241[0];
    }
    v86 = (double)*(int *)(*((_QWORD *)v1 + 8) + 4);
    *((double *)v236[0] + v10) = *((double *)v236[0] + v10) + v86 * v80[v10];
    *((double *)v235[0] + v10) = *((double *)v235[0] + v10) + v86 * v80[v10];
    v81 -= 24;
    --v10;
  }
  while ((unint64_t)(v83 + 1) > 1);
  if ((int)v187 < 1)
  {
LABEL_100:
    v100 = 1;
    v88 = v179;
  }
  else
  {
    v87 = 1;
    v88 = v179;
    do
    {
      v89 = (_QWORD *)(v239[0] + 24 * v87);
      v92 = (_QWORD *)*v89;
      v90 = v89 + 1;
      v91 = v92;
      v93 = 0.0;
      if (v92 != v90)
      {
        do
        {
          v94 = (_QWORD *)v91[1];
          v95 = v91;
          if (v94)
          {
            do
            {
              v96 = v94;
              v94 = (_QWORD *)*v94;
            }
            while (v94);
          }
          else
          {
            do
            {
              v96 = (_QWORD *)v95[2];
              v97 = *v96 == (_QWORD)v95;
              v95 = v96;
            }
            while (!v97);
          }
          v93 = v93 + *((double *)v91 + 5);
          v91 = v96;
        }
        while (v96 != v90);
      }
      if (fabs(v93 + -1.0) > 0.1 && kaldi::g_kaldi_verbose_level > -2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"sum of gamma[", 13);
        v99 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)",s] is ", 7);
        std::ostream::operator<<();
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
      }
      ++v87;
    }
    while (v87 != v180);
    v100 = 0;
    v1 = v190;
  }
  std::vector<std::vector<int>>::__clear[abi:ne180100]((uint64_t *)v1 + 15);
  v194 = (_QWORD *)((char *)v1 + 120);
  std::vector<std::vector<std::pair<int,float>>>::resize((uint64_t *)v1 + 15, (int)(v88 >> 2));
  v102 = *((_QWORD *)v1 + 18);
  v101 = *((_QWORD *)v1 + 19);
  if (v101 != v102)
  {
    do
    {
      v103 = v101 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v101 - 24, *(_QWORD **)(v101 - 16));
      v101 = v103;
    }
    while (v103 != v102);
  }
  *((_QWORD *)v1 + 19) = v102;
  std::vector<std::map<int,std::set<int>>>::resize((uint64_t *)v1 + 18, (int)(v88 >> 2));
  v104 = (_DWORD *)*((_QWORD *)v1 + 21);
  v192 = (uint64_t *)((char *)v1 + 168);
  v105 = (_DWORD *)*((_QWORD *)v1 + 22);
  while (v105 != v104)
  {
    v105 -= 6;
    v223 = v105;
    std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
  }
  *((_QWORD *)v1 + 22) = v104;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::resize(v192, (int)(v88 >> 2));
  v178 = v100;
  if ((v100 & 1) == 0)
  {
    v188 = (uint64_t)v1 + 192;
    v185 = *(_DWORD **)(MEMORY[0x1E0DE4F50] + 64);
    v186 = (_DWORD *)*MEMORY[0x1E0DE4F50];
    v184 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    v182 = (_QWORD *)((char *)v1 + 144);
    v183 = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    v106 = 1;
    do
    {
      v107 = (double **)(v239[0] + 24 * v106);
      v108 = *v107;
      v195 = v106;
      if (*v107 != (double *)(v107 + 1))
      {
        v109 = v106 - 1;
        do
        {
          v110 = (unint64_t **)(*v194 + 24 * v109);
          *(float *)&v111 = v108[5];
          v112 = *((unsigned int *)v108 + 8) | ((unint64_t)v111 << 32);
          v114 = (void **)(v110 + 1);
          v113 = v110[1];
          v116 = v110 + 2;
          v115 = (unint64_t)v110[2];
          if ((unint64_t)v113 >= v115)
          {
            v118 = v113 - *v110;
            if ((unint64_t)(v118 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v119 = v115 - (_QWORD)*v110;
            v120 = v119 >> 2;
            if (v119 >> 2 <= (unint64_t)(v118 + 1))
              v120 = v118 + 1;
            if ((unint64_t)v119 >= 0x7FFFFFFFFFFFFFF8)
              v121 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v121 = v120;
            if (v121)
              v122 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v116, v121);
            else
              v122 = 0;
            v123 = (unint64_t *)&v122[8 * v118];
            *v123 = v112;
            v117 = v123 + 1;
            v124 = (char *)*v114;
            v125 = *v110;
            if (*v114 != *v110)
            {
              do
              {
                v126 = *((_QWORD *)v124 - 1);
                v124 -= 8;
                *--v123 = v126;
              }
              while (v124 != (char *)v125);
              v124 = (char *)*v110;
            }
            *v110 = v123;
            *v114 = v117;
            *v116 = &v122[8 * v121];
            if (v124)
              operator delete(v124);
            v106 = v195;
          }
          else
          {
            *v113 = v112;
            v117 = v113 + 1;
          }
          *v114 = v117;
          v127 = (double *)*((_QWORD *)v108 + 1);
          if (v127)
          {
            do
            {
              v128 = v127;
              v127 = *(double **)v127;
            }
            while (v127);
          }
          else
          {
            do
            {
              v128 = (double *)*((_QWORD *)v108 + 2);
              v97 = *(_QWORD *)v128 == (_QWORD)v108;
              v108 = v128;
            }
            while (!v97);
          }
          v108 = v128;
        }
        while (v128 != (double *)(v239[0] + 24 * v106 + 8));
      }
      v129 = (_QWORD *)(v238[0] + 24 * v106);
      v132 = (int *)*v129;
      v130 = (int *)(v129 + 1);
      v131 = v132;
      if (v132 != v130)
      {
        do
        {
          v133 = (uint64_t **)(*v182 + 24 * (v195 - 1));
          v223 = v131 + 8;
          v134 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v133, v131 + 8, (uint64_t)&std::piecewise_construct, &v223);
          std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)v134 + 5, *((int **)v131 + 5), v131 + 12);
          v135 = (int *)*((_QWORD *)v131 + 1);
          if (v135)
          {
            do
            {
              v136 = v135;
              v135 = *(int **)v135;
            }
            while (v135);
          }
          else
          {
            do
            {
              v136 = (int *)*((_QWORD *)v131 + 2);
              v97 = *(_QWORD *)v136 == (_QWORD)v131;
              v131 = v136;
            }
            while (!v97);
          }
          v131 = v136;
        }
        while (v136 != v130);
      }
      v137 = (_QWORD *)(v237[0] + 24 * v195);
      v138 = (_QWORD *)*v137;
      v139 = v195 - 1;
      v1 = v190;
      if ((_QWORD *)*v137 != v137 + 1)
      {
        do
        {
          v140 = *v192;
          v215 = *((_OWORD *)v138 + 4);
          v217 = 0;
          v218 = 0;
          v216 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v216, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v219) = *((_DWORD *)v138 + 26);
          LODWORD(v223) = *((_DWORD *)v138 + 8);
          v224 = v215;
          v225 = 0;
          v226 = 0;
          v227 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v225, v216, (uint64_t)v217, (v217 - (_BYTE *)v216) >> 2);
          LODWORD(__p) = (_DWORD)v219;
          v141 = v140 + 24 * v139;
          v144 = *(_QWORD *)(v141 + 8);
          v142 = *(_QWORD *)(v141 + 16);
          v143 = (uint64_t *)(v141 + 8);
          if (v144 >= v142)
          {
            v145 = std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>((uint64_t *)(v140 + 24 * v139), (uint64_t)&v223);
          }
          else
          {
            *(_DWORD *)v144 = (_DWORD)v223;
            *(_OWORD *)(v144 + 8) = v224;
            *(_QWORD *)(v144 + 32) = 0;
            *(_QWORD *)(v144 + 40) = 0;
            *(_QWORD *)(v144 + 24) = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v144 + 24), v225, (uint64_t)v226, (v226 - (_BYTE *)v225) >> 2);
            *(_DWORD *)(v144 + 48) = (_DWORD)__p;
            v145 = v144 + 56;
            *v143 = v144 + 56;
          }
          *v143 = v145;
          if (v225)
          {
            v226 = v225;
            operator delete(v225);
          }
          if (v216)
          {
            v217 = v216;
            operator delete(v216);
          }
          std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v223);
          v215 = *((_OWORD *)v138 + 4);
          v217 = 0;
          v218 = 0;
          v216 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v216, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v219) = *((_DWORD *)v138 + 26);
          v146 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v146, (uint64_t)"_", 1);
          v201 = (unint64_t *)v138[8];
          v202 = v138[9];
          v204 = 0;
          v205 = 0;
          v203 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v203, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          v206 = *((_DWORD *)v138 + 26);
          v147 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v147, (uint64_t)"_", 1);
          v196[0] = v138[8];
          v196[1] = v138[9];
          v198 = 0;
          v199 = 0;
          v197 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v197, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          v200 = *((_DWORD *)v138 + 26);
          std::ostream::operator<<();
          if (v197)
          {
            v198 = v197;
            operator delete(v197);
          }
          if (v203)
          {
            v204 = v203;
            operator delete(v203);
          }
          if (v216)
          {
            v217 = v216;
            operator delete(v216);
          }
          v196[0] = 0;
          v215 = *((_OWORD *)v138 + 4);
          v217 = 0;
          v218 = 0;
          v216 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v216, (const void *)v138[10], v138[11], (uint64_t)(v138[11] - v138[10]) >> 2);
          LODWORD(v219) = *((_DWORD *)v138 + 26);
          v148 = 0x100000000;
          if (!__CFADD__(HIDWORD(v215), DWORD2(v215)))
            v148 = 0;
          v149 = v148 | (HIDWORD(v215) + DWORD2(v215));
          v150 = (int *)v216;
          if (v217 != v216)
          {
            v151 = (v217 - (_BYTE *)v216) >> 2;
            if (v151 <= 1)
              v151 = 1;
            v152 = 6967;
            do
            {
              v153 = *v150++;
              v149 += v152 * v153;
              v152 *= 7499;
              --v151;
            }
            while (v151);
          }
          std::stringbuf::str();
          v154 = HIBYTE(v203);
          if (SHIBYTE(v203) < 0)
            v154 = v202;
          v155 = &v201;
          if (SHIBYTE(v203) < 0)
            v155 = (_QWORD **)v201;
          for (i = 0; v154; --v154)
          {
            v157 = *(char *)v155;
            v155 = (_QWORD **)((char *)v155 + 1);
            i = v157 + 7853 * i;
          }
          if (SHIBYTE(v203) < 0)
            operator delete(v201);
          if (v216)
          {
            v217 = v216;
            operator delete(v216);
          }
          v196[0] = i + v149;
          v201 = v196;
          *((_WORD *)std::__hash_table<std::__hash_value_type<unsigned long,short>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,short>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,short>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,short>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long const&>,std::tuple<>>(v188, v196, (uint64_t)&std::piecewise_construct, &v201)+ 12) = 1;
          v223 = v186;
          *(_DWORD **)((char *)&v223 + *((_QWORD *)v186 - 3)) = v185;
          *((_QWORD *)&v224 + 1) = v184;
          v225 = v183;
          if (v233 < 0)
            operator delete(v232);
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x1AF44D094](&v234);
          v158 = (_QWORD *)v138[1];
          v1 = v190;
          if (v158)
          {
            do
            {
              v159 = v158;
              v158 = (_QWORD *)*v158;
            }
            while (v158);
          }
          else
          {
            do
            {
              v159 = (_QWORD *)v138[2];
              v97 = *v159 == (_QWORD)v138;
              v138 = v159;
            }
            while (!v97);
          }
          v138 = v159;
        }
        while (v159 != (_QWORD *)(v237[0] + 24 * v195 + 8));
      }
      v160 = (uint64_t *)(*v194 + 24 * v139);
      v161 = *v160;
      v162 = (float *)v160[1];
      v163 = 126 - 2 * __clz(((uint64_t)v162 - *v160) >> 3);
      if (v162 == (float *)v161)
        v164 = 0;
      else
        v164 = v163;
      std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(v161, v162, (uint64_t)&v223, v164, 1);
      v106 = v195 + 1;
    }
    while (v195 + 1 != v180);
  }
  v166 = *((_QWORD *)v1 + 29);
  v165 = (_QWORD *)((char *)v1 + 232);
  v165[1] = v166;
  std::vector<std::pair<int,int>>::resize((uint64_t)v165, (int)(v88 >> 2));
  if ((v178 & 1) == 0)
  {
    v167 = 1;
    do
    {
      v168 = *((double *)v236[0] + v167);
      v169 = (float *)(*v165 + 8 * (v167 - 1));
      *v169 = v168;
      v170 = *((double *)v235[0] + v167);
      v169[1] = v170;
      if (v168 > v170 && kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v223, (uint64_t)"Times out of order", 18);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v223);
      }
      if (v167 >= 2)
      {
        v172 = *v165 + 8 * (v167 - 2);
        v174 = *(float *)(v172 + 4);
        v173 = (float *)(v172 + 4);
        v175 = v174;
        v176 = (float *)(*v165 + 8 * (v167 - 1));
        if (v174 > *v176)
        {
          v177 = (float)(v175 + *v176) * 0.5;
          *v176 = v177;
          *v173 = v177;
        }
      }
      ++v167;
    }
    while (v167 != v180);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v235);
  kaldi::Vector<float>::Destroy((uint64_t)v236);
  v223 = v237;
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
  v223 = v238;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
  v223 = v239;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v223);
  if (v240.__begin_)
  {
    v240.__end_ = v240.__begin_;
    operator delete(v240.__begin_);
  }
  kaldi::Vector<float>::Destroy((uint64_t)v241);
  kaldi::Matrix<float>::~Matrix((uint64_t)v242);
  kaldi::Vector<float>::Destroy((uint64_t)v244);
  kaldi::Matrix<float>::~Matrix((uint64_t)v245);
  kaldi::Vector<float>::Destroy((uint64_t)v247);
}

void sub_1ADFD93BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADFD93F4);
}

void sub_1ADFD93EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD v3[5];
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;

  if (v4)
  {
    v5 = v4;
    operator delete(v4);
  }
  kaldi::Vector<float>::Destroy(&v6);
  kaldi::Vector<float>::Destroy(&v7);
  v3[0] = &v8;
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = &v9;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](v3);
  v3[0] = &v10;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](v3);
  if (v11)
  {
    v12 = v11;
    operator delete(v11);
  }
  kaldi::Vector<float>::Destroy(&v13);
  kaldi::Matrix<float>::~Matrix(&v14);
  kaldi::Vector<float>::Destroy(v1 - 232);
  kaldi::Matrix<float>::~Matrix(v1 - 208);
  kaldi::Vector<float>::Destroy(v1 - 168);
  _Unwind_Resume(a1);
}

uint64_t kaldi::MinimumBayesRisk::RemoveEps(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  _DWORD *v3;
  int v4;
  _DWORD *i;

  v3 = *(_DWORD **)a2;
  v2 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v2)
  {
    v4 = *(_DWORD *)(result + 8);
    while (*v3 != v4)
    {
      if (++v3 == v2)
        return result;
    }
    if (v3 != v2)
    {
      for (i = v3 + 1; i != v2; ++i)
      {
        if (*i != v4)
          *v3++ = *i;
      }
    }
    if (v3 != v2)
      *(_QWORD *)(a2 + 8) = v3;
  }
  return result;
}

void kaldi::MinimumBayesRisk::RemoveEpsGamma(kaldi::MinimumBayesRisk *this)
{
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  char *v8;
  uint64_t *v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t **v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _QWORD *v26[2];
  void *__p;
  char *v28;
  unint64_t v29;
  void **v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t **v33;
  uint64_t **v34;
  unint64_t v35;
  _DWORD *v36;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v2 = *((_QWORD *)this + 15);
  v3 = (uint64_t *)((char *)this + 120);
  if (*((_QWORD *)this + 16) != v2)
  {
    v4 = 0;
    do
    {
      __p = 0;
      v28 = 0;
      v29 = 0;
      v26[0] = 0;
      v26[1] = 0;
      v25 = (uint64_t *)v26;
      v5 = *(_QWORD *)(v2 + 24 * v4);
      if (*(_QWORD *)(v2 + 24 * v4 + 8) != v5)
      {
        v6 = 0;
        do
        {
          v7 = (_DWORD *)(v5 + 8 * v6);
          if (*v7 != *((_DWORD *)this + 2))
          {
            v8 = v28;
            if ((unint64_t)v28 >= v29)
            {
              v10 = (v28 - (_BYTE *)__p) >> 3;
              if ((unint64_t)(v10 + 1) >> 61)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v11 = (uint64_t)(v29 - (_QWORD)__p) >> 2;
              if (v11 <= v10 + 1)
                v11 = v10 + 1;
              if (v29 - (unint64_t)__p >= 0x7FFFFFFFFFFFFFF8)
                v12 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v12 = v11;
              if (v12)
                v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v29, v12);
              else
                v13 = 0;
              v14 = (uint64_t *)&v13[8 * v10];
              *v14 = *(_QWORD *)v7;
              v9 = v14 + 1;
              v16 = (uint64_t *)__p;
              v15 = (uint64_t *)v28;
              if (v28 != __p)
              {
                do
                {
                  v17 = *--v15;
                  *--v14 = v17;
                }
                while (v15 != v16);
                v15 = (uint64_t *)__p;
              }
              __p = v14;
              v28 = (char *)v9;
              v29 = (unint64_t)&v13[8 * v12];
              if (v15)
                operator delete(v15);
            }
            else
            {
              *(_QWORD *)v28 = *(_QWORD *)v7;
              v9 = (uint64_t *)(v8 + 8);
            }
            v28 = (char *)v9;
            v18 = (uint64_t **)(*((_QWORD *)this + 18) + 24 * v4);
            v36 = v7;
            v19 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(v18, v7, (uint64_t)&std::piecewise_construct, &v36);
            v36 = v7;
            v20 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v25, v7, (uint64_t)&std::piecewise_construct, &v36);
            std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)v20 + 5, (int *)v19[5], (int *)v19 + 12);
            v2 = *v3;
          }
          ++v6;
          v5 = *(_QWORD *)(v2 + 24 * v4);
        }
        while (v6 < (*(_QWORD *)(v2 + 24 * v4 + 8) - v5) >> 3);
        if (v28 != __p)
        {
          v21 = v34;
          if ((unint64_t)v34 >= v35)
          {
            v22 = (uint64_t **)std::vector<std::vector<std::pair<int,float>>>::__push_back_slow_path<std::vector<std::pair<int,float>> const&>((uint64_t *)&v33, (uint64_t **)&__p);
          }
          else
          {
            *v34 = 0;
            v21[1] = 0;
            v21[2] = 0;
            std::vector<std::pair<int,float>>::__init_with_size[abi:ne180100]<std::pair<int,float>*,std::pair<int,float>*>((char *)v21, (uint64_t *)__p, (uint64_t *)v28, (v28 - (_BYTE *)__p) >> 3);
            v22 = v21 + 3;
          }
          v34 = v22;
          v23 = v31;
          if ((unint64_t)v31 >= v32)
          {
            v24 = (uint64_t *)std::vector<std::map<int,std::set<int>>>::__push_back_slow_path<std::map<int,std::set<int>> const&>((uint64_t *)&v30, (uint64_t)&v25);
          }
          else
          {
            std::map<int,std::set<int>>::map[abi:ne180100](v31, (uint64_t)&v25);
            v24 = v23 + 3;
          }
          v31 = v24;
        }
      }
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)&v25, v26[0]);
      if (__p)
      {
        v28 = (char *)__p;
        operator delete(__p);
      }
      ++v4;
      v2 = *((_QWORD *)this + 15);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 16) - v2) >> 3) > v4);
  }
  if (v3 != (uint64_t *)&v33)
    std::vector<std::vector<std::pair<int,float>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v3, v33, v34, 0xAAAAAAAAAAAAAAABLL * (v34 - v33));
  if ((void ***)((char *)this + 144) != &v30)
    std::vector<std::map<int,std::set<int>>>::__assign_with_size[abi:ne180100]<std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>((uint64_t)this + 144, (uint64_t)v30, (uint64_t **)v31, 0xAAAAAAAAAAAAAAABLL * (((char *)v31 - (char *)v30) >> 3));
  __p = &v30;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v30 = (void **)&v33;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v30);
}

void sub_1ADFD9854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char **__p, uint64_t a13, uint64_t a14, char *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19)
{
  __p = &a15;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a15 = &a18;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a15);
  _Unwind_Resume(a1);
}

void kaldi::MinimumBayesRisk::RemoveEpsGammaArcs(kaldi::MinimumBayesRisk *this)
{
  uint64_t *v1;
  uint64_t **v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  void **v12;
  void **v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  unint64_t v17;
  void ***v18;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  v1 = (uint64_t *)*((_QWORD *)this + 21);
  v2 = (uint64_t **)((char *)this + 168);
  if (*((uint64_t **)this + 22) != v1)
  {
    v4 = 0;
    do
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v5 = v1[3 * v4];
      if (v1[3 * v4 + 1] != v5)
      {
        v6 = 0;
        v7 = 0;
        v8 = 0;
        do
        {
          v9 = v5 + v6;
          if (*(_DWORD *)(v5 + v6) != *((_DWORD *)this + 2))
          {
            if ((unint64_t)v7 >= v14)
            {
              v7 = (void **)std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>> const&>((uint64_t *)&v12, v9);
            }
            else
            {
              std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v7, v9);
              v7 += 7;
            }
            v13 = v7;
            v1 = *v2;
          }
          ++v8;
          v5 = v1[3 * v4];
          v6 += 56;
        }
        while (0x6DB6DB6DB6DB6DB7 * ((v1[3 * v4 + 1] - v5) >> 3) > v8);
        if (v7 != v12)
        {
          v10 = v16;
          if ((unint64_t)v16 >= v17)
          {
            v11 = (uint64_t *)std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__push_back_slow_path<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>> const&>((uint64_t *)&v15, (uint64_t *)&v12);
          }
          else
          {
            *v16 = 0;
            v10[1] = 0;
            v10[2] = 0;
            std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__init_with_size[abi:ne180100]<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*,std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>*>(v10, (uint64_t)v12, (uint64_t)v13, 0x6DB6DB6DB6DB6DB7 * (v13 - v12));
            v11 = v10 + 3;
          }
          v16 = v11;
        }
      }
      v18 = &v12;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
      ++v4;
      v1 = (uint64_t *)*((_QWORD *)this + 21);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 22) - (_QWORD)v1) >> 3) > v4);
  }
  if (v2 != &v15)
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__assign_with_size[abi:ne180100]<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*,std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>*>((uint64_t)v2, v15, v16, 0xAAAAAAAAAAAAAAABLL * (v16 - v15));
  v12 = (void **)&v15;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&v12);
}

void sub_1ADFD9A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

double kaldi::MinimumBayesRisk::EditDistance(uint64_t a1, int a2, int a3, uint64_t *a4, uint64_t *a5, double **a6)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  int **v14;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  long double v26;
  uint64_t v27;
  double *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  double *v34;
  double *v35;
  double v36;
  int v37;
  double v38;
  double v39;
  int v40;
  double v41;
  double v42;
  double v43;
  double v44;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v6 = *a4;
  *(_QWORD *)(*a4 + 8) = 0;
  v49 = *((int *)a5 + 4);
  v50 = *a5;
  *(_QWORD *)(*a5 + 8 * v49) = 0;
  if (a3 >= 1)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 88);
    v10 = 0.0;
    do
    {
      if (v8 == *(_DWORD *)(v9 + 4 * v7))
        v11 = 0.0;
      else
        v11 = 1.0;
      v10 = v10 + v11;
      *(double *)(v50 + 8 * v49 + 8 + 8 * v7++) = v10;
    }
    while ((a3 + 1) - 1 != v7);
  }
  if (a2 > 1)
  {
    v57 = (a3 + 1);
    v47 = (a2 + 1);
    v48 = *(_QWORD *)(a1 + 40);
    v12 = 2;
    v13 = v50 + 16 * v49;
    do
    {
      v14 = (int **)(v48 + 24 * v12);
      v15 = *v14;
      v16 = (char *)v14[1] - (char *)*v14;
      if (v16)
      {
        v17 = v16 >> 2;
        v18 = *(_QWORD *)(a1 + 16);
        if (v17 <= 1)
          v19 = 1;
        else
          v19 = v17;
        v20 = -INFINITY;
        v52 = v15;
        v55 = v19;
        do
        {
          v21 = *v15++;
          v22 = v18 + 72 * v21;
          v23 = *(double *)(v6 + 8 * *(int *)(v22 + 4)) + *(float *)(v22 + 12);
          v24 = v20 - v23;
          if (v20 >= v23)
          {
            v25 = v23 - v20;
          }
          else
          {
            v20 = *(double *)(v6 + 8 * *(int *)(v22 + 4)) + *(float *)(v22 + 12);
            v25 = v24;
          }
          if (v25 >= -36.0436534)
          {
            v26 = exp(v25);
            v20 = v20 + log1p(v26);
          }
          --v19;
        }
        while (v19);
        v56 = 0;
        v27 = v12;
        *(double *)(v6 + 8 * v12) = v20;
        v51 = *(_QWORD *)(a1 + 16);
        v28 = *a6;
        do
        {
          if ((a3 & 0x80000000) == 0)
          {
            v29 = 0;
            v30 = 0;
            v31 = 72 * v52[v56];
            v32 = *(_DWORD *)(v51 + v31);
            v33 = *(int *)(v51 + v31 + 4);
            v34 = (double *)(v50 + 8 * (int)v33 * (int)v49);
            v35 = *a6;
            v36 = *(float *)(v51 + v31 + 12);
            do
            {
              if (v30)
              {
                v37 = *(_DWORD *)(*(_QWORD *)(a1 + 88) + 4 * v30 - 4);
                if (v32 == v37)
                  v38 = 0.0;
                else
                  v38 = 1.0;
                v39 = v38 + v34[v29 - 1];
                v40 = *(_DWORD *)(a1 + 8);
                if (v32 == v40)
                  v41 = 0.0;
                else
                  v41 = 1.0;
                v42 = v34[v29] + v41 + 0.00000999999975;
                if (v40 == v37)
                  v43 = 0.0;
                else
                  v43 = 1.0;
                if (v43 + v35[v29 - 1] < v42)
                  v42 = v43 + v35[v29 - 1];
                if (v42 < v39)
                  v39 = v42;
                v35[v29] = v39;
              }
              else
              {
                if (v32 == *(_DWORD *)(a1 + 8))
                  v44 = 0.0;
                else
                  v44 = 1.0;
                *v35 = *v34 + v44 + 0.00000999999975;
              }
              *(long double *)(v13 + 8 * v30) = *(double *)(v13 + 8 * v30)
                                              + exp(*(double *)(v6 + 8 * v33) + v36 - *(double *)(v6 + 8 * v27))
                                              * v28[v30];
              ++v30;
              ++v29;
            }
            while (v57 != v30);
          }
          ++v56;
        }
        while (v56 != v55);
      }
      else
      {
        v27 = v12;
        *(_QWORD *)(v6 + 8 * v12) = 0xFFF0000000000000;
      }
      v12 = v27 + 1;
      v13 += 8 * v49;
    }
    while (v27 + 1 != v47);
  }
  return *(double *)(v50 + 8 * (int)v49 * a2 + 8 * a3);
}

void std::vector<std::map<int,std::set<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::map<int,std::set<int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      do
      {
        v8 = v3 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v3 - 24, *(_QWORD **)(v3 - 16));
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::MinimumBayesRisk::MinimumBayesRisk(uint64_t a1, uint64_t a2, char a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  _DWORD *v21;
  std::vector<int>::pointer begin;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t i;
  uint64_t v37;
  int v38;
  int *v39;
  int *v40;
  int *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  int *v47;
  int v48;
  uint64_t v49;
  int v50;
  _DWORD *v51;
  _DWORD **v52;
  unint64_t v53;
  _QWORD *v54;
  _DWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  int v63;
  unint64_t v64;
  __int128 v65;
  uint64_t v66;
  int v67;
  int v68;
  void **v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  _QWORD *v80;
  int *v81;
  int *v82;
  int *v83;
  int *v84;
  unint64_t v85;
  uint64_t **v86;
  int *v87;
  int *v88;
  BOOL v89;
  int *v90;
  int *v91;
  uint64_t v92;
  int v93;
  uint64_t v95;
  uint64_t v96;
  int v97;
  int v99[2];
  uint64_t *v100;
  std::vector<int> *v101;
  void **v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  float v107;
  void *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  void *v112[2];
  uint64_t v113;
  void **v114;
  void **v115;
  void *__p;
  _BYTE *v117;
  uint64_t v118;
  int v119;
  int *v120;
  int *v121;
  int *v122;
  void **v123;
  void **v124;
  _BYTE *v125;
  _BYTE *v126;
  uint64_t v127;
  int v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  void *v133;
  uint64_t v134;
  _BYTE v135[24];
  _BYTE *v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)a1 = a3;
  *(_OWORD *)(a1 + 16) = 0u;
  v106 = (uint64_t *)(a1 + 16);
  *(_DWORD *)(a1 + 4) = a4;
  *(_DWORD *)(a1 + 8) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  v100 = (uint64_t *)(a1 + 40);
  v101 = (std::vector<int> *)(a1 + 64);
  *(_QWORD *)v99 = a1 + 88;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  v6 = *(_QWORD *)(a2 + 8);
  ++*(_DWORD *)(v6 + 56);
  v102 = (void **)(a1 + 144);
  v133 = &unk_1E5D28AB0;
  v134 = v6;
  v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, 0x3FFFFFFF0007);
  v8 = v7;
  v9 = *(_QWORD *)(v6 + 72) - *(_QWORD *)(v6 + 64);
  v10 = v9 >> 3;
  if ((int)(v9 >> 3) >= 1)
  {
    v11 = 0;
    v104 = v7;
    v105 = (v9 >> 3);
    v12 = 1;
    do
    {
      v129 = &unk_1E5D21420;
      v132 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v133);
      v130 = *(_QWORD *)(*(_QWORD *)(v134 + 64) + 8 * v11);
      v131 = v134 + 8;
      v13 = v132;
      v14 = *(_QWORD *)(v130 + 48);
      v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v130 + 56) - v14) >> 4);
      while (v13 < v15)
      {
        v16 = v14 + 48 * v13;
        v123 = *(void ***)v16;
        v124 = *(void ***)(v16 + 8);
        v126 = 0;
        v127 = 0;
        v125 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v125, *(const void **)(v16 + 16), *(_QWORD *)(v16 + 24), (uint64_t)(*(_QWORD *)(v16 + 24) - *(_QWORD *)(v16 + 16)) >> 2);
        v128 = *(_DWORD *)(v14 + 48 * v13 + 40);
        if ((_DWORD)v123 != HIDWORD(v123))
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"arc.ilabel == arc.olabel", 24);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v112);
        }
        HIDWORD(v123) = v12;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v129, (float *)&v123);
        if (v125)
        {
          v126 = v125;
          operator delete(v125);
        }
        v13 = ++v132;
        v14 = *(_QWORD *)(v130 + 48);
        v15 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v130 + 56) - v14) >> 4);
        ++v12;
      }
      ++v11;
    }
    while (v11 != v105);
    v10 = (*(_QWORD *)(v134 + 72) - *(_QWORD *)(v134 + 64)) >> 3;
    v8 = v104;
  }
  v97 = v10;
  v136 = 0;
  fst::CreateSuperFinal<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v133, (uint64_t)v135);
  v17 = v136;
  if (v136 == v135)
  {
    v18 = 4;
    v17 = v135;
    goto LABEL_15;
  }
  if (v136)
  {
    v18 = 5;
LABEL_15:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v95 = *(_QWORD *)(v134 + 64);
  v96 = *(_QWORD *)(v134 + 72);
  if ((v8 & 0x4000000000) == 0
    && !fst::TopSort<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v133))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"Cycles detected in lattice.", 27);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v112);
  }
  kaldi::CompactLatticeStateTimes(&v133, v101);
  v19 = *(_QWORD *)(a1 + 80);
  v20 = *(_DWORD **)(a1 + 72);
  if ((unint64_t)v20 >= v19)
  {
    begin = v101->__begin_;
    v23 = v20 - v101->__begin_;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v25 = v19 - (_QWORD)begin;
    if (v25 >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 80, v26);
      begin = *(std::vector<int>::pointer *)(a1 + 64);
      v20 = *(_DWORD **)(a1 + 72);
    }
    else
    {
      v27 = 0;
    }
    v28 = &v27[4 * v23];
    v29 = &v27[4 * v26];
    *(_DWORD *)v28 = 0;
    v21 = v28 + 4;
    while (v20 != begin)
    {
      v30 = *--v20;
      *((_DWORD *)v28 - 1) = v30;
      v28 -= 4;
    }
    *(_QWORD *)(a1 + 64) = v28;
    *(_QWORD *)(a1 + 72) = v21;
    *(_QWORD *)(a1 + 80) = v29;
    if (begin)
      operator delete(begin);
  }
  else
  {
    *v20 = 0;
    v21 = v20 + 1;
  }
  *(_QWORD *)(a1 + 72) = v21;
  v31 = *(_QWORD *)(a1 + 64);
  if ((_DWORD *)((char *)v21 - v31) != (_DWORD *)4)
    memmove((void *)(v31 + 4), (const void *)v31, (size_t)v21 - v31 - 4);
  v32 = *(_QWORD *)(v134 + 72) - *(_QWORD *)(v134 + 64);
  std::vector<std::vector<int>>::resize(v100, (uint64_t)((v32 << 29) + 0x100000000) >> 32);
  v120 = 0;
  v121 = 0;
  v122 = 0;
  if ((int)(v32 >> 3) >= 1)
  {
    v103 = (v32 >> 3) + 1;
    v33 = 1;
    do
    {
      v129 = &unk_1E5D21420;
      v132 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::MutateCheck((uint64_t)&v133);
      v130 = *(_QWORD *)(*(_QWORD *)(v134 + 64) + 8 * v33 - 8);
      v131 = v134 + 8;
      v34 = v132;
      v35 = *(_QWORD *)(v130 + 48);
      for (i = *(_QWORD *)(v130 + 56) - v35; v34 < 0xAAAAAAAAAAAAAAABLL * (i >> 4); i = *(_QWORD *)(v130 + 56) - v35)
      {
        v37 = v35 + 48 * v34;
        v123 = *(void ***)v37;
        v124 = *(void ***)(v37 + 8);
        v126 = 0;
        v127 = 0;
        v125 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v125, *(const void **)(v37 + 16), *(_QWORD *)(v37 + 24), (uint64_t)(*(_QWORD *)(v37 + 24) - *(_QWORD *)(v37 + 16)) >> 2);
        v128 = *(_DWORD *)(v35 + 48 * v34 + 40);
        v38 = HIDWORD(v123) - 1;
        v39 = v121;
        if (v121 >= v122)
        {
          v41 = v120;
          v42 = v121 - v120;
          v43 = v42 + 1;
          if ((unint64_t)(v42 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v44 = (char *)v122 - (char *)v120;
          if (((char *)v122 - (char *)v120) >> 1 > v43)
            v43 = v44 >> 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v43;
          if (v45)
          {
            v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v122, v45);
            v41 = v120;
            v39 = v121;
          }
          else
          {
            v46 = 0;
          }
          v47 = (int *)&v46[4 * v42];
          *v47 = v38;
          v40 = v47 + 1;
          while (v39 != v41)
          {
            v48 = *--v39;
            *--v47 = v48;
          }
          v120 = v47;
          v121 = v40;
          v122 = (int *)&v46[4 * v45];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *v121 = v38;
          v40 = v39 + 1;
        }
        v121 = v40;
        HIDWORD(v123) = (_DWORD)v123;
        __p = 0;
        v117 = 0;
        v118 = 0;
        LODWORD(v112[0]) = (_DWORD)v123;
        if ((int)v123 > *(_DWORD *)(a1 + 8))
          *(_DWORD *)(a1 + 8) = (_DWORD)v123;
        HIDWORD(v112[0]) = v33;
        LODWORD(v112[1]) = v128 + 1;
        *((float *)&v112[1] + 1) = -(float)(*(float *)&v124 + *((float *)&v124 + 1));
        v114 = v123;
        v115 = v124;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__p, v125, (uint64_t)v126, (v126 - v125) >> 2);
        v119 = v128;
        v49 = *(_QWORD *)(a1 + 40) + 24 * SLODWORD(v112[1]);
        v50 = 954437177 * ((*(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16)) >> 3);
        v52 = (_DWORD **)(v49 + 8);
        v51 = *(_DWORD **)(v49 + 8);
        v54 = (_QWORD *)(v49 + 16);
        v53 = *(_QWORD *)(v49 + 16);
        if ((unint64_t)v51 >= v53)
        {
          v56 = *(_DWORD **)v49;
          v57 = ((uint64_t)v51 - *(_QWORD *)v49) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v59 = v53 - (_QWORD)v56;
          if (v59 >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v60 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v60 = v58;
          if (v60)
          {
            v61 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v54, v60);
            v51 = *v52;
            v56 = *(_DWORD **)v49;
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[4 * v57];
          *(_DWORD *)v62 = v50;
          v55 = v62 + 4;
          while (v51 != v56)
          {
            v63 = *--v51;
            *((_DWORD *)v62 - 1) = v63;
            v62 -= 4;
          }
          *(_QWORD *)v49 = v62;
          *v52 = v55;
          *v54 = &v61[4 * v60];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *v51 = v50;
          v55 = v51 + 1;
        }
        *v52 = v55;
        v64 = *(_QWORD *)(a1 + 24);
        if (v64 >= *(_QWORD *)(a1 + 32))
        {
          v66 = std::vector<kaldi::MinimumBayesRisk::Arc>::__push_back_slow_path<kaldi::MinimumBayesRisk::Arc const&>(v106, (__int128 *)v112);
        }
        else
        {
          v65 = *(_OWORD *)v112;
          *(_DWORD *)(v64 + 16) = v113;
          *(_OWORD *)v64 = v65;
          *(_QWORD *)(v64 + 24) = v114;
          *(_QWORD *)(v64 + 32) = v115;
          *(_QWORD *)(v64 + 48) = 0;
          *(_QWORD *)(v64 + 56) = 0;
          *(_QWORD *)(v64 + 40) = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(v64 + 40), __p, (uint64_t)v117, (v117 - (_BYTE *)__p) >> 2);
          *(_DWORD *)(v64 + 64) = v119;
          v66 = v64 + 72;
          *(_QWORD *)(a1 + 24) = v64 + 72;
        }
        *(_QWORD *)(a1 + 24) = v66;
        fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>>::SetValue((uint64_t)&v129, (float *)&v123);
        if (__p)
        {
          v117 = __p;
          operator delete(__p);
        }
        if (v125)
        {
          v126 = v125;
          operator delete(v125);
        }
        v34 = ++v132;
        v35 = *(_QWORD *)(v130 + 48);
      }
      ++v33;
    }
    while (v33 != v103);
  }
  v68 = *(_DWORD *)(a1 + 4);
  v67 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v67 + 1;
  if (v67 + 1 == v68)
    *(_DWORD *)(a1 + 8) = v67 + 2;
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v112, 3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"MBR Sausage Alignment Epsilon Symbol is ", 40);
    std::ostream::operator<<();
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v112);
  }
  fst::RemoveAlignmentsFromCompactLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v133);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v129);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v133, (uint64_t)&v129, 1);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v110);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,fst::TropicalWeightTpl<float>>((uint64_t)&v129, (uint64_t)&v110);
  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v108);
  fst::ShortestPath<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v110, (uint64_t)&v108, 1, 0, 0, -1, 0, INFINITY);
  v112[0] = 0;
  v112[1] = 0;
  v113 = 0;
  v123 = 0;
  v124 = 0;
  v125 = 0;
  if (*(_DWORD *)(a1 + 4))
  {
    fst::GetLinearSymbolSequence<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)&v108, (char *)v112, (uint64_t)&v123, &v107, 0);
    v69 = v123;
LABEL_89:
    v70 = *(char **)v99;
    goto LABEL_90;
  }
  fst::GetLinearSymbolSequence<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,int>((uint64_t)&v108, (char *)v112, (uint64_t)&v123, &v107, 1);
  v69 = v123;
  if (v124 == v123)
  {
    v69 = v124;
    goto LABEL_89;
  }
  v70 = *(char **)v99;
  if (!*((_DWORD *)v124 - 1) && v97 < (int)((unint64_t)(v96 - v95) >> 3))
    v124 = (void **)((char *)v124 - 4);
LABEL_90:
  if (v70 != (char *)&v123)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v70, (char *)v69, (uint64_t)v124, ((char *)v124 - (char *)v69) >> 2);
    v69 = v123;
  }
  *(_QWORD *)(a1 + 112) = 0;
  if (v69)
  {
    v124 = v69;
    operator delete(v69);
  }
  if (v112[0])
  {
    v112[1] = v112[0];
    operator delete(v112[0]);
  }
  v108 = &unk_1E5D256C0;
  v71 = v109;
  if (v109)
  {
    v72 = *(_DWORD *)(v109 + 56) - 1;
    *(_DWORD *)(v109 + 56) = v72;
    if (!v72)
      (*(void (**)(uint64_t))(*(_QWORD *)v71 + 8))(v71);
  }
  v110 = &unk_1E5D256C0;
  v73 = v111;
  if (v111)
  {
    v74 = *(_DWORD *)(v111 + 56) - 1;
    *(_DWORD *)(v111 + 56) = v74;
    if (!v74)
      (*(void (**)(uint64_t))(*(_QWORD *)v73 + 8))(v73);
  }
  v129 = &unk_1E5D25580;
  v75 = v130;
  if (v130)
  {
    v76 = *(_DWORD *)(v130 + 56) - 1;
    *(_DWORD *)(v130 + 56) = v76;
    if (!v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  }
  kaldi::MinimumBayesRisk::MbrDecode((kaldi::MinimumBayesRisk *)a1);
  std::vector<std::map<int,std::set<int>>>::vector(v112, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 152) - *(_QWORD *)(a1 + 144)) >> 3));
  v78 = *(_QWORD *)(a1 + 144);
  v77 = *(_QWORD *)(a1 + 152);
  if (v77 != v78)
  {
    v79 = 0;
    do
    {
      v80 = (_QWORD *)(v78 + 24 * v79);
      v83 = (int *)*v80;
      v81 = (int *)(v80 + 1);
      v82 = v83;
      if (v83 != v81)
      {
        do
        {
          v84 = (int *)*((_QWORD *)v82 + 5);
          if (v84 != v82 + 12)
          {
            do
            {
              LODWORD(v123) = 0;
              v85 = v84[7];
              if (v85 >= v121 - v120)
                std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
              LODWORD(v123) = v120[v85];
              if ((v123 & 0x80000000) == 0)
              {
                v129 = v82 + 8;
                v86 = std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)v112[0] + 3 * v79, v82 + 8, (uint64_t)&std::piecewise_construct, &v129);
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(v86 + 5, (int *)&v123, &v123);
              }
              v87 = (int *)*((_QWORD *)v84 + 1);
              if (v87)
              {
                do
                {
                  v88 = v87;
                  v87 = *(int **)v87;
                }
                while (v87);
              }
              else
              {
                do
                {
                  v88 = (int *)*((_QWORD *)v84 + 2);
                  v89 = *(_QWORD *)v88 == (_QWORD)v84;
                  v84 = v88;
                }
                while (!v89);
              }
              v84 = v88;
            }
            while (v88 != v82 + 12);
          }
          v90 = (int *)*((_QWORD *)v82 + 1);
          if (v90)
          {
            do
            {
              v91 = v90;
              v90 = *(int **)v90;
            }
            while (v90);
          }
          else
          {
            do
            {
              v91 = (int *)*((_QWORD *)v82 + 2);
              v89 = *(_QWORD *)v91 == (_QWORD)v82;
              v82 = v91;
            }
            while (!v89);
          }
          v82 = v91;
        }
        while (v91 != v81);
        v78 = *(_QWORD *)(a1 + 144);
        v77 = *(_QWORD *)(a1 + 152);
      }
      ++v79;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v77 - v78) >> 3) > v79);
  }
  if (v102 != v112)
    std::vector<std::map<int,std::set<int>>>::__assign_with_size[abi:ne180100]<std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>((uint64_t)v102, (uint64_t)v112[0], (uint64_t **)v112[1], 0xAAAAAAAAAAAAAAABLL * (((char *)v112[1] - (char *)v112[0]) >> 3));
  kaldi::MinimumBayesRisk::TestSausageConsistency((_QWORD *)a1, a2);
  v123 = v112;
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](&v123);
  if (v120)
  {
    v121 = v120;
    operator delete(v120);
  }
  v133 = &unk_1E5D25800;
  v92 = v134;
  if (v134)
  {
    v93 = *(_DWORD *)(v134 + 56) - 1;
    *(_DWORD *)(v134 + 56) = v93;
    if (!v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 8))(v92);
  }
  return a1;
}

void sub_1ADFDAD2C(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADFDAE3CLL);
}

void fst::RemoveAlignmentsFromCompactLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *__p;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  float v22;
  int v23;

  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 160))(a1);
  if (v2 >= 1)
  {
    v3 = v2;
    v4 = 0;
    do
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 296))(a1, v4, &v21);
      while (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21))
      {
        v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 32))(v21);
        v15 = *(_QWORD *)v5;
        v16 = *(void **)(v5 + 8);
        v18 = 0;
        v19 = 0;
        v17 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v17, *(const void **)(v5 + 16), *(_QWORD *)(v5 + 24), (uint64_t)(*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 2);
        v20 = *(_DWORD *)(v5 + 40);
        v11 = v16;
        v13 = 0;
        v14 = 0;
        __p = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, 0, 0, 0);
        v16 = v11;
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v17, (char *)__p, (uint64_t)v13, (v13 - (_BYTE *)__p) >> 2);
        if (__p)
        {
          v13 = __p;
          operator delete(__p);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v21 + 88))(v21, &v15);
        if (v17)
        {
          v18 = v17;
          operator delete(v17);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
      }
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(&v15, a1, v4);
      LODWORD(v21) = HIDWORD(v15);
      LODWORD(v11) = v15;
      v23 = 2139095040;
      v22 = INFINITY;
      if (*(float *)&v15 != INFINITY || *(float *)&v21 != v22 || (v6 = v16, v17 != v16))
      {
        v7 = v15;
        v9 = 0;
        v10 = 0;
        v8 = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v8, 0, 0, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v4, &v7);
        if (v8)
        {
          v9 = v8;
          operator delete(v8);
        }
        v6 = v16;
      }
      if (v6)
      {
        v17 = v6;
        operator delete(v6);
      }
      v4 = (v4 + 1);
    }
    while ((_DWORD)v4 != v3);
  }
}

void sub_1ADFDB094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::MinimumBayesRisk::TestSausageConsistency(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int **v16;
  int *v17;
  int *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  void **v29[34];
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;

  v30 = 0;
  v31 = 0;
  v32 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 72) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 64);
  if ((int)(v3 >> 3) >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = (v3 >> 3);
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) + 8 * v6);
      v10 = *(_QWORD *)(v8 + 48);
      v9 = *(_QWORD *)(v8 + 56);
      if (v9 == v10)
        v11 = 0;
      else
        v11 = *(_QWORD *)(v8 + 48);
      if (v9 != v10)
      {
        if ((unint64_t)((v9 - v10) / 48) <= 1)
          v12 = 1;
        else
          v12 = (v9 - v10) / 48;
        do
        {
          if (v5 >= v32)
          {
            v5 = std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__emplace_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(&v30, v11);
          }
          else
          {
            std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__construct_one_at_end[abi:ne180100]<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>((uint64_t)&v30, v11);
            v5 += 48;
          }
          v31 = v5;
          v11 += 48;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v7);
  }
  v14 = a1[15];
  v13 = a1[16];
  if (v13 - v14 != a1[19] - a1[18])
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"sausage_stats.size() == sausage_origins.size()", 46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
  }
  if (v13 != v14)
  {
    v15 = 0;
    do
    {
      v16 = (int **)(v14 + 24 * v15);
      v17 = *v16;
      v18 = v16[1];
      if (*v16 != v18)
      {
        do
        {
          if (*v17 >= 1)
          {
            v19 = a1[18];
            if (0xAAAAAAAAAAAAAAABLL * ((a1[19] - v19) >> 3) <= v15)
              std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
            v20 = std::map<int,std::set<int>>::at(v19 + 24 * v15, v17);
            v23 = *v20;
            v21 = v20 + 1;
            v22 = (_QWORD *)v23;
            if ((uint64_t *)v23 != v21)
            {
              do
              {
                v24 = *((int *)v22 + 7);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v31 - v30) >> 4) <= v24)
                  std::vector<std::pair<int,int>>::__throw_out_of_range[abi:ne180100]();
                if (*(_DWORD *)(v30 + 48 * (int)v24 + 4) != *v17)
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"arc.olabel == word_id", 21);
                  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
                }
                v25 = (uint64_t *)v22[1];
                if (v25)
                {
                  do
                  {
                    v26 = v25;
                    v25 = (uint64_t *)*v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    v26 = (uint64_t *)v22[2];
                    v27 = *v26 == (_QWORD)v22;
                    v22 = v26;
                  }
                  while (!v27);
                }
                v22 = v26;
              }
              while (v26 != v21);
            }
          }
          v17 += 2;
        }
        while (v17 != v18);
        v14 = a1[15];
        v13 = a1[16];
      }
      ++v15;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v13 - v14) >> 3) > v15);
  }
  v29[0] = (void **)&v30;
  std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__destroy_vector::operator()[abi:ne180100](v29);
  return 1;
}

uint64_t **std::__tree<std::__value_type<int,double>,std::__map_value_compare<int,std::__value_type<int,double>,std::less<int>,true>,std::allocator<std::__value_type<int,double>>>::__emplace_unique_key_args<int,std::pair<int const,double> const&>(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v10 + 2) = *a3;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__emplace_unique_key_args<int,std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t **v5;
  int v6;
  uint64_t **v7;
  int v8;
  uint64_t *v10;

  v5 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    v6 = *a2;
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v4;
        v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8)
          break;
        v4 = *v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_10;
      }
      if (v8 >= v6)
        break;
      v4 = v7[1];
      if (!v4)
      {
        v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__construct_node<std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>(a1, a3, (uint64_t)&v10);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v7, v5, v10);
    return v10;
  }
  return (uint64_t *)v7;
}

uint64_t std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::__construct_node<std::pair<int const,kaldi::MinimumBayesRisk::Arc> const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t result;

  v5 = a1 + 8;
  v6 = operator new(0x70uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = std::pair<int const,kaldi::MinimumBayesRisk::Arc>::pair[abi:ne180100]((uint64_t)v6 + 32, a2);
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADFDB5D0(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::pair<int const,kaldi::MinimumBayesRisk::Arc>::pair[abi:ne180100](uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 48), *(const void **)(a2 + 48), *(_QWORD *)(a2 + 56), (uint64_t)(*(_QWORD *)(a2 + 56) - *(_QWORD *)(a2 + 48)) >> 2);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  return a1;
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[10];
    if (v3)
    {
      __p[11] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::set<int>>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    std::__tree<int>::destroy((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t std::vector<std::map<int,std::set<int>>>::__push_back_slow_path<std::map<int,std::set<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::map<int,std::set<int>>::map[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADFDB7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::set<int>>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<int,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>>(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADFDB830(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::set<int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>>(uint64_t *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = result + 1;
    do
    {
      result = std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::set<int>> const&>(v5, v6, v4 + 8, v4 + 8);
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::set<int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, _DWORD *a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::__find_equal<quasar::LmeDataFactoryBase::LmeType>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void *v6;
  uint64_t *result;

  v5 = a1 + 8;
  v6 = operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *a2;
  result = std::set<int>::set[abi:ne180100]((uint64_t *)v6 + 5, (uint64_t)(a2 + 2));
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1ADFDB9B8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<int,std::set<int>>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>,std::reverse_iterator<std::map<int,std::set<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::reverse_iterator<std::map<int,std::set<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<int,std::set<int>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<int,std::set<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

void std::vector<std::map<int,std::set<int>>>::__assign_with_size[abi:ne180100]<std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(uint64_t a1, uint64_t a2, uint64_t **a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a1 + 16;
  v9 = *(uint64_t ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::map<int,std::set<int>>>::__vdeallocate((void **)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::string>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(v8, a2, (uint64_t)a3, *(uint64_t **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (uint64_t **)(a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(v8, (uint64_t)v13, (uint64_t)a3, *(uint64_t **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v17 = v16 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v16 - 24, *(_QWORD **)(v16 - 16));
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADFDBD54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADFDBD5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,std::set<int>>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v5 = v3 - 24;
        std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy((uint64_t)(v3 - 24), *((_QWORD **)v3 - 2));
        v3 = v5;
      }
      while (v5 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*,std::map<int,std::set<int>>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t *v10;
  uint64_t *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::map<int,std::set<int>>::map[abi:ne180100](v4, v6);
      v6 += 24;
      v4 = v11 + 3;
      v11 += 3;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADFDBE5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,std::set<int>>>,std::map<int,std::set<int>>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    do
    {
      v3 = v1 - 24;
      std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(v1 - 24, *(_QWORD **)(v1 - 16));
      v1 = v3;
    }
    while (v3 != v2);
  }
}

uint64_t **std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,std::map<int,std::set<int>> *,0>(uint64_t a1, uint64_t **a2, uint64_t **a3)
{
  uint64_t **v4;
  uint64_t *v6;

  v4 = (uint64_t **)a1;
  if ((uint64_t **)a1 != a2)
  {
    v6 = (uint64_t *)(a1 + 8);
    do
    {
      if (v4 != a3)
        std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>(a3, *v4, v6);
      v4 += 3;
      a3 += 3;
      v6 += 3;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t **std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<int,std::set<int>>,std::__tree_node<std::__value_type<int,std::set<int>>,void *> *,long>>(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t *v16;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v14 = result;
    v15 = v8;
    v16 = v8;
    if (v8)
    {
      v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)v8 + 5, (int *)v9[5], (int *)v9 + 12);
            v8 = v16;
          }
          std::__tree<std::__value_type<int,std::map<std::string,double>>,std::__map_value_compare<int,std::__value_type<int,std::map<std::string,double>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::map<std::string,double>>>>::__node_insert_multi(v5, (uint64_t)v8);
          v8 = v15;
          v16 = v15;
          if (v15)
            v15 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              v11 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v11);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_multi<std::pair<int const,std::set<int>> const&>((uint64_t)v5, (_DWORD *)a2 + 8);
      v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (uint64_t *)a2[2];
          v11 = *v13 == (_QWORD)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1ADFDC0C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::__map_value_compare<int,std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<quasar::MetaInfo::StructuredPrediction::Span::Range>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__emplace_multi<std::pair<int const,std::set<int>> const&>(uint64_t a1, _DWORD *a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;
  uint64_t *v7;

  std::__tree<std::__value_type<int,std::set<int>>,std::__map_value_compare<int,std::__value_type<int,std::set<int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::set<int>>>>::__construct_node<std::pair<int const,std::set<int>> const&>(a1, a2, (uint64_t)&v7);
  v3 = (uint64_t **)(a1 + 8);
  v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7 + 8) >= *((_DWORD *)v4 + 8))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v3, v5, v7);
  return v7;
}

_QWORD *std::vector<std::map<int,double>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    v6 = 24 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADFDC220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::map<int,std::set<int>>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    v6 = 24 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADFDC2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::map<int,std::set<int>>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 24 * a2;
    v6 = 24 * a2;
    v7 = (_QWORD *)(v4 + 8);
    do
    {
      *v7 = 0;
      v7[1] = 0;
      *(v7 - 1) = v7;
      v7 += 3;
      v6 -= 24;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADFDC330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,kaldi::MinimumBayesRisk::Arc>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::__map_value_compare<int,std::__value_type<int,kaldi::MinimumBayesRisk::Arc>,std::less<int>,true>,std::allocator<std::__value_type<int,kaldi::MinimumBayesRisk::Arc>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[10];
    if (v4)
    {
      a2[11] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

void **std::vector<std::map<int,std::set<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  void **v23;

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = (uint64_t)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 24 * a2;
      v14 = 24 * a2;
      v15 = (_QWORD *)(v7 + 8);
      do
      {
        *v15 = 0;
        v15[1] = 0;
        *(v15 - 1) = v15;
        v15 += 3;
        v14 -= 24;
      }
      while (v14);
    }
    else
    {
      v13 = (uint64_t)*(result - 1);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[24 * v8];
    v22 = &v12[24 * v11];
    v16 = &v20[24 * a2];
    v17 = 24 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0;
      v18[1] = 0;
      *(v18 - 1) = v18;
      v18 += 3;
      v17 -= 24;
    }
    while (v17);
    v21 = v16;
    std::vector<std::map<int,std::set<int>>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer(&v19);
  }
  return result;
}

void sub_1ADFDC554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<int,std::set<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer(&v15);
  }
}

void sub_1ADFDC6B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__push_back_slow_path<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[56 * v4];
  v16 = &v10[56 * v9];
  std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::pair[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 56;
  std::vector<std::pair<int,fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADFDC7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LexicographicWeight<fst::TropicalWeightTpl<float>,fst::LatticeWeightTpl<float>>,int>,int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  int v17;
  float v18;
  float v19;
  float *v20;
  char v21;
  BOOL v22;
  float v23;
  float v24;
  float v25;
  int v26;

  v8 = (float *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 3;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v23 = *(a2 - 1);
        v24 = v9[1];
        if (v23 > v24)
        {
          v25 = *v9;
          v26 = *((_DWORD *)a2 - 2);
LABEL_34:
          *(_DWORD *)v9 = v26;
          *(a2 - 2) = v25;
          v9[1] = v23;
          *(a2 - 1) = v24;
          return result;
        }
        if (v23 >= v24)
        {
          v26 = *((_DWORD *)a2 - 2);
          v25 = *v9;
          if (v26 > *(_DWORD *)v9)
            goto LABEL_34;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, v9 + 2, a2 - 2);
      case 4uLL:
        return std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, v9 + 2, v9 + 4, a2 - 2);
      case 5uLL:
        return std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, v9 + 2, v9 + 4, v9 + 6, a2 - 2);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, a2);
          else
            return std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)v9, (uint64_t)a2);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x401)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9 + 2, v15 - 2, a2 - 4);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            v17 = *((_DWORD *)v9 + 1);
            v9[1] = v15[1];
            *((_DWORD *)v15 + 1) = v17;
            if ((a5 & 1) != 0)
              goto LABEL_14;
          }
          v18 = *(v9 - 1);
          v19 = v9[1];
          if (v18 <= v19 && (v18 < v19 || *((_DWORD *)v9 - 2) <= *(_DWORD *)v9))
          {
            result = (uint64_t)std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(v9, a2);
            v9 = (float *)result;
            goto LABEL_19;
          }
LABEL_14:
          v20 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(v9, a2);
          if ((v21 & 1) == 0)
            goto LABEL_17;
          v22 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v9, v20);
          v9 = v20 + 2;
          result = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(v20 + 2, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v22)
              continue;
LABEL_17:
            result = std::__introsort<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,false>(v8, v20, a3, -v11, a5 & 1);
            v9 = v20 + 2;
LABEL_19:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v20;
          if (v22)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,std::pair<int,float> *>(v9, a2, a2, a3);
        return result;
    }
  }
}

float *std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *result, float *a2)
{
  float *v2;
  uint64_t v3;
  float *v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  int v9;
  float *v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  int v14;
  uint64_t v15;

  if (result == a2)
    return result;
  v2 = result + 2;
  if (result + 2 == a2)
    return result;
  v3 = 0;
  v4 = result;
  do
  {
    v5 = v4;
    v4 = v2;
    v6 = v5[3];
    v7 = v5[1];
    if (v6 <= v7)
    {
      if (v6 < v7)
        goto LABEL_20;
      v8 = *v2;
      v9 = *(_DWORD *)v5;
      if (SLODWORD(v8) <= *(_DWORD *)v5)
        goto LABEL_20;
    }
    else
    {
      v8 = *v2;
      v9 = *(_DWORD *)v5;
    }
    *((_DWORD *)v5 + 2) = v9;
    v4[1] = v7;
    v10 = result;
    if (v5 == result)
      goto LABEL_19;
    v11 = v3;
    while (1)
    {
      v12 = (uint64_t)result + v11;
      v13 = *(float *)((char *)result + v11 - 4);
      if (v6 > v13)
      {
        v14 = *(_DWORD *)(v12 - 8);
        goto LABEL_12;
      }
      if (v6 < v13)
      {
        v10 = v5;
        goto LABEL_19;
      }
      v14 = *(_DWORD *)(v12 - 8);
      if (SLODWORD(v8) <= v14)
        break;
LABEL_12:
      v5 -= 2;
      v15 = (uint64_t)result + v11;
      *(_DWORD *)v15 = v14;
      *(float *)(v15 + 4) = v13;
      v11 -= 8;
      if (!v11)
      {
        v10 = result;
        goto LABEL_19;
      }
    }
    v10 = (float *)((char *)result + v11);
LABEL_19:
    *v10 = v8;
    v10[1] = v6;
LABEL_20:
    v2 = v4 + 2;
    v3 += 8;
  }
  while (v4 + 2 != a2);
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  float v4;
  float v5;
  int v6;
  uint64_t v7;

  if (result != a2)
  {
    while (1)
    {
      if (result + 8 == a2)
        return result;
      v3 = result;
      v2 = (int *)(result + 8);
      result += 8;
      v4 = *(float *)(v3 + 12);
      v5 = *(float *)(v3 + 4);
      if (v4 <= v5)
      {
        if (v4 >= v5)
        {
          v6 = *v2;
          if (v6 > *(_DWORD *)v3)
            goto LABEL_7;
        }
      }
      else
      {
        v6 = *v2;
        do
        {
          do
          {
LABEL_7:
            v7 = v3;
            *(_DWORD *)(v3 + 8) = *(_DWORD *)v3;
            *(float *)(v3 + 12) = v5;
            v3 -= 8;
            v5 = *(float *)(v7 - 4);
          }
          while (v4 > v5);
        }
        while (v4 >= v5 && v6 > *(_DWORD *)(v7 - 8));
        *(_DWORD *)v7 = v6;
        *(float *)(v7 + 4) = v4;
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;

  v3 = a2[1];
  v4 = a1[1];
  if (v3 <= v4 && (v3 < v4 || *(_DWORD *)a2 <= *(_DWORD *)a1))
  {
    v9 = a3[1];
    if (v9 <= v3)
    {
      if (v9 < v3)
        return 0;
      v11 = *a3;
      v10 = *a2;
      if (*(_DWORD *)a3 <= *(_DWORD *)a2)
        return 0;
    }
    else
    {
      v10 = *a2;
      v11 = *a3;
    }
    *a2 = v11;
    *a3 = v10;
    a2[1] = v9;
    a3[1] = v3;
    v12 = a2[1];
    v13 = a1[1];
    if (v12 <= v13)
    {
      if (v12 < v13)
        return 1;
      v15 = *a2;
      v14 = *a1;
      if (*(_DWORD *)a2 <= *(_DWORD *)a1)
        return 1;
    }
    else
    {
      v14 = *a1;
      v15 = *a2;
    }
    *a1 = v15;
    *a2 = v14;
    a1[1] = v12;
    result = 2;
    a2[1] = v13;
  }
  else
  {
    v5 = a3[1];
    if (v5 > v3)
    {
      v6 = *a3;
LABEL_6:
      v7 = *a1;
      *a1 = v6;
      *a3 = v7;
      a1[1] = v5;
      a3[1] = v4;
      return 1;
    }
    v16 = *a2;
    if (v5 >= v3)
    {
      v6 = *a3;
      if (*(_DWORD *)a3 > SLODWORD(v16))
        goto LABEL_6;
    }
    v17 = *a1;
    *a1 = v16;
    *a2 = v17;
    a1[1] = v3;
    a2[1] = v4;
    v18 = a3[1];
    if (v18 <= v4)
    {
      if (v18 < v4)
        return 1;
      v19 = *a3;
      if (*(_DWORD *)a3 <= SLODWORD(v17))
        return 1;
    }
    else
    {
      v19 = *a3;
    }
    *a2 = v19;
    *a3 = v17;
    a2[1] = v18;
    result = 2;
    a3[1] = v4;
  }
  return result;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(float *a1, float *a2)
{
  float v2;
  float v3;
  float v4;
  float v5;
  float *i;
  float v7;
  float *v8;
  float v9;
  float *j;
  float v11;
  int v12;
  int v13;
  float v14;
  float *v15;
  float v16;
  float v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(a2 - 1);
  if (v3 <= v4 && (v3 < v4 || SLODWORD(v2) <= *((_DWORD *)a2 - 2)))
  {
    for (i = a1 + 2; i < a2; i += 2)
    {
      v7 = i[1];
      if (v3 > v7 || v3 >= v7 && SLODWORD(v2) > *(_DWORD *)i)
        break;
    }
  }
  else
  {
    v5 = a1[3];
    if (v3 <= v5)
    {
      v8 = a1 + 5;
      do
      {
        if (v3 >= v5 && SLODWORD(v2) > *((_DWORD *)v8 - 3))
          break;
        v9 = *v8;
        v8 += 2;
        v5 = v9;
      }
      while (v3 <= v9);
      i = v8 - 3;
    }
    else
    {
      i = a1 + 2;
    }
  }
  if (i < a2)
  {
    for (j = a2 - 3; v3 > v4 || v3 >= v4 && SLODWORD(v2) > *((_DWORD *)j + 1); j -= 2)
    {
      v11 = *j;
      v4 = v11;
    }
    a2 = j + 1;
  }
  while (i < a2)
  {
    v12 = *(_DWORD *)i;
    *i = *a2;
    *(_DWORD *)a2 = v12;
    v13 = *((_DWORD *)i + 1);
    i[1] = a2[1];
    *((_DWORD *)a2 + 1) = v13;
    v14 = i[3];
    if (v3 <= v14)
    {
      v15 = i + 5;
      do
      {
        if (v3 >= v14 && SLODWORD(v2) > *((_DWORD *)v15 - 3))
          break;
        v16 = *v15;
        v15 += 2;
        v14 = v16;
      }
      while (v3 <= v16);
      i = v15 - 3;
    }
    else
    {
      i += 2;
    }
    do
    {
      do
      {
        a2 -= 2;
        v17 = a2[1];
      }
      while (v3 > v17);
    }
    while (v3 >= v17 && SLODWORD(v2) > *(_DWORD *)a2);
  }
  if (i - 2 != a1)
  {
    *a1 = *(i - 2);
    a1[1] = *(i - 1);
  }
  *(i - 2) = v2;
  *(i - 1) = v3;
  return i;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::pair<int,float> *,kaldi::MinimumBayesRisk::GammaCompare &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  unint64_t v6;
  float v7;
  float *v8;
  float v9;
  float *v10;
  float v11;
  float *v12;
  float *v13;
  float v14;
  int v15;
  float v16;
  float v17;
  float *v18;
  float v19;
  float *v21;
  _DWORD *v22;
  float v24;

  v2 = 0;
  v3 = *a1;
  v4 = a1[1];
  while (1)
  {
    v5 = a1[v2 + 3];
    if (v5 <= v4 && (v5 < v4 || SLODWORD(a1[v2 + 2]) <= SLODWORD(v3)))
      break;
    v2 += 2;
  }
  v6 = (unint64_t)&a1[v2 + 2];
  if (!(v2 * 4))
  {
    if (v6 >= (unint64_t)a2)
      goto LABEL_17;
    v8 = a2 - 2;
    v9 = *(a2 - 1);
    if (v9 > v4)
    {
LABEL_11:
      a2 = v8;
      goto LABEL_17;
    }
    v21 = a2 - 3;
    while (1)
    {
      v22 = v21 + 1;
      if (v9 >= v4)
      {
        if (*v22 > SLODWORD(v3) || v6 >= (unint64_t)v22)
        {
LABEL_43:
          a2 = v21 + 1;
          goto LABEL_17;
        }
      }
      else if (v6 >= (unint64_t)v22)
      {
        goto LABEL_11;
      }
      v8 -= 2;
      v24 = *v21;
      v21 -= 2;
      v9 = v24;
      if (v24 > v4)
        goto LABEL_43;
    }
  }
  v7 = *(a2 - 1);
  if (v7 <= v4)
  {
    v10 = a2 - 3;
    do
    {
      if (v7 >= v4 && *((_DWORD *)v10 + 1) > SLODWORD(v3))
        break;
      v11 = *v10;
      v10 -= 2;
      v7 = v11;
    }
    while (v11 <= v4);
    a2 = v10 + 1;
  }
  else
  {
    a2 -= 2;
  }
LABEL_17:
  v12 = (float *)v6;
  if (v6 < (unint64_t)a2)
  {
    v13 = a2;
    do
    {
      v14 = *v12;
      *v12 = *v13;
      *v13 = v14;
      v15 = *((_DWORD *)v12 + 1);
      v12[1] = v13[1];
      *((_DWORD *)v13 + 1) = v15;
      do
      {
        do
        {
          v12 += 2;
          v16 = v12[1];
        }
        while (v16 > v4);
      }
      while (v16 >= v4 && *(_DWORD *)v12 > SLODWORD(v3));
      v17 = *(v13 - 1);
      if (v17 <= v4)
      {
        v18 = v13 - 3;
        do
        {
          if (v17 >= v4 && *((_DWORD *)v18 + 1) > SLODWORD(v3))
            break;
          v19 = *v18;
          v18 -= 2;
          v17 = v19;
        }
        while (v19 <= v4);
        v13 = v18 + 1;
      }
      else
      {
        v13 -= 2;
      }
    }
    while (v12 < v13);
  }
  if (v12 - 2 != a1)
  {
    *a1 = *(v12 - 2);
    a1[1] = *(v12 - 1);
  }
  *(v12 - 2) = v3;
  *(v12 - 1) = v4;
  return v12 - 2;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2)
{
  uint64_t v4;
  _BOOL8 result;
  float v6;
  float v7;
  float v8;
  int v9;
  float *v10;
  float *v11;
  uint64_t v12;
  int v13;
  float v14;
  float v15;
  int v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  float v21;
  int v22;

  v4 = ((char *)a2 - (char *)a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        v9 = *((_DWORD *)a2 - 2);
LABEL_30:
        *(_DWORD *)a1 = v9;
        *(a2 - 2) = v8;
        a1[1] = v6;
        *(a2 - 1) = v7;
        return result;
      }
      if (v6 >= v7)
      {
        v9 = *((_DWORD *)a2 - 2);
        v8 = *a1;
        if (v9 > *(_DWORD *)a1)
          goto LABEL_30;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4, a1 + 6, a2 - 2);
      return 1;
    default:
      v10 = a1 + 4;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a1 + 2, a1 + 4);
      v11 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
LABEL_6:
  v14 = v11[1];
  v15 = v10[1];
  if (v14 <= v15)
  {
    if (v14 < v15)
      goto LABEL_21;
    v16 = *(_DWORD *)v11;
    v17 = *v10;
    if (*(_DWORD *)v11 <= *(_DWORD *)v10)
      goto LABEL_21;
  }
  else
  {
    v16 = *(_DWORD *)v11;
    v17 = *v10;
  }
  *v11 = v17;
  v11[1] = v15;
  v18 = (uint64_t)a1;
  if (v10 == a1)
    goto LABEL_20;
  v19 = v12;
  while (1)
  {
    v20 = (char *)a1 + v19;
    v21 = *(float *)((char *)a1 + v19 + 12);
    if (v14 <= v21)
    {
      if (v14 < v21)
      {
        v18 = (uint64_t)v10;
        goto LABEL_20;
      }
      v22 = *((_DWORD *)v20 + 2);
      if (v16 <= v22)
      {
        v18 = (uint64_t)a1 + v19 + 16;
LABEL_20:
        *(_DWORD *)v18 = v16;
        *(float *)(v18 + 4) = v14;
        if (++v13 == 8)
          return v11 + 2 == a2;
LABEL_21:
        v10 = v11;
        v12 += 8;
        v11 += 2;
        if (v11 == a2)
          return 1;
        goto LABEL_6;
      }
    }
    else
    {
      v22 = *((_DWORD *)v20 + 2);
    }
    v10 -= 2;
    *((_DWORD *)v20 + 4) = v22;
    *(float *)((char *)a1 + v19 + 20) = v21;
    v19 -= 8;
    if (v19 == -16)
    {
      v18 = (uint64_t)a1;
      goto LABEL_20;
    }
  }
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4)
{
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;

  result = std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 <= v10)
  {
    if (v9 < v10)
      return result;
    v12 = *a4;
    v11 = *a3;
    if (*(_DWORD *)a4 <= *(_DWORD *)a3)
      return result;
  }
  else
  {
    v11 = *a3;
    v12 = *a4;
  }
  *a3 = v12;
  *a4 = v11;
  a3[1] = v9;
  a4[1] = v10;
  v13 = a3[1];
  v14 = a2[1];
  if (v13 <= v14)
  {
    if (v13 < v14)
      return result;
    v16 = *a3;
    v15 = *a2;
    if (*(_DWORD *)a3 <= *(_DWORD *)a2)
      return result;
  }
  else
  {
    v15 = *a2;
    v16 = *a3;
  }
  *a2 = v16;
  *a3 = v15;
  a2[1] = v13;
  a3[1] = v14;
  v17 = a2[1];
  v18 = a1[1];
  if (v17 > v18)
  {
    v19 = *a1;
    v20 = *a2;
LABEL_15:
    *a1 = v20;
    *a2 = v19;
    a1[1] = v17;
    a2[1] = v18;
    return result;
  }
  if (v17 >= v18)
  {
    v20 = *a2;
    v19 = *a1;
    if (*(_DWORD *)a2 > *(_DWORD *)a1)
      goto LABEL_15;
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(float *a1, float *a2, float *a3, float *a4, float *a5)
{
  uint64_t result;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;

  result = std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(a1, a2, a3, a4);
  v11 = a5[1];
  v12 = a4[1];
  if (v11 <= v12)
  {
    if (v11 < v12)
      return result;
    v14 = *a5;
    v13 = *a4;
    if (*(_DWORD *)a5 <= *(_DWORD *)a4)
      return result;
  }
  else
  {
    v13 = *a4;
    v14 = *a5;
  }
  *a4 = v14;
  *a5 = v13;
  a4[1] = v11;
  a5[1] = v12;
  v15 = a4[1];
  v16 = a3[1];
  if (v15 <= v16)
  {
    if (v15 < v16)
      return result;
    v18 = *a4;
    v17 = *a3;
    if (*(_DWORD *)a4 <= *(_DWORD *)a3)
      return result;
  }
  else
  {
    v17 = *a3;
    v18 = *a4;
  }
  *a3 = v18;
  *a4 = v17;
  a3[1] = v15;
  a4[1] = v16;
  v19 = a3[1];
  v20 = a2[1];
  if (v19 <= v20)
  {
    if (v19 < v20)
      return result;
    v22 = *a3;
    v21 = *a2;
    if (*(_DWORD *)a3 <= *(_DWORD *)a2)
      return result;
  }
  else
  {
    v21 = *a2;
    v22 = *a3;
  }
  *a2 = v22;
  *a3 = v21;
  a2[1] = v19;
  a3[1] = v20;
  v23 = a2[1];
  v24 = a1[1];
  if (v23 > v24)
  {
    v25 = *a1;
    v26 = *a2;
LABEL_9:
    *a1 = v26;
    *a2 = v25;
    a1[1] = v23;
    a2[1] = v24;
    return result;
  }
  if (v23 >= v24)
  {
    v26 = *a2;
    v25 = *a1;
    if (*(_DWORD *)a2 > *(_DWORD *)a1)
      goto LABEL_9;
  }
  return result;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *,std::pair<int,float> *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  float v18;
  uint64_t v19;
  float *v20;
  float v21;
  int v22;
  float *v23;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[2 * v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      while (1)
      {
        v15 = v14[1];
        v16 = a1[1];
        if (v15 <= v16)
        {
          if (v15 < v16)
            goto LABEL_12;
          v17 = *v14;
          v18 = *a1;
          if (*(_DWORD *)v14 <= *(_DWORD *)a1)
            goto LABEL_12;
        }
        else
        {
          v17 = *v14;
          v18 = *a1;
        }
        *v14 = v18;
        *a1 = v17;
        v14[1] = v16;
        a1[1] = v15;
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v9, a1);
LABEL_12:
        v14 += 2;
        if (v14 == a3)
        {
          v13 = a3;
          break;
        }
      }
    }
    if (v8 >= 9)
    {
      v19 = (unint64_t)v8 >> 3;
      v20 = a2 - 2;
      do
      {
        v21 = *a1;
        v22 = *((_DWORD *)a1 + 1);
        std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, a4, v19);
        if (v20 == v23)
        {
          *v23 = v21;
          *((_DWORD *)v23 + 1) = v22;
        }
        else
        {
          *v23 = *v20;
          v23[1] = v20[1];
          *v20 = v21;
          *((_DWORD *)v20 + 1) = v22;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>((uint64_t)a1, (uint64_t)(v23 + 2), a4, ((char *)(v23 + 2) - (char *)a1) >> 3);
        }
        v20 -= 2;
      }
      while (v19-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  int v14;
  float v15;
  float *v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  float v23;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (float *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 < a3)
      {
        v10 = v8[1];
        v11 = v8[3];
        if (v10 > v11 || v10 >= v11 && *(_DWORD *)v8 > *((_DWORD *)v8 + 2))
        {
          v8 += 2;
          v7 = v9;
        }
      }
      v12 = v8[1];
      v13 = a4[1];
      if (v12 <= v13)
      {
        v14 = *(_DWORD *)a4;
        v15 = *v8;
        if (v12 < v13 || SLODWORD(v15) <= v14)
        {
          *a4 = v15;
          a4[1] = v12;
          if (v5 >= v7)
          {
            while (1)
            {
              v18 = 2 * v7;
              v7 = (2 * v7) | 1;
              v17 = (float *)(result + 8 * v7);
              v19 = v18 + 2;
              if (v19 < a3)
              {
                v20 = v17[1];
                v21 = v17[3];
                if (v20 > v21 || v20 >= v21 && *(_DWORD *)v17 > *((_DWORD *)v17 + 2))
                {
                  v17 += 2;
                  v7 = v19;
                }
              }
              v22 = v17[1];
              if (v22 > v13)
                break;
              v23 = *v17;
              if (v22 >= v13 && SLODWORD(v23) > v14)
                break;
              *v8 = v23;
              v8[1] = v22;
              v8 = v17;
              if (v5 < v7)
                goto LABEL_16;
            }
          }
          v17 = v8;
LABEL_16:
          *(_DWORD *)v17 = v14;
          v17[1] = v13;
        }
      }
    }
  }
  return result;
}

float std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float result;

  v3 = 0;
  v4 = a3 - 2;
  if (a3 < 2)
    v4 = a3 - 1;
  v5 = v4 >> 1;
  do
  {
    v6 = a1;
    a1 += 8 * (v3 + 1);
    v7 = 2 * v3;
    v3 = (2 * v3) | 1;
    v8 = v7 + 2;
    if (v8 < a3)
    {
      v9 = *(float *)(a1 + 4);
      v10 = *(float *)(a1 + 12);
      if (v9 > v10 || v9 >= v10 && *(_DWORD *)a1 > *(_DWORD *)(a1 + 8))
      {
        a1 += 8;
        v3 = v8;
      }
    }
    *(_DWORD *)v6 = *(_DWORD *)a1;
    result = *(float *)(a1 + 4);
    *(float *)(v6 + 4) = result;
  }
  while (v3 <= v5);
  return result;
}

uint64_t std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,kaldi::MinimumBayesRisk::GammaCompare &,std::pair<int,float> *>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float *v6;
  float v7;
  float v8;
  int v9;
  float v10;
  float *v11;
  unint64_t v12;
  float v13;
  float v14;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v5 = v4 >> 1;
    v6 = (float *)(result + 8 * (v4 >> 1));
    v7 = v6[1];
    v8 = *(float *)(a2 - 4);
    if (v7 <= v8)
    {
      if (v7 < v8)
        return result;
      v10 = *v6;
      v9 = *(_DWORD *)(a2 - 8);
      if (*(_DWORD *)v6 <= v9)
        return result;
    }
    else
    {
      v9 = *(_DWORD *)(a2 - 8);
      v10 = *v6;
    }
    *(float *)(a2 - 8) = v10;
    *(float *)(a2 - 4) = v7;
    if (v4 >= 2)
    {
      while (1)
      {
        v12 = v5 - 1;
        v5 = (v5 - 1) >> 1;
        v11 = (float *)(result + 8 * v5);
        v13 = v11[1];
        if (v13 <= v8)
        {
          if (v13 < v8)
            break;
          v14 = *v11;
          if (*(_DWORD *)v11 <= v9)
            break;
        }
        else
        {
          v14 = *v11;
        }
        *v6 = v14;
        v6[1] = v13;
        v6 = (float *)(result + 8 * v5);
        if (v12 <= 1)
          goto LABEL_13;
      }
    }
    v11 = v6;
LABEL_13:
    *(_DWORD *)v11 = v9;
    v11[1] = v8;
  }
  return result;
}

uint64_t std::vector<kaldi::MinimumBayesRisk::Arc>::__push_back_slow_path<kaldi::MinimumBayesRisk::Arc const&>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x1C71C71C71C71C72 * ((a1[2] - *a1) >> 3);
  if (0x8E38E38E38E38E39 * ((a1[2] - *a1) >> 3) >= 0x1C71C71C71C71C7)
    v6 = 0x38E38E38E38E38ELL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TranslationToken>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[72 * v3];
  v13 = &v7[72 * v6];
  std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 72;
  std::vector<kaldi::MinimumBayesRisk::Arc>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1ADFDDA44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v4;
  uint64_t v5;
  _QWORD *result;

  v4 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 24) = *((_QWORD *)a3 + 3);
  *(_QWORD *)&v4 = *((_QWORD *)a3 + 4);
  *(_QWORD *)(a2 + 40) = 0;
  v5 = a2 + 40;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  result = std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a2 + 40), *((const void **)a3 + 5), *((_QWORD *)a3 + 6), (uint64_t)(*((_QWORD *)a3 + 6) - *((_QWORD *)a3 + 5)) >> 2);
  *(_DWORD *)(v5 + 24) = *((_DWORD *)a3 + 16);
  return result;
}

uint64_t std::vector<kaldi::MinimumBayesRisk::Arc>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>((uint64_t)(a1 + 2), a1[1], (__int128 *)a1[1], *a1, (__int128 *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 *v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 = (__int128 *)((char *)v9 - 72);
      std::allocator<kaldi::MinimumBayesRisk::Arc>::construct[abi:ne180100]<kaldi::MinimumBayesRisk::Arc,kaldi::MinimumBayesRisk::Arc const&>(a1, v7 - 72, v9);
      v7 = *((_QWORD *)&v16 + 1) - 72;
      *((_QWORD *)&v16 + 1) -= 72;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void sub_1ADFDDBE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<kaldi::MinimumBayesRisk::Arc>,std::reverse_iterator<kaldi::MinimumBayesRisk::Arc*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)(v1 + 40);
    if (v3)
    {
      *(_QWORD *)(v1 + 48) = v3;
      operator delete(v3);
    }
    v1 += 72;
  }
}

uint64_t std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<kaldi::MinimumBayesRisk::Arc>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    *(_QWORD *)(a1 + 16) = v2 - 72;
    v5 = *(void **)(v2 - 32);
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 72;
    }
  }
}

uint64_t std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__emplace_back_slow_path<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  _QWORD *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[12 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = (char *)&v10[12 * v9];
  *v11 = *(_QWORD *)a2;
  v12 = *(_QWORD *)(a2 + 8);
  v11[2] = 0;
  v11 += 2;
  *(v11 - 1) = v12;
  v11[1] = 0;
  v11[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v11, *(const void **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
  v10[12 * v4 + 10] = *(_DWORD *)(a2 + 40);
  v16 += 6;
  std::vector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_1ADFDDE1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::addPathsFromOneBest@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  int v43;
  uint64_t v46;
  void **v47;
  uint64_t v49;
  int v50;
  int v51;

  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 176))(a1, v7);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
  result = (*(uint64_t (**)(uint64_t, uint64_t, float))(*(_QWORD *)a1 + 184))(a1, v8, 0.0);
  v11 = *a2;
  v10 = a2[1];
  if (v10 != *a2)
  {
    v12 = 0;
    v13 = 0;
    v47 = (void **)(a5 + 24);
    v14 = 0xFFFFFFFFLL;
    do
    {
      v46 = v12;
      v15 = (uint64_t *)(*(_QWORD *)(v11 + 24 * v12) + 24 * *(int *)(*a4 + 4 * v12));
      v17 = *v15;
      v16 = v15[1];
      if (*v15 != v16)
      {
        do
        {
          v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
          v19 = v18;
          v21 = *(_DWORD **)(a5 + 8);
          v20 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v21 >= v20)
          {
            v23 = *(_DWORD **)a5;
            v24 = ((uint64_t)v21 - *(_QWORD *)a5) >> 2;
            v25 = v24 + 1;
            if ((unint64_t)(v24 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v26 = v20 - (_QWORD)v23;
            if (v26 >> 1 > v25)
              v25 = v26 >> 1;
            if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
              v27 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v27 = v25;
            if (v27)
            {
              v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 16, v27);
              v23 = *(_DWORD **)a5;
              v21 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v28 = 0;
            }
            v29 = &v28[4 * v24];
            *(_DWORD *)v29 = v19;
            v22 = v29 + 4;
            while (v21 != v23)
            {
              v30 = *--v21;
              *((_DWORD *)v29 - 1) = v30;
              v29 -= 4;
            }
            *(_QWORD *)a5 = v29;
            *(_QWORD *)(a5 + 8) = v22;
            *(_QWORD *)(a5 + 16) = &v28[4 * v27];
            if (v23)
              operator delete(v23);
          }
          else
          {
            *v21 = v18;
            v22 = v21 + 1;
          }
          *(_QWORD *)(a5 + 8) = v22;
          v49 = 0;
          v50 = 0;
          v51 = v19;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v7, &v49);
          if ((_DWORD)v14 != -1)
          {
            v49 = 0;
            v50 = 0;
            v51 = v19;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v14, &v49);
          }
          v31 = quasar::addPhoneSequence(a1, v17 + 48, v19, a3, 0, 1);
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
          v14 = v32;
          v34 = *(char **)(a5 + 32);
          v33 = *(_QWORD *)(a5 + 40);
          if ((unint64_t)v34 >= v33)
          {
            v36 = (char *)*v47;
            v37 = (v34 - (_BYTE *)*v47) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v39 = v33 - (_QWORD)v36;
            if (v39 >> 1 > v38)
              v38 = v39 >> 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL)
              v40 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v40 = v38;
            if (v40)
            {
              v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a5 + 40, v40);
              v36 = *(char **)(a5 + 24);
              v34 = *(char **)(a5 + 32);
            }
            else
            {
              v41 = 0;
            }
            v42 = &v41[4 * v37];
            *(_DWORD *)v42 = v14;
            v35 = v42 + 4;
            while (v34 != v36)
            {
              v43 = *((_DWORD *)v34 - 1);
              v34 -= 4;
              *((_DWORD *)v42 - 1) = v43;
              v42 -= 4;
            }
            *(_QWORD *)(a5 + 24) = v42;
            *(_QWORD *)(a5 + 32) = v35;
            *(_QWORD *)(a5 + 40) = &v41[4 * v40];
            if (v36)
              operator delete(v36);
          }
          else
          {
            *(_DWORD *)v34 = v32;
            v35 = v34 + 4;
          }
          *(_QWORD *)(a5 + 32) = v35;
          ++v13;
          LODWORD(v49) = 0;
          HIDWORD(v49) = v13;
          v50 = 0;
          v51 = v14;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v31, &v49);
          v49 = 0;
          v50 = 0;
          v51 = v8;
          result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 208))(a1, v14, &v49);
          v17 += 224;
        }
        while (v17 != v16);
        v11 = *a2;
        v10 = a2[1];
      }
      v12 = v46 + 1;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v10 - v11) >> 3) > v46 + 1);
  }
  return result;
}

void sub_1ADFDE1A8(_Unwind_Exception *a1)
{
  kaldi::LatticeWordAligner::ComputationState *v1;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::addPathsFromAlternatives(uint64_t result, _QWORD *a2, uint64_t *a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  unsigned int v29;
  _QWORD *v30;
  unsigned int v31;
  unint64_t v32;
  void *__p[2];
  char v35;
  std::string v36;
  uint64_t v37;
  int v38;
  int v39;

  v5 = *a3;
  if (a3[1] != *a3)
  {
    v7 = result;
    v8 = 0;
    v9 = -1;
    v30 = a5;
    do
    {
      v10 = (uint64_t *)(v5 + 24 * v8);
      v11 = *v10;
      v12 = -1227133513
          * ((*(_QWORD *)(v11 + 24 * *(int *)(*a5 + 4 * v8) + 8) - *(_QWORD *)(v11 + 24 * *(int *)(*a5 + 4 * v8))) >> 5);
      v28 = v9
          - 1227133513
          * ((*(_QWORD *)(v11 + 24 * *(int *)(*a5 + 4 * v8) + 8) - *(_QWORD *)(v11 + 24 * *(int *)(*a5 + 4 * v8))) >> 5);
      if (0xAAAAAAAAAAAAAAABLL * ((v10[1] - *v10) >> 3) >= 2)
      {
        v32 = v8;
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
        v15 = *(unsigned int *)(*a2 + 4 * (v9 + 1));
        v37 = 0;
        v38 = 0;
        v39 = v13;
        v29 = v13;
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 208))(v7, v15, &v37);
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
        if (v9 < v28)
        {
          v16 = v9 + 2;
          v17 = v31;
          do
          {
            v18 = v14;
            if (v12 != 1)
              v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
            LODWORD(v37) = 0;
            HIDWORD(v37) = v16;
            v38 = 0;
            v39 = v18;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 208))(v7, v17, &v37);
            ++v16;
            v17 = v18;
            --v12;
          }
          while (v12);
        }
        v19 = *(_DWORD *)(a2[3] + 4 * v28);
        v37 = 0;
        v38 = 0;
        v39 = v19;
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 208))(v7, v14, &v37);
        v8 = v32;
        v5 = *a3;
        v20 = *(_QWORD *)(*a3 + 24 * v32);
        if (*(_QWORD *)(*a3 + 24 * v32 + 8) == v20)
        {
          a5 = v30;
        }
        else
        {
          v21 = 0;
          a5 = v30;
          do
          {
            if (v21 != *(_DWORD *)(*a5 + 4 * v8))
            {
              v22 = (uint64_t *)(v20 + 24 * v21);
              v23 = *v22;
              v24 = v22[1];
              v25 = v29;
              while (v23 != v24)
              {
                quasar::copyAndTrim(v23 + 48, &v36);
                std::string::basic_string[abi:ne180100]<0>(__p, " .");
                quasar::splitStringSimple((uint64_t)&v36, (uint64_t *)__p, &v37);
                if (v35 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v36.__r_.__value_.__l.__data_);
                v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 200))(v7);
                v36.__r_.__value_.__r.__words[0] = 0;
                LODWORD(v36.__r_.__value_.__r.__words[1]) = 0;
                HIDWORD(v36.__r_.__value_.__r.__words[1]) = v26;
                (*(void (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v7 + 208))(v7, v25, &v36);
                v25 = quasar::addPhoneSequence(v7, v23 + 48, v26, a4, 0, 1);
                v36.__r_.__value_.__r.__words[0] = (std::string::size_type)&v37;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v36);
                v23 += 224;
              }
              v37 = 0;
              v38 = 0;
              v39 = v31;
              result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7 + 208))(v7, v25, &v37);
              v8 = v32;
              v5 = *a3;
              a5 = v30;
            }
            ++v21;
            v20 = *(_QWORD *)(v5 + 24 * v8);
          }
          while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v5 + 24 * v8 + 8) - v20) >> 3) > v21);
        }
      }
      ++v8;
      v9 = v28;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - v5) >> 3) > v8);
  }
  return result;
}

void sub_1ADFDE534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  __p = &a28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::createSearchFst(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  void *v8[3];
  void *__p;
  void *v10;

  fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(a4);
  quasar::addPathsFromOneBest((uint64_t)a4, a1, a2, a3, (uint64_t)v8);
  quasar::addPathsFromAlternatives((uint64_t)a4, v8, a1, a2, a3);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
}

void sub_1ADFDE614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  _DWORD *v11;
  int v12;

  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a9);
  *v9 = &unk_1E5D256C0;
  v11 = (_DWORD *)v9[1];
  if (v11)
  {
    v12 = v11[14] - 1;
    v11[14] = v12;
    if (!v12)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

void quasar::getConfidenceScores(uint64_t a1@<X0>, int **a2@<X8>)
{
  const void *v3;
  uint64_t v4;
  int *v5;
  double *v6;
  double *v7;
  int *v8;
  _QWORD *v9;
  int v10;
  int v11;
  int *v12;
  int *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  int *v19;
  int v20;
  int v21;
  _QWORD v22[3];
  double *v23;
  double *v24;
  uint64_t v25;

  v3 = *(const void **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v4)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else if (v4 - (_QWORD)v3 == 8)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v5 = (int *)operator new(4uLL);
    *a2 = v5;
    *v5++ = 1000;
    a2[1] = v5;
    a2[2] = v5;
  }
  else
  {
    v23 = 0;
    v24 = 0;
    v25 = 0;
    std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>(&v23, v3, v4, (v4 - (uint64_t)v3) >> 3);
    v22[2] = 0;
    v22[0] = v23;
    v22[1] = ((unint64_t)((char *)v24 - (char *)v23) >> 3);
    kaldi::VectorBase<double>::ApplySoftMax((uint64_t)v22);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v6 = v23;
    v7 = v24;
    if (v23 != v24)
    {
      v8 = 0;
      v9 = a2 + 2;
      do
      {
        v10 = vcvtpd_s64_f64(*v6 * 1000.0);
        if ((unint64_t)v8 >= *v9)
        {
          v13 = *a2;
          v14 = v8 - *a2;
          v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v16 = *v9 - (_QWORD)v13;
          if (v16 >> 1 > v15)
            v15 = v16 >> 1;
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
            v17 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
          {
            v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 2), v17);
            v13 = *a2;
            v8 = a2[1];
          }
          else
          {
            v18 = 0;
          }
          v19 = (int *)&v18[4 * v14];
          if (v10 >= 1000)
            v20 = 0;
          else
            v20 = 1000 - v10;
          *v19 = v20;
          v12 = v19 + 1;
          while (v8 != v13)
          {
            v21 = *--v8;
            *--v19 = v21;
          }
          *a2 = v19;
          a2[1] = v12;
          a2[2] = (int *)&v18[4 * v17];
          if (v13)
            operator delete(v13);
        }
        else
        {
          if (v10 >= 1000)
            v11 = 0;
          else
            v11 = 1000 - v10;
          *v8 = v11;
          v12 = v8 + 1;
        }
        a2[1] = v12;
        ++v6;
        v8 = v12;
      }
      while (v6 != v7);
      v6 = v23;
    }
    if (v6)
    {
      v24 = v6;
      operator delete(v6);
    }
  }
}

void sub_1ADFDE848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::findPossibleKeywordLocations(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, __int128 *a7@<X8>)
{
  void **v12;
  __int128 *v13;
  const void **i;
  uint64_t v15;
  void *v16;
  void *v17;
  int v18;
  unsigned __int8 *v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t v24;
  void *v25;
  void *v26;
  int v27;
  unsigned __int8 *v28;
  uint64_t v29;
  void **v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  double *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  std::string::size_type v49;
  BOOL v50;
  std::string *v51;
  int v52;
  int v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  int v62;
  std::string::size_type size;
  char *v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  void **j;
  void *__p[2];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  char *v90;
  char *v91;
  std::string v92;
  void **v93;
  void **v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  __int128 v102;
  char *v103;

  v102 = 0uLL;
  v103 = 0;
  quasar::createSearchFst(a2, a5, a3, &v100);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v100);
  std::string::basic_string[abi:ne180100]<0>(__p, " .");
  quasar::getPhoneFst(a1, a5, (uint64_t *)__p, 0, 0, &v98);
  if (SBYTE7(v73) < 0)
    operator delete(__p[0]);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v98);
  quasar::symbolicMatch(a4, (uint64_t)&v98, (uint64_t)&v100, a6, &v96);
  v93 = 0;
  v94 = 0;
  v95 = 0;
  quasar::FstToStrings((uint64_t)&v96, (uint64_t *)&v93, 2, a6, 0);
  if (v93 == v94)
    goto LABEL_103;
  std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,false>((unsigned __int8 *)v93, (unsigned __int8 **)v94, 126 - 2 * __clz(((char *)v94 - (char *)v93) >> 5), 1);
  v12 = v93;
  v13 = (__int128 *)v94;
  if (v93 == v94)
    goto LABEL_49;
  for (i = (const void **)(v93 + 4); ; i += 4)
  {
    if (i == (const void **)v13)
      goto LABEL_49;
    v15 = *((unsigned __int8 *)v12 + 23);
    if ((v15 & 0x80u) == 0)
      v16 = (void *)*((unsigned __int8 *)v12 + 23);
    else
      v16 = v12[1];
    v17 = (void *)*((unsigned __int8 *)v12 + 55);
    v18 = (char)v17;
    if ((char)v17 < 0)
      v17 = v12[5];
    if (v16 == v17)
      break;
LABEL_23:
    v12 += 4;
  }
  if (v18 >= 0)
    v19 = (unsigned __int8 *)i;
  else
    v19 = (unsigned __int8 *)*i;
  if ((v15 & 0x80) == 0)
  {
    if (!*((_BYTE *)v12 + 23))
      goto LABEL_24;
    v20 = 0;
    while (*((unsigned __int8 *)v12 + v20) == v19[v20])
    {
      if (v15 == ++v20)
        goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (memcmp(*v12, v19, (size_t)v12[1]))
    goto LABEL_23;
LABEL_24:
  if (v12 == (void **)v13)
  {
LABEL_49:
    v32 = (uint64_t)v13;
    goto LABEL_50;
  }
  v21 = v12 + 8;
  if (v12 + 8 == (void **)v13)
    goto LABEL_48;
  v22 = v12 + 4;
  while (2)
  {
    v23 = v22;
    v22 = v21;
    v24 = *((unsigned __int8 *)v12 + 23);
    if ((v24 & 0x80u) == 0)
      v25 = (void *)*((unsigned __int8 *)v12 + 23);
    else
      v25 = v12[1];
    v26 = (void *)*((unsigned __int8 *)v23 + 55);
    v27 = (char)v26;
    if ((char)v26 < 0)
      v26 = v23[5];
    if (v25 == v26)
    {
      if (v27 >= 0)
        v28 = (unsigned __int8 *)v22;
      else
        v28 = (unsigned __int8 *)*v22;
      if ((v24 & 0x80) != 0)
      {
        if (memcmp(*v12, v28, (size_t)v12[1]))
          goto LABEL_43;
      }
      else if (*((_BYTE *)v12 + 23))
      {
        v29 = 0;
        while (*((unsigned __int8 *)v12 + v29) == v28[v29])
        {
          if (v24 == ++v29)
            goto LABEL_46;
        }
        goto LABEL_43;
      }
    }
    else
    {
LABEL_43:
      v30 = v12 + 4;
      if (*((char *)v12 + 55) < 0)
        operator delete(*v30);
      v31 = *(_OWORD *)v22;
      v12[6] = v22[2];
      *(_OWORD *)v30 = v31;
      *((_BYTE *)v23 + 55) = 0;
      *(_BYTE *)v22 = 0;
      *((_DWORD *)v12 + 14) = *((_DWORD *)v23 + 14);
      v12 += 4;
    }
LABEL_46:
    v21 = v22 + 4;
    if (v22 + 4 != (void **)v13)
      continue;
    break;
  }
  v13 = (__int128 *)v94;
LABEL_48:
  v32 = (uint64_t)(v12 + 4);
LABEL_50:
  std::vector<std::pair<std::string,float>>::erase((uint64_t)&v93, v32, v13);
  v33 = 126 - 2 * __clz(((char *)v94 - (char *)v93) >> 5);
  if (v94 == v93)
    v34 = 0;
  else
    v34 = v33;
  std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *,false>((uint64_t)v93, v94, v34, 1);
  v35 = v93;
  for (j = v94; v35 != j; v35 += 4)
  {
    v36 = *((_QWORD *)&v102 + 1);
    if (*((_QWORD *)&v102 + 1) >= (unint64_t)v103)
    {
      v38 = (uint64_t)(*((_QWORD *)&v102 + 1) - v102) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v40 = (uint64_t)&v103[-v102];
      if ((uint64_t)&v103[-v102] >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v103, v41);
      else
        v42 = 0;
      v43 = &v42[16 * v38];
      *(_QWORD *)v43 = 0;
      *((_QWORD *)v43 + 1) = 0;
      v44 = (char *)*((_QWORD *)&v102 + 1);
      v45 = (char *)v102;
      v46 = v43;
      if (*((_QWORD *)&v102 + 1) != (_QWORD)v102)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v44 - 1);
          v46 -= 16;
          v44 -= 16;
        }
        while (v44 != v45);
        v44 = (char *)v102;
      }
      v37 = (double *)(v43 + 16);
      *(_QWORD *)&v102 = v46;
      *((_QWORD *)&v102 + 1) = v43 + 16;
      v103 = &v42[16 * v41];
      if (v44)
        operator delete(v44);
    }
    else
    {
      **((_QWORD **)&v102 + 1) = 0;
      *(_QWORD *)(v36 + 8) = 0;
      v37 = (double *)(v36 + 16);
    }
    *((_QWORD *)&v102 + 1) = v37;
    if (*((char *)v35 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v92, (const std::string::value_type *)*v35, (std::string::size_type)v35[1]);
    }
    else
    {
      v47 = *(_OWORD *)v35;
      v92.__r_.__value_.__r.__words[2] = (std::string::size_type)v35[2];
      *(_OWORD *)&v92.__r_.__value_.__l.__data_ = v47;
    }
    v48 = 0;
    v49 = 0;
    *(v37 - 1) = *((float *)v35 + 6);
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v50 = (v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
    do
    {
      if (v50)
        v51 = (std::string *)v92.__r_.__value_.__r.__words[0];
      else
        v51 = &v92;
      v52 = v51->__r_.__value_.__s.__data_[v49];
      v53 = v52 - 1;
      if (v48 >= v91)
      {
        v54 = v89;
        v55 = (v48 - v89) >> 2;
        v56 = v55 + 1;
        if ((unint64_t)(v55 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v57 = v91 - v89;
        if ((v91 - v89) >> 1 > v56)
          v56 = v57 >> 1;
        if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
          v58 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v91, v58);
          v54 = v89;
          v48 = v90;
        }
        else
        {
          v59 = 0;
        }
        v60 = &v59[4 * v55];
        *(_DWORD *)v60 = v53;
        v61 = v60 + 4;
        while (v48 != v54)
        {
          v62 = *((_DWORD *)v48 - 1);
          v48 -= 4;
          *((_DWORD *)v60 - 1) = v62;
          v60 -= 4;
        }
        v89 = v60;
        v90 = v61;
        v91 = &v59[4 * v58];
        if (v54)
          operator delete(v54);
        v48 = v61;
      }
      else
      {
        *(_DWORD *)v48 = v53;
        v48 += 4;
      }
      v90 = v48;
      if (v49 && v52 - 2 != *(_DWORD *)&v89[4 * (v49 - 1)])
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Invalid path found.", 19);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      ++v49;
      v50 = (v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
      size = HIBYTE(v92.__r_.__value_.__r.__words[2]);
      if ((v92.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v92.__r_.__value_.__l.__size_;
    }
    while (size > v49);
    v64 = v89;
    *((_DWORD *)v37 - 4) = *(_DWORD *)v89;
    *((_DWORD *)v37 - 3) = *((_DWORD *)v48 - 1);
    v90 = v64;
    operator delete(v64);
    if (SHIBYTE(v92.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v92.__r_.__value_.__l.__data_);
  }
  *a7 = v102;
  *((_QWORD *)a7 + 2) = v103;
  a7 = &v102;
LABEL_103:
  *(_QWORD *)a7 = 0;
  *((_QWORD *)a7 + 1) = 0;
  *((_QWORD *)a7 + 2) = 0;
  __p[0] = &v93;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  v96 = &unk_1E5D256C0;
  v65 = v97;
  if (v97)
  {
    v66 = *(_DWORD *)(v97 + 56) - 1;
    *(_DWORD *)(v97 + 56) = v66;
    if (!v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  v98 = &unk_1E5D256C0;
  v67 = v99;
  if (v99)
  {
    v68 = *(_DWORD *)(v99 + 56) - 1;
    *(_DWORD *)(v99 + 56) = v68;
    if (!v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  }
  v100 = &unk_1E5D256C0;
  v69 = v101;
  if (v101)
  {
    v70 = *(_DWORD *)(v101 + 56) - 1;
    *(_DWORD *)(v101 + 56) = v70;
    if (!v70)
      (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
  }
  if ((_QWORD)v102)
  {
    *((_QWORD *)&v102 + 1) = v102;
    operator delete((void *)v102);
  }
}

void sub_1ADFDEF48(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;
  _DWORD *v4;
  int v5;
  _DWORD *v6;
  int v7;
  _DWORD *v8;
  int v9;
  void *v10;
  void **v11;

  v3 = *(void **)(v1 - 232);
  if (v3)
  {
    *(_QWORD *)(v1 - 224) = v3;
    operator delete(v3);
  }
  if (*(char *)(v1 - 185) < 0)
    operator delete(*(void **)(v1 - 208));
  v11 = (void **)(v1 - 184);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v11);
  *(_QWORD *)(v1 - 160) = &unk_1E5D256C0;
  v4 = *(_DWORD **)(v1 - 152);
  if (v4)
  {
    v5 = v4[14] - 1;
    v4[14] = v5;
    if (!v5)
      (*(void (**)(_DWORD *))(*(_QWORD *)v4 + 8))(v4);
  }
  *(_QWORD *)(v1 - 144) = &unk_1E5D256C0;
  v6 = *(_DWORD **)(v1 - 136);
  if (v6)
  {
    v7 = v6[14] - 1;
    v6[14] = v7;
    if (!v7)
      (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
  }
  *(_QWORD *)(v1 - 128) = &unk_1E5D256C0;
  v8 = *(_DWORD **)(v1 - 120);
  if (v8)
  {
    v9 = v8[14] - 1;
    v8[14] = v9;
    if (!v9)
      (*(void (**)(_DWORD *))(*(_QWORD *)v8 + 8))(v8);
  }
  v10 = *(void **)(v1 - 112);
  if (v10)
  {
    *(_QWORD *)(v1 - 104) = v10;
    operator delete(v10);
  }
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,float>>::erase(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  if ((__int128 *)a2 != a3)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>((uint64_t)&v9, a3, *(__int128 **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        if (*(char *)(v7 - 9) < 0)
          operator delete(*(void **)(v7 - 32));
        v7 -= 32;
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void quasar::stitchResult(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, unsigned int a5@<W4>, uint64_t a6@<X8>, double a7@<D0>)
{
  const quasar::Token *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const std::string::value_type *v18;
  const std::string::value_type *v19;
  int v20;
  const std::string::value_type *v21;
  std::string::size_type v22;
  quasar::QsrText *v23;
  uint64_t v24;
  _QWORD *v25;
  void **v26;
  uint64_t v27;
  std::string *v28;
  uint64_t p_size;
  uint64_t v30;
  const quasar::Token *v31;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  unsigned __int8 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  std::string v53;
  int v54;
  int v55;
  int v56;
  double v57;

  v57 = a7;
  *(_QWORD *)(a6 + 8) = 0;
  *(_QWORD *)(a6 + 16) = 0;
  *(_QWORD *)a6 = 0;
  v13 = *(const quasar::Token **)a3;
  std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>((uint64_t *)a6, 0, *(const quasar::Token **)a3, *(_QWORD *)a3 + 224 * a4, a4);
  v56 = *((_DWORD *)v13 + 56 * a4 + 7);
  v54 = *((_DWORD *)v13 + 56 * a5 + 9);
  v55 = v54;
  std::string::basic_string[abi:ne180100]<0>(&v53, "");
  v15 = *a1;
  v14 = a1[1];
  while (v15 != v14)
  {
    v16 = *(_QWORD *)(v15 + 24);
    if (*(_QWORD *)(v15 + 32) != v16)
    {
      v19 = *(const std::string::value_type **)(v16 + 8);
      v17 = v16 + 8;
      v18 = v19;
      v20 = *(char *)(v17 + 23);
      if (v20 >= 0)
        v21 = (const std::string::value_type *)v17;
      else
        v21 = v18;
      if (v20 >= 0)
        v22 = *(unsigned __int8 *)(v17 + 23);
      else
        v22 = *(_QWORD *)(v17 + 8);
      std::string::append(&v53, v21, v22);
    }
    v15 += 72;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, ".");
  std::string::basic_string[abi:ne180100]<0>(&v50, " ");
  v23 = (quasar::QsrText *)quasar::replaceAll((uint64_t)&v53, (uint64_t)__p, (char *)&v50);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  v49 = *((_BYTE *)v13 + 224 * a5 + 44);
  v50 = 0;
  v51 = 0;
  v52 = 0;
  v24 = quasar::QsrText::SingletonInstance(v23);
  if (quasar::QsrText::encodeTokenQsrText(v24, a2, (uint64_t)&v50))
  {
    if (quasar::gLogLevel >= 4)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"#Corrections: QsrText-encoded keyword: ", 39);
      if (v52 >= 0)
        v26 = &v50;
      else
        v26 = (void **)v50;
      if (v52 >= 0)
        v27 = HIBYTE(v52);
      else
        v27 = v51;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)v26, v27);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    LOBYTE(__p[0]) = 0;
    v28 = *(std::string **)(a6 + 8);
    if ((unint64_t)v28 >= *(_QWORD *)(a6 + 16))
    {
      p_size = std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>((uint64_t *)a6, (uint64_t)&v50, &v56, &v55, &v54, &v57, &v49, (unsigned __int8 *)__p, (__int128 *)&v53);
    }
    else
    {
      std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(a6 + 16, v28, (uint64_t)&v50, &v56, &v55, &v54, &v57, &v49, (unsigned __int8 *)__p, (__int128 *)&v53);
      p_size = (uint64_t)&v28[9].__r_.__value_.__l.__size_;
      *(_QWORD *)(a6 + 8) = (char *)v28 + 224;
    }
    *(_QWORD *)(a6 + 8) = p_size;
  }
  v30 = *(_QWORD *)(a3 + 8);
  if (0x6DB6DB6DB6DB6DB7 * ((v30 - *(_QWORD *)a3) >> 5) > (unint64_t)(a5 + 1))
  {
    v31 = (const quasar::Token *)(*(_QWORD *)a3 + 224 * a5 + 224);
    std::vector<quasar::Token>::__insert_with_size[abi:ne180100]<std::__wrap_iter<quasar::Token const*>,std::__wrap_iter<quasar::Token const*>>((uint64_t *)a6, *(__int128 **)(a6 + 8), v31, v30, 0x6DB6DB6DB6DB6DB7 * ((v30 - (uint64_t)v31) >> 5));
  }
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
}

void sub_1ADFDF3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  if (*(char *)(v3 - 129) < 0)
    operator delete(*(void **)(v3 - 152));
  if (*(char *)(v3 - 105) < 0)
    operator delete(*(void **)(v3 - 128));
  std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void quasar::KeywordFinderConfig::registerParams(uint64_t a1, quasar::SystemConfig *this, const void **a3)
{
  void *v6[2];
  char v7;
  std::string __p;
  std::string v9;

  quasar::SystemConfig::getPrefix(this, &v9);
  std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v9.__r_.__value_.__l.__data_, a3, (uint64_t)&__p);
  quasar::SystemConfig::setPrefix((std::string *)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-phonomap-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Phonomap file as an fst. This must be input-arc sorted");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "phonetic-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v6, "Symbol table file representing the phone set.");
  quasar::SystemConfig::Register<std::string>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 24, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "default-n-best-size");
  std::string::basic_string[abi:ne180100]<0>(v6, "The default value for n-best size.");
  quasar::SystemConfig::Register<int>((uint64_t)this, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 48, (uint64_t)v6, 1, 44, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(v6[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  quasar::SystemConfig::setPrefix((std::string *)this, &v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1ADFDF610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::KeywordFinder::KeywordFinder(uint64_t a1, __int128 *a2)
{
  __int128 v4;

  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)a1 = 4;
  *(_QWORD *)(a1 + 8) = a1 + 16;
  *(_QWORD *)(a1 + 24) = 0;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)(a1 + 32));
  *(_OWORD *)(a1 + 1592) = 0u;
  *(_OWORD *)(a1 + 1608) = 0u;
  *(_OWORD *)(a1 + 1576) = 0u;
  *(_OWORD *)(a1 + 1632) = 0u;
  *(_OWORD *)(a1 + 1648) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 1672), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(a1 + 1688) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 1672) = v4;
  }
  quasar::Sanitizer::Sanitizer(a1 + 1696, a2);
  return a1;
}

void sub_1ADFDF734(_Unwind_Exception *a1)
{
  uint64_t v1;
  quasar::SystemConfig *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 + 1648);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3 + 1632);
  std::pair<std::string,std::string>::~pair(v4);
  quasar::SystemConfig::~SystemConfig(v2);
  std::__tree<int>::destroy(v1, *v5);
  _Unwind_Resume(a1);
}

uint64_t quasar::KeywordFinder::init(quasar::KeywordFinder *this)
{
  std::string *v2;
  int JsonFile;
  BOOL hasParam;
  BOOL v5;
  uint64_t ModelLoader;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BOOL4 v13;
  _BOOL4 v14;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[3];

  v2 = (std::string *)((char *)this + 32);
  memset(v33, 0, sizeof(v33));
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  LODWORD(v18) = 1065353216;
  JsonFile = quasar::SystemConfig::readJsonFile((uint64_t)this + 32, (uint64_t)this + 1672, v33, (uint64_t)__p, 0, 0);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)__p);
  __p[0] = v33;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (JsonFile == 2)
    return 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "corrections.keyword-finder");
  hasParam = quasar::SystemConfig::hasParam((uint64_t)v2, (uint64_t)__p);
  v5 = hasParam;
  if ((SBYTE7(v17) & 0x80000000) == 0)
  {
    if (hasParam)
      goto LABEL_4;
    return 0;
  }
  operator delete(__p[0]);
  if (!v5)
    return 0;
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(__p, "corrections.");
  quasar::SystemConfig::setPrefix(v2, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keyword-finder.");
  quasar::KeywordFinderConfig::registerParams((uint64_t)this + 1576, (quasar::SystemConfig *)v2, (const void **)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "corrections.keyword-finder");
  quasar::SystemConfig::readPtree((uint64_t)v2, (uint64_t)__p, 0, 0);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::SystemConfig::setPrefix(v2, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  ModelLoader = quasar::SystemConfig::getModelLoader((quasar::SystemConfig *)v2);
  (*(void (**)(void **__return_ptr, uint64_t, char *))(*(_QWORD *)ModelLoader + 16))(__p, ModelLoader, (char *)this + 1576);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1648, (__int128 *)__p);
  v7 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v8 = (unint64_t *)((char *)__p[1] + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  quasar::SymbolMap::ReadFstText<std::shared_ptr<fst::SymbolTable>>((uint64_t)this + 1600, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 1632, (__int128 *)__p);
  v10 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v11 = (unint64_t *)((char *)__p[1] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *((_DWORD *)this + 416) = *((_DWORD *)this + 406);
  std::string::basic_string[abi:ne180100]<0>(__p, "corrections.sanitization");
  v13 = quasar::SystemConfig::hasParam((uint64_t)v2, (uint64_t)__p);
  v14 = v13;
  if ((SBYTE7(v17) & 0x80000000) == 0)
  {
    if (v13)
      goto LABEL_24;
LABEL_29:
    if (quasar::gLogLevel >= 4)
    {
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"#Corrections: No sanitization model is provided.", 48);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    return 1;
  }
  operator delete(__p[0]);
  if (!v14)
    goto LABEL_29;
LABEL_24:
  std::string::basic_string[abi:ne180100]<0>(__p, "corrections.sanitization");
  quasar::Sanitizer::init((_DWORD *)this + 424, (uint64_t)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1ADFDFAAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::KeywordFinder::correctResultWithKeyword(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, std::string *a5@<X4>, _QWORD *a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v8;
  uint64_t v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  std::string *v24;
  std::string::size_type size;
  uint64_t v26;
  unsigned int *v27;
  unsigned int *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  unsigned int *v40;
  unint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  void *locale;
  uint64_t v49;
  const std::locale::facet *v50;
  uint64_t v51;
  void *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int *v56;
  std::locale v59;
  uint64_t v60;
  unsigned __int8 v61;
  std::string v62;
  void *v63[3];
  void *v64;
  char *v65;
  char *v66;
  void *__p[2];
  unsigned __int8 v68;
  std::string *v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _QWORD v89[4];
  _OWORD v90[4];

  v8 = a7;
  memset(v90, 0, 48);
  v88 = 0u;
  memset(v89, 0, sizeof(v89));
  if (a7 == -1)
    v8 = *(_DWORD *)(a1 + 1664);
  if (*a4 == a4[1])
    goto LABEL_59;
  v14 = *(unsigned __int8 *)(a2 + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 8);
  if (!v14 || *a3 == a3[1] || !v8)
  {
LABEL_59:
    if (quasar::gLogLevel >= 4)
    {
      v86 = 0uLL;
      v87 = 0uLL;
      v84 = 0uLL;
      v85 = 0uLL;
      v82 = 0uLL;
      v83 = 0uLL;
      v80 = 0uLL;
      v81 = 0uLL;
      v78 = 0uLL;
      v79 = 0uLL;
      v76 = 0uLL;
      v77 = 0uLL;
      v74 = 0uLL;
      v75 = 0uLL;
      v72 = 0uLL;
      v73 = 0uLL;
      v71 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Keyword Finder returning due to null input (not necessarily an error).", 84);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
    }
    *(_OWORD *)(a8 + 64) = 0u;
    *(_OWORD *)(a8 + 80) = 0u;
    *(_OWORD *)(a8 + 32) = 0u;
    *(_OWORD *)(a8 + 48) = 0u;
    *(_OWORD *)a8 = 0u;
    *(_OWORD *)(a8 + 16) = 0u;
  }
  else
  {
    quasar::getAlternativeSpelledProns(a3, (int *)a1, &v69);
    if (quasar::gLogLevel >= 4)
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Keyword Finder original input utterance: ", 55);
      quasar::formatResultTokensSimple(a5, 0);
      if ((v68 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      if ((v68 & 0x80u) == 0)
        v17 = v68;
      else
        v17 = (uint64_t)__p[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      if ((char)v68 < 0)
        operator delete(__p[0]);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
      if (quasar::gLogLevel >= 4)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        v71 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
        v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Keyword: ", 23);
        v19 = *(char *)(a2 + 23);
        v20 = v19 >= 0 ? a2 : *(_QWORD *)a2;
        v21 = v19 >= 0 ? *(unsigned __int8 *)(a2 + 23) : *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, v20, v21);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
        if (quasar::gLogLevel >= 4)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
          v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Keyword pronunciation: ", 37);
          v23 = SHIBYTE(v69->__r_.__value_.__r.__words[2]);
          if (v23 >= 0)
            v24 = v69;
          else
            v24 = (std::string *)v69->__r_.__value_.__r.__words[0];
          if (v23 >= 0)
            size = HIBYTE(v69->__r_.__value_.__r.__words[2]);
          else
            size = v69->__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v24, size);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
        }
      }
    }
    std::vector<quasar::KeywordFinder::KeywordLoggingStats>::emplace_back<>((uint64_t *)v90);
    v26 = *((_QWORD *)&v90[0] + 1);
    std::string::operator=((std::string *)(*((_QWORD *)&v90[0] + 1) - 56), (const std::string *)a2);
    *(_QWORD *)(v26 - 32) = 0x3FF0000000000000;
    if ((std::string **)(v26 - 24) != &v69)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(v26 - 24), v69, v70, 0xAAAAAAAAAAAAAAABLL * (((char *)v70 - (char *)v69) >> 3));
    quasar::findPossibleKeywordLocations((uint64_t)v69, a4, a6, *(_QWORD *)(a1 + 1648), *(_QWORD *)(a1 + 1632), v8, (__int128 *)__p);
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v27 = (unsigned int *)__p[1];
    v56 = (unsigned int *)__p[0];
    if (__p[0] != __p[1])
    {
      v28 = (unsigned int *)__p[0];
      do
      {
        v29 = v65;
        if (v65 >= v66)
        {
          v31 = (char *)v64;
          v32 = (v65 - (_BYTE *)v64) >> 3;
          v33 = v32 + 1;
          if ((unint64_t)(v32 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v34 = v66 - (_BYTE *)v64;
          if ((v66 - (_BYTE *)v64) >> 2 > v33)
            v33 = v34 >> 2;
          if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
            v35 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v35 = v33;
          if (v35)
          {
            v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v35);
            v31 = (char *)v64;
            v29 = v65;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[8 * v32];
          *(_QWORD *)v37 = *((_QWORD *)v28 + 1);
          v30 = v37 + 8;
          while (v29 != v31)
          {
            v38 = *((_QWORD *)v29 - 1);
            v29 -= 8;
            *((_QWORD *)v37 - 1) = v38;
            v37 -= 8;
          }
          v64 = v37;
          v65 = v30;
          v66 = &v36[8 * v35];
          if (v31)
            operator delete(v31);
        }
        else
        {
          *(_QWORD *)v65 = *((_QWORD *)v28 + 1);
          v30 = v29 + 8;
        }
        v65 = v30;
        if (quasar::gLogLevel >= 4)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Keyword location: ", 32);
          v39 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" to ", 4);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
          if (quasar::gLogLevel >= 4)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Edit distance: ", 29);
            std::ostream::operator<<();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
          }
        }
        v28 += 4;
      }
      while (v28 != v27);
    }
    quasar::getConfidenceScores((uint64_t)&v64, (int **)v63);
    v40 = v56;
    if (quasar::gLogLevel <= 3)
    {
      v41 = ((char *)v27 - (char *)v56) >> 4;
    }
    else
    {
      v86 = 0u;
      v87 = 0u;
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v76 = 0u;
      v77 = 0u;
      v74 = 0u;
      v75 = 0u;
      v72 = 0u;
      v73 = 0u;
      v71 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: ", 14);
      v41 = ((char *)v27 - (char *)v56) >> 4;
      v42 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" KWF results from ", 18);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"-best list", 10);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
    }
    if (v56 == v27)
    {
      v52 = v63[0];
    }
    else
    {
      v44 = 0;
      if (v41 <= 1)
        v45 = 1;
      else
        v45 = v41;
      do
      {
        if (*(char *)(a2 + 23) < 0)
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
        else
          v62 = *(std::string *)a2;
        quasar::stitchResult(a3, (uint64_t)&v62, (uint64_t)a5, *v40, v40[1], (uint64_t)&v71, (double)*((int *)v63[0] + v44));
        std::vector<std::vector<quasar::Token>>::emplace_back<std::vector<quasar::Token>>((uint64_t *)&v88, (uint64_t)&v71);
        v59.__locale_ = (std::locale::__imp *)&v71;
        std::vector<quasar::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v62.__r_.__value_.__l.__data_);
        if (quasar::gLogLevel >= 4)
        {
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v76 = 0u;
          v77 = 0u;
          v74 = 0u;
          v75 = 0u;
          v72 = 0u;
          v73 = 0u;
          v71 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v71, (uint64_t)"#Corrections: Pre-itn stitched result ", 38);
          v46 = (_QWORD *)std::ostream::operator<<();
          v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)": ", 2);
          quasar::formatResultTokensSimple((std::string *)(*((_QWORD *)&v88 + 1) - 24), 0);
          if ((v61 & 0x80u) == 0)
            locale = &v59;
          else
            locale = v59.__locale_;
          if ((v61 & 0x80u) == 0)
            v49 = v61;
          else
            v49 = v60;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)locale, v49);
          if ((char)v61 < 0)
            operator delete(v59.__locale_);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
          if (quasar::gLogLevel >= 4)
          {
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v76 = 0u;
            v77 = 0u;
            v74 = 0u;
            v75 = 0u;
            v72 = 0u;
            v73 = 0u;
            v71 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v71);
            std::ios_base::getloc((const std::ios_base *)((char *)&v71 + *(_QWORD *)(v71 - 24)));
            v50 = std::locale::use_facet(&v59, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v50->__vftable[2].~facet_0)(v50, 10);
            std::locale::~locale(&v59);
            std::ostream::put();
            std::ostream::flush();
            quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v71);
          }
        }
        std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::emplace_back<>((uint64_t *)&v90[1] + 1);
        v51 = *(_QWORD *)&v90[2];
        std::string::operator=((std::string *)(*(_QWORD *)&v90[2] - 48), (const std::string *)a2);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)v40;
        *(_QWORD *)(v51 - 16) = *((_QWORD *)v40 + 1);
        v52 = v63[0];
        *(double *)(v51 - 8) = (double)*((int *)v63[0] + v44++);
        v40 += 4;
      }
      while (v45 != v44);
      v40 = v56;
    }
    v53 = v88;
    v54 = v89[3];
    *(_QWORD *)(a8 + 16) = v89[0];
    *(_QWORD *)(a8 + 40) = v54;
    v55 = *((_QWORD *)&v90[2] + 1);
    *(_QWORD *)(a8 + 64) = *(_QWORD *)&v90[1];
    *(_OWORD *)a8 = v53;
    v88 = 0uLL;
    *(_OWORD *)(a8 + 24) = *(_OWORD *)&v89[1];
    memset(v89, 0, sizeof(v89));
    *(_OWORD *)(a8 + 48) = v90[0];
    memset(v90, 0, 24);
    *(_OWORD *)(a8 + 72) = *(_OWORD *)((char *)&v90[1] + 8);
    *(_QWORD *)(a8 + 88) = v55;
    memset((char *)&v90[1] + 8, 0, 24);
    if (v52)
    {
      v63[1] = v52;
      operator delete(v52);
    }
    if (v64)
    {
      v65 = (char *)v64;
      operator delete(v64);
    }
    if (v40)
      operator delete(v40);
    *(_QWORD *)&v71 = &v69;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  }
  *(_QWORD *)&v71 = (char *)&v90[1] + 8;
  std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = v90;
  std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v89[1];
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
  *(_QWORD *)&v71 = &v88;
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v71);
}

void sub_1ADFE03CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, std::locale a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,uint64_t a40,uint64_t a41,char *a42)
{
  uint64_t v42;

  a42 = &a39;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a42);
  quasar::KeywordFinder::KeywordFinderRetValue::~KeywordFinderRetValue((void **)(v42 - 192));
  _Unwind_Resume(a1);
}

_QWORD *std::vector<quasar::KeywordFinder::KeywordLoggingStats>::emplace_back<>(uint64_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  void *v14[5];

  v4 = a1[2];
  v2 = a1 + 2;
  v3 = v4;
  v5 = (_QWORD *)*(v2 - 1);
  if ((unint64_t)v5 >= v4)
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)v5 - *a1) >> 3);
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) > 0x492492492492492)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v9 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3 - *a1) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x249249249249249)
      v10 = 0x492492492492492;
    else
      v10 = v8;
    v14[4] = v2;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::VoiceCommandArgument>>((uint64_t)v2, v10);
    else
      v11 = 0;
    v12 = &v11[56 * v7];
    v14[0] = v11;
    v14[1] = v12;
    v14[3] = &v11[56 * v10];
    *(_QWORD *)v12 = 0;
    *((_QWORD *)v12 + 1) = 0;
    *((_QWORD *)v12 + 2) = 0;
    *((_QWORD *)v12 + 3) = 0xBFF0000000000000;
    *((_QWORD *)v12 + 5) = 0;
    *((_QWORD *)v12 + 6) = 0;
    *((_QWORD *)v12 + 4) = 0;
    v14[2] = v12 + 56;
    std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__swap_out_circular_buffer(a1, v14);
    v6 = (_QWORD *)a1[1];
    std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer(v14);
  }
  else
  {
    *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = 0xBFF0000000000000;
    v5[5] = 0;
    v5[6] = 0;
    v5[4] = 0;
    v6 = v5 + 7;
    a1[1] = (uint64_t)(v5 + 7);
  }
  a1[1] = (uint64_t)v6;
  return v6 - 7;
}

void sub_1ADFE066C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::emplace_back<>(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _QWORD v21[5];

  v4 = a1[2];
  v2 = (uint64_t)(a1 + 2);
  v3 = v4;
  v5 = *(_QWORD *)(v2 - 8);
  if (v5 >= v4)
  {
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v3 - *a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v13;
    v21[4] = v2;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v2, v15);
    v17 = &v16[48 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[48 * v18];
    *((_QWORD *)v17 + 1) = 0;
    *((_QWORD *)v17 + 2) = 0;
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 3) = -1;
    __asm { FMOV            V0.2D, #-1.0 }
    *((_OWORD *)v17 + 2) = _Q0;
    v21[2] = v17 + 48;
    std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__swap_out_circular_buffer(a1, v21);
    v11 = a1[1];
    std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)v21);
  }
  else
  {
    *(_QWORD *)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = -1;
    __asm { FMOV            V0.2D, #-1.0 }
    *(_OWORD *)(v5 + 32) = _Q0;
    v11 = v5 + 48;
    a1[1] = v5 + 48;
  }
  a1[1] = v11;
  return v11 - 48;
}

void sub_1ADFE0790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::tuple<std::string,long long,long long,float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(unsigned __int8 *a1, unsigned __int8 **a2, uint64_t a3, char a4)
{
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  const void **v17;
  int v18;
  size_t v19;
  size_t v20;
  signed __int8 v21;
  size_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  unsigned __int8 *v26;
  size_t v27;
  int v28;
  BOOL v29;
  float v30;
  __int128 v31;
  float v32;
  void *v33;
  void **v34;
  const void **v35;
  const void **v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  const void *v40;
  size_t v41;
  int v42;
  BOOL v43;
  unsigned __int8 *v44;
  const void **v45;
  uint64_t v46;
  size_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  size_t v50;
  int v51;
  _BOOL4 v52;
  float v53;
  unsigned __int8 *v54;
  uint64_t v55;
  size_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  size_t v59;
  int v60;
  _BOOL4 v61;
  BOOL v62;
  const void **v63;
  __int128 v64;
  unsigned __int8 *v65;
  const void *v66;
  void *v67;
  void **v68;
  float v69;
  unsigned __int8 *v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  size_t v75;
  int v76;
  BOOL v77;
  float v78;
  const void **v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  const void **v83;
  size_t v84;
  int v85;
  _BOOL4 v86;
  float v87;
  void **v88;
  __int128 v89;
  __int128 v90;
  BOOL v91;
  __int128 v92;
  int v93;
  void *v94;
  void *v95;
  unsigned __int8 **v96;
  size_t v97;
  const void **v98;
  void **v99;
  const void **v100;
  uint64_t v101;
  void *v102;
  void **v103;
  size_t v104;
  int v105;
  _BOOL4 v106;
  const void *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  int v110;
  size_t v111;
  unsigned __int8 *v112;
  void **v113;
  unsigned __int8 *v114;
  uint64_t v115;
  size_t v116;
  int v117;
  BOOL v118;
  float v119;
  void **v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  unsigned __int8 v123;
  size_t v124;
  unsigned __int8 *v125;
  void **v126;
  unsigned __int8 *v127;
  uint64_t v128;
  size_t v129;
  int v130;
  BOOL v131;
  unsigned __int8 **v132;
  unsigned __int8 **v133;
  void **v134;
  void *v135;
  void *v136;
  unsigned __int8 **v137;
  void **v138;
  unsigned __int8 **v139;
  uint64_t v140;
  size_t v141;
  int v142;
  _BOOL4 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  void *v148;
  const void *v149;
  void *v150;
  void **v151;
  float v152;
  unsigned __int8 *v153;
  int v154;
  size_t v155;
  unsigned __int8 *v156;
  void **v157;
  unsigned __int8 *v158;
  uint64_t v159;
  size_t v160;
  int v161;
  _BOOL4 v162;
  float v163;
  unsigned __int8 **v164;
  int v165;
  size_t v166;
  unsigned __int8 **v167;
  void **v168;
  unsigned __int8 **v169;
  uint64_t v170;
  size_t v171;
  int v172;
  BOOL v173;
  float v174;
  void **v175;
  __int128 v176;
  __int128 v177;
  char v178;
  size_t v179;
  signed __int8 v180;
  size_t v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  const void **v184;
  uint64_t v185;
  unsigned __int8 *v186;
  unsigned __int8 *v187;
  uint64_t v188;
  size_t v189;
  signed __int8 v190;
  size_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  unsigned __int8 *v194;
  size_t v195;
  int v196;
  _BOOL4 v197;
  __int128 v198;
  uint64_t v199;
  void *v200;
  const void *v201;
  void *v202;
  void **v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  int v206;
  size_t v207;
  unsigned __int8 *v208;
  void **v209;
  unsigned __int8 *v210;
  uint64_t v211;
  size_t v212;
  int v213;
  BOOL v214;
  __int128 v215;
  int64_t v216;
  int64_t v217;
  int64_t v218;
  uint64_t v219;
  unsigned __int8 *v220;
  signed __int8 v221;
  size_t v222;
  int v223;
  size_t v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  size_t v230;
  int v231;
  _BOOL4 v232;
  unsigned __int8 *v233;
  signed __int8 v234;
  size_t v235;
  unsigned __int8 v236;
  size_t v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unsigned __int8 *v242;
  size_t v243;
  int v244;
  BOOL v245;
  float v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  unsigned __int8 *v250;
  signed __int8 v251;
  size_t v252;
  int v253;
  size_t v254;
  unsigned __int8 *v255;
  unsigned __int8 *v256;
  unsigned __int8 *v257;
  uint64_t v258;
  unsigned __int8 *v259;
  size_t v260;
  int v261;
  _BOOL4 v262;
  signed __int8 v263;
  size_t v264;
  void *v265;
  void **v266;
  void **v267;
  unsigned __int8 *v268;
  uint64_t v269;
  unsigned __int8 *v270;
  size_t v271;
  int v272;
  BOOL v273;
  unsigned __int8 v274;
  __int128 v275;
  uint64_t v276;
  void **v277;
  uint64_t v278;
  int v279;
  int64_t v280;
  unsigned __int8 *v281;
  uint64_t v282;
  void **v283;
  uint64_t v284;
  uint64_t v285;
  signed __int8 v286;
  size_t v287;
  int v288;
  size_t v289;
  unsigned __int8 *v290;
  unsigned __int8 *v291;
  void **v292;
  uint64_t v293;
  const void *v294;
  size_t v295;
  int v296;
  _BOOL4 v297;
  __int128 v298;
  int v299;
  __int128 v300;
  void *v301;
  uint64_t v302;
  unint64_t v303;
  unsigned __int8 *v304;
  unsigned __int8 v305;
  size_t v306;
  signed __int8 v307;
  size_t v308;
  unsigned __int8 *v309;
  unsigned __int8 *v310;
  unsigned __int8 *v311;
  uint64_t v312;
  void *v313;
  unsigned __int8 *v314;
  size_t v315;
  int v316;
  _BOOL4 v317;
  float v318;
  __int128 v319;
  void *v320;
  void **v321;
  unsigned __int8 *v322;
  __int128 v323;
  unsigned __int8 v324;
  size_t v325;
  void **v326;
  unsigned __int8 *v327;
  uint64_t v328;
  unsigned __int8 *v329;
  size_t v330;
  int v331;
  BOOL v332;
  __int128 v333;
  unsigned __int8 **v334;
  uint64_t v335;
  size_t v336;
  char v337;
  size_t v338;
  unsigned __int8 *v339;
  uint64_t v340;
  unsigned __int8 *v341;
  size_t v342;
  int v343;
  _BOOL4 v344;
  __int128 v345;
  uint64_t v346;
  void *v347;
  const void *v348;
  void *v349;
  void **v350;
  unsigned __int8 *v351;
  unsigned __int8 *v352;
  int v353;
  size_t v354;
  unsigned __int8 **v355;
  void **v356;
  unsigned __int8 **v357;
  uint64_t v358;
  size_t v359;
  int v360;
  BOOL v361;
  __int128 v362;
  const void *v363;
  size_t v364;
  int v365;
  _BOOL4 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  void *__s1;
  int v371;
  void *v372;
  uint64_t v373;
  const void *v374;
  void *__n;
  _QWORD *__na;
  unsigned __int8 *v377;
  void **v378;
  unsigned __int8 *v379;
  unint64_t v380;
  void *v381;
  const void **v382;
  int64_t v383;
  unsigned __int8 v384;
  unsigned __int8 *v385;
  uint64_t v386;
  int64_t v387;
  unsigned __int8 **v388;
  uint64_t v389;
  void *__p[2];
  unsigned __int8 *v391;
  float v392;
  __int128 v393;
  unsigned __int8 *v394;
  uint64_t v395;

  v395 = *MEMORY[0x1E0C80C00];
LABEL_2:
  v379 = (unsigned __int8 *)(a2 - 8);
  v382 = (const void **)(a2 - 4);
  v388 = a2;
  v377 = (unsigned __int8 *)(a2 - 12);
  v7 = a1;
  while (2)
  {
    v8 = v7;
    v9 = (unsigned __int8 *)v388;
    v10 = (char *)v388 - (char *)v7;
    v11 = ((char *)v388 - (char *)v7) >> 5;
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v178 = *((_BYTE *)v388 - 9);
        if (v178 >= 0)
          v179 = *((unsigned __int8 *)v388 - 9);
        else
          v179 = (size_t)*(v388 - 3);
        v180 = v7[23];
        if (v180 >= 0)
          v181 = v7[23];
        else
          v181 = *((_QWORD *)v7 + 1);
        if (v180 >= 0)
          v182 = v7;
        else
          v182 = *(unsigned __int8 **)v7;
        if (v179 != v181)
          goto LABEL_754;
        if ((*((_BYTE *)v388 - 9) & 0x80) != 0)
        {
          if (memcmp(*v382, v182, (size_t)*(v388 - 3)))
            goto LABEL_754;
        }
        else if (*((_BYTE *)v388 - 9))
        {
          v183 = v182;
          v184 = v382;
          v185 = *((unsigned __int8 *)v388 - 9);
          while (*(unsigned __int8 *)v184 == *v183)
          {
            v184 = (const void **)((char *)v184 + 1);
            ++v183;
            if (!--v185)
              goto LABEL_765;
          }
LABEL_754:
          if (v178 >= 0)
            v363 = v382;
          else
            v363 = *v382;
          if (v181 >= v179)
            v364 = v179;
          else
            v364 = v181;
          v365 = memcmp(v363, v182, v364);
          v366 = v179 < v181;
          if (v365)
            v366 = v365 < 0;
          if (!v366)
            return;
LABEL_763:
          v367 = *(_OWORD *)v7;
          v391 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
          *(_OWORD *)__p = v367;
          v368 = *(_OWORD *)v382;
          *((_QWORD *)v7 + 2) = v382[2];
          *(_OWORD *)v7 = v368;
          v369 = *(_OWORD *)__p;
          v382[2] = v391;
          *(_OWORD *)v382 = v369;
          LODWORD(v369) = *((_DWORD *)v7 + 6);
          *((_DWORD *)v7 + 6) = *((_DWORD *)v388 - 2);
          *((_DWORD *)v388 - 2) = v369;
          return;
        }
LABEL_765:
        if (*((float *)v388 - 2) >= *((float *)v7 + 6))
          return;
        goto LABEL_763;
      case 3:
        std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v7, v7 + 32, (unsigned __int8 *)v382);
        return;
      case 4:
        std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)v7, v7 + 32, v7 + 64, (unsigned __int8 *)v382);
        return;
      case 5:
        std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>(v7, v7 + 32, v7 + 64, v7 + 96, (unsigned __int8 *)v382);
        return;
      default:
        v385 = v7;
        if (v10 <= 767)
        {
          if ((a4 & 1) == 0)
          {
            if (v7 == (unsigned __int8 *)v388)
              return;
            while (1)
            {
LABEL_690:
              if (v8 + 32 == v9)
                return;
              v334 = (unsigned __int8 **)v8;
              v8 += 32;
              v335 = *((unsigned __int8 *)v334 + 55);
              if ((v335 & 0x80u) == 0)
                v336 = *((unsigned __int8 *)v334 + 55);
              else
                v336 = (size_t)v334[5];
              v337 = *((_BYTE *)v334 + 23);
              if (v337 >= 0)
                v338 = *((unsigned __int8 *)v334 + 23);
              else
                v338 = (size_t)v334[1];
              if (v337 >= 0)
                v339 = (unsigned __int8 *)v334;
              else
                v339 = *v334;
              if (v336 == v338)
              {
                if ((v335 & 0x80) != 0)
                {
                  if (!memcmp(*(const void **)v8, v339, (size_t)v334[5]))
                  {
LABEL_718:
                    if (*((float *)v334 + 14) >= *((float *)v334 + 6))
                      continue;
LABEL_719:
                    v345 = *(_OWORD *)v8;
                    v391 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
                    *(_OWORD *)__p = v345;
                    *((_QWORD *)v8 + 1) = 0;
                    *((_QWORD *)v8 + 2) = 0;
                    *(_QWORD *)v8 = 0;
                    v392 = *((float *)v334 + 14);
                    v346 = HIBYTE(v391);
                    v348 = __p[0];
                    v347 = __p[1];
                    if (SHIBYTE(v391) >= 0)
                      v349 = (void *)HIBYTE(v391);
                    else
                      v349 = __p[1];
                    if (SHIBYTE(v391) >= 0)
                      v350 = __p;
                    else
                      v350 = (void **)__p[0];
                    v351 = v8;
                    while (1)
                    {
                      v352 = (unsigned __int8 *)v334;
                      if ((char)v8[23] < 0)
                        operator delete(*(void **)v8);
                      *(_OWORD *)v8 = *(_OWORD *)v334;
                      *((_QWORD *)v8 + 2) = v334[2];
                      *((_BYTE *)v334 + 23) = 0;
                      *(_BYTE *)v334 = 0;
                      *((_DWORD *)v8 + 6) = *((_DWORD *)v334 + 6);
                      v334 -= 4;
                      v353 = (char)*(v352 - 9);
                      if (v353 >= 0)
                        v354 = *(v352 - 9);
                      else
                        v354 = *((_QWORD *)v352 - 3);
                      if (v353 >= 0)
                        v355 = (unsigned __int8 **)(v352 - 32);
                      else
                        v355 = (unsigned __int8 **)*((_QWORD *)v352 - 4);
                      if (v349 == (void *)v354)
                      {
                        if ((v346 & 0x80) != 0)
                        {
                          if (!memcmp(v348, v355, (size_t)v347))
                          {
LABEL_749:
                            v8 = v352;
                            if (v392 >= *((float *)v352 - 2))
                              goto LABEL_750;
                            continue;
                          }
                        }
                        else
                        {
                          if (!(_DWORD)v346)
                            goto LABEL_749;
                          v356 = __p;
                          v357 = v355;
                          v358 = v346;
                          while (*(unsigned __int8 *)v356 == *(unsigned __int8 *)v357)
                          {
                            v356 = (void **)((char *)v356 + 1);
                            v357 = (unsigned __int8 **)((char *)v357 + 1);
                            if (!--v358)
                              goto LABEL_749;
                          }
                        }
                      }
                      if (v354 >= (unint64_t)v349)
                        v359 = (size_t)v349;
                      else
                        v359 = v354;
                      v360 = memcmp(v350, v355, v359);
                      v361 = (unint64_t)v349 < v354;
                      if (v360)
                        v361 = v360 < 0;
                      v8 = v352;
                      if (!v361)
                      {
LABEL_750:
                        if ((char)v352[23] < 0)
                          operator delete(*(void **)v352);
                        v362 = *(_OWORD *)__p;
                        *((_QWORD *)v352 + 2) = v391;
                        *(_OWORD *)v352 = v362;
                        *((float *)v352 + 6) = v392;
                        v8 = v351;
                        v9 = (unsigned __int8 *)v388;
                        goto LABEL_690;
                      }
                    }
                  }
                }
                else
                {
                  if (!*((_BYTE *)v334 + 55))
                    goto LABEL_718;
                  v340 = 0;
                  while (v8[v340] == v339[v340])
                  {
                    if (v335 == ++v340)
                      goto LABEL_718;
                  }
                }
              }
              if ((v335 & 0x80u) == 0)
                v341 = v8;
              else
                v341 = *(unsigned __int8 **)v8;
              if (v338 >= v336)
                v342 = v336;
              else
                v342 = v338;
              v343 = memcmp(v341, v339, v342);
              v344 = v336 < v338;
              if (v343)
                v344 = v343 < 0;
              if (v344)
                goto LABEL_719;
            }
          }
          if (v7 == (unsigned __int8 *)v388)
            return;
          v186 = v7 + 32;
          if (v7 + 32 == (unsigned __int8 *)v388)
            return;
LABEL_386:
          v187 = v7;
          v7 = v186;
          v188 = v187[55];
          if ((v188 & 0x80u) == 0)
            v189 = v187[55];
          else
            v189 = *((_QWORD *)v187 + 5);
          v190 = v187[23];
          if (v190 >= 0)
            v191 = v187[23];
          else
            v191 = *((_QWORD *)v187 + 1);
          if (v190 >= 0)
            v192 = v187;
          else
            v192 = *(unsigned __int8 **)v187;
          if (v189 != v191)
            goto LABEL_403;
          if ((v188 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v7, v192, *((_QWORD *)v187 + 5)))
            {
LABEL_403:
              if ((v188 & 0x80u) == 0)
                v194 = v7;
              else
                v194 = *(unsigned __int8 **)v7;
              if (v191 >= v189)
                v195 = v189;
              else
                v195 = v191;
              v196 = memcmp(v194, v192, v195);
              v197 = v189 < v191;
              if (v196)
                v197 = v196 < 0;
              if (!v197)
                goto LABEL_451;
LABEL_414:
              v198 = *(_OWORD *)v7;
              v391 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
              *(_OWORD *)__p = v198;
              *((_QWORD *)v7 + 1) = 0;
              *((_QWORD *)v7 + 2) = 0;
              *(_QWORD *)v7 = 0;
              v392 = *((float *)v187 + 14);
              v199 = HIBYTE(v391);
              v201 = __p[0];
              v200 = __p[1];
              if (SHIBYTE(v391) >= 0)
                v202 = (void *)HIBYTE(v391);
              else
                v202 = __p[1];
              if (SHIBYTE(v391) >= 0)
                v203 = __p;
              else
                v203 = (void **)__p[0];
              v204 = v7;
              while (1)
              {
                v205 = v187;
                if ((char)v204[23] < 0)
                  operator delete(*(void **)v204);
                *(_OWORD *)v204 = *(_OWORD *)v187;
                *((_QWORD *)v204 + 2) = *((_QWORD *)v187 + 2);
                v187[23] = 0;
                *v187 = 0;
                *((_DWORD *)v204 + 6) = *((_DWORD *)v187 + 6);
                if (v187 == v8)
                {
                  v205 = v8;
LABEL_448:
                  if ((char)v205[23] < 0)
                    operator delete(*(void **)v205);
                  v215 = *(_OWORD *)__p;
                  *((_QWORD *)v205 + 2) = v391;
                  *(_OWORD *)v205 = v215;
                  *((float *)v205 + 6) = v392;
                  v9 = (unsigned __int8 *)v388;
LABEL_451:
                  v186 = v7 + 32;
                  if (v7 + 32 == v9)
                    return;
                  goto LABEL_386;
                }
                v187 -= 32;
                v206 = (char)*(v205 - 9);
                if (v206 >= 0)
                  v207 = *(v205 - 9);
                else
                  v207 = *((_QWORD *)v205 - 3);
                if (v206 >= 0)
                  v208 = v205 - 32;
                else
                  v208 = (unsigned __int8 *)*((_QWORD *)v205 - 4);
                if (v202 != (void *)v207)
                  goto LABEL_438;
                if ((v199 & 0x80) != 0)
                {
                  if (!memcmp(v201, v208, (size_t)v200))
                    goto LABEL_445;
LABEL_438:
                  if (v207 >= (unint64_t)v202)
                    v212 = (size_t)v202;
                  else
                    v212 = v207;
                  v213 = memcmp(v203, v208, v212);
                  v214 = (unint64_t)v202 < v207;
                  if (v213)
                    v214 = v213 < 0;
                  v204 = v205;
                  v8 = v385;
                  if (!v214)
                    goto LABEL_448;
                }
                else
                {
                  if ((_DWORD)v199)
                  {
                    v209 = __p;
                    v210 = v208;
                    v211 = v199;
                    while (*(unsigned __int8 *)v209 == *v210)
                    {
                      v209 = (void **)((char *)v209 + 1);
                      ++v210;
                      if (!--v211)
                        goto LABEL_445;
                    }
                    goto LABEL_438;
                  }
LABEL_445:
                  v204 = v205;
                  v8 = v385;
                  if (v392 >= *((float *)v205 - 2))
                    goto LABEL_448;
                }
              }
            }
          }
          else if (v187[55])
          {
            v193 = 0;
            while (v7[v193] == v192[v193])
            {
              if (v188 == ++v193)
                goto LABEL_413;
            }
            goto LABEL_403;
          }
LABEL_413:
          if (*((float *)v187 + 14) >= *((float *)v187 + 6))
            goto LABEL_451;
          goto LABEL_414;
        }
        if (!a3)
        {
          if (v7 == (unsigned __int8 *)v388)
            return;
          v380 = (char *)v388 - (char *)v7;
          v216 = (unint64_t)(v11 - 2) >> 1;
          v217 = v216;
          while (1)
          {
            v218 = v217;
            if (v216 < v217)
              goto LABEL_577;
            v383 = v217;
            v219 = (2 * v217) | 1;
            v220 = &v8[32 * v219];
            if (2 * v217 + 2 >= v11)
              goto LABEL_484;
            v221 = v220[23];
            if (v221 >= 0)
              v222 = v220[23];
            else
              v222 = *((_QWORD *)v220 + 1);
            v223 = (char)v220[55];
            if (v223 >= 0)
              v224 = v220[55];
            else
              v224 = *((_QWORD *)v220 + 5);
            if (v223 >= 0)
              v225 = v220 + 32;
            else
              v225 = (unsigned __int8 *)*((_QWORD *)v220 + 4);
            if (v222 == v224)
            {
              if ((v220[23] & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v220, v225, *((_QWORD *)v220 + 1)))
                {
LABEL_579:
                  v8 = v385;
                  v216 = (unint64_t)(v11 - 2) >> 1;
                  if (*(float *)&v385[32 * v219 + 24] < *((float *)v220 + 14))
                    goto LABEL_483;
                  goto LABEL_484;
                }
              }
              else
              {
                if (!v220[23])
                  goto LABEL_579;
                v226 = v225;
                v227 = v220;
                v228 = v220[23];
                while (*v227 == *v226)
                {
                  ++v227;
                  ++v226;
                  if (!--v228)
                    goto LABEL_579;
                }
              }
            }
            if (v221 >= 0)
              v229 = v220;
            else
              v229 = *(unsigned __int8 **)v220;
            if (v224 >= v222)
              v230 = v222;
            else
              v230 = v224;
            v231 = memcmp(v229, v225, v230);
            v232 = v222 < v224;
            if (v231)
              v232 = v231 < 0;
            v8 = v385;
            v216 = (unint64_t)(v11 - 2) >> 1;
            if (v232)
            {
LABEL_483:
              v220 += 32;
              v219 = 2 * v218 + 2;
            }
LABEL_484:
            v233 = &v8[32 * v218];
            v234 = v220[23];
            if (v234 >= 0)
              v235 = v220[23];
            else
              v235 = *((_QWORD *)v220 + 1);
            v236 = v233[23];
            if ((v236 & 0x80u) == 0)
              v237 = v233[23];
            else
              v237 = *((_QWORD *)v233 + 1);
            if ((v236 & 0x80u) == 0)
              v238 = v233;
            else
              v238 = *(unsigned __int8 **)v233;
            if (v235 == v237)
            {
              if ((v220[23] & 0x80) != 0)
              {
                if (!memcmp(*(const void **)v220, v238, *((_QWORD *)v220 + 1)))
                {
LABEL_511:
                  v8 = v385;
                  v246 = *(float *)&v385[32 * v383 + 24];
                  if (*((float *)v220 + 6) < v246)
                    goto LABEL_577;
LABEL_512:
                  v247 = *(_OWORD *)v233;
                  v391 = (unsigned __int8 *)*((_QWORD *)v233 + 2);
                  *(_OWORD *)__p = v247;
                  *((_QWORD *)v233 + 1) = 0;
                  *((_QWORD *)v233 + 2) = 0;
                  *(_QWORD *)v233 = 0;
                  v392 = v246;
                  while (2)
                  {
                    v248 = *(_OWORD *)v220;
                    *((_QWORD *)v233 + 2) = *((_QWORD *)v220 + 2);
                    *(_OWORD *)v233 = v248;
                    v220[23] = 0;
                    *v220 = 0;
                    *((_DWORD *)v233 + 6) = *((_DWORD *)v220 + 6);
                    if (v216 < v219)
                    {
LABEL_574:
                      v218 = v383;
                      if ((char)v220[23] < 0)
                        operator delete(*(void **)v220);
                      v275 = *(_OWORD *)__p;
                      *((_QWORD *)v220 + 2) = v391;
                      *(_OWORD *)v220 = v275;
                      *((float *)v220 + 6) = v392;
                      v8 = v385;
                      goto LABEL_577;
                    }
                    v249 = (2 * v219) | 1;
                    v250 = &v385[32 * v249];
                    if (2 * v219 + 2 >= v11)
                      goto LABEL_542;
                    v251 = v250[23];
                    if (v251 >= 0)
                      v252 = v250[23];
                    else
                      v252 = *((_QWORD *)v250 + 1);
                    v253 = (char)v250[55];
                    if (v253 >= 0)
                      v254 = v250[55];
                    else
                      v254 = *((_QWORD *)v250 + 5);
                    if (v253 >= 0)
                      v255 = v250 + 32;
                    else
                      v255 = (unsigned __int8 *)*((_QWORD *)v250 + 4);
                    if (v252 != v254)
                      goto LABEL_532;
                    if ((v250[23] & 0x80) != 0)
                    {
                      if (memcmp(*(const void **)v250, v255, *((_QWORD *)v250 + 1)))
                        goto LABEL_532;
                    }
                    else if (v250[23])
                    {
                      v256 = v255;
                      v257 = &v385[32 * v249];
                      v258 = v250[23];
                      while (*v257 == *v256)
                      {
                        ++v257;
                        ++v256;
                        if (!--v258)
                          goto LABEL_572;
                      }
LABEL_532:
                      if (v251 >= 0)
                        v259 = &v385[32 * v249];
                      else
                        v259 = *(unsigned __int8 **)v250;
                      if (v254 >= v252)
                        v260 = v252;
                      else
                        v260 = v254;
                      v261 = memcmp(v259, v255, v260);
                      v262 = v252 < v254;
                      if (v261)
                        v262 = v261 < 0;
                      v216 = (unint64_t)(v11 - 2) >> 1;
                      if (v262)
                      {
LABEL_541:
                        v250 += 32;
                        v249 = 2 * v219 + 2;
                      }
LABEL_542:
                      v263 = v250[23];
                      if (v263 >= 0)
                        v264 = v250[23];
                      else
                        v264 = *((_QWORD *)v250 + 1);
                      if (SHIBYTE(v391) >= 0)
                        v265 = (void *)HIBYTE(v391);
                      else
                        v265 = __p[1];
                      if (SHIBYTE(v391) >= 0)
                        v266 = __p;
                      else
                        v266 = (void **)__p[0];
                      if ((void *)v264 == v265)
                      {
                        if ((v250[23] & 0x80) == 0)
                        {
                          if (v250[23])
                          {
                            v267 = v266;
                            v268 = v250;
                            v269 = v250[23];
                            while (*v268 == *(unsigned __int8 *)v267)
                            {
                              ++v268;
                              v267 = (void **)((char *)v267 + 1);
                              if (!--v269)
                                goto LABEL_569;
                            }
                            goto LABEL_559;
                          }
LABEL_569:
                          if (*((float *)v250 + 6) < v392)
                            goto LABEL_574;
LABEL_570:
                          v274 = v220[23];
                          v233 = v220;
                          v220 = v250;
                          v219 = v249;
                          if ((v274 & 0x80) != 0)
                            operator delete(*(void **)v233);
                          continue;
                        }
                        if (!memcmp(*(const void **)v250, v266, *((_QWORD *)v250 + 1)))
                          goto LABEL_569;
                      }
LABEL_559:
                      if (v263 >= 0)
                        v270 = v250;
                      else
                        v270 = *(unsigned __int8 **)v250;
                      if ((unint64_t)v265 >= v264)
                        v271 = v264;
                      else
                        v271 = (size_t)v265;
                      v272 = memcmp(v270, v266, v271);
                      v273 = v264 < (unint64_t)v265;
                      if (v272)
                        v273 = v272 < 0;
                      if (v273)
                        goto LABEL_574;
                      goto LABEL_570;
                    }
                    break;
                  }
LABEL_572:
                  v216 = (unint64_t)(v11 - 2) >> 1;
                  if (*(float *)&v385[32 * v249 + 24] < *((float *)v250 + 14))
                    goto LABEL_541;
                  goto LABEL_542;
                }
              }
              else
              {
                if (!v220[23])
                  goto LABEL_511;
                v239 = v238;
                v240 = v220;
                v241 = v220[23];
                while (*v240 == *v239)
                {
                  ++v240;
                  ++v239;
                  if (!--v241)
                    goto LABEL_511;
                }
              }
            }
            if (v234 >= 0)
              v242 = v220;
            else
              v242 = *(unsigned __int8 **)v220;
            if (v237 >= v235)
              v243 = v235;
            else
              v243 = v237;
            v244 = memcmp(v242, v238, v243);
            v245 = v235 < v237;
            if (v244)
              v245 = v244 < 0;
            v8 = v385;
            if (!v245)
            {
              v246 = *(float *)&v385[32 * v383 + 24];
              goto LABEL_512;
            }
LABEL_577:
            v217 = v218 - 1;
            if (!v218)
            {
              v276 = v380 >> 5;
              __na = v8 + 8;
              v277 = (void **)v388;
              while (1)
              {
                v278 = 0;
                v378 = v277;
                v381 = *(void **)v8;
                *(_QWORD *)&v393 = *__na;
                *(_QWORD *)((char *)&v393 + 7) = *(_QWORD *)((char *)__na + 7);
                v384 = v8[23];
                *((_QWORD *)v8 + 1) = 0;
                *((_QWORD *)v8 + 2) = 0;
                *(_QWORD *)v8 = 0;
                v279 = *((_DWORD *)v8 + 6);
                v280 = (unint64_t)(v276 - 2) >> 1;
                v281 = v8;
                v387 = v280;
                v389 = v276;
                do
                {
                  v282 = v278 + 1;
                  v283 = (void **)&v281[32 * v278 + 32];
                  v284 = 2 * v278;
                  v278 = (2 * v278) | 1;
                  v285 = v284 + 2;
                  if (v284 + 2 >= v276)
                    goto LABEL_610;
                  v286 = *((_BYTE *)v283 + 23);
                  if (v286 >= 0)
                    v287 = *((unsigned __int8 *)v283 + 23);
                  else
                    v287 = (size_t)v283[1];
                  v288 = *((char *)v283 + 55);
                  if (v288 >= 0)
                    v289 = *((unsigned __int8 *)v283 + 55);
                  else
                    v289 = (size_t)v283[5];
                  if (v288 >= 0)
                    v290 = (unsigned __int8 *)(v283 + 4);
                  else
                    v290 = (unsigned __int8 *)v283[4];
                  if (v287 == v289)
                  {
                    if ((*((_BYTE *)v283 + 23) & 0x80) != 0)
                    {
                      if (!memcmp(*v283, v290, (size_t)v283[1]))
                      {
LABEL_614:
                        v280 = v387;
                        v276 = v389;
                        if (*(float *)&v281[32 * v282 + 24] < *((float *)v283 + 14))
                          goto LABEL_609;
                        goto LABEL_610;
                      }
                    }
                    else
                    {
                      if (!*((_BYTE *)v283 + 23))
                        goto LABEL_614;
                      v291 = v290;
                      v292 = v283;
                      v293 = *((unsigned __int8 *)v283 + 23);
                      while (*(unsigned __int8 *)v292 == *v291)
                      {
                        v292 = (void **)((char *)v292 + 1);
                        ++v291;
                        if (!--v293)
                          goto LABEL_614;
                      }
                    }
                  }
                  if (v286 >= 0)
                    v294 = v283;
                  else
                    v294 = *v283;
                  if (v289 >= v287)
                    v295 = v287;
                  else
                    v295 = v289;
                  v296 = memcmp(v294, v290, v295);
                  v297 = v287 < v289;
                  if (v296)
                    v297 = v296 < 0;
                  v280 = v387;
                  v276 = v389;
                  if (v297)
                  {
LABEL_609:
                    v283 += 4;
                    v278 = v285;
                  }
LABEL_610:
                  if ((char)v281[23] < 0)
                    operator delete(*(void **)v281);
                  v298 = *(_OWORD *)v283;
                  *((_QWORD *)v281 + 2) = v283[2];
                  *(_OWORD *)v281 = v298;
                  *((_BYTE *)v283 + 23) = 0;
                  *(_BYTE *)v283 = 0;
                  *((_DWORD *)v281 + 6) = *((_DWORD *)v283 + 6);
                  v281 = (unsigned __int8 *)v283;
                }
                while (v278 <= v280);
                v277 = v378 - 4;
                v299 = *((char *)v283 + 23);
                if (v283 == v378 - 4)
                {
                  if (v299 < 0)
                    operator delete(*v283);
                  *v283 = v381;
                  v313 = *(void **)((char *)&v393 + 7);
                  v283[1] = (void *)v393;
                  *(void **)((char *)v283 + 15) = v313;
                  *((_BYTE *)v283 + 23) = v384;
                  *((_DWORD *)v283 + 6) = v279;
                  goto LABEL_687;
                }
                if (v299 < 0)
                  operator delete(*v283);
                v300 = *(_OWORD *)v277;
                v283[2] = *(v378 - 2);
                *(_OWORD *)v283 = v300;
                *((_BYTE *)v378 - 9) = 0;
                *((_BYTE *)v378 - 32) = 0;
                *((_DWORD *)v283 + 6) = *((_DWORD *)v378 - 2);
                if (*((char *)v378 - 9) < 0)
                  operator delete(*v277);
                *(v378 - 4) = v381;
                v301 = (void *)v393;
                *(void **)((char *)v378 - 17) = *(void **)((char *)&v393 + 7);
                *(v378 - 3) = v301;
                *((_BYTE *)v378 - 9) = v384;
                *((_DWORD *)v378 - 2) = v279;
                v302 = (char *)(v283 + 4) - (char *)v385;
                if (v302 >= 33)
                {
                  v303 = (((unint64_t)v302 >> 5) - 2) >> 1;
                  v304 = &v385[32 * v303];
                  v305 = v304[23];
                  if ((v305 & 0x80u) == 0)
                    v306 = v304[23];
                  else
                    v306 = *((_QWORD *)v304 + 1);
                  v307 = *((_BYTE *)v283 + 23);
                  if (v307 >= 0)
                    v308 = *((unsigned __int8 *)v283 + 23);
                  else
                    v308 = (size_t)v283[1];
                  if (v307 >= 0)
                    v309 = (unsigned __int8 *)v283;
                  else
                    v309 = (unsigned __int8 *)*v283;
                  if (v306 != v308)
                    goto LABEL_642;
                  if ((v304[23] & 0x80) != 0)
                  {
                    if (memcmp(*(const void **)v304, v309, *((_QWORD *)v304 + 1)))
                      goto LABEL_642;
                  }
                  else if (v304[23])
                  {
                    v310 = v309;
                    v311 = &v385[32 * v303];
                    v312 = v304[23];
                    while (*v311 == *v310)
                    {
                      ++v311;
                      ++v310;
                      if (!--v312)
                        goto LABEL_652;
                    }
LABEL_642:
                    if ((v305 & 0x80u) == 0)
                      v314 = &v385[32 * v303];
                    else
                      v314 = *(unsigned __int8 **)v304;
                    if (v308 >= v306)
                      v315 = v306;
                    else
                      v315 = v308;
                    v316 = memcmp(v314, v309, v315);
                    v317 = v306 < v308;
                    if (v316)
                      v317 = v316 < 0;
                    if (!v317)
                      goto LABEL_687;
                    v318 = *((float *)v283 + 6);
LABEL_653:
                    v319 = *(_OWORD *)v283;
                    v391 = (unsigned __int8 *)v283[2];
                    *(_OWORD *)__p = v319;
                    v283[1] = 0;
                    v283[2] = 0;
                    *v283 = 0;
                    v392 = v318;
                    if (SHIBYTE(v391) >= 0)
                      v320 = (void *)HIBYTE(v391);
                    else
                      v320 = __p[1];
                    if (SHIBYTE(v391) >= 0)
                      v321 = __p;
                    else
                      v321 = (void **)__p[0];
                    while (1)
                    {
                      v322 = v304;
                      if (*((char *)v283 + 23) < 0)
                        operator delete(*v283);
                      v323 = *(_OWORD *)v304;
                      v283[2] = (void *)*((_QWORD *)v304 + 2);
                      *(_OWORD *)v283 = v323;
                      v304[23] = 0;
                      *v304 = 0;
                      *((_DWORD *)v283 + 6) = *((_DWORD *)v304 + 6);
                      if (!v303)
                      {
LABEL_684:
                        if ((char)v322[23] < 0)
                          operator delete(*(void **)v322);
                        v333 = *(_OWORD *)__p;
                        *((_QWORD *)v322 + 2) = v391;
                        *(_OWORD *)v322 = v333;
                        *((float *)v322 + 6) = v392;
                        goto LABEL_687;
                      }
                      v303 = (v303 - 1) >> 1;
                      v304 = &v385[32 * v303];
                      v324 = v304[23];
                      if ((v324 & 0x80u) == 0)
                        v325 = v304[23];
                      else
                        v325 = *((_QWORD *)v304 + 1);
                      if ((void *)v325 == v320)
                      {
                        if ((v304[23] & 0x80) != 0)
                        {
                          if (!memcmp(*(const void **)v304, v321, *((_QWORD *)v304 + 1)))
                          {
LABEL_683:
                            v283 = (void **)v322;
                            if (*(float *)&v385[32 * v303 + 24] >= v392)
                              goto LABEL_684;
                            continue;
                          }
                        }
                        else
                        {
                          if (!v304[23])
                            goto LABEL_683;
                          v326 = v321;
                          v327 = &v385[32 * v303];
                          v328 = v304[23];
                          while (*v327 == *(unsigned __int8 *)v326)
                          {
                            ++v327;
                            v326 = (void **)((char *)v326 + 1);
                            if (!--v328)
                              goto LABEL_683;
                          }
                        }
                      }
                      if ((v324 & 0x80u) == 0)
                        v329 = &v385[32 * v303];
                      else
                        v329 = *(unsigned __int8 **)v304;
                      if ((unint64_t)v320 >= v325)
                        v330 = v325;
                      else
                        v330 = (size_t)v320;
                      v331 = memcmp(v329, v321, v330);
                      v332 = v325 < (unint64_t)v320;
                      if (v331)
                        v332 = v331 < 0;
                      v283 = (void **)v322;
                      if (!v332)
                        goto LABEL_684;
                    }
                  }
LABEL_652:
                  v318 = *((float *)v283 + 6);
                  if (*(float *)&v385[32 * v303 + 24] < v318)
                    goto LABEL_653;
                }
LABEL_687:
                v276 = v389 - 1;
                v8 = v385;
                if (v389 <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v7[32 * ((unint64_t)v11 >> 1)];
        if ((unint64_t)v10 <= 0x1000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v13, v7, (unsigned __int8 *)v382);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v7, v13, (unsigned __int8 *)v382);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v7 + 4, v13 - 32, v379);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v7 + 8, &v7[32 * v12 + 32], v377);
          v9 = (unsigned __int8 *)v388;
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v13 - 4, v13, &v7[32 * v12 + 32]);
          v14 = *(_OWORD *)v7;
          v391 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
          *(_OWORD *)__p = v14;
          v15 = *((_QWORD *)v13 + 2);
          *(_OWORD *)v7 = *(_OWORD *)v13;
          *((_QWORD *)v7 + 2) = v15;
          v16 = *(_OWORD *)__p;
          *((_QWORD *)v13 + 2) = v391;
          *(_OWORD *)v13 = v16;
          LODWORD(v16) = *((_DWORD *)v7 + 6);
          *((_DWORD *)v7 + 6) = *((_DWORD *)v13 + 6);
          *((_DWORD *)v13 + 6) = v16;
        }
        v386 = a3 - 1;
        if ((a4 & 1) == 0)
        {
          v17 = (const void **)(v7 - 32);
          v18 = *(v7 - 9);
          v19 = *((_QWORD *)v7 - 3);
          if ((v18 & 0x80u) == 0)
            v20 = *(v7 - 9);
          else
            v20 = *((_QWORD *)v7 - 3);
          v21 = v7[23];
          if (v21 >= 0)
            v22 = v7[23];
          else
            v22 = *((_QWORD *)v7 + 1);
          if (v21 < 0)
            v7 = *(unsigned __int8 **)v7;
          if (v20 != v22)
            goto LABEL_26;
          if ((v18 & 0x80) != 0)
          {
            if (memcmp(*v17, v7, v19))
              goto LABEL_26;
          }
          else if (v18)
          {
            v23 = v7;
            v24 = v8 - 32;
            v25 = *(v8 - 9);
            while (*v24 == *v23)
            {
              ++v24;
              ++v23;
              if (!--v25)
                goto LABEL_36;
            }
LABEL_26:
            if ((v18 & 0x80u) == 0)
              v26 = v8 - 32;
            else
              v26 = (unsigned __int8 *)*v17;
            if (v22 >= v20)
              v27 = v20;
            else
              v27 = v22;
            v28 = memcmp(v26, v7, v27);
            v29 = v20 < v22;
            if (v28)
              v29 = v28 < 0;
            if (!v29)
            {
              v30 = *((float *)v8 + 6);
LABEL_187:
              v92 = *(_OWORD *)v8;
              v391 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
              *(_OWORD *)__p = v92;
              *((_QWORD *)v8 + 1) = 0;
              *((_QWORD *)v8 + 2) = 0;
              *(_QWORD *)v8 = 0;
              v392 = v30;
              v93 = SHIBYTE(v391);
              v373 = HIBYTE(v391);
              __n = __p[1];
              if (SHIBYTE(v391) >= 0)
                v94 = (void *)HIBYTE(v391);
              else
                v94 = __p[1];
              v95 = (void *)*((unsigned __int8 *)v388 - 9);
              v96 = (unsigned __int8 **)*(v388 - 4);
              if ((char)v95 >= 0)
                v97 = *((unsigned __int8 *)v388 - 9);
              else
                v97 = (size_t)*(v388 - 3);
              if ((char)v95 >= 0)
                v98 = v382;
              else
                v98 = (const void **)*(v388 - 4);
              v372 = *(v388 - 3);
              v371 = SHIBYTE(v391);
              if (v94 == (void *)v97)
              {
                if ((HIBYTE(v391) & 0x80) != 0)
                {
                  if (memcmp(__p[0], v98, (size_t)__p[1]))
                    goto LABEL_204;
                }
                else if (HIBYTE(v391))
                {
                  v99 = __p;
                  v100 = v98;
                  v101 = HIBYTE(v391);
                  while (*(unsigned __int8 *)v99 == *(unsigned __int8 *)v100)
                  {
                    v99 = (void **)((char *)v99 + 1);
                    v100 = (const void **)((char *)v100 + 1);
                    if (!--v101)
                      goto LABEL_214;
                  }
                  goto LABEL_204;
                }
LABEL_214:
                if (v30 < *((float *)v388 - 2))
                {
                  v107 = __p[0];
                  if (v93 >= 0)
                    v103 = __p;
                  else
                    v103 = (void **)__p[0];
                  goto LABEL_218;
                }
                goto LABEL_242;
              }
LABEL_204:
              v102 = __p[0];
              if (v93 >= 0)
                v103 = __p;
              else
                v103 = (void **)__p[0];
              if (v97 >= (unint64_t)v94)
                v104 = (size_t)v94;
              else
                v104 = v97;
              v105 = memcmp(v103, v98, v104);
              v106 = (unint64_t)v94 < v97;
              if (v105)
                v106 = v105 < 0;
              if (v106)
              {
                v107 = v102;
LABEL_218:
                v108 = v8;
                v109 = v373;
                while (1)
                {
                  v7 = v108 + 32;
                  v110 = (char)v108[55];
                  if (v110 >= 0)
                    v111 = v108[55];
                  else
                    v111 = *((_QWORD *)v108 + 5);
                  if (v110 >= 0)
                    v112 = v108 + 32;
                  else
                    v112 = (unsigned __int8 *)*((_QWORD *)v108 + 4);
                  if (v94 != (void *)v111)
                    goto LABEL_233;
                  if ((v373 & 0x80) != 0)
                  {
                    if (!memcmp(v107, v112, (size_t)__n))
                      goto LABEL_240;
LABEL_233:
                    if (v111 >= (unint64_t)v94)
                      v116 = (size_t)v94;
                    else
                      v116 = v111;
                    v117 = memcmp(v103, v112, v116);
                    v118 = (unint64_t)v94 < v111;
                    if (v117)
                      v118 = v117 < 0;
                    v108 += 32;
                    if (v118)
                      goto LABEL_272;
                  }
                  else
                  {
                    if ((_DWORD)v373)
                    {
                      v113 = __p;
                      v114 = v112;
                      v115 = v373;
                      while (*(unsigned __int8 *)v113 == *v114)
                      {
                        v113 = (void **)((char *)v113 + 1);
                        ++v114;
                        if (!--v115)
                          goto LABEL_240;
                      }
                      goto LABEL_233;
                    }
LABEL_240:
                    v119 = *((float *)v108 + 14);
                    v108 += 32;
                    if (v30 < v119)
                      goto LABEL_272;
                  }
                }
              }
LABEL_242:
              v7 = v8 + 32;
              if (v8 + 32 < (unsigned __int8 *)v388)
              {
                __s1 = __p[0];
                if (v93 >= 0)
                  v120 = __p;
                else
                  v120 = (void **)__p[0];
                v121 = v8;
                v109 = v373;
                while (1)
                {
                  v122 = v7;
                  v123 = v121[55];
                  if ((v123 & 0x80u) == 0)
                    v124 = v121[55];
                  else
                    v124 = *((_QWORD *)v121 + 5);
                  if ((v123 & 0x80u) == 0)
                    v125 = v7;
                  else
                    v125 = (unsigned __int8 *)*((_QWORD *)v121 + 4);
                  if (v94 == (void *)v124)
                  {
                    if ((v373 & 0x80) != 0)
                    {
                      if (!memcmp(__s1, v125, (size_t)__n))
                      {
LABEL_268:
                        if (v30 < *((float *)v121 + 14))
                          goto LABEL_272;
                        goto LABEL_269;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v373)
                        goto LABEL_268;
                      v126 = __p;
                      v127 = v125;
                      v128 = v373;
                      while (*(unsigned __int8 *)v126 == *v127)
                      {
                        v126 = (void **)((char *)v126 + 1);
                        ++v127;
                        if (!--v128)
                          goto LABEL_268;
                      }
                    }
                  }
                  if (v124 >= (unint64_t)v94)
                    v129 = (size_t)v94;
                  else
                    v129 = v124;
                  v130 = memcmp(v120, v125, v129);
                  v131 = (unint64_t)v94 < v124;
                  if (v130)
                    v131 = v130 < 0;
                  if (v131)
                    goto LABEL_272;
LABEL_269:
                  v7 += 32;
                  v121 = v122;
                  if (v122 + 32 >= (unsigned __int8 *)v388)
                    goto LABEL_272;
                }
              }
              v109 = v373;
LABEL_272:
              v132 = v388;
              if (v7 < (unsigned __int8 *)v388)
              {
                v133 = v388;
                v374 = __p[0];
                if (v371 >= 0)
                  v134 = __p;
                else
                  v134 = (void **)__p[0];
                v135 = v372;
                while (1)
                {
                  v132 = v133 - 4;
                  if ((char)v95 >= 0)
                    v136 = v95;
                  else
                    v136 = v135;
                  if ((char)v95 >= 0)
                    v137 = v133 - 4;
                  else
                    v137 = v96;
                  if (v94 == v136)
                  {
                    if ((v109 & 0x80) != 0)
                    {
                      if (!memcmp(v374, v137, (size_t)__n))
                      {
LABEL_298:
                        if (v30 >= *((float *)v133 - 2))
                          break;
                        goto LABEL_299;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v109)
                        goto LABEL_298;
                      v138 = __p;
                      v139 = v137;
                      v140 = v109;
                      while (*(unsigned __int8 *)v138 == *(unsigned __int8 *)v139)
                      {
                        v138 = (void **)((char *)v138 + 1);
                        v139 = (unsigned __int8 **)((char *)v139 + 1);
                        if (!--v140)
                          goto LABEL_298;
                      }
                    }
                  }
                  if (v136 >= v94)
                    v141 = (size_t)v94;
                  else
                    v141 = (size_t)v136;
                  v142 = memcmp(v134, v137, v141);
                  v143 = v94 < v136;
                  if (v142)
                    v143 = v142 < 0;
                  if (!v143)
                    break;
LABEL_299:
                  v95 = (void *)*((unsigned __int8 *)v133 - 41);
                  v96 = (unsigned __int8 **)*(v133 - 8);
                  v135 = *(v133 - 7);
                  v133 -= 4;
                }
              }
LABEL_352:
              if (v7 >= (unsigned __int8 *)v132)
              {
                v175 = (void **)(v7 - 32);
                if (v7 - 32 != v385)
                {
                  if ((char)v385[23] < 0)
                    operator delete(*(void **)v385);
                  v176 = *(_OWORD *)v175;
                  *((_QWORD *)v385 + 2) = *((_QWORD *)v7 - 2);
                  *(_OWORD *)v385 = v176;
                  *(v7 - 9) = 0;
                  *(v7 - 32) = 0;
                  *((_DWORD *)v385 + 6) = *((_DWORD *)v7 - 2);
                }
                if ((char)*(v7 - 9) < 0)
                  operator delete(*v175);
                v177 = *(_OWORD *)__p;
                *((_QWORD *)v7 - 2) = v391;
                *(_OWORD *)v175 = v177;
                HIBYTE(v391) = 0;
                LOBYTE(__p[0]) = 0;
                *((float *)v7 - 2) = v392;
                a3 = v386;
                if (SHIBYTE(v391) < 0)
                  operator delete(__p[0]);
                goto LABEL_186;
              }
              v144 = *(_OWORD *)v7;
              v394 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
              v393 = v144;
              v145 = *(_OWORD *)v132;
              *((_QWORD *)v7 + 2) = v132[2];
              *(_OWORD *)v7 = v145;
              v146 = v393;
              v132[2] = v394;
              *(_OWORD *)v132 = v146;
              LODWORD(v146) = *((_DWORD *)v7 + 6);
              *((_DWORD *)v7 + 6) = *((_DWORD *)v132 + 6);
              *((_DWORD *)v132 + 6) = v146;
              v147 = HIBYTE(v391);
              v149 = __p[0];
              v148 = __p[1];
              if (SHIBYTE(v391) >= 0)
                v150 = (void *)HIBYTE(v391);
              else
                v150 = __p[1];
              if (SHIBYTE(v391) >= 0)
                v151 = __p;
              else
                v151 = (void **)__p[0];
              v152 = v392;
              v153 = v7;
              while (1)
              {
                v7 = v153 + 32;
                v154 = (char)v153[55];
                if (v154 >= 0)
                  v155 = v153[55];
                else
                  v155 = *((_QWORD *)v153 + 5);
                if (v154 >= 0)
                  v156 = v153 + 32;
                else
                  v156 = (unsigned __int8 *)*((_QWORD *)v153 + 4);
                if (v150 != (void *)v155)
                  goto LABEL_321;
                if ((v147 & 0x80) != 0)
                {
                  if (!memcmp(v149, v156, (size_t)v148))
                    goto LABEL_328;
LABEL_321:
                  if (v155 >= (unint64_t)v150)
                    v160 = (size_t)v150;
                  else
                    v160 = v155;
                  v161 = memcmp(v151, v156, v160);
                  v162 = (unint64_t)v150 < v155;
                  if (v161)
                    v162 = v161 < 0;
                  v153 += 32;
                  if (v162)
                  {
LABEL_329:
                    v164 = v132;
                    while (1)
                    {
                      v132 = v164 - 4;
                      v165 = *((char *)v164 - 9);
                      if (v165 >= 0)
                        v166 = *((unsigned __int8 *)v164 - 9);
                      else
                        v166 = (size_t)*(v164 - 3);
                      if (v165 >= 0)
                        v167 = v164 - 4;
                      else
                        v167 = (unsigned __int8 **)*(v164 - 4);
                      if (v150 != (void *)v166)
                        goto LABEL_344;
                      if ((v147 & 0x80) != 0)
                      {
                        if (!memcmp(v149, v167, (size_t)v148))
                          goto LABEL_351;
LABEL_344:
                        if (v166 >= (unint64_t)v150)
                          v171 = (size_t)v150;
                        else
                          v171 = v166;
                        v172 = memcmp(v151, v167, v171);
                        v173 = (unint64_t)v150 < v166;
                        if (v172)
                          v173 = v172 < 0;
                        v164 -= 4;
                        if (!v173)
                          goto LABEL_352;
                      }
                      else
                      {
                        if ((_DWORD)v147)
                        {
                          v168 = __p;
                          v169 = v167;
                          v170 = v147;
                          while (*(unsigned __int8 *)v168 == *(unsigned __int8 *)v169)
                          {
                            v168 = (void **)((char *)v168 + 1);
                            v169 = (unsigned __int8 **)((char *)v169 + 1);
                            if (!--v170)
                              goto LABEL_351;
                          }
                          goto LABEL_344;
                        }
LABEL_351:
                        v174 = *((float *)v164 - 2);
                        v164 -= 4;
                        if (v152 >= v174)
                          goto LABEL_352;
                      }
                    }
                  }
                }
                else
                {
                  if ((_DWORD)v147)
                  {
                    v157 = __p;
                    v158 = v156;
                    v159 = v147;
                    while (*(unsigned __int8 *)v157 == *v158)
                    {
                      v157 = (void **)((char *)v157 + 1);
                      ++v158;
                      if (!--v159)
                        goto LABEL_328;
                    }
                    goto LABEL_321;
                  }
LABEL_328:
                  v163 = *((float *)v153 + 14);
                  v153 += 32;
                  if (v152 < v163)
                    goto LABEL_329;
                }
              }
            }
            goto LABEL_37;
          }
LABEL_36:
          v30 = *((float *)v8 + 6);
          if (*((float *)v8 - 2) >= v30)
            goto LABEL_187;
        }
LABEL_37:
        v31 = *(_OWORD *)v8;
        v391 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
        *(_OWORD *)__p = v31;
        *((_QWORD *)v8 + 1) = 0;
        *((_QWORD *)v8 + 2) = 0;
        *(_QWORD *)v8 = 0;
        v32 = *((float *)v8 + 6);
        v392 = v32;
        if (SHIBYTE(v391) >= 0)
          v33 = (void *)HIBYTE(v391);
        else
          v33 = __p[1];
        if (SHIBYTE(v391) >= 0)
          v34 = __p;
        else
          v34 = (void **)__p[0];
        v35 = (const void **)v8;
        do
        {
          while (1)
          {
            v36 = v35;
            v35 += 4;
            v37 = *((unsigned __int8 *)v36 + 55);
            if ((v37 & 0x80u) == 0)
              v38 = *((unsigned __int8 *)v36 + 55);
            else
              v38 = (size_t)v36[5];
            if ((void *)v38 != v33)
              goto LABEL_55;
            if ((v37 & 0x80) == 0)
              break;
            if (memcmp(*v35, v34, (size_t)v36[5]))
              goto LABEL_55;
LABEL_65:
            if (*((float *)v36 + 14) >= v32)
              goto LABEL_66;
          }
          if (!*((_BYTE *)v36 + 55))
            goto LABEL_65;
          v39 = 0;
          while (*((unsigned __int8 *)v36 + v39 + 32) == *((unsigned __int8 *)v34 + v39))
          {
            if (v37 == ++v39)
              goto LABEL_65;
          }
LABEL_55:
          if ((v37 & 0x80u) == 0)
            v40 = v35;
          else
            v40 = *v35;
          if ((unint64_t)v33 >= v38)
            v41 = v38;
          else
            v41 = (size_t)v33;
          v42 = memcmp(v40, v34, v41);
          v43 = v38 < (unint64_t)v33;
          if (v42)
            v43 = v42 < 0;
        }
        while (v43);
LABEL_66:
        v44 = v9;
        if (v36 != (const void **)v8)
        {
          while (1)
          {
            v45 = (const void **)(v44 - 32);
            v46 = *(v44 - 9);
            if ((v46 & 0x80u) == 0)
              v47 = *(v44 - 9);
            else
              v47 = *((_QWORD *)v44 - 3);
            if ((void *)v47 != v33)
              goto LABEL_78;
            if ((v46 & 0x80) != 0)
            {
              if (!memcmp(*v45, v34, *((_QWORD *)v44 - 3)))
                goto LABEL_88;
LABEL_78:
              if ((v46 & 0x80u) == 0)
                v49 = v44 - 32;
              else
                v49 = (unsigned __int8 *)*v45;
              if ((unint64_t)v33 >= v47)
                v50 = v47;
              else
                v50 = (size_t)v33;
              v51 = memcmp(v49, v34, v50);
              v52 = v47 < (unint64_t)v33;
              if (v51)
                v52 = v51 < 0;
              v44 -= 32;
              if (v52)
                goto LABEL_119;
            }
            else
            {
              if (*(v44 - 9))
              {
                v48 = 0;
                while (v44[v48 - 32] == *((unsigned __int8 *)v34 + v48))
                {
                  if (v46 == ++v48)
                    goto LABEL_88;
                }
                goto LABEL_78;
              }
LABEL_88:
              v53 = *((float *)v44 - 2);
              v44 -= 32;
              if (v53 < v32)
                goto LABEL_119;
            }
          }
        }
        v45 = (const void **)v9;
        if (v35 < (const void **)v9)
        {
          v54 = v9;
          do
          {
            v45 = (const void **)(v54 - 32);
            v55 = *(v54 - 9);
            if ((v55 & 0x80u) == 0)
              v56 = *(v54 - 9);
            else
              v56 = *((_QWORD *)v54 - 3);
            if ((void *)v56 != v33)
              goto LABEL_103;
            if ((v55 & 0x80) != 0)
            {
              if (memcmp(*v45, v34, *((_QWORD *)v54 - 3)))
                goto LABEL_103;
            }
            else if (*(v54 - 9))
            {
              v57 = 0;
              while (v54[v57 - 32] == *((unsigned __int8 *)v34 + v57))
              {
                if (v55 == ++v57)
                  goto LABEL_114;
              }
LABEL_103:
              if ((v55 & 0x80u) == 0)
                v58 = v54 - 32;
              else
                v58 = (unsigned __int8 *)*v45;
              if ((unint64_t)v33 >= v56)
                v59 = v56;
              else
                v59 = (size_t)v33;
              v60 = memcmp(v58, v34, v59);
              v61 = v56 >= (unint64_t)v33;
              if (v60)
                v61 = v60 >= 0;
              v62 = !v61 || v35 >= v45;
              goto LABEL_117;
            }
LABEL_114:
            v62 = *((float *)v54 - 2) < v32 || v35 >= v45;
LABEL_117:
            v54 -= 32;
          }
          while (!v62);
        }
LABEL_119:
        v7 = (unsigned __int8 *)v35;
        if (v35 >= v45)
          goto LABEL_174;
        v63 = v45;
        while (2)
        {
          v393 = *(_OWORD *)v7;
          v64 = v393;
          v394 = (unsigned __int8 *)*((_QWORD *)v7 + 2);
          v65 = v394;
          v66 = v63[2];
          *(_OWORD *)v7 = *(_OWORD *)v63;
          *((_QWORD *)v7 + 2) = v66;
          v63[2] = v65;
          *(_OWORD *)v63 = v64;
          LODWORD(v64) = *((_DWORD *)v7 + 6);
          *((_DWORD *)v7 + 6) = *((_DWORD *)v63 + 6);
          *((_DWORD *)v63 + 6) = v64;
          if (SHIBYTE(v391) >= 0)
            v67 = (void *)HIBYTE(v391);
          else
            v67 = __p[1];
          if (SHIBYTE(v391) >= 0)
            v68 = __p;
          else
            v68 = (void **)__p[0];
          v69 = v392;
          v70 = v7;
          while (2)
          {
            while (1)
            {
              v7 = v70 + 32;
              v71 = v70[55];
              v72 = (v71 & 0x80u) == 0 ? (void *)v70[55] : (void *)*((_QWORD *)v70 + 5);
              if (v72 != v67)
                break;
              if ((v71 & 0x80) != 0)
              {
                if (memcmp(*(const void **)v7, v68, *((_QWORD *)v70 + 5)))
                  break;
              }
              else if (v70[55])
              {
                v73 = 0;
                while (v70[v73 + 32] == *((unsigned __int8 *)v68 + v73))
                {
                  if (v71 == ++v73)
                    goto LABEL_149;
                }
                break;
              }
LABEL_149:
              v78 = *((float *)v70 + 14);
              v70 += 32;
              if (v78 >= v69)
                goto LABEL_150;
            }
            if ((v71 & 0x80u) == 0)
              v74 = v70 + 32;
            else
              v74 = *(unsigned __int8 **)v7;
            if (v67 >= v72)
              v75 = (size_t)v72;
            else
              v75 = (size_t)v67;
            v76 = memcmp(v74, v68, v75);
            v77 = v72 < v67;
            if (v76)
              v77 = v76 < 0;
            v70 += 32;
            if (v77)
              continue;
            break;
          }
LABEL_150:
          v79 = v63;
          while (2)
          {
            while (1)
            {
              v63 = v79 - 4;
              v80 = *((unsigned __int8 *)v79 - 9);
              v81 = (v80 & 0x80u) == 0 ? (void *)*((unsigned __int8 *)v79 - 9) : (void *)*(v79 - 3);
              if (v81 != v67)
                break;
              if ((v80 & 0x80) != 0)
              {
                if (memcmp(*v63, v68, (size_t)*(v79 - 3)))
                  break;
              }
              else if (*((_BYTE *)v79 - 9))
              {
                v82 = 0;
                while (*((unsigned __int8 *)v79 + v82 - 32) == *((unsigned __int8 *)v68 + v82))
                {
                  if (v80 == ++v82)
                    goto LABEL_172;
                }
                break;
              }
LABEL_172:
              v87 = *((float *)v79 - 2);
              v79 -= 4;
              if (v87 < v69)
                goto LABEL_173;
            }
            if ((v80 & 0x80u) == 0)
              v83 = v79 - 4;
            else
              v83 = (const void **)*v63;
            if (v67 >= v81)
              v84 = (size_t)v81;
            else
              v84 = (size_t)v67;
            v85 = memcmp(v83, v68, v84);
            v86 = v81 < v67;
            if (v85)
              v86 = v85 < 0;
            v79 -= 4;
            if (!v86)
              continue;
            break;
          }
LABEL_173:
          if (v7 < (unsigned __int8 *)v63)
            continue;
          break;
        }
LABEL_174:
        v88 = (void **)(v7 - 32);
        a1 = v385;
        a3 = v386;
        if (v7 - 32 != v385)
        {
          if ((char)v385[23] < 0)
            operator delete(*(void **)v385);
          v89 = *(_OWORD *)v88;
          *((_QWORD *)v385 + 2) = *((_QWORD *)v7 - 2);
          *(_OWORD *)v385 = v89;
          *(v7 - 9) = 0;
          *(v7 - 32) = 0;
          *((_DWORD *)v385 + 6) = *((_DWORD *)v7 - 2);
        }
        if ((char)*(v7 - 9) < 0)
          operator delete(*v88);
        v90 = *(_OWORD *)__p;
        *((_QWORD *)v7 - 2) = v391;
        *(_OWORD *)v88 = v90;
        HIBYTE(v391) = 0;
        LOBYTE(__p[0]) = 0;
        *((float *)v7 - 2) = v392;
        if (SHIBYTE(v391) < 0)
          operator delete(__p[0]);
        if (v35 < v45)
          goto LABEL_185;
        v91 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v385, (unsigned __int8 **)v7 - 4);
        if (!std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)v7, v388))
        {
          if (v91)
            continue;
LABEL_185:
          std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,false>(v385, v7 - 32, v386, a4 & 1);
LABEL_186:
          a4 = 0;
          continue;
        }
        a2 = (unsigned __int8 **)(v7 - 32);
        if (!v91)
          goto LABEL_2;
        return;
    }
  }
}

float std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>(unsigned __int8 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  signed __int8 v10;
  size_t v11;
  signed __int8 v12;
  size_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  int v20;
  float result;
  _BOOL4 v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  signed __int8 v26;
  size_t v27;
  signed __int8 v28;
  size_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  const void *v34;
  size_t v35;
  int v36;
  _BOOL4 v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  signed __int8 v41;
  size_t v42;
  signed __int8 v43;
  size_t v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  unsigned __int8 *v47;
  uint64_t v48;
  const void *v49;
  size_t v50;
  int v51;
  _BOOL4 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  signed __int8 v56;
  size_t v57;
  unsigned __int8 v58;
  size_t v59;
  unsigned __int8 *v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  uint64_t v63;
  const void *v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, a2, a3, a4);
  v10 = a5[23];
  if (v10 >= 0)
    v11 = a5[23];
  else
    v11 = *((_QWORD *)a5 + 1);
  v12 = a4[23];
  if (v12 >= 0)
    v13 = a4[23];
  else
    v13 = *((_QWORD *)a4 + 1);
  if (v12 >= 0)
    v14 = a4;
  else
    v14 = *(unsigned __int8 **)a4;
  if (v11 != v13)
    goto LABEL_18;
  if ((a5[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a5, v14, *((_QWORD *)a5 + 1)))
      goto LABEL_18;
LABEL_28:
    result = *((float *)a5 + 6);
    if (result >= *((float *)a4 + 6))
      return result;
LABEL_29:
    v23 = *((_QWORD *)a4 + 2);
    v24 = *(_OWORD *)a4;
    v25 = *((_QWORD *)a5 + 2);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *((_QWORD *)a4 + 2) = v25;
    *(_OWORD *)a5 = v24;
    *((_QWORD *)a5 + 2) = v23;
    LODWORD(v24) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = *((_DWORD *)a5 + 6);
    *((_DWORD *)a5 + 6) = v24;
    v26 = a4[23];
    if (v26 >= 0)
      v27 = a4[23];
    else
      v27 = *((_QWORD *)a4 + 1);
    v28 = a3[23];
    if (v28 >= 0)
      v29 = a3[23];
    else
      v29 = *((_QWORD *)a3 + 1);
    if (v28 >= 0)
      v30 = a3;
    else
      v30 = *(unsigned __int8 **)a3;
    if (v27 != v29)
      goto LABEL_46;
    if ((a4[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)a4, v30, *((_QWORD *)a4 + 1)))
        goto LABEL_46;
    }
    else if (a4[23])
    {
      v31 = v30;
      v32 = a4;
      v33 = a4[23];
      while (*v32 == *v31)
      {
        ++v32;
        ++v31;
        if (!--v33)
          goto LABEL_56;
      }
LABEL_46:
      if (v26 >= 0)
        v34 = a4;
      else
        v34 = *(const void **)a4;
      if (v29 >= v27)
        v35 = v27;
      else
        v35 = v29;
      v36 = memcmp(v34, v30, v35);
      v37 = v27 < v29;
      if (v36)
        v37 = v36 < 0;
      if (!v37)
        return result;
LABEL_57:
      v38 = *((_QWORD *)a3 + 2);
      v39 = *(_OWORD *)a3;
      v40 = *((_QWORD *)a4 + 2);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *((_QWORD *)a3 + 2) = v40;
      *(_OWORD *)a4 = v39;
      *((_QWORD *)a4 + 2) = v38;
      LODWORD(v39) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = *((_DWORD *)a4 + 6);
      *((_DWORD *)a4 + 6) = v39;
      v41 = a3[23];
      if (v41 >= 0)
        v42 = a3[23];
      else
        v42 = *((_QWORD *)a3 + 1);
      v43 = a2[23];
      if (v43 >= 0)
        v44 = a2[23];
      else
        v44 = *((_QWORD *)a2 + 1);
      if (v43 >= 0)
        v45 = a2;
      else
        v45 = *(unsigned __int8 **)a2;
      if (v42 != v44)
        goto LABEL_74;
      if ((a3[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)a3, v45, *((_QWORD *)a3 + 1)))
          goto LABEL_74;
      }
      else if (a3[23])
      {
        v46 = v45;
        v47 = a3;
        v48 = a3[23];
        while (*v47 == *v46)
        {
          ++v47;
          ++v46;
          if (!--v48)
            goto LABEL_84;
        }
LABEL_74:
        if (v41 >= 0)
          v49 = a3;
        else
          v49 = *(const void **)a3;
        if (v44 >= v42)
          v50 = v42;
        else
          v50 = v44;
        v51 = memcmp(v49, v45, v50);
        v52 = v42 < v44;
        if (v51)
          v52 = v51 < 0;
        if (!v52)
          return result;
LABEL_85:
        v53 = *((_QWORD *)a2 + 2);
        v54 = *(_OWORD *)a2;
        v55 = *((_QWORD *)a3 + 2);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *((_QWORD *)a2 + 2) = v55;
        *(_OWORD *)a3 = v54;
        *((_QWORD *)a3 + 2) = v53;
        LODWORD(v54) = *((_DWORD *)a2 + 6);
        *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
        *((_DWORD *)a3 + 6) = v54;
        v56 = a2[23];
        if (v56 >= 0)
          v57 = a2[23];
        else
          v57 = *((_QWORD *)a2 + 1);
        v58 = a1[23];
        if ((v58 & 0x80u) == 0)
          v59 = a1[23];
        else
          v59 = *((_QWORD *)a1 + 1);
        if ((v58 & 0x80u) == 0)
          v60 = a1;
        else
          v60 = *(unsigned __int8 **)a1;
        if (v57 != v59)
          goto LABEL_102;
        if ((a2[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)a2, v60, *((_QWORD *)a2 + 1)))
            goto LABEL_102;
        }
        else if (a2[23])
        {
          v61 = v60;
          v62 = a2;
          v63 = a2[23];
          while (*v62 == *v61)
          {
            ++v62;
            ++v61;
            if (!--v63)
              goto LABEL_113;
          }
LABEL_102:
          if (v56 >= 0)
            v64 = a2;
          else
            v64 = *(const void **)a2;
          if (v59 >= v57)
            v65 = v57;
          else
            v65 = v59;
          v66 = memcmp(v64, v60, v65);
          v67 = v57 < v59;
          if (v66)
            v67 = v66 < 0;
          if (!v67)
            return result;
LABEL_111:
          v68 = *((_QWORD *)a1 + 2);
          v69 = *(_OWORD *)a1;
          v70 = *((_QWORD *)a2 + 2);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *((_QWORD *)a1 + 2) = v70;
          *(_OWORD *)a2 = v69;
          *((_QWORD *)a2 + 2) = v68;
          result = *((float *)a1 + 6);
          *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
          *((float *)a2 + 6) = result;
          return result;
        }
LABEL_113:
        result = *((float *)a2 + 6);
        if (result >= *((float *)a1 + 6))
          return result;
        goto LABEL_111;
      }
LABEL_84:
      result = *((float *)a3 + 6);
      if (result >= *((float *)a2 + 6))
        return result;
      goto LABEL_85;
    }
LABEL_56:
    result = *((float *)a4 + 6);
    if (result >= *((float *)a3 + 6))
      return result;
    goto LABEL_57;
  }
  if (!a5[23])
    goto LABEL_28;
  v15 = v14;
  v16 = a5;
  v17 = a5[23];
  while (*v16 == *v15)
  {
    ++v16;
    ++v15;
    if (!--v17)
      goto LABEL_28;
  }
LABEL_18:
  if (v10 >= 0)
    v18 = a5;
  else
    v18 = *(const void **)a5;
  if (v13 >= v11)
    v19 = v11;
  else
    v19 = v13;
  v20 = memcmp(v18, v14, v19);
  v22 = v11 < v13;
  if (v20)
    v22 = v20 < 0;
  if (v22)
    goto LABEL_29;
  return result;
}

unsigned __int8 **std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(unsigned __int8 **result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 **v5;
  signed __int8 v6;
  size_t v7;
  char v8;
  size_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  size_t v15;
  BOOL v16;
  signed __int8 v17;
  size_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  signed __int8 v22;
  size_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  _BOOL4 v29;
  unsigned __int8 *v30;
  __int128 v31;
  unsigned __int8 *v32;
  int *v33;
  unsigned __int8 *v34;
  __int128 v35;
  unsigned __int8 *v36;
  float v37;
  signed __int8 v38;
  size_t v39;
  signed __int8 v40;
  size_t v41;
  unsigned __int8 *v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  uint64_t v45;
  const void *v46;
  size_t v47;
  _BOOL4 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  float *v52;
  signed __int8 v53;
  size_t v54;
  char v55;
  size_t v56;
  unsigned __int8 *v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  uint64_t v60;
  const void *v61;
  size_t v62;
  _BOOL4 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  const void *v67;
  size_t v68;
  _BOOL4 v69;
  unsigned __int8 *v70;
  __int128 v71;
  unsigned __int8 *v72;
  int v73;

  v5 = result;
  v6 = a2[23];
  if (v6 >= 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  v8 = *((_BYTE *)result + 23);
  if (v8 >= 0)
    v9 = *((unsigned __int8 *)result + 23);
  else
    v9 = (size_t)result[1];
  if (v8 >= 0)
    v10 = (unsigned __int8 *)result;
  else
    v10 = *result;
  if (v7 != v9)
    goto LABEL_18;
  if ((a2[23] & 0x80) != 0)
  {
    result = (unsigned __int8 **)memcmp(*(const void **)a2, v10, *((_QWORD *)a2 + 1));
    if ((_DWORD)result)
      goto LABEL_18;
LABEL_37:
    if (v6 >= 0)
      v14 = a2;
    else
      v14 = *(unsigned __int8 **)a2;
    if (*((float *)a2 + 6) < *((float *)v5 + 6))
      goto LABEL_27;
LABEL_41:
    v22 = a3[23];
    if (v22 >= 0)
      v23 = a3[23];
    else
      v23 = *((_QWORD *)a3 + 1);
    if (v23 != v7)
      goto LABEL_80;
    if ((a3[23] & 0x80) != 0)
    {
      result = (unsigned __int8 **)memcmp(*(const void **)a3, v14, *((_QWORD *)a3 + 1));
      if ((_DWORD)result)
        goto LABEL_80;
    }
    else if (a3[23])
    {
      v24 = v14;
      v25 = a3;
      v26 = a3[23];
      while (*v25 == *v24)
      {
        ++v25;
        ++v24;
        if (!--v26)
          goto LABEL_90;
      }
LABEL_80:
      if (v22 >= 0)
        v46 = a3;
      else
        v46 = *(const void **)a3;
      if (v7 >= v23)
        v47 = v23;
      else
        v47 = v7;
      result = (unsigned __int8 **)memcmp(v46, v14, v47);
      v48 = v23 < v7;
      if ((_DWORD)result)
        v48 = (int)result < 0;
      if (!v48)
        return result;
LABEL_91:
      v49 = *((_QWORD *)a2 + 2);
      v50 = *(_OWORD *)a2;
      v51 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v51;
      *(_OWORD *)a3 = v50;
      *((_QWORD *)a3 + 2) = v49;
      v52 = (float *)(a2 + 24);
      LODWORD(v50) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v50;
      v53 = a2[23];
      if (v53 >= 0)
        v54 = a2[23];
      else
        v54 = *((_QWORD *)a2 + 1);
      v55 = *((_BYTE *)v5 + 23);
      if (v55 >= 0)
        v56 = *((unsigned __int8 *)v5 + 23);
      else
        v56 = (size_t)v5[1];
      if (v55 >= 0)
        v57 = (unsigned __int8 *)v5;
      else
        v57 = *v5;
      if (v54 != v56)
        goto LABEL_122;
      if ((a2[23] & 0x80) != 0)
      {
        result = (unsigned __int8 **)memcmp(*(const void **)a2, v57, *((_QWORD *)a2 + 1));
        if ((_DWORD)result)
          goto LABEL_122;
      }
      else if (a2[23])
      {
        v58 = v57;
        v59 = a2;
        v60 = a2[23];
        while (*v59 == *v58)
        {
          ++v59;
          ++v58;
          if (!--v60)
            goto LABEL_132;
        }
LABEL_122:
        if (v53 >= 0)
          v67 = a2;
        else
          v67 = *(const void **)a2;
        if (v56 >= v54)
          v68 = v54;
        else
          v68 = v56;
        result = (unsigned __int8 **)memcmp(v67, v57, v68);
        v69 = v54 < v56;
        if ((_DWORD)result)
          v69 = (int)result < 0;
        if (!v69)
          return result;
LABEL_133:
        v70 = v5[2];
        v71 = *(_OWORD *)v5;
        v72 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        *(_OWORD *)v5 = *(_OWORD *)a2;
        v5[2] = v72;
        *(_OWORD *)a2 = v71;
        *((_QWORD *)a2 + 2) = v70;
        v33 = (int *)(v5 + 3);
        goto LABEL_134;
      }
LABEL_132:
      if (*v52 >= *((float *)v5 + 6))
        return result;
      goto LABEL_133;
    }
LABEL_90:
    if (*((float *)a3 + 6) >= *((float *)a2 + 6))
      return result;
    goto LABEL_91;
  }
  if (!a2[23])
    goto LABEL_37;
  v11 = v10;
  v12 = a2;
  v13 = a2[23];
  while (*v12 == *v11)
  {
    ++v12;
    ++v11;
    if (!--v13)
      goto LABEL_37;
  }
LABEL_18:
  if (v6 >= 0)
    v14 = a2;
  else
    v14 = *(unsigned __int8 **)a2;
  if (v9 >= v7)
    v15 = v7;
  else
    v15 = v9;
  result = (unsigned __int8 **)memcmp(v14, v10, v15);
  v16 = v7 < v9;
  if ((_DWORD)result)
    v16 = (int)result < 0;
  if (!v16)
    goto LABEL_41;
LABEL_27:
  v17 = a3[23];
  if (v17 >= 0)
    v18 = a3[23];
  else
    v18 = *((_QWORD *)a3 + 1);
  if (v18 != v7)
    goto LABEL_52;
  if ((a3[23] & 0x80) != 0)
  {
    result = (unsigned __int8 **)memcmp(*(const void **)a3, v14, *((_QWORD *)a3 + 1));
    if ((_DWORD)result)
      goto LABEL_52;
  }
  else if (a3[23])
  {
    v19 = v14;
    v20 = a3;
    v21 = a3[23];
    while (*v20 == *v19)
    {
      ++v20;
      ++v19;
      if (!--v21)
        goto LABEL_62;
    }
LABEL_52:
    if (v17 >= 0)
      v27 = a3;
    else
      v27 = *(const void **)a3;
    if (v7 >= v18)
      v28 = v18;
    else
      v28 = v7;
    result = (unsigned __int8 **)memcmp(v27, v14, v28);
    v29 = v18 < v7;
    if ((_DWORD)result)
      v29 = (int)result < 0;
    if (v29)
      goto LABEL_61;
    goto LABEL_63;
  }
LABEL_62:
  if (*((float *)a3 + 6) < *((float *)a2 + 6))
  {
LABEL_61:
    v30 = v5[2];
    v31 = *(_OWORD *)v5;
    v32 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
    *(_OWORD *)v5 = *(_OWORD *)a3;
    v5[2] = v32;
    *(_OWORD *)a3 = v31;
    *((_QWORD *)a3 + 2) = v30;
    v33 = (int *)(v5 + 3);
LABEL_120:
    v52 = (float *)(a3 + 24);
LABEL_134:
    v73 = *v33;
    *v33 = *(_DWORD *)v52;
    *(_DWORD *)v52 = v73;
    return result;
  }
LABEL_63:
  v34 = v5[2];
  v35 = *(_OWORD *)v5;
  v36 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  v5[2] = v36;
  *(_OWORD *)a2 = v35;
  *((_QWORD *)a2 + 2) = v34;
  v33 = (int *)(a2 + 24);
  v37 = *((float *)v5 + 6);
  *((_DWORD *)v5 + 6) = *((_DWORD *)a2 + 6);
  *((float *)a2 + 6) = v37;
  v38 = a3[23];
  if (v38 >= 0)
    v39 = a3[23];
  else
    v39 = *((_QWORD *)a3 + 1);
  v40 = a2[23];
  if (v40 >= 0)
    v41 = a2[23];
  else
    v41 = *((_QWORD *)a2 + 1);
  if (v40 >= 0)
    v42 = a2;
  else
    v42 = *(unsigned __int8 **)a2;
  if (v39 != v41)
    goto LABEL_108;
  if ((a3[23] & 0x80) != 0)
  {
    result = (unsigned __int8 **)memcmp(*(const void **)a3, v42, *((_QWORD *)a3 + 1));
    if ((_DWORD)result)
      goto LABEL_108;
LABEL_118:
    if (*((float *)a3 + 6) >= v37)
      return result;
    goto LABEL_119;
  }
  if (!a3[23])
    goto LABEL_118;
  v43 = v42;
  v44 = a3;
  v45 = a3[23];
  while (*v44 == *v43)
  {
    ++v44;
    ++v43;
    if (!--v45)
      goto LABEL_118;
  }
LABEL_108:
  if (v38 >= 0)
    v61 = a3;
  else
    v61 = *(const void **)a3;
  if (v41 >= v39)
    v62 = v39;
  else
    v62 = v41;
  result = (unsigned __int8 **)memcmp(v61, v42, v62);
  v63 = v39 < v41;
  if ((_DWORD)result)
    v63 = (int)result < 0;
  if (v63)
  {
LABEL_119:
    v64 = *((_QWORD *)a2 + 2);
    v65 = *(_OWORD *)a2;
    v66 = *((_QWORD *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 2) = v66;
    *(_OWORD *)a3 = v65;
    *((_QWORD *)a3 + 2) = v64;
    goto LABEL_120;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(unsigned __int8 **a1, unsigned __int8 **a2)
{
  uint64_t v3;
  _BOOL8 result;
  unsigned __int8 **v5;
  char v6;
  size_t v7;
  char v8;
  size_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 **v15;
  int v16;
  uint64_t v17;
  size_t v18;
  char v19;
  size_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  const void *v23;
  size_t v24;
  int v25;
  _BOOL4 v26;
  float v27;
  char v28;
  float *i;
  float *v30;
  char v31;
  void *v32;
  int v33;
  size_t v34;
  unsigned __int8 **v35;
  void **v36;
  unsigned __int8 **v37;
  uint64_t v38;
  void **v39;
  size_t v40;
  int v41;
  _BOOL4 v42;
  __int128 v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  unsigned __int8 *v48;
  __int128 v49;
  unsigned __int8 *v50;
  void *__s1[2];
  unsigned __int8 *v53;
  float v54;

  v3 = ((char *)a2 - (char *)a1) >> 5;
  result = 1;
  switch(v3)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v5 = a2 - 4;
      v6 = *((_BYTE *)a2 - 9);
      if (v6 >= 0)
        v7 = *((unsigned __int8 *)a2 - 9);
      else
        v7 = (size_t)*(a2 - 3);
      v8 = *((_BYTE *)a1 + 23);
      if (v8 >= 0)
        v9 = *((unsigned __int8 *)a1 + 23);
      else
        v9 = (size_t)a1[1];
      if (v8 >= 0)
        v10 = (unsigned __int8 *)a1;
      else
        v10 = *a1;
      if (v7 != v9)
        goto LABEL_91;
      if ((*((_BYTE *)a2 - 9) & 0x80) != 0)
      {
        if (memcmp(*v5, v10, (size_t)*(a2 - 3)))
          goto LABEL_91;
      }
      else if (*((_BYTE *)a2 - 9))
      {
        v11 = v10;
        v12 = a2 - 4;
        v13 = *((unsigned __int8 *)a2 - 9);
        while (*(unsigned __int8 *)v12 == *v11)
        {
          v12 = (unsigned __int8 **)((char *)v12 + 1);
          ++v11;
          if (!--v13)
            goto LABEL_102;
        }
LABEL_91:
        if (v6 >= 0)
          v44 = v5;
        else
          v44 = *v5;
        if (v9 >= v7)
          v45 = v7;
        else
          v45 = v9;
        v46 = memcmp(v44, v10, v45);
        v47 = v7 < v9;
        if (v46)
          v47 = v46 < 0;
        if (v47)
          goto LABEL_100;
        return 1;
      }
LABEL_102:
      if (*((float *)a2 - 2) < *((float *)a1 + 6))
      {
LABEL_100:
        v48 = a1[2];
        v49 = *(_OWORD *)a1;
        v50 = v5[2];
        *(_OWORD *)a1 = *(_OWORD *)v5;
        a1[2] = v50;
        *(_OWORD *)v5 = v49;
        v5[2] = v48;
        LODWORD(v49) = *((_DWORD *)a1 + 6);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 - 2);
        *((_DWORD *)a2 - 2) = v49;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a2 - 32);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((__int128 *)a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64, (unsigned __int8 *)a2 - 32);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *,0>((unsigned __int8 *)a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64, (unsigned __int8 *)a1 + 96, (unsigned __int8 *)a2 - 32);
      return 1;
    default:
      v14 = a1 + 8;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(a1, (unsigned __int8 *)a1 + 32, (unsigned __int8 *)a1 + 64);
      v15 = a1 + 12;
      if (a1 + 12 == a2)
        return 1;
      v16 = 0;
      while (2)
      {
        v17 = *((unsigned __int8 *)v15 + 23);
        if ((v17 & 0x80u) == 0)
          v18 = *((unsigned __int8 *)v15 + 23);
        else
          v18 = (size_t)v15[1];
        v19 = *((_BYTE *)v14 + 23);
        if (v19 >= 0)
          v20 = *((unsigned __int8 *)v14 + 23);
        else
          v20 = (size_t)v14[1];
        if (v19 >= 0)
          v21 = (unsigned __int8 *)v14;
        else
          v21 = *v14;
        if (v18 != v20)
          goto LABEL_37;
        if ((v17 & 0x80) == 0)
        {
          if (*((_BYTE *)v15 + 23))
          {
            v22 = 0;
            while (*((unsigned __int8 *)v15 + v22) == v21[v22])
            {
              if (v17 == ++v22)
                goto LABEL_47;
            }
            goto LABEL_37;
          }
LABEL_47:
          v27 = *((float *)v15 + 6);
          if (v27 >= *((float *)v14 + 6))
            goto LABEL_85;
          goto LABEL_48;
        }
        if (!memcmp(*v15, v21, (size_t)v15[1]))
          goto LABEL_47;
LABEL_37:
        if ((v17 & 0x80u) == 0)
          v23 = v15;
        else
          v23 = *v15;
        if (v20 >= v18)
          v24 = v18;
        else
          v24 = v20;
        v25 = memcmp(v23, v21, v24);
        v26 = v18 < v20;
        if (v25)
          v26 = v25 < 0;
        if (!v26)
          goto LABEL_85;
        v27 = *((float *)v15 + 6);
LABEL_48:
        v28 = 0;
        *(_OWORD *)__s1 = *(_OWORD *)v15;
        v53 = v15[2];
        v15[1] = 0;
        v15[2] = 0;
        *v15 = 0;
        v54 = v27;
        for (i = (float *)v15; ; i = v30)
        {
          v30 = (float *)v14;
          if (v28 < 0)
            operator delete(*(void **)i);
          *(_OWORD *)i = *(_OWORD *)v14;
          *((_QWORD *)i + 2) = v14[2];
          *((_BYTE *)v14 + 23) = 0;
          *(_BYTE *)v14 = 0;
          i[6] = *((float *)v14 + 6);
          if (v14 == a1)
            break;
          v14 -= 4;
          v31 = HIBYTE(v53);
          if (SHIBYTE(v53) >= 0)
            v32 = (void *)HIBYTE(v53);
          else
            v32 = __s1[1];
          v33 = *((char *)v30 - 9);
          if (v33 >= 0)
            v34 = *((unsigned __int8 *)v14 + 23);
          else
            v34 = *((_QWORD *)v30 - 3);
          if (v33 >= 0)
            v35 = (unsigned __int8 **)(v30 - 8);
          else
            v35 = (unsigned __int8 **)*((_QWORD *)v30 - 4);
          if (v32 == (void *)v34)
          {
            if ((HIBYTE(v53) & 0x80) != 0)
            {
              if (!memcmp(__s1[0], v35, (size_t)__s1[1]))
              {
LABEL_79:
                if (v54 >= *(v30 - 2))
                  goto LABEL_82;
                goto LABEL_80;
              }
            }
            else
            {
              if (!HIBYTE(v53))
                goto LABEL_79;
              v36 = __s1;
              v37 = v35;
              v38 = HIBYTE(v53);
              while (*(unsigned __int8 *)v36 == *(unsigned __int8 *)v37)
              {
                v36 = (void **)((char *)v36 + 1);
                v37 = (unsigned __int8 **)((char *)v37 + 1);
                if (!--v38)
                  goto LABEL_79;
              }
            }
          }
          if (v31 >= 0)
            v39 = __s1;
          else
            v39 = (void **)__s1[0];
          if (v34 >= (unint64_t)v32)
            v40 = (size_t)v32;
          else
            v40 = v34;
          v41 = memcmp(v39, v35, v40);
          v42 = (unint64_t)v32 < v34;
          if (v41)
            v42 = v41 < 0;
          if (!v42)
            goto LABEL_82;
LABEL_80:
          v28 = *((_BYTE *)v30 + 23);
        }
        v30 = (float *)a1;
LABEL_82:
        if (*((char *)v30 + 23) < 0)
          operator delete(*(void **)v30);
        v43 = *(_OWORD *)__s1;
        *((_QWORD *)v30 + 2) = v53;
        *(_OWORD *)v30 = v43;
        HIBYTE(v53) = 0;
        LOBYTE(__s1[0]) = 0;
        v30[6] = v54;
        if (++v16 != 8)
        {
LABEL_85:
          v14 = v15;
          v15 += 4;
          if (v15 == a2)
            return 1;
          continue;
        }
        return v15 + 4 == a2;
      }
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>(__int128 *a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  signed __int8 v8;
  size_t v9;
  signed __int8 v10;
  size_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  int v18;
  float result;
  _BOOL4 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  signed __int8 v24;
  size_t v25;
  signed __int8 v26;
  size_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t v31;
  const void *v32;
  size_t v33;
  int v34;
  _BOOL4 v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  signed __int8 v39;
  size_t v40;
  char v41;
  size_t v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  uint64_t v46;
  const void *v47;
  size_t v48;
  int v49;
  _BOOL4 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_0 &,std::pair<std::string,float> *>((unsigned __int8 **)a1, a2, a3);
  v8 = a4[23];
  if (v8 >= 0)
    v9 = a4[23];
  else
    v9 = *((_QWORD *)a4 + 1);
  v10 = a3[23];
  if (v10 >= 0)
    v11 = a3[23];
  else
    v11 = *((_QWORD *)a3 + 1);
  if (v10 >= 0)
    v12 = a3;
  else
    v12 = *(unsigned __int8 **)a3;
  if (v9 != v11)
    goto LABEL_18;
  if ((a4[23] & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, v12, *((_QWORD *)a4 + 1)))
      goto LABEL_18;
LABEL_28:
    result = *((float *)a4 + 6);
    if (result >= *((float *)a3 + 6))
      return result;
LABEL_29:
    v21 = *((_QWORD *)a3 + 2);
    v22 = *(_OWORD *)a3;
    v23 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v23;
    *(_OWORD *)a4 = v22;
    *((_QWORD *)a4 + 2) = v21;
    LODWORD(v22) = *((_DWORD *)a3 + 6);
    *((_DWORD *)a3 + 6) = *((_DWORD *)a4 + 6);
    *((_DWORD *)a4 + 6) = v22;
    v24 = a3[23];
    if (v24 >= 0)
      v25 = a3[23];
    else
      v25 = *((_QWORD *)a3 + 1);
    v26 = a2[23];
    if (v26 >= 0)
      v27 = a2[23];
    else
      v27 = *((_QWORD *)a2 + 1);
    if (v26 >= 0)
      v28 = a2;
    else
      v28 = *(unsigned __int8 **)a2;
    if (v25 != v27)
      goto LABEL_46;
    if ((a3[23] & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v28, *((_QWORD *)a3 + 1)))
        goto LABEL_46;
    }
    else if (a3[23])
    {
      v29 = v28;
      v30 = a3;
      v31 = a3[23];
      while (*v30 == *v29)
      {
        ++v30;
        ++v29;
        if (!--v31)
          goto LABEL_56;
      }
LABEL_46:
      if (v24 >= 0)
        v32 = a3;
      else
        v32 = *(const void **)a3;
      if (v27 >= v25)
        v33 = v25;
      else
        v33 = v27;
      v34 = memcmp(v32, v28, v33);
      v35 = v25 < v27;
      if (v34)
        v35 = v34 < 0;
      if (!v35)
        return result;
LABEL_57:
      v36 = *((_QWORD *)a2 + 2);
      v37 = *(_OWORD *)a2;
      v38 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v38;
      *(_OWORD *)a3 = v37;
      *((_QWORD *)a3 + 2) = v36;
      LODWORD(v37) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = *((_DWORD *)a3 + 6);
      *((_DWORD *)a3 + 6) = v37;
      v39 = a2[23];
      if (v39 >= 0)
        v40 = a2[23];
      else
        v40 = *((_QWORD *)a2 + 1);
      v41 = *((_BYTE *)a1 + 23);
      if (v41 >= 0)
        v42 = *((unsigned __int8 *)a1 + 23);
      else
        v42 = *((_QWORD *)a1 + 1);
      if (v41 >= 0)
        v43 = (unsigned __int8 *)a1;
      else
        v43 = *(unsigned __int8 **)a1;
      if (v40 != v42)
        goto LABEL_74;
      if ((a2[23] & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, v43, *((_QWORD *)a2 + 1)))
          goto LABEL_74;
      }
      else if (a2[23])
      {
        v44 = v43;
        v45 = a2;
        v46 = a2[23];
        while (*v45 == *v44)
        {
          ++v45;
          ++v44;
          if (!--v46)
            goto LABEL_85;
        }
LABEL_74:
        if (v39 >= 0)
          v47 = a2;
        else
          v47 = *(const void **)a2;
        if (v42 >= v40)
          v48 = v40;
        else
          v48 = v42;
        v49 = memcmp(v47, v43, v48);
        v50 = v40 < v42;
        if (v49)
          v50 = v49 < 0;
        if (!v50)
          return result;
LABEL_83:
        v51 = *((_QWORD *)a1 + 2);
        v52 = *a1;
        v53 = *((_QWORD *)a2 + 2);
        *a1 = *(_OWORD *)a2;
        *((_QWORD *)a1 + 2) = v53;
        *(_OWORD *)a2 = v52;
        *((_QWORD *)a2 + 2) = v51;
        result = *((float *)a1 + 6);
        *((_DWORD *)a1 + 6) = *((_DWORD *)a2 + 6);
        *((float *)a2 + 6) = result;
        return result;
      }
LABEL_85:
      result = *((float *)a2 + 6);
      if (result >= *((float *)a1 + 6))
        return result;
      goto LABEL_83;
    }
LABEL_56:
    result = *((float *)a3 + 6);
    if (result >= *((float *)a2 + 6))
      return result;
    goto LABEL_57;
  }
  if (!a4[23])
    goto LABEL_28;
  v13 = v12;
  v14 = a4;
  v15 = a4[23];
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v15)
      goto LABEL_28;
  }
LABEL_18:
  if (v8 >= 0)
    v16 = a4;
  else
    v16 = *(const void **)a4;
  if (v11 >= v9)
    v17 = v9;
  else
    v17 = v11;
  v18 = memcmp(v16, v12, v17);
  v20 = v9 < v11;
  if (v18)
    v20 = v18 < 0;
  if (v20)
    goto LABEL_29;
  return result;
}

__int128 *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::pair<std::string,float> *,std::pair<std::string,float> *,std::pair<std::string,float> *>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if (*(char *)(a4 + 23) < 0)
        operator delete(*(void **)a4);
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      *((_BYTE *)v5 + 23) = 0;
      *(_BYTE *)v5 = 0;
      *(_DWORD *)(a4 + 24) = *((_DWORD *)v5 + 6);
      a4 += 32;
      v5 += 2;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void std::__introsort<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *,false>(uint64_t a1, void **a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  float v19;
  unint64_t v20;
  void **v21;
  void **v22;
  float v23;
  void **v24;
  float v25;
  unint64_t v26;
  __int128 v27;
  float v28;
  float v29;
  void **v30;
  __int128 v31;
  BOOL v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  float v36;
  unint64_t v37;
  float v38;
  void **v39;
  void **v40;
  float v41;
  __int128 v42;
  float v43;
  float v44;
  void **v45;
  __int128 v46;
  __int128 v47;
  __int128 *v48;
  __int128 *v49;
  __int128 *v50;
  __int128 v51;
  void *v52;
  uint64_t v53;
  float v54;
  float v55;
  uint64_t v56;
  __int128 v57;
  float v58;
  uint64_t v59;
  __int128 v60;
  float v61;
  void **v62;
  BOOL v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  float v68;
  void *v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  void **v73;
  float v74;
  uint64_t v75;
  int64_t v76;
  int64_t v77;
  int64_t v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void **v90;
  void *v91;
  char v92;
  int v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  __int128 v100;
  uint64_t v101;
  unint64_t v102;
  float v103;
  void *v104;
  char v105;
  unint64_t v106;
  __int128 v107;
  _DWORD *v109;
  void **v110;
  float v111;
  void *v112;
  char v113;
  _DWORD *v114;
  void **v115;
  float *v116;
  float v117;
  float *v118;
  void *v119;
  _BYTE v120[15];
  _BYTE v121[15];
  _BYTE v122[15];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _BYTE v128[15];
  _BYTE v129[15];
  _BYTE v130[15];
  _BYTE v131[15];
  uint64_t v132;
  uint64_t v133;
  void *v134;
  void *v135;
  uint64_t v136;

float std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(__int128 *a1, float *a2, float *a3)
{
  float *v3;
  float result;
  float *v5;
  float v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v3 = a2 + 6;
  result = a2[6];
  v5 = (float *)a1 + 6;
  v6 = a3[6];
  if (result < *((float *)a1 + 6))
  {
    if (v6 >= result)
    {
      v16 = *((_QWORD *)a1 + 2);
      v17 = *a1;
      v18 = *((_QWORD *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v18;
      *(_OWORD *)a2 = v17;
      *((_QWORD *)a2 + 2) = v16;
      result = *((float *)a1 + 6);
      *((float *)a1 + 6) = a2[6];
      a2[6] = result;
      if (a3[6] >= result)
        return result;
      v19 = *((_QWORD *)a2 + 2);
      v20 = *(_OWORD *)a2;
      v21 = *((_QWORD *)a3 + 2);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v21;
      *(_OWORD *)a3 = v20;
      *((_QWORD *)a3 + 2) = v19;
      v5 = a2 + 6;
    }
    else
    {
      v7 = *((_QWORD *)a1 + 2);
      v8 = *a1;
      v9 = *((_QWORD *)a3 + 2);
      *a1 = *(_OWORD *)a3;
      *((_QWORD *)a1 + 2) = v9;
      *(_OWORD *)a3 = v8;
      *((_QWORD *)a3 + 2) = v7;
    }
    v3 = a3 + 6;
    goto LABEL_10;
  }
  if (v6 < result)
  {
    v10 = *((_QWORD *)a2 + 2);
    v11 = *(_OWORD *)a2;
    v12 = *((_QWORD *)a3 + 2);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *((_QWORD *)a2 + 2) = v12;
    *(_OWORD *)a3 = v11;
    *((_QWORD *)a3 + 2) = v10;
    *(float *)&v11 = a2[6];
    a2[6] = a3[6];
    *((_DWORD *)a3 + 6) = v11;
    result = a2[6];
    if (result < *v5)
    {
      v13 = *((_QWORD *)a1 + 2);
      v14 = *a1;
      v15 = *((_QWORD *)a2 + 2);
      *a1 = *(_OWORD *)a2;
      *((_QWORD *)a1 + 2) = v15;
      *(_OWORD *)a2 = v14;
      *((_QWORD *)a2 + 2) = v13;
LABEL_10:
      result = *v5;
      *v5 = *v3;
      *v3 = result;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  float v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  float v19;
  uint64_t v20;
  __int128 *v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  float v27;
  float v28;
  uint64_t v29;
  __int128 v30;
  float v31;
  uint64_t v32;
  __int128 v33;
  float v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[15];

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)(a1 + 24))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 32) = v7;
        *(_QWORD *)(a2 - 16) = v6;
        LODWORD(v7) = *(_DWORD *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a2 - 32));
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a2 - 32));
      return 1;
    case 5:
      v21 = (__int128 *)(a1 + 32);
      v22 = (__int128 *)(a1 + 64);
      v23 = (__int128 *)(a1 + 96);
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(a1, (__int128 *)(a1 + 32), (float *)(a1 + 64), (float *)(a1 + 96));
      if (*(float *)(a2 - 8) < *(float *)(a1 + 120))
      {
        v24 = *(_QWORD *)(a1 + 112);
        v25 = *v23;
        v26 = *(_QWORD *)(a2 - 16);
        *v23 = *(_OWORD *)(a2 - 32);
        *(_QWORD *)(a1 + 112) = v26;
        *(_OWORD *)(a2 - 32) = v25;
        *(_QWORD *)(a2 - 16) = v24;
        LODWORD(v25) = *(_DWORD *)(a1 + 120);
        *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v25;
        v27 = *(float *)(a1 + 120);
        v28 = *(float *)(a1 + 88);
        if (v27 < v28)
        {
          v29 = *(_QWORD *)(a1 + 80);
          v30 = *v22;
          *v22 = *v23;
          *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 112);
          *v23 = v30;
          *(_QWORD *)(a1 + 112) = v29;
          *(float *)(a1 + 88) = v27;
          v31 = *(float *)(a1 + 56);
          *(float *)(a1 + 120) = v28;
          if (v27 < v31)
          {
            v32 = *(_QWORD *)(a1 + 48);
            v33 = *v21;
            *v21 = *v22;
            *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 80);
            *v22 = v33;
            *(_QWORD *)(a1 + 80) = v32;
            *(float *)(a1 + 56) = v27;
            v34 = *(float *)(a1 + 24);
            *(float *)(a1 + 88) = v31;
            if (v27 < v34)
            {
              v35 = *(_QWORD *)(a1 + 16);
              v36 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v21;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 48);
              *v21 = v36;
              *(_QWORD *)(a1 + 48) = v35;
              *(float *)(a1 + 24) = v27;
              *(float *)(a1 + 56) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 64;
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)(a1 + 32), (float *)(a1 + 64));
      v10 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = *(float *)(v10 + 24);
    if (v13 < *(float *)(v9 + 24))
    {
      v14 = *(_QWORD *)v10;
      *(_QWORD *)v37 = *(_QWORD *)(v10 + 8);
      *(_QWORD *)&v37[7] = *(_QWORD *)(v10 + 15);
      v15 = *(_BYTE *)(v10 + 23);
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = 0;
      *(_QWORD *)v10 = 0;
      v16 = v11;
      while (1)
      {
        v17 = a1 + v16;
        v18 = (void **)(a1 + v16 + 96);
        if (*(char *)(a1 + v16 + 119) < 0)
          operator delete(*v18);
        *(_OWORD *)v18 = *(_OWORD *)(v17 + 64);
        *(_QWORD *)(a1 + v16 + 112) = *(_QWORD *)(v17 + 80);
        *(_BYTE *)(v17 + 87) = 0;
        *(_BYTE *)(v17 + 64) = 0;
        *(_DWORD *)(v17 + 120) = *(_DWORD *)(v17 + 88);
        if (v16 == -64)
          break;
        v19 = *(float *)(a1 + v16 + 56);
        v16 -= 32;
        if (v13 >= v19)
        {
          v20 = a1 + v16 + 96;
          goto LABEL_14;
        }
      }
      v20 = a1;
LABEL_14:
      if (*(char *)(v20 + 23) < 0)
        operator delete(*(void **)v20);
      *(_QWORD *)v20 = v14;
      *(_QWORD *)(v20 + 8) = *(_QWORD *)v37;
      *(_QWORD *)(v20 + 15) = *(_QWORD *)&v37[7];
      *(_BYTE *)(v20 + 23) = v15;
      *(float *)(v20 + 24) = v13;
      if (++v12 == 8)
        return v10 + 32 == a2;
    }
    v9 = v10;
    v11 += 32;
    v10 += 32;
    if (v10 == a2)
      return 1;
  }
}

float std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>(uint64_t a1, __int128 *a2, float *a3, float *a4)
{
  float result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,quasar::findPossibleKeywordLocations(std::string const&,std::vector<std::vector<std::vector<quasar::Token>>> const&,std::vector<int> const&,fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&,fst::SymbolTable &,unsigned long)::$_2 &,std::pair<std::string,float> *>((__int128 *)a1, (float *)a2, a3);
  result = a4[6];
  if (result < a3[6])
  {
    v9 = *((_QWORD *)a3 + 2);
    v10 = *(_OWORD *)a3;
    v11 = *((_QWORD *)a4 + 2);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *((_QWORD *)a3 + 2) = v11;
    *(_OWORD *)a4 = v10;
    *((_QWORD *)a4 + 2) = v9;
    *(float *)&v10 = a3[6];
    a3[6] = a4[6];
    *((_DWORD *)a4 + 6) = v10;
    result = a3[6];
    if (result < *((float *)a2 + 6))
    {
      v12 = *((_QWORD *)a2 + 2);
      v13 = *a2;
      v14 = *((_QWORD *)a3 + 2);
      *a2 = *(_OWORD *)a3;
      *((_QWORD *)a2 + 2) = v14;
      *(_OWORD *)a3 = v13;
      *((_QWORD *)a3 + 2) = v12;
      LODWORD(v13) = *((_DWORD *)a2 + 6);
      *((float *)a2 + 6) = a3[6];
      *((_DWORD *)a3 + 6) = v13;
      result = *((float *)a2 + 6);
      if (result < *(float *)(a1 + 24))
      {
        v15 = *(_QWORD *)(a1 + 16);
        v16 = *(_OWORD *)a1;
        v17 = *((_QWORD *)a2 + 2);
        *(_OWORD *)a1 = *a2;
        *(_QWORD *)(a1 + 16) = v17;
        *a2 = v16;
        *((_QWORD *)a2 + 2) = v15;
        result = *(float *)(a1 + 24);
        *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
        *((float *)a2 + 6) = result;
      }
    }
  }
  return result;
}

uint64_t std::vector<quasar::Token>::__emplace_back_slow_path<std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(uint64_t *a1, uint64_t a2, int *a3, int *a4, int *a5, double *a6, unsigned __int8 *a7, unsigned __int8 *a8, __int128 *a9)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v23;
  char *v24;
  std::string *v25;
  std::string::value_type *v26;
  char *v27;
  uint64_t *v28;

  v10 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 5);
  v11 = v10 + 1;
  if ((unint64_t)(v10 + 1) > 0x124924924924924)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5) > v11)
    v11 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v19 = 0x124924924924924;
  else
    v19 = v11;
  v28 = a1 + 2;
  if (v19)
  {
    v23 = v10;
    v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::Token>>((uint64_t)(a1 + 2), v19);
    v10 = v23;
  }
  else
  {
    v20 = 0;
  }
  v24 = v20;
  v25 = (std::string *)&v20[224 * v10];
  v27 = &v20[224 * v19];
  std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>((uint64_t)(a1 + 2), v25, a2, a3, a4, a5, a6, a7, a8, a9);
  v26 = &v25[9].__r_.__value_.__s.__data_[8];
  std::vector<quasar::Token>::__swap_out_circular_buffer(a1, &v24);
  v21 = a1[1];
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)&v24);
  return v21;
}

void sub_1ADFE49C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<quasar::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Token>::construct[abi:ne180100]<quasar::Token,std::string &,unsigned int &,unsigned int &,unsigned int &,double &,BOOL &,BOOL,std::string &>(uint64_t a1, std::string *a2, uint64_t a3, int *a4, int *a5, int *a6, double *a7, unsigned __int8 *a8, unsigned __int8 *a9, __int128 *a10)
{
  int v16;
  int v17;
  int v18;
  double v19;
  int v20;
  int v21;
  float v22;
  void *__p[2];
  char v24;
  __int128 *v25[3];
  void *v26[2];
  char v27;
  std::string v28;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v28 = *(std::string *)a3;
  v16 = *a4;
  v17 = *a5;
  v18 = *a6;
  v19 = *a7;
  v20 = *a8;
  v21 = *a9;
  std::string::basic_string[abi:ne180100]<0>(v26, "");
  memset(v25, 0, sizeof(v25));
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v22 = v19;
  quasar::Token::Token(a2, (__int128 *)&v28, v16, v17, v18, v20 != 0, v21 != 0, a10, v22, (__int128 *)v26, v25, 0, (__int128 *)__p, 0, 0);
  if (v24 < 0)
    operator delete(__p[0]);
  __p[0] = v25;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  if (v27 < 0)
    operator delete(v26[0]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
}

void sub_1ADFE4B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a19 < 0)
    operator delete(__p);
  __p = &a20;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a28 < 0)
    operator delete(a23);
  if (a34 < 0)
    operator delete(a29);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLoggingStats>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 56);
      *(_QWORD *)(v7 - 40) = *(_QWORD *)(a3 - 40);
      *(_OWORD *)(v7 - 56) = v8;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLoggingStats*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::KeywordFinder::KeywordLoggingStats>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<quasar::KeywordFinder::KeywordLoggingStats>::destroy[abi:ne180100](v4, i - 56);
  }
}

uint64_t std::vector<quasar::KeywordFinder::KeywordLocationLoggingStats>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(a3 - 48) = 0;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::KeywordFinder::KeywordLocationLoggingStats>,std::reverse_iterator<quasar::KeywordFinder::KeywordLocationLoggingStats*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::tuple<std::string,long long,long long,float>>,std::reverse_iterator<std::tuple<std::string,long long,long long,float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D2EAF8;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2EC28;
  *(_DWORD *)(a1 + 96) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2EC28;
  *(_QWORD *)a1 = &unk_1E5D2EAF8;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  *(_QWORD *)(a1 + 352) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(*(_QWORD *)(*(_QWORD *)(a2 + 208) + 8 * v23), &v29);
      v24 = *(_QWORD *)(a1 + 208);
      v25 = v29;
      v29 = 0;
      v26 = *(_QWORD *)(v24 + 8 * v23);
      *(_QWORD *)(v24 + 8 * v23) = v25;
      if (v26)
        (*(void (**)(uint64_t))(*(_QWORD *)v26 + 24))(v26);
      v27 = v29;
      v29 = 0;
      if (v27)
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
      ++v23;
    }
    while (v23 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1ADFE540C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  kaldi::CuMatrix<float>::CuMatrix(v4, a1, 111);
  *a2 = v4;
}

void sub_1ADFE556C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD v5[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)a1 = &unk_1E5D2EAF8;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2EC28;
  v2 = (quasar::Bitmap *)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 256);
  v4 = *(_QWORD **)(a1 + 264);
  while (v3 != v4)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3 = 0;
    }
    ++v3;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  v10 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  v10 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v6 = *(void **)(a1 + 176);
  if (v6)
  {
    *(_QWORD *)(a1 + 184) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    *(_QWORD *)(a1 + 160) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
  }
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(uint64_t a1)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1ADFE5808(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(v2, a1);
  return v2;
}

void sub_1ADFE5870(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(uint64_t a1)
{
  return kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CopyCompressed(a1 - 88);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  void **v7;
  BOOL v8;
  float *v9;
  void *v10;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  int *v20;
  BOOL v21;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  std::string *v33;
  void *v36;
  void *v37;
  int v38;
  BOOL v39;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  int v44;
  kaldi::nnet1::Component *v45;
  const void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  const void **v61;
  const void **v62;
  int v63;
  const void **v64;
  uint64_t v65;
  int v66;
  const void *v67;
  kaldi::nnet1::AffineTransform *v68;
  kaldi::nnet1::AffineTransform *v69;
  uint64_t v70;
  void *v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  int inited;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  void **v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char v103;
  char *v104;
  std::vector<unsigned int> *v105;
  std::vector<unsigned int> *v106;
  int *v107;
  std::vector<unsigned int> *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _QWORD **v114;
  _QWORD *v115;
  unint64_t v116;
  void *__p;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122[3];
  int v123;
  std::string v124;
  std::string v125;
  int v126;

  v126 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v125);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v124);
  v103 = 0;
  v123 = -1;
  *(_BYTE *)(a1 + 460) = 1;
  memset(v122, 0, sizeof(v122));
  v106 = (std::vector<unsigned int> *)(a1 + 152);
  v104 = (char *)(a1 + 460);
  v105 = (std::vector<unsigned int> *)(a1 + 104);
  v107 = (int *)(a1 + 200);
  v108 = (std::vector<unsigned int> *)(a1 + 176);
  v6 = (int *)(a1 + 96);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_161;
    kaldi::ReadToken(a2, 0, (uint64_t)v122);
    if ((SHIBYTE(v122[2]) & 0x80000000) == 0)
      break;
    v10 = v122[1];
    if (v122[1] == (void *)12)
    {
      if (*(_QWORD *)v122[0] == 0x536D6F646E61523CLL && *((_DWORD *)v122[0] + 2) == 1046766949)
      {
LABEL_88:
        v20 = &v123;
LABEL_123:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20);
        goto LABEL_159;
      }
      v10 = v122[1];
    }
    else if (v122[1] == (void *)13
           && *(_QWORD *)v122[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v122[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_82:
      v9 = (float *)&v126;
LABEL_124:
      kaldi::ReadBasicType<float>(a2, 0, v9);
      goto LABEL_159;
    }
    if (v10 == (void *)19)
    {
      if (*(_QWORD *)v122[0] == 0x61725474696E493CLL
        && *((_QWORD *)v122[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v122[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_125:
        v33 = &v125;
LABEL_127:
        kaldi::ReadToken(a2, 0, (uint64_t)v33);
        goto LABEL_159;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)18)
    {
      if (*(_QWORD *)v122[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v122[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v122[0] + 8) == 15973)
      {
LABEL_126:
        v33 = &v124;
        goto LABEL_127;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)9)
    {
      v17 = *(_QWORD *)v122[0] == 0x6461724778614D3CLL && *((_BYTE *)v122[0] + 8) == 62;
      v9 = (float *)(a1 + 452);
      if (v17)
        goto LABEL_124;
      v10 = v122[1];
    }
    if (v10 == (void *)15)
    {
      v18 = *(_QWORD *)v122[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v122[0] + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 456);
      if (v18)
        goto LABEL_124;
      v10 = v122[1];
    }
    if (v10 == (void *)11)
    {
      v19 = *(_QWORD *)v122[0] == 0x756F72476D754E3CLL && *(_QWORD *)((char *)v122[0] + 3) == 0x3E7370756F72476DLL;
      v20 = (int *)(a1 + 96);
      if (v19)
        goto LABEL_123;
      v10 = v122[1];
      if (v122[1] == (void *)11)
      {
        v21 = *(_QWORD *)v122[0] == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)v122[0] + 3) == 0x3E73656C6261546DLL;
        v20 = (int *)(a1 + 200);
        if (v21)
          goto LABEL_123;
        if ((HIBYTE(v122[2]) & 0x80) == 0)
          goto LABEL_132;
      }
    }
    if (v10 == (void *)12)
    {
      if (*(_QWORD *)v122[0] == 0x69536261636F563CLL && *((_DWORD *)v122[0] + 2) == 1047750010)
      {
LABEL_156:
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v105);
        goto LABEL_157;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)10)
    {
      if (*(_QWORD *)v122[0] == 0x6D65744978614D3CLL && *((_WORD *)v122[0] + 4) == 15987)
      {
LABEL_154:
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<unsigned int> *)(a1 + 128));
        goto LABEL_157;
      }
      goto LABEL_138;
    }
LABEL_139:
    if (v10 != (void *)17)
      goto LABEL_148;
    v7 = (void **)v122[0];
LABEL_141:
    v36 = *v7;
    v37 = v7[1];
    v38 = *((unsigned __int8 *)v7 + 16);
    v39 = v36 == (void *)0x69446465626D453CLL && v37 == (void *)0x736E6F69736E656DLL;
    if (!v39 || v38 != 62)
      goto LABEL_148;
    __p = 0;
    v118 = 0;
    v119 = 0;
    kaldi::ReadToken(a2, 0, (uint64_t)&__p);
    kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v106);
LABEL_157:
    if (SHIBYTE(v119) < 0)
      operator delete(__p);
LABEL_159:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v122;
  switch(HIBYTE(v122[2]))
  {
    case 9:
LABEL_5:
      v8 = v122[0] == (void *)0x6461724778614D3CLL && LOBYTE(v122[1]) == 62;
      v9 = (float *)(a1 + 452);
      if (!v8)
        goto LABEL_148;
      goto LABEL_124;
    case 0xA:
      goto LABEL_133;
    case 0xB:
      goto LABEL_112;
    case 0xC:
      if (v122[0] != (void *)0x536D6F646E61523CLL || LODWORD(v122[1]) != 1046766949)
      {
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_88;
    case 0xD:
      if (v122[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v122 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_148;
      goto LABEL_82;
    case 0xF:
LABEL_105:
      v30 = v122[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v122 + 7) == (void *)0x3E66656F43657461;
      v9 = (float *)(a1 + 456);
      if (v30)
        goto LABEL_124;
      if (HIBYTE(v122[2]) == 10)
        goto LABEL_133;
      if (HIBYTE(v122[2]) == 12)
      {
LABEL_128:
        if (v122[0] == (void *)0x69536261636F563CLL && LODWORD(v122[1]) == 1047750010)
          goto LABEL_156;
LABEL_132:
        if (HIBYTE(v122[2]) != 10)
          goto LABEL_148;
        goto LABEL_133;
      }
      if (HIBYTE(v122[2]) != 11)
        goto LABEL_148;
LABEL_112:
      v31 = v122[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E7370756F72476DLL;
      v20 = (int *)(a1 + 96);
      if (v31)
        goto LABEL_123;
      if (HIBYTE(v122[2]) == 10)
      {
LABEL_133:
        if (v122[0] == (void *)0x6D65744978614D3CLL && LOWORD(v122[1]) == 15987)
          goto LABEL_154;
        if ((HIBYTE(v122[2]) & 0x80) == 0)
          goto LABEL_148;
LABEL_138:
        v10 = v122[1];
        goto LABEL_139;
      }
      if (HIBYTE(v122[2]) == 11)
      {
        v32 = v122[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E73656C6261546DLL;
        v20 = (int *)(a1 + 200);
        if (v32)
          goto LABEL_123;
      }
LABEL_148:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<AssignedTable>"))
      {
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v108);
        goto LABEL_157;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<InitializeToConcat>"))
      {
        v103 = 1;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<UseTransform>"))
      {
        kaldi::ReadBasicType<BOOL>(a2, 0, v104);
        goto LABEL_159;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v122[2]) >= 0)
          v99 = v122;
        else
          v99 = (void **)v122[0];
        if (SHIBYTE(v122[2]) >= 0)
          v100 = HIBYTE(v122[2]);
        else
          v100 = (uint64_t)v122[1];
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)", a typo in config? ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
LABEL_161:
      v41 = *(_QWORD **)(a1 + 256);
      v42 = *(_QWORD **)(a1 + 264);
      while (v41 != v42)
      {
        if (*v41)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v41 + 8))(*v41);
          *v41 = 0;
        }
        ++v41;
      }
      if (!*v104)
        goto LABEL_207;
      v43 = (char **)(a1 + 256);
      if (*v6 >= 1)
      {
        v44 = 0;
        do
        {
          v110 = 0;
          v111 = 0;
          v112 = 0;
          LODWORD(v114) = 0;
          LODWORD(v109) = 0;
          kaldi::ExpectToken(a2, 0, "<FeatureTransform>");
          kaldi::ReadToken(a2, 0, (uint64_t)&v110);
          v45 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v110);
          kaldi::ExpectToken(a2, 0, "<InputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v114);
          kaldi::ExpectToken(a2, 0, "<OutputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v109);
          v46 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v45, v114, v109);
          if (!v46
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
            if (v112 >= 0)
              v95 = &v110;
            else
              v95 = v110;
            if (v112 >= 0)
              v96 = HIBYTE(v112);
            else
              v96 = v111;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v48 = v47;
          (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(_QWORD *)v47 + 96))(v47, a2, a3);
          v50 = *(_QWORD **)(a1 + 264);
          v49 = *(_QWORD *)(a1 + 272);
          if ((unint64_t)v50 >= v49)
          {
            v52 = ((char *)v50 - *v43) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v53 = v49 - (_QWORD)*v43;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v55);
            else
              v56 = 0;
            v57 = &v56[8 * v52];
            *(_QWORD *)v57 = v48;
            v51 = v57 + 8;
            v59 = *(char **)(a1 + 256);
            v58 = *(char **)(a1 + 264);
            if (v58 != v59)
            {
              do
              {
                v60 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v57 - 1) = v60;
                v57 -= 8;
              }
              while (v58 != v59);
              v58 = *v43;
            }
            *(_QWORD *)(a1 + 256) = v57;
            *(_QWORD *)(a1 + 264) = v51;
            *(_QWORD *)(a1 + 272) = &v56[8 * v55];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v50 = v48;
            v51 = v50 + 1;
          }
          *(_QWORD *)(a1 + 264) = v51;
          if (SHIBYTE(v112) < 0)
            operator delete(v110);
          ++v44;
        }
        while (v44 < *v6);
      }
      if ((v103 & 1) == 0)
        goto LABEL_207;
      v62 = *(const void ***)(a1 + 256);
      v61 = *(const void ***)(a1 + 264);
      if (v62 == v61)
      {
        if (!*((_DWORD *)*v62 + 3))
          goto LABEL_205;
LABEL_251:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
        v97 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" actual dim is ", 15);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v63 = 0;
      v64 = *(const void ***)(a1 + 256);
      do
      {
        v65 = (uint64_t)*v64++;
        v63 += *(_DWORD *)(v65 + 8);
      }
      while (v64 != v61);
      if (v63 != *((_DWORD *)*v62 + 3))
        goto LABEL_251;
      if (v62 != v61)
      {
        v66 = 0;
        do
        {
          v67 = *v62;
          if (!*v62)
          {
LABEL_249:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          if (v68)
          {
            v69 = v68;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, *((unsigned int *)v68 + 3), *((unsigned int *)v68 + 2), 0, 0);
            v70 = *((unsigned int *)v69 + 3);
            v114 = 0;
            v115 = 0;
            v116 = 0;
            kaldi::Vector<float>::Resize((void **)&v114, v70, 0);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v66, *((_DWORD *)v69 + 2), 0, v118);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
            kaldi::nnet1::AffineTransform::SetLinearity(v69, (int *)&__p);
            kaldi::nnet1::AffineTransform::Bias(v69);
            v71 = (void *)kaldi::nnet1::AffineTransform::Bias(v69);
            kaldi::CuVectorBase<float>::CopyFromVec<float>(v71, (uint64_t)&v114);
            v72 = *((_DWORD *)v69 + 2);
            kaldi::Vector<float>::Destroy((uint64_t)&v114);
          }
          else
          {
            if (!v73)
              goto LABEL_249;
            v74 = (uint64_t)v73;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v73[3], v73[2], 0, 0);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v66, *(_DWORD *)(v74 + 8), 0, v118);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
            kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v74, (int *)&__p);
            v72 = *(_DWORD *)(v74 + 8);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
          v66 += v72;
          ++v62;
        }
        while (v62 != v61);
      }
LABEL_205:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
      }
LABEL_207:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v125);
      *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v124);
      if (!inited)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v115 = 0;
      v116 = 0;
      v114 = &v115;
      if (*v6 < 1)
      {
        v80 = 0;
      }
      else
      {
        v76 = 0;
        do
        {
          LODWORD(v110) = 0;
          LODWORD(v110) = v108->__begin_[v76];
          v77 = v105->__begin_[v76];
          v78 = v106->__begin_[v76];
          __p = &v110;
          v79 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, (int *)&v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
          *((_DWORD *)v79 + 8) = v77;
          *((_DWORD *)v79 + 9) = v78;
          ++v76;
        }
        while (v76 < *v6);
        v80 = v116;
      }
      std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, v80);
      if (v123 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v123);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
      v113 = 0;
      if (*v107 >= 1)
      {
        while (1)
        {
          v110 = &v113;
          v81 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, &v113, (uint64_t)&std::piecewise_construct, (_DWORD **)&v110);
          v82 = *((unsigned int *)v81 + 8);
          v83 = *((unsigned int *)v81 + 9);
          kaldi::Matrix<float>::Matrix((uint64_t)&v110, v82, v83, 0, 0);
          if ((int)v82 >= 1)
            break;
LABEL_227:
          kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>((uint64_t)&v110, &v109);
          v90 = *(_QWORD *)(a1 + 208);
          v91 = v109;
          v109 = 0;
          v92 = *(_QWORD *)(v90 + 8 * v113);
          *(_QWORD *)(v90 + 8 * v113) = v91;
          if (v92)
            (*(void (**)(uint64_t))(*(_QWORD *)v92 + 24))(v92);
          v93 = v109;
          v109 = 0;
          if (v93)
            (*(void (**)(uint64_t))(*(_QWORD *)v93 + 24))(v93);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v110);
          if (++v113 >= *v107)
            goto LABEL_232;
        }
        v84 = 0;
        while ((int)v83 < 1)
        {
LABEL_226:
          if (++v84 == (_DWORD)v82)
            goto LABEL_227;
        }
        v85 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v88 = *(float *)&v126;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0);
            v87 = v88 * v89;
LABEL_224:
            *((float *)v110 + v84 * (int)v112 + v85) = v87;
          }
          else if (inited == 1)
          {
            v86 = *(float *)&v126;
            v87 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v86 + v86);
            goto LABEL_224;
          }
          if (v83 == ++v85)
            goto LABEL_226;
          continue;
        }
      }
LABEL_232:
      kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
      if (v120)
      {
        v121 = v120;
        operator delete(v120);
      }
      v110 = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      std::__tree<int>::destroy((uint64_t)&v114, v115);
      if (SHIBYTE(v122[2]) < 0)
        operator delete(v122[0]);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      return;
    case 0x11:
      goto LABEL_141;
    case 0x12:
LABEL_97:
      if (v122[0] != (void *)0x6E6569646172473CLL
        || v122[1] != (void *)0x7079546D726F4E74
        || LOWORD(v122[2]) != 15973)
      {
        v7 = v122;
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_126;
    case 0x13:
      if (v122[0] != (void *)0x61725474696E493CLL
        || v122[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v122[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        v7 = v122;
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          case 0x12:
            goto LABEL_97;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_125;
    default:
      goto LABEL_148;
  }
}

void sub_1ADFE69D4()
{
  JUMPOUT(0x1ADFE6A1CLL);
}

void sub_1ADFE69F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 169) < 0)
    operator delete(*(void **)(v23 - 192));
  if (*(char *)(v23 - 137) < 0)
    operator delete(*(void **)(v23 - 160));
  if (*(char *)(v23 - 113) < 0)
    operator delete(*(void **)(v23 - 136));
  _Unwind_Resume(exception_object);
}

void sub_1ADFE6A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1ADFE6A1CLL);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ConstructMatrixObject<kaldi::Matrix<float>>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CuMatrix<float>::CuMatrix<float>(v4, a1, 111, 0);
  *a2 = v4;
  return result;
}

void sub_1ADFE6AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[34];

  if (!*(_BYTE *)(result + 544))
  {
    v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        v3 = *(_QWORD *)(result + 104);
        v4 = (*(_QWORD *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          v5 = *(_QWORD *)(result + 128);
          if (v4 == (*(_QWORD *)(result + 136) - v5) >> 2)
          {
            v6 = *(_QWORD *)(result + 152);
            if (v4 == (*(_QWORD *)(result + 160) - v6) >> 2)
            {
              v7 = *(_QWORD *)(result + 176);
              if (v4 == (*(_QWORD *)(result + 184) - v7) >> 2)
              {
                v8 = *(_QWORD *)(result + 208);
                if (v2 == (*(_QWORD *)(result + 216) - v8) >> 3)
                {
                  if (*(_BYTE *)(result + 460)
                    && v4 != (uint64_t)(*(_QWORD *)(result + 264) - *(_QWORD *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    v40 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    v9 = 0;
                    v10 = 0;
                    v11 = 0;
                    do
                    {
                      v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v22 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has assigned table index ", 35);
                        v23 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v25 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v26 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v24 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      v16 = *(_QWORD *)(v8 + 8 * v12);
                      if (*(_DWORD *)(v16 + 20) != v13)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v20 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        v21 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_DWORD *)(v16 + 16) != v15)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v18 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        v19 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_35;
                      }
                      if (*(_BYTE *)(result + 460))
                      {
                        v17 = *(_QWORD *)(*(_QWORD *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v29 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          v30 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v27 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          v28 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_35;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(_BYTE *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(_BYTE *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      v41 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      v42 = (_QWORD *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      v39 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  v38 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                v37 = (_QWORD *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_35:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1ADFE72EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  float *v9;
  int *v10;
  int *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v26;
  float *v27;
  BOOL v28;
  BOOL v31;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  int v47;
  char **v48;
  const void *v49;
  void *v50;
  void *v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  _QWORD *v64;
  __int128 *v65;
  uint64_t v66;
  _QWORD *v67;
  std::vector<unsigned int> *v68;
  std::vector<unsigned int> *v69;
  float *v70;
  std::vector<unsigned int> *v71;
  std::vector<unsigned int> *v72;
  void *__p;
  uint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;

  v76 = 0uLL;
  v77 = 0;
  v8 = (char *)(a1 + 460);
  *(_BYTE *)(a1 + 460) = 1;
  v9 = (float *)(a1 + 452);
  v69 = (std::vector<unsigned int> *)(a1 + 176);
  v70 = (float *)(a1 + 456);
  v68 = (std::vector<unsigned int> *)(a1 + 152);
  v71 = (std::vector<unsigned int> *)(a1 + 104);
  v72 = (std::vector<unsigned int> *)(a1 + 128);
  v10 = (int *)(a1 + 200);
  v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v76);
    if (SHIBYTE(v77) < 0)
    {
      v16 = *((_QWORD *)&v76 + 1);
      if (*((_QWORD *)&v76 + 1) != 11)
        goto LABEL_25;
      v17 = *(_QWORD *)v76 == 0x756F72476D754E3CLL && *(_QWORD *)(v76 + 3) == 0x3E7370756F72476DLL;
      v14 = (uint64_t)v11;
      if (v17
        || (*(_QWORD *)v76 == 0x6C6261546D754E3CLL ? (v18 = *(_QWORD *)(v76 + 3) == 0x3E73656C6261546DLL) : (v18 = 0),
            v14 = (uint64_t)v10,
            v18))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v14);
      }
      else
      {
        v16 = *((_QWORD *)&v76 + 1);
LABEL_25:
        if (v16 == 12)
        {
          if (*(_QWORD *)v76 == 0x69536261636F563CLL && *(_DWORD *)(v76 + 8) == 1047750010)
          {
LABEL_94:
            __p = 0;
            v74 = 0;
            v75 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v71);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v76 + 1);
        }
        if (v16 != 10)
          goto LABEL_37;
        if (*(_QWORD *)v76 == 0x6D65744978614D3CLL && *(_WORD *)(v76 + 8) == 15987)
        {
LABEL_93:
          __p = 0;
          v74 = 0;
          v75 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v72);
LABEL_137:
          if (SHIBYTE(v75) < 0)
            operator delete(__p);
        }
        else
        {
          v16 = *((_QWORD *)&v76 + 1);
LABEL_37:
          if (v16 == 17)
          {
            if (*(_QWORD *)v76 == 0x69446465626D453CLL
              && *(_QWORD *)(v76 + 8) == 0x736E6F69736E656DLL
              && *(_BYTE *)(v76 + 16) == 62)
            {
LABEL_135:
              __p = 0;
              v74 = 0;
              v75 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v68);
              goto LABEL_137;
            }
            v16 = *((_QWORD *)&v76 + 1);
          }
          if (v16 != 15)
            goto LABEL_52;
          if (*(_QWORD *)v76 == 0x656E67697373413CLL && *(_QWORD *)(v76 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            __p = 0;
            v74 = 0;
            v75 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v69);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v76 + 1);
LABEL_52:
          if (v16 != 18)
            goto LABEL_61;
          if (*(_QWORD *)v76 == 0x6E6569646172473CLL
            && *(_QWORD *)(v76 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v76 + 16) == 15973)
          {
LABEL_136:
            __p = 0;
            v74 = 0;
            v75 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v76 + 1);
LABEL_61:
          if (v16 == 9)
          {
            v26 = *(_QWORD *)v76 == 0x6461724778614D3CLL && *(_BYTE *)(v76 + 8) == 62;
            v27 = v9;
            if (v26)
              goto LABEL_92;
            v16 = *((_QWORD *)&v76 + 1);
          }
          if (v16 == 15)
          {
            v28 = *(_QWORD *)v76 == 0x61526E7261654C3CLL && *(_QWORD *)(v76 + 7) == 0x3E66656F43657461;
            v27 = v70;
            if (v28)
              goto LABEL_92;
            v16 = *((_QWORD *)&v76 + 1);
          }
          if (v16 != 14)
            goto LABEL_175;
          v12 = (uint64_t *)v76;
LABEL_128:
          v38 = *v12;
          v39 = *(uint64_t *)((char *)v12 + 6);
          if (v38 != 0x6E6172546573553CLL || v39 != 0x3E6D726F66736E61)
            goto LABEL_175;
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&v76;
      switch(HIBYTE(v77))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          v13 = (_QWORD)v76 == 0x756F72476D754E3CLL && *(_QWORD *)((char *)&v76 + 3) == 0x3E7370756F72476DLL;
          v14 = (uint64_t)v11;
          if (!v13)
          {
            v15 = (_QWORD)v76 == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)&v76 + 3) == 0x3E73656C6261546DLL;
            v14 = (uint64_t)v10;
            if (!v15)
              goto LABEL_80;
          }
          goto LABEL_75;
        case 0xC:
          if ((_QWORD)v76 == 0x69536261636F563CLL && DWORD2(v76) == 1047750010)
            goto LABEL_94;
LABEL_80:
          if (HIBYTE(v77) == 9)
            goto LABEL_87;
          if (HIBYTE(v77) != 10)
            goto LABEL_175;
LABEL_82:
          if ((_QWORD)v76 == 0x6D65744978614D3CLL && WORD4(v76) == 15987)
            goto LABEL_93;
LABEL_86:
          if (HIBYTE(v77) == 9)
            goto LABEL_87;
          goto LABEL_175;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((_QWORD)v76 == 0x69446465626D453CLL
            && *((_QWORD *)&v76 + 1) == 0x736E6F69736E656DLL
            && v77 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v77) == 9)
            goto LABEL_87;
          if (HIBYTE(v77) == 14)
            goto LABEL_127;
          if (HIBYTE(v77) != 15)
            goto LABEL_175;
LABEL_115:
          if ((_QWORD)v76 == 0x656E67697373413CLL && *(_QWORD *)((char *)&v76 + 7) == 0x3E656C6261546465)
            goto LABEL_134;
          switch(HIBYTE(v77))
          {
            case 9u:
LABEL_87:
              v31 = (_QWORD)v76 == 0x6461724778614D3CLL && BYTE8(v76) == 62;
              v27 = v9;
              if (!v31)
                goto LABEL_175;
              break;
            case 0xEu:
LABEL_127:
              v12 = (uint64_t *)&v76;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              v37 = (_QWORD)v76 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v76 + 7) == 0x3E66656F43657461;
              v27 = v70;
              if (!v37)
              {
LABEL_175:
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v77 >= 0)
                  v65 = &v76;
                else
                  v65 = (__int128 *)v76;
                if (v77 >= 0)
                  v66 = HIBYTE(v77);
                else
                  v66 = *((_QWORD *)&v76 + 1);
                v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)v65, v66);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_175;
          }
          return;
        case 0x12:
          if ((_QWORD)v76 == 0x6E6569646172473CLL
            && *((_QWORD *)&v76 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v77 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v77) == 15)
            goto LABEL_122;
          if (HIBYTE(v77) == 14)
            goto LABEL_127;
          goto LABEL_86;
        default:
          goto LABEL_175;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v27);
    }
  }
  v41 = (_QWORD *)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize(a1 + 208, *(int *)(a1 + 200));
  if (*v10 >= 1)
  {
    v42 = 0;
    do
    {
      v43 = operator new();
      *(_OWORD *)(v43 + 24) = 0u;
      *(_OWORD *)(v43 + 8) = 0u;
      *(_QWORD *)v43 = &unk_1E5D34170;
      *(_BYTE *)(v43 + 40) = 0;
      v44 = *(_QWORD *)(*v41 + 8 * v42);
      *(_QWORD *)(*v41 + 8 * v42) = v43;
      if (v44)
        (*(void (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44);
      (***(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(*v41 + 8 * v42))(*(_QWORD *)(*v41 + 8 * v42), a2, a3, a4);
      ++v42;
    }
    while (v42 < *v10);
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  v45 = *(_QWORD **)(a1 + 256);
  v46 = *(_QWORD **)(a1 + 264);
  while (v45 != v46)
  {
    if (*v45)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v45 + 8))(*v45);
      *v45 = 0;
    }
    ++v45;
  }
  if (*v8 && *v11 >= 1)
  {
    v47 = 0;
    v48 = (char **)(a1 + 256);
    do
    {
      kaldi::ExpectToken(a2, a3, "<FeatureTransform>");
      v49 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v49
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v51 = v50;
      kaldi::ExpectToken(a2, a3, "</Component>");
      v53 = *(_QWORD **)(a1 + 264);
      v52 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v53 >= v52)
      {
        v55 = ((char *)v53 - *v48) >> 3;
        if ((unint64_t)(v55 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v56 = v52 - (_QWORD)*v48;
        v57 = v56 >> 2;
        if (v56 >> 2 <= (unint64_t)(v55 + 1))
          v57 = v55 + 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF8)
          v58 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v58 = v57;
        if (v58)
          v59 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v58);
        else
          v59 = 0;
        v60 = &v59[8 * v55];
        *(_QWORD *)v60 = v51;
        v54 = v60 + 8;
        v62 = *(char **)(a1 + 256);
        v61 = *(char **)(a1 + 264);
        if (v61 != v62)
        {
          do
          {
            v63 = *((_QWORD *)v61 - 1);
            v61 -= 8;
            *((_QWORD *)v60 - 1) = v63;
            v60 -= 8;
          }
          while (v61 != v62);
          v61 = *v48;
        }
        *(_QWORD *)(a1 + 256) = v60;
        *(_QWORD *)(a1 + 264) = v54;
        *(_QWORD *)(a1 + 272) = &v59[8 * v58];
        if (v61)
          operator delete(v61);
      }
      else
      {
        *v53 = v51;
        v54 = v53 + 1;
      }
      *(_QWORD *)(a1 + 264) = v54;
      ++v47;
    }
    while (v47 < *(_DWORD *)(a1 + 96));
  }
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  if (SHIBYTE(v77) < 0)
    operator delete((void *)v76);
}

void sub_1ADFE7D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;
  void *v7[2];
  uint64_t v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  kaldi::WriteToken(a2, a3, "<NumGroups>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<NumTables>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<VocabSizes>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 104), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<MaxItems>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 128), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<EmbedDimensions>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 152), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<AssignedTable>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 176), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UseTransform>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_1ADFE7FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  v8 = *(uint64_t **)(a1 + 208);
  v9 = *(uint64_t **)(a1 + 216);
  while (v8 != v9)
  {
    v10 = *v8++;
    kaldi::CuMatrixBase<float>::Write(v10, a2, a3, a4);
  }
  result = kaldi::WriteToken(a2, a3, "</Component>");
  if (*(_BYTE *)(a1 + 460))
  {
    v12 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v12 != i; result = kaldi::WriteToken(a2, a3, "</Component>"))
    {
      kaldi::WriteToken(a2, a3, "<FeatureTransform>");
      v14 = *v12++;
      kaldi::nnet1::Component::Write(v14, a2, a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::NumParams(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (uint64_t *)a1[26];
  v2 = (uint64_t *)a1[27];
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = *v1++;
      v3 = (v3 + *(_DWORD *)(v4 + 16) * *(_DWORD *)(v4 + 20));
    }
    while (v1 != v2);
  }
  v5 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    v7 = *v5++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  _QWORD *i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  v5 = (uint64_t *)a1[26];
  v6 = (uint64_t *)a1[27];
  if (v5 == v6)
  {
    v10 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v9 = *(_DWORD *)(v8 + 16) * *(_DWORD *)(v8 + 20);
      v17 = 0;
      v18 = 0;
      v10 = v9 + v7;
      v16 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v17) = v9;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v16, v8);
      v7 = v10;
    }
    while (v5 != v6);
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (_QWORD *)a1[32];
  for (i = (_QWORD *)a1[33]; v12 != i; ++v12)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v12 + 184))(*v12, &v16);
    v14 = 0;
    v15 = 0;
    v13 = (uint64_t)*a2 + 4 * v10;
    LODWORD(v14) = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v13, (const void **)&v16);
    v10 += v17;
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1ADFE8270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void **kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetParams(_QWORD *a1, _QWORD *a2)
{
  void **result;
  uint64_t *v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t *i;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  result = (void **)(*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  v5 = (uint64_t *)a1[26];
  v6 = (uint64_t *)a1[27];
  if (v5 == v6)
  {
    v10 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5++;
      v9 = *(_DWORD *)(v8 + 16) * *(_DWORD *)(v8 + 20);
      v17 = 0;
      v18 = 0;
      v10 = v9 + v7;
      v16 = (char *)(*a2 + 4 * v7);
      LODWORD(v17) = v9;
      result = kaldi::CuMatrixBase<float>::CopyRowsFromVec(v8, &v16);
      v7 = v10;
    }
    while (v5 != v6);
  }
  v12 = (uint64_t *)a1[32];
  for (i = (uint64_t *)a1[33]; v12 != i; v10 = v15)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 176))(*v12);
    v14 = *v12++;
    v17 = 0;
    v18 = 0;
    v15 = v13 + v10;
    v16 = (char *)(*a2 + 4 * v10);
    LODWORD(v17) = v13;
    result = (void **)(*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v14 + 192))(v14, &v16);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SumParams(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  float v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = (uint64_t *)a1[26];
  v3 = (uint64_t *)a1[27];
  v4 = 0.0;
  while (v2 != v3)
  {
    v5 = *v2++;
    v4 = v4 + kaldi::CuMatrixBase<float>::Sum(v5);
  }
  v7 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v7 != v6)
  {
    v8 = *v7++;
    v4 = v4 + (*(float (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8);
  }
  return v4;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Info(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *i;
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  uint64_t v13;
  void *__p;
  uint64_t v16;
  unsigned __int8 v17;
  _QWORD v18[11];
  char v19;
  uint64_t v20;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v18, 0);
  v2 = (uint64_t *)a1[26];
  for (i = (uint64_t *)a1[27]; v2 != i; ++v2)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics<float>(*v2);
    if ((v17 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v17 & 0x80u) == 0)
      v6 = v17;
    else
      v6 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  v7 = a1[32];
  for (j = a1[33]; v7 != j; v7 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", output-dim ", 13);
    v10 = (_QWORD *)std::ostream::operator<<();
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v7 + 64))(&__p);
    if ((v17 & 0x80u) == 0)
      v12 = &__p;
    else
      v12 = __p;
    if ((v17 & 0x80u) == 0)
      v13 = v17;
    else
      v13 = v16;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)v12, v13);
    if ((char)v17 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v18[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v19 < 0)
    operator delete((void *)v18[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v20);
}

void sub_1ADFE860C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InfoGradient(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  v2 = *(_QWORD *)(a1 + 256);
  for (i = *(_QWORD *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v5 = v9;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADFE8784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  v3 = *(uint64_t **)(result + 256);
  for (i = *(uint64_t **)(result + 264);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 264))(v6, a2))
  {
    v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unsigned int v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  void *v33;
  _QWORD v34[4];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  v6 = *(int32x2_t *)(a3 + 32);
  v7 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  if (*(_BYTE *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    v8 = *(int *)(a1 + 96);
    if ((int)v8 > 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (int32x2_t *)(*(_QWORD *)(a1 + 280) + v9);
        v12[4] = v6;
        kaldi::CuMatrix<float>::Resize(v12, v7, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v10), 0, 0);
        v13 = *(_QWORD *)(a1 + 280) + v9;
        v14 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v10));
        v15 = *(_QWORD *)(a2 + 8) + 4 * v11;
        v16 = *(_DWORD *)(a2 + 28) - v11;
        v17 = *(_QWORD *)(a2 + 32);
        LODWORD(v34[1]) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v10);
        *(_QWORD *)((char *)&v34[1] + 4) = *(_QWORD *)(a2 + 20);
        HIDWORD(v34[2]) = v16;
        v34[3] = v17;
        v33 = &unk_1E5D29D40;
        v34[0] = v15;
        kaldi::CuMatrixBase<float>::SummarizeVec(v13, v14, (uint64_t)&v33);
        v33 = &unk_1E5D29D40;
        memset(v34, 0, sizeof(v34));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
        v11 += *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v10++);
        v8 = *(int *)(a1 + 96);
        v9 += 48;
      }
      while (v10 < v8);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), v8);
    if (*(int *)(a1 + 96) >= 1)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (int32x2_t *)(*(_QWORD *)(a1 + 304) + v18);
        v20[4] = v6;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v19), *(_QWORD *)(a1 + 280) + v18, v20, 0);
        kaldi::CuMatrixBase<float>::AddMat(a3, *(_QWORD *)(a1 + 304) + v18, 111, 1.0, 1.0);
        ++v19;
        v18 += 48;
      }
      while (v19 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 152);
    v25 = *(_QWORD *)(a1 + 128);
    do
    {
      v26 = *(_QWORD *)(a3 + 8) + 4 * v22;
      v27 = *(_DWORD *)(a3 + 28) - v22;
      v28 = *(_QWORD *)(a3 + 32);
      LODWORD(v34[1]) = *(_DWORD *)(v24 + 4 * v21);
      *(_QWORD *)((char *)&v34[1] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v34[2]) = v27;
      v34[3] = v28;
      v33 = &unk_1E5D29D40;
      v34[0] = v26;
      v29 = *(_QWORD *)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v21));
      v30 = *(_QWORD *)(a2 + 8) + 4 * v23;
      LODWORD(v26) = *(_DWORD *)(a2 + 28) - v23;
      v31 = *(_QWORD *)(a2 + 32);
      LODWORD(v32[2]) = *(_DWORD *)(v25 + 4 * v21);
      *(_QWORD *)((char *)&v32[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v32[3]) = v26;
      v32[4] = v31;
      v32[0] = &unk_1E5D29D40;
      v32[1] = v30;
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v33, v29, (uint64_t)v32);
      v32[0] = &unk_1E5D29D40;
      memset(&v32[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
      v33 = &unk_1E5D29D40;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      v24 = *(_QWORD *)(a1 + 152);
      v22 += *(_DWORD *)(v24 + 4 * v21);
      v25 = *(_QWORD *)(a1 + 128);
      v23 += *(_DWORD *)(v25 + 4 * v21++);
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1ADFE8AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _OWORD *v14;
  _OWORD *v15;

  a9 = &unk_1E5D29D40;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = &unk_1E5D29D40;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  v6 = *(uint64_t **)(a1 + 256);
  v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 240))(v8, a2, a3);
  }
  if ((_DWORD)a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1ADFE8C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetNormalizedLearningRate(uint64_t a1)
{
  int v1;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1)
    return NAN;
  else
    return *(float *)(a1 + 56) / (float)v1;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  __int128 v27;
  __int128 v28;
  char v29;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v28 = 0u;
  v27 = 0u;
  v26 = (int32x2_t)&unk_1E5D34170;
  v29 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v9, a2, &v26, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 232))(v9, a2, a3, 0, 0);
  v10 = *(uint64_t **)(v9 + 232);
  v11 = *(uint64_t **)(v9 + 240);
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10;
      v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      v24 = 0;
      v25 = 0;
      v23 = (uint64_t)*a4 + 4 * v12;
      LODWORD(v24) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v13);
      v12 += v14;
      ++v10;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(_BYTE *)(a1 + 460))
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v15, a2, &v26, 0);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v15)
      {
LABEL_13:
        kaldi::Vector<float>::Destroy((uint64_t)&v23);
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 256) + 8 * v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 224))(v18, *(_QWORD *)(v15 + 280) + v16, a3, &v23);
        v21 = 0;
        v22 = 0;
        v20 = (uint64_t)*a4 + 4 * v12;
        LODWORD(v21) = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (const void **)&v23);
        v12 += v24;
        ++v17;
        v16 += 48;
      }
      while (v17 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    goto LABEL_13;
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
}

void sub_1ADFE8E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  *a3 = 0;
  v6 = *(char **)(a1 + 208);
  v7 = *(char **)(a1 + 216);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0;
    v10 = v8 >> 3;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v11 = *(_QWORD *)v6;
      v6 += 8;
      v9 += *(_DWORD *)(v11 + 16) * *(_DWORD *)(v11 + 20);
      *a3 = v9;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)(a1 + 232);
  v13 = *(_QWORD *)(a1 + 240);
  *a2 = 0;
  if (v13 != v12)
  {
    v14 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v12 + 8 * v14++));
      v12 = *(_QWORD *)(a1 + 232);
    }
    while (v14 < (*(_QWORD *)(a1 + 240) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v4;
  int32x2_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = a1 + 29;
  v2 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v2 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)(a1 + 29), v2);
    if (a1[27] != a1[26])
    {
      v4 = 0;
      do
      {
        v5 = (int32x2_t *)operator new();
        v6 = *(_QWORD *)(a1[26] + 8 * v4);
        kaldi::CuMatrix<float>::CuMatrix(v5, *(unsigned int *)(v6 + 20), *(unsigned int *)(v6 + 16), 0, 0, 0);
        v7 = *(_QWORD *)(*v1 + 8 * v4);
        *(_QWORD *)(*v1 + 8 * v4) = v5;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
        ++v4;
      }
      while (v4 < (uint64_t)(a1[27] - a1[26]) >> 3);
    }
  }
}

void sub_1ADFE9060(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

double kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, int a2, int a3)
{
  double result;

  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = a3;
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)a1 = &unk_1E5D2EC50;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2ED80;
  *(_DWORD *)(a1 + 96) = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 200) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 352) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 456) = 1065353216;
  *(_BYTE *)(a1 + 460) = 0;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 529) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  kaldi::CompressedMatrix **v25;
  kaldi::CompressedMatrix *v26;
  kaldi::CompressedMatrix *v27;
  kaldi::CompressedMatrix *v28;
  kaldi::CompressedMatrix *v30;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2ED80;
  *(_QWORD *)a1 = &unk_1E5D2EC50;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  *(_QWORD *)(a1 + 352) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (a1 != a2)
  {
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 280, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 304, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(a1 + 328, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  }
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>(*(const void ***)(*(_QWORD *)(a2 + 208) + v23), (uint64_t *)&v30);
      v25 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + v23);
      v26 = v30;
      v30 = 0;
      v27 = *v25;
      *v25 = v26;
      if (v27)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v25, v27);
      v28 = v30;
      v30 = 0;
      if (v28)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&v30, v28);
      ++v24;
      v23 += 8;
    }
    while (v24 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1ADFE9588(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (a1[1] - *a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)a1, (kaldi::CompressedMatrix **)(*a1 + 8 * a2));
  }
  else
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(a1, a2 - v2);
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CompressedMatrix>@<X0>(const void **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CompressedMatrix::CompressedMatrix(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADFE9714(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  _QWORD v5[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v4 = 0;
    do
      kaldi::nnet1::QuantizerResidualAggregator::PushSetup(a2, *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v4++));
    while (v4 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
  quasar::Bitmap *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  *(_QWORD *)a1 = &unk_1E5D2EC50;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2ED80;
  v2 = (quasar::Bitmap *)(a1 + 88);
  v3 = *(_QWORD **)(a1 + 256);
  v4 = *(_QWORD **)(a1 + 264);
  while (v3 != v4)
  {
    if (*v3)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
      *v3 = 0;
    }
    ++v3;
  }
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)(a1 + 472));
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 400);
  kaldi::CuMatrix<float>::~CuMatrix(a1 + 352);
  v10 = (void **)(a1 + 328);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 304);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 280);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v5 = *(void **)(a1 + 256);
  if (v5)
  {
    *(_QWORD *)(a1 + 264) = v5;
    operator delete(v5);
  }
  v10 = (void **)(a1 + 232);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v6 = *(void **)(a1 + 176);
  if (v6)
  {
    *(_QWORD *)(a1 + 184) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 152);
  if (v7)
  {
    *(_QWORD *)(a1 + 160) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 128);
  if (v8)
  {
    *(_QWORD *)(a1 + 136) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 104);
  if (v9)
  {
    *(_QWORD *)(a1 + 112) = v9;
    operator delete(v9);
  }
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent((kaldi::nnet1::UpdatableComponent *)a1);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(uint64_t a1)
{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88);
}

{
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::~WordMultiVecComponent(a1 - 88);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1ADFE99B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent(v2, a1);
  return v2;
}

void sub_1ADFE9A18(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C404CB298AFLL);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(uint64_t a1)
{
  return kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CopyCompressed(a1 - 88);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  int *v6;
  void **v7;
  BOOL v8;
  float *v9;
  void *v10;
  BOOL v17;
  BOOL v18;
  BOOL v19;
  int *v20;
  BOOL v21;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  std::string *v33;
  void *v36;
  void *v37;
  int v38;
  BOOL v39;
  _QWORD *v41;
  _QWORD *v42;
  char **v43;
  int v44;
  kaldi::nnet1::Component *v45;
  const void *v46;
  void *v47;
  void *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  char *v59;
  uint64_t v60;
  const void **v61;
  const void **v62;
  int v63;
  const void **v64;
  uint64_t v65;
  int v66;
  const void *v67;
  kaldi::nnet1::AffineTransform *v68;
  kaldi::nnet1::AffineTransform *v69;
  uint64_t v70;
  void *v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  int inited;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t **v79;
  unint64_t v80;
  uint64_t **v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  kaldi::CompressedMatrix **v90;
  kaldi::CompressedMatrix *v91;
  kaldi::CompressedMatrix *v92;
  kaldi::CompressedMatrix *v93;
  _QWORD *v94;
  void *v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  void **v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  char v103;
  char *v104;
  std::vector<unsigned int> *v105;
  std::vector<unsigned int> *v106;
  int *v107;
  std::vector<unsigned int> *v108;
  kaldi::CompressedMatrix *v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _QWORD **v114;
  _QWORD *v115;
  unint64_t v116;
  void *__p;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  void *v122[3];
  int v123;
  std::string v124;
  std::string v125;
  int v126;

  v126 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v125);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &v124);
  v103 = 0;
  v123 = -1;
  *(_BYTE *)(a1 + 460) = 1;
  memset(v122, 0, sizeof(v122));
  v106 = (std::vector<unsigned int> *)(a1 + 152);
  v104 = (char *)(a1 + 460);
  v105 = (std::vector<unsigned int> *)(a1 + 104);
  v107 = (int *)(a1 + 200);
  v108 = (std::vector<unsigned int> *)(a1 + 176);
  v6 = (int *)(a1 + 96);
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_161;
    kaldi::ReadToken(a2, 0, (uint64_t)v122);
    if ((SHIBYTE(v122[2]) & 0x80000000) == 0)
      break;
    v10 = v122[1];
    if (v122[1] == (void *)12)
    {
      if (*(_QWORD *)v122[0] == 0x536D6F646E61523CLL && *((_DWORD *)v122[0] + 2) == 1046766949)
      {
LABEL_88:
        v20 = &v123;
LABEL_123:
        kaldi::ReadBasicType<int>(a2, 0, (uint64_t)v20);
        goto LABEL_159;
      }
      v10 = v122[1];
    }
    else if (v122[1] == (void *)13
           && *(_QWORD *)v122[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v122[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_82:
      v9 = (float *)&v126;
LABEL_124:
      kaldi::ReadBasicType<float>(a2, 0, v9);
      goto LABEL_159;
    }
    if (v10 == (void *)19)
    {
      if (*(_QWORD *)v122[0] == 0x61725474696E493CLL
        && *((_QWORD *)v122[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v122[0] + 11) == 0x3E657079546D726FLL)
      {
LABEL_125:
        v33 = &v125;
LABEL_127:
        kaldi::ReadToken(a2, 0, (uint64_t)v33);
        goto LABEL_159;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)18)
    {
      if (*(_QWORD *)v122[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v122[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v122[0] + 8) == 15973)
      {
LABEL_126:
        v33 = &v124;
        goto LABEL_127;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)9)
    {
      v17 = *(_QWORD *)v122[0] == 0x6461724778614D3CLL && *((_BYTE *)v122[0] + 8) == 62;
      v9 = (float *)(a1 + 452);
      if (v17)
        goto LABEL_124;
      v10 = v122[1];
    }
    if (v10 == (void *)15)
    {
      v18 = *(_QWORD *)v122[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v122[0] + 7) == 0x3E66656F43657461;
      v9 = (float *)(a1 + 456);
      if (v18)
        goto LABEL_124;
      v10 = v122[1];
    }
    if (v10 == (void *)11)
    {
      v19 = *(_QWORD *)v122[0] == 0x756F72476D754E3CLL && *(_QWORD *)((char *)v122[0] + 3) == 0x3E7370756F72476DLL;
      v20 = (int *)(a1 + 96);
      if (v19)
        goto LABEL_123;
      v10 = v122[1];
      if (v122[1] == (void *)11)
      {
        v21 = *(_QWORD *)v122[0] == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)v122[0] + 3) == 0x3E73656C6261546DLL;
        v20 = (int *)(a1 + 200);
        if (v21)
          goto LABEL_123;
        if ((HIBYTE(v122[2]) & 0x80) == 0)
          goto LABEL_132;
      }
    }
    if (v10 == (void *)12)
    {
      if (*(_QWORD *)v122[0] == 0x69536261636F563CLL && *((_DWORD *)v122[0] + 2) == 1047750010)
      {
LABEL_156:
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v105);
        goto LABEL_157;
      }
      v10 = v122[1];
    }
    if (v10 == (void *)10)
    {
      if (*(_QWORD *)v122[0] == 0x6D65744978614D3CLL && *((_WORD *)v122[0] + 4) == 15987)
      {
LABEL_154:
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, (std::vector<unsigned int> *)(a1 + 128));
        goto LABEL_157;
      }
      goto LABEL_138;
    }
LABEL_139:
    if (v10 != (void *)17)
      goto LABEL_148;
    v7 = (void **)v122[0];
LABEL_141:
    v36 = *v7;
    v37 = v7[1];
    v38 = *((unsigned __int8 *)v7 + 16);
    v39 = v36 == (void *)0x69446465626D453CLL && v37 == (void *)0x736E6F69736E656DLL;
    if (!v39 || v38 != 62)
      goto LABEL_148;
    __p = 0;
    v118 = 0;
    v119 = 0;
    kaldi::ReadToken(a2, 0, (uint64_t)&__p);
    kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v106);
LABEL_157:
    if (SHIBYTE(v119) < 0)
      operator delete(__p);
LABEL_159:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  v7 = v122;
  switch(HIBYTE(v122[2]))
  {
    case 9:
LABEL_5:
      v8 = v122[0] == (void *)0x6461724778614D3CLL && LOBYTE(v122[1]) == 62;
      v9 = (float *)(a1 + 452);
      if (!v8)
        goto LABEL_148;
      goto LABEL_124;
    case 0xA:
      goto LABEL_133;
    case 0xB:
      goto LABEL_112;
    case 0xC:
      if (v122[0] != (void *)0x536D6F646E61523CLL || LODWORD(v122[1]) != 1046766949)
      {
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_88;
    case 0xD:
      if (v122[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v122 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_148;
      goto LABEL_82;
    case 0xF:
LABEL_105:
      v30 = v122[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v122 + 7) == (void *)0x3E66656F43657461;
      v9 = (float *)(a1 + 456);
      if (v30)
        goto LABEL_124;
      if (HIBYTE(v122[2]) == 10)
        goto LABEL_133;
      if (HIBYTE(v122[2]) == 12)
      {
LABEL_128:
        if (v122[0] == (void *)0x69536261636F563CLL && LODWORD(v122[1]) == 1047750010)
          goto LABEL_156;
LABEL_132:
        if (HIBYTE(v122[2]) != 10)
          goto LABEL_148;
        goto LABEL_133;
      }
      if (HIBYTE(v122[2]) != 11)
        goto LABEL_148;
LABEL_112:
      v31 = v122[0] == (void *)0x756F72476D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E7370756F72476DLL;
      v20 = (int *)(a1 + 96);
      if (v31)
        goto LABEL_123;
      if (HIBYTE(v122[2]) == 10)
      {
LABEL_133:
        if (v122[0] == (void *)0x6D65744978614D3CLL && LOWORD(v122[1]) == 15987)
          goto LABEL_154;
        if ((HIBYTE(v122[2]) & 0x80) == 0)
          goto LABEL_148;
LABEL_138:
        v10 = v122[1];
        goto LABEL_139;
      }
      if (HIBYTE(v122[2]) == 11)
      {
        v32 = v122[0] == (void *)0x6C6261546D754E3CLL && *(void **)((char *)v122 + 3) == (void *)0x3E73656C6261546DLL;
        v20 = (int *)(a1 + 200);
        if (v32)
          goto LABEL_123;
      }
LABEL_148:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<AssignedTable>"))
      {
        __p = 0;
        v118 = 0;
        v119 = 0;
        kaldi::ReadToken(a2, 0, (uint64_t)&__p);
        kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v108);
        goto LABEL_157;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<InitializeToConcat>"))
      {
        v103 = 1;
        goto LABEL_159;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "<UseTransform>"))
      {
        kaldi::ReadBasicType<BOOL>(a2, 0, v104);
        goto LABEL_159;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v122, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        v98 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v122[2]) >= 0)
          v99 = v122;
        else
          v99 = (void **)v122[0];
        if (SHIBYTE(v122[2]) >= 0)
          v100 = HIBYTE(v122[2]);
        else
          v100 = (uint64_t)v122[1];
        v101 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v98, (uint64_t)v99, v100);
        v102 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)", a typo in config? ", 20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v102, (uint64_t)"(NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef|ParamStddev|RandomSeed|InitTransformType|GradientNormType|MaxGrad)", 132);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
LABEL_161:
      v41 = *(_QWORD **)(a1 + 256);
      v42 = *(_QWORD **)(a1 + 264);
      while (v41 != v42)
      {
        if (*v41)
        {
          (*(void (**)(_QWORD))(*(_QWORD *)*v41 + 8))(*v41);
          *v41 = 0;
        }
        ++v41;
      }
      if (!*v104)
        goto LABEL_207;
      v43 = (char **)(a1 + 256);
      if (*v6 >= 1)
      {
        v44 = 0;
        do
        {
          v110 = 0;
          v111 = 0;
          v112 = 0;
          LODWORD(v114) = 0;
          LODWORD(v109) = 0;
          kaldi::ExpectToken(a2, 0, "<FeatureTransform>");
          kaldi::ReadToken(a2, 0, (uint64_t)&v110);
          v45 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::MarkerToComponentType((std::string::size_type *)&v110);
          kaldi::ExpectToken(a2, 0, "<InputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v114);
          kaldi::ExpectToken(a2, 0, "<OutputDim>");
          kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v109);
          v46 = (const void *)kaldi::nnet1::Component::NewComponentOfType(v45, v114, v109);
          if (!v46
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v94 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"require an updatable component, you used ", 41);
            if (v112 >= 0)
              v95 = &v110;
            else
              v95 = v110;
            if (v112 >= 0)
              v96 = HIBYTE(v112);
            else
              v96 = v111;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          v48 = v47;
          (*(void (**)(void *, uint64_t *, kaldi::UniformRandomNumber *))(*(_QWORD *)v47 + 96))(v47, a2, a3);
          v50 = *(_QWORD **)(a1 + 264);
          v49 = *(_QWORD *)(a1 + 272);
          if ((unint64_t)v50 >= v49)
          {
            v52 = ((char *)v50 - *v43) >> 3;
            if ((unint64_t)(v52 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v53 = v49 - (_QWORD)*v43;
            v54 = v53 >> 2;
            if (v53 >> 2 <= (unint64_t)(v52 + 1))
              v54 = v52 + 1;
            if ((unint64_t)v53 >= 0x7FFFFFFFFFFFFFF8)
              v55 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v55 = v54;
            if (v55)
              v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v55);
            else
              v56 = 0;
            v57 = &v56[8 * v52];
            *(_QWORD *)v57 = v48;
            v51 = v57 + 8;
            v59 = *(char **)(a1 + 256);
            v58 = *(char **)(a1 + 264);
            if (v58 != v59)
            {
              do
              {
                v60 = *((_QWORD *)v58 - 1);
                v58 -= 8;
                *((_QWORD *)v57 - 1) = v60;
                v57 -= 8;
              }
              while (v58 != v59);
              v58 = *v43;
            }
            *(_QWORD *)(a1 + 256) = v57;
            *(_QWORD *)(a1 + 264) = v51;
            *(_QWORD *)(a1 + 272) = &v56[8 * v55];
            if (v58)
              operator delete(v58);
          }
          else
          {
            *v50 = v48;
            v51 = v50 + 1;
          }
          *(_QWORD *)(a1 + 264) = v51;
          if (SHIBYTE(v112) < 0)
            operator delete(v110);
          ++v44;
        }
        while (v44 < *v6);
      }
      if ((v103 & 1) == 0)
        goto LABEL_207;
      v62 = *(const void ***)(a1 + 256);
      v61 = *(const void ***)(a1 + 264);
      if (v62 == v61)
      {
        if (!*((_DWORD *)*v62 + 3))
          goto LABEL_205;
LABEL_251:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"dimension mismatch, cannot initialize to concatenation, expected dim is ", 72);
        v97 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" actual dim is ", 15);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v63 = 0;
      v64 = *(const void ***)(a1 + 256);
      do
      {
        v65 = (uint64_t)*v64++;
        v63 += *(_DWORD *)(v65 + 8);
      }
      while (v64 != v61);
      if (v63 != *((_DWORD *)*v62 + 3))
        goto LABEL_251;
      if (v62 != v61)
      {
        v66 = 0;
        do
        {
          v67 = *v62;
          if (!*v62)
          {
LABEL_249:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"cannot initialize to concatenation for this transform", 53);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
          }
          if (v68)
          {
            v69 = v68;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, *((unsigned int *)v68 + 3), *((unsigned int *)v68 + 2), 0, 0);
            v70 = *((unsigned int *)v69 + 3);
            v114 = 0;
            v115 = 0;
            v116 = 0;
            kaldi::Vector<float>::Resize((void **)&v114, v70, 0);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v66, *((_DWORD *)v69 + 2), 0, v118);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
            kaldi::nnet1::AffineTransform::SetLinearity(v69, (int *)&__p);
            kaldi::nnet1::AffineTransform::Bias(v69);
            v71 = (void *)kaldi::nnet1::AffineTransform::Bias(v69);
            kaldi::CuVectorBase<float>::CopyFromVec<float>(v71, (uint64_t)&v114);
            v72 = *((_DWORD *)v69 + 2);
            kaldi::Vector<float>::Destroy((uint64_t)&v114);
          }
          else
          {
            if (!v73)
              goto LABEL_249;
            v74 = (uint64_t)v73;
            kaldi::Matrix<float>::Matrix((uint64_t)&__p, v73[3], v73[2], 0, 0);
            kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v110, (uint64_t)&__p, v66, *(_DWORD *)(v74 + 8), 0, v118);
            kaldi::MatrixBase<float>::AddToDiag((uint64_t)&v110, 1.0);
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v110);
            kaldi::nnet1::LinearTransform<kaldi::CuMatrixBase<float>>::SetLinearity(v74, (int *)&__p);
            v72 = *(_DWORD *)(v74 + 8);
          }
          kaldi::Matrix<float>::~Matrix((uint64_t)&__p);
          v66 += v72;
          ++v62;
        }
        while (v62 != v61);
      }
LABEL_205:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"initialized the transform for concatenation", 43);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
      }
LABEL_207:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v125);
      *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v124);
      if (!inited)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"it doesn't make sense to initialize the embedding table as an identify matrix", 77);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v115 = 0;
      v116 = 0;
      v114 = &v115;
      if (*v6 < 1)
      {
        v80 = 0;
      }
      else
      {
        v76 = 0;
        do
        {
          LODWORD(v110) = 0;
          LODWORD(v110) = v108->__begin_[v76];
          v77 = v105->__begin_[v76];
          v78 = v106->__begin_[v76];
          __p = &v110;
          v79 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, (int *)&v110, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p);
          *((_DWORD *)v79 + 8) = v77;
          *((_DWORD *)v79 + 9) = v78;
          ++v76;
        }
        while (v76 < *v6);
        v80 = v116;
      }
      std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), v80);
      if (v123 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v123);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)&__p, a3);
      v113 = 0;
      if (*v107 >= 1)
      {
        while (1)
        {
          v110 = &v113;
          v81 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v114, &v113, (uint64_t)&std::piecewise_construct, (_DWORD **)&v110);
          v82 = *((unsigned int *)v81 + 8);
          v83 = *((unsigned int *)v81 + 9);
          kaldi::Matrix<float>::Matrix((uint64_t)&v110, v82, v83, 0, 0);
          if ((int)v82 >= 1)
            break;
LABEL_227:
          kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>((float **)&v110, (uint64_t *)&v109);
          v90 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + 8 * v113);
          v91 = v109;
          v109 = 0;
          v92 = *v90;
          *v90 = v91;
          if (v92)
            std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v90, v92);
          v93 = v109;
          v109 = 0;
          if (v93)
            std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&v109, v93);
          kaldi::Matrix<float>::~Matrix((uint64_t)&v110);
          if (++v113 >= *v107)
            goto LABEL_232;
        }
        v84 = 0;
        while ((int)v83 < 1)
        {
LABEL_226:
          if (++v84 == (_DWORD)v82)
            goto LABEL_227;
        }
        v85 = 0;
        while (2)
        {
          if (inited == 2)
          {
            v88 = *(float *)&v126;
            kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)&__p, 0);
            v87 = v88 * v89;
LABEL_224:
            *((float *)v110 + v84 * (int)v112 + v85) = v87;
          }
          else if (inited == 1)
          {
            v86 = *(float *)&v126;
            v87 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v86 + v86);
            goto LABEL_224;
          }
          if (v83 == ++v85)
            goto LABEL_226;
          continue;
        }
      }
LABEL_232:
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
      if (v120)
      {
        v121 = v120;
        operator delete(v120);
      }
      v110 = &v119;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
      std::__tree<int>::destroy((uint64_t)&v114, v115);
      if (SHIBYTE(v122[2]) < 0)
        operator delete(v122[0]);
      if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v124.__r_.__value_.__l.__data_);
      if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v125.__r_.__value_.__l.__data_);
      return;
    case 0x11:
      goto LABEL_141;
    case 0x12:
LABEL_97:
      if (v122[0] != (void *)0x6E6569646172473CLL
        || v122[1] != (void *)0x7079546D726F4E74
        || LOWORD(v122[2]) != 15973)
      {
        v7 = v122;
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_126;
    case 0x13:
      if (v122[0] != (void *)0x61725474696E493CLL
        || v122[1] != (void *)0x79546D726F66736ELL
        || *(void **)((char *)&v122[1] + 3) != (void *)0x3E657079546D726FLL)
      {
        v7 = v122;
        switch(HIBYTE(v122[2]))
        {
          case 9:
            goto LABEL_5;
          case 0xA:
            goto LABEL_133;
          case 0xB:
            goto LABEL_112;
          case 0xC:
            goto LABEL_128;
          case 0xF:
            goto LABEL_105;
          case 0x11:
            goto LABEL_141;
          case 0x12:
            goto LABEL_97;
          default:
            goto LABEL_148;
        }
      }
      goto LABEL_125;
    default:
      goto LABEL_148;
  }
}

void sub_1ADFEAB74()
{
  JUMPOUT(0x1ADFEABBCLL);
}

void sub_1ADFEAB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v23 - 169) < 0)
    operator delete(*(void **)(v23 - 192));
  if (*(char *)(v23 - 137) < 0)
    operator delete(*(void **)(v23 - 160));
  if (*(char *)(v23 - 113) < 0)
    operator delete(*(void **)(v23 - 136));
  _Unwind_Resume(exception_object);
}

void sub_1ADFEABB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  JUMPOUT(0x1ADFEABBCLL);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::Matrix<float>>(float **a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = operator new();
  *(_QWORD *)v4 = 0;
  *(_BYTE *)(v4 + 8) = 0;
  kaldi::CompressedMatrix::CopyFromMat<float>(v4, a1);
  *a2 = v4;
}

void sub_1ADFEAC60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD v43[34];

  if (!*(_BYTE *)(result + 544))
  {
    v1 = *(unsigned int *)(result + 96);
    if ((int)v1 <= 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one group, you used ", 39);
      std::ostream::operator<<();
    }
    else
    {
      v2 = *(unsigned int *)(result + 200);
      if ((int)v2 <= 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"must have at least one embedding table, you used ", 49);
        std::ostream::operator<<();
      }
      else if (v1 < v2)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are only ", 15);
        v31 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" groups, but you set ", 21);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v32, " embedding tables");
      }
      else
      {
        v3 = *(_QWORD *)(result + 104);
        v4 = (*(_QWORD *)(result + 112) - v3) >> 2;
        if (v4 == v1)
        {
          v5 = *(_QWORD *)(result + 128);
          if (v4 == (*(_QWORD *)(result + 136) - v5) >> 2)
          {
            v6 = *(_QWORD *)(result + 152);
            if (v4 == (*(_QWORD *)(result + 160) - v6) >> 2)
            {
              v7 = *(_QWORD *)(result + 176);
              if (v4 == (*(_QWORD *)(result + 184) - v7) >> 2)
              {
                v8 = *(_QWORD *)(result + 208);
                if (v2 == (*(_QWORD *)(result + 216) - v8) >> 3)
                {
                  if (*(_BYTE *)(result + 460)
                    && v4 != (uint64_t)(*(_QWORD *)(result + 264) - *(_QWORD *)(result + 256)) >> 3)
                  {
                    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                    v40 = (_QWORD *)std::ostream::operator<<();
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" groups, but the number of feature transforms is ", 49);
                    std::ostream::operator<<();
                  }
                  else
                  {
                    v9 = 0;
                    v10 = 0;
                    v11 = 0;
                    do
                    {
                      v12 = *(unsigned int *)(v7 + 4 * v9);
                      if ((v12 & 0x80000000) != 0 || (int)v12 >= (int)v2)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v23 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"-th group has assigned table index ", 35);
                        v24 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" , the number of tables is ", 27);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v13 = *(_DWORD *)(v3 + 4 * v9);
                      if (v13 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v20 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"-th group has invalid vocab size ", 33);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v14 = *(_DWORD *)(v5 + 4 * v9);
                      if (v14 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v21 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"-th group has invalid max item value ", 37);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v15 = *(_DWORD *)(v6 + 4 * v9);
                      if (v15 <= 0)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v19 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"-th group has invalid embedding dimension value ", 48);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      v16 = **(_QWORD **)(v8 + 8 * v12);
                      if (!v16 || *(_DWORD *)(v16 + 8) != v13)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v18 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"-th group has mismatched embedding table and vocab size ", 56);
                        v29 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_DWORD *)(v16 + 12) != v15)
                      {
                        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                        v22 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"-th group has mismatched embedding table and embedding dim ", 59);
                        v30 = (_QWORD *)std::ostream::operator<<();
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" vs ", 4);
                        std::ostream::operator<<();
                        goto LABEL_40;
                      }
                      if (*(_BYTE *)(result + 460))
                      {
                        v17 = *(_QWORD *)(*(_QWORD *)(result + 256) + 8 * v9);
                        if (v15 != *(_DWORD *)(v17 + 8))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v25 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"-th group has mismatched embedding table and feature transform ", 63);
                          v26 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" vs ", 4);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                        if (*(_DWORD *)(result + 12) != *(_DWORD *)(v17 + 12))
                        {
                          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the ", 4);
                          v27 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"-th group has feature transform output dim ", 43);
                          v28 = (_QWORD *)std::ostream::operator<<();
                          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" does not match component output dim ", 37);
                          std::ostream::operator<<();
                          goto LABEL_40;
                        }
                      }
                      v10 += v15;
                      v11 += v14;
                      ++v9;
                    }
                    while (v4 != v9);
                    if (*(_DWORD *)(result + 8) == v11)
                    {
                      if (*(_BYTE *)(result + 460) || v10 == *(_DWORD *)(result + 12))
                      {
                        *(_BYTE *)(result + 544) = 1;
                        return result;
                      }
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Total embedding size of ", 24);
                      v41 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" doesn't match the component output size of ", 44);
                      v42 = (_QWORD *)std::ostream::operator<<();
                      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " when transforms are not used");
                    }
                    else
                    {
                      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"input dim of the component is ", 30);
                      v39 = (_QWORD *)std::ostream::operator<<();
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)" , while the input dim defined in max items is ", 47);
                      std::ostream::operator<<();
                    }
                  }
                }
                else
                {
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"the actual number of embedding tables is ", 41);
                  v38 = (_QWORD *)std::ostream::operator<<();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" and different than ", 20);
                  std::ostream::operator<<();
                }
              }
              else
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
                v36 = (_QWORD *)std::ostream::operator<<();
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" groups, but ", 13);
                v37 = (_QWORD *)std::ostream::operator<<();
                std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, " groups have assigned tables");
              }
            }
            else
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
              v35 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" groups, but the embedding dim list size is ", 44);
              std::ostream::operator<<();
            }
          }
          else
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
            v34 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)" groups, but the max item list size is ", 39);
            std::ostream::operator<<();
          }
        }
        else
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"there are ", 10);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" groups, but the number vocab list size is ", 43);
          std::ostream::operator<<();
        }
      }
    }
LABEL_40:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v43);
  }
  return result;
}

void sub_1ADFEB4B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)va);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  float *v9;
  int *v10;
  int *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  BOOL v17;
  BOOL v18;
  BOOL v26;
  float *v27;
  BOOL v28;
  BOOL v31;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  kaldi::CompressedMatrix **v45;
  kaldi::CompressedMatrix *v46;
  kaldi::CompressedMatrix *v47;
  _QWORD *v48;
  _QWORD *v49;
  int v50;
  char **v51;
  const void *v52;
  void *v53;
  void *v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  __int128 *v68;
  uint64_t v69;
  _QWORD *v70;
  std::vector<unsigned int> *v71;
  std::vector<unsigned int> *v72;
  float *v73;
  std::vector<unsigned int> *v74;
  std::vector<unsigned int> *v75;
  void *__p;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;

  v79 = 0uLL;
  v80 = 0;
  v8 = (char *)(a1 + 460);
  *(_BYTE *)(a1 + 460) = 1;
  v9 = (float *)(a1 + 452);
  v72 = (std::vector<unsigned int> *)(a1 + 176);
  v73 = (float *)(a1 + 456);
  v71 = (std::vector<unsigned int> *)(a1 + 152);
  v74 = (std::vector<unsigned int> *)(a1 + 104);
  v75 = (std::vector<unsigned int> *)(a1 + 128);
  v10 = (int *)(a1 + 200);
  v11 = (int *)(a1 + 96);
  while (kaldi::Peek(a2, a3) == 60)
  {
    kaldi::ReadToken(a2, a3, (uint64_t)&v79);
    if (SHIBYTE(v80) < 0)
    {
      v16 = *((_QWORD *)&v79 + 1);
      if (*((_QWORD *)&v79 + 1) != 11)
        goto LABEL_25;
      v17 = *(_QWORD *)v79 == 0x756F72476D754E3CLL && *(_QWORD *)(v79 + 3) == 0x3E7370756F72476DLL;
      v14 = (uint64_t)v11;
      if (v17
        || (*(_QWORD *)v79 == 0x6C6261546D754E3CLL ? (v18 = *(_QWORD *)(v79 + 3) == 0x3E73656C6261546DLL) : (v18 = 0),
            v14 = (uint64_t)v10,
            v18))
      {
LABEL_75:
        kaldi::ReadBasicType<int>(a2, a3, v14);
      }
      else
      {
        v16 = *((_QWORD *)&v79 + 1);
LABEL_25:
        if (v16 == 12)
        {
          if (*(_QWORD *)v79 == 0x69536261636F563CLL && *(_DWORD *)(v79 + 8) == 1047750010)
          {
LABEL_94:
            __p = 0;
            v77 = 0;
            v78 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v74);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v79 + 1);
        }
        if (v16 != 10)
          goto LABEL_37;
        if (*(_QWORD *)v79 == 0x6D65744978614D3CLL && *(_WORD *)(v79 + 8) == 15987)
        {
LABEL_93:
          __p = 0;
          v77 = 0;
          v78 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)&__p);
          kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v75);
LABEL_137:
          if (SHIBYTE(v78) < 0)
            operator delete(__p);
        }
        else
        {
          v16 = *((_QWORD *)&v79 + 1);
LABEL_37:
          if (v16 == 17)
          {
            if (*(_QWORD *)v79 == 0x69446465626D453CLL
              && *(_QWORD *)(v79 + 8) == 0x736E6F69736E656DLL
              && *(_BYTE *)(v79 + 16) == 62)
            {
LABEL_135:
              __p = 0;
              v77 = 0;
              v78 = 0;
              kaldi::ReadToken(a2, a3, (uint64_t)&__p);
              kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v71);
              goto LABEL_137;
            }
            v16 = *((_QWORD *)&v79 + 1);
          }
          if (v16 != 15)
            goto LABEL_52;
          if (*(_QWORD *)v79 == 0x656E67697373413CLL && *(_QWORD *)(v79 + 7) == 0x3E656C6261546465)
          {
LABEL_134:
            __p = 0;
            v77 = 0;
            v78 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ",", 1, v72);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v79 + 1);
LABEL_52:
          if (v16 != 18)
            goto LABEL_61;
          if (*(_QWORD *)v79 == 0x6E6569646172473CLL
            && *(_QWORD *)(v79 + 8) == 0x7079546D726F4E74
            && *(_WORD *)(v79 + 16) == 15973)
          {
LABEL_136:
            __p = 0;
            v77 = 0;
            v78 = 0;
            kaldi::ReadToken(a2, a3, (uint64_t)&__p);
            *(_DWORD *)(a1 + 448) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&__p);
            goto LABEL_137;
          }
          v16 = *((_QWORD *)&v79 + 1);
LABEL_61:
          if (v16 == 9)
          {
            v26 = *(_QWORD *)v79 == 0x6461724778614D3CLL && *(_BYTE *)(v79 + 8) == 62;
            v27 = v9;
            if (v26)
              goto LABEL_92;
            v16 = *((_QWORD *)&v79 + 1);
          }
          if (v16 == 15)
          {
            v28 = *(_QWORD *)v79 == 0x61526E7261654C3CLL && *(_QWORD *)(v79 + 7) == 0x3E66656F43657461;
            v27 = v73;
            if (v28)
              goto LABEL_92;
            v16 = *((_QWORD *)&v79 + 1);
          }
          if (v16 != 14)
            goto LABEL_177;
          v12 = (uint64_t *)v79;
LABEL_128:
          v38 = *v12;
          v39 = *(uint64_t *)((char *)v12 + 6);
          if (v38 != 0x6E6172546573553CLL || v39 != 0x3E6D726F66736E61)
            goto LABEL_177;
          kaldi::ReadBasicType<BOOL>(a2, a3, v8);
        }
      }
    }
    else
    {
      v12 = (uint64_t *)&v79;
      switch(HIBYTE(v80))
      {
        case 9:
          goto LABEL_87;
        case 0xA:
          goto LABEL_82;
        case 0xB:
          v13 = (_QWORD)v79 == 0x756F72476D754E3CLL && *(_QWORD *)((char *)&v79 + 3) == 0x3E7370756F72476DLL;
          v14 = (uint64_t)v11;
          if (!v13)
          {
            v15 = (_QWORD)v79 == 0x6C6261546D754E3CLL && *(_QWORD *)((char *)&v79 + 3) == 0x3E73656C6261546DLL;
            v14 = (uint64_t)v10;
            if (!v15)
              goto LABEL_80;
          }
          goto LABEL_75;
        case 0xC:
          if ((_QWORD)v79 == 0x69536261636F563CLL && DWORD2(v79) == 1047750010)
            goto LABEL_94;
LABEL_80:
          if (HIBYTE(v80) == 9)
            goto LABEL_87;
          if (HIBYTE(v80) != 10)
            goto LABEL_177;
LABEL_82:
          if ((_QWORD)v79 == 0x6D65744978614D3CLL && WORD4(v79) == 15987)
            goto LABEL_93;
LABEL_86:
          if (HIBYTE(v80) == 9)
            goto LABEL_87;
          goto LABEL_177;
        case 0xE:
          goto LABEL_128;
        case 0xF:
          goto LABEL_115;
        case 0x11:
          if ((_QWORD)v79 == 0x69446465626D453CLL
            && *((_QWORD *)&v79 + 1) == 0x736E6F69736E656DLL
            && v80 == 62)
          {
            goto LABEL_135;
          }
          if (HIBYTE(v80) == 9)
            goto LABEL_87;
          if (HIBYTE(v80) == 14)
            goto LABEL_127;
          if (HIBYTE(v80) != 15)
            goto LABEL_177;
LABEL_115:
          if ((_QWORD)v79 == 0x656E67697373413CLL && *(_QWORD *)((char *)&v79 + 7) == 0x3E656C6261546465)
            goto LABEL_134;
          switch(HIBYTE(v80))
          {
            case 9u:
LABEL_87:
              v31 = (_QWORD)v79 == 0x6461724778614D3CLL && BYTE8(v79) == 62;
              v27 = v9;
              if (!v31)
                goto LABEL_177;
              break;
            case 0xEu:
LABEL_127:
              v12 = (uint64_t *)&v79;
              goto LABEL_128;
            case 0xFu:
LABEL_122:
              v37 = (_QWORD)v79 == 0x61526E7261654C3CLL && *(_QWORD *)((char *)&v79 + 7) == 0x3E66656F43657461;
              v27 = v73;
              if (!v37)
              {
LABEL_177:
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
                v67 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unknown token ", 14);
                if (v80 >= 0)
                  v68 = &v79;
                else
                  v68 = (__int128 *)v79;
                if (v80 >= 0)
                  v69 = HIBYTE(v80);
                else
                  v69 = *((_QWORD *)&v79 + 1);
                v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v67, (uint64_t)v68, v69);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)", a typo in config? (NumGroups|VocabSizes|MaxDimensions|EmbedDimensions|LearnRateCoef)", 86);
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
              }
              break;
            default:
              goto LABEL_177;
          }
          return;
        case 0x12:
          if ((_QWORD)v79 == 0x6E6569646172473CLL
            && *((_QWORD *)&v79 + 1) == 0x7079546D726F4E74
            && (unsigned __int16)v80 == 15973)
          {
            goto LABEL_136;
          }
          if (HIBYTE(v80) == 15)
            goto LABEL_122;
          if (HIBYTE(v80) == 14)
            goto LABEL_127;
          goto LABEL_86;
        default:
          goto LABEL_177;
      }
LABEL_92:
      kaldi::ReadBasicType<float>(a2, a3, v27);
    }
  }
  v41 = (_QWORD *)(a1 + 208);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), *(int *)(a1 + 200));
  if (*v10 >= 1)
  {
    v42 = 0;
    v43 = 0;
    do
    {
      v44 = operator new();
      *(_QWORD *)v44 = 0;
      *(_BYTE *)(v44 + 8) = 0;
      v45 = (kaldi::CompressedMatrix **)(*v41 + v42);
      __p = 0;
      v46 = *v45;
      *v45 = (kaldi::CompressedMatrix *)v44;
      if (v46)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v45, v46);
      v47 = (kaldi::CompressedMatrix *)__p;
      __p = 0;
      if (v47)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&__p, v47);
      kaldi::CompressedMatrix::Read(*(_QWORD *)(*v41 + v42), a2, a3, a4);
      ++v43;
      v42 += 8;
    }
    while (v43 < *v10);
  }
  kaldi::ExpectToken(a2, a3, "</Component>");
  v48 = *(_QWORD **)(a1 + 256);
  v49 = *(_QWORD **)(a1 + 264);
  while (v48 != v49)
  {
    if (*v48)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)*v48 + 8))(*v48);
      *v48 = 0;
    }
    ++v48;
  }
  if (*v8 && *v11 >= 1)
  {
    v50 = 0;
    v51 = (char **)(a1 + 256);
    do
    {
      kaldi::ExpectToken(a2, a3, "<FeatureTransform>");
      v52 = (const void *)kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v52
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"failed to read feature transform", 32);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__p);
      }
      v54 = v53;
      kaldi::ExpectToken(a2, a3, "</Component>");
      v56 = *(_QWORD **)(a1 + 264);
      v55 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v56 >= v55)
      {
        v58 = ((char *)v56 - *v51) >> 3;
        if ((unint64_t)(v58 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v59 = v55 - (_QWORD)*v51;
        v60 = v59 >> 2;
        if (v59 >> 2 <= (unint64_t)(v58 + 1))
          v60 = v58 + 1;
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFF8)
          v61 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v61 = v60;
        if (v61)
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v61);
        else
          v62 = 0;
        v63 = &v62[8 * v58];
        *(_QWORD *)v63 = v54;
        v57 = v63 + 8;
        v65 = *(char **)(a1 + 256);
        v64 = *(char **)(a1 + 264);
        if (v64 != v65)
        {
          do
          {
            v66 = *((_QWORD *)v64 - 1);
            v64 -= 8;
            *((_QWORD *)v63 - 1) = v66;
            v63 -= 8;
          }
          while (v64 != v65);
          v64 = *v51;
        }
        *(_QWORD *)(a1 + 256) = v63;
        *(_QWORD *)(a1 + 264) = v57;
        *(_QWORD *)(a1 + 272) = &v62[8 * v61];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v56 = v54;
        v57 = v56 + 1;
      }
      *(_QWORD *)(a1 + 264) = v57;
      ++v50;
    }
    while (v50 < *(_DWORD *)(a1 + 96));
  }
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  if (SHIBYTE(v80) < 0)
    operator delete((void *)v79);
}

void sub_1ADFEBF38(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::string __p;
  void *v7[2];
  uint64_t v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  kaldi::WriteToken(a2, a3, "<NumGroups>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<NumTables>");
  kaldi::WriteBasicType<int>(a2, a3);
  kaldi::WriteToken(a2, a3, "<VocabSizes>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 104), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<MaxItems>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 128), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<EmbedDimensions>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 152), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<AssignedTable>");
  kaldi::JoinVectorToString<int>((_QWORD *)(a1 + 176), ",", (uint64_t)v7);
  kaldi::WriteToken(a2, a3, (char *)v7);
  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 448), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<UseTransform>");
  kaldi::WriteBasicType<BOOL>(a2, a3, *(unsigned __int8 *)(a1 + 460));
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_1ADFEC174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WriteData(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t **v9;
  uint64_t *v10;
  _QWORD *result;
  uint64_t *v12;
  uint64_t *i;
  uint64_t v14;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a1 + 168))(a1, a2, a3);
  v8 = *(uint64_t ***)(a1 + 208);
  v9 = *(uint64_t ***)(a1 + 216);
  while (v8 != v9)
  {
    v10 = *v8++;
    kaldi::CompressedMatrix::Write(v10, a2, a3, a4);
  }
  result = kaldi::WriteToken(a2, a3, "</Component>");
  if (*(_BYTE *)(a1 + 460))
  {
    v12 = *(uint64_t **)(a1 + 256);
    for (i = *(uint64_t **)(a1 + 264); v12 != i; result = kaldi::WriteToken(a2, a3, "</Component>"))
    {
      kaldi::WriteToken(a2, a3, "<FeatureTransform>");
      v14 = *v12++;
      kaldi::nnet1::Component::Write(v14, a2, a3, a4);
    }
  }
  return result;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::NumParams(_QWORD *a1)
{
  uint64_t **v1;
  uint64_t **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;

  v1 = (uint64_t **)a1[26];
  v2 = (uint64_t **)a1[27];
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    LODWORD(v3) = 0;
    do
    {
      v4 = **v1;
      if (v4)
        LODWORD(v4) = *(_DWORD *)(v4 + 12) * *(_DWORD *)(v4 + 8);
      v3 = (v4 + v3);
      ++v1;
    }
    while (v1 != v2);
  }
  v5 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v5 != v6)
  {
    v7 = *v5++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 176))(v7) + v3;
  }
  return v3;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  _QWORD *i;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 1);
  v5 = (uint64_t **)a1[26];
  v6 = (uint64_t **)a1[27];
  if (v5 == v6)
  {
    v10 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      v9 = **v5;
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8);
      v17 = 0;
      v18 = 0;
      v10 = v9 + v7;
      v16 = (uint64_t)*a2 + 4 * v7;
      LODWORD(v17) = v9;
      kaldi::VectorBase<float>::CopyRowsFromMat((uint64_t)&v16, v8);
      ++v5;
      v7 = v10;
    }
    while (v5 != v6);
  }
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v12 = (_QWORD *)a1[32];
  for (i = (_QWORD *)a1[33]; v12 != i; ++v12)
  {
    (*(void (**)(_QWORD, uint64_t *))(*(_QWORD *)*v12 + 184))(*v12, &v16);
    v14 = 0;
    v15 = 0;
    v13 = (uint64_t)*a2 + 4 * v10;
    LODWORD(v14) = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v13, (const void **)&v16);
    v10 += v17;
  }
  kaldi::Vector<float>::Destroy((uint64_t)&v16);
}

void sub_1ADFEC450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t **v5;
  uint64_t **v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t *i;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check((uint64_t)a1);
  result = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  v5 = (uint64_t **)a1[26];
  v6 = (uint64_t **)a1[27];
  if (v5 == v6)
  {
    v10 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *v5;
      v9 = **v5;
      if (v9)
        LODWORD(v9) = *(_DWORD *)(v9 + 12) * *(_DWORD *)(v9 + 8);
      v17 = 0;
      v18 = 0;
      v10 = v9 + v7;
      v16 = (char *)(*a2 + 4 * v7);
      LODWORD(v17) = v9;
      result = kaldi::CompressedMatrix::CopyRowsFromVec<float>(v8, &v16);
      ++v5;
      v7 = v10;
    }
    while (v5 != v6);
  }
  v12 = (uint64_t *)a1[32];
  for (i = (uint64_t *)a1[33]; v12 != i; v10 = v15)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v12 + 176))(*v12);
    v14 = *v12++;
    v17 = 0;
    v18 = 0;
    v15 = v13 + v10;
    v16 = (char *)(*a2 + 4 * v10);
    LODWORD(v17) = v13;
    result = (*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v14 + 192))(v14, &v16);
  }
  return result;
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SumParams(_QWORD *a1)
{
  kaldi::CompressedMatrix **v2;
  kaldi::CompressedMatrix **v3;
  float v4;
  kaldi::CompressedMatrix *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;

  v2 = (kaldi::CompressedMatrix **)a1[26];
  v3 = (kaldi::CompressedMatrix **)a1[27];
  v4 = 0.0;
  while (v2 != v3)
  {
    v5 = *v2++;
    v4 = v4 + kaldi::CompressedMatrix::Sum(v5);
  }
  v7 = (uint64_t *)a1[32];
  v6 = (uint64_t *)a1[33];
  while (v7 != v6)
  {
    v8 = *v7++;
    v4 = v4 + (*(float (**)(uint64_t))(*(_QWORD *)v8 + 208))(v8);
  }
  return v4;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PerturbParams()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Info(_QWORD *a1)
{
  kaldi::nnet1 **v2;
  kaldi::nnet1 **i;
  _QWORD *v4;
  const kaldi::CompressedMatrix *v5;
  void *p_p;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t v14;
  void *__p;
  uint64_t v17;
  unsigned __int8 v18;
  _QWORD v19[11];
  char v20;
  uint64_t v21;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  (*(void (**)(_QWORD *, _QWORD *, _QWORD))(*a1 + 168))(a1, v19, 0);
  v2 = (kaldi::nnet1 **)a1[26];
  for (i = (kaldi::nnet1 **)a1[27]; v2 != i; ++v2)
  {
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Embedding Table: ", 21);
    kaldi::nnet1::MomentStatistics((uint64_t *)&__p, *v2, v5);
    if ((v18 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v18 & 0x80u) == 0)
      v7 = v18;
    else
      v7 = v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v7);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  v8 = a1[32];
  for (j = a1[33]; v8 != j; v8 += 8)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"\n## Feature Transform: input-dim ", 33);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)", output-dim ", 13);
    v11 = (_QWORD *)std::ostream::operator<<();
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"\n", 1);
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v8 + 64))(&__p);
    if ((v18 & 0x80u) == 0)
      v13 = &__p;
    else
      v13 = __p;
    if ((v18 & 0x80u) == 0)
      v14 = v18;
    else
      v14 = v17;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v13, v14);
    if ((char)v18 < 0)
      operator delete(__p);
  }
  std::stringbuf::str();
  v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v19[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v20 < 0)
    operator delete((void *)v19[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v21);
}

void sub_1ADFEC838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::MomentStatistics(kaldi::nnet1 *this, const kaldi::CompressedMatrix *a2)
{
  int v2;
  int v3;
  void *v5[3];
  _BYTE v6[40];

  kaldi::Matrix<float>::Matrix(v6, this);
  v2 = kaldi::MatrixBase<float>::NumRows((uint64_t)v6);
  v3 = kaldi::MatrixBase<float>::NumCols((uint64_t)v6);
  memset(v5, 0, sizeof(v5));
  kaldi::Vector<float>::Resize(v5, (v3 * v2), 0);
  kaldi::VectorBase<float>::CopyRowsFromMat(v5, (uint64_t)v6);
  kaldi::nnet1::MomentStatistics<float>((uint64_t)v5);
  kaldi::Vector<float>::Destroy((uint64_t)v5);
  return kaldi::Matrix<float>::~Matrix((uint64_t)v6);
}

void sub_1ADFEC900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  kaldi::Vector<float>::Destroy((uint64_t)&a9);
  kaldi::Matrix<float>::~Matrix((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InfoGradient(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"No intermediate gradients for embedding tables, here is the gradient info for the transforms: ", 94);
  v2 = *(_QWORD *)(a1 + 256);
  for (i = *(_QWORD *)(a1 + 264); v2 != i; v2 += 8)
  {
    (*(void (**)(void **__return_ptr))(**(_QWORD **)v2 + 72))(__p);
    if ((v9 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v9 & 0x80u) == 0)
      v5 = v9;
    else
      v5 = (uint64_t)__p[1];
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"\n", 1);
    if ((char)v9 < 0)
      operator delete(__p[0]);
  }
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADFECA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  std::ostringstream::~ostringstream((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetTrainOptions(uint64_t result, uint64_t a2)
{
  __int128 v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v6;

  v2 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(result + 71) = *(_OWORD *)(a2 + 23);
  *(_OWORD *)(result + 56) = v2;
  v3 = *(uint64_t **)(result + 256);
  for (i = *(uint64_t **)(result + 264);
        v3 != i;
        result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 264))(v6, a2))
  {
    v6 = *v3++;
  }
  return result;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x2_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unsigned int v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int32x2_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];
  void *v33;
  _QWORD v34[4];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  v6 = *(int32x2_t *)(a3 + 32);
  v7 = *(unsigned int *)(a2 + 20);
  kaldi::CuMatrixBase<float>::SetZero(a3);
  if (*(_BYTE *)(a1 + 460))
  {
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 280), *(int *)(a1 + 96));
    v8 = *(int *)(a1 + 96);
    if ((int)v8 > 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = 0;
      do
      {
        v12 = (int32x2_t *)(*(_QWORD *)(a1 + 280) + v9);
        v12[4] = v6;
        kaldi::CuMatrix<float>::Resize(v12, v7, *(unsigned int *)(*(_QWORD *)(a1 + 152) + 4 * v10), 0, 0);
        v13 = *(_QWORD *)(a1 + 280) + v9;
        v14 = *(uint64_t **)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v10));
        v15 = *(_QWORD *)(a2 + 8) + 4 * v11;
        v16 = *(_DWORD *)(a2 + 28) - v11;
        v17 = *(_QWORD *)(a2 + 32);
        LODWORD(v34[1]) = *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v10);
        *(_QWORD *)((char *)&v34[1] + 4) = *(_QWORD *)(a2 + 20);
        HIDWORD(v34[2]) = v16;
        v34[3] = v17;
        v33 = &unk_1E5D29D40;
        v34[0] = v15;
        kaldi::CuMatrixBase<float>::SummarizeVec(v13, v14, (uint64_t)&v33);
        v33 = &unk_1E5D29D40;
        memset(v34, 0, sizeof(v34));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
        v11 += *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v10++);
        v8 = *(int *)(a1 + 96);
        v9 += 48;
      }
      while (v10 < v8);
    }
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 304), v8);
    if (*(int *)(a1 + 96) >= 1)
    {
      v18 = 0;
      v19 = 0;
      do
      {
        v20 = (int32x2_t *)(*(_QWORD *)(a1 + 304) + v18);
        v20[4] = v6;
        kaldi::nnet1::Component::Propagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v19), *(_QWORD *)(a1 + 280) + v18, v20, 0);
        kaldi::CuMatrixBase<float>::AddMat(a3, *(_QWORD *)(a1 + 304) + v18, 111, 1.0, 1.0);
        ++v19;
        v18 += 48;
      }
      while (v19 < *(int *)(a1 + 96));
    }
  }
  else if (*(int *)(a1 + 96) >= 1)
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v24 = *(_QWORD *)(a1 + 152);
    v25 = *(_QWORD *)(a1 + 128);
    do
    {
      v26 = *(_QWORD *)(a3 + 8) + 4 * v22;
      v27 = *(_DWORD *)(a3 + 28) - v22;
      v28 = *(_QWORD *)(a3 + 32);
      LODWORD(v34[1]) = *(_DWORD *)(v24 + 4 * v21);
      *(_QWORD *)((char *)&v34[1] + 4) = *(_QWORD *)(a3 + 20);
      HIDWORD(v34[2]) = v27;
      v34[3] = v28;
      v33 = &unk_1E5D29D40;
      v34[0] = v26;
      v29 = *(uint64_t **)(*(_QWORD *)(a1 + 208) + 8 * *(int *)(*(_QWORD *)(a1 + 176) + 4 * v21));
      v30 = *(_QWORD *)(a2 + 8) + 4 * v23;
      LODWORD(v26) = *(_DWORD *)(a2 + 28) - v23;
      v31 = *(_QWORD *)(a2 + 32);
      LODWORD(v32[2]) = *(_DWORD *)(v25 + 4 * v21);
      *(_QWORD *)((char *)&v32[2] + 4) = *(_QWORD *)(a2 + 20);
      HIDWORD(v32[3]) = v26;
      v32[4] = v31;
      v32[0] = &unk_1E5D29D40;
      v32[1] = v30;
      kaldi::CuMatrixBase<float>::SummarizeVec((uint64_t)&v33, v29, (uint64_t)v32);
      v32[0] = &unk_1E5D29D40;
      memset(&v32[1], 0, 32);
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)v32);
      v33 = &unk_1E5D29D40;
      memset(v34, 0, sizeof(v34));
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v33);
      v24 = *(_QWORD *)(a1 + 152);
      v22 += *(_DWORD *)(v24 + 4 * v21);
      v25 = *(_QWORD *)(a1 + 128);
      v23 += *(_DWORD *)(v25 + 4 * v21++);
    }
    while (v21 < *(int *)(a1 + 96));
  }
}

void sub_1ADFECDCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _OWORD *v14;
  _OWORD *v15;

  a9 = &unk_1E5D29D40;
  *v15 = 0u;
  v15[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  a14 = &unk_1E5D29D40;
  *v14 = 0u;
  v14[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::SetGradientNormalization(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD v9[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  v6 = *(uint64_t **)(a1 + 256);
  v7 = *(uint64_t **)(a1 + 264);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, uint64_t, float))(*(_QWORD *)v8 + 240))(v8, a2, a3);
  }
  if ((_DWORD)a2 == 3)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"RMSPROP is not implemented in word multi embedding yet", 54);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    }
  }
  else
  {
    *(float *)(a1 + 452) = a3;
    *(_DWORD *)(a1 + 448) = a2;
  }
}

void sub_1ADFECEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

float kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetNormalizedLearningRate(uint64_t a1)
{
  int v1;

  if (!*(_BYTE *)(a1 + 84))
    return *(float *)(a1 + 56);
  v1 = *(_DWORD *)(a1 + 464);
  if (v1 < 1)
    return NAN;
  else
    return *(float *)(a1 + 56) / (float)v1;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::AccumGradients()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::UpdateWeights()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Not implemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetGradient(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t v26;
  __int128 v27;
  __int128 v28;
  char v29;

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::Check(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v8, 1);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  v28 = 0u;
  v27 = 0u;
  v26 = (int32x2_t)&unk_1E5D34170;
  v29 = 0;
  kaldi::nnet1::Component::Propagate((_DWORD *)v9, a2, &v26, 0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v9 + 232))(v9, a2, a3, 0, 0);
  v10 = *(uint64_t **)(v9 + 232);
  v11 = *(uint64_t **)(v9 + 240);
  if (v10 == v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = 0;
    do
    {
      v13 = *v10;
      v14 = *(_DWORD *)(*v10 + 16) * *(_DWORD *)(*v10 + 20);
      v24 = 0;
      v25 = 0;
      v23 = (uint64_t)*a4 + 4 * v12;
      LODWORD(v24) = v14;
      kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v23, v13);
      v12 += v14;
      ++v10;
    }
    while (v10 != v11);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(_BYTE *)(a1 + 460))
  {
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
    kaldi::nnet1::Component::Propagate((_DWORD *)v15, a2, &v26, 0);
    v23 = 0;
    v24 = 0;
    v25 = 0;
    if (*(int *)(a1 + 96) < 1)
    {
      if (!v15)
      {
LABEL_13:
        kaldi::Vector<float>::Destroy((uint64_t)&v23);
        return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
      }
    }
    else
    {
      v16 = 0;
      v17 = 0;
      do
      {
        v18 = *(_QWORD *)(*(_QWORD *)(v15 + 256) + 8 * v17);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v18 + 224))(v18, *(_QWORD *)(v15 + 280) + v16, a3, &v23);
        v21 = 0;
        v22 = 0;
        v20 = (uint64_t)*a4 + 4 * v12;
        LODWORD(v21) = v24;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v20, (const void **)&v23);
        v12 += v24;
        ++v17;
        v16 += 48;
      }
      while (v17 < *(int *)(a1 + 96));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    goto LABEL_13;
  }
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v26);
}

void sub_1ADFED1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::CountZeroCorr(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs((_QWORD *)a1);
  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "Not implemented yet when transforms are used");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v15);
  }
  *a3 = 0;
  v6 = *(char **)(a1 + 208);
  v7 = *(char **)(a1 + 216);
  v8 = v7 - v6;
  if (v7 != v6)
  {
    v9 = 0;
    v10 = v8 >> 3;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      v11 = **(_QWORD **)v6;
      if (v11)
        LODWORD(v11) = *(_DWORD *)(v11 + 12) * *(_DWORD *)(v11 + 8);
      v9 += v11;
      *a3 = v9;
      v6 += 8;
      --v10;
    }
    while (v10);
  }
  v12 = *(_QWORD *)(a1 + 232);
  v13 = *(_QWORD *)(a1 + 240);
  *a2 = 0;
  if (v13 != v12)
  {
    v14 = 0;
    do
    {
      *a3 += kaldi::CuMatrixBase<float>::CountZeros(*(_QWORD *)(v12 + 8 * v14++));
      v12 = *(_QWORD *)(a1 + 232);
    }
    while (v14 < (*(_QWORD *)(a1 + 240) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::EnsureCorrs(_QWORD *a1)
{
  _QWORD *v1;
  unint64_t v2;
  unint64_t v4;
  int32x2_t *v5;
  int32x2_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = a1 + 29;
  v2 = (uint64_t)(a1[27] - a1[26]) >> 3;
  if (v2 != (uint64_t)(a1[30] - a1[29]) >> 3)
  {
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)(a1 + 29), v2);
    if (a1[27] != a1[26])
    {
      v4 = 0;
      do
      {
        v5 = (int32x2_t *)operator new();
        v6 = v5;
        v7 = **(_QWORD **)(a1[26] + 8 * v4);
        if (v7)
        {
          v8 = *(unsigned int *)(v7 + 8);
          v9 = *(unsigned int *)(v7 + 12);
        }
        else
        {
          v8 = 0;
          v9 = 0;
        }
        kaldi::CuMatrix<float>::CuMatrix(v5, v8, v9, 0, 0, 0);
        v10 = *(_QWORD *)(*v1 + 8 * v4);
        *(_QWORD *)(*v1 + 8 * v4) = v6;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
        ++v4;
      }
      while (v4 < (uint64_t)(a1[27] - a1[26]) >> 3);
    }
  }
}

void sub_1ADFED3E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C40CC61A6CELL);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::VectorizeWeightsCorrs()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::IsUpdatable()
{
  return 0;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::GetType()
{
  return 272;
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::GetType()
{
  return 270;
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::PerturbParams(_QWORD *a1, float a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t i;
  int v7;
  uint64_t *v8;
  uint64_t *j;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  __int128 v15;
  int v16;
  char v17;
  int v18;
  uint64_t v19;
  _QWORD v20[4];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check((uint64_t)a1);
  v20[0] = &unk_1E5D341C8;
  memset(&v20[1], 0, 24);
  v16 = 1729;
  v4 = 5489;
  v17 = 0;
  v18 = 5489;
  v5 = 1;
  for (i = 3; i != 626; ++i)
  {
    v7 = 1812433253 * (v4 ^ (v4 >> 30));
    v4 = v7 + v5;
    *(&v16 + i) = i + v7 - 2;
    ++v5;
  }
  v19 = 0;
  v8 = (uint64_t *)a1[26];
  for (j = (uint64_t *)a1[27]; v8 != j; ++v8)
  {
    kaldi::CuVector<float>::Resize((uint64_t)v20, (*(_DWORD *)(*v8 + 16) * *(_DWORD *)(*v8 + 20)), 1);
    kaldi::CuRandom::RandGauss<float>(&v16, (uint64_t)v20, 0.0, 1.0);
    v10 = *v8;
    kaldi::CuSubMatrix<float>::CuSubMatrix((uint64_t)&v13, (uint64_t)v20, *(_DWORD *)(*v8 + 20));
    kaldi::CuMatrixBase<float>::AddMat(v10, (uint64_t)&v13, 111, a2, 1.0);
    v13 = &unk_1E5D29D40;
    v14 = 0u;
    v15 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v13);
  }
  v12 = (_QWORD *)a1[32];
  v11 = (_QWORD *)a1[33];
  while (v12 != v11)
  {
    (*(void (**)(_QWORD, float))(*(_QWORD *)*v12 + 216))(*v12, a2);
    ++v12;
  }
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v16);
  v20[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v20);
}

void sub_1ADFED5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuVector<float>::~CuVector((_QWORD *)(v7 - 128));
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  int32x2_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  int32x2_t *v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  float v24;
  int v25;
  float v26;
  int v27;
  float v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int32x2_t *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  int32x2_t *v41;
  void *v42;
  _QWORD v43[4];
  void *v44;
  _OWORD v45[2];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::Check(a1);
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  v10 = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 464) = v10;
  std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(a1 + 328), *(int *)(a1 + 96));
  if (*(_BYTE *)(a1 + 460) && *(int *)(a1 + 96) >= 1)
  {
    v11 = 0;
    v12 = 0;
    do
    {
      v13 = (int32x2_t *)(*(_QWORD *)(a1 + 328) + v11);
      v13[4] = (int32x2_t)a4;
      kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(_QWORD *)(a1 + 256) + 8 * v12), *(_QWORD *)(a1 + 280) + v11, *(_QWORD *)(a1 + 304) + v11, a3, v13, a5);
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8 * v12);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 232))(v14, *(_QWORD *)(a1 + 280) + v11, a3, a4, a5);
      ++v12;
      v11 += 48;
    }
    while (v12 < *(int *)(a1 + 96));
  }
  if (*(int *)(a1 + 80) > 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v44);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v44, "WordMultiVecComponent doesn't support multi-batches yet");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v44);
  }
  memset(v45, 0, sizeof(v45));
  v44 = &unk_1E5D29D40;
  v15 = *(_QWORD *)(a1 + 232);
  if (*(_QWORD *)(a1 + 240) != v15)
  {
    v16 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::SetZero(*(_QWORD *)(v15 + 8 * v16++));
      v15 = *(_QWORD *)(a1 + 232);
    }
    while (v16 < (*(_QWORD *)(a1 + 240) - v15) >> 3);
  }
  v38 = a3;
  if (*(int *)(a1 + 96) >= 1)
  {
    v17 = 0;
    v40 = 0;
    v18 = 0;
    v41 = (int32x2_t *)(a1 + 352);
    v19 = (float)v10;
    v37 = (int32x2_t *)(a1 + 400);
    v39 = a4;
    do
    {
      if (*(_BYTE *)(a1 + 460))
      {
        v20 = (int32x2_t *)(*(_QWORD *)(a1 + 328) + 48 * v17);
      }
      else
      {
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v17);
        v22 = *(_DWORD *)(v38 + 28) - v40;
        v23 = *(_QWORD *)(v38 + 32);
        *(_QWORD *)&v45[0] = *(_QWORD *)(v38 + 8) + 4 * v40;
        DWORD2(v45[0]) = v21;
        *(_QWORD *)((char *)v45 + 12) = *(_QWORD *)(v38 + 20);
        DWORD1(v45[1]) = v22;
        *((_QWORD *)&v45[1] + 1) = v23;
        v42 = &unk_1E5D29D40;
        memset(v43, 0, sizeof(v43));
        quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
        v40 += *(_DWORD *)(*(_QWORD *)(a1 + 152) + 4 * v17);
        v20 = (int32x2_t *)&v44;
      }
      v24 = *(float *)(a1 + 452);
      if (v24 > 0.0)
      {
        *(_QWORD *)(a1 + 384) = a4;
        kaldi::CuMatrix<float>::operator=(v41, v20);
        v25 = *(_DWORD *)(a1 + 448);
        if (v25 == 2)
        {
          v27 = *(unsigned __int8 *)(a1 + 84);
          *(_QWORD *)(a1 + 432) = a4;
          kaldi::CuMatrix<float>::Resize(v37, *(unsigned int *)(a1 + 372), *(unsigned int *)(a1 + 368), 1, 0);
          if (v27)
            v28 = v19;
          else
            v28 = 1.0;
          v20 = (int32x2_t *)(a1 + 352);
          kaldi::nnet1::UpdatableComponent::LimitL2NormGradient((uint64_t)v41, (int *)v37, v24 * v28);
        }
        else
        {
          v20 = (int32x2_t *)(a1 + 352);
          if (v25 == 1)
          {
            if (*(_BYTE *)(a1 + 84))
              v26 = v19;
            else
              v26 = 1.0;
            v20 = (int32x2_t *)(a1 + 352);
            kaldi::nnet1::UpdatableComponent::ClipGradient((uint64_t)v41, v24 * v26);
          }
        }
      }
      v29 = *(int *)(*(_QWORD *)(a1 + 176) + 4 * v17);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v29) + 32) = a4;
      if (*(int *)(*(_QWORD *)(a1 + 128) + 4 * v17) >= 1)
      {
        v30 = 0;
        v31 = 4 * v18;
        v32 = -v18;
        do
        {
          v33 = *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v29);
          v34 = *(_QWORD *)(a2 + 8) + v31;
          v35 = v32 + *(_DWORD *)(a2 + 28);
          v36 = *(_QWORD *)(a2 + 32);
          LODWORD(v43[1]) = 1;
          *(_QWORD *)((char *)&v43[1] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v43[2]) = v35;
          v43[3] = v36;
          v42 = &unk_1E5D29D40;
          v43[0] = v34;
          kaldi::CuMatrixBase<float>::AddIndexedRows(v33, (uint64_t)&v42, (uint64_t)v20, 1.0);
          v42 = &unk_1E5D29D40;
          memset(v43, 0, sizeof(v43));
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v42);
          ++v30;
          v31 += 4;
          --v32;
        }
        while (v30 < *(_DWORD *)(*(_QWORD *)(a1 + 128) + 4 * v17));
        v18 += v30;
        a4 = v39;
      }
      ++v17;
    }
    while (v17 < *(int *)(a1 + 96));
  }
  v44 = &unk_1E5D29D40;
  memset(v45, 0, sizeof(v45));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v44);
}

void sub_1ADFEDA38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _OWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  a24 = &unk_1E5D29D40;
  *a10 = 0u;
  a10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a24);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::UpdateWeights(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[34];

  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  v6 = *(float *)(a1 + 72);
  v7 = *(_DWORD *)(a1 + 76);
  if (v6 > 0.0 && *(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Using transform with gradient compression is not supported yet");
    goto LABEL_19;
  }
  v8 = *(uint64_t **)(a1 + 256);
  v9 = *(uint64_t **)(a1 + 264);
  while (v8 != v9)
  {
    v10 = *v8++;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 256))(v10, a2, a3);
  }
  v11 = *(float *)(a1 + 56);
  if (*(_BYTE *)(a1 + 84))
    v11 = v11 / (float)*(int *)(a1 + 464);
  if (v6 > 0.0)
  {
    if (*(int *)(a1 + 80) < 2)
    {
      if (*(_QWORD *)(a1 + 480) == *(_QWORD *)(a1 + 472))
        kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
      kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::QuantizerResidualAggregator *)(a1 + 472), v7, v6);
      goto LABEL_13;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "the multi batch gradient quantization does not work yet");
LABEL_19:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v12)
  {
    v13 = 0;
    do
    {
      kaldi::CuMatrixBase<float>::AddMat(*(_QWORD *)(v12 + 8 * v13), *(_QWORD *)(*(_QWORD *)(a1 + 232) + 8 * v13), 111, *(float *)(a1 + 456) * (float)-v11, 1.0);
      ++v13;
      v12 = *(_QWORD *)(a1 + 208);
    }
    while (v13 < (*(_QWORD *)(a1 + 216) - v12) >> 3);
  }
}

void kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[34];

  if (*(_BYTE *)(a1 + 460))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "Not implemented yet when transforms are used");
    goto LABEL_24;
  }
  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "Weights are already vectorized");
LABEL_24:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v24);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Performing vectorization of WordMultiVecComponent", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v24);
  }
  v8 = *(_QWORD *)(a1 + 208);
  if (*(_QWORD *)(a1 + 216) != v8)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(v8 + v9), a2, v24);
      v11 = *(_QWORD *)(a1 + 208);
      v12 = v24[0];
      v24[0] = 0;
      v13 = *(_QWORD *)(v11 + v9);
      *(_QWORD *)(v11 + v9) = v12;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
      v14 = v24[0];
      v24[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 24))(v14);
      ++v10;
      v8 = *(_QWORD *)(a1 + 208);
      v9 += 8;
    }
    while (v10 < (*(_QWORD *)(a1 + 216) - v8) >> 3);
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  v16 = *(_QWORD *)(a3 + 8);
  v24[0] = (uint64_t)&unk_1E5D29D70;
  v24[1] = v16;
  v24[3] = *(_QWORD *)(a3 + 24);
  v24[2] = v15;
  kaldi::CuVectorBase<float>::Set((uint64_t)v24, *(float *)(a1 + 456));
  v17 = *(_DWORD *)(a3 + 16) - v15;
  *(_QWORD *)(a3 + 8) += 4 * (int)v15;
  *(_DWORD *)(a3 + 16) = v17;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::EnsureCorrs((_QWORD *)a1);
  if (a4[1] - *a4 != 32)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v24, "veccorrs->size() == 1");
    goto LABEL_24;
  }
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v18 = 0;
    v19 = 0;
    do
    {
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 232) + v18), *a4, v24);
      v20 = *(_QWORD *)(a1 + 232);
      v21 = v24[0];
      v24[0] = 0;
      v22 = *(_QWORD *)(v20 + v18);
      *(_QWORD *)(v20 + v18) = v21;
      if (v22)
        (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
      v23 = v24[0];
      v24[0] = 0;
      if (v23)
        (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
      ++v19;
      v18 += 8;
    }
    while (v19 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Done  vectorization of WordMultiVecComponent", 44);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v24);
  }
}

void sub_1ADFEDE88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CuMatrixBase<float>>::IsUpdatable()
{
  return 1;
}

uint64_t std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(uint64_t a1, int32x2_t *a2, int32x2_t *a3, unint64_t a4)
{
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  int32x2_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;

  v8 = a1 + 16;
  v9 = *(int32x2_t **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) < a4)
  {
    std::vector<kaldi::CuMatrix<float>>::__vdeallocate((void **)a1);
    if (a4 > 0x555555555555555)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, (uint64_t)a2, (uint64_t)a3, *(_QWORD *)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4) < a4)
  {
    v13 = &a2[2 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 4)];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, v13, v9);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<kaldi::CuMatrix<float>>,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v8, (uint64_t)v13, (uint64_t)a3, *(_QWORD *)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = result;
    return result;
  }
  result = (uint64_t)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,kaldi::CuMatrix<float> *,0>(a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD **)(a1 + 8);
  if (v16 != v14)
  {
    v17 = v16 - 6;
    v18 = v16 - 6;
    do
    {
      v19 = *v18;
      v18 -= 6;
      result = (*(uint64_t (**)(_QWORD *))(v19 + 16))(v17);
      v20 = v17 == v15;
      v17 = v18;
    }
    while (!v20);
  }
  *(_QWORD *)(a1 + 8) = v15;
  return result;
}

void sub_1ADFEE02C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADFEE034(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<kaldi::CuMatrix<float>>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  BOOL v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      v5 = v3 - 48;
      v6 = v3 - 48;
      do
      {
        v7 = *(_QWORD *)v6;
        v6 -= 48;
        (*(void (**)(char *))(v7 + 16))(v5);
        v8 = v5 == v1;
        v5 = v6;
      }
      while (!v8);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::WordMultiVecComponent<kaldi::CuMatrixBase<float>>(uint64_t a1, uint64_t a2)
{
  int v4;
  char **v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  kaldi::CompressedMatrix **v25;
  kaldi::CompressedMatrix *v26;
  kaldi::CompressedMatrix *v27;
  kaldi::CompressedMatrix *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  kaldi::CompressedMatrix *v33;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &off_1E5D2D150;
  *(_OWORD *)(a1 + 56) = xmmword_1AE13F660;
  *(_DWORD *)(a1 + 72) = -1082130432;
  *(_QWORD *)(a1 + 76) = 0x100000003;
  *(_WORD *)(a1 + 84) = 0;
  *(_BYTE *)(a1 + 86) = 0;
  *(_QWORD *)(a1 + 88) = &unk_1E5D2ED80;
  *(_QWORD *)a1 = &unk_1E5D2EC50;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), (uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 2);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 128), *(const void **)(a2 + 128), *(_QWORD *)(a2 + 136), (uint64_t)(*(_QWORD *)(a2 + 136) - *(_QWORD *)(a2 + 128)) >> 2);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 152), *(const void **)(a2 + 152), *(_QWORD *)(a2 + 160), (uint64_t)(*(_QWORD *)(a2 + 160) - *(_QWORD *)(a2 + 152)) >> 2);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 176), *(const void **)(a2 + 176), *(_QWORD *)(a2 + 184), (uint64_t)(*(_QWORD *)(a2 + 184) - *(_QWORD *)(a2 + 176)) >> 2);
  v4 = *(_DWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 200) = v4;
  v5 = (char **)(a1 + 256);
  v32 = a1 + 280;
  *(_QWORD *)(a1 + 352) = &unk_1E5D34170;
  v30 = a1 + 328;
  v31 = a1 + 304;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_QWORD *)(a1 + 400) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_BYTE *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_OWORD *)(a1 + 488) = 0u;
  v6 = *(unsigned __int8 *)(a2 + 460);
  *(_BYTE *)(a1 + 460) = v6;
  if (v6 && *(int *)(a1 + 96) >= 1)
  {
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(*(_QWORD *)(a2 + 256) + 8 * v7);
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
      v10 = v9;
      v12 = *(uint64_t **)(a1 + 264);
      v11 = *(_QWORD *)(a1 + 272);
      if ((unint64_t)v12 >= v11)
      {
        v14 = ((char *)v12 - *v5) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = v11 - (_QWORD)*v5;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 272, v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v10;
        v13 = v19 + 1;
        v21 = *(char **)(a1 + 256);
        v20 = *(char **)(a1 + 264);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v5;
        }
        *(_QWORD *)(a1 + 256) = v19;
        *(_QWORD *)(a1 + 264) = v13;
        *(_QWORD *)(a1 + 272) = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12 = v9;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a1 + 264) = v13;
      ++v7;
    }
    while (v7 < *(int *)(a1 + 96));
  }
  if (v32 != a2 + 280)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v32, *(int32x2_t **)(a2 + 280), *(int32x2_t **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 4));
  if (v31 != a2 + 304)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v31, *(int32x2_t **)(a2 + 304), *(int32x2_t **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 4));
  if (v30 != a2 + 328)
    std::vector<kaldi::CuMatrix<float>>::__assign_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>(v30, *(int32x2_t **)(a2 + 328), *(int32x2_t **)(a2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 336) - *(_QWORD *)(a2 + 328)) >> 4));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 352), (int32x2_t *)(a2 + 352));
  kaldi::CuMatrix<float>::operator=((int32x2_t *)(a1 + 400), (int32x2_t *)(a2 + 400));
  *(_DWORD *)(a1 + 448) = *(_DWORD *)(a2 + 448);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(a2 + 452);
  *(_DWORD *)(a1 + 456) = *(_DWORD *)(a2 + 456);
  *(_DWORD *)(a1 + 464) = *(_DWORD *)(a2 + 464);
  std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::resize((uint64_t *)(a1 + 208), (uint64_t)(*(_QWORD *)(a2 + 216) - *(_QWORD *)(a2 + 208)) >> 3);
  if (*(_QWORD *)(a1 + 216) != *(_QWORD *)(a1 + 208))
  {
    v23 = 0;
    v24 = 0;
    do
    {
      kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>(*(_QWORD *)(*(_QWORD *)(a2 + 208) + v23), (uint64_t *)&v33);
      v25 = (kaldi::CompressedMatrix **)(*(_QWORD *)(a1 + 208) + v23);
      v26 = v33;
      v33 = 0;
      v27 = *v25;
      *v25 = v26;
      if (v27)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v25, v27);
      v28 = v33;
      v33 = 0;
      if (v28)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)&v33, v28);
      ++v24;
      v23 += 8;
    }
    while (v24 < (uint64_t)(*(_QWORD *)(a1 + 216) - *(_QWORD *)(a1 + 208)) >> 3);
  }
  if (*(_QWORD *)(a2 + 480) != *(_QWORD *)(a2 + 472))
    kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::InitResidualAggregator(a1, (uint64_t *)(a1 + 472));
  *(_BYTE *)(a1 + 544) = *(_BYTE *)(a2 + 544);
  return a1;
}

void sub_1ADFEE4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, quasar::Bitmap *a13, kaldi::nnet1::QuantizerResidualAggregator *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  kaldi::nnet1::UpdatableComponent *v20;
  void *v22;
  void *v23;
  void *v24;

  v22 = *a10;
  if (*a10)
  {
    *((_QWORD *)v20 + 20) = v22;
    operator delete(v22);
  }
  v23 = *a11;
  if (*a11)
  {
    *((_QWORD *)v20 + 17) = v23;
    operator delete(v23);
  }
  v24 = *a12;
  if (*a12)
  {
    *((_QWORD *)v20 + 14) = v24;
    operator delete(v24);
  }
  quasar::Bitmap::~Bitmap(a13);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v20);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::WordMultiVecComponent<kaldi::CompressedMatrix>::ConstructMatrixObject<kaldi::CuMatrixBase<float>>@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = kaldi::CompressedMatrix::CompressedMatrix<float>(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1ADFEE640(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10C0C40E6EFC850);
  _Unwind_Resume(a1);
}

uint64_t kaldi::CompressedMatrix::CompressedMatrix<float>(uint64_t a1, uint64_t a2)
{
  float *v4[5];

  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 0;
  kaldi::Matrix<float>::Matrix<float>((uint64_t)v4, a2, 111);
  kaldi::CompressedMatrix::CopyFromMat<float>(a1, v4);
  kaldi::Matrix<float>::~Matrix((uint64_t)v4);
  return a1;
}

void sub_1ADFEE6B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (kaldi::CompressedMatrix **)*v2);
    operator delete(**a1);
  }
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__base_destruct_at_end[abi:ne180100](uint64_t a1, kaldi::CompressedMatrix **a2)
{
  kaldi::CompressedMatrix **v4;
  kaldi::CompressedMatrix **v5;
  kaldi::CompressedMatrix *v6;

  v4 = *(kaldi::CompressedMatrix ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 1;
    do
    {
      v6 = *v5;
      *v5 = 0;
      if (v6)
        std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v5, v6);
    }
    while (v5-- != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 3);
    if (v9 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    v11 = v5 - *a1;
    if (v11 >> 2 > v9)
      v9 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[8 * v10];
    v17 = &v13[8 * v12];
    bzero(v15, 8 * a2);
    v16 = &v15[8 * a2];
    std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(a1, &v14);
    std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)&v14);
  }
}

void sub_1ADFEE854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unique_ptr<kaldi::CompressedMatrix>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v8 = (_QWORD *)(a7 - 8);
    v9 = (_QWORD *)(a7 - 8);
    do
    {
      v10 = *--a3;
      *a3 = 0;
      *v9-- = v10;
      *((_QWORD *)&v16 + 1) = v8;
      v7 -= 8;
      v8 = v9;
    }
    while (a3 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::unique_ptr<kaldi::CompressedMatrix>>,std::reverse_iterator<std::unique_ptr<kaldi::CompressedMatrix>*>>::operator()[abi:ne180100](uint64_t a1)
{
  kaldi::CompressedMatrix **v1;
  kaldi::CompressedMatrix **v2;
  kaldi::CompressedMatrix *v3;

  v1 = *(kaldi::CompressedMatrix ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(kaldi::CompressedMatrix ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *v1;
    *v1 = 0;
    if (v3)
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100]((int)v1, v3);
    ++v1;
  }
}

uint64_t std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::unique_ptr<kaldi::CompressedMatrix>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  kaldi::CompressedMatrix *v5;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    v5 = *(kaldi::CompressedMatrix **)(i - 8);
    *(_QWORD *)(i - 8) = 0;
    if (v5)
      std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](i - 8, v5);
  }
}

void std::default_delete<kaldi::CompressedMatrix>::operator()[abi:ne180100](int a1, kaldi::CompressedMatrix *this)
{
  if (this)
  {
    kaldi::CompressedMatrix::Destroy(this);
    JUMPOUT(0x1AF44D190);
  }
}

_QWORD *kaldi::WriteBasicType<BOOL>(_QWORD *a1, char a2, int a3)
{
  const char *v5;
  _QWORD *result;
  _QWORD v7[34];

  if (a3)
    v5 = "T";
  else
    v5 = "F";
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)v5, 1);
  if ((a2 & 1) == 0)
    result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)" ", 1);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v7, "Write failure in WriteBasicType<BOOL>");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  return result;
}

uint64_t kaldi::ReadBasicType<BOOL>(_QWORD *a1, char a2, char *a3)
{
  int v4;
  char v5;
  _QWORD *v7;
  _QWORD *v8;
  std::string __p;
  _QWORD v10[34];
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  v4 = std::istream::peek();
  v11 = v4;
  if (v4 << 24 == 1409286144)
  {
    v5 = 1;
  }
  else
  {
    if (v4 << 24 != 1174405120)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Read failure in ReadBasicType<BOOL>, file position is ", 54);
      std::istream::tellg();
      v7 = (_QWORD *)std::ostream::operator<<();
      v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", next char is ", 15);
      kaldi::CharToString((kaldi *)&v11, &__p);
      std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v8, (uint64_t)&__p);
      std::string::~string(&__p);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
    }
    v5 = 0;
  }
  *a3 = v5;
  return std::istream::get();
}

void sub_1ADFEECB4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::WriteBasicType<float>(uint64_t a1, int a2)
{
  _QWORD *v3;

  if (a2)
  {
    std::ostream::put();
    return (_QWORD *)std::ostream::write();
  }
  else
  {
    v3 = (_QWORD *)std::ostream::operator<<();
    return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" ", 1);
  }
}

float kaldi::ReadBasicType<float>(_QWORD *a1, int a2, float *a3)
{
  int v5;
  float result;
  _QWORD *v7;
  _QWORD v8[34];
  double v9[19];

  v9[18] = *(double *)MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9[0] = 0.0;
    v5 = std::istream::peek();
    if (v5 == 8)
    {
      kaldi::ReadBasicType<double>(a1, 1, v9);
      result = v9[0];
      *a3 = result;
    }
    else
    {
      if (v5 != 4)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1AF44CB0C](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

void sub_1ADFEEED4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

double kaldi::ReadBasicType<double>(_QWORD *a1, int a2, double *a3)
{
  int v5;
  double result;
  _QWORD *v7;
  _QWORD v8[34];
  float v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v9 = 0.0;
    v5 = std::istream::peek();
    if (v5 == 4)
    {
      kaldi::ReadBasicType<float>(a1, 1, &v9);
      result = v9;
      *a3 = v9;
    }
    else
    {
      if (v5 != 8)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: expected float, saw ", 35);
        std::istream::peek();
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", at file position ", 19);
        std::istream::tellg();
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
      }
      std::istream::get();
      std::istream::read();
    }
  }
  else
  {
    MEMORY[0x1AF44CB00](a1, a3);
  }
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"ReadBasicType: failed to read, at file position ", 48);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  return result;
}

void sub_1ADFEF088(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::ReadString(_QWORD *a1, int a2, uint64_t a3)
{
  _QWORD *result;
  int v5;
  _QWORD v6[52];

  v6[51] = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Reading arbitrary strings in text mode is unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  result = std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3, 0);
  v5 = *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32);
  if ((v5 & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ReadString, failed to read string at file position ", 51);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  if ((v5 & 2) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"ReadString, saw eof while looking for null terminator, at file position ", 72);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  return result;
}

void sub_1ADFEF1E4(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::WriteString(_QWORD *a1, int a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *result;
  std::runtime_error *exception;
  _QWORD v10[34];

  if (!a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Writing arbitrary strings in text mode is unimplemented");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v4 = *(char *)(a3 + 23);
  if (v4 >= 0)
    v5 = a3;
  else
    v5 = *(_QWORD *)a3;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a3 + 23);
  else
    v6 = *(_QWORD *)(a3 + 8);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, v5, v6);
  LOBYTE(v10[0]) = 0;
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v10, 1);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteString.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADFEF2B8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1ADFEF2CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

_QWORD *kaldi::WriteToken(_QWORD *a1, int a2, char *__s)
{
  int v5;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  _QWORD *result;
  std::runtime_error *exception;

  LOBYTE(v5) = *__s;
  v6 = 1;
  do
  {
    if ((v5 & 0x80) != 0)
      __maskrune((char)v5, 0x4000uLL);
    v5 = __s[v6++];
  }
  while (v5);
  v7 = strlen(__s);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)__s, v7);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" ", 1);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Write failure in WriteToken.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1ADFEF39C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::Peek(_QWORD *a1, char a2)
{
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  return std::istream::peek();
}

_QWORD *kaldi::WriteToken(_QWORD *a1, uint64_t a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return kaldi::WriteToken(a1, 0, a3);
}

uint64_t kaldi::ReadToken(uint64_t *a1, char a2, uint64_t a3)
{
  unsigned int v5;
  int v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];
  _BYTE v11[128];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, a3);
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadToken, failed to read token at file position ", 49);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  v5 = std::istream::peek();
  if (v5 <= 0x7F)
    v6 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v5 + 60) & 0x4000;
  else
    v6 = __maskrune(v5, 0x4000uLL);
  if (!v6)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"ReadToken, expected space after token, saw instead ", 51);
    v11[0] = std::istream::peek();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v11, 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", at file position ", 19);
    std::istream::tellg();
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return std::istream::get();
}

void sub_1ADFEF58C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::PeekToken(_QWORD *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD v6[34];

  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  if (std::istream::peek() != 60)
    return std::istream::peek();
  std::istream::get();
  v2 = std::istream::peek();
  v3 = (_QWORD *)std::istream::unget();
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Error ungetting '<' in PeekToken", 32);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
  }
  return v2;
}

void sub_1ADFEF670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::ExpectToken(uint64_t *a1, char a2, const char *a3)
{
  int v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *p_s1;
  uint64_t v17;
  _QWORD *v18;
  char *__s1;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[35];

  v22[34] = *MEMORY[0x1E0C80C00];
  std::istream::tellg();
  LOBYTE(v6) = *a3;
  v7 = 1;
  do
  {
    if ((v6 & 0x80) != 0)
      __maskrune((char)v6, 0x4000uLL);
    v6 = a3[v7++];
  }
  while (v6);
  if ((a2 & 1) == 0)
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a1);
  __s1 = 0;
  v20 = 0;
  v21 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a1, (uint64_t)&__s1);
  std::istream::get();
  if ((*((_BYTE *)a1 + *(_QWORD *)(*a1 - 24) + 32) & 5) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Failed to read token [started at file position ", 47);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"], expected ", 12);
    v11 = strlen(a3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a3, v11);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
  if (SHIBYTE(v21) < 0)
  {
    v8 = __s1;
    if (strcmp(__s1, a3))
      goto LABEL_15;
    operator delete(v8);
  }
  else if (strcmp((const char *)&__s1, a3))
  {
LABEL_15:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Expected token \"", 16);
    v13 = strlen(a3);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)a3, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\", got instead \"", 16);
    if (v21 >= 0)
      p_s1 = &__s1;
    else
      p_s1 = __s1;
    if (v21 >= 0)
      v17 = HIBYTE(v21);
    else
      v17 = v20;
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_s1, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"\".", 2);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
  }
}

void sub_1ADFEF88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::~ESTensorData(kaldi::quasar::ESTensorData *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E5D32B00;
  v2 = (void *)*((_QWORD *)this + 26);
  *((_QWORD *)this + 26) = 0;
  if (v2)
    free(v2);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)this);
}

{
  kaldi::quasar::ESTensorData::~ESTensorData(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::ESNetworkConfig::ESNetworkConfig(uint64_t a1, __int128 *a2)
{
  std::string *v3;
  __int128 v4;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)a1 = &off_1E5D330B0;
  v3 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    v3->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = v4;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  return a1;
}

void sub_1ADFEF9AC(_Unwind_Exception *a1)
{
  kaldi::quasar::ComputeEngineConfigItf *v1;

  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkConfig::Read(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t *v4;
  std::string *v8;
  std::string *v9;
  uint64_t v10;
  int v11;
  int v12;
  size_t v13;
  unsigned __int8 *v14;
  void **v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  void **v21;
  void *v22;
  size_t v23;
  void *v24;
  int v25;
  void *v27;
  uint64_t v28;
  void *v30;
  void *v31;
  int v32;
  BOOL v34;
  std::string *p_str;
  uint64_t *v36;
  void *v37;
  void *v38;
  BOOL v39;
  _QWORD *v40;
  void **v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t **v44;
  __int128 *v45[34];
  void *v46;
  size_t v47;
  uint64_t v48;
  const void *v49[2];
  uint64_t v50;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  v49[0] = 0;
  v49[1] = 0;
  v50 = 0;
  v4 = a2 + 4;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) == 0)
  {
    v8 = (std::string *)(a1 + 112);
    v9 = (std::string *)(a1 + 88);
    v44 = (uint64_t **)(a1 + 64);
    while (1)
    {
      v46 = 0;
      v47 = 0;
      v48 = 0;
      kaldi::ReadToken(a2, a3, (uint64_t)&v46);
      v10 = *(unsigned __int8 *)(a4 + 23);
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *(_QWORD *)(a4 + 8);
      v12 = HIBYTE(v48);
      if (!v10 || (v48 >= 0 ? (v13 = HIBYTE(v48)) : (v13 = v47), v13 != v10))
      {
LABEL_21:
        if ((v48 & 0x8000000000000000) == 0)
        {
          v18 = 0;
          v19 = 0;
          v20 = 0;
          v21 = &v46;
          switch(HIBYTE(v48))
          {
            case 0xA:
              goto LABEL_26;
            case 0xE:
              goto LABEL_34;
            case 0x10:
              goto LABEL_57;
            case 0x11:
              goto LABEL_42;
            default:
              goto LABEL_72;
          }
        }
        goto LABEL_24;
      }
      v14 = v11 >= 0 ? (unsigned __int8 *)a4 : *(unsigned __int8 **)a4;
      if (v48 < 0)
        break;
      if (!HIBYTE(v48))
        goto LABEL_66;
      v15 = &v46;
      v16 = HIBYTE(v48);
      do
      {
        if (*(unsigned __int8 *)v15 != *v14)
          goto LABEL_21;
        v15 = (void **)((char *)v15 + 1);
        ++v14;
        --v16;
      }
      while (v16);
      v17 = 0;
      if ((v48 & 0x8000000000000000) == 0)
      {
LABEL_64:
        if (!v17)
          goto LABEL_66;
        goto LABEL_65;
      }
LABEL_19:
      operator delete(v46);
      if ((v17 & 1) == 0)
        goto LABEL_66;
LABEL_65:
      if ((*((_BYTE *)v4 + *(_QWORD *)(*a2 - 24)) & 2) != 0)
        goto LABEL_66;
    }
    v22 = v46;
    if (!memcmp(v46, v14, v47))
    {
      operator delete(v22);
      goto LABEL_66;
    }
LABEL_24:
    v23 = v47;
    if (v47 == 10)
    {
      v18 = 1;
      v21 = (void **)v46;
LABEL_26:
      v24 = *v21;
      v25 = *((unsigned __int16 *)v21 + 4);
      if (v24 == (void *)0x6F6974636E75463CLL && v25 == 15982)
      {
        p_str = &__str;
        goto LABEL_62;
      }
      if (!v18)
        goto LABEL_72;
      v23 = v47;
    }
    if (v23 == 14)
    {
      v19 = 1;
      v21 = (void **)v46;
LABEL_34:
      v27 = *v21;
      v28 = *(uint64_t *)((char *)v21 + 6);
      if (v27 == (void *)0x5474757074754F3CLL && v28 == 0x3E726F736E655474)
      {
        kaldi::ReadToken(a2, a3, (uint64_t)v49);
        v45[0] = (__int128 *)v49;
        v36 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v44, v49, (uint64_t)&std::piecewise_construct, v45);
        std::string::operator=((std::string *)(v36 + 7), &__str);
        goto LABEL_63;
      }
      if (!v19)
        goto LABEL_72;
      v23 = v47;
    }
    if (v23 != 17)
      goto LABEL_51;
    v20 = 1;
    v21 = (void **)v46;
LABEL_42:
    v30 = *v21;
    v31 = v21[1];
    v32 = *((unsigned __int8 *)v21 + 16);
    v34 = v30 == (void *)0x657475706D6F433CLL && v31 == (void *)0x6D726F6674616C50 && v32 == 62;
    p_str = v9;
    if (!v34)
    {
      if (!v20)
      {
        if (v12 != 16)
          goto LABEL_72;
        v21 = &v46;
        goto LABEL_57;
      }
      v23 = v47;
LABEL_51:
      if (v23 != 16)
        goto LABEL_72;
      v21 = (void **)v46;
LABEL_57:
      v38 = *v21;
      v37 = v21[1];
      v39 = v38 == (void *)0x6F706B636568433CLL && v37 == (void *)0x3E656D614E746E69;
      p_str = v8;
      if (!v39)
      {
LABEL_72:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
        v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unknown token ", 14);
        if (v48 >= 0)
          v41 = &v46;
        else
          v41 = (void **)v46;
        if (v48 >= 0)
          v42 = HIBYTE(v48);
        else
          v42 = v47;
        v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v41, v42);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", a typo in config file?", 24);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
      }
    }
LABEL_62:
    kaldi::ReadToken(a2, a3, (uint64_t)p_str);
LABEL_63:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
    v17 = 1;
    if ((v48 & 0x8000000000000000) == 0)
      goto LABEL_64;
    goto LABEL_19;
  }
LABEL_66:
  if (SHIBYTE(v50) < 0)
    operator delete((void *)v49[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1ADFEFD78(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (*(char *)(v1 - 121) < 0)
    operator delete(*(void **)(v1 - 144));
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkConfig::CreateComputeEngine@<X0>(kaldi::quasar::ESNetworkConfig *this@<X0>, kaldi::quasar::ESNetworkPlan **a2@<X8>)
{
  kaldi::quasar::ESNetworkPlan *v4;
  kaldi::quasar::ESNetworkPlan *result;

  v4 = (kaldi::quasar::ESNetworkPlan *)operator new();
  result = kaldi::quasar::ESNetworkPlan::ESNetworkPlan(v4, this);
  *a2 = v4;
  return result;
}

void sub_1ADFEFE08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40F7E275CALL);
  _Unwind_Resume(a1);
}

kaldi::quasar::ESNetworkPlan *kaldi::quasar::ESNetworkPlan::ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  *(_QWORD *)this = &off_1E5D32D00;
  kaldi::quasar::ESNetworkConfig::ESNetworkConfig((kaldi::quasar::ESNetworkPlan *)((char *)this + 8), a2);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *((_DWORD *)this + 40) = 0;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 25) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *((_DWORD *)this + 52) = 1065353216;
  *(_OWORD *)((char *)this + 232) = 0u;
  *((_DWORD *)this + 62) = 1065353216;
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = (char *)this + 264;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *((_DWORD *)this + 78) = 1065353216;
  *((_BYTE *)this + 320) = 0;
  *((_QWORD *)this + 41) = 0;
  *((_QWORD *)this + 42) = 0;
  *((_BYTE *)this + 344) = 0;
  kaldi::quasar::ESNetworkPlan::LoadNetwork((uint64_t)this, (const std::string *)this + 2);
  return this;
}

void sub_1ADFEFEF0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  void **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  id *v8;
  uint64_t v10;

  v10 = *((_QWORD *)v1 + 42);
  *((_QWORD *)v1 + 42) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v6);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5, *v7);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v3);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::LoadNetwork(uint64_t a1, const std::string *a2)
{
  unsigned __int16 *v4;
  int v5;
  uint64_t v6;
  int v8;
  int v9;
  BOOL v10;
  int v11;
  int v12;
  std::string::size_type v14;
  std::string::size_type size;
  unint64_t v16;
  unsigned __int8 *v17;
  std::string::size_type v18;
  BOOL v19;
  size_t v20;
  size_t v21;
  const std::string *v22;
  const void *v23;
  int v24;
  void **v25;
  std::string::size_type v26;
  std::string *v27;
  __int128 v28;
  char *v29;
  fst::MappedFile *v30;
  uint64_t v31;
  int **v32;
  int v33;
  int *v34;
  uint64_t v37;
  BOOL v41;
  uint64_t context;
  _QWORD *v45;
  int v52;
  int v53;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  std::string::size_type v62;
  uint64_t v63;
  std::string::size_type v64;
  BOOL v65;
  char *v66;
  void *v67;
  char *v68;
  BOOL v71;
  uint64_t v72;
  std::string::size_type v73;
  char *v74;
  void *v75;
  char *v76;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  int v81;
  _QWORD *v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void *__p[2];
  char v88;
  void *v89;
  unsigned __int8 *v90;
  uint64_t v91;
  int v92;
  int v93;
  void *v94[2];
  int64_t v95;
  void *v96[2];
  unsigned __int8 v97;
  void *v98;
  unsigned __int8 *v99;
  uint64_t v100;
  std::string v101;
  unint64_t v102;
  std::string v103;
  _QWORD v104[20];

  v104[19] = *MEMORY[0x1E0C80C00];
  if (!*(_BYTE *)(a1 + 16))
    goto LABEL_70;
  v4 = (unsigned __int16 *)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (v6 == 3 && **(_WORD **)v4 == 20547 && *(_BYTE *)(*(_QWORD *)v4 + 2) == 85)
      goto LABEL_20;
    if (v6 != 7)
      goto LABEL_70;
    v4 = *(unsigned __int16 **)v4;
    goto LABEL_13;
  }
  v5 = *(unsigned __int8 *)(a1 + 119);
  if (v5 != 3)
  {
    if (v5 != 7)
      goto LABEL_70;
LABEL_13:
    v8 = *(_DWORD *)v4;
    v9 = *(_DWORD *)((char *)v4 + 3);
    v10 = v8 == 1599426627;
    v11 = 1414283615;
    goto LABEL_15;
  }
  v12 = *v4;
  v9 = *(unsigned __int8 *)(a1 + 98);
  v10 = v12 == 20547;
  v11 = 85;
LABEL_15:
  if (!v10 || v9 != v11)
    goto LABEL_70;
LABEL_20:
  std::string::basic_string[abi:ne180100]<0>(&v98, ".net");
  std::string::basic_string[abi:ne180100]<0>(v96, ".weights");
  v14 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  size = a2->__r_.__value_.__l.__size_;
  if ((v14 & 0x80u) == 0)
    v16 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    v16 = a2->__r_.__value_.__l.__size_;
  if (v100 >= 0)
    v17 = (unsigned __int8 *)HIBYTE(v100);
  else
    v17 = v99;
  v18 = v16 - (_QWORD)v17;
  if (v16 >= (unint64_t)v17)
  {
    if ((v14 & 0x80) != 0)
    {
      if (v17 == (unsigned __int8 *)-1 || size < v18)
LABEL_239:
        std::string::__throw_out_of_range[abi:ne180100]();
      if (size - v18 >= (unint64_t)v17)
        v21 = (size_t)v17;
      else
        v21 = size - v18;
      v22 = (const std::string *)a2->__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v17 == (unsigned __int8 *)-1)
        goto LABEL_239;
      v19 = v14 >= v18;
      v20 = v14 - v18;
      if (!v19)
        goto LABEL_239;
      if (v20 >= (unint64_t)v17)
        v21 = (size_t)v17;
      else
        v21 = v20;
      v22 = a2;
    }
    if (v100 >= 0)
      v23 = &v98;
    else
      v23 = v98;
    v24 = memcmp((char *)v22 + v18, v23, v21);
    if ((unsigned __int8 *)v21 == v17 && !v24)
    {
      std::string::basic_string(&v103, a2, 0, v18, (std::allocator<char> *)&v101);
      if ((v97 & 0x80u) == 0)
        v25 = v96;
      else
        v25 = (void **)v96[0];
      if ((v97 & 0x80u) == 0)
        v26 = v97;
      else
        v26 = (std::string::size_type)v96[1];
      v27 = std::string::append(&v103, (const std::string::value_type *)v25, v26);
      v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v95 = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)v94 = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      std::ifstream::basic_ifstream(&v103);
      if ((*((_BYTE *)&v103 + *(_QWORD *)(v103.__r_.__value_.__r.__words[0] - 24) + 32) & 5) == 0)
      {
        std::istream::seekg();
        std::istream::tellg();
        std::istream::seekg();
        if (v95 >= 0)
          v29 = (char *)v94;
        else
          v29 = (char *)v94[0];
        std::string::basic_string[abi:ne180100]<0>(__p, v29);
        fst::FstReadOptions::FstReadOptions(&v89, __p, 0, 0, 0);
        if (v88 < 0)
          operator delete(__p[0]);
        v92 = 2;
        v93 = 1065353216;
        v30 = fst::MappedFile::Map((uint64_t)&v103, (uint64_t)&v89, v102);
        v31 = *(_QWORD *)(a1 + 336);
        *(_QWORD *)(a1 + 336) = v30;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        if (SHIBYTE(v91) < 0)
          operator delete(v89);
      }
      v103.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F40];
      *(std::string::size_type *)((char *)v103.__r_.__value_.__r.__words
                                + *(_QWORD *)(v103.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
      MEMORY[0x1AF44CA70](&v103.__r_.__value_.__r.__words[2]);
      std::istream::~istream();
      MEMORY[0x1AF44D094](v104);
      if (SHIBYTE(v95) < 0)
        operator delete(v94[0]);
    }
  }
  if ((char)v97 < 0)
    operator delete(v96[0]);
  if (SHIBYTE(v100) < 0)
    operator delete(v98);
LABEL_70:
  v32 = (int **)(a1 + 96);
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
    v33 = *(unsigned __int8 *)(a1 + 119);
    v34 = (int *)(a1 + 96);
    switch(*(_BYTE *)(a1 + 119))
    {
      case 0:
        goto LABEL_113;
      case 1:
      case 2:
      case 4:
      case 6:
      case 8:
      case 9:
      case 0xA:
        goto LABEL_232;
      case 3:
        if (*(_WORD *)v32 == 20557 && *(_BYTE *)(a1 + 98) == 83)
          goto LABEL_162;
        if (*(_WORD *)v32 == 20547 && *(_BYTE *)(a1 + 98) == 85)
          goto LABEL_162;
        if ((v33 & 0x80) == 0)
          goto LABEL_232;
        goto LABEL_154;
      case 5:
        if (*(_DWORD *)v32 != 1096041805 || *(_BYTE *)(a1 + 100) != 76)
          goto LABEL_232;
        goto LABEL_119;
      case 7:
        goto LABEL_157;
      case 0xB:
        if (*v32 != (int *)0x544E55525F454E41 || *(_QWORD *)(a1 + 99) != 0x454D49544E55525FLL)
          goto LABEL_232;
        goto LABEL_162;
      default:
        if (v33 != 15)
        {
          if (v33 != 18)
            goto LABEL_232;
          v41 = *v32 == (int *)0x544E55525F454E41 && *(_QWORD *)(a1 + 104) == 0x455249445F454D49;
          if (!v41 || *(_WORD *)(a1 + 112) != 21571)
            goto LABEL_232;
          goto LABEL_162;
        }
        if (*v32 != (int *)0x504D5F4C4154454DLL || *(_QWORD *)(a1 + 103) != 0x48504152475F5350)
          goto LABEL_232;
        goto LABEL_162;
    }
  }
  v37 = *(_QWORD *)(a1 + 104);
  if (v37 > 10)
  {
    switch(v37)
    {
      case 11:
        if (*(_QWORD *)*v32 == 0x544E55525F454E41 && *(_QWORD *)((char *)*v32 + 3) == 0x454D49544E55525FLL)
          goto LABEL_162;
        break;
      case 15:
        if (*(_QWORD *)*v32 == 0x504D5F4C4154454DLL && *(_QWORD *)((char *)*v32 + 7) == 0x48504152475F5350)
          goto LABEL_162;
        goto LABEL_155;
      case 18:
        if (*(_QWORD *)*v32 == 0x544E55525F454E41
          && *((_QWORD *)*v32 + 1) == 0x455249445F454D49
          && *((_WORD *)*v32 + 8) == 21571)
        {
          goto LABEL_162;
        }
        break;
      default:
        goto LABEL_155;
    }
LABEL_232:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    v82 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Unknown platform: ", 18);
    v83 = *(char *)(a1 + 119);
    if (v83 >= 0)
      v84 = a1 + 96;
    else
      v84 = *(_QWORD *)(a1 + 96);
    if (v83 >= 0)
      v85 = *(unsigned __int8 *)(a1 + 119);
    else
      v85 = *(_QWORD *)(a1 + 104);
    v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v82, v84, v85);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v86, ", a typo in config file?");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v103);
  }
  if (!v37)
  {
LABEL_113:
    context = espresso_create_context();
    goto LABEL_170;
  }
  if (v37 == 3)
  {
    if (*(_WORD *)*v32 == 20557 && *((_BYTE *)*v32 + 2) == 83)
      goto LABEL_162;
    if (*(_WORD *)*v32 == 20547 && *((_BYTE *)*v32 + 2) == 85)
      goto LABEL_162;
LABEL_154:
    v37 = *(_QWORD *)(a1 + 104);
    goto LABEL_155;
  }
  if (v37 != 5)
  {
LABEL_155:
    if (v37 == 7)
    {
      v34 = *v32;
LABEL_157:
      v52 = *v34;
      v53 = *(int *)((char *)v34 + 3);
      if (v52 == 1599426627 && v53 == 1414283615)
        goto LABEL_162;
    }
    goto LABEL_232;
  }
  if (**v32 != 1096041805 || *((_BYTE *)*v32 + 4) != 76)
    goto LABEL_232;
LABEL_119:
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Using The Metal GPU backend (legacy, deprecated) ", 49);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"\n", 1);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
  }
LABEL_162:
  context = espresso_create_context();
  if (kaldi::g_kaldi_verbose_level >= 3)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103, 3);
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"Set compute platform to ", 24);
    v56 = *(char *)(a1 + 119);
    if (v56 >= 0)
      v57 = a1 + 96;
    else
      v57 = *(_QWORD *)(a1 + 96);
    if (v56 >= 0)
      v58 = *(unsigned __int8 *)(a1 + 119);
    else
      v58 = *(_QWORD *)(a1 + 104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, v57, v58);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&v103);
  }
LABEL_170:
  if (!context)
    context = espresso_create_context();
  *(_QWORD *)(a1 + 144) = context;
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v101, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  else
    v101 = *a2;
  *(_QWORD *)(a1 + 168) = espresso_create_plan_and_load_network();
  +[_EARProfiler sharedProfiler](_EARProfiler, "sharedProfiler");
  v59 = objc_claimAutoreleasedReturnValue();
  v60 = *(void **)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v59;

  v61 = *(void **)(a1 + 328);
  if (v61 && objc_msgSend(v61, "_perfProfiler"))
  {
    if (espresso_plan_start_profiling_with_options())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"espresso_plan_start_profiling_with_options(plan_, profilingOptions) == ESPRESSO_STATUS_SUCCESS", 94);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v103);
    }
    objc_msgSend(*(id *)(a1 + 328), "addProfilingNetwork:", *(_QWORD *)(a1 + 168));
  }
  if (!*(_QWORD *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"plan_ != nullptr", 16);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v103);
  }
  v89 = 0;
  v90 = 0;
  v91 = 0;
  c_network_get_input_names();
  v98 = 0;
  v99 = 0;
  v100 = 0;
  c_network_get_output_names();
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v103, (unsigned __int8 *)v89, v90);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 176, (uint64_t *)&v103);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v103);
  std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v103, (unsigned __int8 *)v98, v99);
  std::__hash_table<std::__hash_value_type<std::string,double>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,double>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,double>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,double>>>::__move_assign(a1 + 216, (uint64_t *)&v103);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v103);
  if (espresso_plan_build())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"espresso_plan_build(plan_) == ESPRESSO_STATUS_SUCCESS", 53);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v103);
  }
  if (*(_QWORD *)(a1 + 168) != *(_QWORD *)(a1 + 152))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v103);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v103, (uint64_t)"plan_ == network_.plan", 22);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v103);
  }
  memset(&v103, 0, sizeof(v103));
  espresso_get_additional_configuration_names();
  v62 = v103.__r_.__value_.__r.__words[0];
  if (v103.__r_.__value_.__r.__words[0] == v103.__r_.__value_.__l.__size_)
  {
    v65 = 0;
    *(_BYTE *)(a1 + 320) = 0;
  }
  else
  {
    if (*(char *)(v103.__r_.__value_.__r.__words[0] + 23) < 0)
    {
      v64 = *(_QWORD *)v103.__r_.__value_.__l.__data_;
      v63 = *(_QWORD *)(v103.__r_.__value_.__r.__words[0] + 8);
    }
    else
    {
      v63 = *(unsigned __int8 *)(v103.__r_.__value_.__r.__words[0] + 23);
      v64 = v103.__r_.__value_.__r.__words[0];
    }
    if (v63 >= 13)
    {
      v66 = (char *)(v64 + v63);
      v67 = (void *)v64;
      do
      {
        v68 = (char *)memchr(v67, 98, v63 - 12);
        if (!v68)
          break;
        if (*(_QWORD *)v68 == 0x6F635F6863746162 && *(_QWORD *)(v68 + 5) == 0x5F6769666E6F635FLL)
          goto LABEL_197;
        v67 = v68 + 1;
        v63 = v66 - (_BYTE *)v67;
      }
      while (v66 - (_BYTE *)v67 > 12);
      v68 = v66;
LABEL_197:
      v71 = v68 != v66 && v68 == (char *)v64;
      *(_BYTE *)(a1 + 320) = v71;
    }
    else
    {
      *(_BYTE *)(a1 + 320) = 0;
    }
    if (*(char *)(v62 + 23) < 0)
    {
      v73 = v62;
      v62 = *(_QWORD *)v62;
      v72 = *(_QWORD *)(v73 + 8);
    }
    else
    {
      v72 = *(unsigned __int8 *)(v62 + 23);
    }
    v74 = (char *)(v62 + v72);
    if (v72 >= 13)
    {
      v75 = (void *)v62;
      do
      {
        v76 = (char *)memchr(v75, 119, v72 - 12);
        if (!v76)
          break;
        if (*(_QWORD *)v76 == 0x6F635F6874646977 && *(_QWORD *)(v76 + 5) == 0x5F6769666E6F635FLL)
          goto LABEL_216;
        v75 = v76 + 1;
        v72 = v74 - (_BYTE *)v75;
      }
      while (v74 - (_BYTE *)v75 > 12);
    }
    v76 = v74;
LABEL_216:
    v65 = v76 != v74 && v76 == (char *)v62;
  }
  *(_BYTE *)(a1 + 344) = v65;
  v79 = (unsigned __int8 *)v98;
  v80 = v99;
  if (v98 != v99)
  {
    do
    {
      LODWORD(v96[0]) = 0;
      espresso_blob_is_dynamic();
      v81 = (int)v96[0];
      v94[0] = v79;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 280, v79, (uint64_t)&std::piecewise_construct, (__int128 **)v94)+ 10) = v81;
      v79 += 24;
    }
    while (v79 != v80);
  }
  v96[0] = &v103;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v96);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v98;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  v103.__r_.__value_.__r.__words[0] = (std::string::size_type)&v89;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v103);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
}

void sub_1ADFF0C18(_Unwind_Exception *a1)
{
  uint64_t v2;
  void *v3[5];
  char v4;
  _QWORD v5[83];

  v5[0] = v3;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  v5[0] = &v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v5);
  if (v4 < 0)
    operator delete(v3[3]);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(kaldi::quasar::ESNetworkPlan *this)
{
  uint64_t v2;
  _QWORD v3[34];

  *(_QWORD *)this = &off_1E5D32D00;
  if (*((_QWORD *)this + 21) && espresso_plan_destroy() || espresso_context_destroy())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"ret == ESPRESSO_STATUS_SUCCESS", 30);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 280);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 256, *((_QWORD **)this + 33));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 216);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 176);
  kaldi::quasar::ESNetworkConfig::~ESNetworkConfig((void **)this + 1);
  quasar::Bitmap::~Bitmap(this);
}

{
  kaldi::quasar::ESNetworkPlan::~ESNetworkPlan(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateData@<X0>(int **a1@<X1>, char a2@<W2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v6);
  *(_QWORD *)v6 = &off_1E5D32B00;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_QWORD *)(v6 + 208) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_DWORD *)(v6 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>((kaldi::quasar::EspressoNDArray *)(v6 + 32), a1, a2);
  *a3 = v6;
  return result;
}

{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v6);
  *(_QWORD *)v6 = &off_1E5D32B00;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_QWORD *)(v6 + 208) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_DWORD *)(v6 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>((kaldi::quasar::EspressoNDArray *)(v6 + 32), a1, a2);
  *a3 = v6;
  return result;
}

void sub_1ADFF0E28(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1ADFF0EFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::ESNetworkPlan::CreateData@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1E5D32B00;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_DWORD *)(v4 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>((kaldi::quasar::EspressoNDArray *)(v4 + 32), a1);
  *a2 = v4;
  return result;
}

{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1E5D32B00;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_DWORD *)(v4 + 192) = 65568;
  result = kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>((kaldi::quasar::EspressoNDArray *)(v4 + 32), a1);
  *a2 = v4;
  return result;
}

void sub_1ADFF0FC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1ADFF1094(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataInt32(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = operator new();
  kaldi::quasar::ESTensorData::ESTensorData((_QWORD *)v5, (uint64_t)__dst);
  *(_DWORD *)(v5 + 192) = 131104;
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1ADFF1164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1093C40B76D1C73);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateZeroedDataFloat(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  void *__dst[3];

  std::vector<unsigned long>::vector(__dst, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4 != *(_QWORD *)a1)
    memmove(__dst[0], *(const void **)a1, v4 - *(_QWORD *)a1);
  v5 = (_QWORD *)operator new();
  kaldi::quasar::ESTensorData::ESTensorData(v5, (uint64_t)__dst);
  *a2 = v5;
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
}

void sub_1ADFF1228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  MEMORY[0x1AF44D190](v11, 0x1093C40B76D1C73);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::CreateConcat(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  const void **v3;
  uint64_t v4;
  void *__p[2];
  uint64_t v6;
  _OWORD v7[22];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3 = *(const void ***)a1;
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    __p[0] = 0;
    __p[1] = 0;
    v6 = 0;
    if (*v3)
    {
      {
        memset(&v7[17], 0, 80);
        espresso_buffer_unpack_tensor_shape();
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"rank > 0", 8);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
      }
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"es_data != nullptr", 18);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v7);
  }
  v4 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v4);
  *(_QWORD *)v4 = &off_1E5D32B00;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_QWORD *)(v4 + 208) = 0;
  *(_DWORD *)(v4 + 192) = 65568;
  *a2 = v4;
}

uint64_t kaldi::quasar::ESTensorData::GetDataFloat(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

void kaldi::quasar::ESNetworkPlan::CreateSplit(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, _QWORD *a2@<X8>)
{
  int v5;
  unint64_t v6;
  void *v7;
  void *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *__p;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[17];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a1 + 160))(a1, 0);
  v6 = v5;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::vector(a2, v5);
  if (v5)
  {
    if (!v7)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"src_buf != nullptr", 18);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
    }
    v8 = v7;
    memset(v22, 0, 80);
    v21 = 0;
    espresso_buffer_unpack_tensor_shape();
    v19 = 0;
    v20 = 0;
    __p = 0;
    std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v22, (uint64_t)v22, 0);
    v9 = (uint64_t *)__p;
    v10 = 1;
    *(_QWORD *)__p = 1;
    v11 = v21;
    if (v21)
    {
      v10 = 1;
      do
      {
        v12 = *v9++;
        v10 *= (_DWORD)v12;
        --v11;
      }
      while (v11);
    }
    v13 = 0;
    v14 = 0;
    if (v6 <= 1)
      v15 = 1;
    else
      v15 = v6;
    do
    {
      v16 = (_QWORD *)operator new();
      kaldi::quasar::ESTensorData::ESTensorData(v16, (uint64_t)&__p);
      v17 = *(_QWORD *)(*a2 + 8 * v14);
      *(_QWORD *)(*a2 + 8 * v14) = v16;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      (*(void (**)(_QWORD, void *, uint64_t, _QWORD, _QWORD))(**(_QWORD **)(*a2 + 8 * v14) + 72))(*(_QWORD *)(*a2 + 8 * v14), v8, v13, (v10 + v13), 0);
      ++v14;
      v13 = (v13 + v10);
    }
    while (v15 != v14);
    if (__p)
    {
      v19 = __p;
      operator delete(__p);
    }
  }
}

void sub_1ADFF1B44(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADFF1B64);
}

void kaldi::quasar::ESNetworkPlan::CreateSlice(const kaldi::quasar::ComputeEngineBufferItf *a1@<X1>, int a2@<W2>, unsigned int a3@<W3>, uint64_t *a4@<X8>)
{
  unsigned int v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  void *__p;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  _OWORD v23[17];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if ((*(int (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a1 + 152))(a1) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "src->GetNumDims() >= 1");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if (a2 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "0 <= start");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if ((int)a3 < a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "start <= end");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *, _QWORD))(*(_QWORD *)a1 + 160))(a1, 0);
  if (v9 < a3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "end <= num_split");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
  }
  if (v9)
  {
    if (a2 || v9 != a3)
    {
      if (!v11)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v23, "src_buf != nullptr");
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      v12 = v11;
      memset(v23, 0, 80);
      v22 = 0;
      espresso_buffer_unpack_tensor_shape();
      v20 = 0;
      v21 = 0;
      __p = 0;
      std::vector<unsigned long>::__init_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&__p, v23, (uint64_t)v23, 0);
      v13 = (char *)__p;
      *(_QWORD *)__p = (int)(a3 - a2);
      if (v22 < 2)
      {
        v16 = 1;
      }
      else
      {
        v14 = v22 - 1;
        v15 = (uint64_t *)(v13 + 8);
        v16 = 1;
        do
        {
          v17 = *v15++;
          v16 *= (_DWORD)v17;
          --v14;
        }
        while (v14);
      }
      v18 = (_QWORD *)operator new();
      kaldi::quasar::ESTensorData::ESTensorData(v18, (uint64_t)&__p);
      (*(void (**)(_QWORD *, void *, _QWORD, _QWORD, _QWORD))(*v18 + 72))(v18, v12, (v16 * a2), v16 * a3, 0);
      *a4 = (uint64_t)v18;
      if (__p)
      {
        v20 = __p;
        operator delete(__p);
      }
    }
    else
    {
      (*(void (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a1 + 16))(a1);
    }
  }
  else
  {
    v10 = operator new();
    kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v10);
    *(_QWORD *)v10 = &off_1E5D32B00;
    *(_OWORD *)(v10 + 176) = 0u;
    *(_OWORD *)(v10 + 192) = 0u;
    *(_OWORD *)(v10 + 32) = 0u;
    *(_OWORD *)(v10 + 48) = 0u;
    *(_OWORD *)(v10 + 64) = 0u;
    *(_OWORD *)(v10 + 80) = 0u;
    *(_OWORD *)(v10 + 96) = 0u;
    *(_OWORD *)(v10 + 112) = 0u;
    *(_OWORD *)(v10 + 128) = 0u;
    *(_OWORD *)(v10 + 144) = 0u;
    *(_OWORD *)(v10 + 160) = 0u;
    *(_QWORD *)(v10 + 208) = 0;
    *(_DWORD *)(v10 + 192) = 65568;
    *a4 = v10;
  }
}

void sub_1ADFF1F10(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(uint64_t a1, __int128 **a2, _BYTE *a3, _BYTE *a4)
{
  __int128 *v6;
  __int128 v8;
  _QWORD *v9;
  char *last_error;
  std::string __p[11];

  if (*(_QWORD *)(a1 + 88))
  {
    v6 = *a2;
    if (a2[1] != *a2)
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v8 = *v6;
        __p[0].__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v8;
      }
      if (std::__tree<std::string>::__count_unique<std::string>(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_))
      {
        std::map<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::at(a1 + 72, (const void **)&__p[0].__r_.__value_.__l.__data_);
        espresso_network_set_function_name();
        *a3 = 1;
      }
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a1 + 143) < 0)
  {
    if (!*(_QWORD *)(a1 + 128))
      return;
  }
  else if (!*(_BYTE *)(a1 + 143))
  {
    return;
  }
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Set function name for checkpoint failed, error=", 47);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  *a4 = 1;
}

void sub_1ADFF2084(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::quasar::ESNetworkPlan::RunNitro(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t i;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  unint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int64x2_t v36;
  char *v37;
  void *v38;
  const char *last_error;
  size_t v41;
  const char *v42;
  size_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  std::string __p[7];
  std::string v48;
  _OWORD v49[11];
  void *v50;
  uint64_t v51;
  int64x2_t v52;
  char *v53;
  uint64_t v54;

  kdebug_trace();
  v8 = *a2;
  for (i = a2[1]; v8 != i; v8 += 32)
  {
    kaldi::quasar::StripColon(v8, __p);
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
      last_error = (const char *)espresso_get_last_error();
      v41 = strlen(last_error);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)last_error, v41);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
    }
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
    v44 = (_QWORD *)std::ostream::operator<<();
    __p[0].__r_.__value_.__s.__data_[0] = 32;
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)__p, 1);
    v46 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v45, v46);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
  }
  if (a5)
  {
    v10 = *(char **)a5;
    v11 = *(char **)(a5 + 8);
    while (v11 != v10)
    {
      v13 = *((_QWORD *)v11 - 1);
      v11 -= 8;
      v12 = v13;
      *(_QWORD *)v11 = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    *(_QWORD *)(a5 + 8) = v10;
    std::vector<std::unique_ptr<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::reserve((char **)a5, 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
    v14 = *a3;
    v15 = a3[1];
    if (*a3 != v15)
    {
      do
      {
        kaldi::quasar::StripColon(v14, &v48);
        if (espresso_network_bind_buffer())
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v49);
          v42 = (const char *)espresso_get_last_error();
          v43 = strlen(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v42, v43);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v49);
        }
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v49, __p, 1);
        v16 = operator new();
        kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v16);
        *(_QWORD *)v16 = &off_1E5D32B00;
        v17 = v49[9];
        *(_OWORD *)(v16 + 160) = v49[8];
        *(_OWORD *)(v16 + 176) = v17;
        *(_OWORD *)(v16 + 192) = v49[10];
        v18 = v49[5];
        *(_OWORD *)(v16 + 96) = v49[4];
        *(_OWORD *)(v16 + 112) = v18;
        v19 = v49[7];
        *(_OWORD *)(v16 + 128) = v49[6];
        *(_OWORD *)(v16 + 144) = v19;
        v20 = v49[1];
        *(_OWORD *)(v16 + 32) = v49[0];
        *(_OWORD *)(v16 + 48) = v20;
        v21 = v49[3];
        *(_OWORD *)(v16 + 64) = v49[2];
        *(_OWORD *)(v16 + 80) = v21;
        v22 = v50;
        v50 = 0;
        *(_QWORD *)(v16 + 208) = v22;
        v24 = *(uint64_t **)(a5 + 8);
        v23 = *(_QWORD *)(a5 + 16);
        if ((unint64_t)v24 >= v23)
        {
          v26 = ((uint64_t)v24 - *(_QWORD *)a5) >> 3;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - *(_QWORD *)a5;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          v54 = a5 + 16;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a5 + 16, v29);
          else
            v30 = 0;
          v31 = (uint64_t *)&v30[8 * v26];
          v32 = &v30[8 * v29];
          v53 = v32;
          *v31 = v16;
          v25 = v31 + 1;
          v52.i64[1] = (uint64_t)(v31 + 1);
          v34 = *(char **)a5;
          v33 = *(char **)(a5 + 8);
          if (v33 == *(char **)a5)
          {
            v36 = vdupq_n_s64((unint64_t)v33);
          }
          else
          {
            do
            {
              v35 = *((_QWORD *)v33 - 1);
              v33 -= 8;
              *(_QWORD *)v33 = 0;
              *--v31 = v35;
            }
            while (v33 != v34);
            v36 = *(int64x2_t *)a5;
            v25 = (_QWORD *)v52.i64[1];
            v32 = v53;
          }
          *(_QWORD *)a5 = v31;
          *(_QWORD *)(a5 + 8) = v25;
          v52 = v36;
          v37 = *(char **)(a5 + 16);
          *(_QWORD *)(a5 + 16) = v32;
          v53 = v37;
          v51 = v36.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v51);
        }
        else
        {
          *v24 = v16;
          v25 = v24 + 1;
        }
        *(_QWORD *)(a5 + 8) = v25;
        v38 = v50;
        v50 = 0;
        if (v38)
        {
          free(v38);
          v25 = *(_QWORD **)(a5 + 8);
        }
        kaldi::quasar::ComputeEngineBufferItf::SetName(*(v25 - 1), &v48);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        v14 += 24;
      }
      while (v14 != v15);
    }
  }
  return kdebug_trace();
}

void sub_1ADFF249C()
{
  void *v0;

  if (v0)
    free(v0);
  JUMPOUT(0x1ADFF24F4);
}

void sub_1ADFF24A4()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x1093C40B76D1C73);
  JUMPOUT(0x1ADFF24C0);
}

void sub_1ADFF24D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    JUMPOUT(0x1ADFF2500);
  JUMPOUT(0x1ADFF2504);
}

uint64_t kaldi::quasar::ESNetworkPlan::NeedShapeChange(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  _QWORD *v17;
  const char *last_error;
  size_t v19;
  _QWORD v20[34];
  _OWORD v21[2];
  int v22;
  _OWORD v23[2];
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (espresso_plan_get_phase() == 1)
  {
    memset(v23, 0, sizeof(v23));
    v24 = 1065353216;
    v6 = *a3;
    v7 = a3[1];
    while (v6 != v7)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v23, v6, (uint64_t)v6);
      v6 += 24;
    }
    if ((std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v23, (_QWORD *)(a1 + 216)) & 1) == 0)
    {
      v10 = 1;
LABEL_24:
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v23);
      return v10;
    }
    memset(v21, 0, sizeof(v21));
    v22 = 1065353216;
    v8 = *a2;
    v9 = a2[1];
    while (v8 != v9)
    {
      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v21, v8, (uint64_t)v8);
      v8 += 32;
    }
    if (std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>((uint64_t)v21, (_QWORD *)(a1 + 176)))
    {
      v11 = *a2;
      if (a2[1] == *a2)
      {
LABEL_21:
        v10 = 0;
LABEL_23:
        std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v21);
        goto LABEL_24;
      }
      v12 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD **)&v11[v12 + 24];
        if (espresso_network_query_blob_dimensions())
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Espresso failed query blob info ", 32);
          v16 = (_QWORD *)std::ostream::operator<<();
          v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)": ", 2);
          last_error = (const char *)espresso_get_last_error();
          v19 = strlen(last_error);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)last_error, v19);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
        }
        if (v14[14] > 1uLL || v14[10] != v25 || v14[11] != v26 || v14[12] != v27 || v14[13] != v28)
          break;
        ++v13;
        v11 = *a2;
        v12 += 32;
        if (v13 >= (a2[1] - *a2) >> 5)
          goto LABEL_21;
      }
    }
    v10 = 1;
    goto LABEL_23;
  }
  return 1;
}

void sub_1ADFF2758(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t result;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  std::string *v11;
  std::string::size_type v12;
  char v13;
  int v14;
  _QWORD *v15;
  std::vector<int>::value_type *v16;
  uint64_t v17;
  std::vector<int>::size_type v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  const char *v45;
  size_t v46;
  _QWORD *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  const char *v52;
  size_t v53;
  _QWORD *v54;
  _QWORD *v55;
  char *last_error;
  std::vector<int> v57;
  _QWORD v58[3];
  std::string v59;
  std::vector<int>::value_type __x[2];
  __int128 v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  result = kaldi::quasar::ESNetworkPlan::NeedShapeChange(a1, a2, a3);
  if (!(_DWORD)result)
    return result;
  if (espresso_plan_get_phase() == 1 && espresso_plan_build_clean())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to reset plan with ", 35);
    v54 = (_QWORD *)std::ostream::operator<<();
    v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)": ", 2);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, last_error);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 176);
  v7 = *a2;
  v8 = a2[1];
  while (v7 != v8)
  {
    if (espresso_network_declare_input())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      v22 = (char)v7[23];
      if (v22 >= 0)
        v23 = (uint64_t)v7;
      else
        v23 = *(_QWORD *)v7;
      if (v22 >= 0)
        v24 = v7[23];
      else
        v24 = *((_QWORD *)v7 + 1);
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, v23, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"' with ", 7);
      v26 = (_QWORD *)std::ostream::operator<<();
      v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)": ", 2);
      v28 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, v28);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 176, v7, (uint64_t)v7);
    v7 += 32;
  }
  std::__hash_table<std::__hash_value_type<std::string,int>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,int>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,int>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,int>>>::clear(a1 + 216);
  v9 = *a3;
  v10 = a3[1];
  while (v9 != v10)
  {
    if (espresso_network_declare_output())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      v30 = (char)v9[23];
      if (v30 >= 0)
        v31 = (uint64_t)v9;
      else
        v31 = *(_QWORD *)v9;
      if (v30 >= 0)
        v32 = v9[23];
      else
        v32 = *((_QWORD *)v9 + 1);
      v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v31, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)"' with ", 7);
      v34 = (_QWORD *)std::ostream::operator<<();
      v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)": ", 2);
      v36 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v35, v36);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(a1 + 216, v9, (uint64_t)v9);
    v9 += 24;
  }
  if (*(_BYTE *)(a1 + 320))
  {
    *(_QWORD *)__x = 0;
    v61 = 0uLL;
    std::to_string(&v59, *(_QWORD *)(*((_QWORD *)*a2 + 3) + 104));
    v11 = std::string::insert(&v59, 0, "batch_config_");
  }
  else
  {
    if (!*(_BYTE *)(a1 + 344))
      goto LABEL_33;
    *(_QWORD *)__x = 0;
    v61 = 0uLL;
    std::to_string(&v59, *(_QWORD *)(*((_QWORD *)*a2 + 3) + 80));
    v11 = std::string::insert(&v59, 0, "width_config_");
  }
  v12 = v11->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v62 = v11->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v62 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v61) < 0)
    operator delete(*(void **)__x);
  *(_QWORD *)__x = v12;
  *(_QWORD *)&v61 = v62;
  *(_QWORD *)((char *)&v61 + 7) = *(_QWORD *)((char *)&v62 + 7);
  HIBYTE(v61) = v13;
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  v14 = espresso_network_select_configuration();
  if (v14 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"configuration name not supported: ", 34);
    if (v61 >= 0)
      v16 = __x;
    else
      v16 = *(std::vector<int>::value_type **)__x;
    if (v61 >= 0)
      v17 = HIBYTE(v61);
    else
      v17 = v61;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
  }
  if (SHIBYTE(v61) < 0)
  {
    operator delete(*(void **)__x);
    if (!v14)
      goto LABEL_46;
LABEL_33:
    std::vector<char const*>::vector(&v62, (a2[1] - *a2) >> 5);
    v18 = (a2[1] - *a2) >> 5;
    __x[0] = -1;
    std::vector<int>::vector((std::vector<int> *)&v59, v18, __x);
    std::vector<std::vector<int>>::vector(v58, 5uLL, (uint64_t)&v59);
    if (v59.__r_.__value_.__r.__words[0])
    {
      v59.__r_.__value_.__l.__size_ = v59.__r_.__value_.__r.__words[0];
      operator delete(v59.__r_.__value_.__l.__data_);
    }
    std::vector<int>::vector(&v57, (a2[1] - *a2) >> 5);
    if (a2[1] != *a2)
    {
      v19 = 0;
      do
      {
        if (espresso_buffer_unpack_tensor_shape())
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
          v38 = (uint64_t)&(*a2)[32 * v19];
          v39 = *(char *)(v38 + 23);
          if (v39 >= 0)
            v40 = (uint64_t)&(*a2)[32 * v19];
          else
            v40 = *(_QWORD *)v38;
          if (v39 >= 0)
            v41 = *(unsigned __int8 *)(v38 + 23);
          else
            v41 = *(_QWORD *)(v38 + 8);
          v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v40, v41);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)"' with ", 7);
          v43 = (_QWORD *)std::ostream::operator<<();
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)": ", 2);
          v45 = (const char *)espresso_get_last_error();
          v46 = strlen(v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, v46);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
        }
        v57.__begin_[v19] = 0;
        v20 = (uint64_t)&(*a2)[32 * v19];
        if (*(char *)(v20 + 23) < 0)
          v20 = *(_QWORD *)v20;
        *(_QWORD *)(v62 + 8 * v19++) = v20;
      }
      while (v19 < (a2[1] - *a2) >> 5);
    }
    if (espresso_network_change_input_blob_shapes_seq_rank())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to change input blob shapes with ", 49);
      v50 = (_QWORD *)std::ostream::operator<<();
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)": ", 2);
      v52 = (const char *)espresso_get_last_error();
      v53 = strlen(v52);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, (uint64_t)v52, v53);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
    }
    if (v57.__begin_)
    {
      v57.__end_ = v57.__begin_;
      operator delete(v57.__begin_);
    }
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v58;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
    if ((_QWORD)v62)
    {
      *((_QWORD *)&v62 + 1) = v62;
      operator delete((void *)v62);
    }
    goto LABEL_46;
  }
  if (v14)
    goto LABEL_33;
LABEL_46:
  result = espresso_plan_build();
  if ((_DWORD)result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v59, (uint64_t)"Espresso failed to build plan with ", 35);
    v47 = (_QWORD *)std::ostream::operator<<();
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)": ", 2);
    v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v59);
  }
  return result;
}

void sub_1ADFF2F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1ADFF2F48(void *a1, int a2)
{
  if (!a2)
    JUMPOUT(0x1ADFF2F50);
  __clang_call_terminate(a1);
}

void kaldi::quasar::ESNetworkPlan::RunClassic(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  size_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  const std::string *v21;
  const std::string *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t *v44;
  void *v45;
  _QWORD *v46;
  char *last_error;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  _QWORD *v51;
  char *v52;
  _BYTE v53[168];
  _OWORD __C[9];
  __int128 v55;
  __int128 v56;
  void *v57;
  uint64_t v58;
  int64x2_t v59;
  char *v60;
  _QWORD *v61;

  if (!*(_QWORD *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "plan_ != nullptr");
    goto LABEL_42;
  }
  kdebug_trace();
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 != v10)
  {
    while (1)
    {
      v11 = *(_DWORD *)(*((_QWORD *)v9 + 3) + 160);
      if (v11 == 131104)
      {
        v12 = espresso_network_bind_buffer();
        vDSP_vflt32(**((const int ***)v9 + 3), 1, *(float **)&__C[0], 1, *((vDSP_Length *)&v55 + 1));
      }
      else
      {
        if (v11 != 65568)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
          std::operator<<[abi:ne180100]<std::char_traits<char>>(__C, "kv.second->storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
          goto LABEL_42;
        }
        v12 = espresso_network_bind_buffer();
      }
      if (v12)
        break;
      v9 += 32;
      if (v9 == v10)
        goto LABEL_9;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
    last_error = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v46, last_error);
LABEL_42:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__C);
  }
LABEL_9:
  if (espresso_plan_execute_sync())
  {
    if (*(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      v50 = (_QWORD *)std::ostream::operator<<();
      v53[0] = 32;
      v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)v53, 1);
      v52 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v51, v52);
      goto LABEL_42;
    }
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_plan_execute_sync() failed: ", 37);
      v13 = (_QWORD *)std::ostream::operator<<();
      v53[0] = 32;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v53, 1);
      v15 = (const char *)espresso_get_last_error();
      v16 = strlen(v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
    }
  }
  else
  {
    if (a5)
    {
      v17 = *a5;
      v18 = a5[1];
      while (v18 != v17)
      {
        v20 = *--v18;
        v19 = v20;
        *v18 = 0;
        if (v20)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
      }
      a5[1] = v17;
      v21 = *(const std::string **)a3;
      v22 = *(const std::string **)(a3 + 8);
      if (*(const std::string **)a3 != v22)
      {
        while (!espresso_network_bind_buffer())
        {
          kaldi::quasar::EspressoNDArray::EspressoNDArray(__C, v53, 1);
          v23 = operator new();
          kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v23);
          *(_QWORD *)v23 = &off_1E5D32B00;
          v24 = v55;
          *(_OWORD *)(v23 + 160) = __C[8];
          *(_OWORD *)(v23 + 176) = v24;
          *(_OWORD *)(v23 + 192) = v56;
          v25 = __C[5];
          *(_OWORD *)(v23 + 96) = __C[4];
          *(_OWORD *)(v23 + 112) = v25;
          v26 = __C[7];
          *(_OWORD *)(v23 + 128) = __C[6];
          *(_OWORD *)(v23 + 144) = v26;
          v27 = __C[1];
          *(_OWORD *)(v23 + 32) = __C[0];
          *(_OWORD *)(v23 + 48) = v27;
          v28 = __C[3];
          *(_OWORD *)(v23 + 64) = __C[2];
          *(_OWORD *)(v23 + 80) = v28;
          v29 = v57;
          v57 = 0;
          *(_QWORD *)(v23 + 208) = v29;
          v31 = a5[1];
          v30 = (unint64_t)a5[2];
          if ((unint64_t)v31 >= v30)
          {
            v33 = v31 - *a5;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v30 - (_QWORD)*a5;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            v61 = a5 + 2;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v36);
            else
              v37 = 0;
            v38 = (uint64_t *)&v37[8 * v33];
            v39 = &v37[8 * v36];
            v60 = v39;
            *v38 = v23;
            v32 = v38 + 1;
            v59.i64[1] = (uint64_t)(v38 + 1);
            v41 = *a5;
            v40 = a5[1];
            if (v40 == *a5)
            {
              v43 = vdupq_n_s64((unint64_t)v40);
            }
            else
            {
              do
              {
                v42 = *--v40;
                *v40 = 0;
                *--v38 = v42;
              }
              while (v40 != v41);
              v43 = *(int64x2_t *)a5;
              v32 = (uint64_t *)v59.i64[1];
              v39 = v60;
            }
            *a5 = v38;
            a5[1] = v32;
            v59 = v43;
            v44 = a5[2];
            a5[2] = (uint64_t *)v39;
            v60 = (char *)v44;
            v58 = v43.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
          }
          else
          {
            *v31 = v23;
            v32 = v31 + 1;
          }
          a5[1] = v32;
          v45 = v57;
          v57 = 0;
          if (v45)
          {
            free(v45);
            v32 = a5[1];
          }
          kaldi::quasar::ComputeEngineBufferItf::SetName(*(v32 - 1), v21++);
          if (v21 == v22)
            goto LABEL_39;
        }
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__C);
        v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__C, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
        v49 = (char *)espresso_get_last_error();
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
        goto LABEL_42;
      }
    }
LABEL_39:
    kdebug_trace();
  }
}

void sub_1ADFF3434(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a31);
}

uint64_t kaldi::quasar::ESNetworkPlan::RunTraining(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  uint64_t result;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  const std::string *v14;
  const std::string *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  int64x2_t v36;
  uint64_t *v37;
  void *v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  char *last_error;
  _QWORD *v46;
  char *v47;
  _QWORD *v48;
  char *v49;
  _QWORD *v50;
  char *v51;
  _QWORD *v52;
  char *v53;
  char v54[168];
  _OWORD v55[11];
  void *v56;
  uint64_t v57;
  int64x2_t v58;
  char *v59;
  _QWORD *v60;

  if (!*(_QWORD *)(a1 + 168))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v55, "plan_ != nullptr");
    goto LABEL_37;
  }
  kaldi::quasar::ESNetworkPlan::PrepareInputsAndOutputs(a1, a2, (unsigned __int8 **)a3);
  v9 = *a2;
  v8 = a2[1];
  while (v9 != v8)
  {
    if (espresso_network_bind_buffer())
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
      v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to bind buffer for input=", 32);
      v40 = (char)v9[23];
      if (v40 >= 0)
        v41 = (uint64_t)v9;
      else
        v41 = *(_QWORD *)v9;
      if (v40 >= 0)
        v42 = v9[23];
      else
        v42 = *((_QWORD *)v9 + 1);
      v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, v41, v42);
      v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)", error=", 8);
      last_error = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, last_error);
      goto LABEL_37;
    }
    v9 += 32;
  }
  if (espresso_plan_execute_sync())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to run checkpoint network, error=", 40);
    v49 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, v49);
    goto LABEL_37;
  }
  get_main_function_name();
  if (espresso_network_set_function_name())
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v50 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to set function to main, error=", 38);
    v51 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v50, v51);
    goto LABEL_37;
  }
  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
    v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"Failed to run main network, error=", 34);
    v53 = (char *)espresso_get_last_error();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v52, v53);
    goto LABEL_37;
  }
  if (a5)
  {
    v11 = *a5;
    v12 = a5[1];
    while (v12 != v11)
    {
      v13 = *--v12;
      result = v13;
      *v12 = 0;
      if (v13)
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    a5[1] = v11;
    v14 = *(const std::string **)a3;
    v15 = *(const std::string **)(a3 + 8);
    if (*(const std::string **)a3 != v15)
    {
      while (!espresso_network_bind_buffer())
      {
        kaldi::quasar::EspressoNDArray::EspressoNDArray(v55, v54, 1);
        v16 = operator new();
        kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v16);
        *(_QWORD *)v16 = &off_1E5D32B00;
        v17 = v55[9];
        *(_OWORD *)(v16 + 160) = v55[8];
        *(_OWORD *)(v16 + 176) = v17;
        *(_OWORD *)(v16 + 192) = v55[10];
        v18 = v55[5];
        *(_OWORD *)(v16 + 96) = v55[4];
        *(_OWORD *)(v16 + 112) = v18;
        v19 = v55[7];
        *(_OWORD *)(v16 + 128) = v55[6];
        *(_OWORD *)(v16 + 144) = v19;
        v20 = v55[1];
        *(_OWORD *)(v16 + 32) = v55[0];
        *(_OWORD *)(v16 + 48) = v20;
        v21 = v55[3];
        *(_OWORD *)(v16 + 64) = v55[2];
        *(_OWORD *)(v16 + 80) = v21;
        v22 = v56;
        v56 = 0;
        *(_QWORD *)(v16 + 208) = v22;
        v24 = a5[1];
        v23 = (unint64_t)a5[2];
        if ((unint64_t)v24 >= v23)
        {
          v26 = v24 - *a5;
          if ((unint64_t)(v26 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v27 = v23 - (_QWORD)*a5;
          v28 = v27 >> 2;
          if (v27 >> 2 <= (unint64_t)(v26 + 1))
            v28 = v26 + 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v28;
          v60 = a5 + 2;
          if (v29)
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a5 + 2), v29);
          else
            v30 = 0;
          v31 = (uint64_t *)&v30[8 * v26];
          v32 = &v30[8 * v29];
          v59 = v32;
          *v31 = v16;
          v25 = v31 + 1;
          v58.i64[1] = (uint64_t)(v31 + 1);
          v34 = *a5;
          v33 = a5[1];
          if (v33 == *a5)
          {
            v36 = vdupq_n_s64((unint64_t)v33);
          }
          else
          {
            do
            {
              v35 = *--v33;
              *v33 = 0;
              *--v31 = v35;
            }
            while (v33 != v34);
            v36 = *(int64x2_t *)a5;
            v25 = (uint64_t *)v58.i64[1];
            v32 = v59;
          }
          *a5 = v31;
          a5[1] = v25;
          v58 = v36;
          v37 = a5[2];
          a5[2] = (uint64_t *)v32;
          v59 = (char *)v37;
          v57 = v36.i64[0];
          std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v57);
        }
        else
        {
          *v24 = v16;
          v25 = v24 + 1;
        }
        a5[1] = v25;
        v38 = v56;
        v56 = 0;
        if (v38)
        {
          free(v38);
          v25 = a5[1];
        }
        result = (uint64_t)kaldi::quasar::ComputeEngineBufferItf::SetName(*(v25 - 1), v14++);
        if (v14 == v15)
          return result;
      }
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v55);
      v46 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"espresso_network_bind_buffer failed: ", 37);
      v47 = (char *)espresso_get_last_error();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v46, v47);
LABEL_37:
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v55);
    }
  }
  return result;
}

void sub_1ADFF38CC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a31);
}

void kaldi::quasar::ESNetworkPlan::Run(uint64_t a1, __int128 **a2, __int128 **a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  const void *v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  char *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void **v21;
  void **v22;
  uint64_t v23;
  __int128 v24;
  char *v25;
  std::string v28;
  void **v29[34];
  char *v30;
  char *v31;
  unint64_t v32;
  _WORD v33[5];

  v33[0] = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (_BYTE *)v33 + 1, v33);
  v30 = 0;
  v31 = 0;
  v32 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v30, ((char *)a2[1] - (char *)*a2) >> 5);
  v8 = *a2;
  v9 = a2[1];
  if (*a2 != v9)
  {
    do
    {
      v10 = (const void *)*((_QWORD *)v8 + 3);
      if (!v10
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"es_data != nullptr", 18);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v29);
      }
      v12 = v11;
      if (*((char *)v8 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
      }
      else
      {
        v13 = *v8;
        v28.__r_.__value_.__r.__words[2] = *((_QWORD *)v8 + 2);
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
      }
      v14 = v12 + 32;
      v15 = v31;
      if ((unint64_t)v31 >= v32)
      {
        v17 = (v31 - v30) >> 5;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v19 = v32 - (_QWORD)v30;
        if ((uint64_t)(v32 - (_QWORD)v30) >> 4 > v18)
          v18 = v19 >> 4;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFE0)
          v20 = 0x7FFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        v29[4] = (void **)&v32;
        v21 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v32, v20);
        v22 = &v21[4 * v17];
        v29[0] = v21;
        v29[1] = v22;
        v29[3] = &v21[4 * v23];
        v24 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        v22[2] = (void *)v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)v22 = v24;
        memset(&v28, 0, sizeof(v28));
        v22[3] = v14;
        v29[2] = v22 + 4;
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v30, v29);
        v25 = v31;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v29);
        v31 = v25;
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
      }
      else
      {
        v16 = v28.__r_.__value_.__r.__words[2];
        *(_OWORD *)v31 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        *((_QWORD *)v15 + 2) = v16;
        *((_QWORD *)v15 + 3) = v14;
        v31 = v15 + 32;
      }
      v8 += 2;
    }
    while (v8 != v9);
  }
  if (HIBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v30, (uint64_t *)a3, v7, (uint64_t)a5);
  }
  else if (LOBYTE(v33[0]))
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v30, (uint64_t)a3, v7, a5);
  }
  v29[0] = (void **)&v30;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v29);
}

{
  uint64_t v7;
  __int128 *v8;
  __int128 *v9;
  uint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  int64x2_t v32;
  char *v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  int64x2_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  char *v44;
  char *v45;
  std::string::size_type v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  void **v51;
  void **v52;
  uint64_t v53;
  __int128 v54;
  char *v55;
  unsigned __int8 **v58;
  int64x2_t v59;
  __int128 v60;
  char v61;
  char *v62;
  char *v63;
  unint64_t v64;
  int64x2_t v65;
  char *v66;
  __int16 v67;
  std::string v68;
  char *v69;
  char **v70;
  _QWORD v71[3];

  v67 = 0;
  kaldi::quasar::ESNetworkPlan::SetNetworkFunctionName(a1, a3, (_BYTE *)&v67 + 1, &v67);
  v65 = 0uLL;
  v66 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 0;
  std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve((uint64_t *)&v62, ((char *)a2[1] - (char *)*a2) >> 5);
  v9 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v10 = *((_QWORD *)v9 + 3);
      if (!v10
      {
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 152))(v10);
        if (v12 == 1)
        {
          memset(&v68, 0, sizeof(v68));
          (*(void (**)(_QWORD, std::string *))(**((_QWORD **)v9 + 3) + 56))(*((_QWORD *)v9 + 3), &v68);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, std::string *, _QWORD))(*(_QWORD *)a1 + 24))(v71, a1, &v68, 0);
          v11 = (char *)v71[0];
          v15 = v65.i64[1];
          if (v65.i64[1] >= (unint64_t)v66)
          {
            v17 = (v65.i64[1] - v65.i64[0]) >> 3;
            if ((unint64_t)(v17 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v18 = (uint64_t)&v66[-v65.i64[0]] >> 2;
            if (v18 <= v17 + 1)
              v18 = v17 + 1;
            if ((unint64_t)&v66[-v65.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v19 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v19 = v18;
            *((_QWORD *)&v60 + 1) = &v66;
            if (v19)
              v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v19);
            else
              v20 = 0;
            v21 = v71[0];
            v27 = &v20[8 * v17];
            v28 = &v20[8 * v19];
            *(_QWORD *)&v60 = v28;
            v71[0] = 0;
            *(_QWORD *)v27 = v21;
            v16 = v27 + 8;
            v59.i64[1] = (uint64_t)(v27 + 8);
            v29 = (_QWORD *)v65.i64[1];
            v30 = (_QWORD *)v65.i64[0];
            if (v65.i64[1] == v65.i64[0])
            {
              v32 = vdupq_n_s64(v65.u64[1]);
            }
            else
            {
              do
              {
                v31 = *--v29;
                *v29 = 0;
                *((_QWORD *)v27 - 1) = v31;
                v27 -= 8;
              }
              while (v29 != v30);
              v32 = v65;
              v16 = (_QWORD *)v59.i64[1];
              v28 = (char *)v60;
            }
            v65.i64[0] = (uint64_t)v27;
            v65.i64[1] = (uint64_t)v16;
            v59 = v32;
            v39 = v66;
            v66 = v28;
            *(_QWORD *)&v60 = v39;
            v58 = (unsigned __int8 **)v32.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v58);
          }
          else
          {
            v71[0] = 0;
            *(_QWORD *)v65.i64[1] = v11;
            v16 = (_QWORD *)(v15 + 8);
          }
          v65.i64[1] = (uint64_t)v16;
          v40 = v71[0];
          v71[0] = 0;
          if (v40)
            (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
          if (v68.__r_.__value_.__r.__words[0])
          {
            v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
            operator delete(v68.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          if (v12 != 2)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Unsupported input dimensions", 28);
            kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v58);
          }
          v59 = 0u;
          v60 = 0u;
          v58 = (unsigned __int8 **)&unk_1E5D34170;
          v61 = 0;
          (*(void (**)(_QWORD, unsigned __int8 ***))(**((_QWORD **)v9 + 3) + 32))(*((_QWORD *)v9 + 3), &v58);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, unsigned __int8 ***))(*(_QWORD *)a1 + 32))(v71, a1, &v58);
          v11 = (char *)v71[0];
          v13 = v65.i64[1];
          if (v65.i64[1] >= (unint64_t)v66)
          {
            v22 = (v65.i64[1] - v65.i64[0]) >> 3;
            if ((unint64_t)(v22 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v23 = (uint64_t)&v66[-v65.i64[0]] >> 2;
            if (v23 <= v22 + 1)
              v23 = v22 + 1;
            if ((unint64_t)&v66[-v65.i64[0]] >= 0x7FFFFFFFFFFFFFF8)
              v24 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v24 = v23;
            v70 = &v66;
            if (v24)
              v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v66, v24);
            else
              v25 = 0;
            v26 = v71[0];
            v33 = &v25[8 * v22];
            v34 = &v25[8 * v24];
            v69 = v34;
            v71[0] = 0;
            *(_QWORD *)v33 = v26;
            v14 = v33 + 8;
            v68.__r_.__value_.__r.__words[2] = (std::string::size_type)(v33 + 8);
            v35 = (_QWORD *)v65.i64[1];
            v36 = (_QWORD *)v65.i64[0];
            if (v65.i64[1] == v65.i64[0])
            {
              v38 = vdupq_n_s64(v65.u64[1]);
            }
            else
            {
              do
              {
                v37 = *--v35;
                *v35 = 0;
                *((_QWORD *)v33 - 1) = v37;
                v33 -= 8;
              }
              while (v35 != v36);
              v38 = v65;
              v14 = (_QWORD *)v68.__r_.__value_.__r.__words[2];
              v34 = v69;
            }
            v65.i64[0] = (uint64_t)v33;
            v65.i64[1] = (uint64_t)v14;
            *(int64x2_t *)&v68.__r_.__value_.__r.__words[1] = v38;
            v41 = v66;
            v66 = v34;
            v69 = v41;
            v68.__r_.__value_.__r.__words[0] = v38.i64[0];
            std::__split_buffer<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::~__split_buffer((uint64_t)&v68);
          }
          else
          {
            v71[0] = 0;
            *(_QWORD *)v65.i64[1] = v11;
            v14 = (_QWORD *)(v13 + 8);
          }
          v65.i64[1] = (uint64_t)v14;
          v42 = v71[0];
          v71[0] = 0;
          if (v42)
            (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v58);
        }
      }
      if (*((char *)v9 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v68, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
      }
      else
      {
        v43 = *v9;
        v68.__r_.__value_.__r.__words[2] = *((_QWORD *)v9 + 2);
        *(_OWORD *)&v68.__r_.__value_.__l.__data_ = v43;
      }
      v44 = v11 + 32;
      v45 = v63;
      if ((unint64_t)v63 >= v64)
      {
        v47 = (v63 - v62) >> 5;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 59)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v49 = v64 - (_QWORD)v62;
        if ((uint64_t)(v64 - (_QWORD)v62) >> 4 > v48)
          v48 = v49 >> 4;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFE0)
          v50 = 0x7FFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        *((_QWORD *)&v60 + 1) = &v64;
        v51 = (void **)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)&v64, v50);
        v52 = &v51[4 * v47];
        v58 = (unsigned __int8 **)v51;
        v59.i64[0] = (uint64_t)v52;
        *(_QWORD *)&v60 = &v51[4 * v53];
        v54 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        v52[2] = (void *)v68.__r_.__value_.__r.__words[2];
        *(_OWORD *)v52 = v54;
        memset(&v68, 0, sizeof(v68));
        v52[3] = v44;
        v59.i64[1] = (uint64_t)(v52 + 4);
        std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer((uint64_t *)&v62, &v58);
        v55 = v63;
        std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&v58);
        v63 = v55;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
      }
      else
      {
        v46 = v68.__r_.__value_.__r.__words[2];
        *(_OWORD *)v63 = *(_OWORD *)&v68.__r_.__value_.__l.__data_;
        *((_QWORD *)v45 + 2) = v46;
        *((_QWORD *)v45 + 3) = v44;
        v63 = v45 + 32;
      }
      v9 += 2;
    }
    while (v9 != v8);
  }
  if (HIBYTE(v67))
  {
    kaldi::quasar::ESNetworkPlan::RunNitro(a1, (uint64_t *)&v62, (uint64_t *)a3, v7, (uint64_t)a5);
  }
  else if ((_BYTE)v67)
  {
    kaldi::quasar::ESNetworkPlan::RunTraining(a1, (unsigned __int8 **)&v62, (uint64_t)a3, v7, a5);
  }
  else
  {
    kaldi::quasar::ESNetworkPlan::RunClassic(a1, (unsigned __int8 **)&v62, (uint64_t)a3, v7, a5);
  }
  v58 = (unsigned __int8 **)&v62;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
  v58 = (unsigned __int8 **)&v65;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v58);
}

void sub_1ADFF3BB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&a17);
  if (a16 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADFF3BE4);
}

void sub_1ADFF3BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 120);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_1ADFF3C78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADFF41E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v6;
  va_list va;

  va_start(va, a4);
  v6 = *(_QWORD *)(v4 - 104);
  *(_QWORD *)(v4 - 104) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  *(_QWORD *)(v4 - 104) = v4 - 200;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 104));
  *(_QWORD *)(v4 - 200) = v4 - 176;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v4 - 200));
  _Unwind_Resume(a1);
}

__n128 kaldi::quasar::ESTensorData::Copy@<Q0>(kaldi::quasar::ESTensorData *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 result;
  void *__dst[2];
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;

  if (*((_QWORD *)this + 25))
  {
    v4 = *((_QWORD *)this + 17);
    v5 = *((_QWORD *)this + 15) * *((_QWORD *)this + 14) * *((_QWORD *)this + 16);
    v30 = 0u;
    v31 = 0u;
    v6 = v5 * v4;
    *(_OWORD *)__dst = 0u;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v32 = 0;
    LODWORD(v31) = 65568;
    kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)__dst, v5 * v4);
    v7 = __dst[0];
    v8 = *((_OWORD *)this + 11);
    v29 = *((_OWORD *)this + 10);
    v30 = v8;
    v9 = *((_QWORD *)this + 24);
    v10 = *((_OWORD *)this + 7);
    v25 = *((_OWORD *)this + 6);
    v26 = v10;
    v11 = *((_OWORD *)this + 9);
    v27 = *((_OWORD *)this + 8);
    v28 = v11;
    v12 = *((_OWORD *)this + 3);
    *(_OWORD *)__dst = *((_OWORD *)this + 2);
    v22 = v12;
    v13 = *((__n128 *)this + 5);
    v23 = *((_OWORD *)this + 4);
    v24 = v13;
    __dst[0] = v7;
    v14 = *((_QWORD *)this + 25);
    *(_QWORD *)&v31 = v9;
    *((_QWORD *)&v31 + 1) = v14;
    memcpy(v7, *((const void **)this + 4), 4 * v6);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    v32 = 0;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)__dst = 0u;
    LODWORD(v31) = 65568;
  }
  v15 = operator new();
  kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf((_QWORD *)v15);
  *(_QWORD *)v15 = &off_1E5D32B00;
  v16 = v30;
  *(_OWORD *)(v15 + 160) = v29;
  *(_OWORD *)(v15 + 176) = v16;
  *(_OWORD *)(v15 + 192) = v31;
  v17 = v26;
  *(_OWORD *)(v15 + 96) = v25;
  *(_OWORD *)(v15 + 112) = v17;
  v18 = v28;
  *(_OWORD *)(v15 + 128) = v27;
  *(_OWORD *)(v15 + 144) = v18;
  v19 = v22;
  *(_OWORD *)(v15 + 32) = *(_OWORD *)__dst;
  *(_OWORD *)(v15 + 48) = v19;
  result = v24;
  *(_OWORD *)(v15 + 64) = v23;
  *(__n128 *)(v15 + 80) = result;
  *(_QWORD *)(v15 + 208) = v32;
  *a2 = v15;
  return result;
}

void sub_1ADFF4424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  if (a31)
    free(a31);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ESTensorData::CopyToMatrix(uint64_t a1, int32x2_t *a2)
{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>((uint64_t *)(a1 + 32), a2);
}

{
  kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>((uint64_t *)(a1 + 32), a2);
}

float kaldi::quasar::ESTensorData::CopyToVector(uint64_t a1, uint64_t a2)
{
  return kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>((uint64_t *)(a1 + 32), a2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 112) * *(_QWORD *)(a1 + 128) * *(_QWORD *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(a2, *(float **)(a1 + 32), (float *)(*(_QWORD *)(a1 + 32) + 4 * v2), v2);
}

char *kaldi::quasar::ESTensorData::CopyToStdVector(uint64_t a1, char *a2)
{
  unint64_t v2;

  v2 = *(_QWORD *)(a1 + 120) * *(_QWORD *)(a1 + 112) * *(_QWORD *)(a1 + 128) * *(_QWORD *)(a1 + 136);
  return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a2, *(char **)(a1 + 32), *(_QWORD *)(a1 + 32) + 4 * v2, v2);
}

void *kaldi::quasar::ESTensorData::CopyFromImpl(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *lpsrc)
{
  char *v3;

  if (!v3)
    __cxa_bad_cast();
  return kaldi::quasar::EspressoNDArray::CopyTo((kaldi::quasar::EspressoNDArray *)(v3 + 32), (kaldi::quasar::ESTensorData *)((char *)this + 32));
}

void *kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, const kaldi::quasar::ComputeEngineBufferItf *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  _QWORD v11[34];

  v9 = (*(uint64_t (**)(const kaldi::quasar::ComputeEngineBufferItf *))(*(_QWORD *)a2 + 128))(a2);
  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    goto LABEL_6;
  }
  if (a4 - a3 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, "srcend - srcstart >= 0");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  return memcpy((void *)(*((_QWORD *)this + 4) + 4 * a5), (const void *)(v9 + 4 * a3), 4 * (a4 - a3));
}

float kaldi::quasar::ESTensorData::FlatRangeCopy(kaldi::quasar::ESTensorData *this, int *a2, unsigned int a3, int a4)
{
  int v4;
  float result;
  float *v6;
  uint64_t v7;
  int v8;
  _QWORD v9[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "length >= 0");
    goto LABEL_10;
  }
  v4 = *((_DWORD *)this + 48);
  if (v4 != 65568)
  {
    if (v4 == 131104)
    {
      memcpy((void *)(*((_QWORD *)this + 4) + 4 * a4), a2, 4 * a3);
      return result;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "unsupported storage type.");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v9);
  }
  if (a3)
  {
    v6 = (float *)*((_QWORD *)this + 4);
    v7 = a3;
    do
    {
      v8 = *a2++;
      result = (float)v8;
      *v6++ = (float)v8;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_1ADFF46AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

_DWORD *kaldi::quasar::ESTensorData::FlatRangeCopy(_DWORD *this, float *a2, unsigned int a3, int a4)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  float v7;
  _QWORD v8[34];

  if ((a3 & 0x80000000) != 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "length >= 0");
    goto LABEL_10;
  }
  v4 = this[48];
  if (v4 == 65568)
    return memcpy((void *)(*((_QWORD *)this + 4) + 4 * a4), a2, 4 * a3);
  if (v4 != 131104)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v8, "unsupported storage type.");
LABEL_10:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v8);
  }
  if (a3)
  {
    v5 = (_DWORD *)*((_QWORD *)this + 4);
    v6 = a3;
    do
    {
      v7 = *a2++;
      *v5++ = (int)v7;
      --v6;
    }
    while (v6);
  }
  return this;
}

void sub_1ADFF477C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

float kaldi::quasar::ESTensorData::AssignScalar(kaldi::quasar::ESTensorData *this, int a2, int a3)
{
  int v3;
  float result;
  _QWORD v5[34];

  v3 = *((_DWORD *)this + 48);
  if (v3 == 65568)
  {
    result = (float)a2;
    *(float *)(*((_QWORD *)this + 4) + 4 * a3) = (float)a2;
  }
  else
  {
    if (v3 != 131104)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
    }
    *(_DWORD *)(*((_QWORD *)this + 4) + 4 * a3) = a2;
  }
  return result;
}

uint64_t kaldi::quasar::ESTensorData::AssignScalar(uint64_t this, float a2, int a3)
{
  int v3;
  _QWORD v4[34];

  v3 = *(_DWORD *)(this + 192);
  if (v3 == 131104)
  {
    *(_DWORD *)(*(_QWORD *)(this + 32) + 4 * a3) = (int)a2;
  }
  else
  {
    if (v3 != 65568)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "unsupported storage type.");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
    }
    *(float *)(*(_QWORD *)(this + 32) + 4 * a3) = a2;
  }
  return this;
}

float kaldi::quasar::ESTensorData::GetFloatScalar(kaldi::quasar::ESTensorData *this, int a2)
{
  _QWORD v3[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v3);
  }
  return *(float *)(*((_QWORD *)this + 4) + 4 * a2);
}

uint64_t kaldi::quasar::ESTensorData::GetWritableDataFloat(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 65568)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_FLOAT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetDataInt32(kaldi::quasar::ESTensorData *this)
{
  _QWORD v2[34];

  if (*((_DWORD *)this + 48) != 131104)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v2);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v2, "t_.buffer.storage_type == ESPRESSO_STORAGE_TYPE_INT32");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v2);
  }
  return *((_QWORD *)this + 4);
}

uint64_t kaldi::quasar::ESTensorData::GetNumDims(kaldi::quasar::ESTensorData *this)
{
  return *((unsigned int *)this + 50);
}

uint64_t kaldi::quasar::ESTensorData::GetDimSize(kaldi::quasar::ESTensorData *this, int a2)
{
  _QWORD v4[11];

  v4[10] = *MEMORY[0x1E0C80C00];
  espresso_buffer_unpack_tensor_shape();
  return v4[a2];
}

void kaldi::quasar::ESTensorData::Reshape()
{
  _QWORD v0[34];

  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v0);
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v0, "Unimplemented TODO");
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v0);
}

kaldi::quasar::ESNetworkConfig *kaldi::quasar::ESNetworkConfig::ESNetworkConfig(kaldi::quasar::ESNetworkConfig *this, const kaldi::quasar::ESNetworkConfig *a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_QWORD *)this = off_1E5D33BC8;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  v4 = *((_QWORD *)a2 + 3);
  *((_QWORD *)this + 2) = *((_QWORD *)a2 + 2);
  *((_QWORD *)this + 3) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *((_WORD *)this + 16) = *((_WORD *)a2 + 16);
  *(_QWORD *)this = &off_1E5D330B0;
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v7;
  }
  std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)this + 8, (const void ***)a2 + 8);
  if (*((char *)a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 88), *((const std::string::value_type **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v8 = *(_OWORD *)((char *)a2 + 88);
    *((_QWORD *)this + 13) = *((_QWORD *)a2 + 13);
    *(_OWORD *)((char *)this + 88) = v8;
  }
  v9 = (std::string *)((char *)this + 112);
  if (*((char *)a2 + 135) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *((const std::string::value_type **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v10 = *((_OWORD *)a2 + 7);
    *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return this;
}

void sub_1ADFF4BC4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v4);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v3, *(_QWORD **)(v1 + 72));
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  kaldi::quasar::ComputeEngineConfigItf::~ComputeEngineConfigItf((kaldi::quasar::ComputeEngineConfigItf *)v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::Matrix<float>>(uint64_t *a1, int32x2_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[34];
  unint64_t v24;
  _BYTE v25[8];
  _QWORD v26[10];

  v26[9] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  espresso_buffer_unpack_tensor_shape();
  v4 = a1[21];
  if (v4 >= 3)
  {
    v5 = 0;
    while (*(_QWORD *)&v25[8 * v5] == 1)
    {
      if (v24 - 1 == ++v5)
      {
        v5 = v24 - 1;
        break;
      }
    }
    if (v24 <= v5 + 1)
      v6 = v5 + 1;
    else
      v6 = v24;
    v7 = v6 - 1;
    v8 = v5;
    while (1)
    {
      v9 = v8 + 1;
      if (v8 + 1 >= v24)
        break;
      v10 = v26[v8++];
      if (v10 != 1)
      {
        v7 = v9 - 1;
        v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v24)
    {
      v11 = v24 - v7 - 2;
      v12 = &v26[v7 + 1];
      while (1)
      {
        v13 = *v12++;
        if (v13 != 1)
          break;
        if (!--v11)
          goto LABEL_17;
      }
      if (v9 < v24)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v24)
    {
LABEL_25:
      v16 = (uint64_t *)&v25[8 * v5];
      goto LABEL_26;
    }
    v14 = *(_QWORD *)&v25[8 * v6];
    v15 = (uint64_t *)&v25[8 * v5];
LABEL_22:
    v17 = *v15;
    kaldi::Matrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17)
      return;
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    v15 = (uint64_t *)v25;
    v14 = v26[0];
    goto LABEL_22;
  }
  v16 = (uint64_t *)v25;
LABEL_26:
  v14 = *v16;
  kaldi::Matrix<float>::Resize(a2, 1, *v16, 1, 0);
  v17 = 1;
LABEL_27:
  v18 = 0;
  v19 = *a1;
  do
  {
    if (v14)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD *)a2 + 4 * a2[2].i32[0] * (int)v18;
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v19 + 4 * v21);
        ++v21;
        v20 -= 4;
      }
      while (v14 != v21);
      v19 -= v20;
    }
    ++v18;
  }
  while (v18 != v17);
}

void sub_1ADFF4E4C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::EspressoNDArray::ToMatrix<kaldi::CuMatrix<float>>(uint64_t *a1, int32x2_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[34];
  unint64_t v24;
  _BYTE v25[8];
  _QWORD v26[10];

  v26[9] = *MEMORY[0x1E0C80C00];
  v24 = 0;
  espresso_buffer_unpack_tensor_shape();
  v4 = a1[21];
  if (v4 >= 3)
  {
    v5 = 0;
    while (*(_QWORD *)&v25[8 * v5] == 1)
    {
      if (v24 - 1 == ++v5)
      {
        v5 = v24 - 1;
        break;
      }
    }
    if (v24 <= v5 + 1)
      v6 = v5 + 1;
    else
      v6 = v24;
    v7 = v6 - 1;
    v8 = v5;
    while (1)
    {
      v9 = v8 + 1;
      if (v8 + 1 >= v24)
        break;
      v10 = v26[v8++];
      if (v10 != 1)
      {
        v7 = v9 - 1;
        v6 = v9;
        break;
      }
    }
    if (v7 + 2 < v24)
    {
      v11 = v24 - v7 - 2;
      v12 = &v26[v7 + 1];
      while (1)
      {
        v13 = *v12++;
        if (v13 != 1)
          break;
        if (!--v11)
          goto LABEL_17;
      }
      if (v9 < v24)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Tensor rank is greater than 2: ", 31);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
      }
      goto LABEL_25;
    }
LABEL_17:
    if (v9 >= v24)
    {
LABEL_25:
      v16 = (uint64_t *)&v25[8 * v5];
      goto LABEL_26;
    }
    v14 = *(_QWORD *)&v25[8 * v6];
    v15 = (uint64_t *)&v25[8 * v5];
LABEL_22:
    v17 = *v15;
    kaldi::CuMatrix<float>::Resize(a2, *v15, v14, 1, 0);
    if (!v17)
      return;
    goto LABEL_27;
  }
  if (v4 != 1)
  {
    v15 = (uint64_t *)v25;
    v14 = v26[0];
    goto LABEL_22;
  }
  v16 = (uint64_t *)v25;
LABEL_26:
  v14 = *v16;
  kaldi::CuMatrix<float>::Resize(a2, 1, *v16, 1, 0);
  v17 = 1;
LABEL_27:
  v18 = 0;
  v19 = *a1;
  do
  {
    if (v14)
    {
      v20 = 0;
      v21 = 0;
      v22 = *(_QWORD *)&a2[1] + 4 * a2[3].i32[0] * (int)v18;
      do
      {
        *(_DWORD *)(v22 + 4 * v21) = *(_DWORD *)(v19 + 4 * v21);
        ++v21;
        v20 -= 4;
      }
      while (v14 != v21);
      v19 -= v20;
    }
    ++v18;
  }
  while (v18 != v17);
}

void sub_1ADFF5088(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

float kaldi::quasar::EspressoNDArray::ToVector<kaldi::CuVector<float>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  float result;
  uint64_t v6;
  uint64_t v7;

  v3 = a1[11] * a1[10] * a1[12] * a1[13];
  v4 = *a1;
  kaldi::CuVector<float>::Resize(a2, v3, 1);
  if (v3)
  {
    v6 = 0;
    v7 = *(_QWORD *)(a2 + 8);
    do
    {
      result = *(float *)(v4 + 4 * v6);
      *(float *)(v7 + 4 * v6++) = result;
    }
    while (v3 != v6);
  }
  return result;
}

char *std::vector<int>::__assign_with_size[abi:ne180100]<float *,float *>(_QWORD *a1, float *a2, float *a3, unint64_t a4)
{
  float *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  float v16;
  char *v17;
  char *v18;
  unint64_t v19;
  float *v20;
  uint64_t v21;
  float v22;
  char *v23;
  char *v24;
  float v25;
  char *v26;
  char *v27;
  float v28;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 2)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 2;
    if (v19 >= a4)
    {
      v26 = result;
      if (a2 != a3)
      {
        v27 = result;
        do
        {
          v28 = *v6++;
          *(_DWORD *)v27 = (int)v28;
          v27 += 4;
          v26 += 4;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v26 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        v21 = 4 * v19;
        do
        {
          v22 = *v6++;
          *(_DWORD *)result = (int)v22;
          result += 4;
          v21 -= 4;
        }
        while (v21);
      }
      v23 = v12;
      if (v20 != a3)
      {
        v24 = v12;
        do
        {
          v25 = *v20++;
          *(_DWORD *)v24 = (int)v25;
          v24 += 4;
          v23 += 4;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<int>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_DWORD *)v15 = (int)v16;
        v15 += 4;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

void *kaldi::quasar::EspressoNDArray::CopyTo(kaldi::quasar::EspressoNDArray *this, kaldi::quasar::EspressoNDArray *a2)
{
  uint64_t v2;
  _QWORD v6[55];

  v6[54] = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 11) * *((_QWORD *)this + 10) * *((_QWORD *)this + 12) * *((_QWORD *)this + 13);
  if (v2 != *((_QWORD *)a2 + 11) * *((_QWORD *)a2 + 10) * *((_QWORD *)a2 + 12) * *((_QWORD *)a2 + 13))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "total_elements == dst.Volume()");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v6);
  }
  espresso_buffer_unpack_tensor_shape();
  espresso_buffer_unpack_tensor_shape();
  return memmove(*(void **)a2, *(const void **)this, 4 * v2);
}

void sub_1ADFF53D0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<int>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  int *v6;
  float *v7;
  uint64_t v8;
  int v9;

  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = *(float **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1)
      v8 = 1;
    else
      v8 = a2[1] - *a2;
    do
    {
      v9 = *v6++;
      *v7++ = (float)v9;
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) != 0)
    *((_QWORD *)a1 + 21) = 2;
  else
    *((_QWORD *)a1 + 21) = 1;
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromStdVector<std::vector<float>>(kaldi::quasar::EspressoNDArray *a1, int **a2, char a3)
{
  int *v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;

  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, a2[1] - *a2);
  v6 = *a2;
  if (a2[1] != *a2)
  {
    v7 = *(_DWORD **)a1;
    if ((unint64_t)(a2[1] - *a2) <= 1)
      v8 = 1;
    else
      v8 = a2[1] - *a2;
    do
    {
      v9 = *v6++;
      *v7++ = v9;
      --v8;
    }
    while (v8);
  }
  if ((a3 & 1) != 0)
    *((_QWORD *)a1 + 21) = 2;
  else
    *((_QWORD *)a1 + 21) = 1;
  return espresso_buffer_pack_tensor_shape();
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::CuMatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  int v7;
  char *v8;
  size_t v9;

  v4 = *(int *)(a2 + 16);
  v5 = *(_DWORD *)(a2 + 20);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, (int)v4 * (uint64_t)v5);
  *((_QWORD *)a1 + 21) = 2;
  result = espresso_buffer_pack_tensor_shape();
  if (v5 >= 1)
  {
    v7 = 0;
    v8 = *(char **)a1;
    v9 = 4 * v4;
    do
    {
      result = (uint64_t)memcpy(v8, (const void *)(*(_QWORD *)(a2 + 8) + 4 * *(_DWORD *)(a2 + 24) * v7++), v9);
      v8 += v9;
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t kaldi::quasar::EspressoNDArray::FromMatrix<kaldi::MatrixBase<float>>(kaldi::quasar::EspressoNDArray *a1, uint64_t a2)
{
  int v4;
  int v5;
  uint64_t result;
  int v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  int v11;

  v4 = kaldi::MatrixBase<float>::NumRows(a2);
  v5 = kaldi::MatrixBase<float>::NumCols(a2);
  kaldi::quasar::EspressoNDArray::InitBufferMemory(a1, v5 * v4);
  *((_QWORD *)a1 + 21) = 2;
  result = espresso_buffer_pack_tensor_shape();
  if (v4 >= 1)
  {
    v7 = 0;
    v8 = *(char **)a1;
    v9 = 4 * v5;
    do
    {
      v10 = *(_QWORD *)a2;
      v11 = *(_DWORD *)(a2 + 16);
      kaldi::MatrixBase<float>::NumCols(a2);
      result = (uint64_t)memcpy(v8, (const void *)(v10 + 4 * v11 * v7++), v9);
      v8 += v9;
    }
    while (v4 != v7);
  }
  return result;
}

_QWORD *kaldi::quasar::ESTensorData::ESTensorData(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  size_t v8;
  uint64_t v9;

  v4 = kaldi::quasar::ComputeEngineBufferItf::ComputeEngineBufferItf(a1);
  *v4 = &off_1E5D32B00;
  v4[25] = 0;
  v4[26] = 0;
  v5 = *(uint64_t **)a2;
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v6)
  {
    v7 = v6 >> 3;
    if (v7 <= 1)
      v7 = 1;
    v8 = 1;
    do
    {
      v9 = *v5++;
      v8 *= v9;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = 1;
  }
  kaldi::quasar::EspressoNDArray::InitBufferMemory((kaldi::quasar::EspressoNDArray *)(v4 + 4), v8);
  espresso_buffer_pack_tensor_shape();
  a1[25] = (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3;
  return a1;
}

void sub_1ADFF5810(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 208);
  *(_QWORD *)(v1 + 208) = 0;
  if (v3)
    free(v3);
  kaldi::quasar::ComputeEngineBufferItf::~ComputeEngineBufferItf((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::operator==[abi:ne180100]<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>(uint64_t a1, _QWORD *a2)
{
  uint64_t *v2;
  const void **v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;

  if (*(_QWORD *)(a1 + 24) != a2[3])
    return 0;
  v2 = *(uint64_t **)(a1 + 16);
  if (!v2)
    return 1;
  while (1)
  {
    v4 = (const void **)(v2 + 2);
    result = (uint64_t)std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a2, (unsigned __int8 *)v2 + 16);
    if (!result)
      return result;
    v6 = *((unsigned __int8 *)v2 + 39);
    if ((v6 & 0x80u) == 0)
      v7 = *((unsigned __int8 *)v2 + 39);
    else
      v7 = v2[3];
    v8 = *(unsigned __int8 *)(result + 39);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *(_QWORD *)(result + 24);
    if (v7 != v8)
      return 0;
    v12 = *(unsigned __int8 **)(result + 16);
    v10 = (unsigned __int8 *)(result + 16);
    v11 = v12;
    if (v9 >= 0)
      v13 = v10;
    else
      v13 = v11;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*v4, v13, v2[3]))
        return 0;
    }
    else if (*((_BYTE *)v2 + 39))
    {
      while (*(unsigned __int8 *)v4 == *v13)
      {
        v4 = (const void **)((char *)v4 + 1);
        ++v13;
        if (!--v6)
          goto LABEL_19;
      }
      return 0;
    }
LABEL_19:
    v2 = (uint64_t *)*v2;
    if (!v2)
      return 1;
  }
}

uint64_t std::vector<std::pair<std::string,espresso_buffer_t const*>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    v10 = a6;
  }
  else
  {
    v8 = a7;
    do
    {
      v9 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v8 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v9;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v8 - 8) = *(_QWORD *)(a3 - 8);
      v8 -= 32;
      v7 -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v8;
    v10 = v15;
  }
  v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,espresso_buffer_t const*>>,std::reverse_iterator<std::pair<std::string,espresso_buffer_t const*>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

_QWORD *quasar::RegionsBitmapData::RegionsBitmapData(_QWORD *this)
{
  *this = 0;
  this[1] = 0;
  this[2] = 0;
  this[7] = 0;
  this[8] = 0;
  return this;
}

void quasar::RegionsBitmapData::loadAndEraseFromJson(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double Longitude;
  double Latitude;
  std::string::size_type v10;
  std::string::size_type v11;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  void *v16;
  int v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  __int128 *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  std::string __p;
  _BYTE __str[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned __int8 v56;

  std::string::basic_string[abi:ne180100]<0>(&v55, "bitmap-file");
  quasar::PTree::getAndEraseString(a2, &v55, (std::string *)__str);
  std::string::operator=((std::string *)a1, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  if ((char)v56 < 0)
    operator delete((void *)v55);
  std::string::basic_string[abi:ne180100]<0>(__str, "lon-left");
  *(double *)(a1 + 24) = quasar::readLongitude(a2, (uint64_t)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  std::string::basic_string[abi:ne180100]<0>(__str, "lon-right");
  Longitude = quasar::readLongitude(a2, (uint64_t)__str);
  *(double *)(a1 + 32) = Longitude;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    Longitude = *(double *)(a1 + 32);
  }
  if (*(double *)(a1 + 24) >= Longitude)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v32 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The value of ", 13);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"lon-right", 9);
    v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" is not greater than ", 21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v34, "lon-left");
    goto LABEL_40;
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "lat-bottom");
  *(double *)(a1 + 40) = quasar::readLatitude(a2, (uint64_t)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  std::string::basic_string[abi:ne180100]<0>(__str, "lat-top");
  Latitude = quasar::readLatitude(a2, (uint64_t)__str);
  *(double *)(a1 + 48) = Latitude;
  if ((__str[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__str);
    Latitude = *(double *)(a1 + 48);
  }
  if (*(double *)(a1 + 40) >= Latitude)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The value of ", 13);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"lat-top", 7);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" is not greater than ", 21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v37, "lat-bottom");
LABEL_40:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 23))
      goto LABEL_17;
    goto LABEL_39;
  }
  if (!*(_QWORD *)(a1 + 8))
  {
LABEL_39:
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__str, "Bitmap file name cannot be empty!");
    goto LABEL_40;
  }
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(&v55, ".pgm");
  v10 = *(unsigned __int8 *)(a1 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *(_QWORD *)(a1 + 8);
  if ((v56 & 0x80u) == 0)
    v11 = v56;
  else
    v11 = *((_QWORD *)&v55 + 1);
  if (v10 < v11)
  {
LABEL_58:
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"The bitmap file ", 16);
    v24 = *(char *)(a1 + 23);
    if (v24 >= 0)
      v25 = a1;
    else
      v25 = *(_QWORD *)a1;
    if (v24 >= 0)
      v26 = *(unsigned __int8 *)(a1 + 23);
    else
      v26 = *(_QWORD *)(a1 + 8);
    v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, v25, v26);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)" has unexpected suffix, should be ", 34);
    if ((v56 & 0x80u) == 0)
      v29 = &v55;
    else
      v29 = (__int128 *)v55;
    if ((v56 & 0x80u) == 0)
      v30 = v56;
    else
      v30 = *((_QWORD *)&v55 + 1);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  std::string::basic_string((std::string *)__str, (const std::string *)a1, v10 - v11, v11, (std::allocator<char> *)&__p);
  if (__str[23] >= 0)
    v12 = __str[23];
  else
    v12 = *(_QWORD *)&__str[8];
  v13 = v56;
  if ((v56 & 0x80u) != 0)
    v13 = *((_QWORD *)&v55 + 1);
  if (v12 != v13)
  {
LABEL_56:
    if ((__str[23] & 0x80) != 0)
      operator delete(*(void **)__str);
    goto LABEL_58;
  }
  if ((v56 & 0x80u) == 0)
    v14 = &v55;
  else
    v14 = (__int128 *)v55;
  if ((__str[23] & 0x80) != 0)
  {
    v16 = *(void **)__str;
    v17 = memcmp(*(const void **)__str, v14, *(size_t *)&__str[8]);
    operator delete(v16);
    if (v17)
      goto LABEL_58;
  }
  else if (__str[23])
  {
    v15 = 0;
    while (__str[v15] == *((_BYTE *)v14 + v15))
    {
      if (__str[23] == ++v15)
        goto LABEL_42;
    }
    goto LABEL_56;
  }
LABEL_42:
  quasar::filesystem::Path::makeAbsolute(a3, a1, &__p);
  (*(void (**)(_BYTE *__return_ptr, uint64_t, std::string *))(*(_QWORD *)a4 + 16))(__str, a4, &__p);
  v18 = (_QWORD *)(a1 + 56);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)v18, (__int128 *)__str);
  v19 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v20 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if ((*(int (**)(_QWORD))(*(_QWORD *)*v18 + 16))(*v18) < 1
    || (*(int (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18) < 1)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Cannot use degenerate regions bitmap width=", 43);
    (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 16))(*v18);
    v31 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)" height=", 8);
    (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  if (quasar::gLogLevel >= 3)
  {
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v40 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Loaded regions bitmap width=", 28);
    (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 16))(*v18);
    v22 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" height=", 8);
    (*(void (**)(_QWORD))(*(_QWORD *)*v18 + 24))(*v18);
    std::ostream::operator<<();
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__str);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v56 < 0)
    operator delete((void *)v55);
}

double quasar::readLongitude(uint64_t a1, uint64_t a2)
{
  double result;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD v10[17];

  result = quasar::PTree::getAndEraseDouble(a1, (__int128 *)a2);
  if (result < -180.0 || result > 180.0)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"The value ", 10);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" of ", 4);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " is not a valid longitude");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  return result;
}

double quasar::readLatitude(uint64_t a1, uint64_t a2)
{
  double result;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD v10[17];

  result = quasar::PTree::getAndEraseDouble(a1, (__int128 *)a2);
  if (result < -90.0 || result > 90.0)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"The value ", 10);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" of ", 4);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, " is not a valid latitude");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v10);
  }
  return result;
}

uint64_t quasar::RegionsBitmapData::lookupBitmapColorForLocation(quasar::RegionsBitmapData *this, const quasar::Location *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  quasar::Bitmap *v8;
  double Latitude;
  double v11;
  _OWORD v14[17];

  if (quasar::Location::isUnknown(a2))
  {
    memset(v14, 0, sizeof(v14));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v14, "Internal error, expecting a real location at this point");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v14);
  }
  v4 = *((double *)this + 4) - *((double *)this + 3);
  v6 = *((double *)this + 5);
  v5 = *((double *)this + 6);
  v7 = (quasar::corrective_reranking::VoiceEditingWFST::Path::getWeight(a2) - *((double *)this + 3)) / v4;
  Latitude = quasar::Location::getLatitude(a2);
  if (v7 < 0.0 || v7 > 1.0)
    return 0;
  v11 = (Latitude - *((double *)this + 5)) / (v5 - v6);
  if (v11 < 0.0 || v11 > 1.0)
    return 0;
  else
    return quasar::Bitmap::nearestNeighborSampleAt(*((quasar::Bitmap **)this + 7), v8, v7, v11);
}

kaldi::quasar::FofeLmEvaluator *kaldi::quasar::FofeLmEvaluator::FofeLmEvaluator(kaldi::quasar::FofeLmEvaluator *this, const kaldi::quasar::NnlmDecoderWord *a2, kaldi::InferenceNetItf *a3, kaldi::InferenceNetItf *a4, float a5, int a6, int a7, int a8)
{
  unsigned int v11;
  _QWORD v13[34];

  *(_QWORD *)kaldi::quasar::RnnlmEvaluator::RnnlmEvaluator(this, a2, a3, a4, a5, a6, a7, a8, 0) = &off_1E5D331C0;
  v11 = kaldi::quasar::NnlmDecoderWord::BosSymbol(a2);
  *((_DWORD *)this + 117) = kaldi::quasar::NnlmDecoderWord::GetWordId(a2, v11);
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_QWORD *)this + 59) = &unk_1E5D34170;
  *((_BYTE *)this + 512) = 0;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 65) = &unk_1E5D34170;
  *((_BYTE *)this + 560) = 0;
  (*(void (**)(kaldi::InferenceNetItf *))(*(_QWORD *)a3 + 168))(a3);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"This is a FOFE model", 20);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v13);
  }
  return this;
}

void sub_1ADFF6534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::quasar::RnnlmEvaluator *v9;

  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9 + 520);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9 + 472);
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(v9);
  _Unwind_Resume(a1);
}

void kaldi::quasar::FofeLmEvaluator::~FofeLmEvaluator(kaldi::quasar::FofeLmEvaluator *this)
{
  void **v2;
  uint64_t v3;
  void *__p[2];
  unsigned __int8 v5;
  _QWORD v6[34];

  *(_QWORD *)this = &off_1E5D331C0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    kaldi::quasar::FofeLmEvaluator::Report((uint64_t *)__p, this);
    if ((v5 & 0x80u) == 0)
      v2 = __p;
    else
      v2 = (void **)__p[0];
    if ((v5 & 0x80u) == 0)
      v3 = v5;
    else
      v3 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v2, v3);
    if ((char)v5 < 0)
      operator delete(__p[0]);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v6);
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 520);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 472);
  kaldi::quasar::RnnlmEvaluator::~RnnlmEvaluator(this);
}

{
  kaldi::quasar::FofeLmEvaluator::~FofeLmEvaluator(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::quasar::FofeLmEvaluator::Report(kaldi::quasar::FofeLmEvaluator *this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v7[11];
  char v8;
  uint64_t v9;
  char v10;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v7);
  v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"HIT vs MISS: ", 13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)"lm-score ", 9);
  v2 = (_QWORD *)std::ostream::operator<<();
  v10 = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)&v10, 1);
  v3 = (_QWORD *)std::ostream::operator<<();
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"penultimate ", 12);
  v5 = (_QWORD *)std::ostream::operator<<();
  v10 = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v10, 1);
  std::ostream::operator<<();
  std::stringbuf::str();
  v7[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v7 + *(_QWORD *)(v7[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v7[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v8 < 0)
    operator delete((void *)v7[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v9);
}

void sub_1ADFF6764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::FofeLmEvaluator::ShouldCacheNgram(uint64_t a1, _QWORD *a2)
{
  return *(_BYTE *)(a1 + 40) || *(int *)(a1 + 464) > (unint64_t)((uint64_t)(a2[1] - *a2) >> 2);
}

float kaldi::quasar::FofeLmEvaluator::CalculateSingleNgramAfterCacheMiss(uint64_t a1, const void **a2)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  void *v24;
  __int128 v25;
  __int128 v26;
  uint64_t *v27;
  void *__p;
  void *v29;
  uint64_t v30;

  if (*(_BYTE *)(a1 + 40))
    return kaldi::quasar::DnnlmEvaluator::CalculateSingleNgramAfterCacheMiss(a1, (uint64_t)a2);
  v5 = *a2;
  v6 = (uint64_t)a2[1] - 4;
  v7 = (v6 - (uint64_t)*a2) >> 2;
  __p = 0;
  v29 = 0;
  v30 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, v5, v6, v7);
  v27 = 0;
  if (kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::Get(a1 + 136, (uint64_t)&__p, &v27))
  {
    ++*(_DWORD *)(a1 + 296);
  }
  else
  {
    ++*(_DWORD *)(a1 + 300);
    v9 = *a2;
    v8 = a2[1];
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 48))(*(_QWORD *)(a1 + 24));
    v11 = v10;
    v12 = ((unint64_t)(v8 - v9) >> 2) - 1;
    kaldi::CuMatrix<float>::Resize((int32x2_t *)(a1 + 520), v12, v10, 1, 0);
    v13 = v11 - 1;
    if (v11 >= 1)
    {
      v14 = 0;
      for (i = 0; i != v11; ++i)
      {
        if ((int)v12 >= 1)
        {
          v16 = 0;
          v17 = -4 * v13;
          v18 = (float *)(*(_QWORD *)(a1 + 528) + v14);
          v19 = 4 * *(int *)(a1 + 544);
          do
          {
            v20 = (int *)((char *)*a2 + v17);
            if (v16 < v11 + ~(_DWORD)i)
              v20 = (int *)(a1 + 468);
            *v18 = (float)*v20;
            ++v16;
            v17 += 4;
            v18 = (float *)((char *)v18 + v19);
          }
          while (v12 != v16);
        }
        --v13;
        v14 += 4;
      }
    }
    v27 = kaldi::LRUCacheMap<std::vector<int>,kaldi::CuVector<float>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>>::InsertInPlace((unint64_t *)(a1 + 136), (uint64_t)&__p);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24), a1 + 520, a1 + 472, 1);
    kaldi::CuVector<float>::Resize((uint64_t)v27, *(unsigned int *)(a1 + 488), 1);
    v21 = *(_QWORD *)(a1 + 480);
    v22 = *(_QWORD *)(a1 + 504);
    DWORD2(v25) = *(_DWORD *)(a1 + 488);
    HIDWORD(v25) = 1;
    *(_QWORD *)&v26 = *(_QWORD *)(a1 + 496);
    *((_QWORD *)&v26 + 1) = v22;
    v24 = &unk_1E5D29D40;
    *(_QWORD *)&v25 = v21;
    kaldi::CuVectorBase<float>::CopyRowsFromMat((uint64_t)v27, (uint64_t)&v24);
    v24 = &unk_1E5D29D40;
    v25 = 0u;
    v26 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
  }
  v23 = -(float)((*(float (**)(_QWORD, uint64_t *, _QWORD))(**(_QWORD **)(a1 + 24) + 136))(*(_QWORD *)(a1 + 24), v27, *((unsigned int *)a2[1] - 1))- *(float *)(a1 + 44));
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
  return v23;
}

void sub_1ADFF6A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  _OWORD *v17;

  *v17 = 0u;
  v17[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

_QWORD *EARContextAwareLDModel::EARContextAwareLDModel(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v13;
  NSObject *v14;
  std::runtime_error *exception;
  id v16;
  std::string buf;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  *a1 = &off_1E5D16F18;
  a1[1] = *a2;
  v3 = a2[1];
  a1[2] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a1[3] = 0;
  v6 = (void *)MEMORY[0x1E0C99E98];
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:");
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "fileURLWithPath:isDirectory:", v7, 1);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v16 = 0;
  objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v8, &v16);
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = v16;
  v11 = (void *)a1[3];
  a1[3] = v9;

  if (v10)
  {
    objc_msgSend(v10, "localizedDescription");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v14 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v13;
      _os_log_impl(&dword_1AD756000, v14, OS_LOG_TYPE_DEFAULT, "Error loading context-aware model: %@", (uint8_t *)&buf, 0xCu);
    }
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    if (v13)
      objc_msgSend(v13, "ear_toString");
    else
      memset(&buf, 0, sizeof(buf));
    std::runtime_error::runtime_error(exception, &buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }

  return a1;
}

void sub_1ADFF6CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  id *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  __cxa_free_exception(v21);

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
  _Unwind_Resume(a1);
}

void EARContextAwareLDModel::makePrediction(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  double v19;
  void *v20;
  uint64_t v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  BOOL v26;
  unsigned __int8 **v27;
  unsigned __int8 **v28;
  uint64_t i;
  unsigned __int8 *v30;
  uint64_t j;
  _QWORD **v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  unsigned __int8 **v38;
  unsigned __int8 **v39;
  uint64_t k;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  NSObject *v47;
  void **v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  _BYTE *v52;
  unsigned __int8 *v53;
  unsigned __int8 *v54;
  id v55;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;
  void *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  void *v66;
  NSObject *v67;
  void *v68;
  uint64_t v69;
  void *v70;
  uint64_t **v71;
  unsigned __int8 *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  double v85;
  void *v86;
  id v87;
  NSObject *v88;
  void *v89;
  id v90;
  void *v91;
  uint64_t **v92;
  unsigned __int8 *v93;
  uint64_t *v94;
  NSObject *v95;
  void *v96;
  NSObject *v97;
  id v98;
  void *v99;
  uint64_t **v100;
  unsigned __int8 *v101;
  void *v102;
  NSObject *v103;
  unsigned int v104;
  id v105;
  void *v106;
  void *v107;
  void *v108;
  NSObject *v109;
  void *v110;
  uint64_t v111;
  void *v112;
  uint64_t **v113;
  _BYTE *v114;
  unsigned __int8 *v115;
  uint64_t *v116;
  NSObject *v117;
  void *v118;
  NSObject *v119;
  void *v120;
  uint64_t **v121;
  _BYTE *v122;
  unsigned __int8 *v123;
  uint64_t *v124;
  NSObject *v125;
  void *v126;
  NSObject *v127;
  id v128;
  void *v129;
  uint64_t *v130;
  NSObject *v131;
  void *v132;
  NSObject *v133;
  id v134;
  void *v135;
  uint64_t *v136;
  NSObject *v137;
  void *v138;
  NSObject *v139;
  id v140;
  void *v141;
  uint64_t *v142;
  NSObject *v143;
  void *v144;
  NSObject *v145;
  id v146;
  void *v147;
  uint64_t *v148;
  NSObject *v149;
  void *v150;
  NSObject *v151;
  id v152;
  void *v153;
  uint64_t v154;
  NSObject *v155;
  void *v156;
  void *v157;
  void *v158;
  NSObject *v159;
  void *v160;
  uint64_t v161;
  _QWORD *v162;
  void *v163;
  void *v164;
  void *v165;
  uint64_t v166;
  __int128 *v167;
  double v168;
  void *v169;
  std::string *p_buf;
  void *v171;
  void *v172;
  double v173;
  double v174;
  __int128 *v175;
  __int128 *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  void *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  id v185;
  void *v189;
  void *v190;
  id v191;
  id v192;
  id v193;
  id v194;
  id v195;
  id v196;
  id v197;
  id v198;
  id v199;
  id v200;
  id v201;
  id v202;
  id v203;
  uint64_t **v204;
  uint64_t *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  id v209;
  id v210;
  void *__p;
  _QWORD *v212;
  uint64_t v213;
  _BYTE v214[12];
  __int16 v215;
  void *v216;
  void *v217;
  void *v218;
  void *v219;
  void *v220;
  std::string buf;
  void *v222;
  char v223;
  void *v224;
  char v225;
  _QWORD v226[22];

  v226[19] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD **)(a1 + 8);
  v181 = v5[6];
  v182 = v5[7];
  v183 = v5[3];
  v184 = v5[4];
  v6 = (v184 - v183) / 48;
  v7 = objc_alloc(MEMORY[0x1E0C9E978]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  v220 = v8;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v220, 1);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  v210 = 0;
  v189 = (void *)objc_msgSend(v7, "initWithShape:dataType:error:", v9, 65600, &v210);
  v191 = v210;

  if (!v191)
  {
    if (v184 != v183)
    {
      v12 = 0;
      do
        objc_msgSend(v189, "setObject:atIndexedSubscript:", &unk_1E5D5BFC8, v12++);
      while (v6 != v12);
    }
    v13 = objc_alloc(MEMORY[0x1E0C9E978]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    v219 = v14;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v219, 1);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v209 = 0;
    v190 = (void *)objc_msgSend(v13, "initWithShape:dataType:error:", v15, 65600, &v209);
    v191 = v209;

    if (v191)
    {
      v16 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v191, "description");
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v17;
        _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

      }
      quasar::LDResult::LDResult(a4, 0);
      goto LABEL_142;
    }
    if (v184 != v183)
    {
      v18 = 0;
      v19 = 1.0;
      do
      {
        objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 1.0 / (double)(unint64_t)v6, v19);
        v20 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v190, "setObject:atIndexedSubscript:", v20, v18);

        ++v18;
      }
      while (v6 != v18);
    }
    v21 = *(_QWORD *)(a1 + 8);
    v206 = 0;
    v207 = 0;
    v205 = (uint64_t *)&v206;
    v23 = (unsigned __int8 *)(a3 + 8);
    v22 = *(unsigned __int8 **)a3;
    if (*(_QWORD *)a3 != a3 + 8)
    {
      do
      {
        std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v22 + 32, (__int128 *)v22 + 2);
        v24 = (unsigned __int8 *)*((_QWORD *)v22 + 1);
        if (v24)
        {
          do
          {
            v25 = v24;
            v24 = *(unsigned __int8 **)v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            v25 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
            v26 = *(_QWORD *)v25 == (_QWORD)v22;
            v22 = v25;
          }
          while (!v26);
        }
        v22 = v25;
      }
      while (v25 != v23);
    }
    if (*(_BYTE *)(a3 + 48))
      std::set<quasar::language_detector::Locale>::insert[abi:ne180100]<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>((uint64_t *)&v205, *(unsigned __int8 ***)(a3 + 24), (unsigned __int8 **)(a3 + 32));
    if (*(_BYTE *)(a3 + 144))
    {
      v28 = *(unsigned __int8 ***)(a3 + 120);
      v27 = *(unsigned __int8 ***)(a3 + 128);
      while (v28 != v27)
      {
        std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, (uint64_t *)&v206, v28, (__int128 *)v28);
        v28 += 6;
      }
    }
    for (i = 0; i != 3; ++i)
    {
      v30 = (unsigned __int8 *)(a3 + qword_1AE1924D0[i]);
      if (v30[48])
        std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v30, (__int128 *)(a3 + qword_1AE1924D0[i]));
    }
    for (j = 0; j != 3; ++j)
    {
      v32 = (_QWORD **)(a3 + qword_1AE1924E8[j]);
      if (*((_BYTE *)v32 + 24))
      {
        v35 = (unsigned __int8 *)*v32;
        v34 = (unsigned __int8 *)(v32 + 1);
        v33 = v35;
        if (v35 != v34)
        {
          do
          {
            std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(&v205, v33 + 32, (__int128 *)v33 + 2);
            v36 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
            if (v36)
            {
              do
              {
                v37 = v36;
                v36 = *(unsigned __int8 **)v36;
              }
              while (v36);
            }
            else
            {
              do
              {
                v37 = (unsigned __int8 *)*((_QWORD *)v33 + 2);
                v26 = *(_QWORD *)v37 == (_QWORD)v33;
                v33 = v37;
              }
              while (!v26);
            }
            v33 = v37;
          }
          while (v37 != v34);
        }
      }
    }
    v39 = *(unsigned __int8 ***)(v21 + 24);
    v38 = *(unsigned __int8 ***)(v21 + 32);
    for (k = (v182 - v181) / 24; v39 != v38; v39 += 6)
      std::__tree<quasar::language_detector::Locale>::__erase_unique<quasar::language_detector::Locale>(&v205, v39);
    if (v207)
    {
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)&buf);
      quasar::language_detector::operator<<(&buf, (quasar::language_detector::Locale *)(v205 + 4));
      v41 = v205;
      v42 = (uint64_t *)v205[1];
      if (v42)
      {
        do
        {
          v43 = v42;
          v42 = (uint64_t *)*v42;
        }
        while (v42);
      }
      else
      {
        do
        {
          v43 = (uint64_t *)v41[2];
          v26 = *v43 == (_QWORD)v41;
          v41 = v43;
        }
        while (!v26);
      }
      if (v43 != (uint64_t *)&v206)
      {
        do
        {
          v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&buf, (uint64_t)", ", 2);
          quasar::language_detector::operator<<(v44, (quasar::language_detector::Locale *)(v43 + 4));
          v45 = (uint64_t *)v43[1];
          if (v45)
          {
            do
            {
              v46 = v45;
              v45 = (uint64_t *)*v45;
            }
            while (v45);
          }
          else
          {
            do
            {
              v46 = (uint64_t *)v43[2];
              v26 = *v46 == (_QWORD)v43;
              v43 = v46;
            }
            while (!v26);
          }
          v43 = v46;
        }
        while (v46 != (uint64_t *)&v206);
      }
      v47 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        v48 = v213 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)v214 = 136315138;
        *(_QWORD *)&v214[4] = v48;
        _os_log_impl(&dword_1AD756000, v47, OS_LOG_TYPE_DEFAULT, "Unsupported locales (%s) found in context, will be ignored", v214, 0xCu);
        if (SHIBYTE(v213) < 0)
          operator delete(__p);
      }

      buf.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words
                                + *(_QWORD *)(buf.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                                  + 24);
      buf.__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
      if (v225 < 0)
        operator delete(v224);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1AF44D094](v226);
      k = (v182 - v181) / 24;
    }
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v205, v206);
    v212 = 0;
    v213 = 0;
    __p = &v212;
    if (*(_BYTE *)(a3 + 48))
    {
      if (&__p != (void **)(a3 + 24))
        std::__tree<quasar::language_detector::Locale>::__assign_multi<std::__tree_const_iterator<quasar::language_detector::Locale,std::__tree_node<quasar::language_detector::Locale,void *> *,long>>((uint64_t **)&__p, *(__int128 **)(a3 + 24), (__int128 *)(a3 + 32));
    }
    else
    {
      v49 = *(unsigned __int8 **)a3;
      if (*(unsigned __int8 **)a3 != v23)
      {
        do
        {
          std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>((uint64_t **)&__p, v49 + 32, (__int128 *)v49 + 2);
          v50 = (unsigned __int8 *)*((_QWORD *)v49 + 1);
          if (v50)
          {
            do
            {
              v51 = v50;
              v50 = *(unsigned __int8 **)v50;
            }
            while (v50);
          }
          else
          {
            do
            {
              v51 = (unsigned __int8 *)*((_QWORD *)v49 + 2);
              v26 = *(_QWORD *)v51 == (_QWORD)v49;
              v49 = v51;
            }
            while (!v26);
          }
          v49 = v51;
        }
        while (v51 != v23);
      }
    }
    std::unordered_set<std::string>::unordered_set<std::__wrap_iter<std::string*>>((uint64_t)&v205, *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 96), *(unsigned __int8 **)(*(_QWORD *)(a1 + 8) + 104));
    v204 = &v205;
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithCapacity:", v208);
    v180 = (void *)objc_claimAutoreleasedReturnValue();
    v52 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 26;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
    memmove(v52, "acousticLanguagePosteriors", 0x1AuLL);
    v52[26] = 0;
    v53 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(&v205, (unsigned __int8 *)&buf);
    v54 = v53;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!v54)
        goto LABEL_98;
    }
    else if (!v53)
    {
      goto LABEL_98;
    }
    v55 = objc_alloc(MEMORY[0x1E0C9E978]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", k);
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    v218 = v56;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v218, 1);
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    v203 = 0;
    v58 = (void *)objc_msgSend(v55, "initWithShape:dataType:error:", v57, 65600, &v203);
    v191 = v203;

    if (v191)
    {
      v59 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v191, "description");
        v60 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v60;
        _os_log_impl(&dword_1AD756000, v59, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

      }
      quasar::LDResult::LDResult(a4, 0);
      goto LABEL_140;
    }
    if (v182 == v181)
      goto LABEL_91;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    do
    {
      v64 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a2, (const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48) + v61));
      if (a2 + 8 == v64)
      {
        v65 = 0.0;
      }
      else
      {
        v65 = *(double *)(v64 + 56);
        v62 = 1;
      }
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", v65);
      v66 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v58, "setObject:atIndexedSubscript:", v66, v63);

      ++v63;
      v61 += 24;
    }
    while (k != v63);
    if ((v62 & 1) == 0)
    {
LABEL_91:
      v67 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1AD756000, v67, OS_LOG_TYPE_DEFAULT, "No supported languages found in acousticPosteriors", (uint8_t *)&buf, 2u);
      }

      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", 1.0 / (double)(unint64_t)k);
      v68 = (void *)objc_claimAutoreleasedReturnValue();
      if (v182 != v181)
      {
        v69 = 0;
        do
          objc_msgSend(v58, "setObject:atIndexedSubscript:", v68, v69++);
        while (k != v69);
      }

    }
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "acousticLanguagePosteriors", 26);
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "setObject:forKeyedSubscript:", v58, v70);

LABEL_98:
    v71 = v204;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 16;
    memmove(&buf, "dictationLocales", 0x10uLL);
    buf.__r_.__value_.__s.__data_[16] = 0;
    v72 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v71, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v72)
    {
      v73 = *(_QWORD *)(a1 + 8);
      v202 = 0;
      v74 = *(_QWORD *)(v73 + 24);
      v75 = *(_QWORD *)(v73 + 32);
      v76 = objc_alloc(MEMORY[0x1E0C9E978]);
      v77 = (v75 - v74) / 48;
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v77);
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
      objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &buf, 1);
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      v80 = (void *)objc_msgSend(v76, "initWithShape:dataType:error:", v79, 65600, &v202);

      v81 = v80;
      if (v80)
      {
        if (v75 != v74)
        {
          v82 = 0;
          v83 = 0;
          do
          {
            v84 = (void *)MEMORY[0x1E0CB37E8];
            if (std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>((uint64_t)&__p, (unsigned __int8 **)(*(_QWORD *)(v73 + 24) + v82)))
            {
              v85 = 1.0;
            }
            else
            {
              v85 = 0.0;
            }
            objc_msgSend(v84, "numberWithDouble:", v85);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v80, "setObject:atIndexedSubscript:", v86, v83);

            ++v83;
            v82 += 48;
          }
          while (v77 != v83);
        }
        v81 = v80;
        v87 = v80;
      }

      v191 = v202;
      if (v191)
      {
        v88 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v191, "description");
          v89 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v89;
          _os_log_impl(&dword_1AD756000, v88, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

        }
        v90 = v80;
        quasar::LDResult::LDResult(a4, 0);
        goto LABEL_141;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "dictationLocales", 16);
      v91 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v80, v91);

    }
    v92 = v204;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 22;
    memmove(&buf, "currentDictationLocale", 0x16uLL);
    buf.__r_.__value_.__s.__data_[22] = 0;
    v93 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v92, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v93)
    {
      if (*(_BYTE *)(a3 + 104))
      {
        v94 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v201 = 0;
        localeToMultiArray((const Locale *)(a3 + 56), v94, (uint64_t)&v201);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v201;
        if (v191)
        {
          v95 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v96 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v96;
            _os_log_impl(&dword_1AD756000, v95, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v98 = v90;
      }
      else
      {
        v97 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v97, OS_LOG_TYPE_DEFAULT, "context.currentDictationLanguage is empty, setting currentDictationLocale to zeroes.", (uint8_t *)&buf, 2u);
        }

        v98 = v189;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "currentDictationLocale", 22);
      v99 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v98, v99);

    }
    v100 = v204;
    *((_BYTE *)&buf.__r_.__value_.__s + 23) = 16;
    memmove(&buf, "wasLocaleToggled", 0x10uLL);
    buf.__r_.__value_.__s.__data_[16] = 0;
    v101 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v100, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (!v101)
      goto LABEL_148;
    if (*(_BYTE *)(a3 + 113))
    {
      v102 = (void *)MEMORY[0x1E0CB37E8];
    }
    else
    {
      v103 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl(&dword_1AD756000, v103, OS_LOG_TYPE_DEFAULT, "context.wasLanguageToggled not set, defaulting to false.", (uint8_t *)&buf, 2u);
      }

      v104 = *(unsigned __int8 *)(a3 + 113);
      v102 = (void *)MEMORY[0x1E0CB37E8];
      if (!*(_BYTE *)(a3 + 113))
        goto LABEL_136;
    }
    v104 = *(_BYTE *)(a3 + 112) != 0;
LABEL_136:
    objc_msgSend(v102, "numberWithDouble:", (double)v104);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    v105 = objc_alloc(MEMORY[0x1E0C9E978]);
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v6);
    v106 = (void *)objc_claimAutoreleasedReturnValue();
    v217 = v106;
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", &v217, 1);
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    v200 = 0;
    v108 = (void *)objc_msgSend(v105, "initWithShape:dataType:error:", v107, 65600, &v200);
    v191 = v200;

    if (v191)
    {
      v109 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v191, "description");
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v110;
        _os_log_impl(&dword_1AD756000, v109, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

      }
      quasar::LDResult::LDResult(a4, 0);

LABEL_140:
      v90 = v58;
LABEL_141:

      std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v205);
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&__p, v212);
LABEL_142:

      goto LABEL_143;
    }
    if (v184 != v183)
    {
      v111 = 0;
      do
        objc_msgSend(v108, "setObject:atIndexedSubscript:", v58, v111++);
      while (v6 != v111);
    }
    objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "wasLocaleToggled", 16);
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v180, "setObject:forKeyedSubscript:", v108, v112);

LABEL_148:
    v113 = v204;
    v114 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 27;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
    memmove(v114, "multilingualKeyboardLocales", 0x1BuLL);
    v114[27] = 0;
    v115 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v113, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v115)
    {
      if (*(_BYTE *)(a3 + 144))
      {
        std::set<quasar::language_detector::Locale>::set[abi:ne180100]<std::__wrap_iter<quasar::language_detector::Locale const*>>((uint64_t)&buf, *(unsigned __int8 ***)(a3 + 120), *(unsigned __int8 ***)(a3 + 128));
        *(_QWORD *)v214 = &buf;
        v116 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v199 = 0;
        BOOLeanFunctionToMultiArray<EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)::$_2>((uint64_t *)v214, v116, (uint64_t)&v199);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v199;
        if (v191)
        {
          v117 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v118 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v214 = 136315394;
            *(_QWORD *)&v214[4] = "Failed to allocate array";
            v215 = 2112;
            v216 = v118;
            _os_log_impl(&dword_1AD756000, v117, OS_LOG_TYPE_DEFAULT, "%s, error %@", v214, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&buf, (_QWORD *)buf.__r_.__value_.__l.__size_);
          goto LABEL_141;
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&buf, (_QWORD *)buf.__r_.__value_.__l.__size_);
      }
      else
      {
        v119 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v119, OS_LOG_TYPE_DEFAULT, "context.multilingualKeyboardLanguages not set, setting multilingualKeyboardLocales to zeroes.", (uint8_t *)&buf, 2u);
        }

        v90 = v189;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "multilingualKeyboardLocales", 27);
      v120 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v90, v120);

    }
    v121 = v204;
    v122 = operator new(0x20uLL);
    buf.__r_.__value_.__l.__size_ = 25;
    buf.__r_.__value_.__r.__words[2] = 0x8000000000000020;
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
    memmove(v122, "keyboardConvoLocalePriors", 0x19uLL);
    v122[25] = 0;
    v123 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v121, (unsigned __int8 *)&buf);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf.__r_.__value_.__l.__data_);
    if (v123)
    {
      if (*(_BYTE *)(a3 + 176))
      {
        v124 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v198 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 152, v124, (uint64_t)&v198);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v198;
        if (v191)
        {
          v125 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v126 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v126;
            _os_log_impl(&dword_1AD756000, v125, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v128 = v90;
      }
      else
      {
        v127 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v127, OS_LOG_TYPE_DEFAULT, "context.keyboardConvoLanguagePriors not set, setting keyboardConvoLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        v128 = v190;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "keyboardConvoLocalePriors", 25);
      v129 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v128, v129);

    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "keyboardGlobalLocalePriors", 0x1AuLL))
    {
      if (*(_BYTE *)(a3 + 208))
      {
        v130 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v197 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 184, v130, (uint64_t)&v197);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v197;
        if (v191)
        {
          v131 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v132 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v132;
            _os_log_impl(&dword_1AD756000, v131, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v134 = v90;
      }
      else
      {
        v133 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v133, OS_LOG_TYPE_DEFAULT, "context.keyboardGlobalLanguagePriors not set, setting keyboardGlobalLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        v134 = v190;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "keyboardGlobalLocalePriors", 26);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v134, v135);

    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "previousMessageLocale", 0x15uLL))
    {
      if (*(_BYTE *)(a3 + 264))
      {
        v136 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v196 = 0;
        localeToMultiArray((const Locale *)(a3 + 216), v136, (uint64_t)&v196);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v196;
        if (v191)
        {
          v137 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v138 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v138;
            _os_log_impl(&dword_1AD756000, v137, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v140 = v90;
      }
      else
      {
        v139 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v139, OS_LOG_TYPE_DEFAULT, "context.previousMessageLanguage not set, setting previousMessageLocale to zeroes.", (uint8_t *)&buf, 2u);
        }

        v140 = v189;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "previousMessageLocale", 21);
      v141 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v140, v141);

    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "globalLastKeyboardUsed", 0x16uLL))
    {
      if (*(_BYTE *)(a3 + 320))
      {
        v142 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v195 = 0;
        localeToMultiArray((const Locale *)(a3 + 272), v142, (uint64_t)&v195);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v195;
        if (v191)
        {
          v143 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v144 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v144;
            _os_log_impl(&dword_1AD756000, v143, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v146 = v90;
      }
      else
      {
        v145 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v145, OS_LOG_TYPE_DEFAULT, "context.globalLastKeyboardUsed not set, setting globalLastKeyboardUsed to zeroes.", (uint8_t *)&buf, 2u);
        }

        v146 = v189;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "globalLastKeyboardUsed", 22);
      v147 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v146, v147);

    }
    if (EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(&v204, "dictationLocalePriors", 0x15uLL))
    {
      if (*(_BYTE *)(a3 + 352))
      {
        v148 = (uint64_t *)(*(_QWORD *)(a1 + 8) + 24);
        v194 = 0;
        mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(a3 + 328, v148, (uint64_t)&v194);
        v90 = (id)objc_claimAutoreleasedReturnValue();
        v191 = v194;
        if (v191)
        {
          v149 = (id)earLanguageDetectorLog;
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
          {
            objc_msgSend(v191, "description");
            v150 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v150;
            _os_log_impl(&dword_1AD756000, v149, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

          }
          quasar::LDResult::LDResult(a4, 0);
          goto LABEL_141;
        }
        v152 = v90;
      }
      else
      {
        v151 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v151, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl(&dword_1AD756000, v151, OS_LOG_TYPE_DEFAULT, "context.dictationLanguagePriors not set, setting dictationLocalePriors to uniform probability.", (uint8_t *)&buf, 2u);
        }

        v152 = v190;
      }
      objc_msgSend(MEMORY[0x1E0CB3940], "ear_stringWithStringView:", "dictationLocalePriors", 21);
      v153 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v180, "setObject:forKeyedSubscript:", v152, v153);

    }
    v193 = 0;
    v154 = objc_msgSend(objc_alloc(MEMORY[0x1E0C9E900]), "initWithDictionary:error:", v180, &v193);
    v191 = v193;
    if (v191)
    {
      v58 = (void *)v154;
      v155 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v191, "description");
        v156 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to create feature provider";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v156;
        _os_log_impl(&dword_1AD756000, v155, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

      }
      quasar::LDResult::LDResult(a4, 0);
    }
    else
    {
      v185 = objc_alloc_init(MEMORY[0x1E0C9E9A8]);
      objc_msgSend(v185, "setUsesCPUOnly:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 144));
      v157 = *(void **)(a1 + 24);
      v192 = 0;
      objc_msgSend(v157, "predictionFromFeatures:options:error:", v154, v185, &v192);
      v158 = (void *)objc_claimAutoreleasedReturnValue();
      v191 = v192;
      if (v191)
      {
        v58 = (void *)v154;
        v159 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v191, "description");
          v160 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Error during prediction";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v160;
          _os_log_impl(&dword_1AD756000, v159, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

        }
        quasar::LDResult::LDResult(a4, 0);
      }
      else
      {
        v161 = *(_QWORD *)(a1 + 8);
        v162 = (_QWORD *)(v161 + 120);
        if (*(char *)(v161 + 143) < 0)
          v162 = (_QWORD *)*v162;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v162);
        v163 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v158, "featureValueForName:", v163);
        v164 = (void *)objc_claimAutoreleasedReturnValue();
        v58 = (void *)v154;
        objc_msgSend(v164, "dictionaryValue");
        v165 = (void *)objc_claimAutoreleasedReturnValue();

        v166 = a4;
        quasar::LDResult::LDResult(a4, 1);
        v167 = (__int128 *)__p;
        if (__p != &v212)
        {
          v168 = 0.0;
          do
          {
            *(_QWORD *)v214 = 0;
            v169 = (void *)MEMORY[0x1E0CB3940];
            quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)(v167 + 2), &buf);
            if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_buf = &buf;
            else
              p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
            objc_msgSend(v169, "stringWithUTF8String:", p_buf);
            v171 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v165, "objectForKeyedSubscript:", v171);
            v172 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v172, "doubleValue");
            v174 = v173;

            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            *(double *)v214 = v174;
            std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double &,0>(&buf, v167 + 2, (std::string::size_type *)v214);
            std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)(a4 + 8), (unsigned __int8 *)&buf, (__int128 *)&buf);
            if (v223 < 0)
              operator delete(v222);
            if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
              operator delete(buf.__r_.__value_.__l.__data_);
            v175 = (__int128 *)*((_QWORD *)v167 + 1);
            if (v175)
            {
              do
              {
                v176 = v175;
                v175 = *(__int128 **)v175;
              }
              while (v175);
            }
            else
            {
              do
              {
                v176 = (__int128 *)*((_QWORD *)v167 + 2);
                v26 = *(_QWORD *)v176 == (_QWORD)v167;
                v167 = v176;
              }
              while (!v26);
            }
            v168 = v168 + v174;
            v167 = v176;
          }
          while (v176 != (__int128 *)&v212);
          v166 = a4;
          if (v168 > 0.0)
          {
            v177 = *(_QWORD **)(a4 + 8);
            if (v177 != (_QWORD *)(a4 + 16))
            {
              do
              {
                *(double *)v214 = *((double *)v177 + 10) / v168;
                std::pair<quasar::language_detector::Locale const,double>::pair[abi:ne180100]<quasar::language_detector::Locale const&,double,0>(&buf, (__int128 *)v177 + 2, (std::string::size_type *)v214);
                std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__emplace_unique_key_args<quasar::language_detector::Locale,std::pair<quasar::language_detector::Locale const,double>>((uint64_t **)(a4 + 32), (unsigned __int8 *)&buf, (__int128 *)&buf);
                std::pair<std::string,std::string>::~pair((uint64_t)&buf);
                v178 = (_QWORD *)v177[1];
                if (v178)
                {
                  do
                  {
                    v179 = v178;
                    v178 = (_QWORD *)*v178;
                  }
                  while (v178);
                }
                else
                {
                  do
                  {
                    v179 = (_QWORD *)v177[2];
                    v26 = *v179 == (_QWORD)v177;
                    v177 = v179;
                  }
                  while (!v26);
                }
                v177 = v179;
              }
              while (v179 != (_QWORD *)(a4 + 16));
            }
          }
        }
        if (!*(_QWORD *)(v166 + 48))
          *(_BYTE *)v166 = 0;

      }
    }
    goto LABEL_140;
  }
  v10 = (id)earLanguageDetectorLog;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(v191, "description");
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"Failed to allocate array";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2112;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v11;
    _os_log_impl(&dword_1AD756000, v10, OS_LOG_TYPE_DEFAULT, "%s, error %@", (uint8_t *)&buf, 0x16u);

  }
  quasar::LDResult::LDResult(a4, 0);
LABEL_143:

}

void sub_1ADFF8D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, quasar::LDResult *a17, uint64_t a18, void *a19, void *a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,_QWORD *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  void *v58;
  void *v59;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&a35);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a42, a43);

  _Unwind_Resume(a1);
}

BOOL EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)const::$_0::operator()(_QWORD **a1, void *__src, size_t __len)
{
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  void *__dst[2];
  unint64_t v12;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = *a1;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = __len;
  v6 = __dst;
  if (__len)
LABEL_8:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(v5, (unsigned __int8 *)__dst);
  if (SHIBYTE(v12) < 0)
    operator delete(__dst[0]);
  return v9 != 0;
}

void sub_1ADFF9330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id localeToMultiArray(const Locale *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  void *v17;
  id v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) / 48;
  v9 = objc_alloc(MEMORY[0x1E0C9E978]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v9, "initWithShape:dataType:error:", v11, 65600, a3);

  if (v12)
  {
    if (v6 != v7)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = (void *)MEMORY[0x1E0CB37E8];
        if (quasar::Locale::isCompatible((quasar::Locale *)(*a2 + v13), a1))
          v16 = 1.0;
        else
          v16 = 0.0;
        objc_msgSend(v15, "numberWithDouble:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setObject:atIndexedSubscript:", v17, v14);

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    v18 = v12;
  }

  return v12;
}

void sub_1ADFF94D0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id BOOLeanFunctionToMultiArray<EARContextAwareLDModel::makePrediction(std::map<std::string,double> const&,quasar::LDContext const&,std::function<std::string ()(quasar::language_detector::Locale const&)> const&)::$_2>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  double v16;
  void *v17;
  id v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) / 48;
  v9 = objc_alloc(MEMORY[0x1E0C9E978]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v20[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v20, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v9, "initWithShape:dataType:error:", v11, 65600, a3);

  if (v12)
  {
    if (v6 != v7)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = (void *)MEMORY[0x1E0CB37E8];
        if (std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>(*a1, (unsigned __int8 **)(*a2 + v13)))
        {
          v16 = 1.0;
        }
        else
        {
          v16 = 0.0;
        }
        objc_msgSend(v15, "numberWithDouble:", v16);
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setObject:atIndexedSubscript:", v17, v14);

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    v18 = v12;
  }

  return v12;
}

void sub_1ADFF9690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id mapToMultiArray<std::map<quasar::language_detector::Locale,double>>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  double v17;
  void *v18;
  id v19;
  _QWORD v21[2];

  v21[1] = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  v6 = a2[1];
  v8 = (v6 - *a2) / 48;
  v9 = objc_alloc(MEMORY[0x1E0C9E978]);
  objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v8);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v21[0] = v10;
  objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v21, 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  v12 = (void *)objc_msgSend(v9, "initWithShape:dataType:error:", v11, 65600, a3);

  if (v12)
  {
    if (v6 != v7)
    {
      v13 = 0;
      v14 = 0;
      do
      {
        v15 = (void *)MEMORY[0x1E0CB37E8];
        v16 = std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>(a1, (unsigned __int8 **)(*a2 + v13));
        if (a1 + 8 == v16)
          v17 = 0.0;
        else
          v17 = *(double *)(v16 + 80);
        objc_msgSend(v15, "numberWithDouble:", v17);
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend(v12, "setObject:atIndexedSubscript:", v18, v14);

        ++v14;
        v13 += 48;
      }
      while (v8 != v14);
    }
    v19 = v12;
  }

  return v12;
}

void sub_1ADFF9850(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void EARContextAwareLDModelFactory::createModel(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  if (*(char *)(*a1 + 95) < 0)
  {
    v5 = *(const void **)(v4 + 72);
    v6 = *(_QWORD *)(v4 + 80);
  }
  else
  {
    v5 = (const void *)(v4 + 72);
    v6 = *(unsigned __int8 *)(*a1 + 95);
  }
  if (v6 == 7 && !memcmp(v5, "core-ml", 7uLL))
  {
    v9 = (_QWORD *)operator new();
    EARContextAwareLDModel::EARContextAwareLDModel(v9, a1);
    *a2 = v9;
  }
  else
  {
    v7 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = (_QWORD *)(*a1 + 72);
      if (*(char *)(*a1 + 95) < 0)
        v8 = (_QWORD *)*v8;
      v10 = 136315138;
      v11 = v8;
      _os_log_impl(&dword_1AD756000, v7, OS_LOG_TYPE_DEFAULT, "Unsupported model file format \"%s\"", (uint8_t *)&v10, 0xCu);
    }
    *a2 = 0;
  }
}

void sub_1ADFF99B4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __int128 a9)
{
  _QWORD *v9;
  uint64_t v10;
  void *v13;
  void *v14;
  uint64_t (*v15)(void *);
  NSObject *v16;
  uint64_t v17;

  MEMORY[0x1AF44D190](v10, 0xE1C40A6AE3FD9);
  if (a2 == 1)
  {
    v13 = __cxa_begin_catch(a1);
    v14 = (void *)earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      v15 = *(uint64_t (**)(void *))(*(_QWORD *)v13 + 16);
      v16 = v14;
      v17 = v15(v13);
      LODWORD(a9) = 136315138;
      *(_QWORD *)((char *)&a9 + 4) = v17;
      _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "Exception in EARContextAwareLDModelFactory::createModel: %s", (uint8_t *)&a9, 0xCu);

    }
    *v9 = 0;
    __cxa_end_catch();
    JUMPOUT(0x1ADFF9958);
  }
  _Unwind_Resume(a1);
}

void sub_1ADFF9D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&a10);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32);
  if (v31)
    (*(void (**)(uint64_t))(*(_QWORD *)v31 + 16))(v31);

  _Unwind_Resume(a1);
}

void sub_1ADFF9F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;
  void *v24;

  a16 = &a23;
  std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);

  _Unwind_Resume(a1);
}

void sub_1ADFFA5E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48)
{
  void *v48;

  _Unwind_Resume(a1);
}

void sub_1ADFFA880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::map<quasar::language_detector::Locale,double>>::operator=[abi:ne180100]<std::map<quasar::language_detector::Locale,double>&,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (a1 != a2)
      std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<quasar::language_detector::Locale,double>,std::__tree_node<std::__value_type<quasar::language_detector::Locale,double>,void *> *,long>>((uint64_t **)a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
  }
  else
  {
    std::map<quasar::language_detector::Locale,double>::map[abi:ne180100]((uint64_t *)a1, a2);
    *(_BYTE *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_1ADFFAE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v12 - 128);
  _Unwind_Resume(a1);
}

void EARLDResultStream::init(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v5 = a2;
  v6 = a3;
  v7 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  v9 = v5;

  v8 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;

}

uint64_t __copy_helper_block_ea8_40c51_ZTSNSt3__110shared_ptrIN6quasar14LDRequestStateEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_ea8_40c51_ZTSNSt3__110shared_ptrIN6quasar14LDRequestStateEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 40);
}

void sub_1ADFFB188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, char a13)
{
  void *v13;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  a11 = (void **)&a13;
  std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_ea8_48c42_ZTSNSt3__18weak_ptrI17EARLDResultStreamEE64c48_ZTSNSt3__18weak_ptrIN6quasar14LDRequestStateEEE80c46_ZTSNSt3__110shared_ptrIKN6quasar9LDContextEEE(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = a2[7];
  result[6] = a2[6];
  result[7] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a2[9];
  result[8] = a2[8];
  result[9] = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[11];
  result[10] = a2[10];
  result[11] = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return result;
}

void __destroy_helper_block_ea8_48c42_ZTSNSt3__18weak_ptrI17EARLDResultStreamEE64c48_ZTSNSt3__18weak_ptrIN6quasar14LDRequestStateEEE80c46_ZTSNSt3__110shared_ptrIKN6quasar9LDContextEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 80);
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void EARContextAwareLDModel::~EARContextAwareLDModel(id *this)
{
  *this = &off_1E5D16F18;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  *this = &off_1E5D16F18;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 1));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void EARContextAwareLDModelFactory::~EARContextAwareLDModelFactory(EARContextAwareLDModelFactory *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__tree<quasar::language_detector::Locale>::__erase_unique<quasar::language_detector::Locale>(uint64_t **a1, unsigned __int8 **a2)
{
  uint64_t *v3;
  uint64_t *v4;

  v3 = (uint64_t *)std::__tree<std::__value_type<quasar::language_detector::Locale,double>,std::__map_value_compare<quasar::language_detector::Locale,std::__value_type<quasar::language_detector::Locale,double>,std::less<quasar::language_detector::Locale>,true>,std::allocator<std::__value_type<quasar::language_detector::Locale,double>>>::find<quasar::language_detector::Locale>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  v4 = v3;
  std::__tree<std::string>::__remove_node_pointer(a1, v3);
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_1ADFFB4E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, _Unwind_Exception *exception_object)
{
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void EARAcousticLDModelFactory::createModel(uint64_t *a1@<X1>, CoreMLAcousticLDModel **a2@<X8>)
{
  _QWORD *v4;
  CoreMLAcousticLDModel *v5;
  NSString *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int16 v14[8];
  CoreMLAcousticLDModel *v15;
  std::__shared_weak_count *v16;

  std::allocate_shared[abi:ne180100]<CoreMLAcousticLDModel,std::allocator<CoreMLAcousticLDModel>,std::shared_ptr<quasar::LDConfig> const&,void>(a1, &v15);
  v4 = (_QWORD *)(*a1 + 64);
  if (*(char *)(*a1 + 87) < 0)
    v4 = (_QWORD *)*v4;
  v5 = v15;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v4);
  v6 = (NSString *)objc_claimAutoreleasedReturnValue();
  LOBYTE(v5) = CoreMLAcousticLDModel::initializeModel(v5, v6);

  if ((v5 & 1) != 0)
  {
    v7 = v16;
    *a2 = v15;
    a2[1] = (CoreMLAcousticLDModel *)v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
  }
  else
  {
    v10 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 0;
      _os_log_impl(&dword_1AD756000, v10, OS_LOG_TYPE_DEFAULT, "Error initializing model.", (uint8_t *)v14, 2u);
    }
    *a2 = 0;
    a2[1] = 0;
  }
  v11 = v16;
  if (v16)
  {
    v12 = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1ADFFB620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  void *v3;
  va_list va;

  va_start(va, a3);

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void EARAcousticLDModelFactory::~EARAcousticLDModelFactory(EARAcousticLDModelFactory *this)
{
  quasar::Bitmap::~Bitmap(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t CoreMLAcousticLDModel::initializeModel(CoreMLAcousticLDModel *this, NSString *a2)
{
  NSString *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  int v10;
  NSString *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend(MEMORY[0x1E0CB3620], "defaultManager");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v5 = objc_msgSend(v4, "fileExistsAtPath:", v3);

  if ((v5 & 1) != 0)
  {
    objc_msgSend(MEMORY[0x1E0C99E98], "fileURLWithPath:isDirectory:", v3, 1);
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = (void *)*((_QWORD *)this + 3);
    *((_QWORD *)this + 3) = v6;

  }
  else
  {
    v8 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 138412290;
      v11 = v3;
      _os_log_impl(&dword_1AD756000, v8, OS_LOG_TYPE_DEFAULT, "LanguageDetector: EARLanguageDetector model file does not exist at %@", (uint8_t *)&v10, 0xCu);
    }
  }

  return v5;
}

void sub_1ADFFB76C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<CoreMLAcousticLDModel,std::allocator<CoreMLAcousticLDModel>,std::shared_ptr<quasar::LDConfig> const&,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LDConfig> const&,std::allocator<CoreMLAcousticLDModel>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADFFB7D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<quasar::LDConfig> const&,std::allocator<CoreMLAcousticLDModel>,0>(_QWORD *a1, uint64_t *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40A78;
  a1[1] = 0;
  quasar::AcousticLDModel::AcousticLDModel(a1 + 3, a2);
  a1[3] = &unk_1E5D16CC0;
  a1[6] = 0;
  a1[7] = 0;
  return a1;
}

void sub_1ADFFB834(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CoreMLAcousticLDModel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CoreMLAcousticLDModel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<CoreMLAcousticLDModel>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void CoreMLAcousticLDModel::~CoreMLAcousticLDModel(id *this)
{

  quasar::AcousticLDModel::~AcousticLDModel((quasar::AcousticLDModel *)this);
}

{

  quasar::AcousticLDModel::~AcousticLDModel((quasar::AcousticLDModel *)this);
  JUMPOUT(0x1AF44D190);
}

BOOL CoreMLAcousticLDModel::resetModel(CoreMLAcousticLDModel *this)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v11;
  uint8_t buf[4];
  void *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)this + 3);
  v11 = 0;
  objc_msgSend(MEMORY[0x1E0C9E938], "modelWithContentsOfURL:error:", v2, &v11);
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = v11;
  v5 = (void *)*((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = v3;

  v6 = (id)earLanguageDetectorLog;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    objc_msgSend(*((id *)this + 3), "absoluteString");
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 138412290;
    v13 = v7;
    _os_log_impl(&dword_1AD756000, v6, OS_LOG_TYPE_DEFAULT, "Attempting to load model file: %@", buf, 0xCu);

  }
  if (v4)
  {
    v8 = (id)earLanguageDetectorLog;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v4, "localizedDescription");
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 138412290;
      v13 = v9;
      _os_log_impl(&dword_1AD756000, v8, OS_LOG_TYPE_DEFAULT, "Failed to reload CoreML model with error: %@", buf, 0xCu);

    }
  }

  return v4 == 0;
}

void sub_1ADFFBA84(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void CoreMLAcousticLDModel::makePrediction(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  NSObject *v25;
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  id v30;
  NSObject *v31;
  void *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  unint64_t i;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  void *v52;
  void *v53;
  void *v54;
  id v56;
  id v57;
  id v58;
  __int128 buf;
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v7 = *(unsigned int **)(a1 + 8);
  if (*((_BYTE *)v7 + 137))
  {
    v8 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedLong:", ((a2[1] - *a2) >> 2) / (unint64_t)(int)a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v8, "arrayWithObjects:", v9, &unk_1E5D5BE40, &unk_1E5D5BE40, &unk_1E5D5BE40, v10, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v12 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "arrayWithObjects:", v13, &unk_1E5D5BE40, &unk_1E5D5BE40, &unk_1E5D5BE40, &unk_1E5D5BE40, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v15 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", *v7);
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v15, "arrayWithObjects:", &unk_1E5D5BE40, v16, v17, 0);
    v11 = (void *)objc_claimAutoreleasedReturnValue();

    v18 = (void *)MEMORY[0x1E0C99D20];
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", (**(_DWORD **)(a1 + 8) * a3));
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInt:", a3);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v18, "arrayWithObjects:", v13, v19, &unk_1E5D5BE40, 0);
    v14 = (void *)objc_claimAutoreleasedReturnValue();

  }
  v20 = objc_alloc(MEMORY[0x1E0C9E978]);
  v21 = *a2;
  v58 = 0;
  v22 = (void *)objc_msgSend(v20, "initWithDataPointer:shape:dataType:strides:deallocator:error:", v21, v11, 65568, v14, 0, &v58);
  v23 = v58;
  if (v23)
  {
    v24 = v23;
    v25 = (id)earLanguageDetectorLog;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v24, "description");
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf) = 138412290;
      *(_QWORD *)((char *)&buf + 4) = v26;
      _os_log_impl(&dword_1AD756000, v25, OS_LOG_TYPE_DEFAULT, "Failed to create feature multiarray with error %@", (uint8_t *)&buf, 0xCu);

    }
    quasar::LDAcousticResult::LDAcousticResult(a4, 0);
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 8);
    v28 = (_QWORD *)(v27 + 88);
    if (*(char *)(v27 + 111) < 0)
      v28 = (_QWORD *)*v28;
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v28);
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(MEMORY[0x1E0C99E08], "dictionaryWithObject:forKey:", v22, v29);
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    v57 = 0;
    v54 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C9E900]), "initWithDictionary:error:", v53, &v57);
    v30 = v57;
    if (v30)
    {
      v24 = v30;
      v31 = (id)earLanguageDetectorLog;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        objc_msgSend(v24, "description");
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        LODWORD(buf) = 138412290;
        *(_QWORD *)((char *)&buf + 4) = v32;
        _os_log_impl(&dword_1AD756000, v31, OS_LOG_TYPE_DEFAULT, "Failed to create feature provider with error %@", (uint8_t *)&buf, 0xCu);

      }
      quasar::LDAcousticResult::LDAcousticResult(a4, 0);
    }
    else
    {
      v51 = objc_alloc_init(MEMORY[0x1E0C9E9A8]);
      objc_msgSend(v51, "setUsesCPUOnly:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 136));
      v33 = *(void **)(a1 + 32);
      v56 = 0;
      objc_msgSend(v33, "predictionFromFeatures:options:error:", v54, v51, &v56);
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      v24 = v56;
      if (v24)
      {
        v34 = (id)earLanguageDetectorLog;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          objc_msgSend(v24, "description");
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf) = 138412290;
          *(_QWORD *)((char *)&buf + 4) = v35;
          _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Error during prediction: %@", (uint8_t *)&buf, 0xCu);

        }
        quasar::LDAcousticResult::LDAcousticResult(a4, 0);
      }
      else
      {
        v36 = *(_QWORD *)(a1 + 8);
        v37 = (_QWORD *)(v36 + 112);
        if (*(char *)(v36 + 135) < 0)
          v37 = (_QWORD *)*v37;
        objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v37);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        v38 = *(_QWORD *)(a1 + 8);
        if (*(_BYTE *)(v38 + 137))
        {
          EARHelpers::NSArrayOfStringFromVectorOfString((__int128 **)(v38 + 40));
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v52, "dictionary");
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v40, "objectForKey:", v50);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v41, "multiArrayValue");
          v42 = (void *)objc_claimAutoreleasedReturnValue();

          v43 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99DE8]), "initWithCapacity:", objc_msgSend(v39, "count"));
          for (i = 0; i < objc_msgSend(v39, "count"); ++i)
          {
            objc_msgSend(v42, "objectAtIndexedSubscript:", i);
            v45 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend(v43, "addObject:", v45);

          }
          objc_msgSend(MEMORY[0x1E0C99D80], "dictionaryWithObjects:forKeys:", v43, v39);
          v46 = (void *)objc_claimAutoreleasedReturnValue();

        }
        else
        {
          objc_msgSend(v52, "dictionary");
          v39 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v39, "objectForKey:", v50);
          v42 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v42, "dictionaryValue");
          v46 = (void *)objc_claimAutoreleasedReturnValue();
        }

        quasar::LDAcousticResult::LDAcousticResult(a4, 1);
        EARHelpers::DictionaryToMap<std::string,double,CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSString *)#1},CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSNumber *)#1}>(v46, (uint64_t *)&buf);
        v47 = a4 + 16;
        std::__tree<std::string>::destroy(a4 + 8, *(char **)(a4 + 16));
        v48 = *((_QWORD *)&buf + 1);
        *(_QWORD *)(a4 + 8) = buf;
        *(_QWORD *)(a4 + 16) = v48;
        v49 = v60;
        *(_QWORD *)(a4 + 24) = v60;
        if (v49)
        {
          *(_QWORD *)(v48 + 16) = v47;
          *(_QWORD *)&buf = (char *)&buf + 8;
          *((_QWORD *)&buf + 1) = 0;
          v60 = 0;
          v48 = 0;
        }
        else
        {
          *(_QWORD *)(a4 + 8) = v47;
        }
        std::__tree<std::string>::destroy((uint64_t)&buf, (char *)v48);

      }
    }

  }
}

void sub_1ADFFC0EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  _Unwind_Resume(a1);
}

void EARHelpers::DictionaryToMap<std::string,double,CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSString *)#1},CoreMLAcousticLDModel::makePrediction(std::vector<float> &,int)::{lambda(NSNumber *)#1}>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  _QWORD v4[6];
  uint64_t v5;
  const void ***v6;
  uint64_t v7;
  _QWORD *(*v8)(_QWORD *, _QWORD *);
  void (*v9)(uint64_t);
  void *v10;
  char **v11;
  char *v12[2];

  v3 = a1;
  v5 = 0;
  v6 = (const void ***)&v5;
  v7 = 0x4812000000;
  v8 = __Block_byref_object_copy__15;
  v9 = __Block_byref_object_dispose__15;
  v12[0] = 0;
  v12[1] = 0;
  v10 = &unk_1AE30551B;
  v11 = v12;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdZNK21CoreMLAcousticLDModel14makePredictionERNS1_6vectorIfNS5_IfEEEEiEUlP8NSStringE_ZNKS8_14makePredictionESC_iEUlP8NSNumberE_EENS1_3mapIT_T0_NS1_4lessISK_EENS5_INS1_4pairIKSK_SL_EEEEEEP12NSDictionaryT1_T2__block_invoke;
  v4[3] = &unk_1E5D46E20;
  v4[4] = &v5;
  objc_msgSend(v3, "enumerateKeysAndObjectsUsingBlock:", v4);
  std::map<std::string,double>::map[abi:ne180100](a2, v6 + 6);
  _Block_object_dispose(&v5, 8);
  std::__tree<std::string>::destroy((uint64_t)&v11, v12[0]);

}

void sub_1ADFFC37C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *a23)
{
  void *v23;
  uint64_t v24;

  _Block_object_dispose(&a16, 8);
  std::__tree<std::string>::destroy(v24, a23);

  _Unwind_Resume(a1);
}

_QWORD *__Block_byref_object_copy__15(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  result[6] = a2[6];
  v2 = a2 + 7;
  v3 = a2[7];
  result[7] = v3;
  v4 = result + 7;
  v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2[6] = v2;
    *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__15(uint64_t a1)
{
  std::__tree<std::string>::destroy(a1 + 48, *(char **)(a1 + 56));
}

void ___ZN10EARHelpers15DictionaryToMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEEdZNK21CoreMLAcousticLDModel14makePredictionERNS1_6vectorIfNS5_IfEEEEiEUlP8NSStringE_ZNKS8_14makePredictionESC_iEUlP8NSNumberE_EENS1_3mapIT_T0_NS1_4lessISK_EENS5_INS1_4pairIKSK_SL_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t **v9;
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  void **v13;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
  }

  objc_msgSend(v6, "doubleValue");
  v9 = (uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48);
  v13 = __p;
  std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (const void **)__p, (uint64_t)&std::piecewise_construct, (__int128 **)&v13)[7] = v10;
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);

}

void sub_1ADFFC4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__99(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(a1 + 48, (uint64_t *)(a2 + 48));
}

uint64_t __Block_byref_object_dispose__100(uint64_t a1)
{
  return std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(a1 + 48);
}

void ___ZN10EARHelpers24DictionaryToUnorderedMapINSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES7_Z53___EARLanguageDetector_initWithConfigFile_overrides__E3__3S8_EENS1_13unordered_mapIT_T0_NS1_4hashISA_EENS1_8equal_toISA_EENS5_INS1_4pairIKSA_SB_EEEEEEP12NSDictionaryT1_T2__block_invoke(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  std::string __p;
  void *v14[2];
  uint64_t v15;
  void **v16;

  v5 = a2;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "ear_toString");
  }
  else
  {
    v14[0] = 0;
    v14[1] = 0;
    v15 = 0;
  }

  v9 = v6;
  v10 = v9;
  if (v9)
    objc_msgSend(v9, "ear_toString");
  else
    memset(&__p, 0, sizeof(__p));

  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 48;
  v16 = v14;
  v12 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v11, (unsigned __int8 *)v14, (uint64_t)&std::piecewise_construct, (__int128 **)&v16);
  std::string::operator=((std::string *)(v12 + 40), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);

}

void sub_1ADFFC5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  void *v20;
  void *v21;
  void *v22;

  if (a20 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void std::default_delete<quasar::LanguageDetector>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a2)
  {
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)(a2 + 12));
    std::__tree<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::__map_value_compare<std::tuple<std::string,std::string,std::string>,std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>,std::less<std::tuple<std::string,std::string,std::string>>,true>,std::allocator<std::__value_type<std::tuple<std::string,std::string,std::string>,std::__list_iterator<std::pair<std::tuple<std::string,std::string,std::string>,std::shared_ptr<quasar::PDecTranslator>>,void *>>>>::destroy((uint64_t)(a2 + 9), (_QWORD *)a2[10]);
    v3 = a2[8];
    a2[8] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = a2[7];
    a2[7] = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)(a2 + 4), (_QWORD *)a2[5]);
    std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::destroy((uint64_t)(a2 + 1), (_QWORD *)a2[2]);
    v5 = *a2;
    *a2 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    JUMPOUT(0x1AF44D190);
  }
}

void std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__optional_destruct_base<quasar::language_detector::Locale,false>::~__optional_destruct_base[abi:ne180100](v4 - 56);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<std::optional<quasar::language_detector::Locale>>::vector(_QWORD *a1, unint64_t a2)
{
  _BYTE *v4;
  _BYTE *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<quasar::VoiceCommandArgument>::__vallocate[abi:ne180100](a1, a2);
    v4 = (_BYTE *)a1[1];
    v5 = &v4[56 * a2];
    do
    {
      *v4 = 0;
      v4[48] = 0;
      v4 += 56;
    }
    while (v4 != v5);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADFFC7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::optional<quasar::language_detector::Locale>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext>,quasar::LDContext const&,void>@<X0>(const quasar::LDContext *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<quasar::LDContext>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext const&,std::allocator<quasar::LDContext>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADFFC814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LDContext>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext const&,std::allocator<quasar::LDContext>,0>(_QWORD *a1, const quasar::LDContext *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45318;
  a1[1] = 0;
  quasar::LDContext::LDContext((quasar::LDContext *)(a1 + 3), a2);
  return a1;
}

void sub_1ADFFC860(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45318;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LDContext>::__on_zero_shared(uint64_t a1)
{
  quasar::LDContext::~LDContext((quasar::LDContext *)(a1 + 24));
}

void std::__shared_ptr_emplace<EARLDResultStream>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<EARLDResultStream>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40A08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<EARLDResultStream>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void EARLDResultStream::didFinishProcessingFrames(uint64_t a1, quasar *a2)
{
  NSObject *v4;
  _EARLanguageDetectorLoggingInfo *v5;
  double v6;
  void *v7;
  uint64_t v8;
  _BOOL4 v9;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  void *v13;
  NSObject *v14;
  void *__p[2];
  char v16;
  uint8_t buf[4];
  void *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AD756000, v4, OS_LOG_TYPE_DEFAULT, "Received didFinishProcessingFrames", buf, 2u);
  }
  v5 = objc_alloc_init(_EARLanguageDetectorLoggingInfo);
  v6 = COERCE_DOUBLE(atomic_load((unint64_t *)(a1 + 24)));
  std::string::basic_string[abi:ne180100]<0>(__p, "messageLanguageTaggingLatency");
  quasar::LDLoggingInfo::addDoubleValue(a2, (uint64_t)__p, v6);
  if (v16 < 0)
    operator delete(__p[0]);
  EARHelpers::dictFromPTree(a2, 0);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = earLanguageDetectorLog;
  v9 = os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (!v9)
      goto LABEL_11;
    *(_DWORD *)buf = 138412290;
    v18 = v7;
    v10 = "Logging Data: %@";
    v11 = v8;
    v12 = 12;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    *(_WORD *)buf = 0;
    v10 = "Got an error when trying to print logging info";
    v11 = v8;
    v12 = 2;
  }
  _os_log_impl(&dword_1AD756000, v11, OS_LOG_TYPE_DEFAULT, v10, buf, v12);
LABEL_11:
  -[_EARLanguageDetectorLoggingInfo setLoggingDict:](v5, "setLoggingDict:", v7);
  if (*((_QWORD *)a2 + 8))
  {
    +[_EARLanguageDetectorRequestContext contextFromLDContext:](_EARLanguageDetectorRequestContext, "contextFromLDContext:");
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    -[_EARLanguageDetectorLoggingInfo setContext:](v5, "setContext:", v13);

  }
  v14 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AD756000, v14, OS_LOG_TYPE_DEFAULT, "Sending logging info to delegate", buf, 2u);
  }
  objc_msgSend(*(id *)(a1 + 8), "languageDetectorDidCompleteProcessing:loggingInfo:", *(_QWORD *)(a1 + 16), v5);

}

void sub_1ADFFCB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void EARLDResultStream::didComputeResult(id *this, const quasar::LDResult *a2)
{
  NSObject *v4;
  void *v5;
  _EARLanguageDetectorResult *v6;
  NSObject *v7;
  NSObject *v8;
  uint8_t v9[16];
  uint8_t v10[16];
  uint8_t buf[16];

  v4 = earLanguageDetectorLog;
  if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_1AD756000, v4, OS_LOG_TYPE_DEFAULT, "Received didComputeResult", buf, 2u);
  }
  EARHelpers::MapToDictionary<quasar::language_detector::Locale,double,EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(quasar::language_detector::Locale)#1},EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(double)#1}>((_QWORD *)a2 + 4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v6 = objc_alloc_init(_EARLanguageDetectorResult);
    -[_EARLanguageDetectorResult setConfidences:](v6, "setConfidences:", v5);
    -[_EARLanguageDetectorResult setIsConfident:](v6, "setIsConfident:", *((unsigned __int8 *)a2 + 2));
    v7 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1AD756000, v7, OS_LOG_TYPE_DEFAULT, "Sending language detector result to delegate", v10, 2u);
    }
    objc_msgSend(this[1], "languageDetector:result:", this[2], v6);

  }
  else if ((objc_opt_respondsToSelector() & 1) != 0)
  {
    v8 = earLanguageDetectorLog;
    if (os_log_type_enabled((os_log_t)earLanguageDetectorLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1AD756000, v8, OS_LOG_TYPE_DEFAULT, "Sending language detector confidences to delegate", v9, 2u);
    }
    objc_msgSend(this[1], "languageDetector:confidences:", this[2], v5);
  }

}

void sub_1ADFFCCE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void EARLDResultStream::~EARLDResultStream(id *this)
{

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{

  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

id EARHelpers::MapToDictionary<quasar::language_detector::Locale,double,EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(quasar::language_detector::Locale)#1},EARLDResultStream::didComputeResult(quasar::LDResult const&)::{lambda(double)#1}>(_QWORD *a1)
{
  id v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  std::string *p_p;
  void *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  void *v13;
  std::string v15;
  std::string v16;
  std::string __p;

  v2 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    do
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithDouble:", *((double *)v4 + 10), *(_OWORD *)&v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__r.__words[2]);
      v6 = (void *)objc_claimAutoreleasedReturnValue();
      if (*((char *)v4 + 55) < 0)
        std::string::__init_copy_ctor_external(&v15, (const std::string::value_type *)v4[4], v4[5]);
      else
        v15 = *(std::string *)(v4 + 4);
      if (*((char *)v4 + 79) < 0)
        std::string::__init_copy_ctor_external(&v16, (const std::string::value_type *)v4[7], v4[8]);
      else
        v16 = *(std::string *)(v4 + 7);
      v7 = (void *)MEMORY[0x1E0CB3940];
      quasar::language_detector::Locale::getSiriLocaleStr((quasar::language_detector::Locale *)&v15, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      objc_msgSend(v7, "stringWithUTF8String:", p_p, v15.__r_.__value_.__r.__words[0]);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      objc_msgSend(v2, "setObject:forKey:", v6, v9);

      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);

      v10 = (_QWORD *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v4[2];
          v12 = *v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v4 = v11;
    }
    while (v11 != v3);
  }
  v13 = (void *)objc_msgSend(v2, "copy");

  return v13;
}

void sub_1ADFFCF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LDContext const,std::allocator<quasar::LDContext const>,quasar::LDContext,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x180uLL);
  result = std::__shared_ptr_emplace<quasar::LDContext const>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext const>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADFFCFC8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LDContext const>::__shared_ptr_emplace[abi:ne180100]<quasar::LDContext,std::allocator<quasar::LDContext const>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40C70;
  a1[1] = 0;
  quasar::LDContext::LDContext(a1 + 3);
  return a1;
}

void sub_1ADFFD014(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LDContext const>::__on_zero_shared(uint64_t a1)
{
  quasar::LDContext::~LDContext((quasar::LDContext *)(a1 + 24));
}

uint64_t *std::__tree<quasar::language_detector::Locale>::__emplace_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>(uint64_t **a1, unsigned __int8 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<quasar::language_detector::Locale>::__find_equal<quasar::language_detector::Locale>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<quasar::language_detector::Locale>::__construct_node<quasar::language_detector::Locale const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t std::__tree<quasar::language_detector::Locale>::__count_unique<quasar::language_detector::Locale>(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  uint64_t v4;

  v2 = *(unsigned __int8 **)(a1 + 8);
  if (v2)
  {
    v4 = 1;
    do
    {
      if ((quasar::language_detector::Locale::operator<((unsigned __int8 *)a2, (unsigned __int8 **)v2 + 4) & 1) == 0)
      {
        if (!quasar::language_detector::Locale::operator<(v2 + 32, a2))
          return v4;
        v2 += 8;
      }
      v2 = *(unsigned __int8 **)v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t std::set<quasar::language_detector::Locale>::set[abi:ne180100]<std::__wrap_iter<quasar::language_detector::Locale const*>>(uint64_t a1, unsigned __int8 **a2, unsigned __int8 **a3)
{
  uint64_t *v4;
  unsigned __int8 **v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::__tree<quasar::language_detector::Locale>::__emplace_hint_unique_key_args<quasar::language_detector::Locale,quasar::language_detector::Locale const&>((uint64_t **)a1, v4, v6, (__int128 *)v6);
      v6 += 6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1ADFFD1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

unsigned __int8 *quasar::WordSetFileFactory::get@<X0>(unsigned __int8 *a1@<X0>, std::string::size_type *a2@<X8>)
{
  unsigned __int8 v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  std::__shared_weak_count *v7;
  unsigned __int8 *result;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11[5];

  if ((v4 & 1) == 0)
  {
    {
      v10 = operator new();
      *(_OWORD *)v10 = 0u;
      *(_OWORD *)(v10 + 16) = 0u;
      *(_DWORD *)(v10 + 32) = 1065353216;
      quasar::WordSetFileFactory::get(std::string const&)::wordSetFiles = v10;
    }
  }
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>((_QWORD *)quasar::WordSetFileFactory::get(std::string const&)::wordSetFiles, a1);
  if (v5)
  {
    v6 = v5;
    *a2 = 0;
    a2[1] = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)v5 + 6);
    if (v7)
    {
      result = (unsigned __int8 *)std::__shared_weak_count::lock(v7);
      a2[1] = (std::string::size_type)result;
      if (result)
      {
        v9 = *((_QWORD *)v6 + 5);
        *a2 = v9;
        if (v9)
          return result;
      }
      else if (*a2)
      {
        return result;
      }
    }
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)a2);
  }
  quasar::mt::utils::readWordsFromFile((uint64_t)a1, (uint64_t)v11);
  std::allocate_shared[abi:ne180100]<quasar::WordSet,std::allocator<quasar::WordSet>,std::unordered_set<std::string>,void>(v11, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v11);
  return std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<quasar::WordSet> &>(quasar::WordSetFileFactory::get(std::string const&)::wordSetFiles, a1, (__int128 *)a1, a2);
}

void sub_1ADFFD308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::WordSet,std::allocator<quasar::WordSet>,std::unordered_set<std::string>,void>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<quasar::WordSet>::__shared_ptr_emplace[abi:ne180100]<std::unordered_set<std::string>,std::allocator<quasar::WordSet>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADFFD384(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::WordSet>::__shared_ptr_emplace[abi:ne180100]<std::unordered_set<std::string>,std::allocator<quasar::WordSet>,0>(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D45078;
  a1[1] = 0;
  std::allocator<quasar::WordSet>::construct[abi:ne180100]<quasar::WordSet,std::unordered_set<std::string>>((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADFFD3E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::WordSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::WordSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::WordSet>::__on_zero_shared(uint64_t a1)
{
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(a1 + 24);
}

uint64_t std::allocator<quasar::WordSet>::construct[abi:ne180100]<quasar::WordSet,std::unordered_set<std::string>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  _BYTE v5[40];

  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v5, a3);
  quasar::WordSet::WordSet(a2, v5);
  return std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v5);
}

void sub_1ADFFD490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__emplace_unique_key_args<std::string,std::string const&,std::shared_ptr<quasar::WordSet> &>(uint64_t a1, unsigned __int8 *a2, __int128 *a3, std::string::size_type *a4)
{
  unint64_t v4;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  unint64_t v14;
  unsigned __int8 **v15;
  unsigned __int8 *i;
  unint64_t v17;
  float v18;
  float v19;
  _BOOL8 v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD v27[3];

  v9 = (_QWORD *)(a1 + 24);
  v10 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v15 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v15)
    {
      for (i = *v15; i; i = *(unsigned __int8 **)i)
      {
        v17 = *((_QWORD *)i + 1);
        if (v17 == v11)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v14 > 1)
          {
            if (v17 >= v12)
              v17 %= v12;
          }
          else
          {
            v17 &= v12 - 1;
          }
          if (v17 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__construct_node_hash<std::string const&,std::shared_ptr<quasar::WordSet> &>(a1, v11, a3, a4, (uint64_t)v27);
  v18 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v19 = *(float *)(a1 + 32);
  if (!v12 || (float)(v19 * (float)v12) < v18)
  {
    v20 = 1;
    if (v12 >= 3)
      v20 = (v12 & (v12 - 1)) != 0;
    v21 = v20 | (2 * v12);
    v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22)
      v23 = v22;
    else
      v23 = v21;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v23);
    v12 = *(_QWORD *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
        v4 = v11 % v12;
      else
        v4 = v11;
    }
    else
    {
      v4 = (v12 - 1) & v11;
    }
  }
  v24 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v24)
  {
    *(_QWORD *)v27[0] = *v24;
    *v24 = v27[0];
  }
  else
  {
    *(_QWORD *)v27[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v27[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v27[0])
    {
      v25 = *(_QWORD *)(*(_QWORD *)v27[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v25 >= v12)
          v25 %= v12;
      }
      else
      {
        v25 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v25) = v27[0];
    }
  }
  i = (unsigned __int8 *)v27[0];
  v27[0] = 0;
  ++*v9;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)v27, 0);
  return i;
}

void sub_1ADFFD714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

std::string *std::__hash_table<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::weak_ptr<quasar::WordSet>>>>::__construct_node_hash<std::string const&,std::shared_ptr<quasar::WordSet> &>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, std::string::size_type *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  char *v10;
  std::string *result;

  v9 = a1 + 16;
  v10 = (char *)operator new(0x38uLL);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v9;
  *(_BYTE *)(a5 + 16) = 0;
  *(_QWORD *)v10 = 0;
  *((_QWORD *)v10 + 1) = a2;
  result = std::pair<std::__fs::filesystem::path const,std::weak_ptr<kaldi::quasar::ShortlistDataOnDisk>>::pair[abi:ne180100]<std::__fs::filesystem::path const&,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk> &,0>((std::string *)(v10 + 16), a3, a4);
  *(_BYTE *)(a5 + 16) = 1;
  return result;
}

void sub_1ADFFD798(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::weak_ptr<kaldi::quasar::PhraseBook>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

_BYTE *kaldi::quasar::LatticeRnn::LatticeRnn(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  kaldi::nnet1::Nnet *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[35];

  v14 = (kaldi::nnet1::Nnet *)((char *)kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)a1) + 376);
  kaldi::nnet1::Nnet::Nnet(v14);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 752));
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1128));
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1504));
  a1[1880] = 0;
  kaldi::nnet1::Nnet::Read((uint64_t)a1, a2, a7);
  kaldi::nnet1::Nnet::Read((uint64_t)v14, a3, a7);
  v15 = *(unsigned __int8 *)(a4 + 23);
  if ((v15 & 0x80u) != 0)
    v15 = *(_QWORD *)(a4 + 8);
  if (v15)
    kaldi::nnet1::Nnet::Read((uint64_t)(a1 + 752), a4, a7);
  v16 = *(unsigned __int8 *)(a5 + 23);
  if ((v16 & 0x80u) != 0)
    v16 = *(_QWORD *)(a5 + 8);
  if (v16)
  {
    kaldi::nnet1::Nnet::Read((uint64_t)(a1 + 1128), a5, a7);
    v17 = *(unsigned __int8 *)(a6 + 23);
    v18 = v17;
    v19 = *(_QWORD *)(a6 + 8);
    if ((v17 & 0x80u) == 0)
      v20 = *(unsigned __int8 *)(a6 + 23);
    else
      v20 = *(_QWORD *)(a6 + 8);
    if (v20)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"arc_output_model_file.empty()", 29);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
  }
  else
  {
    v17 = *(unsigned __int8 *)(a6 + 23);
    v19 = *(_QWORD *)(a6 + 8);
    v18 = *(_BYTE *)(a6 + 23);
  }
  if (v18 < 0)
    v17 = v19;
  if (v17)
  {
    kaldi::nnet1::Nnet::Read((uint64_t)(a1 + 1504), a6, a7);
    v21 = *(unsigned __int8 *)(a5 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a5 + 8);
    if (v21)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"output_model_file.empty()", 25);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v23);
    }
    a1[1880] = 1;
  }
  return a1;
}

void sub_1ADFFD9A4(_Unwind_Exception *a1)
{
  kaldi::nnet1::Nnet *v1;
  kaldi::nnet1::Nnet *v2;
  kaldi::nnet1::Nnet *v3;
  kaldi::nnet1::Nnet *v4;
  kaldi::nnet1::Nnet *v6;

  kaldi::nnet1::Nnet::~Nnet(v4);
  kaldi::nnet1::Nnet::~Nnet(v3);
  kaldi::nnet1::Nnet::~Nnet(v6);
  kaldi::nnet1::Nnet::~Nnet(v2);
  kaldi::nnet1::Nnet::~Nnet(v1);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeRnn::Run(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  kaldi::nnet1::Nnet *v10;
  uint64_t v11;
  kaldi::nnet1::Nnet *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  unsigned int v21;
  _QWORD v22[4];
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2[3] - a2[2] > 0xFuLL)
  {
    v7 = (uint64_t *)a2[5];
    v8 = (uint64_t *)a2[6];
    while (v7 != v8)
    {
      kaldi::CuVector<float>::Resize(*v7 + 328, *(unsigned int *)(*v7 + 312), 1);
      v9 = *v7++;
      kaldi::nnet1::Nnet::Feedforward((_QWORD *)a1, v9 + 296, (_QWORD *)(v9 + 328), -1);
    }
    v10 = (kaldi::nnet1::Nnet *)(a1 + 376);
    v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
    v12 = (kaldi::nnet1::Nnet *)(a1 + 752);
    if (((*(_QWORD *)(a1 + 760) - *(_QWORD *)(a1 + 752)) & 0x7FFFFFFF8) != 0)
      v11 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 752)) + v11;
    if (*(_BYTE *)(a1 + 1880))
    {
      kaldi::quasar::LatticeRnn::Feed(0, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 376), 0);
      kaldi::quasar::LatticeRnn::Feed(1, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 752), 0);
      v14 = a2[5];
      v13 = a2[6];
      if (v14 != v13)
      {
        v15 = (_QWORD *)(a1 + 1504);
        do
        {
          v28 = 0;
          v29 = 0;
          v27 = &unk_1E5D341C8;
          v30 = 0;
          kaldi::CuVector<float>::Resize((uint64_t)&v27, v11, 1);
          v16 = kaldi::nnet1::Nnet::OutputDim(v10);
          v23 = &unk_1E5D29D70;
          v24 = v28;
          v26 = v30;
          v25 = v16;
          kaldi::CuVectorBase<float>::CopyFromVec(&v23, *(_QWORD *)v14 + 360);
          v17 = kaldi::nnet1::Nnet::OutputDim(v10);
          v18 = kaldi::nnet1::Nnet::OutputDim(v12);
          v23 = &unk_1E5D29D70;
          v24 = v28 + 4 * v17;
          v26 = v30;
          v25 = v18;
          kaldi::CuVectorBase<float>::CopyFromVec(&v23, *(_QWORD *)v14 + 392);
          kaldi::nnet1::Nnet::Feedforward(v15, (uint64_t)&v27, (_QWORD *)(*(_QWORD *)v14 + 424), -1);
          v27 = &unk_1E5D341C8;
          kaldi::CuVector<float>::Destroy((uint64_t)&v27);
          v14 += 8;
        }
        while (v14 != v13);
      }
    }
    else
    {
      v27 = &unk_1E5D341C8;
      v28 = 0;
      v29 = 0;
      v30 = 0;
      kaldi::CuVector<float>::Resize((uint64_t)&v27, v11, 1);
      v19 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
      v23 = &unk_1E5D29D70;
      v24 = v28;
      v26 = v30;
      v25 = v19;
      kaldi::quasar::LatticeRnn::Feed(0, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 376), &v23);
      if (((*(_QWORD *)(a1 + 760) - *(_QWORD *)(a1 + 752)) & 0x7FFFFFFF8) != 0)
      {
        v20 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 376));
        v21 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 752));
        v22[0] = &unk_1E5D29D70;
        v22[1] = v28 + 4 * v20;
        v22[3] = v30;
        v22[2] = v21;
        kaldi::quasar::LatticeRnn::Feed(1, (uint64_t)a2, (kaldi::nnet1::Nnet *)(a1 + 752), v22);
      }
      kaldi::nnet1::Nnet::Feedforward((_QWORD *)(a1 + 1128), (uint64_t)&v27, a3, -1);
      v27 = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)&v27);
    }
  }
  else
  {
    v5 = kaldi::nnet1::Nnet::OutputDim((kaldi::nnet1::Nnet *)(a1 + 1128));
    kaldi::CuVector<float>::Resize((uint64_t)a3, v5, 0);
  }
}

void sub_1ADFFDCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LatticeRnn::Feed(int a1, uint64_t a2, kaldi::nnet1::Nnet *this, _QWORD *a4)
{
  uint64_t *v7;
  kaldi::quasar::LatticeRnn *v8;
  kaldi::WordHypLattice::Node *v9;
  uint64_t v10;
  uint64_t i;
  kaldi::quasar::LatticeRnn **v12;
  kaldi::quasar::LatticeRnn **v13;
  kaldi::quasar::LatticeRnn *v14;
  kaldi::WordHypLattice::Node *v15;
  uint64_t v16;
  uint64_t j;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    v7 = *(uint64_t **)(a2 + 24);
    while (v7 != *(uint64_t **)(a2 + 16))
    {
      v8 = (kaldi::quasar::LatticeRnn *)*--v7;
      v9 = (kaldi::WordHypLattice::Node *)kaldi::nnet1::Nnet::OutputDim(this);
      kaldi::quasar::LatticeRnn::Pool(v8, v9, 1);
      v10 = *v7;
      for (i = *(_QWORD *)(*v7 + 8); i != v10; i = *(_QWORD *)(i + 8))
      {
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)this, *v7 + 152, 0, 0);
        kaldi::nnet1::Nnet::Feedforward(this, *(_QWORD *)(i + 16) + 328, (_QWORD *)(*(_QWORD *)(i + 16) + 392), -1);
      }
    }
    if (a4)
    {
      if (v7 == *(uint64_t **)(a2 + 24))
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v12 = *(kaldi::quasar::LatticeRnn ***)(a2 + 16);
    v13 = *(kaldi::quasar::LatticeRnn ***)(a2 + 24);
    while (v12 != v13)
    {
      v14 = *v12;
      v15 = (kaldi::WordHypLattice::Node *)kaldi::nnet1::Nnet::OutputDim(this);
      kaldi::quasar::LatticeRnn::Pool(v14, v15, 0);
      v16 = (uint64_t)*v12 + 64;
      for (j = *((_QWORD *)*v12 + 9); j != v16; j = *(_QWORD *)(j + 8))
      {
        kaldi::nnet1::Nnet::SetHistoryState((uint64_t)this, (uint64_t)*v12 + 152, 0, 0);
        kaldi::nnet1::Nnet::Feedforward(this, *(_QWORD *)(j + 16) + 328, (_QWORD *)(*(_QWORD *)(j + 16) + 360), -1);
      }
      ++v12;
    }
    if (a4)
    {
      v18 = *(_QWORD *)(a2 + 24);
      if (*(_QWORD *)(a2 + 16) == v18)
      {
LABEL_21:
        v19 = 0;
        goto LABEL_22;
      }
      v7 = (uint64_t *)(v18 - 8);
LABEL_19:
      v19 = *v7;
LABEL_22:
      kaldi::CuVectorBase<float>::CopyFromVec(a4, v19 + 152);
    }
  }
}

void kaldi::quasar::LatticeRnn::Pool(kaldi::quasar::LatticeRnn *this, kaldi::WordHypLattice::Node *a2, int a3)
{
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  kaldi::quasar::LatticeRnn *v10;
  float v11;

  v5 = (char *)this + 152;
  kaldi::CuVector<float>::Resize((uint64_t)this + 152, (uint64_t)a2, 0);
  if (a3)
  {
    v7 = (char *)this + 80;
    v6 = *((_QWORD *)this + 10);
    if (!v6)
      return;
    v8 = (char *)this + 64;
    v9 = *((_QWORD *)this + 9);
    if ((char *)v9 == v7 - 16)
      goto LABEL_10;
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v5, *(_QWORD *)(v9 + 16) + 392, 1.0, 1.0);
      v9 = *(_QWORD *)(v9 + 8);
    }
    while ((char *)v9 != v8);
    goto LABEL_9;
  }
  v7 = (char *)this + 16;
  v6 = *((_QWORD *)this + 2);
  if (!v6)
    return;
  v10 = (kaldi::quasar::LatticeRnn *)*((_QWORD *)this + 1);
  if (v10 != this)
  {
    do
    {
      kaldi::CuVectorBase<float>::AddVec((uint64_t)v5, *((_QWORD *)v10 + 2) + 360, 1.0, 1.0);
      v10 = (kaldi::quasar::LatticeRnn *)*((_QWORD *)v10 + 1);
    }
    while (v10 != this);
LABEL_9:
    v6 = *(_QWORD *)v7;
  }
LABEL_10:
  v11 = 1.0 / (double)v6;
  kaldi::CuVectorBase<float>::Scale((uint64_t)v5, v11);
}

uint64_t writeBinaryCount(File *this, unint64_t a2, unsigned int a3)
{
  unsigned int v3;
  uint64_t v5;
  _QWORD *v6;
  unsigned int v8;
  unsigned int v9;
  __int16 __ptr;

  v3 = a2;
  if (a2 >> 15 || a3 > 2)
  {
    if (!(a2 >> 30) && a3 <= 4)
    {
      v9 = a2 | 0x80000000;
      if ((isLittleEndian(void)::haveEndianness & 1) != 0)
      {
        if (isLittleEndian(void)::endianIsLittle != 1)
          goto LABEL_20;
      }
      else
      {
        isLittleEndian(void)::endianIsLittle = 1;
        isLittleEndian(void)::haveEndianness = 1;
      }
      v9 = bswap32(v9);
LABEL_20:
      v5 = 4;
      File::fwrite(this, &v9, 4uLL, 1uLL);
      return v5;
    }
    if (a2 >> 62)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x1E0DE4A50], (uint64_t)"writeBinaryCount: count ", 24);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" is too large\n", 14);
      return 0;
    }
    v8 = HIDWORD(a2) | 0xC0000000;
    if ((isLittleEndian(void)::haveEndianness & 1) != 0)
    {
      if (isLittleEndian(void)::endianIsLittle != 1)
      {
LABEL_24:
        File::fwrite(this, &v8, 4uLL, 1uLL);
        v8 = v3;
        if ((isLittleEndian(void)::haveEndianness & 1) != 0)
        {
          if (isLittleEndian(void)::endianIsLittle != 1)
            goto LABEL_29;
        }
        else
        {
          isLittleEndian(void)::endianIsLittle = 1;
          isLittleEndian(void)::haveEndianness = 1;
        }
        v8 = bswap32(v8);
LABEL_29:
        File::fwrite(this, &v8, 4uLL, 1uLL);
        return 8;
      }
    }
    else
    {
      isLittleEndian(void)::endianIsLittle = 1;
      isLittleEndian(void)::haveEndianness = 1;
    }
    v8 = bswap32(v8);
    goto LABEL_24;
  }
  __ptr = a2;
  if ((isLittleEndian(void)::haveEndianness & 1) != 0)
  {
    if (isLittleEndian(void)::endianIsLittle != 1)
      goto LABEL_13;
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  __ptr = bswap32(a2) >> 16;
LABEL_13:
  v5 = 2;
  File::fwrite(this, &__ptr, 2uLL, 1uLL);
  return v5;
}

uint64_t readBinaryCount(File *a1, unint64_t *a2)
{
  size_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  _QWORD *v8;
  const char *v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned __int16 __ptr;

  __ptr = 0;
  v4 = File::fread(a1, &__ptr, 2uLL, 1uLL);
  result = 0;
  if (v4 == 1)
  {
    if ((isLittleEndian(void)::haveEndianness & 1) != 0)
    {
      if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
      {
        v6 = __ptr;
        if ((__ptr & 0x8000) != 0)
          goto LABEL_5;
        goto LABEL_11;
      }
    }
    else
    {
      isLittleEndian(void)::endianIsLittle = 1;
      isLittleEndian(void)::haveEndianness = 1;
    }
    v6 = __rev16(__ptr);
    __ptr = v6;
    if ((v6 & 0x8000) != 0)
    {
LABEL_5:
      if (File::fread(a1, &__ptr, 2uLL, 1uLL) != 1)
      {
        v8 = (_QWORD *)MEMORY[0x1E0DE4A50];
        v9 = "readBinaryCount: incomplete long count\n";
        v10 = 39;
        goto LABEL_13;
      }
      if ((isLittleEndian(void)::haveEndianness & 1) != 0)
      {
        if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
        {
          v7 = __ptr;
LABEL_16:
          v11 = ((v6 & 0x7FFF) << 16) | v7;
          v13 = ((v6 & 0x7FFF) << 16) | v7;
          if (!((unsigned __int16)(v6 & 0x7FFF) >> 14))
          {
            *a2 = v11;
            return 4;
          }
          *a2 = (v11 & 0x3FFFFFFF) << 32;
          if (File::fread(a1, &v13, 4uLL, 1uLL) == 1)
          {
            if ((isLittleEndian(void)::haveEndianness & 1) != 0)
            {
              if ((isLittleEndian(void)::endianIsLittle & 1) == 0)
              {
                v12 = v13;
LABEL_25:
                *a2 |= v12;
                return 8;
              }
            }
            else
            {
              isLittleEndian(void)::endianIsLittle = 1;
              isLittleEndian(void)::haveEndianness = 1;
            }
            v12 = bswap32(v13);
            goto LABEL_25;
          }
          v8 = (_QWORD *)MEMORY[0x1E0DE4A50];
          v9 = "readBinaryCount: incomplete long long count\n";
          v10 = 44;
LABEL_13:
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)v9, v10);
          return 0;
        }
      }
      else
      {
        isLittleEndian(void)::endianIsLittle = 1;
        isLittleEndian(void)::haveEndianness = 1;
      }
      v7 = bswap32(__ptr) >> 16;
      __ptr = v7;
      goto LABEL_16;
    }
LABEL_11:
    *a2 = v6;
    return 2;
  }
  return result;
}

uint64_t writeBinaryCount(File *a1, float a2)
{
  unsigned int __ptr;

  __ptr = LODWORD(a2);
  if ((isLittleEndian(void)::haveEndianness & 1) != 0)
  {
    if (isLittleEndian(void)::endianIsLittle != 1)
      return 4 * (File::fwrite(a1, &__ptr, 4uLL, 1uLL) == 1);
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  __ptr = bswap32(__ptr);
  return 4 * (File::fwrite(a1, &__ptr, 4uLL, 1uLL) == 1);
}

uint64_t writeBinaryCount(File *a1, double a2)
{
  unint64_t __ptr;

  __ptr = *(_QWORD *)&a2;
  if ((isLittleEndian(void)::haveEndianness & 1) != 0)
  {
    if (isLittleEndian(void)::endianIsLittle != 1)
      return 8 * (File::fwrite(a1, &__ptr, 8uLL, 1uLL) == 1);
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  __ptr = bswap64(__ptr);
  return 8 * (File::fwrite(a1, &__ptr, 8uLL, 1uLL) == 1);
}

uint64_t readBinaryCount(File *a1, float *a2)
{
  if (File::fread(a1, a2, 4uLL, 1uLL) != 1)
    return 0;
  if ((isLittleEndian(void)::haveEndianness & 1) != 0)
  {
    if (isLittleEndian(void)::endianIsLittle != 1)
      return 4;
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  *(_DWORD *)a2 = bswap32(*(_DWORD *)a2);
  return 4;
}

uint64_t readBinaryCount(File *a1, double *a2)
{
  if (File::fread(a1, a2, 8uLL, 1uLL) != 1)
    return 0;
  if ((isLittleEndian(void)::haveEndianness & 1) != 0)
  {
    if (isLittleEndian(void)::endianIsLittle != 1)
      return 8;
  }
  else
  {
    isLittleEndian(void)::endianIsLittle = 1;
    isLittleEndian(void)::haveEndianness = 1;
  }
  *(_QWORD *)a2 = bswap64(*(_QWORD *)a2);
  return 8;
}

uint64_t kaldi::MakeLatticeFromLinear@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>, float a4@<S0>, float a5@<S1>)
{
  uint64_t v10;
  unint64_t i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD v20[2];
  _DWORD v21[5];

  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  (*(void (**)(_QWORD))(*(_QWORD *)*a3 + 224))(*a3);
  v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 200))(*a3);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 176))(*a3, v10);
  for (i = 0; ; ++i)
  {
    if (i < (uint64_t)(a1[1] - *a1) >> 2)
    {
      v12 = *(_DWORD *)(*a1 + 4 * i);
      v13 = *a2;
      v14 = a2[1] - *a2;
      goto LABEL_6;
    }
    v13 = *a2;
    v14 = a2[1] - *a2;
    if (i >= v14 >> 2)
      break;
    v12 = 0;
LABEL_6:
    if (i >= v14 >> 2)
      v15 = 0;
    else
      v15 = *(_DWORD *)(v13 + 4 * i);
    v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 200))(*a3);
    v17 = *a3;
    v21[0] = v12;
    v21[1] = v15;
    v21[2] = 0;
    v21[3] = 0;
    v21[4] = v16;
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v17 + 208))(v17, v10, v21);
    v10 = v16;
  }
  v18 = *a3;
  *(float *)v20 = a4;
  *(float *)&v20[1] = a5;
  return (*(uint64_t (**)(uint64_t, uint64_t, _DWORD *))(*(_QWORD *)v18 + 184))(v18, v10, v20);
}

void sub_1ADFFE684(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlinePrefixBeamSearchDecoder::OnlinePrefixBeamSearchDecoder(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  uint64_t i;
  char *v5;
  unsigned __int8 v7[24];
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  v3 = quasar::CTCAlignedDecoder::CTCAlignedDecoder(a1, a2);
  *(_QWORD *)v3 = &off_1E5D3A4C0;
  *(_QWORD *)(v3 + 472) = 0x1000000010;
  *(_DWORD *)(v3 + 480) = -1;
  *(_WORD *)(v3 + 484) = 256;
  *(_BYTE *)(v3 + 486) = 0;
  std::string::basic_string[abi:ne180100]<0>(v7, "<?>");
  std::string::basic_string[abi:ne180100]<0>(v8, "<eps>");
  std::unordered_set<std::string>::unordered_set(a1 + 488, v7, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v8[i + 2]) < 0)
      operator delete(*(void **)&v7[i * 8 + 24]);
  }
  *(_BYTE *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_OWORD *)(a1 + 552) = 0u;
  v5 = (char *)operator new(0xA8uLL);
  *((_QWORD *)v5 + 2) = 0;
  *(_QWORD *)v5 = &unk_1E5D43328;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 19) = 0;
  *((_QWORD *)v5 + 20) = 0;
  *((_QWORD *)v5 + 18) = 0;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 104) = 0u;
  *(_OWORD *)(v5 + 120) = 0u;
  *((_DWORD *)v5 + 34) = 0;
  *(_OWORD *)(v5 + 24) = 0u;
  *(_QWORD *)(a1 + 576) = v5 + 24;
  *(_QWORD *)(a1 + 584) = v5;
  kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig::OnlineLatticeBiglmFasterDecoderConfig((kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *)(a1 + 592));
  *(_QWORD *)(a1 + 752) = 0xCF000000CF000000;
  *(_BYTE *)(a1 + 760) = 0;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 825) = 0u;
  *(_DWORD *)(a1 + 844) = 5000;
  *(_BYTE *)(a1 + 848) = 0;
  *(_OWORD *)(a1 + 852) = 0u;
  *(_OWORD *)(a1 + 868) = 0u;
  *(_OWORD *)(a1 + 881) = 0u;
  *(_BYTE *)(a1 + 897) = 1;
  *(_QWORD *)(a1 + 900) = 60000;
  *(_DWORD *)(a1 + 908) = 500;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 912), "");
  *(_DWORD *)(a1 + 952) = 0;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_WORD *)(a1 + 956) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 960), "increase-by-one");
  *(_QWORD *)(a1 + 984) = &unk_1E5CFF330;
  *(_QWORD *)(a1 + 1008) = a1 + 984;
  *(_QWORD *)(a1 + 1016) = 0x3F80000000000000;
  *(_DWORD *)(a1 + 1024) = 0;
  *(_BYTE *)(a1 + 57) = 1;
  return a1;
}

void sub_1ADFFE8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v20);
  if (*(char *)(v15 + 935) < 0)
    operator delete(*v18);
  quasar::UttDetectConfig::~UttDetectConfig(v17);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 576);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v15 + 560);
  if (*(char *)(v15 + 559) < 0)
    operator delete(*v19);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  quasar::CTCAlignedDecoder::~CTCAlignedDecoder((void **)v15);
  _Unwind_Resume(a1);
}

void quasar::OnlinePrefixBeamSearchDecoder::~OnlinePrefixBeamSearchDecoder(quasar::OnlinePrefixBeamSearchDecoder *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_1E5D3A4C0;
  v2 = (char *)this + 984;
  v3 = (char *)*((_QWORD *)this + 126);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  if (*((char *)this + 983) < 0)
    operator delete(*((void **)this + 120));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 936);
  if (*((char *)this + 935) < 0)
    operator delete(*((void **)this + 114));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 880);
  v5 = (void **)((char *)this + 856);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 839) < 0)
    operator delete(*((void **)this + 102));
  if (*((char *)this + 815) < 0)
    operator delete(*((void **)this + 99));
  if (*((char *)this + 791) < 0)
    operator delete(*((void **)this + 96));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 576);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 560);
  if (*((char *)this + 559) < 0)
    operator delete(*((void **)this + 67));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 488);
  *(_QWORD *)this = &off_1E5CFF0E0;
  if (*((char *)this + 471) < 0)
    operator delete(*((void **)this + 56));
  quasar::Decoder::~Decoder((void **)this);
}

{
  quasar::OnlinePrefixBeamSearchDecoder::~OnlinePrefixBeamSearchDecoder(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlinePrefixBeamSearchDecoder::registerParams(quasar::QsrTextSymbolTable **this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "ctc-prefix-beam-search-decoder");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 268, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  quasar::QsrTextSymbolTable::Register(this[72], a2, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "an nnlm that uses the same label sets as the encoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 114), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "nnlm-weight");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 0) the interpolation weight of nnlm");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 119), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "prune-before-fusion");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true) prune by symbol-beam before fusion");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 956, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "track-lm-score-separately");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) track lm score separately in the prefix; otherwise it will be fused into non-blank label's logprob d"
    "uring prefix merge");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 957, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "non-blank-penalty");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 0)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 127), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "blank-threshold-for-fusion");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 1)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)this + 1020, (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use-repetition-offset");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 128), (uint64_t)v4, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "symbol-beam");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 16) pick the top K symbols for the next round of expansion");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 476, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "beam");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default 16) how many paths to keep during search");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 59), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "blank");
  std::string::basic_string[abi:ne180100]<0>(v4, "id of the blank symbol");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 60), (uint64_t)v4, 1, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "use-viterbi");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true) if set, pick the highest probability instead of summing the probabilities when merging prefix");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 484, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "phone-syms-file");
  std::string::basic_string[abi:ne180100]<0>(v4, "Phone symbol table (text format) filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 67), (uint64_t)v4, 1, 16, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "keep-only-best-in-lattice");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default true)  keep only the best in the lattice");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 485, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "exit-without-search");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default false) disable beam search (for am-only energy measurement)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)this + 486, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "rejected-left-context-tokens");
  std::string::basic_string[abi:ne180100]<0>(v4, "List of tokens that don't work with left context. The decoder will reset the left context when it encounters one of these tokens.");
  quasar::SystemConfig::Register<std::unordered_set<std::string>>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 61), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "inter-utterance-left-context-max-size");
  std::string::basic_string[abi:ne180100]<0>(v4, "Maximum size for inter-utterance left context");
  quasar::SystemConfig::Register<unsigned int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 532, (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ilabel-mapper-type");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default increase-by-one), currently we support 'identity' and 'increase-by-one'");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 120), (uint64_t)v4, 0, 268, 271, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "preserve-white-space");
  std::string::basic_string[abi:ne180100]<0>(v4, "Preserve white space from decoder, default is true");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 66), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "separator");
  std::string::basic_string[abi:ne180100]<0>(v4, "(default ▁) indictator of the start of a new word for BPE");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)(this + 56), (uint64_t)v4, 0, 268, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "utt-detect.");
  quasar::UttDetectConfig::registerParams((uint64_t)(this + 74), a2, (const void **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  *((_DWORD *)this + 133) = 4;
}

void sub_1ADFFF3A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlinePrefixBeamSearchDecoder::finishInit(quasar::OnlinePrefixBeamSearchDecoder *this)
{
  char *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v9;
  uint64_t (**v10)();
  __int128 *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v2 = (char *)this + 960;
  v3 = (_QWORD *)((char *)this + 960);
  if ((*((char *)this + 983) & 0x80000000) == 0)
  {
    v4 = *((unsigned __int8 *)this + 983);
    if (v4 != 8)
    {
      if (v4 != 15)
        goto LABEL_41;
      goto LABEL_9;
    }
    if (*v3 != 0x797469746E656469)
      goto LABEL_41;
LABEL_16:
    v9 = (_QWORD *)((char *)this + 984);
    v10 = &off_1E5CFF858;
    goto LABEL_17;
  }
  v5 = *((_QWORD *)this + 121);
  if (v5 == 8 && *(_QWORD *)*v3 == 0x797469746E656469)
    goto LABEL_16;
  if (v5 != 15)
    goto LABEL_41;
  v3 = (_QWORD *)*v3;
LABEL_9:
  v6 = (_QWORD *)*v3;
  v7 = *(_QWORD *)((char *)v3 + 7);
  if (v6 != (_QWORD *)0x6573616572636E69 || v7 != 0x656E6F2D79622D65)
  {
LABEL_41:
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v31 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v23);
    v19 = *((char *)this + 983);
    if (v19 >= 0)
      v20 = (uint64_t)v2;
    else
      v20 = *((_QWORD *)this + 120);
    if (v19 >= 0)
      v21 = *((unsigned __int8 *)this + 983);
    else
      v21 = *((_QWORD *)this + 121);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v23, v20, v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, " is not a valid ilabel mapper");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v23);
  }
  v9 = (_QWORD *)((char *)this + 984);
  v10 = &off_1E5CFF8B0;
LABEL_17:
  *(_QWORD *)&v23 = v10;
  *((_QWORD *)&v24 + 1) = &v23;
  std::__function::__value_func<int ()(int)>::swap[abi:ne180100](&v23, v9);
  v11 = (__int128 *)*((_QWORD *)&v24 + 1);
  if (*((__int128 **)&v24 + 1) == &v23)
  {
    v12 = 4;
    v11 = &v23;
  }
  else
  {
    if (!*((_QWORD *)&v24 + 1))
      goto LABEL_22;
    v12 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_22:
  if (*((char *)this + 935) < 0)
  {
    if (!*((_QWORD *)this + 115))
      goto LABEL_31;
  }
  else if (!*((_BYTE *)this + 935))
  {
    goto LABEL_31;
  }
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEDecoder,std::allocator<kaldi::quasar::CEDecoder>,std::string &,void>(&v23);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 936, &v23);
  v13 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v14 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_31:
  if (*((char *)this + 559) < 0)
  {
    if (!*((_QWORD *)this + 68))
      goto LABEL_40;
  }
  else if (!*((_BYTE *)this + 559))
  {
    goto LABEL_40;
  }
  quasar::ModelLoader::readSymbolTable(*((_QWORD *)this + 46), (uint64_t)this + 536, 4, 0, (uint64_t *)&v23);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 560, &v23);
  v16 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v17 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
LABEL_40:
  quasar::QsrTextSymbolTable::init(*((const std::string **)this + 72), (quasar::OnlinePrefixBeamSearchDecoder *)((char *)this + 32), 0, *((unsigned __int8 *)this + 441), 1);
  quasar::EndPointDecoderConfig::init((quasar::OnlinePrefixBeamSearchDecoder *)((char *)this + 752));
}

void sub_1ADFFF754(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlinePrefixBeamSearchDecoder::runImpl(uint64_t a1, uint64_t a2, uint64_t *a3, quasar::SpeechRequestData **a4)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t *v12;
  uint64_t *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *ct;
  uint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  unint64_t v26;
  char locale;
  uint64_t v28;
  uint64_t v29;
  std::string::value_type v30;
  int v31;
  int v32;
  uint64_t v33;
  quasar::SpeechRequestData **v34;
  quasar::SpeechRequestData *v35;
  BOOL v36;
  signed int v37;
  char v38;
  uint64_t v39;
  float SilencePosterior;
  int v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  char *v48;
  std::string::size_type v49;
  uint64_t v50;
  std::string::size_type v51;
  _OWORD *v52;
  std::locale::__imp *v53;
  std::wstring *v54;
  unint64_t *p_size;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::string::size_type v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  char v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _QWORD *v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *end;
  unint64_t *v95;
  unint64_t v96;
  _QWORD *v97;
  int **v98;
  int *v99;
  int *v100;
  uint64_t v101;
  int v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  _QWORD *v109;
  int v110;
  int v111;
  float *v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  uint64_t v124;
  float *v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  float *v129;
  float *v130;
  float *v131;
  float v132;
  float v133;
  float v134;
  uint64_t v135;
  uint64_t v136;
  float v137;
  float v138;
  float *v139;
  float *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  float v145;
  int v146;
  float *v147;
  float v148;
  float v149;
  float v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  _OWORD *v155;
  _DWORD *v156;
  int v157;
  float *v158;
  int v159;
  float *v160;
  float v161;
  float v162;
  uint64_t v163;
  float *v164;
  float v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  std::__shared_weak_count *v170;
  unint64_t *v171;
  unint64_t v172;
  _QWORD *v173;
  std::__shared_weak_count *cntrl;
  uint64_t *v175;
  unint64_t v176;
  std::__shared_weak_count *v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  unint64_t *v185;
  unint64_t v186;
  _QWORD *v187;
  std::__shared_weak_count *v188;
  uint64_t *v189;
  unint64_t v190;
  std::__shared_weak_count *v191;
  unint64_t *v192;
  unint64_t v193;
  uint64_t *v194;
  unint64_t v195;
  BOOL v196;
  float *v197;
  uint64_t v198;
  float v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  char *v203;
  uint64_t v204;
  float *v205;
  char *v206;
  char *v207;
  float *v208;
  uint64_t v209;
  float *v210;
  float *v211;
  unint64_t v212;
  float *v213;
  float *v214;
  float v215;
  float v216;
  float v217;
  uint64_t v218;
  uint64_t v219;
  float v220;
  float v221;
  float *v222;
  float *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  unint64_t v227;
  float v228;
  int v229;
  float *v230;
  uint64_t v231;
  unint64_t v232;
  __int128 *v233;
  int *v234;
  uint64_t v235;
  float v236;
  uint64_t v237;
  std::string::size_type v238;
  std::string::size_type v239;
  std::string::size_type size;
  std::string::size_type v241;
  void *v242;
  uint64_t v243;
  unint64_t v244;
  int64_t v245;
  unint64_t v246;
  char *v247;
  void *v248;
  uint64_t v249;
  unint64_t v250;
  int64_t v251;
  unint64_t v252;
  char *v253;
  char *v254;
  int v255;
  float *v256;
  uint64_t v257;
  float v258;
  unint64_t *v259;
  unint64_t v260;
  unint64_t *v261;
  unint64_t v262;
  _QWORD *v263;
  std::__shared_weak_count *v264;
  uint64_t *v265;
  unint64_t v266;
  std::__shared_weak_count *v267;
  unint64_t *v268;
  unint64_t v269;
  _QWORD *v271;
  int *v272;
  int *v273;
  void *begin;
  uint64_t value_high;
  _QWORD *v276;
  _QWORD *v277;
  std::string *p_str;
  std::string::size_type v279;
  _QWORD *v280;
  char *v281;
  int v282;
  uint64_t v283;
  float v284;
  unint64_t *v285;
  unint64_t v286;
  unint64_t *v287;
  unint64_t v288;
  _QWORD *v289;
  std::__shared_weak_count *v290;
  uint64_t *v291;
  unint64_t v292;
  std::__shared_weak_count *v293;
  unint64_t *v294;
  unint64_t v295;
  float v296;
  float v297;
  std::__shared_weak_count *v298;
  uint64_t v299;
  unint64_t *v300;
  unint64_t v301;
  std::__shared_weak_count *v302;
  unint64_t *v303;
  unint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  std::__shared_weak_count *v308;
  unint64_t *v309;
  unint64_t v310;
  _QWORD *v312;
  int *v313;
  int *v314;
  void *v315;
  uint64_t v316;
  _QWORD *v317;
  _QWORD *v318;
  std::string *v319;
  std::string::size_type v320;
  _QWORD *v321;
  std::__shared_weak_count *v322;
  uint64_t v323;
  unint64_t *v324;
  unint64_t v325;
  std::__shared_weak_count *v326;
  unint64_t *v327;
  unint64_t v328;
  std::__shared_weak_count *v329;
  unint64_t *v330;
  unint64_t v331;
  unint64_t *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  _QWORD *v337;
  uint64_t v338;
  float *v339;
  unint64_t v340;
  uint64_t v341;
  uint64_t v343;
  float *v344;
  float v345;
  float v346;
  float v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  float *v351;
  int64_t v352;
  uint64_t v353;
  __int128 v354;
  uint64_t v355;
  __int128 v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  float v362;
  uint64_t v363;
  float v364;
  float v365;
  uint64_t v366;
  unint64_t v367;
  float v368;
  unint64_t v369;
  float v370;
  float v371;
  __int128 v372;
  uint64_t v373;
  float v374;
  unint64_t v375;
  float v376;
  float v377;
  unsigned __int32 flags;
  unsigned __int32 marked_count;
  float v380;
  float v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::__owns_one_state<char> *v385;
  unint64_t *p_first;
  unint64_t v387;
  std::__shared_weak_count *v388;
  unint64_t *v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  int v396;
  std::__shared_weak_count *v397;
  unint64_t *v398;
  unint64_t v399;
  std::__shared_weak_count *v400;
  unint64_t *v401;
  unint64_t v402;
  _QWORD *v403;
  int *v404;
  int *v405;
  std::string *v406;
  std::string::size_type v407;
  int **v408;
  uint64_t v409;
  void **v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  char *v414;
  char *v415;
  unsigned int v416;
  int v417;
  int v418;
  char *v419;
  char *v420;
  char *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  int *v427;
  int v428;
  int *v429;
  int *v430;
  std::string::size_type v431;
  std::__wrap_iter<const char *> v432;
  std::__wrap_iter<const char *> v433;
  std::__shared_weak_count *v434;
  uint64_t *v435;
  unint64_t v436;
  std::wstring *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  std::vector<std::wstring>::pointer v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  _QWORD *v445;
  std::string *v446;
  std::string::size_type v447;
  _QWORD *v448;
  _QWORD *v449;
  int *v450;
  int *v451;
  void *p_traits;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  _QWORD *v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t v461;
  std::ctype<char> *v462;
  std::__shared_weak_count *v463;
  uint64_t *v464;
  unint64_t v465;
  std::ctype<char> *v466;
  std::__shared_weak_count *v467;
  uint64_t *v468;
  unint64_t v469;
  char *v470;
  uint64_t v471;
  _OWORD *v472;
  char *v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t v476;
  int32x2_t v477;
  uint64_t v478;
  float v479;
  float v480;
  float v481;
  int v482;
  _QWORD *v483;
  uint64_t v484;
  uint64_t v485;
  uint64_t v486;
  int v487;
  BOOL v488;
  __int128 v489;
  BOOL v490;
  __int128 v491;
  uint64_t v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t *v496;
  uint64_t *v497;
  _QWORD *v498;
  std::__shared_weak_count *v499;
  uint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  unint64_t v503;
  uint64_t v504;
  uint64_t v505;
  double v506;
  unint64_t v507;
  double *v508;
  double *v509;
  double *v510;
  uint64_t v511;
  unint64_t v512;
  uint64_t v513;
  unint64_t v514;
  char *v515;
  double *v516;
  uint64_t v517;
  int v518;
  std::vector<std::wstring>::pointer v519;
  std::wstring::value_type v520;
  std::__shared_weak_count *v521;
  unint64_t *v522;
  unint64_t v523;
  std::__shared_weak_count *v524;
  unint64_t *v525;
  unint64_t v526;
  uint64_t v527;
  unint64_t v528;
  unint64_t v529;
  uint64_t *v530;
  _QWORD *v531;
  uint64_t v532;
  int *v533;
  int *v534;
  std::string *v535;
  std::string *v536;
  __int128 *v537;
  std::vector<std::wstring>::pointer v538;
  __int128 *v539;
  uint64_t *v540;
  unint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  std::vector<std::wstring>::pointer v546;
  std::vector<std::wstring>::pointer v547;
  __int128 v548;
  uint64_t v549;
  int v550;
  uint64_t v551;
  int v552;
  std::__shared_weak_count *v553;
  unint64_t *v554;
  unint64_t v555;
  uint64_t v556;
  std::__shared_weak_count *v557;
  unint64_t *v558;
  unint64_t v559;
  std::__shared_weak_count *v560;
  unint64_t *v561;
  unint64_t v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  uint64_t v566;
  _BYTE *v567;
  signed int v568;
  unint64_t v569;
  uint64_t v570;
  uint64_t Featurizer;
  quasar::SpeechRequestData **v572;
  char v573;
  unsigned int v574;
  kaldi::OnlineFeatureMatrix *v575;
  uint64_t v576;
  int v577;
  signed int v578;
  uint64_t *v579;
  unint64_t v580;
  int v581;
  uint64_t v582;
  unsigned __int8 *v583;
  unsigned int v584;
  uint64_t v585;
  std::vector<std::wstring> v586;
  void *v587;
  uint64_t v588;
  void *v589;
  uint64_t v590;
  void *v591;
  void *v592;
  uint64_t v593;
  int v594[2];
  std::__shared_weak_count *v595;
  uint64_t v596;
  std::__shared_weak_count *v597;
  __int128 v598;
  uint64_t v599;
  uint64_t v600;
  std::__shared_weak_count *v601;
  uint64_t v602;
  std::__shared_weak_count *v603;
  char v604;
  __int128 v605;
  uint64_t v606;
  uint64_t v607;
  std::__shared_weak_count *v608;
  uint64_t v609;
  std::__shared_weak_count *v610;
  char v611;
  uint64_t v612;
  std::__shared_weak_count *v613;
  std::string v614;
  std::__shared_weak_count *v615;
  uint64_t v616;
  unint64_t v617;
  unint64_t v618;
  int v619;
  void *v620;
  char *v621;
  char *v622;
  int v623;
  void **v624;
  std::string::size_type v625;
  int **v626;
  uint64_t v627;
  uint64_t v628;
  void *__s2;
  int *v630;
  uint64_t v631;
  __int128 v632;
  __int128 v633;
  int v634;
  _BYTE v635[16];
  uint64_t *v636;
  _OWORD v637[4];
  unint64_t v638;
  std::__shared_weak_count *v639;
  uint64_t (***v640)(_QWORD, int *, unint64_t, _QWORD, uint64_t, void **, void **, _QWORD, float, float, float, float, float, uint64_t, int *, uint64_t);
  std::string __str;
  _BYTE v642[40];
  __int128 v643;
  char v644;
  std::string v645;
  uint64_t *i;
  __int128 v647;
  uint64_t v648;
  std::vector<std::wstring> traits;
  __int128 v650;
  char *v651;
  void *v652[2];
  char v653;
  _BYTE v654[24];
  _BYTE *v655;
  std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type __p;
  __int128 v657;
  __int128 v658;
  void *v659[2];
  __int128 v660;
  __int128 v661;
  void *v662[2];
  __int128 v663;
  void *v664[2];
  __int128 v665;
  __int128 v666;
  __int128 v667;
  __int128 v668;
  __int128 v669;
  uint64_t v670;

  v670 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 486))
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = 0xFFFFFFFFLL;
    do
    {
      v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 8))(v5, v6);
      v6 = (v6 + 1);
    }
    while ((v7 & 1) == 0);
    return 1;
  }
  Featurizer = quasar::rescoring::AdapterModel::getFeaturizer(*(quasar::rescoring::AdapterModel **)(*a3 + 608));
  quasar::EndPointer::createEndPointer((quasar::EndPointer *)(a1 + 752), (const quasar::EndPointDecoderConfig *)(a1 + 592), *(const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig **)(a1 + 424), (const quasar::EndPointModelConfig *)*(unsigned __int8 *)(a1 + 896), 0, (uint64_t *)&v640);
  v12 = (uint64_t *)(a1 + 560);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a2 + 168), (uint64_t *)(a1 + 560));
  quasar::SymbolTableList::clear(*(quasar::SymbolTableList **)(*a3 + 472));
  v579 = a3;
  v13 = *(uint64_t **)(*a3 + 472);
  v14 = *(std::__shared_weak_count **)(a1 + 584);
  v638 = *(_QWORD *)(a1 + 576);
  v639 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  quasar::SymbolTableList::addSymbolTable(v13, &v638, 0, -1);
  v17 = v639;
  if (v639)
  {
    v18 = (unint64_t *)&v639->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = *(_QWORD *)(a1 + 576);
  std::string::basic_string[abi:ne180100]<0>(&__p, "<occupy-word-index-zero-to-prevent-meaningful-word-using-it>");
  quasar::QsrTextSymbolTable::AddSymbol(v20);
  if (SHIBYTE(__p.__traits_.__col_) < 0)
    operator delete(__p.__traits_.__loc_.__locale_);
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_16LatticeWeightTplIfEEiEENS1_11VectorStateIS6_NS_9allocatorIS6_EEEEEENS8_ISB_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v579 + 320, (__int128 *)&__p);
  ct = (std::__shared_weak_count *)__p.__traits_.__ct_;
  if (__p.__traits_.__ct_)
  {
    v22 = &__p.__traits_.__ct_->__shared_owners_;
    do
      v23 = __ldaxr((unint64_t *)v22);
    while (__stlxr(v23 - 1, (unint64_t *)v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))ct->__on_zero_shared)(ct);
      std::__shared_weak_count::__release_weak(ct);
    }
  }
  _ZNSt3__115allocate_sharedB8ne180100IN3fst9VectorFstINS1_6ArcTplINS1_23CompactLatticeWeightTplINS1_16LatticeWeightTplIfEEiEEiEENS1_11VectorStateIS8_NS_9allocatorIS8_EEEEEENSA_ISD_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v579 + 152, (__int128 *)&__p);
  v24 = (std::__shared_weak_count *)__p.__traits_.__ct_;
  if (__p.__traits_.__ct_)
  {
    v25 = &__p.__traits_.__ct_->__shared_owners_;
    do
      v26 = __ldaxr((unint64_t *)v25);
    while (__stlxr(v26 - 1, (unint64_t *)v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v567 = (_BYTE *)a2;
  locale = *(_BYTE *)(a1 + 528);
  LOBYTE(__p.__traits_.__loc_.__locale_) = locale;
  if (*(char *)(a1 + 471) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__p.__traits_.__ct_, *(const std::string::value_type **)(a1 + 448), *(_QWORD *)(a1 + 456));
    locale = (char)__p.__traits_.__loc_.__locale_;
  }
  else
  {
    *(_OWORD *)&__p.__traits_.__ct_ = *(_OWORD *)(a1 + 448);
    *(_QWORD *)&__p.__flags_ = *(_QWORD *)(a1 + 464);
  }
  v28 = *v579;
  *(_BYTE *)(v28 + 1136) = locale;
  v29 = v28 + 1144;
  if (*(char *)(v28 + 1167) < 0)
    operator delete(*(void **)v29);
  *(_OWORD *)v29 = *(_OWORD *)&__p.__traits_.__ct_;
  *(_QWORD *)(v29 + 16) = *(_QWORD *)&__p.__flags_;
  v570 = *(_QWORD *)(a2 + 16);
  v575 = *(kaldi::OnlineFeatureMatrix **)a2;
  v30 = *(_BYTE *)(a1 + 484);
  v572 = a4;
  v583 = (unsigned __int8 *)(a1 + 448);
  if (*(_BYTE *)(a1 + 957))
  {
    v31 = *(_DWORD *)(a1 + 952);
    *(_QWORD *)&v637[0] = 0x80000000800000;
    BYTE8(v637[0]) = v30;
    HIDWORD(v637[0]) = v31;
    memset(&v637[1], 0, 41);
    v32 = *(_DWORD *)(a1 + 952);
  }
  else
  {
    *(_QWORD *)&v637[0] = 0x80000000800000;
    BYTE8(v637[0]) = v30;
    memset((char *)v637 + 12, 0, 45);
    v32 = 0;
  }
  __str.__r_.__value_.__r.__words[0] = 4286578687;
  __str.__r_.__value_.__s.__data_[8] = v30;
  HIDWORD(__str.__r_.__value_.__r.__words[1]) = v32;
  __str.__r_.__value_.__r.__words[2] = 0;
  memset(&__p, 0, 24);
  *(_OWORD *)&__p.__flags_ = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  memset(&__p.__start_, 0, 24);
  memset(v642, 0, 33);
  v657 = 0uLL;
  LOBYTE(v658) = 0;
  std::unordered_map<std::vector<int>,kaldi::quasar::Score,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,std::allocator<std::pair<std::vector<int> const,kaldi::quasar::Score>>>::unordered_map((uint64_t)v635, (int **)&__p, 1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v657);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p.__start_.__cntrl_);
  if (__p.__traits_.__loc_.__locale_)
  {
    __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
    operator delete(__p.__traits_.__loc_.__locale_);
  }
  v632 = 0u;
  v633 = 0u;
  v634 = 1065353216;
  v630 = 0;
  __s2 = 0;
  v631 = 0;
  v627 = 0;
  v626 = 0;
  v628 = 0;
  v625 = 0;
  v33 = operator new();
  v34 = a4;
  *(_QWORD *)v33 = 0;
  *(_QWORD *)(v33 + 8) = 0;
  *(_QWORD *)(v33 + 16) = 0;
  v624 = (void **)v33;
  v35 = *a4;
  v568 = *((_DWORD *)*a4 + 2);
  v623 = 0;
  v621 = 0;
  v620 = 0;
  v622 = 0;
  if (quasar::SpeechRequestData::isUtteranceDetectionEnabled(v35))
    v36 = *(float *)(a1 + 904) == 0.0;
  else
    v36 = 1;
  v573 = v36;
  v584 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v567 + 16) + 24))(*(_QWORD *)(*(_QWORD *)v567 + 16));
  v574 = 0;
  v569 = 0;
  v619 = 0;
  v617 = 0;
  v616 = 0;
  v618 = 0;
  v37 = v568;
  while (1)
  {
    v38 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v570 + 8))(v570, (v37 - 1));
    v578 = v37;
    v39 = (v37 - *((_DWORD *)*v34 + 2));
    if ((v38 & 1) != 0)
    {
      v458 = *v579;
      *(_DWORD *)(v458 + 576) = v39;
      *(_BYTE *)(v458 + 580) = 1;
      goto LABEL_655;
    }
    SilencePosterior = 0.0;
    if (kaldi::OnlineFeatureMatrix::HasSilencePosterior(v575))
      SilencePosterior = kaldi::OnlineFeatureMatrix::GetSilencePosterior(v575, v37);
    if ((v573 & 1) != 0)
    {
      v41 = 1;
    }
    else if (SilencePosterior >= *(float *)(a1 + 904))
    {
      v41 = 0;
    }
    else
    {
      v41 = 1;
      v568 = v578;
    }
    if ((v41 & quasar::SpeechRequestData::isUtteranceDetectionEnabled(*v34)) == 1)
    {
      LODWORD(v566) = 0;
      LODWORD(v564) = 0;
      HIDWORD(v564) = v584;
      if (((**v640)(v640, &v619, v569, v574, v39, v624, &v620, 0, 0.0, 0.0, SilencePosterior, 0.0, 0.0, v564, &v623, v566) & 1) != 0)break;
    }
    v42 = *(_DWORD *)(a1 + 900);
    if (v42 >= 1 && (int)(v39 * v584) >= v42)
      break;
    kaldi::OnlineFeatureMatrix::GetFrame(v575, v578, (uint64_t *)v652);
    v573 = v41;
    kaldi::CuVector<float>::CuVector(&__p, v652, 0);
    v43 = v617;
    if (v617 >= v618)
    {
      v44 = std::vector<kaldi::CuVector<float>>::__push_back_slow_path<kaldi::CuVector<float>>(&v616, (uint64_t)&__p);
    }
    else
    {
      std::vector<kaldi::CuVector<float>>::__construct_one_at_end[abi:ne180100]<kaldi::CuVector<float>>((uint64_t)&v616, (uint64_t)&__p);
      v44 = v43 + 32;
    }
    v617 = v44;
    __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)&__p);
    if (*(_QWORD *)(a1 + 936))
    {
      kaldi::OnlineFeatureMatrix::GetAedFrame(v575, v578 - v568, (uint64_t *)&__p);
      kaldi::CuVector<float>::CuVector(&v614, &__p, 0);
      if (!v625)
      {
        v45 = *(_QWORD *)kaldi::quasar::CEDecoder::Engine(*(kaldi::quasar::CEDecoder **)(a1 + 936));
        v46 = kaldi::quasar::CEDecoder::MaxEncoderSize(*(kaldi::quasar::CEDecoder **)(a1 + 936));
        v47 = SLODWORD(v614.__r_.__value_.__r.__words[2]);
        v48 = (char *)operator new(0x18uLL);
        __p.__traits_.__col_ = (const std::collate<char> *)(v48 + 24);
        *(_QWORD *)v48 = 1;
        *((_QWORD *)v48 + 1) = v46;
        *((_QWORD *)v48 + 2) = v47;
        __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)v48;
        __p.__traits_.__ct_ = (const std::ctype<char> *)(v48 + 24);
        (*(void (**)(std::string *__return_ptr, uint64_t, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *))(*(_QWORD *)v45 + 56))(&__str, v45, &__p);
        v49 = __str.__r_.__value_.__r.__words[0];
        __str.__r_.__value_.__r.__words[0] = 0;
        v50 = v625;
        v625 = v49;
        if (v50)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
          v51 = __str.__r_.__value_.__r.__words[0];
          __str.__r_.__value_.__r.__words[0] = 0;
          if (v51)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v51 + 8))(v51);
        }
        if (__p.__traits_.__loc_.__locale_)
        {
          __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
          operator delete(__p.__traits_.__loc_.__locale_);
        }
        quasar::SpeechRequestData::getLeftContextForDecoder(*v34, (uint64_t *)&v650);
        (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, uint64_t))(*(_QWORD *)a1 + 184))(&__p, a1);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v52 = std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v650, (const void **)&__p.__traits_.__loc_.__locale_, (uint64_t)&std::piecewise_construct, &__str);
        if (SHIBYTE(__p.__traits_.__col_) < 0)
          operator delete(__p.__traits_.__loc_.__locale_);
        v53 = (std::locale::__imp *)*((_QWORD *)v52 + 7);
        if (v53)
        {
          v54 = (std::wstring *)*((_QWORD *)v52 + 8);
          traits.__begin_ = (std::vector<std::wstring>::pointer)*((_QWORD *)v52 + 7);
          traits.__end_ = v54;
          if (v54)
          {
            p_size = &v54->__r_.__value_.__l.__size_;
            do
              v56 = __ldxr(p_size);
            while (__stxr(v56 + 1, p_size));
          }
          __p.__traits_.__loc_.__locale_ = v53;
          v57 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)v53 + 64, (int **)v53, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p);
          v58 = v57[5];
          v59 = (std::__shared_weak_count *)v57[6];
          if (v59)
          {
            v60 = (unint64_t *)&v59->__shared_owners_;
            do
              v61 = __ldxr(v60);
            while (__stxr(v61 + 1, v60));
          }
          v62 = *(_QWORD *)(v58 + 16);
          v63 = *(_QWORD *)(v58 + 24);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v58;
          __str.__r_.__value_.__r.__words[2] = v62;
          *(_QWORD *)v642 = v63;
          v64 = *(_QWORD *)(v58 + 32);
          *(_QWORD *)&v642[8] = v64;
          if (v64)
          {
            v65 = (unint64_t *)(v64 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v67 = *(_QWORD *)(v58 + 48);
          *(_QWORD *)&v642[16] = *(_QWORD *)(v58 + 40);
          *(_QWORD *)&v642[24] = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v642[32] = *(_BYTE *)(v58 + 56);
          if (v59)
          {
            v70 = (unint64_t *)&v59->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
              std::__shared_weak_count::__release_weak(v59);
            }
          }
          *(_OWORD *)&__p.__traits_.__loc_.__locale_ = *(_OWORD *)&__str.__r_.__value_.__r.__words[1];
          v72 = *(_QWORD *)v642;
          v73 = *(_QWORD *)&v642[8];
          if (*(_QWORD *)&v642[8])
          {
            v74 = (unint64_t *)(*(_QWORD *)&v642[8] + 8);
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          v76 = *(_QWORD *)&v642[16];
          v77 = *(_QWORD *)&v642[24];
          if (*(_QWORD *)&v642[24])
          {
            v78 = (unint64_t *)(*(_QWORD *)&v642[24] + 8);
            do
              v79 = __ldxr(v78);
            while (__stxr(v79 + 1, v78));
          }
          v80 = v642[32];
          __str.__r_.__value_.__r.__words[0] = 0x80000000800000;
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
          v81 = *(std::__shared_weak_count **)&v642[8];
          *(_QWORD *)v642 = v72;
          *(_QWORD *)&v642[8] = v73;
          if (v81)
          {
            v82 = (unint64_t *)&v81->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          v84 = *(std::__shared_weak_count **)&v642[24];
          *(_QWORD *)&v642[16] = v76;
          *(_QWORD *)&v642[24] = v77;
          if (v84)
          {
            v85 = (unint64_t *)&v84->__shared_owners_;
            do
              v86 = __ldaxr(v85);
            while (__stlxr(v86 - 1, v85));
            if (!v86)
            {
              ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
              std::__shared_weak_count::__release_weak(v84);
            }
          }
          v642[32] = v80;
          LODWORD(__str.__r_.__value_.__r.__words[2]) = 0;
          HIDWORD(__str.__r_.__value_.__r.__words[0]) = 0;
          memset(&__p, 0, 24);
          *(_QWORD *)&v647 = &__p;
          v87 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int>&&>,std::tuple<>>((uint64_t)v635, (int **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)&v647);
          *(std::string *)(v87 + 5) = __str;
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v87 + 8, (uint64_t *)v642);
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v87 + 10, (uint64_t *)&v642[16]);
          *((_BYTE *)v87 + 96) = v642[32];
          if (__p.__traits_.__loc_.__locale_)
          {
            __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
            operator delete(__p.__traits_.__loc_.__locale_);
          }
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Inter-utterance context is found; copy it",
              41);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
          v88 = *(std::__shared_weak_count **)&v642[24];
          if (*(_QWORD *)&v642[24])
          {
            v89 = (unint64_t *)(*(_QWORD *)&v642[24] + 8);
            do
              v90 = __ldaxr(v89);
            while (__stlxr(v90 - 1, v89));
            if (!v90)
            {
              ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
              std::__shared_weak_count::__release_weak(v88);
            }
          }
          v91 = *(std::__shared_weak_count **)&v642[8];
          if (*(_QWORD *)&v642[8])
          {
            v92 = (unint64_t *)(*(_QWORD *)&v642[8] + 8);
            do
              v93 = __ldaxr(v92);
            while (__stlxr(v93 - 1, v92));
            if (!v93)
            {
              ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
              std::__shared_weak_count::__release_weak(v91);
            }
          }
          end = (std::__shared_weak_count *)traits.__end_;
          if (traits.__end_)
          {
            v95 = &traits.__end_->__r_.__value_.__l.__size_;
            do
              v96 = __ldaxr(v95);
            while (__stlxr(v96 - 1, v95));
            if (!v96)
            {
              ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
              std::__shared_weak_count::__release_weak(end);
            }
          }
        }
        else
        {
          memset(&__p, 0, 24);
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v97 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int>&&>,std::tuple<>>((uint64_t)v635, (int **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
          if (__p.__traits_.__loc_.__locale_)
          {
            __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
            operator delete(__p.__traits_.__loc_.__locale_);
          }
          v98 = (int **)kaldi::quasar::CEDecoder::StartOfTranscript(*(kaldi::quasar::CEDecoder **)(a1 + 936));
          v99 = *v98;
          v100 = v98[1];
          if (*v98 != v100)
          {
            v101 = (uint64_t)(v97 + 5);
            do
            {
              v102 = *v99;
              v103 = *(std::__shared_weak_count **)(a1 + 944);
              v612 = *(_QWORD *)(a1 + 936);
              v613 = v103;
              if (v103)
              {
                v104 = (unint64_t *)&v103->__shared_owners_;
                do
                  v105 = __ldxr(v104);
                while (__stxr(v105 + 1, v104));
              }
              kaldi::quasar::Score::updateLmCache(v101, v102, &v612, (uint64_t *)&v625);
              v106 = v613;
              if (v613)
              {
                v107 = (unint64_t *)&v613->__shared_owners_;
                do
                  v108 = __ldaxr(v107);
                while (__stlxr(v108 - 1, v107));
                if (!v108)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              ++v99;
            }
            while (v99 != v100);
          }
          if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"No inter-utterance context is found; initialize by <s>",
              54);
            kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&__p);
          }
        }
        memset(&__p, 0, 24);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        v109 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int>&&>,std::tuple<>>((uint64_t)v635, (int **)&__p, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
        if (__p.__traits_.__loc_.__locale_)
        {
          __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
          operator delete(__p.__traits_.__loc_.__locale_);
        }
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)&v637[2] + 1, v109 + 10);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)&v637[1] + 1, v109 + 8);
        std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)&v650, *((_QWORD **)&v650 + 1));
      }
      v110 = kaldi::quasar::CEDecoder::MaxEncoderSize(*(kaldi::quasar::CEDecoder **)(a1 + 936));
      (*(void (**)(std::string::size_type, std::string::size_type, _QWORD, _QWORD))(*(_QWORD *)v625 + 88))(v625, v614.__r_.__value_.__l.__size_, LODWORD(v614.__r_.__value_.__r.__words[2]), (LODWORD(v614.__r_.__value_.__r.__words[2]) * (v578 % v110)));
      v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)&v614);
    }
    v111 = *(_DWORD *)(a1 + 476);
    if (v111 >= SLODWORD(v652[1]))
      v111 = (int)v652[1];
    v581 = v111;
    v650 = 0uLL;
    v651 = 0;
    if (SLODWORD(v652[1]) < 1)
    {
      v112 = 0;
      v125 = 0;
    }
    else
    {
      v112 = 0;
      v113 = 0;
      do
      {
        v114 = *((_DWORD *)v652[0] + v113);
        if (v112 >= (float *)v651)
        {
          v115 = (uint64_t)((uint64_t)v112 - v650) >> 3;
          if ((unint64_t)(v115 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v116 = (uint64_t)&v651[-v650] >> 2;
          if (v116 <= v115 + 1)
            v116 = v115 + 1;
          if ((unint64_t)&v651[-v650] >= 0x7FFFFFFFFFFFFFF8)
            v117 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v117 = v116;
          v118 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v651, v117);
          v120 = &v118[8 * v115];
          *(_DWORD *)v120 = v113;
          *((_DWORD *)v120 + 1) = v114;
          v121 = (char *)*((_QWORD *)&v650 + 1);
          v122 = (char *)v650;
          v123 = v120;
          if (*((_QWORD *)&v650 + 1) != (_QWORD)v650)
          {
            do
            {
              v124 = *((_QWORD *)v121 - 1);
              v121 -= 8;
              *((_QWORD *)v123 - 1) = v124;
              v123 -= 8;
            }
            while (v121 != v122);
            v121 = (char *)v650;
          }
          v112 = (float *)(v120 + 8);
          *(_QWORD *)&v650 = v123;
          *((_QWORD *)&v650 + 1) = v120 + 8;
          v651 = &v118[8 * v119];
          if (v121)
            operator delete(v121);
        }
        else
        {
          *(_DWORD *)v112 = v113;
          *((_DWORD *)v112 + 1) = v114;
          v112 += 2;
        }
        *((_QWORD *)&v650 + 1) = v112;
        ++v113;
      }
      while (v113 < SLODWORD(v652[1]));
      v125 = (float *)v650;
    }
    v126 = v581;
    if (v581)
    {
      if (v581 >= 2)
      {
        v127 = (unint64_t)(v581 - 2) >> 1;
        v128 = v127 + 1;
        v129 = &v125[2 * v127];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>((uint64_t)v125, v581, v129);
          v129 -= 2;
          --v128;
        }
        while (v128);
      }
      v130 = &v125[2 * v581];
      if (v130 != v112)
      {
        v131 = &v125[2 * v581];
        do
        {
          v132 = v131[1];
          v133 = v125[1];
          if (v132 > v133)
          {
            v134 = *v131;
            *v131 = *v125;
            *v125 = v134;
            v131[1] = v133;
            v125[1] = v132;
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>((uint64_t)v125, v581, v125);
          }
          v131 += 2;
        }
        while (v131 != v112);
      }
      if (v581 >= 2)
      {
        v135 = v581 & 0x1FFFFFFFFFFFFFFFLL;
        do
        {
          v136 = 0;
          v137 = *v125;
          v138 = v125[1];
          v139 = v125;
          do
          {
            v140 = v139;
            v139 += 2 * v136 + 2;
            v141 = 2 * v136;
            v136 = (2 * v136) | 1;
            v142 = v141 + 2;
            if (v142 < v135 && v139[1] > v139[3])
            {
              v139 += 2;
              v136 = v142;
            }
            *v140 = *v139;
            v140[1] = v139[1];
          }
          while (v136 <= (uint64_t)((unint64_t)(v135 - 2) >> 1));
          if (v139 == v130 - 2)
          {
            *v139 = v137;
          }
          else
          {
            *v139 = *(v130 - 2);
            v139[1] = *(v130 - 1);
            *(v130 - 2) = v137;
            *(v130 - 1) = v138;
            v143 = (char *)v139 - (char *)v125 + 8;
            if (v143 < 9)
              goto LABEL_180;
            v144 = (((unint64_t)v143 >> 3) - 2) >> 1;
            v145 = v125[2 * v144 + 1];
            v138 = v139[1];
            if (v145 <= v138)
              goto LABEL_180;
            v146 = *(_DWORD *)v139;
            do
            {
              v147 = v139;
              v139 = &v125[2 * v144];
              *v147 = *v139;
              v147[1] = v145;
              if (!v144)
                break;
              v144 = (v144 - 1) >> 1;
              v145 = v125[2 * v144 + 1];
            }
            while (v145 > v138);
            *(_DWORD *)v139 = v146;
          }
          v139[1] = v138;
LABEL_180:
          v130 -= 2;
          v196 = v135-- <= 2;
        }
        while (!v196);
      }
    }
    std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)&v650, v581);
    v148 = *((float *)v652[0] + *(int *)(a1 + 480));
    v149 = *(float *)(a1 + 1020);
    if (v148 > v149)
      v150 = 0.0;
    else
      v150 = 1.0;
    v151 = v636;
    if (v636)
    {
      v152 = *((_QWORD *)&v650 + 1);
      v153 = v650;
      do
      {
        if (v152 == v153)
        {
          v152 = v153;
        }
        else
        {
          v154 = 0;
          v155 = v151 + 5;
          do
          {
            v156 = (_DWORD *)(v153 + 8 * v154);
            v159 = *v156;
            v158 = (float *)(v156 + 1);
            v157 = v159;
            if (v159 == *(_DWORD *)(a1 + 480))
            {
              if (!std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(&v632, (int **)v151 + 2))
              {
                *(_OWORD *)&__p.__traits_.__loc_.__locale_ = *v155;
                v167 = v151[8];
                v166 = v151[9];
                __p.__traits_.__col_ = (const std::collate<char> *)v151[7];
                *(_QWORD *)&__p.__flags_ = v167;
                *(_QWORD *)&__p.__loop_count_ = v166;
                if (v166)
                {
                  v168 = (unint64_t *)(v166 + 8);
                  do
                    v169 = __ldxr(v168);
                  while (__stxr(v169 + 1, v168));
                }
                v170 = (std::__shared_weak_count *)v151[11];
                __p.__start_.__ptr_ = (std::shared_ptr<std::__empty_state<char>>::element_type *)v151[10];
                __p.__start_.__cntrl_ = v170;
                if (v170)
                {
                  v171 = (unint64_t *)&v170->__shared_owners_;
                  do
                    v172 = __ldxr(v171);
                  while (__stxr(v172 + 1, v171));
                }
                LOBYTE(__p.__end_) = *((_BYTE *)v151 + 96);
                __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)0x80000000800000;
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v151 + 2);
                v173 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)v151 + 2, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
                *(_OWORD *)(v173 + 5) = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
                v173[7] = __p.__traits_.__col_;
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v173 + 8), (__int128 *)&__p.__flags_);
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v173 + 10), (__int128 *)&__p.__start_);
                *((_BYTE *)v173 + 96) = __p.__end_;
                cntrl = __p.__start_.__cntrl_;
                if (__p.__start_.__cntrl_)
                {
                  v175 = &__p.__start_.__cntrl_->__shared_owners_;
                  do
                    v176 = __ldaxr((unint64_t *)v175);
                  while (__stlxr(v176 - 1, (unint64_t *)v175));
                  if (!v176)
                  {
                    ((void (*)(std::__shared_weak_count *))cntrl->__on_zero_shared)(cntrl);
                    std::__shared_weak_count::__release_weak(cntrl);
                  }
                }
                v177 = *(std::__shared_weak_count **)&__p.__loop_count_;
                if (*(_QWORD *)&__p.__loop_count_)
                {
                  v178 = (unint64_t *)(*(_QWORD *)&__p.__loop_count_ + 8);
                  do
                    v179 = __ldaxr(v178);
                  while (__stlxr(v179 - 1, v178));
                  if (!v179)
                  {
                    ((void (*)(std::__shared_weak_count *))v177->__on_zero_shared)(v177);
                    std::__shared_weak_count::__release_weak(v177);
                  }
                }
              }
              __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)(v151 + 2);
              v160 = (float *)std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)v151 + 2, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p);
              v161 = v160[11];
              v162 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v151 + 5), *((float *)v151 + 11), *((float *)v151 + 10));
              v160[11] = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v151 + 5), v161, v162 + *v158);
            }
            else
            {
              v163 = v151[3];
              if (v151[2] != v163 && v157 == *(_DWORD *)(v163 - 4))
              {
                if (!std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(&v632, (int **)v151 + 2))
                {
                  *(_OWORD *)&__p.__traits_.__loc_.__locale_ = *v155;
                  v181 = v151[8];
                  v180 = v151[9];
                  __p.__traits_.__col_ = (const std::collate<char> *)v151[7];
                  *(_QWORD *)&__p.__flags_ = v181;
                  *(_QWORD *)&__p.__loop_count_ = v180;
                  if (v180)
                  {
                    v182 = (unint64_t *)(v180 + 8);
                    do
                      v183 = __ldxr(v182);
                    while (__stxr(v183 + 1, v182));
                  }
                  v184 = (std::__shared_weak_count *)v151[11];
                  __p.__start_.__ptr_ = (std::shared_ptr<std::__empty_state<char>>::element_type *)v151[10];
                  __p.__start_.__cntrl_ = v184;
                  if (v184)
                  {
                    v185 = (unint64_t *)&v184->__shared_owners_;
                    do
                      v186 = __ldxr(v185);
                    while (__stxr(v186 + 1, v185));
                  }
                  LOBYTE(__p.__end_) = *((_BYTE *)v151 + 96);
                  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)0x80000000800000;
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)(v151 + 2);
                  v187 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)v151 + 2, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
                  *(_OWORD *)(v187 + 5) = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
                  v187[7] = __p.__traits_.__col_;
                  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v187 + 8), (__int128 *)&__p.__flags_);
                  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v187 + 10), (__int128 *)&__p.__start_);
                  *((_BYTE *)v187 + 96) = __p.__end_;
                  v188 = __p.__start_.__cntrl_;
                  if (__p.__start_.__cntrl_)
                  {
                    v189 = &__p.__start_.__cntrl_->__shared_owners_;
                    do
                      v190 = __ldaxr((unint64_t *)v189);
                    while (__stlxr(v190 - 1, (unint64_t *)v189));
                    if (!v190)
                    {
                      ((void (*)(std::__shared_weak_count *))v188->__on_zero_shared)(v188);
                      std::__shared_weak_count::__release_weak(v188);
                    }
                  }
                  v191 = *(std::__shared_weak_count **)&__p.__loop_count_;
                  if (*(_QWORD *)&__p.__loop_count_)
                  {
                    v192 = (unint64_t *)(*(_QWORD *)&__p.__loop_count_ + 8);
                    do
                      v193 = __ldaxr(v192);
                    while (__stlxr(v193 - 1, v192));
                    if (!v193)
                    {
                      ((void (*)(std::__shared_weak_count *))v191->__on_zero_shared)(v191);
                      std::__shared_weak_count::__release_weak(v191);
                    }
                  }
                }
                __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)(v151 + 2);
                v164 = (float *)std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)v151 + 2, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p);
                v165 = 1.0;
                if (v148 <= v149 && *(float *)(a1 + 1024) != 0.0)
                  v165 = *(float *)(a1 + 952) + 1.0;
                v164[10] = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v151 + 5), v164[10], (float)(*(float *)v155 + (float)(*v158 * v165)) - *(float *)(a1 + 1016));
              }
            }
            ++v154;
            v152 = *((_QWORD *)&v650 + 1);
            v153 = v650;
          }
          while (v154 < (uint64_t)(*((_QWORD *)&v650 + 1) - v650) >> 3);
        }
        v151 = (uint64_t *)*v151;
      }
      while (v151);
      v194 = v636;
      if (v636)
      {
        v195 = (unint64_t)(v581 - 2) >> 1;
        v580 = v195 + 1;
        v576 = 2 * v195;
        while (1)
        {
          if (*(_QWORD *)(a1 + 936) && *((float *)v194 + 13) > 0.0)
          {
            v196 = *(_BYTE *)(a1 + 956) || v148 > v149;
            if (!v196)
            {
              v197 = (float *)v650;
              *((_QWORD *)&v650 + 1) = v650;
              if (SLODWORD(v652[1]) < 1)
              {
                v210 = (float *)v650;
              }
              else
              {
                v198 = 0;
                do
                {
                  v199 = *((float *)v652[0] + v198)
                       + (float)(*(float *)(*(_QWORD *)(v194[8] + 8) + 4 * v198) * *((float *)v194 + 13));
                  if (v197 >= (float *)v651)
                  {
                    v200 = (uint64_t)((uint64_t)v197 - v650) >> 3;
                    if ((unint64_t)(v200 + 1) >> 61)
                      std::vector<int>::__throw_length_error[abi:ne180100]();
                    v201 = (uint64_t)&v651[-v650] >> 2;
                    if (v201 <= v200 + 1)
                      v201 = v200 + 1;
                    if ((unint64_t)&v651[-v650] >= 0x7FFFFFFFFFFFFFF8)
                      v202 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v202 = v201;
                    v203 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)&v651, v202);
                    v205 = (float *)&v203[8 * v200];
                    *(_DWORD *)v205 = v198;
                    v205[1] = v199;
                    v206 = (char *)*((_QWORD *)&v650 + 1);
                    v207 = (char *)v650;
                    v208 = v205;
                    if (*((_QWORD *)&v650 + 1) != (_QWORD)v650)
                    {
                      do
                      {
                        v209 = *((_QWORD *)v206 - 1);
                        v206 -= 8;
                        *((_QWORD *)v208 - 1) = v209;
                        v208 -= 2;
                      }
                      while (v206 != v207);
                      v206 = (char *)v650;
                    }
                    v197 = v205 + 2;
                    *(_QWORD *)&v650 = v208;
                    *((_QWORD *)&v650 + 1) = v205 + 2;
                    v651 = &v203[8 * v204];
                    if (v206)
                      operator delete(v206);
                  }
                  else
                  {
                    *(_DWORD *)v197 = v198;
                    v197[1] = v199;
                    v197 += 2;
                  }
                  *((_QWORD *)&v650 + 1) = v197;
                  ++v198;
                }
                while (v198 < SLODWORD(v652[1]));
                v210 = (float *)v650;
              }
              if (v581)
              {
                if (v581 >= 2)
                {
                  v211 = &v210[v576];
                  v212 = v580;
                  do
                  {
                    std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>((uint64_t)v210, v126, v211);
                    v211 -= 2;
                    --v212;
                  }
                  while (v212);
                }
                v213 = &v210[2 * v126];
                if (v213 != v197)
                {
                  v214 = &v210[2 * v126];
                  do
                  {
                    v215 = v214[1];
                    v216 = v210[1];
                    if (v215 > v216)
                    {
                      v217 = *v214;
                      *v214 = *v210;
                      *v210 = v217;
                      v214[1] = v216;
                      v210[1] = v215;
                      std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_2 &,std::__wrap_iter<std::pair<int,float> *>>((uint64_t)v210, v126, v210);
                    }
                    v214 += 2;
                  }
                  while (v214 != v197);
                }
                if (v581 >= 2)
                {
                  v218 = v581 & 0x1FFFFFFFFFFFFFFFLL;
                  do
                  {
                    v219 = 0;
                    v220 = *v210;
                    v221 = v210[1];
                    v222 = v210;
                    do
                    {
                      v223 = v222;
                      v222 += 2 * v219 + 2;
                      v224 = 2 * v219;
                      v219 = (2 * v219) | 1;
                      v225 = v224 + 2;
                      if (v225 < v218 && v222[1] > v222[3])
                      {
                        v222 += 2;
                        v219 = v225;
                      }
                      *v223 = *v222;
                      v223[1] = v222[1];
                    }
                    while (v219 <= (uint64_t)((unint64_t)(v218 - 2) >> 1));
                    if (v222 == v213 - 2)
                    {
                      *v222 = v220;
                    }
                    else
                    {
                      *v222 = *(v213 - 2);
                      v222[1] = *(v213 - 1);
                      *(v213 - 2) = v220;
                      *(v213 - 1) = v221;
                      v226 = (char *)v222 - (char *)v210 + 8;
                      if (v226 < 9)
                        goto LABEL_286;
                      v227 = (((unint64_t)v226 >> 3) - 2) >> 1;
                      v228 = v210[2 * v227 + 1];
                      v221 = v222[1];
                      if (v228 <= v221)
                        goto LABEL_286;
                      v229 = *(_DWORD *)v222;
                      do
                      {
                        v230 = v222;
                        v222 = &v210[2 * v227];
                        *v230 = *v222;
                        v230[1] = v228;
                        if (!v227)
                          break;
                        v227 = (v227 - 1) >> 1;
                        v228 = v210[2 * v227 + 1];
                      }
                      while (v228 > v221);
                      *(_DWORD *)v222 = v229;
                    }
                    v222[1] = v221;
LABEL_286:
                    v213 -= 2;
                    v196 = v218-- <= 2;
                  }
                  while (!v196);
                }
              }
              std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)&v650, v126);
            }
          }
          v231 = v650;
          if (*((_QWORD *)&v650 + 1) != (_QWORD)v650)
            break;
LABEL_461:
          v194 = (uint64_t *)*v194;
          v126 = v581;
          if (!v194)
            goto LABEL_462;
        }
        v232 = 0;
        v233 = (__int128 *)(v194 + 5);
        while (2)
        {
          v234 = (int *)(v231 + 8 * v232);
          v235 = *v234;
          if ((_DWORD)v235 != *(_DWORD *)(a1 + 480))
          {
            v236 = *((float *)v652[0] + v235);
            v237 = v194[3];
            if (v194[2] == v237 || (_DWORD)v235 != *(_DWORD *)(v237 - 4))
            {
              memset(&v614, 0, sizeof(v614));
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v614, (const void *)v194[2], v237, (v237 - v194[2]) >> 2);
              size = v614.__r_.__value_.__l.__size_;
              if (v614.__r_.__value_.__l.__size_ >= v614.__r_.__value_.__r.__words[2])
              {
                v242 = (void *)v614.__r_.__value_.__r.__words[0];
                v243 = (uint64_t)(v614.__r_.__value_.__l.__size_ - v614.__r_.__value_.__r.__words[0]) >> 2;
                v244 = v243 + 1;
                if ((unint64_t)(v243 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v245 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 1 > v244)
                  v244 = v245 >> 1;
                if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFFCLL)
                  v246 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v246 = v244;
                if (v246)
                {
                  v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v246);
                  size = v614.__r_.__value_.__l.__size_;
                  v242 = (void *)v614.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v247 = 0;
                }
                v254 = &v247[4 * v243];
                *(_DWORD *)v254 = *v234;
                v241 = (std::string::size_type)(v254 + 4);
                while ((void *)size != v242)
                {
                  v255 = *(_DWORD *)(size - 4);
                  size -= 4;
                  *((_DWORD *)v254 - 1) = v255;
                  v254 -= 4;
                }
                v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
                v614.__r_.__value_.__l.__size_ = v241;
                v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v247[4 * v246];
                if (v242)
                  operator delete(v242);
              }
              else
              {
                *(_DWORD *)v614.__r_.__value_.__l.__size_ = *v234;
                v241 = size + 4;
              }
              v614.__r_.__value_.__l.__size_ = v241;
              if (!std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(&v632, (int **)&v614))
              {
                *(_OWORD *)&__p.__traits_.__loc_.__locale_ = v637[0];
                *(_OWORD *)&__p.__traits_.__col_ = v637[1];
                *(_QWORD *)&__p.__loop_count_ = *(_QWORD *)&v637[2];
                if (*(_QWORD *)&v637[2])
                {
                  v259 = (unint64_t *)(*(_QWORD *)&v637[2] + 8);
                  do
                    v260 = __ldxr(v259);
                  while (__stxr(v260 + 1, v259));
                }
                __p.__start_ = *(std::shared_ptr<std::__empty_state<char>> *)((char *)&v637[2] + 8);
                if (*(_QWORD *)&v637[3])
                {
                  v261 = (unint64_t *)(*(_QWORD *)&v637[3] + 8);
                  do
                    v262 = __ldxr(v261);
                  while (__stxr(v262 + 1, v261));
                }
                LOBYTE(__p.__end_) = BYTE8(v637[3]);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v614;
                v263 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)&v614, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
                *(_OWORD *)(v263 + 5) = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
                v263[7] = __p.__traits_.__col_;
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v263 + 8), (__int128 *)&__p.__flags_);
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v263 + 10), (__int128 *)&__p.__start_);
                *((_BYTE *)v263 + 96) = __p.__end_;
                v264 = __p.__start_.__cntrl_;
                if (__p.__start_.__cntrl_)
                {
                  v265 = &__p.__start_.__cntrl_->__shared_owners_;
                  do
                    v266 = __ldaxr((unint64_t *)v265);
                  while (__stlxr(v266 - 1, (unint64_t *)v265));
                  if (!v266)
                  {
                    ((void (*)(std::__shared_weak_count *))v264->__on_zero_shared)(v264);
                    std::__shared_weak_count::__release_weak(v264);
                  }
                }
                v267 = *(std::__shared_weak_count **)&__p.__loop_count_;
                if (*(_QWORD *)&__p.__loop_count_)
                {
                  v268 = (unint64_t *)(*(_QWORD *)&__p.__loop_count_ + 8);
                  do
                    v269 = __ldaxr(v268);
                  while (__stlxr(v269 - 1, v268));
                  if (!v269)
                  {
                    ((void (*)(std::__shared_weak_count *))v267->__on_zero_shared)(v267);
                    std::__shared_weak_count::__release_weak(v267);
                  }
                }
              }
              __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v614;
              v256 = (float *)std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)&v614, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p);
              if (!*(_BYTE *)(a1 + 957))
              {
                v257 = v194[8];
                v258 = v257 ? *(float *)(*(_QWORD *)(v257 + 8) + 4 * *v234) : 0.0;
                v236 = v236 + (float)((float)(*(float *)(a1 + 952) * v258) * v150);
                if (quasar::gLogLevel >= 6 && kaldi::g_kaldi_verbose_level >= 3)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
                  v271 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"[ ", 2);
                  v647 = 0uLL;
                  v648 = 0;
                  v272 = (int *)v194[2];
                  v273 = (int *)v194[3];
                  v586.__begin_ = (std::vector<std::wstring>::pointer)&v647;
                  while (v272 != v273)
                  {
                    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v272);
                    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v586, (__int128 *)&__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                    ++v272;
                  }
                  v645.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
                  v645.__r_.__value_.__l.__size_ = 1;
                  quasar::join<std::vector<std::string>>((uint64_t *)&v647, (uint64_t *)&v645);
                  if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
                    begin = &traits;
                  else
                    begin = traits.__begin_;
                  if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
                    value_high = HIBYTE(traits.__end_cap_.__value_);
                  else
                    value_high = (uint64_t)traits.__end_;
                  v276 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v271, (uint64_t)begin, value_high);
                  v277 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v276, (uint64_t)" ] + [ ", 7);
                  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v234);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_str = &__str;
                  else
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v279 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  else
                    v279 = __str.__r_.__value_.__l.__size_;
                  v280 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v277, (uint64_t)p_str, v279);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v280, (uint64_t)" ], ", 4);
                  std::ostream::operator<<();
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (SHIBYTE(traits.__end_cap_.__value_) < 0)
                    operator delete(traits.__begin_);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v647;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
              }
              v296 = v256[10];
              v297 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v194 + 5), *((float *)v194 + 11), *((float *)v194 + 10));
              v256[10] = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v194 + 5), v296, (float)(v236 + v297) - *(float *)(a1 + 1016));
              if (!*((_DWORD *)v256 + 15))
              {
                v598 = *v233;
                v299 = v194[8];
                v298 = (std::__shared_weak_count *)v194[9];
                v599 = v194[7];
                v600 = v299;
                v601 = v298;
                if (v298)
                {
                  v300 = (unint64_t *)&v298->__shared_owners_;
                  do
                    v301 = __ldxr(v300);
                  while (__stxr(v301 + 1, v300));
                }
                v302 = (std::__shared_weak_count *)v194[11];
                v602 = v194[10];
                v603 = v302;
                if (v302)
                {
                  v303 = (unint64_t *)&v302->__shared_owners_;
                  do
                    v304 = __ldxr(v303);
                  while (__stxr(v304 + 1, v303));
                }
                v604 = *((_BYTE *)v194 + 96);
                if (v600)
                  v256[14] = *(float *)&v599 + (float)(*(float *)(*(_QWORD *)(v600 + 8) + 4 * *v234) * v150);
                std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v256 + 10, &v602);
                v305 = v603;
                if (v603)
                {
                  v306 = (unint64_t *)&v603->__shared_owners_;
                  do
                    v307 = __ldaxr(v306);
                  while (__stlxr(v307 - 1, v306));
                  if (!v307)
                  {
                    ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
                    std::__shared_weak_count::__release_weak(v305);
                  }
                }
                v308 = v601;
                if (v601)
                {
                  v309 = (unint64_t *)&v601->__shared_owners_;
                  do
                    v310 = __ldaxr(v309);
                  while (__stlxr(v310 - 1, v309));
                  goto LABEL_456;
                }
              }
            }
            else
            {
              memset(&v614, 0, sizeof(v614));
              std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v614, (const void *)v194[2], v237, (v237 - v194[2]) >> 2);
              v238 = v614.__r_.__value_.__l.__size_;
              if (v614.__r_.__value_.__l.__size_ >= v614.__r_.__value_.__r.__words[2])
              {
                v248 = (void *)v614.__r_.__value_.__r.__words[0];
                v249 = (uint64_t)(v614.__r_.__value_.__l.__size_ - v614.__r_.__value_.__r.__words[0]) >> 2;
                v250 = v249 + 1;
                if ((unint64_t)(v249 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v251 = v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0];
                if ((uint64_t)(v614.__r_.__value_.__r.__words[2] - v614.__r_.__value_.__r.__words[0]) >> 1 > v250)
                  v250 = v251 >> 1;
                if ((unint64_t)v251 >= 0x7FFFFFFFFFFFFFFCLL)
                  v252 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v252 = v250;
                if (v252)
                {
                  v253 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v614.__r_.__value_.__r.__words[2], v252);
                  v238 = v614.__r_.__value_.__l.__size_;
                  v248 = (void *)v614.__r_.__value_.__r.__words[0];
                }
                else
                {
                  v253 = 0;
                }
                v281 = &v253[4 * v249];
                *(_DWORD *)v281 = *v234;
                v239 = (std::string::size_type)(v281 + 4);
                while ((void *)v238 != v248)
                {
                  v282 = *(_DWORD *)(v238 - 4);
                  v238 -= 4;
                  *((_DWORD *)v281 - 1) = v282;
                  v281 -= 4;
                }
                v614.__r_.__value_.__r.__words[0] = (std::string::size_type)v281;
                v614.__r_.__value_.__l.__size_ = v239;
                v614.__r_.__value_.__r.__words[2] = (std::string::size_type)&v253[4 * v252];
                if (v248)
                  operator delete(v248);
              }
              else
              {
                *(_DWORD *)v614.__r_.__value_.__l.__size_ = *v234;
                v239 = v238 + 4;
              }
              v614.__r_.__value_.__l.__size_ = v239;
              if (!std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::find<std::vector<int>>(&v632, (int **)&v614))
              {
                *(_OWORD *)&__p.__traits_.__loc_.__locale_ = v637[0];
                *(_OWORD *)&__p.__traits_.__col_ = v637[1];
                *(_QWORD *)&__p.__loop_count_ = *(_QWORD *)&v637[2];
                if (*(_QWORD *)&v637[2])
                {
                  v285 = (unint64_t *)(*(_QWORD *)&v637[2] + 8);
                  do
                    v286 = __ldxr(v285);
                  while (__stxr(v286 + 1, v285));
                }
                __p.__start_ = *(std::shared_ptr<std::__empty_state<char>> *)((char *)&v637[2] + 8);
                if (*(_QWORD *)&v637[3])
                {
                  v287 = (unint64_t *)(*(_QWORD *)&v637[3] + 8);
                  do
                    v288 = __ldxr(v287);
                  while (__stxr(v288 + 1, v287));
                }
                LOBYTE(__p.__end_) = BYTE8(v637[3]);
                __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v614;
                v289 = std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)&v614, (uint64_t)&std::piecewise_construct, (uint64_t *)&__str);
                *(_OWORD *)(v289 + 5) = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
                v289[7] = __p.__traits_.__col_;
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v289 + 8), (__int128 *)&__p.__flags_);
                std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v289 + 10), (__int128 *)&__p.__start_);
                *((_BYTE *)v289 + 96) = __p.__end_;
                v290 = __p.__start_.__cntrl_;
                if (__p.__start_.__cntrl_)
                {
                  v291 = &__p.__start_.__cntrl_->__shared_owners_;
                  do
                    v292 = __ldaxr((unint64_t *)v291);
                  while (__stlxr(v292 - 1, (unint64_t *)v291));
                  if (!v292)
                  {
                    ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
                    std::__shared_weak_count::__release_weak(v290);
                  }
                }
                v293 = *(std::__shared_weak_count **)&__p.__loop_count_;
                if (*(_QWORD *)&__p.__loop_count_)
                {
                  v294 = (unint64_t *)(*(_QWORD *)&__p.__loop_count_ + 8);
                  do
                    v295 = __ldaxr(v294);
                  while (__stlxr(v295 - 1, v294));
                  if (!v295)
                  {
                    ((void (*)(std::__shared_weak_count *))v293->__on_zero_shared)(v293);
                    std::__shared_weak_count::__release_weak(v293);
                  }
                }
              }
              __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v614;
              v256 = (float *)std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>((uint64_t)&v632, (int **)&v614, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p);
              if (!*(_BYTE *)(a1 + 957))
              {
                v283 = v194[8];
                v284 = v283 ? *(float *)(*(_QWORD *)(v283 + 8) + 4 * *v234) : 0.0;
                v236 = v236 + (float)((float)(*(float *)(a1 + 952) * v284) * v150);
                if (quasar::gLogLevel >= 6 && kaldi::g_kaldi_verbose_level >= 3)
                {
                  kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
                  v312 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"[ ", 2);
                  v647 = 0uLL;
                  v648 = 0;
                  v313 = (int *)v194[2];
                  v314 = (int *)v194[3];
                  v586.__begin_ = (std::vector<std::wstring>::pointer)&v647;
                  while (v313 != v314)
                  {
                    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v313);
                    std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v586, (__int128 *)&__str);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(__str.__r_.__value_.__l.__data_);
                    ++v313;
                  }
                  v645.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
                  v645.__r_.__value_.__l.__size_ = 1;
                  quasar::join<std::vector<std::string>>((uint64_t *)&v647, (uint64_t *)&v645);
                  if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
                    v315 = &traits;
                  else
                    v315 = traits.__begin_;
                  if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
                    v316 = HIBYTE(traits.__end_cap_.__value_);
                  else
                    v316 = (uint64_t)traits.__end_;
                  v317 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v312, (uint64_t)v315, v316);
                  v318 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v317, (uint64_t)" ] + [ ", 7);
                  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v234);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v319 = &__str;
                  else
                    v319 = (std::string *)__str.__r_.__value_.__r.__words[0];
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v320 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  else
                    v320 = __str.__r_.__value_.__l.__size_;
                  v321 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v318, (uint64_t)v319, v320);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v321, (uint64_t)" ], ", 4);
                  std::ostream::operator<<();
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                  if (SHIBYTE(traits.__end_cap_.__value_) < 0)
                    operator delete(traits.__begin_);
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v647;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
                }
              }
              v256[10] = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v194 + 5), v256[10], (float)(v236 + *((float *)v194 + 11)) - *(float *)(a1 + 1016));
              if (!*((_DWORD *)v256 + 15))
              {
                v605 = *v233;
                v323 = v194[8];
                v322 = (std::__shared_weak_count *)v194[9];
                v606 = v194[7];
                v607 = v323;
                v608 = v322;
                if (v322)
                {
                  v324 = (unint64_t *)&v322->__shared_owners_;
                  do
                    v325 = __ldxr(v324);
                  while (__stxr(v325 + 1, v324));
                }
                v326 = (std::__shared_weak_count *)v194[11];
                v609 = v194[10];
                v610 = v326;
                if (v326)
                {
                  v327 = (unint64_t *)&v326->__shared_owners_;
                  do
                    v328 = __ldxr(v327);
                  while (__stxr(v328 + 1, v327));
                }
                v611 = *((_BYTE *)v194 + 96);
                if (v607)
                  v256[14] = *(float *)&v606 + (float)(*(float *)(*(_QWORD *)(v607 + 8) + 4 * *v234) * v150);
                std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v256 + 10, &v609);
                v329 = v610;
                if (v610)
                {
                  v330 = (unint64_t *)&v610->__shared_owners_;
                  do
                    v331 = __ldaxr(v330);
                  while (__stlxr(v331 - 1, v330));
                  if (!v331)
                  {
                    ((void (*)(std::__shared_weak_count *))v329->__on_zero_shared)(v329);
                    std::__shared_weak_count::__release_weak(v329);
                  }
                }
                v308 = v608;
                if (v608)
                {
                  v332 = (unint64_t *)&v608->__shared_owners_;
                  do
                    v310 = __ldaxr(v332);
                  while (__stlxr(v310 - 1, v332));
LABEL_456:
                  if (!v310)
                  {
                    ((void (*)(std::__shared_weak_count *))v308->__on_zero_shared)(v308);
                    std::__shared_weak_count::__release_weak(v308);
                  }
                }
              }
            }
            ++*((_DWORD *)v256 + 15);
            if (v614.__r_.__value_.__r.__words[0])
            {
              v614.__r_.__value_.__l.__size_ = v614.__r_.__value_.__r.__words[0];
              operator delete(v614.__r_.__value_.__l.__data_);
            }
          }
          ++v232;
          v231 = v650;
          if (v232 >= (uint64_t)(*((_QWORD *)&v650 + 1) - v650) >> 3)
            goto LABEL_461;
          continue;
        }
      }
    }
LABEL_462:
    if (*(_DWORD *)(a1 + 472) >= SDWORD2(v633))
      v333 = DWORD2(v633);
    else
      v333 = *(_DWORD *)(a1 + 472);
    v577 = v333;
    v334 = v627;
    v335 = (uint64_t)v626;
    while (v334 != v335)
    {
      v334 -= 88;
      std::allocator<std::pair<std::vector<int>,kaldi::quasar::Score>>::destroy[abi:ne180100]((uint64_t)&v628, v334);
    }
    v627 = v335;
    if ((_QWORD)v633)
    {
      v336 = 0;
      v337 = (_QWORD *)v633;
      do
      {
        ++v336;
        v337 = (_QWORD *)*v337;
      }
      while (v337);
    }
    else
    {
      v336 = 0;
    }
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__insert_with_size[abi:ne180100]<std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>,std::__hash_map_iterator<std::__hash_iterator<std::__hash_node<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,void *> *>>>((uint64_t *)&v626, v335, (_QWORD *)v633, 0, v336);
    if (v577)
    {
      v338 = (uint64_t)v626;
      v339 = (float *)v627;
      if (v577 >= 2)
      {
        v340 = ~((unint64_t)(v577 - 2) >> 1);
        v341 = (uint64_t)&v626[11 * ((unint64_t)(v577 - 2) >> 1)];
        do
        {
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4 &,std::__wrap_iter<std::pair<std::vector<int>,kaldi::quasar::Score> *>>(v338, v577, v341);
          v341 -= 88;
        }
        while (!__CFADD__(v340++, 1));
      }
      v343 = v338 + 88 * v577;
      if ((float *)v343 != v339)
      {
        v344 = (float *)(v338 + 24 + 88 * v577);
        do
        {
          v345 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)v344, v344[1], *v344);
          v346 = v344[3];
          v347 = v344[4];
          if ((float)(v345 + (float)(v346 * v347)) > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v338 + 24), *(float *)(v338 + 28), *(float *)(v338 + 24))+ (float)(*(float *)(v338 + 36) * *(float *)(v338 + 40))))
          {
            v348 = *((_QWORD *)v344 - 3);
            *((_QWORD *)v344 - 3) = *(_QWORD *)v338;
            *(_QWORD *)v338 = v348;
            v349 = *((_QWORD *)v344 - 2);
            *((_QWORD *)v344 - 2) = *(_QWORD *)(v338 + 8);
            *(_QWORD *)(v338 + 8) = v349;
            v350 = *((_QWORD *)v344 - 1);
            *((_QWORD *)v344 - 1) = *(_QWORD *)(v338 + 16);
            *(_QWORD *)(v338 + 16) = v350;
            std::swap[abi:ne180100]<kaldi::quasar::Score>((__int128 *)v344, (__int128 *)(v338 + 24));
            std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,quasar::OnlinePrefixBeamSearchDecoder::runImpl(quasar::DecoderPassData &,std::shared_ptr<quasar::DecoderChainOutput> const&,std::shared_ptr<quasar::SpeechRequestData> const&,std::function<BOOL ()(void)> const&,BOOL)::$_4 &,std::__wrap_iter<std::pair<std::vector<int>,kaldi::quasar::Score> *>>(v338, v577, v338);
          }
          v351 = v344 + 16;
          v344 += 22;
        }
        while (v351 != v339);
      }
      if (v577 >= 2)
      {
        v352 = 88 * v577 / 0x58uLL;
        do
        {
          v582 = v343;
          v353 = 0;
          __str = *(std::string *)v338;
          *(_QWORD *)(v338 + 8) = 0;
          *(_QWORD *)(v338 + 16) = 0;
          *(_QWORD *)v338 = 0;
          v354 = *(_OWORD *)(v338 + 24);
          v355 = *(_QWORD *)(v338 + 40);
          v356 = *(_OWORD *)(v338 + 64);
          *(_OWORD *)&v642[24] = *(_OWORD *)(v338 + 48);
          *(_QWORD *)(v338 + 48) = 0;
          *(_QWORD *)(v338 + 56) = 0;
          v643 = v356;
          *(_QWORD *)&v642[16] = v355;
          *(_QWORD *)(v338 + 64) = 0;
          *(_QWORD *)(v338 + 72) = 0;
          v644 = *(_BYTE *)(v338 + 80);
          v357 = v338;
          *(_OWORD *)v642 = v354;
          do
          {
            v358 = v357;
            v359 = v353 + 1;
            v357 += 88 * (v353 + 1);
            v360 = 2 * v353;
            v353 = (2 * v353) | 1;
            v361 = v360 + 2;
            if (v360 + 2 < v352)
            {
              v362 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v358 + 88 * v359 + 24), *(float *)(v358 + 88 * v359 + 28), *(float *)(v358 + 88 * v359 + 24));
              v363 = v358 + 88 * v359;
              v364 = *(float *)(v363 + 36);
              v365 = *(float *)(v363 + 40);
              if ((float)(v362 + (float)(v364 * v365)) > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v357 + 112), *(float *)(v357 + 116), *(float *)(v357 + 112))+ (float)(*(float *)(v357 + 124) * *(float *)(v357 + 128))))
              {
                v357 += 88;
                v353 = v361;
              }
            }
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v358, v357);
          }
          while (v353 <= (uint64_t)((unint64_t)(v352 - 2) >> 1));
          v343 = v582 - 88;
          if (v357 == v582 - 88)
          {
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v357, (uint64_t)&__str);
          }
          else
          {
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v357, v582 - 88);
            std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v343, (uint64_t)&__str);
            v366 = v357 - v338 + 88;
            if (v366 >= 89)
            {
              v367 = (v366 / 0x58uLL - 2) >> 1;
              v368 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v338 + 88 * v367 + 24), *(float *)(v338 + 88 * v367 + 28), *(float *)(v338 + 88 * v367 + 24));
              v369 = v338 + 88 * v367;
              v370 = *(float *)(v369 + 36);
              v371 = *(float *)(v369 + 40);
              if ((float)(v368 + (float)(v370 * v371)) > (float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v357 + 24), *(float *)(v357 + 28), *(float *)(v357 + 24))+ (float)(*(float *)(v357 + 36) * *(float *)(v357 + 40))))
              {
                *(_OWORD *)&__p.__traits_.__loc_.__locale_ = *(_OWORD *)v357;
                __p.__traits_.__col_ = *(const std::collate<char> **)(v357 + 16);
                *(_QWORD *)v357 = 0;
                *(_QWORD *)(v357 + 8) = 0;
                *(_QWORD *)(v357 + 16) = 0;
                v372 = *(_OWORD *)(v357 + 24);
                __p.__start_.__ptr_ = *(std::shared_ptr<std::__empty_state<char>>::element_type **)(v357 + 40);
                *(_OWORD *)&__p.__flags_ = v372;
                *(_OWORD *)&__p.__start_.__cntrl_ = *(_OWORD *)(v357 + 48);
                *(_QWORD *)(v357 + 48) = 0;
                *(_QWORD *)(v357 + 56) = 0;
                v657 = *(_OWORD *)(v357 + 64);
                *(_QWORD *)(v357 + 64) = 0;
                *(_QWORD *)(v357 + 72) = 0;
                LOBYTE(v658) = *(_BYTE *)(v357 + 80);
                do
                {
                  v373 = v357;
                  v357 = v338 + 88 * v367;
                  std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v373, v357);
                  if (!v367)
                    break;
                  v367 = (v367 - 1) >> 1;
                  v374 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v338 + 88 * v367 + 24), *(float *)(v338 + 88 * v367 + 28), *(float *)(v338 + 88 * v367 + 24));
                  v375 = v338 + 88 * v367;
                  v376 = *(float *)(v375 + 36);
                  v377 = *(float *)(v375 + 40);
                  flags = __p.__flags_;
                  if (LOBYTE(__p.__loop_count_))
                  {
                    if (*(float *)&__p.__marked_count_ >= *(float *)&__p.__flags_)
                      flags = __p.__marked_count_;
                  }
                  else if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min < *(float *)&__p.__marked_count_)
                  {
                    if (*(float *)&kaldi::quasar::Score::merge(float,float)const::num_min >= *(float *)&__p.__flags_)
                    {
                      flags = __p.__marked_count_;
                    }
                    else
                    {
                      if (*(float *)&__p.__marked_count_ >= *(float *)&__p.__flags_)
                        marked_count = __p.__marked_count_;
                      else
                        marked_count = __p.__flags_;
                      v380 = expf(*(float *)&__p.__marked_count_ - *(float *)&marked_count);
                      v381 = expf(*(float *)&flags - *(float *)&marked_count);
                      *(float *)&flags = *(float *)&marked_count + logf(v380 + v381);
                    }
                  }
                }
                while ((float)(v374 + (float)(v376 * v377)) > (float)(*(float *)&flags
                                                                     + (float)(*(float *)&__p.__open_count_
                                                                             * *(float *)&__p.__start_.__ptr_)));
                std::pair<std::vector<int>,kaldi::quasar::Score>::operator=[abi:ne180100](v357, (uint64_t)&__p);
                v382 = (std::__shared_weak_count *)*((_QWORD *)&v657 + 1);
                if (*((_QWORD *)&v657 + 1))
                {
                  v383 = (unint64_t *)(*((_QWORD *)&v657 + 1) + 8);
                  do
                    v384 = __ldaxr(v383);
                  while (__stlxr(v384 - 1, v383));
                  if (!v384)
                  {
                    ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                    std::__shared_weak_count::__release_weak(v382);
                  }
                }
                v385 = __p.__end_;
                if (__p.__end_)
                {
                  p_first = (unint64_t *)&__p.__end_->__first_;
                  do
                    v387 = __ldaxr(p_first);
                  while (__stlxr(v387 - 1, p_first));
                  if (!v387)
                  {
                    ((void (*)(std::__owns_one_state<char> *))v385->__exec)(v385);
                    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v385);
                  }
                }
                if (__p.__traits_.__loc_.__locale_)
                {
                  __p.__traits_.__ct_ = (const std::ctype<char> *)__p.__traits_.__loc_.__locale_;
                  operator delete(__p.__traits_.__loc_.__locale_);
                }
              }
            }
          }
          v388 = (std::__shared_weak_count *)*((_QWORD *)&v643 + 1);
          v12 = (uint64_t *)(a1 + 560);
          if (*((_QWORD *)&v643 + 1))
          {
            v389 = (unint64_t *)(*((_QWORD *)&v643 + 1) + 8);
            do
              v390 = __ldaxr(v389);
            while (__stlxr(v390 - 1, v389));
            if (!v390)
            {
              ((void (*)(std::__shared_weak_count *))v388->__on_zero_shared)(v388);
              std::__shared_weak_count::__release_weak(v388);
            }
          }
          v391 = *(std::__shared_weak_count **)&v642[32];
          if (*(_QWORD *)&v642[32])
          {
            v392 = (unint64_t *)(*(_QWORD *)&v642[32] + 8);
            do
              v393 = __ldaxr(v392);
            while (__stlxr(v393 - 1, v392));
            if (!v393)
            {
              ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
              std::__shared_weak_count::__release_weak(v391);
            }
          }
          if (__str.__r_.__value_.__r.__words[0])
          {
            __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          v196 = v352-- <= 2;
        }
        while (!v196);
      }
    }
    std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::resize((uint64_t *)&v626, v577);
    if (*(_QWORD *)(a1 + 936))
    {
      v394 = (uint64_t)v626;
      v395 = v627;
      while (v394 != v395)
      {
        if (!*(_BYTE *)(v394 + 80))
        {
          v396 = *(_DWORD *)(*(_QWORD *)(v394 + 8) - 4);
          v397 = *(std::__shared_weak_count **)(a1 + 944);
          v596 = *(_QWORD *)(a1 + 936);
          v597 = v397;
          if (v397)
          {
            v398 = (unint64_t *)&v397->__shared_owners_;
            do
              v399 = __ldxr(v398);
            while (__stxr(v399 + 1, v398));
          }
          kaldi::quasar::Score::updateLmCache(v394 + 24, v396, &v596, (uint64_t *)&v625);
          v400 = v597;
          if (v597)
          {
            v401 = (unint64_t *)&v597->__shared_owners_;
            do
              v402 = __ldaxr(v401);
            while (__stlxr(v402 - 1, v401));
            if (!v402)
            {
              ((void (*)(std::__shared_weak_count *))v400->__on_zero_shared)(v400);
              std::__shared_weak_count::__release_weak(v400);
            }
          }
          if (kaldi::g_kaldi_verbose_level >= 3)
          {
            kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p, 3);
            v403 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"new prefix: ", 12);
            memset(&traits, 0, sizeof(traits));
            v404 = *(int **)v394;
            v405 = *(int **)(v394 + 8);
            v645.__r_.__value_.__r.__words[0] = (std::string::size_type)&traits;
            while (v404 != v405)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v404);
              std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v645, (__int128 *)&__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              ++v404;
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
            __str.__r_.__value_.__l.__size_ = 1;
            quasar::join<std::vector<std::string>>((uint64_t *)&traits, (uint64_t *)&__str);
            if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v406 = &v614;
            else
              v406 = (std::string *)v614.__r_.__value_.__r.__words[0];
            if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v407 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
            else
              v407 = v614.__r_.__value_.__l.__size_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v403, (uint64_t)v406, v407);
            if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v614.__r_.__value_.__l.__data_);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&traits;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&__p);
          }
        }
        v394 += 88;
      }
    }
    std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::clear((uint64_t)v635);
    if (v577)
    {
      v408 = v626;
      v409 = 88 * v577;
      do
      {
        std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::__emplace_unique_key_args<std::vector<int>,std::pair<std::vector<int> const,kaldi::quasar::Score> const&>((uint64_t)v635, v408, (uint64_t)v408);
        v408 += 11;
        v409 -= 88;
      }
      while (v409);
    }
    std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::clear((uint64_t)&v632);
    v410 = (void **)v626;
    if ((int **)v627 == v626
      || (v412 = (char *)*v626,
          v411 = (uint64_t)v626[1],
          v413 = v411 - (_QWORD)*v626,
          v414 = (char *)v630,
          v415 = (char *)__s2,
          v413 == (char *)v630 - (_BYTE *)__s2)
      && !memcmp(*v626, __s2, v411 - (_QWORD)*v626))
    {
      ++v574;
    }
    else
    {
      if (&__s2 != v410)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&__s2, v412, v411, v413 >> 2);
        v414 = (char *)v630;
        v415 = (char *)__s2;
        v413 = (char *)v626[1] - (char *)*v626;
      }
      if (v414 == v415)
      {
        v416 = 0;
      }
      else
      {
        v416 = 0;
        do
        {
          v417 = *((_DWORD *)v414 - 1);
          v414 -= 4;
          if (v417 == *(_DWORD *)(a1 + 480))
            ++v416;
        }
        while (v414 != v415);
      }
      if (v574 && !v416)
      {
        v418 = v578 - *((_DWORD *)*v572 + 2);
        v419 = v621;
        if (v621 >= v622)
        {
          v421 = (char *)v620;
          v422 = (v621 - (_BYTE *)v620) >> 2;
          v423 = v422 + 1;
          if ((unint64_t)(v422 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v424 = v622 - (_BYTE *)v620;
          if ((v622 - (_BYTE *)v620) >> 1 > v423)
            v423 = v424 >> 1;
          if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFFCLL)
            v425 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v425 = v423;
          if (v425)
          {
            v426 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v622, v425);
            v419 = v621;
            v421 = (char *)v620;
          }
          else
          {
            v426 = 0;
          }
          v427 = (int *)&v426[4 * v422];
          *v427 = v418;
          v420 = (char *)(v427 + 1);
          while (v419 != v421)
          {
            v428 = *((_DWORD *)v419 - 1);
            v419 -= 4;
            *--v427 = v428;
          }
          v620 = v427;
          v621 = v420;
          v622 = &v426[4 * v425];
          if (v421)
            operator delete(v421);
        }
        else
        {
          *(_DWORD *)v621 = v418;
          v420 = v419 + 4;
        }
        v621 = v420;
      }
      v569 = (unint64_t)v413 >> 2;
      if (v567[561])
      {
        memset(&v614, 0, sizeof(v614));
        v429 = (int *)__s2;
        v430 = v630;
        v645.__r_.__value_.__r.__words[0] = (std::string::size_type)&v614;
        while (v429 != v430)
        {
          (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__p, *v12, *v429);
          std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v645, (__int128 *)&__p);
          if (SHIBYTE(__p.__traits_.__col_) < 0)
            operator delete(__p.__traits_.__loc_.__locale_);
          ++v429;
        }
        kaldi::JoinVectorToString<std::string>((uint64_t *)&v614, "");
        __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v614;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        memset(&traits, 0, sizeof(traits));
        if (*(_BYTE *)(a1 + 528))
        {
          quasar::wordPieceSequenceToWords(&__str, Featurizer == 0, v583, (uint64_t)&__p);
          std::vector<std::string>::__vdeallocate(&traits);
          traits = (std::vector<std::wstring>)__p.__traits_;
          memset(&__p, 0, 24);
          v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]<std::char_traits<char>,std::allocator<char>>(&__p.__traits_, (uint64_t)v583, 0);
          memset(&v614, 0, sizeof(v614));
          v431 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v432.__i_ = (std::__wrap_iter<const char *>::iterator_type)&__str;
          else
            v432.__i_ = (std::__wrap_iter<const char *>::iterator_type)__str.__r_.__value_.__r.__words[0];
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v431 = __str.__r_.__value_.__l.__size_;
          v433.__i_ = &v432.__i_[v431];
          std::regex_replace[abi:ne180100]<std::back_insert_iterator<std::string>,std::__wrap_iter<char const*>,std::regex_traits<char>,char>(&v614, v432, v433, &__p, " ", 0);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          __str = v614;
          *((_BYTE *)&v614.__r_.__value_.__s + 23) = 0;
          v614.__r_.__value_.__s.__data_[0] = 0;
          v434 = __p.__start_.__cntrl_;
          if (__p.__start_.__cntrl_)
          {
            v435 = &__p.__start_.__cntrl_->__shared_owners_;
            do
              v436 = __ldaxr((unint64_t *)v435);
            while (__stlxr(v436 - 1, (unint64_t *)v435));
            if (!v436)
            {
              ((void (*)(std::__shared_weak_count *))v434->__on_zero_shared)(v434);
              std::__shared_weak_count::__release_weak(v434);
            }
          }
          std::locale::~locale(&__p.__traits_.__loc_);
          kaldi::Trim(&__str);
          kaldi::SplitStringToVector(&__str, " ", 1, (uint64_t)&traits);
        }
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        v437 = (std::wstring *)operator new();
        *(std::vector<std::wstring> *)v437 = traits;
        memset(&traits, 0, sizeof(traits));
        v586.__begin_ = v437;
        __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&traits;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        v438 = *v579;
        v439 = *(_QWORD *)(*v579 + 560);
        v440 = *((unsigned int *)*v572 + 3);
        memset(&__p, 0, 24);
        memset(&__str, 0, sizeof(__str));
        memset(&v614, 0, sizeof(v614));
        LOWORD(v565) = 0;
        (*(void (**)(uint64_t, std::vector<std::wstring>::pointer, uint64_t, uint64_t, _QWORD, _QWORD, std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *, std::string *, std::string *, int, uint64_t))(*(_QWORD *)v439 + 24))(v439, v586.__begin_, v440, 1, 0, 0, &__p, &__str, &v614, v565, v438 + 1136);
        traits.__begin_ = (std::vector<std::wstring>::pointer)&v614;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&traits);
        v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
        std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
        v441 = v586.__begin_;
        v586.__begin_ = 0;
        std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100](&v624, (void **)&v441->__r_.__value_.__l.__data_);
        std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100]((void ***)&v586, 0);
        v574 = v416;
      }
      else
      {
        v574 = v416;
      }
    }
    if (quasar::gLogLevel >= 6)
    {
      v669 = 0u;
      v668 = 0u;
      v667 = 0u;
      v666 = 0u;
      v665 = 0u;
      *(_OWORD *)v664 = 0u;
      v663 = 0u;
      *(_OWORD *)v662 = 0u;
      v661 = 0u;
      v660 = 0u;
      *(_OWORD *)v659 = 0u;
      v658 = 0u;
      v657 = 0u;
      memset(&__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"nbest of frame ", 15);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      v442 = (uint64_t)v626;
      v443 = v627;
      if (v626 != (int **)v627)
      {
        v444 = quasar::gLogLevel;
        do
        {
          if (v444 >= 5)
          {
            v669 = 0u;
            v668 = 0u;
            v667 = 0u;
            v666 = 0u;
            v665 = 0u;
            *(_OWORD *)v664 = 0u;
            v663 = 0u;
            *(_OWORD *)v662 = 0u;
            v661 = 0u;
            v660 = 0u;
            *(_OWORD *)v659 = 0u;
            v658 = 0u;
            v657 = 0u;
            memset(&__p, 0, sizeof(__p));
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
            v445 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"    ", 4);
            kaldi::quasar::Score::scoreString((uint64_t *)&v614, (kaldi::quasar::Score *)(v442 + 24));
            if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v446 = &v614;
            else
              v446 = (std::string *)v614.__r_.__value_.__r.__words[0];
            if ((v614.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v447 = HIBYTE(v614.__r_.__value_.__r.__words[2]);
            else
              v447 = v614.__r_.__value_.__l.__size_;
            v448 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v445, (uint64_t)v446, v447);
            v449 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v448, (uint64_t)" | ", 3);
            v647 = 0uLL;
            v648 = 0;
            v450 = *(int **)v442;
            v451 = *(int **)(v442 + 8);
            v586.__begin_ = (std::vector<std::wstring>::pointer)&v647;
            while (v450 != v451)
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__str, *v12, *v450);
              std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&v586, (__int128 *)&__str);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              ++v450;
            }
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)" ";
            __str.__r_.__value_.__l.__size_ = 1;
            quasar::join<std::vector<std::string>>((uint64_t *)&v647, (uint64_t *)&__str);
            if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
              p_traits = &traits;
            else
              p_traits = traits.__begin_;
            if (SHIBYTE(traits.__end_cap_.__value_) >= 0)
              v453 = HIBYTE(traits.__end_cap_.__value_);
            else
              v453 = (uint64_t)traits.__end_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v449, (uint64_t)p_traits, v453);
            if (SHIBYTE(traits.__end_cap_.__value_) < 0)
              operator delete(traits.__begin_);
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v647;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
            if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v614.__r_.__value_.__l.__data_);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
            v444 = quasar::gLogLevel;
          }
          v442 += 88;
        }
        while (v442 != v443);
      }
    }
    if ((_QWORD)v650)
    {
      *((_QWORD *)&v650 + 1) = v650;
      operator delete((void *)v650);
    }
    v37 = v578 + 1;
    v34 = v572;
  }
  if (quasar::gLogLevel >= 4)
  {
    v669 = 0u;
    v668 = 0u;
    v667 = 0u;
    v666 = 0u;
    v665 = 0u;
    *(_OWORD *)v664 = 0u;
    v663 = 0u;
    *(_OWORD *)v662 = 0u;
    v661 = 0u;
    v660 = 0u;
    *(_OWORD *)v659 = 0u;
    v658 = 0u;
    v657 = 0u;
    memset(&__p, 0, sizeof(__p));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Utterance starting: ", 20);
    v454 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v454, (uint64_t)" start decoding: ", 17);
    v455 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v455, (uint64_t)"  detector force triggered because maximum number of frames is reached: ", 72);
    v456 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v456, (uint64_t)" or the utterance detection ep is triggered: ", 45);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  }
  v457 = *v579;
  *(_DWORD *)(v457 + 576) = v578 - *((_DWORD *)*v34 + 2);
  *(_WORD *)(v457 + 580) = 256;
LABEL_655:
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = 0u;
  memset(v642, 0, 17);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D34170;
  if (v617 != v616)
  {
    kaldi::CuMatrix<float>::Resize((int32x2_t *)&__str, (v617 - v616) >> 5, *(unsigned int *)(v616 + 16), 0, 0);
    v459 = v616;
    if (v617 != v616)
    {
      v460 = 0;
      v461 = 0;
      do
      {
        __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&unk_1E5D29D70;
        __p.__traits_.__ct_ = (const std::ctype<char> *)(__str.__r_.__value_.__l.__size_
                                                       + 4 * *(_DWORD *)v642 * (int)v461);
        __p.__traits_.__col_ = (const std::collate<char> *)LODWORD(__str.__r_.__value_.__r.__words[2]);
        *(_QWORD *)&__p.__flags_ = *(_QWORD *)&v642[8];
        kaldi::CuVectorBase<float>::CopyFromVec(&__p, v459 + v460);
        ++v461;
        v459 = v616;
        v460 += 32;
      }
      while (v461 < (uint64_t)(v617 - v616) >> 5);
    }
  }
  v462 = (std::ctype<char> *)operator new(0x30uLL);
  v462->__tab_ = 0;
  v462->__vftable = (std::ctype<char>_vtbl *)&unk_1E5D456D0;
  v462->__shared_owners_ = 0;
  v462[1].__vftable = 0;
  v462[1].__shared_owners_ = 0;
  *(_QWORD *)&v462->__del_ = 0;
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v462->__del_;
  __p.__traits_.__ct_ = v462;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v579 + 352, (__int128 *)&__p);
  v463 = (std::__shared_weak_count *)__p.__traits_.__ct_;
  if (__p.__traits_.__ct_)
  {
    v464 = &__p.__traits_.__ct_->__shared_owners_;
    do
      v465 = __ldaxr((unint64_t *)v464);
    while (__stlxr(v465 - 1, (unint64_t *)v464));
    if (!v465)
    {
      ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
      std::__shared_weak_count::__release_weak(v463);
    }
  }
  v466 = (std::ctype<char> *)operator new(0x30uLL);
  v466->__tab_ = 0;
  v466->__vftable = (std::ctype<char>_vtbl *)&unk_1E5D458C8;
  v466->__shared_owners_ = 0;
  v466[1].__vftable = 0;
  v466[1].__shared_owners_ = 0;
  *(_QWORD *)&v466->__del_ = 0;
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v466->__del_;
  __p.__traits_.__ct_ = v466;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](*v579 + 392, (__int128 *)&__p);
  v467 = (std::__shared_weak_count *)__p.__traits_.__ct_;
  if (__p.__traits_.__ct_)
  {
    v468 = &__p.__traits_.__ct_->__shared_owners_;
    do
      v469 = __ldaxr((unint64_t *)v468);
    while (__stlxr(v469 - 1, (unint64_t *)v468));
    if (!v469)
    {
      ((void (*)(std::__shared_weak_count *))v467->__on_zero_shared)(v467);
      std::__shared_weak_count::__release_weak(v467);
    }
  }
  v470 = (char *)operator new(0x80uLL);
  *((_QWORD *)v470 + 2) = 0;
  *(_QWORD *)v470 = &unk_1E5CFFDC8;
  *((_QWORD *)v470 + 1) = 0;
  *(_OWORD *)(v470 + 72) = 0u;
  *((_QWORD *)v470 + 15) = 0;
  *(_OWORD *)(v470 + 40) = 0u;
  *(_OWORD *)(v470 + 56) = 0u;
  *(_OWORD *)(v470 + 88) = 0u;
  *(_OWORD *)(v470 + 104) = 0u;
  *(_OWORD *)(v470 + 24) = 0u;
  *((_DWORD *)v470 + 20) = 1065353216;
  *((_DWORD *)v470 + 30) = 1065353216;
  *(_QWORD *)v594 = v470 + 24;
  v595 = (std::__shared_weak_count *)v470;
  v471 = *v579;
  (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, uint64_t))(*(_QWORD *)a1 + 184))(&__p, a1);
  v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v472 = std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)(v471 + 120), (const void **)&__p.__traits_.__loc_.__locale_, (uint64_t)&std::piecewise_construct, &v614);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)v472 + 7, (uint64_t *)v594);
  if (SHIBYTE(__p.__traits_.__col_) < 0)
    operator delete(__p.__traits_.__loc_.__locale_);
  v473 = *(char **)v594;
  if (*(int ***)v594 == v626)
  {
    v474 = *(_QWORD *)v594;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(*(char **)v594, (char *)*v626, (uint64_t)v626[1], v626[1] - *v626);
    v474 = (uint64_t)v626;
  }
  v475 = v627;
  if (v474 != v627)
  {
    v585 = (uint64_t)(v473 + 24);
    v476 = (uint64_t)(v473 + 64);
    v477 = vdup_n_s32(v584);
    while (1)
    {
      v592 = 0;
      v593 = 0;
      v591 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v591, *(const void **)v474, *(_QWORD *)(v474 + 8), (uint64_t)(*(_QWORD *)(v474 + 8) - *(_QWORD *)v474) >> 2);
      quasar::CTCAlignedDecoder::forcedAlignCTC((char **)&v591, *(_DWORD *)(a1 + 480), (uint64_t)&__str, (unint64_t *)v652);
      if (v591)
      {
        v592 = v591;
        operator delete(v591);
      }
      v478 = *v12;
      v479 = kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v474 + 24), *(float *)(v474 + 28), *(float *)(v474 + 24));
      v480 = *(float *)(v474 + 36);
      v481 = *(float *)(v474 + 40);
      v482 = *(_DWORD *)(a1 + 480);
      std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v654, a1 + 984);
      quasar::CTCAlignedDecoder::makeLatticeFromCTCAlignment(a1, v652, v478, v482, (uint64_t)v654, *(_QWORD *)(a1 + 576), &v614, -(float)(v479 + (float)(v480 * v481)));
      v483 = v655;
      if (v655 == v654)
      {
        v483 = v654;
        v484 = 4;
      }
      else
      {
        if (!v655)
          goto LABEL_683;
        v484 = 5;
      }
      (*(void (**)(void))(*v483 + 8 * v484))();
LABEL_683:
      v486 = *(_QWORD *)v614.__r_.__value_.__r.__words[2];
      v485 = *(_QWORD *)(v614.__r_.__value_.__r.__words[2] + 8);
      if (*(_QWORD *)v614.__r_.__value_.__r.__words[2] != v485 && !Featurizer)
        *(_BYTE *)(v486 + 45) = 0;
      while (v486 != v485)
      {
        *(int32x2_t *)(v486 + 28) = vmul_s32(*(int32x2_t *)(v486 + 28), v477);
        *(_DWORD *)(v486 + 36) *= v584;
        v487 = *(unsigned __int8 *)(a1 + 528);
        if (*(_BYTE *)(a1 + 528))
          v488 = *(_BYTE *)(v486 + 45) == 0;
        else
          v488 = 1;
        if (!v488)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v583, (const void **)v486, (uint64_t)&__p);
          if (*(char *)(v486 + 23) < 0)
            operator delete(*(void **)v486);
          v489 = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
          *(_QWORD *)(v486 + 16) = __p.__traits_.__col_;
          *(_OWORD *)v486 = v489;
          v487 = *(unsigned __int8 *)(a1 + 528);
        }
        if (v487)
          v490 = *(_BYTE *)(v486 + 44) == 0;
        else
          v490 = 1;
        if (!v490)
        {
          std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)v486, (const void **)v583, (uint64_t)&__p);
          if (*(char *)(v486 + 23) < 0)
            operator delete(*(void **)v486);
          v491 = *(_OWORD *)&__p.__traits_.__loc_.__locale_;
          *(_QWORD *)(v486 + 16) = __p.__traits_.__col_;
          *(_OWORD *)v486 = v491;
        }
        v486 += 224;
      }
      if (quasar::gLogLevel >= 6)
      {
        v669 = 0u;
        v668 = 0u;
        v667 = 0u;
        v666 = 0u;
        v665 = 0u;
        *(_OWORD *)v664 = 0u;
        v663 = 0u;
        *(_OWORD *)v662 = 0u;
        v661 = 0u;
        v660 = 0u;
        *(_OWORD *)v659 = 0u;
        v658 = 0u;
        v657 = 0u;
        memset(&__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        quasar::CTCAlignedDecoder::latticeToString(a1, (uint64_t)v614.__r_.__value_.__l.__data_);
        if (SHIBYTE(v651) >= 0)
          v492 = (uint64_t)&v650;
        else
          v492 = v650;
        if (SHIBYTE(v651) >= 0)
          v493 = HIBYTE(v651);
        else
          v493 = *((_QWORD *)&v650 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v492, v493);
        if (SHIBYTE(v651) < 0)
          operator delete((void *)v650);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&traits);
      fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)v614.__r_.__value_.__l.__data_, (uint64_t)&traits, 1);
      if (quasar::gLogLevel >= 6)
      {
        v669 = 0u;
        v668 = 0u;
        v667 = 0u;
        v666 = 0u;
        v665 = 0u;
        *(_OWORD *)v664 = 0u;
        v663 = 0u;
        *(_OWORD *)v662 = 0u;
        v661 = 0u;
        v660 = 0u;
        *(_OWORD *)v659 = 0u;
        v658 = 0u;
        v657 = 0u;
        memset(&__p, 0, sizeof(__p));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
        quasar::CTCAlignedDecoder::compactLatticeToString(a1, (uint64_t)&traits);
        if (SHIBYTE(v651) >= 0)
          v494 = (uint64_t)&v650;
        else
          v494 = v650;
        if (SHIBYTE(v651) >= 0)
          v495 = HIBYTE(v651);
        else
          v495 = *((_QWORD *)&v650 + 1);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, v494, v495);
        if (SHIBYTE(v651) < 0)
          operator delete((void *)v650);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
      }
      v496 = (uint64_t *)v614.__r_.__value_.__r.__words[2];
      __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)v474;
      v497 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::vector<quasar::Token>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v585, (int **)v474, (uint64_t)&std::piecewise_construct, (uint64_t *)&__p)+ 5;
      if (v497 != v496)
        std::vector<quasar::Token>::__assign_with_size[abi:ne180100]<quasar::Token*,quasar::Token*>((uint64_t)v497, *v496, v496[1], 0x6DB6DB6DB6DB6DB7 * ((v496[1] - *v496) >> 5));
      std::allocate_shared[abi:ne180100]<kaldi::quasar::Score,std::allocator<kaldi::quasar::Score>,kaldi::quasar::Score const&,void>((__int128 *)(v474 + 24), &__p);
      *(_QWORD *)&v647 = v474;
      v498 = std::__hash_table<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,std::shared_ptr<void>>>>::__emplace_unique_key_args<std::vector<int>,std::piecewise_construct_t const&,std::tuple<std::vector<int> const&>,std::tuple<>>(v476, (int **)v474, (uint64_t)&std::piecewise_construct, (uint64_t *)&v647);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(v498 + 5), (__int128 *)&__p);
      v499 = (std::__shared_weak_count *)__p.__traits_.__ct_;
      if (__p.__traits_.__ct_)
      {
        v500 = &__p.__traits_.__ct_->__shared_owners_;
        do
          v501 = __ldaxr((unint64_t *)v500);
        while (__stlxr(v501 - 1, (unint64_t *)v500));
        if (!v501)
        {
          ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
          std::__shared_weak_count::__release_weak(v499);
        }
      }
      v502 = *(_QWORD *)(*v579 + 352);
      v503 = *(_QWORD *)(v502 + 8);
      if (v503 >= *(_QWORD *)(v502 + 16))
      {
        v504 = std::vector<std::vector<quasar::Token>>::__push_back_slow_path<std::vector<quasar::Token> const&>(*(uint64_t **)(*v579 + 352), (uint64_t *)v614.__r_.__value_.__r.__words[2]);
      }
      else
      {
        std::vector<std::vector<quasar::Token>>::__construct_one_at_end[abi:ne180100]<std::vector<quasar::Token> const&>(*(_QWORD *)(*v579 + 352), (uint64_t *)v614.__r_.__value_.__r.__words[2]);
        v504 = v503 + 24;
      }
      *(_QWORD *)(v502 + 8) = v504;
      v505 = *(_QWORD *)(*v579 + 392);
      v506 = (float)-(float)(kaldi::quasar::Score::merge((kaldi::quasar::Score *)(v474 + 24), *(float *)(v474 + 28), *(float *)(v474 + 24))+ (float)(*(float *)(v474 + 36) * *(float *)(v474 + 40)));
      v507 = *(_QWORD *)(v505 + 16);
      v508 = *(double **)(v505 + 8);
      if ((unint64_t)v508 >= v507)
      {
        v510 = *(double **)v505;
        v511 = ((uint64_t)v508 - *(_QWORD *)v505) >> 3;
        v512 = v511 + 1;
        if ((unint64_t)(v511 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v513 = v507 - (_QWORD)v510;
        if (v513 >> 2 > v512)
          v512 = v513 >> 2;
        if ((unint64_t)v513 >= 0x7FFFFFFFFFFFFFF8)
          v514 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v514 = v512;
        if (v514)
        {
          v515 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v505 + 16, v514);
          v510 = *(double **)v505;
          v508 = *(double **)(v505 + 8);
        }
        else
        {
          v515 = 0;
        }
        v516 = (double *)&v515[8 * v511];
        *v516 = v506;
        v509 = v516 + 1;
        while (v508 != v510)
        {
          v517 = *((_QWORD *)v508-- - 1);
          *((_QWORD *)v516-- - 1) = v517;
        }
        *(_QWORD *)v505 = v516;
        *(_QWORD *)(v505 + 8) = v509;
        *(_QWORD *)(v505 + 16) = &v515[8 * v514];
        if (v510)
          operator delete(v510);
      }
      else
      {
        *v508 = v506;
        v509 = v508 + 1;
      }
      *(_QWORD *)(v505 + 8) = v509;
      fst::Union<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(*(_QWORD *)(*v579 + 320), (uint64_t)v614.__r_.__value_.__l.__data_);
      v518 = *(unsigned __int8 *)(a1 + 485);
      traits.__begin_ = (std::vector<std::wstring>::pointer)&unk_1E5D25800;
      v519 = traits.__end_;
      if (traits.__end_)
      {
        v520 = traits.__end_[2].__r_.__value_.__s.__data_[2] - 1;
        traits.__end_[2].__r_.__value_.__s.__data_[2] = v520;
        if (!v520)
          (*(void (**)(std::vector<std::wstring>::pointer))(v519->__r_.__value_.__r.__words[0] + 8))(v519);
      }
      v521 = v615;
      if (v615)
      {
        v522 = (unint64_t *)&v615->__shared_owners_;
        do
          v523 = __ldaxr(v522);
        while (__stlxr(v523 - 1, v522));
        if (!v523)
        {
          ((void (*)(std::__shared_weak_count *))v521->__on_zero_shared)(v521);
          std::__shared_weak_count::__release_weak(v521);
        }
      }
      v524 = (std::__shared_weak_count *)v614.__r_.__value_.__l.__size_;
      if (v614.__r_.__value_.__l.__size_)
      {
        v525 = (unint64_t *)(v614.__r_.__value_.__l.__size_ + 8);
        do
          v526 = __ldaxr(v525);
        while (__stlxr(v526 - 1, v525));
        if (!v526)
        {
          ((void (*)(std::__shared_weak_count *))v524->__on_zero_shared)(v524);
          std::__shared_weak_count::__release_weak(v524);
        }
      }
      if (v652[0])
      {
        v652[1] = v652[0];
        operator delete(v652[0]);
      }
      if (!v518)
      {
        v474 += 88;
        if (v474 != v475)
          continue;
      }
      v527 = v627;
      v474 = (uint64_t)v626;
      goto LABEL_767;
    }
  }
  v527 = v474;
LABEL_767:
  v528 = *((int *)*v572 + 4);
  v529 = 0x2E8BA2E8BA2E8BA3 * ((v527 - v474) >> 3);
  v530 = v579;
  if (v529 > v528)
  {
    if (quasar::gLogLevel >= 4)
    {
      v669 = 0u;
      v668 = 0u;
      v667 = 0u;
      v666 = 0u;
      v665 = 0u;
      *(_OWORD *)v664 = 0u;
      v663 = 0u;
      *(_OWORD *)v662 = 0u;
      v661 = 0u;
      v660 = 0u;
      *(_OWORD *)v659 = 0u;
      v658 = 0u;
      v657 = 0u;
      memset(&__p, 0, sizeof(__p));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Shrinking nbest from ", 21);
      v531 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v531, (uint64_t)" to ", 4);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
    }
    v530 = v579;
    std::vector<std::vector<quasar::Token>>::resize(*(uint64_t **)(*v579 + 352), v528);
    std::vector<double>::resize(*(_QWORD *)(*v579 + 392), v528);
  }
  v532 = *v530;
  *(_BYTE *)(v532 + 440) = 1;
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(*(_QWORD *)(v532 + 320), *(_QWORD *)(v532 + 152), 1);
  kaldi::quasar::DeterminizeCompactLattice(*(_QWORD *)(*v530 + 152));
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v589);
  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v587);
  kaldi::CompactLatticeShortestPath(*(_QWORD **)(*v579 + 152), (uint64_t)&v589, 0, (uint64_t *)(*v579 + 448));
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v589, (uint64_t)&v587, 1);
  memset(&v586, 0, sizeof(v586));
  if ((int **)v627 == v626)
  {
    v538 = 0;
    v539 = 0;
    v540 = v579;
  }
  else
  {
    memset(&v614, 0, sizeof(v614));
    v533 = *v626;
    v534 = v626[1];
    traits.__begin_ = (std::vector<std::wstring>::pointer)&v614;
    if (v533 == v534)
    {
      v537 = 0;
      v536 = 0;
      v535 = 0;
    }
    else
    {
      do
      {
        (*(void (**)(std::regex_iterator<std::__wrap_iter<const char *>, char>::regex_type *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)*v12 + 88))(&__p, *v12, *v533);
        std::back_insert_iterator<std::vector<std::string>>::operator=[abi:ne180100]((std::vector<std::string> **)&traits, (__int128 *)&__p);
        if (SHIBYTE(__p.__traits_.__col_) < 0)
          operator delete(__p.__traits_.__loc_.__locale_);
        ++v533;
      }
      while (v533 != v534);
      v535 = (std::string *)v586.__end_;
      v537 = (__int128 *)v614.__r_.__value_.__l.__size_;
      v536 = (std::string *)v614.__r_.__value_.__r.__words[0];
    }
    std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::vector<std::string> *)&v586, v535, v536, v537, 0xAAAAAAAAAAAAAAABLL * (((char *)v537 - (char *)v536) >> 3));
    v540 = v579;
    __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v614;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    v538 = v586.__begin_;
    v539 = (__int128 *)v586.__end_;
  }
  v541 = *(unsigned int *)(a1 + 532);
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v539 - (char *)v538) >> 3) > v541)
  {
    memset(&__p, 0, 24);
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)&__p, (__int128 *)((char *)v539 - 24 * v541), v539, v541);
    std::vector<std::string>::__vdeallocate(&v586);
    v586 = (std::vector<std::wstring>)__p.__traits_;
    memset(&__p, 0, 24);
    v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
    LODWORD(v541) = *(_DWORD *)(a1 + 532);
  }
  if ((_DWORD)v541)
  {
    v542 = *v540;
    v544 = *(_QWORD *)(*v540 + 96);
    v543 = *(_QWORD *)(*v540 + 104);
    v545 = *v540;
    if (v543 != v544)
    {
      do
        quasar::Token::~Token((void **)(v543 - 224));
      while (v543 != v544);
      v545 = *v540;
    }
    *(_QWORD *)(v542 + 104) = v544;
    v546 = v586.__begin_;
    v547 = v586.__end_;
    for (i = (uint64_t *)(v545 + 96); v546 != v547; ++v546)
    {
      if (SHIBYTE(v546->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v645, (const std::string::value_type *)v546->__r_.__value_.__l.__data_, v546->__r_.__value_.__l.__size_);
      }
      else
      {
        v548 = *(_OWORD *)&v546->__r_.__value_.__l.__data_;
        v645.__r_.__value_.__r.__words[2] = v546->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v645.__r_.__value_.__l.__data_ = v548;
      }
      if (SHIBYTE(v645.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v614, v645.__r_.__value_.__l.__data_, v645.__r_.__value_.__l.__size_);
      else
        v614 = v645;
      std::string::basic_string[abi:ne180100]<0>(v652, "");
      std::string::basic_string[abi:ne180100]<0>(&v650, "");
      memset(&traits, 0, sizeof(traits));
      std::string::basic_string[abi:ne180100]<0>(&v647, "");
      quasar::Token::Token((std::string *)&__p, (__int128 *)&v614, 0, 0, 0, 1, 0, (__int128 *)v652, 0.0, &v650, (__int128 **)&traits, 0, &v647, 0, 0);
      if (SHIBYTE(v648) < 0)
        operator delete((void *)v647);
      *(_QWORD *)&v647 = &traits;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v647);
      if (SHIBYTE(v651) < 0)
        operator delete((void *)v650);
      if (v653 < 0)
        operator delete(v652[0]);
      if (SHIBYTE(v614.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v614.__r_.__value_.__l.__data_);
      std::back_insert_iterator<std::vector<quasar::Token>>::operator=[abi:ne180100](&i, (__int128 *)&__p);
      if (SBYTE7(v665) < 0)
        operator delete(v664[0]);
      if (SBYTE7(v663) < 0)
        operator delete(v662[0]);
      v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&v660 + 8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
      if (SBYTE7(v660) < 0)
        operator delete(v659[0]);
      v614.__r_.__value_.__r.__words[0] = (std::string::size_type)&v657 + 8;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v614);
      if (SBYTE7(v657) < 0)
        operator delete(__p.__start_.__cntrl_);
      if (SHIBYTE(__p.__traits_.__col_) < 0)
        operator delete(__p.__traits_.__loc_.__locale_);
      if (SHIBYTE(v645.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v645.__r_.__value_.__l.__data_);
    }
  }
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v586;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  v587 = &unk_1E5D25580;
  v549 = v588;
  if (v588)
  {
    v550 = *(_DWORD *)(v588 + 56) - 1;
    *(_DWORD *)(v588 + 56) = v550;
    if (!v550)
      (*(void (**)(uint64_t))(*(_QWORD *)v549 + 8))(v549);
  }
  v589 = &unk_1E5D25800;
  v551 = v590;
  if (v590)
  {
    v552 = *(_DWORD *)(v590 + 56) - 1;
    *(_DWORD *)(v590 + 56) = v552;
    if (!v552)
      (*(void (**)(uint64_t))(*(_QWORD *)v551 + 8))(v551);
  }
  v553 = v595;
  if (v595)
  {
    v554 = (unint64_t *)&v595->__shared_owners_;
    do
      v555 = __ldaxr(v554);
    while (__stlxr(v555 - 1, v554));
    if (!v555)
    {
      ((void (*)(std::__shared_weak_count *))v553->__on_zero_shared)(v553);
      std::__shared_weak_count::__release_weak(v553);
    }
  }
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&__str);
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v616;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (v620)
  {
    v621 = (char *)v620;
    operator delete(v620);
  }
  std::unique_ptr<std::vector<std::string>>::reset[abi:ne180100](&v624, 0);
  v556 = v625;
  v625 = 0;
  if (v556)
    (*(void (**)(uint64_t))(*(_QWORD *)v556 + 8))(v556);
  __p.__traits_.__loc_.__locale_ = (std::locale::__imp *)&v626;
  std::vector<std::pair<std::vector<int>,kaldi::quasar::Score>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (__s2)
  {
    v630 = (int *)__s2;
    operator delete(__s2);
  }
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)&v632);
  std::__hash_table<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::__unordered_map_hasher<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,kaldi::VectorHasher<int>,std::equal_to<std::vector<int>>,true>,std::__unordered_map_equal<std::vector<int>,std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>,std::equal_to<std::vector<int>>,kaldi::VectorHasher<int>,true>,std::allocator<std::__hash_value_type<std::vector<int>,kaldi::quasar::Score>>>::~__hash_table((uint64_t)v635);
  v557 = *(std::__shared_weak_count **)&v637[3];
  if (*(_QWORD *)&v637[3])
  {
    v558 = (unint64_t *)(*(_QWORD *)&v637[3] + 8);
    do
      v559 = __ldaxr(v558);
    while (__stlxr(v559 - 1, v558));
    if (!v559)
    {
      ((void (*)(std::__shared_weak_count *))v557->__on_zero_shared)(v557);
      std::__shared_weak_count::__release_weak(v557);
    }
  }
  v560 = *(std::__shared_weak_count **)&v637[2];
  if (*(_QWORD *)&v637[2])
  {
    v561 = (unint64_t *)(*(_QWORD *)&v637[2] + 8);
    do
      v562 = __ldaxr(v561);
    while (__stlxr(v562 - 1, v561));
    if (!v562)
    {
      ((void (*)(std::__shared_weak_count *))v560->__on_zero_shared)(v560);
      std::__shared_weak_count::__release_weak(v560);
    }
  }
  v563 = (uint64_t)v640;
  v640 = 0;
  if (v563)
    (*(void (**)(uint64_t))(*(_QWORD *)v563 + 16))(v563);
  return 0;
}

