void sub_1ADCD9158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a23)
    (*(void (**)(uint64_t))(*(_QWORD *)a23 + 8))(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1ADCD9204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unique_ptr<kaldi::quasar::Lexicon>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::unordered_map<std::string,unsigned long>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1ADCD9440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = (uint64_t *)*a1;
  v4 = (uint64_t *)a1[1];
  result = a2[1];
  while (v4 != v5)
  {
    v4 -= 5;
    result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(result - 40, v4);
  }
  a2[1] = result;
  v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t std::__split_buffer<std::unordered_map<std::string,unsigned long>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<std::vector<std::string>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<std::vector<std::string>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(&v15);
  }
}

void sub_1ADCD96E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<std::string>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<std::string>>>,std::reverse_iterator<std::vector<std::vector<std::string>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<std::string>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<std::string>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<std::string>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::vector<std::string>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::string>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::string>>::~__split_buffer(&v15);
  }
}

void sub_1ADCD9A58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::string>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::LexiconFst::~LexiconFst(void **this)
{
  _DWORD *v2;
  int v3;

  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  *this = &unk_1E5D256C0;
  v2 = this[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
}

void std::default_delete<kaldi::quasar::LexiconFst []>::operator()[abi:ne180100]<kaldi::quasar::LexiconFst>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 - 8);
    if (v3)
    {
      v4 = 48 * v3;
      do
      {
        v5 = a2 + v4;
        if (*(char *)(a2 + v4 - 9) < 0)
          operator delete(*(void **)(v5 - 32));
        *(_QWORD *)(v5 - 48) = &unk_1E5D256C0;
        v6 = *(_DWORD **)(v5 - 40);
        if (v6)
        {
          v7 = v6[14] - 1;
          v6[14] = v7;
          if (!v7)
            (*(void (**)(_DWORD *))(*(_QWORD *)v6 + 8))(v6);
        }
        v4 -= 48;
      }
      while (v4);
    }
    JUMPOUT(0x1AF44D160);
  }
}

void std::default_delete<kaldi::quasar::GrammarFst []>::operator()[abi:ne180100]<kaldi::quasar::GrammarFst>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 - 8);
    if (v3)
    {
      v4 = 24 * v3;
      do
      {
        *(_QWORD *)(a2 + v4 - 24) = &unk_1E5D256C0;
        v5 = *(_DWORD **)(a2 + v4 - 16);
        if (v5)
        {
          v6 = v5[14] - 1;
          v5[14] = v6;
          if (!v6)
            (*(void (**)(_DWORD *))(*(_QWORD *)v5 + 8))(v5);
        }
        v4 -= 24;
      }
      while (v4);
    }
    JUMPOUT(0x1AF44D160);
  }
}

void std::vector<kaldi::quasar::LmeFst::Stats>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      memset(*(void **)(v4 - 8), 255, 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    memset(v15, 255, 8 * a2);
    v17 = &v15[8 * a2];
    if (v7 != v8)
    {
      do
      {
        v18 = *((_QWORD *)v7 - 1);
        v7 -= 8;
        *((_QWORD *)v15 - 1) = v18;
        v15 -= 8;
      }
      while (v7 != v8);
      v8 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

_QWORD *std::vector<std::vector<std::string>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1ADCD9DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<std::string>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t quasar::FeatureExtractor::FeatureExtractor(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  *(_QWORD *)a1 = &unk_1E5D35D78;
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v3 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v3;
  }
  *(_DWORD *)(a1 + 32) = 0;
  quasar::SystemConfig::Version::Version((quasar::SystemConfig::Version *)(a1 + 36));
  return a1;
}

void sub_1ADCD9E34(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FeatureExtractor::init(quasar::FeatureExtractor *this, quasar::SystemConfig *a2)
{
  size_t v4;
  void **v5;
  char *v6;
  uint64_t result;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  if (*((_DWORD *)this + 8))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Parameters for ", 15);
    v11 = *((_QWORD *)this + 1);
    v10 = (char *)this + 8;
    v9 = v11;
    v12 = v10[23];
    if (v12 >= 0)
      v13 = (uint64_t)v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = v10[23];
    else
      v14 = *((_QWORD *)v10 + 1);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, " have already been registered.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *(_QWORD *)((char *)this + 36) = quasar::SystemConfig::getConfigFileVersion(a2);
  if (*((char *)this + 31) >= 0)
    v4 = *((unsigned __int8 *)this + 31);
  else
    v4 = *((_QWORD *)this + 2);
  v5 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v4 + 1);
  if (SBYTE7(v17) < 0)
    v5 = (void **)__p[0];
  if (v4)
  {
    if (*((char *)this + 31) >= 0)
      v6 = (char *)this + 8;
    else
      v6 = (char *)*((_QWORD *)this + 1);
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)v5 + v4) = 46;
  quasar::SystemConfig::setPrefix((std::string *)a2, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  (**(void (***)(quasar::FeatureExtractor *, quasar::SystemConfig *))this)(this, a2);
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)this + 8, 0, 0);
  result = (*(uint64_t (**)(quasar::FeatureExtractor *, quasar::SystemConfig *))(*(_QWORD *)this + 8))(this, a2);
  *((_DWORD *)this + 8) = 1;
  return result;
}

void sub_1ADCD9FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::FeatureExtractor::init(uint64_t this)
{
  _QWORD *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _OWORD v7[17];

  if (*(_DWORD *)(this + 32))
  {
    v6 = this;
    memset(v7, 0, sizeof(v7));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v7);
    v1 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"Parameters for ", 15);
    v2 = *(char *)(v6 + 31);
    if (v2 >= 0)
      v3 = v6 + 8;
    else
      v3 = *(_QWORD *)(v6 + 8);
    if (v2 >= 0)
      v4 = *(unsigned __int8 *)(v6 + 31);
    else
      v4 = *(_QWORD *)(v6 + 16);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, v3, v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v5, " have already been registered.");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v7);
  }
  *(_DWORD *)(this + 32) = 1;
  return this;
}

void quasar::FeatureExtractor::createOnlineFeInput(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _OWORD v20[17];

  if (*(_DWORD *)(a1 + 32) != 1)
  {
    memset(v20, 0, sizeof(v20));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Must call init() for ", 21);
    v13 = *(_QWORD *)(a1 + 8);
    v12 = a1 + 8;
    v11 = v13;
    v14 = *(char *)(v12 + 23);
    if (v14 >= 0)
      v15 = v12;
    else
      v15 = v11;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = *(_QWORD *)(v12 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, " before calling createOnlineFeInput().");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v20);
  }
  v3 = (std::__shared_weak_count *)a3[1];
  v18 = *a3;
  v19 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, a2, &v18);
  v6 = v19;
  if (v19)
  {
    v7 = (unint64_t *)&v19->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADCDA1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void quasar::FeatureExtractor::~FeatureExtractor(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t quasar::FeatureExtractor::requiresOutputBuffering(quasar::FeatureExtractor *this)
{
  return 0;
}

uint64_t quasar::OnlineCmnFe::OnlineCmnFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D34738;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1ADCDA290(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  quasar::OnlineCmnFe::OnlineCmnFe(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCmnFe::requiresOutputBuffering(quasar::OnlineCmnFe *this)
{
  return *((unsigned __int8 *)this + 124);
}

uint64_t quasar::OnlineCmvnFe::OnlineCmvnFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D34CF8;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1ADCDA308(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*v2);
  quasar::OnlineCmnFe::OnlineCmnFe(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCmvnFe::requiresOutputBuffering(quasar::OnlineCmvnFe *this)
{
  return *((unsigned __int8 *)this + 124);
}

_QWORD *quasar::OnlineFbankFe::OnlineFbankFe(_QWORD *a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor((uint64_t)a1, a2);
  *v3 = off_1E5D34FC8;
  kaldi::FbankOptions::FbankOptions((kaldi::FbankOptions *)(v3 + 6));
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)((char *)a1 + 156) = _D0;
  *(_QWORD *)((char *)a1 + 164) = 0xA4579F000;
  a1[22] = 0;
  a1[23] = 0;
  return a1;
}

void sub_1ADCDA384(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineFbankWithPitchFe::OnlineFbankWithPitchFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D38A40;
  kaldi::FbankWithPitchOptions::FbankWithPitchOptions((kaldi::FbankWithPitchOptions *)(v3 + 6));
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  return a1;
}

void sub_1ADCDA3E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineFbankWithAudioAnalyticsFe::OnlineFbankWithAudioAnalyticsFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D3ABE0;
  kaldi::FbankWithAudioAnalyticsOptions::FbankWithAudioAnalyticsOptions((kaldi::FbankWithAudioAnalyticsOptions *)(v3 + 6));
  *(_OWORD *)(a1 + 284) = xmmword_1AE16F250;
  *(_DWORD *)(a1 + 300) = 10;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  return a1;
}

void sub_1ADCDA460(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineLdaFe::OnlineLdaFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D34778;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 10));
  return a1;
}

void sub_1ADCDA4D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  quasar::OnlineCmnFe::OnlineCmnFe(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineMfccFe::OnlineMfccFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D34D38;
  kaldi::MfccOptions::MfccOptions((kaldi::MfccOptions *)(v3 + 6));
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  return a1;
}

void sub_1ADCDA530(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::OnlineNnetForwardFe::OnlineNnetForwardFe(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)v3 = off_1E5D37348;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 104) = 0;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 184) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 192) = 0;
  *(_QWORD *)(v3 + 200) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 208), "");
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0x2EDBE6FF3F800000;
  *(_QWORD *)(a1 + 248) = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 256));
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  return a1;
}

void sub_1ADCDA614(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  void *v10;

  v8 = v2;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v8);
  if (*(char *)(v1 + 231) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 207) < 0)
    operator delete(*v7);
  v10 = *v6;
  if (*v6)
  {
    *(_QWORD *)(v1 + 152) = v10;
    operator delete(v10);
  }
  if (*(char *)(v1 + 127) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v4);
  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::SpeechActivityDetectorFe::SpeechActivityDetectorFe(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)v3 = off_1E5CFF200;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 80), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), "");
  *(_DWORD *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 132) = 0;
  return a1;
}

void sub_1ADCDA730(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;

  if (*(char *)(v1 + 103) < 0)
    operator delete(*v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::AmFusionEncoderFe::AmFusionEncoderFe(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)v3 = off_1E5D363A8;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  *(_OWORD *)(v3 + 96) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 112), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 136), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 160), "");
  *(_QWORD *)(a1 + 248) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_DWORD *)(a1 + 256) = -1;
  *(_BYTE *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 264) = 0;
  *(_WORD *)(a1 + 268) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_QWORD *)(a1 + 456) = 0;
  *(_QWORD *)(a1 + 464) = a1 + 472;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_QWORD *)(a1 + 488) = a1 + 496;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 512) = a1 + 520;
  *(_QWORD *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_DWORD *)(a1 + 572) = 1056964608;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_QWORD *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  return a1;
}

void sub_1ADCDA8CC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;

  if (*(char *)(v1 + 159) < 0)
    operator delete(*v7);
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineAcousticEncoderFe::OnlineAcousticEncoderFe(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)v3 = off_1E5D393F0;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 144) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 168), "");
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = 0x2EDBE6FF3F800000;
  *(_QWORD *)(a1 + 208) = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 216));
  *(_OWORD *)(a1 + 592) = 0u;
  return a1;
}

void sub_1ADCDA9E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;
  void *v9;

  v7 = v2;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v7);
  if (*(char *)(v1 + 191) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 167) < 0)
    operator delete(*v6);
  v9 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v1 + 120) = v9;
    operator delete(v9);
  }
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v4);
  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineNnetForwardSkipFe::OnlineNnetForwardSkipFe(uint64_t a1, __int128 *a2)
{
  uint64_t v3;

  v3 = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)v3 = off_1E5D39430;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_QWORD *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 152) = 0;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 160) = 0;
  *(_QWORD *)(v3 + 168) = 0;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 80) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(v3 + 176), "");
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 200) = 0x2EDBE6FF3F800000;
  *(_QWORD *)(a1 + 216) = 0;
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 224));
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_QWORD *)(a1 + 632) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 672) = 0;
  return a1;
}

void sub_1ADCDAB34(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  uint64_t v7;

  v7 = v2;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v7);
  if (*(char *)(v1 + 199) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 175) < 0)
    operator delete(*v6);
  if (*(char *)(v1 + 135) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 95) < 0)
    operator delete(*(void **)(v1 + 72));
  if (*(char *)(v1 + 71) < 0)
    operator delete(*v4);
  *(_QWORD *)v1 = &unk_1E5D35D78;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineStaticTransformFe::OnlineStaticTransformFe(uint64_t a1, __int128 *a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *v3 = off_1E5D39470;
  v3[6] = 0;
  v3[7] = 0;
  v3[8] = 0;
  kaldi::Matrix<float>::Matrix((uint64_t)(v3 + 9));
  return a1;
}

void sub_1ADCDAC0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v2);
  quasar::OnlineCmnFe::OnlineCmnFe(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::OnlineCacheInputFe::OnlineCacheInputFe(uint64_t a1, __int128 *a2)
{
  uint64_t result;

  result = quasar::FeatureExtractor::FeatureExtractor(a1, a2);
  *(_QWORD *)result = off_1E5D369B8;
  *(_WORD *)(result + 44) = 257;
  return result;
}

void quasar::OnlineSubsampleFe::registerParams(quasar::OnlineSubsampleFe *this, quasar::SystemConfig *a2)
{
  _DWORD *v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "subsample");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 23, 0, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "stride");
  std::string::basic_string[abi:ne180100]<0>(v5, "Take every n'th feature, for this value of stride(with negative value, repeats each feature n times)");
  v4 = (_DWORD *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)v4, (uint64_t)v5, 0, 23, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  *v4 = 1;
}

void sub_1ADCDAD2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSubsampleFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, kaldi::OnlineFeatInputItf **a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  kaldi::OnlineFeatInputItf *v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineSubsampleFe,std::allocator<kaldi::OnlineSubsampleFe>,kaldi::OnlineFeatInputItf *,int &,void>(&v14, (int *)(a1 + 44), v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::FeatureExtractorSimpleFactory::createFeatureExtractor(std::string *this@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  std::string *v6;
  std::string::size_type size;
  std::string::size_type v8;
  std::string::size_type v9;
  uint64_t v10;
  unsigned __int16 *v15;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v23;
  int v24;
  int v25;
  unint64_t *v27;
  unint64_t *v28;
  unint64_t *v29;
  void *exception;
  std::string *v31;
  __int128 v32;
  int v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string v40;
  std::string v41;
  std::string v42;
  std::string v43;
  _BYTE __str[32];
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  if (quasar::gLogLevel >= 5)
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v45 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Building FeatureExtractor ", 26);
    v5 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
    if (v5 >= 0)
      v6 = this;
    else
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    if (v5 >= 0)
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    else
      size = this->__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, size);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
  }
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)__str, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)__str = *(_OWORD *)&this->__r_.__value_.__l.__data_;
    *(_QWORD *)&__str[16] = *((_QWORD *)&this->__r_.__value_.__l + 2);
  }
  v8 = std::string::rfind(this, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v8 != -1)
  {
    std::string::basic_string(&v43, this, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v42);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    *(std::string *)__str = v43;
  }
  v9 = std::string::find((const std::string *)__str, 58, 0);
  if (v9 != -1)
  {
    std::string::basic_string(&v43, (const std::string *)__str, 0, v9, (std::allocator<char> *)&v42);
    if ((__str[23] & 0x80000000) != 0)
      operator delete(*(void **)__str);
    *(std::string *)__str = v43;
  }
  *a2 = 0;
  a2[1] = 0;
  if ((__str[23] & 0x80) == 0)
  {
    if (__str[23] <= 4u)
    {
      if (__str[23] != 3)
      {
        if (__str[23] != 4)
          goto LABEL_88;
        if (*(_DWORD *)__str == 1853255011)
          goto LABEL_92;
        goto LABEL_59;
      }
      if (*(unsigned __int16 *)__str != 28003 || __str[2] != 110)
        goto LABEL_83;
      goto LABEL_66;
    }
    if (__str[23] != 5)
    {
      if (__str[23] != 14)
        goto LABEL_88;
      if (*(_QWORD *)__str != 0x7469776B6E616266 || *(_QWORD *)&__str[6] != 0x6863746970687469)
        goto LABEL_59;
LABEL_103:
      std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithPitchFe,std::allocator<quasar::OnlineFbankWithPitchFe>,std::string const&,void>((__int128 *)this, &v43);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
      v18 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
      if (!v43.__r_.__value_.__l.__size_)
        goto LABEL_130;
      v29 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v29);
      while (__stlxr(v20 - 1, v29));
      goto LABEL_106;
    }
    if (*(_DWORD *)__str != 1953260900 || __str[4] != 97)
    {
      if (*(_DWORD *)__str != 1851875942 || __str[4] != 107)
        goto LABEL_88;
      goto LABEL_79;
    }
LABEL_98:
    std::allocate_shared[abi:ne180100]<quasar::OnlineDeltaFe,std::allocator<quasar::OnlineDeltaFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    v18 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
    if (!v43.__r_.__value_.__l.__size_)
      goto LABEL_130;
    v28 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v28);
    while (__stlxr(v20 - 1, v28));
    goto LABEL_106;
  }
  v10 = *(_QWORD *)&__str[8];
  if (*(_QWORD *)&__str[8] == 3 && **(_WORD **)__str == 28003 && *(_BYTE *)(*(_QWORD *)__str + 2) == 110)
  {
LABEL_66:
    std::allocate_shared[abi:ne180100]<quasar::OnlineCmnFe,std::allocator<quasar::OnlineCmnFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    v18 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
    if (!v43.__r_.__value_.__l.__size_)
      goto LABEL_130;
    v19 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
LABEL_106:
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
    goto LABEL_130;
  }
  if (*(_QWORD *)&__str[8] == 4)
  {
    if (**(_DWORD **)__str == 1853255011)
    {
LABEL_92:
      std::allocate_shared[abi:ne180100]<quasar::OnlineCmvnFe,std::allocator<quasar::OnlineCmvnFe>,std::string const&,void>((__int128 *)this, &v43);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
      v18 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
      if (!v43.__r_.__value_.__l.__size_)
        goto LABEL_130;
      v27 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v27);
      while (__stlxr(v20 - 1, v27));
      goto LABEL_106;
    }
    v10 = *(_QWORD *)&__str[8];
  }
  if (v10 != 5)
    goto LABEL_45;
  if (**(_DWORD **)__str == 1953260900 && *(_BYTE *)(*(_QWORD *)__str + 4) == 97)
    goto LABEL_98;
  v10 = *(_QWORD *)&__str[8];
  if (*(_QWORD *)&__str[8] != 5)
    goto LABEL_45;
  if (**(_DWORD **)__str == 1851875942 && *(_BYTE *)(*(_QWORD *)__str + 4) == 107)
  {
LABEL_79:
    std::allocate_shared[abi:ne180100]<quasar::OnlineFbankFe,std::allocator<quasar::OnlineFbankFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    v18 = (std::__shared_weak_count *)v43.__r_.__value_.__l.__size_;
    if (!v43.__r_.__value_.__l.__size_)
      goto LABEL_130;
    v23 = (unint64_t *)(v43.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v23);
    while (__stlxr(v20 - 1, v23));
    goto LABEL_106;
  }
  if ((__str[23] & 0x80) != 0)
  {
LABEL_45:
    if (v10 == 14)
    {
      if (**(_QWORD **)__str == 0x7469776B6E616266 && *(_QWORD *)(*(_QWORD *)__str + 6) == 0x6863746970687469)
        goto LABEL_103;
      v10 = *(_QWORD *)&__str[8];
    }
    if (v10 == 3)
    {
      v15 = *(unsigned __int16 **)__str;
      goto LABEL_84;
    }
    goto LABEL_88;
  }
LABEL_59:
  if (__str[23] == 3)
  {
LABEL_83:
    v15 = (unsigned __int16 *)__str;
LABEL_84:
    v24 = *v15;
    v25 = *((unsigned __int8 *)v15 + 2);
    if (v24 == 25708 && v25 == 97)
    {
      std::allocate_shared[abi:ne180100]<quasar::OnlineLdaFe,std::allocator<quasar::OnlineLdaFe>,std::string const&,void>((__int128 *)this, &v43);
      std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
      goto LABEL_130;
    }
  }
LABEL_88:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "mfcc"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineMfccFe,std::allocator<quasar::OnlineMfccFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "nnet-forward"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardFe,std::allocator<quasar::OnlineNnetForwardFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "am-fusion-encoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::AmFusionEncoderFe,std::allocator<quasar::AmFusionEncoderFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "speech-activity-detector"))
  {
    std::allocate_shared[abi:ne180100]<quasar::SpeechActivityDetectorFe,std::allocator<quasar::SpeechActivityDetectorFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "acoustic-encoder"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineAcousticEncoderFe,std::allocator<quasar::OnlineAcousticEncoderFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "nnet-forward-skip"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardSkipFe,std::allocator<quasar::OnlineNnetForwardSkipFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "splice"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineSpliceFe,std::allocator<quasar::OnlineSpliceFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "subsample"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineSubsampleFe,std::allocator<quasar::OnlineSubsampleFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "transform"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineStaticTransformFe,std::allocator<quasar::OnlineStaticTransformFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "cache-input"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "compute-ahead-input"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineComputeAheadInputFe,std::allocator<quasar::OnlineComputeAheadInputFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "fbank-with-audio-analytics"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithAudioAnalyticsFe,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "append"))
  {
    std::allocate_shared[abi:ne180100]<quasar::OnlineAppendFe,std::allocator<quasar::OnlineAppendFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
  else
  {
    if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(__str, "simple-waveform-reader"))
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::operator+<char>();
      v31 = std::string::append(&v40, "\" in \"");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      v33 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
      if (v33 >= 0)
        v34 = this;
      else
        v34 = (std::string *)this->__r_.__value_.__r.__words[0];
      if (v33 >= 0)
        v35 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      else
        v35 = this->__r_.__value_.__l.__size_;
      v36 = std::string::append(&v41, (const std::string::value_type *)v34, v35);
      v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
      v42.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42.__r_.__value_.__l.__data_ = v37;
      v36->__r_.__value_.__l.__size_ = 0;
      v36->__r_.__value_.__r.__words[2] = 0;
      v36->__r_.__value_.__r.__words[0] = 0;
      v38 = std::string::append(&v42, "\"");
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      quasar::PTree::Error::Error(exception, &v43);
    }
    std::allocate_shared[abi:ne180100]<quasar::OnlineSimpleWaveformFe,std::allocator<quasar::OnlineSimpleWaveformFe>,std::string const&,void>((__int128 *)this, &v43);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a2, (__int128 *)&v43);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&v43);
  }
LABEL_130:
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
}

void sub_1ADCDB77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;
  void *v43;
  int v44;

  if (a35 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v44 & 1) == 0)
    {
LABEL_12:
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v42);
      if (a42 < 0)
        operator delete(a37);
      _Unwind_Resume(a1);
    }
  }
  else if (!v44)
  {
    goto LABEL_12;
  }
  __cxa_free_exception(v43);
  goto LABEL_12;
}

void quasar::readMatrixFile(uint64_t a1, int32x2_t *a2)
{
  kaldi::Input *v4;
  uint64_t *v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[17];
  _BYTE v11[15];
  unsigned __int8 v12;

  v12 = 0;
  v4 = (kaldi::Input *)kaldi::Input::Input(v11, a1, &v12);
  v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::Matrix<float>::Read(a2, v5, v12, 0, 0);
  if (quasar::gLogLevel >= 5)
  {
    memset(v10, 0, sizeof(v10));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Finished reading matrix file ", 29);
    v7 = *(char *)(a1 + 23);
    if (v7 >= 0)
      v8 = a1;
    else
      v8 = *(_QWORD *)a1;
    if (v7 >= 0)
      v9 = *(unsigned __int8 *)(a1 + 23);
    else
      v9 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v8, v9);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v10);
  }
  kaldi::Input::~Input((kaldi::Input *)v11);
}

void sub_1ADCDB980(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

double quasar::OnlineCmnFe::registerParams(quasar::OnlineCmnFe *this, quasar::SystemConfig *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _BYTE *v6;
  double result;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMN computation");
  v4 = (_QWORD *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "min-cmn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minumum CMN window used at start of decoding (adds latency only at start). ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "init-cmvn-stats-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Stats File for warm-start online CMVN");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v10, (uint64_t)this + 56, (uint64_t)__p, 0, 47, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "prior-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames used from prior CMVN stats file");
  v5 = (_DWORD *)((char *)this + 120);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 120, (uint64_t)__p, 0, 47, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "buffer-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use OnlineBufferingInput");
  v6 = (char *)this + 124;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v10, (uint64_t)v6, (uint64_t)__p, 0, 81, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  *(_QWORD *)&result = 0x6400000258;
  *v4 = 0x6400000258;
  *v5 = 0;
  *v6 = 1;
  return result;
}

void sub_1ADCDBC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineCmnFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  if ((this[9].i8[7] & 0x80000000) == 0)
  {
    if (!this[9].i8[7])
      return;
    goto LABEL_3;
  }
  if (this[8])
LABEL_3:
    quasar::readMatrixFile((uint64_t)&this[7], this + 10);
}

double quasar::OnlineCmnFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[17];

  if (!*a2)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  v15 = *a2;
  v14 = a1 + 80;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineCmnInput,std::allocator<kaldi::OnlineCmnInput>,kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,void>(&v15, (int *)(a1 + 44), (int *)(a1 + 48), &v14, (int *)(a1 + 120), v16);
  result = *(double *)v16;
  *a3 = v16[0];
  return result;
}

double quasar::OnlineCmvnFe::registerParams(quasar::OnlineCmvnFe *this, quasar::SystemConfig *a2)
{
  _QWORD *v4;
  _DWORD *v5;
  _BYTE *v6;
  double result;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "cmvn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Window in frames for running average CMVN computation");
  v4 = (_QWORD *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "min-cmvn-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minumum CMVN window used at start of decoding (adds latency only at start). ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "init-cmvn-stats-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Stats File for warm-start online CMVN");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v10, (uint64_t)this + 56, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "prior-count");
  std::string::basic_string[abi:ne180100]<0>(__p, "number of frames used from prior CMVN stats file");
  v5 = (_DWORD *)((char *)this + 120);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v10, (uint64_t)this + 120, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  std::string::basic_string[abi:ne180100]<0>(v10, "buffer-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "Use OnlineBufferingInput");
  v6 = (char *)this + 124;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v10, (uint64_t)v6, (uint64_t)__p, 0, 81, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  *(_QWORD *)&result = 0x6400000258;
  *v4 = 0x6400000258;
  *v5 = 0;
  *v6 = 1;
  return result;
}

void sub_1ADCDBFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineCmvnFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  if ((this[9].i8[7] & 0x80000000) == 0)
  {
    if (!this[9].i8[7])
      return;
    goto LABEL_3;
  }
  if (this[8])
LABEL_3:
    quasar::readMatrixFile((uint64_t)&this[7], this + 10);
}

double quasar::OnlineCmvnFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  _OWORD v17[17];

  if (!*a2)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  v16 = *a2;
  v15 = 1;
  v14 = a1 + 80;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineCmvnInput,std::allocator<kaldi::OnlineCmvnInput>,kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,void>(&v16, (int *)(a1 + 44), (int *)(a1 + 48), &v15, &v14, (int *)(a1 + 120), v17);
  result = *(double *)v17;
  *a3 = v17[0];
  return result;
}

void quasar::OnlineDeltaFe::registerParams(quasar::OnlineDeltaFe *this, quasar::SystemConfig *a2)
{
  kaldi::DeltaFeaturesOptions::Register((uint64_t)this + 44, (uint64_t)a2);
}

void kaldi::DeltaFeaturesOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "delta-order");
  std::string::basic_string[abi:ne180100]<0>(__p, "Order of delta computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Parameter controlling window for delta computation (actual window size for each delta order is 1 + 2*delta-window-size)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDC258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineDeltaFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineDeltaInput,std::allocator<kaldi::OnlineDeltaInput>,kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,void>((_QWORD *)(a1 + 44), &v14, v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineSimpleWaveformFe::registerParams(quasar::OnlineSimpleWaveformFe *this, quasar::SystemConfig *a2)
{
  _BYTE *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v7, (uint64_t)this + 52, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 56, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "normalize");
  std::string::basic_string[abi:ne180100]<0>(__p, "(default true) converts the native sample to floats between -1 and 1 when set");
  v4 = (char *)this + 60;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 271, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *v4 = 1;
}

void sub_1ADCDC558(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSimpleWaveformFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  double result;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _OWORD v16[17];
  uint64_t v17;

  v17 = a2;
  if (*a3)
  {
    memset(v16, 0, sizeof(v16));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"'", 1);
    v11 = *(_QWORD *)(a1 + 8);
    v10 = a1 + 8;
    v9 = v11;
    v12 = *(char *)(v10 + 23);
    if (v12 >= 0)
      v13 = v10;
    else
      v13 = v9;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(v10 + 23);
    else
      v14 = *(_QWORD *)(v10 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, v13, v14);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v16);
  }
  *(float *)(a1 + 44) = (float)*a4;
  std::allocate_shared[abi:ne180100]<kaldi::SimpleWaveformReader,std::allocator<kaldi::SimpleWaveformReader>,kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,void>(&v17, a1 + 44, (unsigned __int8 *)(a1 + 60), v16);
  result = *(double *)v16;
  *a5 = v16[0];
  return result;
}

void quasar::OnlineFbankFe::registerParams(quasar::OnlineFbankFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::FbankOptions::Register((uint64_t)this + 48, (uint64_t)a2, 0);
  std::string::basic_string[abi:ne180100]<0>(v6, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(__p, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 123, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  *((_DWORD *)this + 38) = 0;
}

void sub_1ADCDC888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::FbankOptions::Register(uint64_t a1, uint64_t a2, char a3)
{
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if ((a3 & 1) == 0)
    kaldi::FrameExtractionOptions::Register(a1 + 8, a2);
  kaldi::MelBanksOptions::Register(a1 + 64, a2);
  std::string::basic_string[abi:ne180100]<0>(v7, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add an extra dimension with energy to the FBANK output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 88, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in FBANK computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v7, a1 + 92, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 96, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy last.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 97, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "use-log-fbank");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, produce log-filterbank, else produce linear.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 98, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "cache-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache energy values.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v7, a1 + 99, __p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
}

void sub_1ADCDCB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  float v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  float v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float v23;
  float v24;
  uint64_t v25;
  __int128 v26;
  void *v27[4];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;

  v43 = a2;
  if (*a3)
  {
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    memset(v27, 0, sizeof(v27));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"'", 1);
    v18 = *(_QWORD *)(a1 + 8);
    v17 = a1 + 8;
    v16 = v18;
    v19 = *(char *)(v17 + 23);
    if (v19 >= 0)
      v20 = v17;
    else
      v20 = v16;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(v17 + 23);
    else
      v21 = *(_QWORD *)(v17 + 8);
    v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v20, v21);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v27);
  }
  v27[0] = off_1E5D29D98;
  *(_OWORD *)&v27[1] = *(_OWORD *)(a1 + 56);
  *(void **)((char *)&v27[2] + 5) = *(void **)(a1 + 69);
  if (*(char *)(a1 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v28, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
  }
  else
  {
    v28 = *(_OWORD *)(a1 + 80);
    *(_QWORD *)&v29 = *(_QWORD *)(a1 + 96);
  }
  v8 = (float)*a4;
  *(float *)(a1 + 156) = v8;
  *((_QWORD *)&v29 + 1) = *(_QWORD *)(a1 + 104);
  v9 = *(_OWORD *)(a1 + 128);
  v30 = *(_OWORD *)(a1 + 112);
  v31 = v9;
  LODWORD(v32) = *(_DWORD *)(a1 + 144);
  *(float *)&v27[1] = v8;
  HIDWORD(v29) = *(_DWORD *)(a1 + 160);
  std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>((const kaldi::FbankOptions *)v27, &v26);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 176, &v26);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
  if (*((_QWORD *)&v26 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v25 = *(_QWORD *)(a1 + 176);
  v13 = *((float *)&v29 + 3);
  if (*((float *)&v29 + 3) <= 0.0)
    v13 = *(float *)&v27[1];
  v14 = v13 / 1000.0;
  v23 = *((float *)&v27[1] + 1) * v14;
  v24 = *(float *)&v27[2] * v14;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v43, &v25, &v24, &v23, (float *)&v27[1] + 1, (int *)(a1 + 152), a1 + 156, &v26);
  *a5 = v26;
  kaldi::FbankOptions::~FbankOptions(v27);
}

void sub_1ADCDCDC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::FbankOptions::~FbankOptions((void **)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineFbankWithPitchFe::registerParams(quasar::OnlineFbankWithPitchFe *this, quasar::SystemConfig *a2)
{
  _DWORD *v4;
  void *v5[2];
  char v6;
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "fbankwithpitch");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 54, 0, (uint64_t)__p);
  if (v8 < 0)
    operator delete(__p[0]);
  kaldi::FbankWithPitchOptions::Register((uint64_t)this + 48, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(v5, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  v4 = (_DWORD *)((char *)this + 264);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)v4, (uint64_t)v5, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(v5[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  *v4 = 0;
}

void sub_1ADCDCEB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::FbankWithPitchOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::FrameExtractionOptions::Register(a1, a2);
  kaldi::MelBanksOptions::Register(a1 + 56, a2);
  kaldi::PitchExtractionOptions::Register(a1 + 80, a2);
  kaldi::ProcessPitchOptions::Register(a1 + 156, a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add an extra dimension with energy to the FBANK output.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 204, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "energy-floor");
  std::string::basic_string[abi:ne180100]<0>(__p, "Floor on energy (absolute, not relative) in FBANK computation");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 208, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "raw-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute energy before preemphasis and windowing");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 212, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "htk-compat");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, put energy last.  Warning: not sufficient to get HTK compatible features (need to change other parameters).");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 213, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-log-fbank");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, produce log-filterbank, else produce linear.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 214, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cache-energy");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache energy values.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 215, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDD168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithPitchFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, unsigned int *a4@<X3>, _OWORD *a5@<X8>)
{
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  float v11;
  float v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  __int128 v24;
  _BYTE v25[224];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;

  v29 = a2;
  if (*a3)
  {
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    memset(v25, 0, sizeof(v25));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"'", 1);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = a1 + 8;
    v14 = v16;
    v17 = *(char *)(v15 + 23);
    if (v17 >= 0)
      v18 = v15;
    else
      v18 = v14;
    if (v17 >= 0)
      v19 = *(unsigned __int8 *)(v15 + 23);
    else
      v19 = *(_QWORD *)(v15 + 8);
    v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v18, v19);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v20, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v25);
  }
  *(_OWORD *)v25 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)&v25[13] = *(_QWORD *)(a1 + 61);
  if (*(char *)(a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[24], *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&v25[24] = *(_OWORD *)(a1 + 72);
    *(_QWORD *)&v25[40] = *(_QWORD *)(a1 + 88);
  }
  *(_QWORD *)&v25[48] = *(_QWORD *)(a1 + 96);
  *(_OWORD *)&v25[152] = *(_OWORD *)(a1 + 200);
  *(_OWORD *)&v25[168] = *(_OWORD *)(a1 + 216);
  *(_OWORD *)&v25[184] = *(_OWORD *)(a1 + 232);
  *(_OWORD *)&v25[200] = *(_OWORD *)(a1 + 248);
  *(_OWORD *)&v25[88] = *(_OWORD *)(a1 + 136);
  *(_OWORD *)&v25[104] = *(_OWORD *)(a1 + 152);
  *(_OWORD *)&v25[120] = *(_OWORD *)(a1 + 168);
  *(_OWORD *)&v25[136] = *(_OWORD *)(a1 + 184);
  *(_OWORD *)&v25[56] = *(_OWORD *)(a1 + 104);
  *(_OWORD *)&v25[72] = *(_OWORD *)(a1 + 120);
  *(float *)v25 = (float)*a4;
  std::allocate_shared[abi:ne180100]<kaldi::FbankWithPitch,std::allocator<kaldi::FbankWithPitch>,kaldi::FbankWithPitchOptions &,void>((const kaldi::FbankWithPitchOptions *)v25, &v24);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 272, &v24);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v23 = *(_QWORD *)(a1 + 272);
  v11 = *(float *)&v25[52];
  if (*(float *)&v25[52] <= 0.0)
    v11 = *(float *)v25;
  v12 = v11 / 1000.0;
  v21 = *(float *)&v25[4] * v12;
  v22 = *(float *)&v25[8] * v12;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithPitch>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,void>(&v29, &v23, &v22, &v21, (float *)&v25[4], (int *)(a1 + 264), &v24);
  *a5 = v24;
  if ((v25[47] & 0x80000000) != 0)
    operator delete(*(void **)&v25[24]);
}

void sub_1ADCDD40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerFrameExtractionOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 284, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 64, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 60, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 72, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "remove-dc-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "Subtract mean from waveform on each frame");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 76, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "dither");
  std::string::basic_string[abi:ne180100]<0>(__p, "Dithering constant (0.0 means no dither)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 68, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "window-type");
  std::string::basic_string[abi:ne180100]<0>(__p, "Type of window (\"hamming\"|\"hanning\"|\"povey\"|\"rectangular\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 80, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "round-to-power-of-two");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, round window size to power of two.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 104, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, end effects will be handled by outputting only frames that completely fit in the file, and the number of frames depends on the frame-length.  If false, the number of frames depends only on the frame-shift, and we reflect the data at the ends.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 105, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDD820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerAudioAnalyticsExtractionOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 148, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 156, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 152, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis (deprecated)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 160, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "min. F0 to search for (Hz)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 164, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "max. F0 to search for (Hz)");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 168, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "soft-min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum f0, applied in soft way, must not exceed min-f0");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 172, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "penalty-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "cost factor for FO change.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 176, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "cutoff frequency for LowPass filter (Hz) ");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 180, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frequency that we down-sample the signal to. Must be more than twice lowpass-cutoff");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 184, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Smallest relative change in pitch that our algorithm measures");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 188, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increasing this factor reduces NCCF for quiet frames");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 192, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "This is useful mainly for debug; it affects how the NCCF ballast is computed.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 220, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width of lowpass filter, more gives sharper filter");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 196, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "upsample-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width when upsampling NCCF");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 200, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frames-per-chunk");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for offline pitch extraction (e.g. compute-kaldi-pitch-feats), you can set it to a small nonzero value, such as 10, for better feature compatibility with online decoding (affects energy normalization in the algorithm)");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 208, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "simulate-first-pass-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute-kaldi-pitch-feats will output features that correspond to what an online decoder would see in the first pass of decoding-- not the final version of the features, which is the default.  Relevant if --frames-per-chunk > 0");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 212, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "recompute-frame");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for online pitch extraction, or for compatibility with online pitch extraction.  A non-critical parameter; the frame at which we recompute some of the forward pointers, after revising our estimate of the signal energy."
    "  Relevant if--frames-per-chunk > 0");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 216, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames-latency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames of latency that we allow pitch tracking to introduce into the feature processing (affects output only if --frames-per-chunk > 0 and --simulate-first-pass-online=true");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 204, (uint64_t)__p, 0, 0, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "analytics-snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If this is set to false, the incomplete frames near the ending edge won't be snipped, so that the number of frames is the file size divided by the frame-shift. This makes different types of features give the same number of frames.");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 221, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-viterbi-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames over which we want to run viterbi for computing pitch.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 224, (uint64_t)__p, 0, 149, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDE198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerResamplerOptions(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "resample-freq");
  std::string::basic_string[abi:ne180100]<0>(__p, "The frequency to resample to.");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 292, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-cutoff-hz");
  std::string::basic_string[abi:ne180100]<0>(__p, "The cutoff for the filter for resampling the audio");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v6, (uint64_t)this + 296, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-num-zeros");
  std::string::basic_string[abi:ne180100]<0>(__p, "Controls sharpness of filter.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 300, (uint64_t)__p, 0, 139, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDE3D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::registerParams(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  void *v4[2];
  char v5;
  void *__p[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "fbank-with-audio-analytics");
  quasar::SystemConfig::enforceMinVersion((uint64_t)a2, 98, 0, (uint64_t)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  kaldi::FbankWithAudioAnalyticsOptions::Register((uint64_t)this + 48, (void (***)(_QWORD, void **, uint64_t, void **))a2);
  std::string::basic_string[abi:ne180100]<0>(__p, "low-watermark");
  std::string::basic_string[abi:ne180100]<0>(v4, "Low watermark (in number of frames) for audio buffer read. Ignored if <= 0.");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)this + 280, (uint64_t)v4, 0, 76, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(v4[0]);
  if (v7 < 0)
    operator delete(__p[0]);
  quasar::OnlineFbankWithAudioAnalyticsFe::registerFrameExtractionOptions(this, a2);
  quasar::OnlineFbankWithAudioAnalyticsFe::registerAudioAnalyticsExtractionOptions(this, a2);
  quasar::OnlineFbankWithAudioAnalyticsFe::registerResamplerOptions(this, a2);
  *((_DWORD *)this + 70) = 0;
}

void sub_1ADCDE518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void kaldi::FbankWithAudioAnalyticsOptions::Register(uint64_t a1, void (***a2)(_QWORD, void **, uint64_t, void **))
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  kaldi::FbankOptions::Register(a1, (uint64_t)a2, 1);
  kaldi::ProcessAudioAnalyticsOptions::Register(a1 + 180, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v6, "use-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Add extra dimensions for pitch to the FBANK output.");
  (**a2)(a2, v6, a1 + 228, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCDE5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineFbankWithAudioAnalyticsFe::finishInit(quasar::OnlineFbankWithAudioAnalyticsFe *this, quasar::SystemConfig *a2)
{
  double result;
  int v4;
  uint64_t ConfigFileVersion;

  *((_DWORD *)this + 14) = *((_DWORD *)this + 71);
  ConfigFileVersion = quasar::SystemConfig::getConfigFileVersion(a2);
  quasar::SystemConfig::Version::Version(&v4, 139, 0);
  if (quasar::SystemConfig::Version::operator<(&ConfigFileVersion, &v4))
  {
    *((_DWORD *)this + 39) = *((_DWORD *)this + 16);
    result = *((double *)this + 7);
    *(double *)((char *)this + 148) = result;
  }
  return result;
}

void quasar::OnlineFbankWithAudioAnalyticsFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  float v16;
  float v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  float v27;
  float v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  float v37;
  float v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41[2];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[9];
  __int128 v47;
  __int128 v48;
  uint64_t v49;

  v49 = a2;
  if (*a3)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    memset(v46, 0, sizeof(v46));
    v43 = 0u;
    v44 = 0u;
    v42 = 0u;
    memset(v41, 0, sizeof(v41));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"'", 1);
    v32 = *(_QWORD *)(a1 + 8);
    v31 = a1 + 8;
    v30 = v32;
    v33 = *(char *)(v31 + 23);
    if (v33 >= 0)
      v34 = v31;
    else
      v34 = v30;
    if (v33 >= 0)
      v35 = *(unsigned __int8 *)(v31 + 23);
    else
      v35 = *(_QWORD *)(v31 + 8);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, v34, v35);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v36, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v41);
  }
  v41[0] = 0uLL;
  v8 = (uint64_t *)(a1 + 304);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 304, v41);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
  if (*((_QWORD *)&v41[0] + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v41[0] + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v41[0] = 0uLL;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 320, v41);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v41[0] + 1);
  if (*((_QWORD *)&v41[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v41[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (*(_BYTE *)(a4 + 168) || *(_BYTE *)(a1 + 276))
  {
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      memset(v41, 0, sizeof(v41));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Creating FbankWithAudioAnalytics", 32);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v41);
    }
    *(_QWORD *)&v41[0] = off_1E5D29D98;
    *(__int128 *)((char *)v41 + 8) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(a1 + 69);
    if (*(char *)(a1 + 103) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v42, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v42 = *(_OWORD *)(a1 + 80);
      *(_QWORD *)&v43 = *(_QWORD *)(a1 + 96);
    }
    *((_QWORD *)&v43 + 1) = *(_QWORD *)(a1 + 104);
    v15 = *(_OWORD *)(a1 + 128);
    v44 = *(_OWORD *)(a1 + 112);
    v45 = v15;
    LODWORD(v46[0]) = *(_DWORD *)(a1 + 144);
    *(_QWORD *)&v41[0] = &unk_1E5D2ADB0;
    *(_OWORD *)((char *)&v46[5] + 4) = *(_OWORD *)(a1 + 228);
    *(_OWORD *)((char *)&v46[6] + 4) = *(_OWORD *)(a1 + 244);
    BYTE4(v46[8]) = *(_BYTE *)(a1 + 276);
    *(_OWORD *)((char *)&v46[1] + 4) = *(_OWORD *)(a1 + 164);
    *(_OWORD *)((char *)&v46[2] + 4) = *(_OWORD *)(a1 + 180);
    *(_OWORD *)((char *)&v46[3] + 4) = *(_OWORD *)(a1 + 196);
    *(_OWORD *)((char *)&v46[4] + 4) = *(_OWORD *)(a1 + 212);
    *(_OWORD *)((char *)v46 + 4) = *(_OWORD *)(a1 + 148);
    *(_OWORD *)((char *)&v46[7] + 4) = *(_OWORD *)(a1 + 260);
    v16 = (float)*(unsigned int *)a4;
    *((float *)v41 + 2) = v16;
    HIDWORD(v43) = *(_DWORD *)(a1 + 292);
    v17 = *((float *)&v43 + 3);
    *(float *)(a1 + 288) = v16;
    if (v17 > 0.0)
      v16 = v17;
    *((float *)v46 + 1) = v16;
    std::allocate_shared[abi:ne180100]<kaldi::FbankWithAudioAnalytics,std::allocator<kaldi::FbankWithAudioAnalytics>,kaldi::FbankWithAudioAnalyticsOptions &,void>((const kaldi::FbankWithAudioAnalyticsOptions *)v41, &v40);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 320, &v40);
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v39 = *(_QWORD *)(a1 + 320);
    v21 = *((float *)&v43 + 3);
    if (*((float *)&v43 + 3) <= 0.0)
      v21 = *((float *)v41 + 2);
    v22 = v21 / 1000.0;
    v37 = *((float *)v41 + 3) * v22;
    v38 = *(float *)&v41[1] * v22;
    std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v49, &v39, &v38, &v37, (float *)v41 + 3, (int *)(a1 + 280), a1 + 288, &v40);
    *a5 = v40;
    kaldi::FbankOptions::~FbankOptions((void **)v41);
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      memset(v46, 0, sizeof(v46));
      v43 = 0u;
      v44 = 0u;
      v42 = 0u;
      memset(v41, 0, sizeof(v41));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"Creating Fbank", 14);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v41);
    }
    *(_QWORD *)&v41[0] = off_1E5D29D98;
    *(__int128 *)((char *)v41 + 8) = *(_OWORD *)(a1 + 56);
    *(_QWORD *)((char *)&v41[1] + 5) = *(_QWORD *)(a1 + 69);
    if (*(char *)(a1 + 103) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v42, *(const std::string::value_type **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v42 = *(_OWORD *)(a1 + 80);
      *(_QWORD *)&v43 = *(_QWORD *)(a1 + 96);
    }
    *((_QWORD *)&v43 + 1) = *(_QWORD *)(a1 + 104);
    v23 = *(_OWORD *)(a1 + 128);
    v44 = *(_OWORD *)(a1 + 112);
    v45 = v23;
    LODWORD(v46[0]) = *(_DWORD *)(a1 + 144);
    *((float *)v41 + 2) = (float)*(unsigned int *)a4;
    HIDWORD(v43) = *(_DWORD *)(a1 + 292);
    *(_DWORD *)(a1 + 288) = DWORD2(v41[0]);
    std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>((const kaldi::FbankOptions *)v41, &v40);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a1 + 304, &v40);
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v39 = *v8;
    v27 = *((float *)&v43 + 3);
    if (*((float *)&v43 + 3) <= 0.0)
      v27 = *((float *)v41 + 2);
    v28 = v27 / 1000.0;
    v37 = *((float *)v41 + 3) * v28;
    v38 = *(float *)&v41[1] * v28;
    std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>(&v49, &v39, &v38, &v37, (float *)v41 + 3, (int *)(a1 + 280), a1 + 288, &v40);
    *a5 = v40;
    kaldi::FbankOptions::~FbankOptions((void **)v41);
  }
}

void sub_1ADCDEBFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

double quasar::OnlineLdaFe::registerParams(quasar::OnlineLdaFe *this, quasar::SystemConfig *a2)
{
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "lda-matrix-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "LDA matrix filename");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 76, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *(_QWORD *)&result = 0x400000004;
  *((_QWORD *)this + 9) = 0x400000004;
  return result;
}

void sub_1ADCDED90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineLdaFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  quasar::readMatrixFile((uint64_t)&this[6], this + 10);
}

double quasar::OnlineLdaFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineLdaInput,std::allocator<kaldi::OnlineLdaInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,void>(&v14, a1 + 80, (unsigned int *)(a1 + 72), (unsigned int *)(a1 + 76), v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineMfccFe::registerParams(quasar::OnlineMfccFe *this, quasar::SystemConfig *a2)
{
  kaldi::MfccOptions::Register((uint64_t)this + 48, (uint64_t)a2);
}

void quasar::OnlineMfccFe::finishInit(quasar::OnlineMfccFe *this, quasar::SystemConfig *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  std::allocate_shared[abi:ne180100]<kaldi::Mfcc,std::allocator<kaldi::Mfcc>,kaldi::MfccOptions &,void>((quasar::OnlineMfccFe *)((char *)this + 48), &v6);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 152, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

double quasar::OnlineMfccFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _OWORD *a4@<X8>)
{
  float v5;
  float v6;
  float v7;
  double result;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  float v18;
  float v19;
  uint64_t v20;
  _OWORD v21[17];
  uint64_t v22;

  v22 = a2;
  if (*a3)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"'", 1);
    v13 = *(_QWORD *)(a1 + 8);
    v12 = a1 + 8;
    v11 = v13;
    v14 = *(char *)(v12 + 23);
    if (v14 >= 0)
      v15 = v12;
    else
      v15 = v11;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(v12 + 23);
    else
      v16 = *(_QWORD *)(v12 + 8);
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v15, v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v17, "' can only occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v21);
  }
  v20 = *(_QWORD *)(a1 + 152);
  v5 = *(float *)(a1 + 100);
  if (v5 <= 0.0)
    v5 = *(float *)(a1 + 48);
  v6 = v5 / 1000.0;
  v7 = *(float *)(a1 + 56) * v6;
  v18 = *(float *)(a1 + 52) * v6;
  v19 = v7;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Mfcc>,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,void>(&v22, &v20, &v19, &v18, (float *)(a1 + 52), v21);
  result = *(double *)v21;
  *a4 = v21[0];
  return result;
}

void quasar::OnlineNnetForwardFe::registerParams(quasar::OnlineNnetForwardFe *this, quasar::SystemConfig *a2)
{
  char *v4;
  _BYTE *v5;
  _DWORD *v6;
  _QWORD *v7;
  _DWORD *v8;
  _BYTE *v9;
  _BYTE *v10;
  _DWORD *v11;
  _BYTE *v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  v4 = (char *)this + 208;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 208, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v18, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  v15 = (char *)this + 98;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 98, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  v14 = (char *)this + 96;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  v5 = (char *)this + 97;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 97, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  v6 = (_DWORD *)((char *)this + 100);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 100, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 104, (uint64_t)__p, 0, 75, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "batch-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context to prepend to the batch as extra rows");
  v7 = (_QWORD *)((char *)this + 128);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 128, (uint64_t)__p, 0, 148, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "batch-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context to append to the batch as extra rows");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 132, (uint64_t)__p, 0, 148, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "strict-batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Batch size applied just for this extractor. Ignored if <= 0. Unlike feature-read.batch-size, which is just a hint, this batch size is so strict that even the last batch will be padded to exactly this size with copies of the last frame if the last batch is too small. (The padding is removed from the output). Excludes context frames (actual batch size is strict-batch-size + batch-left-context + batch-right-context).");
  v8 = (_DWORD *)((char *)this + 136);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 136, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  v9 = (char *)this + 168;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 168, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specified");
  v10 = (char *)this + 169;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 169, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "append-context-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the context matrix along with the input. Ignored if <= 0Add the specified amount of rows as context to the input features and one additional row which has the batch number. The context is obtained from last N rows of output of the previous inference.Context is ignored by the model for the first inference i.e. batch num is 0valid only when strict-batch-size is also specified");
  v11 = (_DWORD *)((char *)this + 172);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v18, (uint64_t)this + 172, (uint64_t)__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "strict-batch-sizes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Defines an array of 3 sizes - [ModelInterfaceSize, FirstBatchSize, SubsequentBatchSize]ModelInterfaceSize: defines the size of input expected by the modelFirstBatchSize: defines the batch size used for 1st inference, will be padded with zeros                 if less than than ModelInterfaceSizeSubsequentBatchSize: defines the batch size used for the rest of the inferences, will be                     padded with zeros if less than than ModelInterfaceSize(The padding is removed from the output)This feature is added support streaming Acoustic FTM and Hey Siri checker using the same model");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v18, (uint64_t)this + 184, (uint64_t)__p, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "input-feats-mask");
  std::string::basic_string[abi:ne180100]<0>(__p, "define whether masking is in the input tensorWhen this is define, features tensors with on the effective frames will be used for model compute and previous contexts will also be used as inputThis feature is added supporting streaming Acoustic FTM for aftm_feats_mask_block, input_buffer, mask_buffer, accum_embed, accum_weight, position_encoding_offset as input tensor");
  v12 = (char *)this + 176;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)this + 176, (uint64_t)__p, 0, 255, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  std::string::basic_string[abi:ne180100]<0>(v18, "single-row-output");
  std::string::basic_string[abi:ne180100]<0>(__p, "define whether the output from forward nnet will is single row or notstrict-batch-sizes needs to be enabled for this option");
  v13 = (char *)this + 177;
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v18, (uint64_t)v13, (uint64_t)__p, 0, 256, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  *v15 = 0;
  *v14 = 0;
  *v5 = 0;
  *v6 = -2;
  *v7 = 0;
  *v8 = 0;
  *v9 = 0;
  *v10 = 0;
  *v11 = 0;
  *v12 = 0;
  *v13 = 0;
}

void sub_1ADCDF848(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardFe::finishInit(quasar::OnlineNnetForwardFe *this, quasar::SystemConfig *a2)
{
  std::string *ModelLoader;
  uint64_t v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  std::__shared_weak_count *v10;
  void *v11;
  int v12;
  int v13;
  unsigned __int8 isKeepANEModelLoadedEnabled;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  int v31;
  char *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  std::__shared_weak_count *v41;
  void *v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  ModelLoader = (std::string *)quasar::SystemConfig::getModelLoader(a2);
  if (*((char *)this + 207) < 0)
    v4 = *((_QWORD *)this + 24);
  else
    v4 = *((unsigned __int8 *)this + 207);
  if (!v4)
    goto LABEL_14;
  if (*((_DWORD *)this + 34))
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "cannot set both strict-batch-size & strict-batch-sizes");
    goto LABEL_74;
  }
  kaldi::SplitStringToIntegers<int>((uint64_t)this + 184, ",", 0, (std::vector<unsigned int> *)this + 6);
  v5 = (int *)*((_QWORD *)this + 18);
  if (*((_QWORD *)this + 19) - (_QWORD)v5 != 12)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "strict-batch-sizes needs 3 sizes");
LABEL_74:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v6 = *v5;
  v7 = v5[1];
  v8 = v5[2];
  if (v7 > v8)
    v8 = v7;
  if (v6 < v8 && quasar::gLogLevel >= 4)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Model input size should greater than batch sizes in most cases", 62);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
LABEL_14:
  quasar::ModelLoader::requestEmbeddedMlock(ModelLoader, (unsigned __int8 *)this + 48, __p, 1.0);
  v11 = __p[0];
  v10 = (std::__shared_weak_count *)__p[1];
  v44 = __p[0];
  v45 = (std::__shared_weak_count *)__p[1];
  v12 = *((unsigned __int8 *)this + 98);
  v13 = *((unsigned __int8 *)this + 96);
  isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 48);
  v42 = v11;
  v43 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  quasar::ModelLoader::readFeedForwardNetwork(ModelLoader, (uint64_t)this + 48, v12 != 0, v13 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v42, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 632, (__int128 *)__p);
  v17 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v18 = (unint64_t *)((char *)__p[1] + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v43;
  if (v43)
  {
    v21 = (unint64_t *)&v43->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  v23 = (char *)this + 72;
  if (!*((_BYTE *)this + 98))
  {
    if ((*((_BYTE *)this + 95) & 0x80) != 0)
    {
      if (!*((_QWORD *)this + 10))
        goto LABEL_39;
    }
    else if (!*((_BYTE *)this + 95))
    {
      goto LABEL_39;
    }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 256, (uint64_t)v23);
    goto LABEL_39;
  }
  if ((*((_BYTE *)this + 95) & 0x80) != 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_39;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_39;
  }
  fst::FstReadOptions::FstReadOptions(__p, v23, 0, 0, 0);
  LODWORD(v49) = 2;
  kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 256, (uint64_t)__p);
  if (SBYTE7(v47) < 0)
    operator delete(__p[0]);
LABEL_39:
  if (*((char *)this + 127) < 0)
  {
    if (!*((_QWORD *)this + 14))
      goto LABEL_61;
  }
  else if (!*((_BYTE *)this + 127))
  {
    goto LABEL_61;
  }
  v40 = 0;
  v41 = 0;
  quasar::ModelLoader::readNeuralNetwork(ModelLoader, (uint64_t)this + 104, 0, 0, 1, &v40, (uint64_t *)__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 648, (__int128 *)__p);
  v24 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v25 = (unint64_t *)((char *)__p[1] + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v41;
  if (v41)
  {
    v28 = (unint64_t *)&v41->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read model file for computing silence posteriors=", 49);
    v31 = *((char *)this + 127);
    if (v31 >= 0)
      v32 = (char *)this + 104;
    else
      v32 = (char *)*((_QWORD *)this + 13);
    if (v31 >= 0)
      v33 = *((unsigned __int8 *)this + 127);
    else
      v33 = *((_QWORD *)this + 14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
LABEL_61:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 240, (__int128 *)__p);
  v34 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v35 = (unint64_t *)((char *)__p[1] + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v45;
  if (v45)
  {
    v38 = (unint64_t *)&v45->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void quasar::OnlineNnetForwardFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  _BYTE *v6;
  const void *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t Component;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **v21;
  char *v22;
  char *v23;
  char **v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _DWORD *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  int v33;
  char *v34;
  char *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  int v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  std::__shared_weak_count *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;

  if (!*a2)
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
    v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"'", 1);
    v60 = *(_QWORD *)(a1 + 8);
    v59 = a1 + 8;
    v58 = v60;
    v61 = *(char *)(v59 + 23);
    if (v61 >= 0)
      v62 = v59;
    else
      v62 = v58;
    if (v61 >= 0)
      v63 = *(unsigned __int8 *)(v59 + 23);
    else
      v63 = *(_QWORD *)(v59 + 8);
    v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, v62, v63);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v64, "' cannot occur at the first stage of feature-extract");
    goto LABEL_85;
  }
  v6 = (_BYTE *)(a1 + 97);
  if (*(_BYTE *)(a1 + 97) && *(_BYTE *)(a1 + 96))
  {
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v72, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_85;
  }
  if ((*(char *)(a1 + 231) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(a1 + 231))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_QWORD *)(a1 + 216))
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 96) | *(unsigned __int8 *)(a1 + 97))
      goto LABEL_9;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v72 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
    v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v65, "--no-softmax or --apply-log");
LABEL_85:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v72);
  }
LABEL_9:
  v7 = *(const void **)(a1 + 632);
  if (v7
  {
    v9 = *(std::__shared_weak_count **)(a1 + 640);
    v70 = v8;
    v71 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (*v6)
    {
      Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v8 + 1), ((v8[2] - v8[1]) >> 3) - 1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) != 513)
      {
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v81 = 0u;
        v82 = 0u;
        v79 = 0u;
        v80 = 0u;
        v77 = 0u;
        v78 = 0u;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        v72 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v72);
        v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v72, (uint64_t)"Used --apply-log=true, but nnet ", 32);
        v16 = *(_QWORD *)(a1 + 48);
        v15 = a1 + 48;
        v14 = v16;
        v17 = *(char *)(v15 + 23);
        if (v17 >= 0)
          v18 = v15;
        else
          v18 = v14;
        if (v17 >= 0)
          v19 = *(unsigned __int8 *)(v15 + 23);
        else
          v19 = *(_QWORD *)(v15 + 8);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v18, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" does not have <softmax> as last component!", 43);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v72);
      }
    }
  }
  else
  {
    v70 = 0;
    v71 = 0;
  }
  v22 = *(char **)(a1 + 144);
  v21 = (void **)(a1 + 144);
  if (v22 == *(char **)(a1 + 152))
  {
    v24 = (char **)(a1 + 160);
    v23 = *(char **)(a1 + 160);
    if (v22 >= v23)
    {
      v26 = v23 - v22;
      v27 = (v23 - v22) >> 1;
      if (v27 <= 1)
        v27 = 1;
      if (v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v27;
      v29 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v28);
      v30 = *(char **)(a1 + 144);
      v31 = *(char **)(a1 + 152);
      v23 = (char *)&v29[v32];
      *v29 = *(_DWORD *)(a1 + 136);
      v25 = (char *)(v29 + 1);
      while (v31 != v30)
      {
        v33 = *((_DWORD *)v31 - 1);
        v31 -= 4;
        *--v29 = v33;
      }
      *(_QWORD *)(a1 + 144) = v29;
      *(_QWORD *)(a1 + 152) = v25;
      *(_QWORD *)(a1 + 160) = v23;
      if (v30)
      {
        operator delete(v30);
        v23 = *v24;
      }
    }
    else
    {
      *(_DWORD *)v22 = *(_DWORD *)(a1 + 136);
      v25 = v22 + 4;
    }
    *(_QWORD *)(a1 + 152) = v25;
    if (v25 >= v23)
    {
      v35 = (char *)*v21;
      v36 = (v25 - (_BYTE *)*v21) >> 2;
      v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62)
        goto LABEL_86;
      v38 = v23 - v35;
      if (v38 >> 1 > v37)
        v37 = v38 >> 1;
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
        v39 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
      {
        v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v39);
        v35 = *(char **)(a1 + 144);
        v25 = *(char **)(a1 + 152);
      }
      else
      {
        v40 = 0;
      }
      v41 = &v40[4 * v36];
      v23 = &v40[4 * v39];
      *(_DWORD *)v41 = *(_DWORD *)(a1 + 136);
      v34 = v41 + 4;
      while (v25 != v35)
      {
        v42 = *((_DWORD *)v25 - 1);
        v25 -= 4;
        *((_DWORD *)v41 - 1) = v42;
        v41 -= 4;
      }
      *(_QWORD *)(a1 + 144) = v41;
      *(_QWORD *)(a1 + 152) = v34;
      *(_QWORD *)(a1 + 160) = v23;
      if (v35)
      {
        operator delete(v35);
        v23 = *v24;
      }
    }
    else
    {
      *(_DWORD *)v25 = *(_DWORD *)(a1 + 136);
      v34 = v25 + 4;
    }
    *(_QWORD *)(a1 + 152) = v34;
    if (v34 < v23)
    {
      *(_DWORD *)v34 = *(_DWORD *)(a1 + 136);
      v43 = v34 + 4;
LABEL_69:
      *(_QWORD *)(a1 + 152) = v43;
      goto LABEL_70;
    }
    v44 = (char *)*v21;
    v45 = (v34 - (_BYTE *)*v21) >> 2;
    v46 = v45 + 1;
    if (!((unint64_t)(v45 + 1) >> 62))
    {
      v47 = v23 - v44;
      if (v47 >> 1 > v46)
        v46 = v47 >> 1;
      if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
        v48 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v48 = v46;
      if (v48)
      {
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 160, v48);
        v44 = *(char **)(a1 + 144);
        v34 = *(char **)(a1 + 152);
      }
      else
      {
        v49 = 0;
      }
      v50 = &v49[4 * v45];
      v51 = &v49[4 * v48];
      *(_DWORD *)v50 = *(_DWORD *)(a1 + 136);
      v43 = v50 + 4;
      while (v34 != v44)
      {
        v52 = *((_DWORD *)v34 - 1);
        v34 -= 4;
        *((_DWORD *)v50 - 1) = v52;
        v50 -= 4;
      }
      *(_QWORD *)(a1 + 144) = v50;
      *(_QWORD *)(a1 + 152) = v43;
      *(_QWORD *)(a1 + 160) = v51;
      if (v44)
        operator delete(v44);
      goto LABEL_69;
    }
LABEL_86:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_70:
  v53 = *a2;
  v68 = a1 + 256;
  v69 = v53;
  v67 = *(_QWORD *)(a1 + 240);
  v66 = *(_QWORD *)(a1 + 648);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardInput,std::allocator<kaldi::OnlineNnetForwardInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,void>(&v69, &v68, (_QWORD *)(a1 + 632), (__int128 *)(a1 + 208), &v67, (char *)(a1 + 97), (char *)(a1 + 96), &v72, &v66, (int *)(a1 + 128), (int *)(a1 + 132), a1 + 144, (char *)(a1 + 168), (char *)(a1 + 169), (int *)(a1 + 172), (char *)(a1 + 176), (char *)(a1 + 177));
  *a3 = v72;
  v54 = v71;
  if (v71)
  {
    v55 = (unint64_t *)&v71->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
}

void quasar::SpeechActivityDetectorFe::registerParams(quasar::SpeechActivityDetectorFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of artificial silence, to reach the strict-batch-size requirement");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 132, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "num-silence-padding-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "pad this many artifical silence frames at the end of audio");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v6, (uint64_t)this + 128, (uint64_t)__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the AM for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 80, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "silence-vector-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "the artifical silence fbank that will be padded to the end of the audio to alleviate CTC's delayed decision");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 104, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "align-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "align sad score with fbanks");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 133, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE0620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::SpeechActivityDetectorFe::finishInit(quasar::SpeechActivityDetectorFe *this, quasar::SystemConfig *a2)
{
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  quasar::ModelLoader *ModelLoader;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int8 IsANEReadyOnLowEnd;
  BOOL isKeepANEModelLoadedEnabled;
  __int128 v20;
  __int128 v21[17];

  if (*((char *)this + 127) < 0)
  {
    if (!*((_QWORD *)this + 14))
      goto LABEL_13;
  }
  else if (!*((_BYTE *)this + 127))
  {
    goto LABEL_13;
  }
  v4 = operator new(0x30uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &unk_1E5D41D10;
  v4[4] = 0;
  v4[5] = 0;
  *((_QWORD *)&v21[0] + 1) = v4;
  v4[3] = 0;
  *(_QWORD *)&v21[0] = v4 + 3;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 64, v21);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)&v20 = 0;
  kaldi::Input::OpenInternal(&v20, (uint64_t)this + 104, 0, 0);
  v8 = *((_QWORD *)this + 8);
  v9 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v20);
  kaldi::Vector<float>::Read(v8, v9, 0, 0);
  kaldi::Input::Close((kaldi::Input *)&v20);
  if (quasar::gLogLevel >= 4)
  {
    memset(v21, 0, sizeof(v21));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Read a silence vector of ", 25);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" elements for am-fusion", 23);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)v21);
  }
  kaldi::Input::~Input((kaldi::Input *)&v20);
LABEL_13:
  ModelLoader = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(a2);
  quasar::ModelLoader::getModelInitializeContext((uint64_t)ModelLoader, &v20);
  isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 80);
  IsANEReadyOnLowEnd = quasar::ModelLoader::milIsANEReadyOnLowEnd(ModelLoader);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,void>((uint64_t)this + 80, &v20, (unsigned __int8 *)&isKeepANEModelLoadedEnabled, &IsANEReadyOnLowEnd, v21);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 48, v21);
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v21[0] + 1);
  if (*((_QWORD *)&v21[0] + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v21[0] + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1ADCE08D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

double quasar::SpeechActivityDetectorFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::SpeechActivityDetector,std::allocator<kaldi::SpeechActivityDetector>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,void>(&v14, (unsigned int *)(a1 + 128), (unsigned __int8 *)(a1 + 132), a1 + 48, a1 + 64, (unsigned __int8 *)(a1 + 133), v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::AmFusionEncoderFe::registerParams(quasar::AmFusionEncoderFe *this, quasar::SystemConfig *a2)
{
  std::string *v4;
  __int128 v5;
  quasar::PTree *PtreeOptional;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  double Double;
  std::string __p;
  void *v13[2];
  std::string::size_type v14;

  std::string::basic_string[abi:ne180100]<0>(v13, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Zero pad the features, instead of artificial silence, to reach the strict-batch-size requirement");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v13, (uint64_t)this + 268, (uint64_t)&__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "num-silence-padding-frames");
  std::string::basic_string[abi:ne180100]<0>(&__p, "pad this many artifical silence frames at the end of audio");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v13, (uint64_t)this + 264, (uint64_t)&__p, 0, 207, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "model-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the AM for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 112, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "fusion-model-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the AM for for realigned-am-fusion-decoder");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 136, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "silence-vector-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "the artifical silence fbank that will be padded to the end of the audio to alleviate CTC's delayed decision");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 160, (uint64_t)&__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "fusion-am-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fusion: Acoustic model (transition model) filename.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 184, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "fusion-sil-phone-csl-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Fusion: File containing colon-separated list of silence phones.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 208, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "context-embedding-nobias-file");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Contextual biasing: File contains context embedding for nobias phrase");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 232, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "biasing-gating-threshold");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Threshold for the gating in gated contextual biasing model");
  quasar::SystemConfig::Register<float>((uint64_t)a2, (const void **)v13, (uint64_t)this + 572, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  std::string::basic_string[abi:ne180100]<0>(v13, "biasing-gating-threshold-map");
  std::string::basic_string[abi:ne180100]<0>(&__p, "Biasing gating threshold configuration. It defines the mapping from task to gating threshold");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v13, (uint64_t)this + 576, (uint64_t)&__p, 0, 261, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  quasar::SystemConfig::getPrefix(a2, &__p);
  v4 = std::string::append(&__p, "biasing-gating-threshold-map");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v14 = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)v13 = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = (quasar::PTree *)quasar::SystemConfig::getPtreeOptional((uint64_t)a2, (uint64_t)v13);
  if (SHIBYTE(v14) < 0)
    operator delete(v13[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (PtreeOptional)
  {
    v7 = quasar::PTree::begin(PtreeOptional);
    v8 = quasar::PTree::end(PtreeOptional);
    if (v7 != v8)
    {
      v9 = v8;
      v10 = (uint64_t **)((char *)this + 600);
      do
      {
        Double = quasar::PTree::getDouble((quasar::PTree *)(v7 + 24));
        v13[0] = (void *)v7;
        *((double *)std::__tree<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::__map_value_compare<std::string,std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,quasar::LmeDataFactoryBase::Word const*>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v10, (const void **)v7, (uint64_t)&std::piecewise_construct, (__int128 **)v13)+ 7) = Double;
        v7 += 88;
      }
      while (v7 != v9);
    }
  }
}

void sub_1ADCE0F38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

void quasar::AmFusionEncoderFe::finishInit(quasar::AmFusionEncoderFe *this, quasar::SystemConfig *a2)
{
  quasar::ModelLoader *ModelLoader;
  uint64_t SpeechModelInfo;
  const quasar::SystemConfig *v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  void (***v20)(_QWORD, uint64_t, _QWORD, _QWORD);
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *end;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  const std::locale::facet *v36;
  unsigned __int8 v37;
  std::__shared_weak_count *v38;
  _QWORD *v39;
  int v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  _QWORD *v48;
  void *p_p;
  uint64_t v50;
  __int128 v51;
  void *__p;
  _BYTE *v53;
  uint64_t v54;
  std::vector<unsigned int> v55;
  unsigned __int8 IsANEReadyOnLowEnd;
  _BYTE __str[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  ModelLoader = (quasar::ModelLoader *)quasar::SystemConfig::getModelLoader(a2);
  quasar::SystemConfig::getLmeAssetPath(a2, (std::string *)__str);
  std::string::operator=((std::string *)((char *)this + 544), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  SpeechModelInfo = quasar::SystemConfig::getSpeechModelInfo(a2);
  quasar::SpeechModelInfo::operator=((uint64_t)this + 272, SpeechModelInfo);
  quasar::SystemConfig::getLmeAssetPath(a2, (std::string *)__str);
  std::string::operator=((std::string *)((char *)this + 544), (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  *((_BYTE *)this + 568) = quasar::QuasarG2PFactory::isPronGuesserWordpiece(a2, v6);
  if (*((char *)this + 183) < 0)
    v7 = *((_QWORD *)this + 21);
  else
    v7 = *((unsigned __int8 *)this + 183);
  if (v7)
  {
    v8 = operator new(0x30uLL);
    v8[1] = 0;
    v8[2] = 0;
    *v8 = &unk_1E5D41D10;
    v8[4] = 0;
    v8[5] = 0;
    *(_QWORD *)&__str[8] = v8;
    v8[3] = 0;
    *(_QWORD *)__str = v8 + 3;
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 80, (__int128 *)__str);
    v9 = *(std::__shared_weak_count **)&__str[8];
    if (*(_QWORD *)&__str[8])
    {
      v10 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v55.__begin_ = 0;
    kaldi::Input::OpenInternal(&v55, (uint64_t)this + 160, 0, 0);
    v12 = *((_QWORD *)this + 10);
    v13 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)&v55);
    kaldi::Vector<float>::Read(v12, v13, 0, 0);
    kaldi::Input::Close((kaldi::Input *)&v55);
    if (quasar::gLogLevel >= 4)
    {
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v60 = 0u;
      v58 = 0u;
      v59 = 0u;
      memset(__str, 0, sizeof(__str));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Read a silence vector of ", 25);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" elements for am-fusion", 23);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
    }
    kaldi::Input::~Input((kaldi::Input *)&v55);
  }
  if (*((char *)this + 255) < 0)
  {
    if (!*((_QWORD *)this + 30))
      goto LABEL_29;
  }
  else if (!*((_BYTE *)this + 255))
  {
    goto LABEL_29;
  }
  v15 = operator new(0x48uLL);
  v15[2] = 0;
  *v15 = &unk_1E5D422F8;
  v15[1] = 0;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  *((_BYTE *)v15 + 64) = 0;
  *(_QWORD *)&__str[8] = v15;
  v15[3] = &unk_1E5D34170;
  *(_QWORD *)__str = v15 + 3;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 96, (__int128 *)__str);
  v16 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v17 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  LOBYTE(__p) = 0;
  v55.__begin_ = 0;
  kaldi::Input::OpenInternal(&v55, (uint64_t)this + 232, 1, 0);
  v19 = kaldi::Input::Stream((kaldi::Input *)&v55);
  kaldi::InitKaldiInputStream(v19, &__p);
  v20 = (void (***)(_QWORD, uint64_t, _QWORD, _QWORD))*((_QWORD *)this + 12);
  v21 = kaldi::Input::Stream((kaldi::Input *)&v55);
  (**v20)(v20, v21, __p, 0);
  kaldi::Input::Close((kaldi::Input *)&v55);
  if (quasar::gLogLevel >= 4)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Read backoff context embedding for contextual biasing", 53);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__str);
  }
  kaldi::Input::~Input((kaldi::Input *)&v55);
LABEL_29:
  quasar::ModelLoader::getModelInitializeContext((uint64_t)ModelLoader, &v55);
  LOBYTE(v51) = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 112);
  IsANEReadyOnLowEnd = quasar::ModelLoader::milIsANEReadyOnLowEnd(ModelLoader);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,void>((uint64_t)this + 112, (__int128 *)&v55, (unsigned __int8 *)&v51, &IsANEReadyOnLowEnd, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 48, (__int128 *)__str);
  v22 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v23 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  end = (std::__shared_weak_count *)v55.__end_;
  if (v55.__end_)
  {
    v26 = (unint64_t *)(v55.__end_ + 2);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))end->__on_zero_shared)(end);
      std::__shared_weak_count::__release_weak(end);
    }
  }
  if (*((char *)this + 159) < 0)
  {
    if (!*((_QWORD *)this + 18))
      goto LABEL_55;
  }
  else if (!*((_BYTE *)this + 159))
  {
    goto LABEL_55;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"fusion-model-file is for realign-am-fusion-decoder; ",
            52);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"make sure you understand what happens before you specify this field.", 68);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
  }
  quasar::ModelLoader::getModelInitializeContext((uint64_t)ModelLoader, &v55);
  std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,void>((uint64_t)this + 136, (__int128 *)&v55, __str);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 64, (__int128 *)__str);
  v29 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v30 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (std::__shared_weak_count *)v55.__end_;
  if (v55.__end_)
  {
    v33 = (unint64_t *)(v55.__end_ + 2);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
LABEL_55:
  memset(&v55, 0, sizeof(v55));
  if (*((char *)this + 231) < 0)
  {
    if (!*((_QWORD *)this + 27))
      goto LABEL_63;
  }
  else if (!*((_BYTE *)this + 231))
  {
    goto LABEL_63;
  }
  IsANEReadyOnLowEnd = 0;
  kaldi::Input::Input(&v51, (char *)this + 208, &IsANEReadyOnLowEnd);
  __p = 0;
  v53 = 0;
  v54 = 0;
  v35 = (_QWORD *)kaldi::Input::Stream((kaldi::Input *)&v51);
  std::ios_base::getloc((const std::ios_base *)((char *)v35 + *(_QWORD *)(*v35 - 24)));
  v36 = std::locale::use_facet((const std::locale *)__str, MEMORY[0x1E0DE4A90]);
  v37 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v36->__vftable[2].~facet_0)(v36, 10);
  std::locale::~locale((std::locale *)__str);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v35, (uint64_t)&__p, v37);
  if ((kaldi::SplitStringToIntegers<int>((uint64_t)&__p, ":", 1, &v55) & 1) == 0)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Invalid silence-phones string ", 30);
    if (v54 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v54 >= 0)
      v50 = HIBYTE(v54);
    else
      v50 = (uint64_t)v53;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)p_p, v50);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__str);
  }
  if (SHIBYTE(v54) < 0)
    operator delete(__p);
  kaldi::Input::~Input((kaldi::Input *)&v51);
LABEL_63:
  v51 = 0uLL;
  if (*((char *)this + 207) < 0)
  {
    if (*((_QWORD *)this + 24))
      goto LABEL_65;
LABEL_71:
    v38 = 0;
    goto LABEL_79;
  }
  if (!*((_BYTE *)this + 207))
    goto LABEL_71;
LABEL_65:
  quasar::ModelLoader::readTransitionModel((uint64_t)ModelLoader, (unsigned __int8 *)this + 184, 0, (uint64_t *)__str);
  v38 = *(std::__shared_weak_count **)&__str[8];
  v51 = *(_OWORD *)__str;
  if (v55.__begin_ == v55.__end_ || !*(_QWORD *)__str)
    goto LABEL_79;
  __p = 0;
  v53 = 0;
  v54 = 0;
  if (!kaldi::GetPdfsForPhones(*(uint64_t *)__str, &v55, (int **)&__p))
  {
    if (quasar::gLogLevel < 5)
      goto LABEL_77;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"GetPdfsForPhones failed", 23);
    goto LABEL_76;
  }
  if (v53 - (_BYTE *)__p == 4)
  {
    *((_DWORD *)this + 64) = *(_DWORD *)__p;
    goto LABEL_77;
  }
  if (quasar::gLogLevel >= 5)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Unexpected number of pdfs: ", 27);
    std::ostream::operator<<();
LABEL_76:
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
  }
LABEL_77:
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
LABEL_79:
  if (quasar::gLogLevel >= 5)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v60 = 0u;
    v58 = 0u;
    v59 = 0u;
    memset(__str, 0, sizeof(__str));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__str);
    v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__str, (uint64_t)"Frontend ", 9);
    v40 = *((char *)this + 31);
    if (v40 >= 0)
      v41 = (char *)this + 8;
    else
      v41 = (char *)*((_QWORD *)this + 1);
    if (v40 >= 0)
      v42 = *((unsigned __int8 *)this + 31);
    else
      v42 = *((_QWORD *)this + 2);
    v43 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v41, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" fusionTransModel ", 18);
    v44 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" silencePhoneVector ", 20);
    v45 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" silenceMonophone ", 18);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__str);
  }
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v47 = __ldaxr(p_shared_owners);
    while (__stlxr(v47 - 1, p_shared_owners));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  if (v55.__begin_)
  {
    v55.__end_ = v55.__begin_;
    operator delete(v55.__begin_);
  }
}

void sub_1ADCE1910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,std::locale a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&a22);
  kaldi::Input::~Input((kaldi::Input *)&a18);
  _Unwind_Resume(a1);
}

void sub_1ADCE19CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  JUMPOUT(0x1ADCE19D8);
}

uint64_t quasar::AmFusionEncoderFe::readAndCheckLmeData(uint64_t a1, uint64_t **a2, uint64_t a3, int a4)
{
  uint64_t *v4;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  _QWORD *v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  std::string *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  BOOL v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  std::string *v67;
  std::string::size_type size;
  _QWORD *v69;
  _QWORD *v70;
  std::string *v71;
  std::string::size_type v72;
  _QWORD *v73;
  _QWORD *v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  std::string v79;
  std::string v80;
  std::string v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;

  v4 = *a2;
  if (!*a2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container ", 14);
      v16 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Reading LME container ", 22);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" for user ", 10);
    v10 = *((char *)*a2 + 39);
    if (v10 >= 0)
      v11 = (uint64_t)(*a2 + 2);
    else
      v11 = (*a2)[2];
    if (v10 >= 0)
      v12 = *((unsigned __int8 *)*a2 + 39);
    else
      v12 = (*a2)[3];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v11, v12);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    v4 = *a2;
  }
  v13 = *v4;
  if (!*v4)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME container data ", 19);
      v17 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" is null.", 9);
      goto LABEL_18;
    }
    return 2;
  }
  v14 = *(unsigned int *)(v13 + 268);
  if ((_DWORD)v14 == 2)
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
      v15 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" is null.", 9);
LABEL_18:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      return 2;
    }
    return 2;
  }
  if ((v14 & 0xFFFFFFFD) == 4)
    return v14;
  v19 = *(unsigned __int8 *)(v13 + 199);
  if ((v19 & 0x80u) == 0)
    v20 = *(unsigned __int8 *)(v13 + 199);
  else
    v20 = *(_QWORD *)(v13 + 184);
  v21 = *(unsigned __int8 *)(a1 + 439);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 424);
  if (v20 != v21)
    goto LABEL_38;
  if (v22 >= 0)
    v23 = (unsigned __int8 *)(a1 + 416);
  else
    v23 = *(unsigned __int8 **)(a1 + 416);
  if ((v19 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v13 + 176), v23, *(_QWORD *)(v13 + 184)))
    {
LABEL_38:
      if (quasar::gLogLevel >= 2)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream ", 16);
        v25 = (_QWORD *)std::ostream::operator<<();
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" has phone set version ", 23);
        v27 = *(char *)(v13 + 199);
        if (v27 >= 0)
          v28 = v13 + 176;
        else
          v28 = *(_QWORD *)(v13 + 176);
        if (v27 >= 0)
          v29 = *(unsigned __int8 *)(v13 + 199);
        else
          v29 = *(_QWORD *)(v13 + 184);
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" which is different from model phone set version ", 49);
        v32 = *(char *)(a1 + 439);
        if (v32 >= 0)
          v33 = a1 + 416;
        else
          v33 = *(_QWORD *)(a1 + 416);
        if (v32 >= 0)
          v34 = *(unsigned __int8 *)(a1 + 439);
        else
          v34 = *(_QWORD *)(a1 + 424);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, v33, v34);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)". This data stream will not be used.", 36);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v82);
      }
      return 5;
    }
  }
  else if (*(_BYTE *)(v13 + 199))
  {
    v24 = (unsigned __int8 *)(v13 + 176);
    while (*v24 == *v23)
    {
      ++v24;
      ++v23;
      if (!--v19)
        goto LABEL_53;
    }
    goto LABEL_38;
  }
LABEL_53:
  if (*(unsigned __int8 *)(v13 + 392) != *(unsigned __int8 *)(a1 + 568))
  {
    if (quasar::gLogLevel < 4)
      return 5;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream useWordpiece=", 29);
    v59 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" does not match model (model useWordpiece=", 42);
    v60 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"). This data stream will not be used.", 37);
LABEL_111:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    return 5;
  }
  if (!*(_BYTE *)(v13 + 392)
    || *(int *)(v13 + 8) < 16
    || !std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v13 + 296), (unsigned __int8 *)(a1 + 544)))
  {
    goto LABEL_74;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    v36 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"LME data stream assetPath=", 26);
    v37 = *(char *)(v13 + 319);
    if (v37 >= 0)
      v38 = v13 + 296;
    else
      v38 = *(_QWORD *)(v13 + 296);
    if (v37 >= 0)
      v39 = *(unsigned __int8 *)(v13 + 319);
    else
      v39 = *(_QWORD *)(v13 + 304);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, v38, v39);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" does not match model (lmeAssetPath=", 36);
    v42 = *(char *)(a1 + 567);
    if (v42 >= 0)
      v43 = a1 + 544;
    else
      v43 = *(_QWORD *)(a1 + 544);
    if (v42 >= 0)
      v44 = *(unsigned __int8 *)(a1 + 567);
    else
      v44 = *(_QWORD *)(a1 + 552);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, v43, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)")", 1);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
  if (!a4)
  {
    if (quasar::gLogLevel < 4)
      return 5;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"This data stream will not be used.", 34);
    goto LABEL_111;
  }
  if (quasar::gLogLevel >= 4)
  {
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v82 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Check is disabled! Continuing on the assumption that the LME data is actually compatible", 88);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
  }
LABEL_74:
  v46 = *(_QWORD *)(v13 + 160);
  if (v46 == -1 || (v47 = *(_QWORD *)(v13 + 168), v47 == -1))
  {
    if (quasar::gLogLevel >= 4)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (empty): stream=", 29);
      v61 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", symTableFirstKey=", 19);
      v62 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)", symTableLastKey=", 18);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
    }
    return 6;
  }
  if (v47 < v46)
    goto LABEL_114;
  v48 = *(_QWORD *)(v13 + 224);
  v49 = (*(uint64_t (**)(_QWORD, unsigned __int8 *))(**(_QWORD **)(v48 + 96) + 112))(*(_QWORD *)(v48 + 96), v23);
  if ((v49 & 0x8000000000000000) == 0)
    v49 += *(_QWORD *)(v48 + 120);
  if (v47 != v49 - 1)
  {
LABEL_114:
    if (quasar::gLogLevel >= 1)
    {
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Bad LME data (invalid last key): stream=", 40);
      v63 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)", symTableFirstKey=", 19);
      v64 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, (uint64_t)", symTableLastKey=", 18);
      v65 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)", symTable->AvailableKey()=", 27);
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v13 + 224) + 96) + 112))(*(_QWORD *)(*(_QWORD *)(v13 + 224) + 96));
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v82);
    }
    return 6;
  }
  if ((_DWORD)v14 == 1)
  {
    if (!*(_QWORD *)(a1 + 528) || (v50 = *(_QWORD **)(v13 + 240), v50 == (_QWORD *)(v13 + 248)))
    {
LABEL_106:
      if (*(_DWORD *)(v13 + 264) >= *(_DWORD *)(a1 + 536))
        return 1;
      if (quasar::gLogLevel >= 4)
      {
        v97 = 0u;
        v98 = 0u;
        v95 = 0u;
        v96 = 0u;
        v93 = 0u;
        v94 = 0u;
        v91 = 0u;
        v92 = 0u;
        v89 = 0u;
        v90 = 0u;
        v87 = 0u;
        v88 = 0u;
        v85 = 0u;
        v86 = 0u;
        v83 = 0u;
        v84 = 0u;
        v82 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"G2P model version ", 18);
        v58 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" in blob is older than datapack's version ", 42);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
      }
    }
    else
    {
      while (1)
      {
        if (*((char *)v50 + 55) < 0)
          std::string::__init_copy_ctor_external(&v81, (const std::string::value_type *)v50[4], v50[5]);
        else
          v81 = *(std::string *)(v50 + 4);
        if (*((char *)v50 + 79) < 0)
          std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)v50[7], v50[8]);
        else
          v80 = *(std::string *)(v50 + 7);
        memset(&v79, 0, sizeof(v79));
        v51 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 464, (const void **)&v81.__r_.__value_.__l.__data_);
        if (a1 + 472 == v51)
          v52 = &v81;
        else
          v52 = (std::string *)(v51 + 56);
        std::string::operator=(&v79, v52);
        v53 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 512, (const void **)&v79.__r_.__value_.__l.__data_);
        v54 = v53;
        if (a1 + 520 == v53)
        {
          if (quasar::gLogLevel < 4)
            goto LABEL_143;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          v89 = 0u;
          v90 = 0u;
          v87 = 0u;
          v88 = 0u;
          v85 = 0u;
          v86 = 0u;
          v83 = 0u;
          v84 = 0u;
          v82 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
          v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v67 = &v81;
          else
            v67 = (std::string *)v81.__r_.__value_.__r.__words[0];
          if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v81.__r_.__value_.__r.__words[2]);
          else
            size = v81.__r_.__value_.__l.__size_;
          v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, size);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in blob is not supported by datapack.", 38);
          goto LABEL_142;
        }
        if (std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)(v53 + 56), (unsigned __int8 *)&v80))
        {
          break;
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
        if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v81.__r_.__value_.__l.__data_);
        v55 = (_QWORD *)v50[1];
        if (v55)
        {
          do
          {
            v56 = v55;
            v55 = (_QWORD *)*v55;
          }
          while (v55);
        }
        else
        {
          do
          {
            v56 = (_QWORD *)v50[2];
            v57 = *v56 == (_QWORD)v50;
            v50 = v56;
          }
          while (!v57);
        }
        v50 = v56;
        if (v56 == (_QWORD *)(v13 + 248))
          goto LABEL_106;
      }
      if (quasar::gLogLevel < 4)
        goto LABEL_143;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v85 = 0u;
      v86 = 0u;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v82);
      v70 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v82, (uint64_t)"Category ", 9);
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v71 = &v81;
      else
        v71 = (std::string *)v81.__r_.__value_.__r.__words[0];
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v72 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
      else
        v72 = v81.__r_.__value_.__l.__size_;
      v73 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v71, v72);
      v74 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)" in blob uses different enumeration type (", 42);
      v75 = *(char *)(v54 + 79);
      if (v75 >= 0)
        v76 = v54 + 56;
      else
        v76 = *(_QWORD *)(v54 + 56);
      if (v75 >= 0)
        v77 = *(unsigned __int8 *)(v54 + 79);
      else
        v77 = *(_QWORD *)(v54 + 64);
      v78 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, v76, v77);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v78, (uint64_t)") in datapack.", 14);
LABEL_142:
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v82);
LABEL_143:
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v81.__r_.__value_.__l.__data_);
    }
    return 3;
  }
  return v14;
}

void sub_1ADCE24D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t quasar::AmFusionEncoderFe::getNumLmeContextEmbeddings(uint64_t a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL4 v30;
  _QWORD *v31;
  _QWORD *v32;
  BOOL v33;
  _QWORD *v34;
  _QWORD **v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v42;
  _QWORD **v43;
  _QWORD *v44[2];
  uint64_t *v45;
  std::__shared_weak_count *v46;

  v4 = *a2;
  if (a2[1] == *a2)
    return 0;
  v7 = a2;
  v9 = 0;
  v10 = 0;
  do
  {
    v11 = v4 + 16 * v9;
    v13 = *(uint64_t **)v11;
    v12 = *(std::__shared_weak_count **)(v11 + 8);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v46 = v12;
      do
        v16 = __ldxr(p_shared_owners);
      while (__stxr(v16 + 1, p_shared_owners));
    }
    else
    {
      v46 = 0;
    }
    v45 = v13;
    v17 = quasar::AmFusionEncoderFe::readAndCheckLmeData(a1, &v45, v9, a4);
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if ((v17 & 0xFFFFFFFD) == 1)
    {
      v20 = *v13;
      v21 = (std::__shared_weak_count *)v13[1];
      if (v21)
      {
        v22 = (unint64_t *)&v21->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      v42 = v21;
      v24 = a1;
      v25 = a4;
      quasar::WordPronCache::getPronCache((quasar::WordPronCache *)(v20 + 88), (uint64_t)&v43);
      v26 = v43;
      if (v43 != v44)
      {
        do
        {
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v26 + 11));
          v29 = v27 + 1;
          v28 = (_QWORD *)*v27;
          if ((_QWORD *)*v27 != v27 + 1)
          {
            do
            {
              v30 = quasar::PronChoice::compatibleWithEmbeddingDim(*((_DWORD *)v28 + 8), (uint64_t)(v28 + 5), a3);
              v31 = (_QWORD *)v28[1];
              if (v31)
              {
                do
                {
                  v32 = v31;
                  v31 = (_QWORD *)*v31;
                }
                while (v31);
              }
              else
              {
                do
                {
                  v32 = (_QWORD *)v28[2];
                  v33 = *v32 == (_QWORD)v28;
                  v28 = v32;
                }
                while (!v33);
              }
              v10 = (v10 + v30);
              v28 = v32;
            }
            while (v32 != v29);
          }
          v34 = (_QWORD *)v26[1];
          if (v34)
          {
            do
            {
              v35 = (_QWORD **)v34;
              v34 = (_QWORD *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              v35 = (_QWORD **)v26[2];
              v33 = *v35 == v26;
              v26 = v35;
            }
            while (!v33);
          }
          v26 = v35;
        }
        while (v35 != v44);
      }
      std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)&v43, v44[0]);
      if (v42)
      {
        v36 = (unint64_t *)&v42->__shared_owners_;
        a4 = v25;
        a1 = v24;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        v7 = a2;
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      else
      {
        a4 = v25;
        v7 = a2;
        a1 = v24;
      }
    }
    if (v12)
    {
      v38 = (unint64_t *)&v12->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ++v9;
    v4 = *v7;
  }
  while (v9 < (v7[1] - *v7) >> 4);
  return v10;
}

void sub_1ADCE2830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;

  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  if (v15)
  {
    v19 = (unint64_t *)&v15->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  _Unwind_Resume(exception_object);
}

void quasar::WordPronCache::getPronCache(quasar::WordPronCache *this@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  char *v4;
  const fst::SymbolTable *v5;
  char *v6;
  char *v7;
  BOOL v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;
  char *v13[3];

  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)a2 = a2 + 8;
  v3 = (char *)*((_QWORD *)this + 3);
  v4 = (char *)this + 32;
  if (v3 != (char *)this + 32)
  {
    v5 = (quasar::WordPronCache *)((char *)this + 8);
    do
    {
      quasar::LmePackedWord::unpacked((quasar::LmePackedWord *)(v3 + 32), v5, (uint64_t)v9);
      std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word>((uint64_t **)a2, (const void **)v9, (uint64_t)v9);
      std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy((uint64_t)v13, v13[1]);
      if (v12 < 0)
        operator delete(__p);
      if (v10 < 0)
        operator delete(v9[0]);
      v6 = (char *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_1ADCE29B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::LmeDataFactoryBase::Word::~Word((quasar::LmeDataFactoryBase::Word *)&a9);
  std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(v9, *(_QWORD **)(v9 + 8));
  _Unwind_Resume(a1);
}

void quasar::AmFusionEncoderFe::getLmeContextEmbeddings(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, int a5)
{
  uint64_t v5;
  unint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  int v28;
  _QWORD *v29;
  _QWORD *v30;
  BOOL v31;
  _QWORD *v32;
  _QWORD **v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD **v41;
  _QWORD *v42[3];
  std::__shared_weak_count *v43;
  __int128 v44;
  __int128 v45;

  v5 = *a2;
  if (a2[1] != *a2)
  {
    v11 = 0;
    do
    {
      v12 = *(_OWORD *)(v5 + 16 * v11);
      v45 = v12;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
        v44 = v12;
        do
          v16 = __ldxr(v14);
        while (__stxr(v16 + 1, v14));
      }
      else
      {
        v44 = (unint64_t)v12;
      }
      v17 = quasar::AmFusionEncoderFe::readAndCheckLmeData(a1, (uint64_t **)&v44, v11, a5);
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if ((v17 & 0xFFFFFFFD) == 1)
      {
        v20 = *(_QWORD *)v45;
        v21 = *(std::__shared_weak_count **)(v45 + 8);
        v42[2] = *(_QWORD **)v45;
        v43 = v21;
        if (v21)
        {
          v22 = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
        quasar::WordPronCache::getPronCache((quasar::WordPronCache *)(v20 + 88), (uint64_t)&v41);
        v24 = v41;
        if (v41 == v42)
        {
LABEL_35:
          v34 = 0;
        }
        else
        {
          while (1)
          {
            quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v24 + 11));
            v26 = v25 + 1;
            v27 = (_QWORD *)*v25;
            if ((_QWORD *)*v25 != v25 + 1)
              break;
LABEL_29:
            v32 = (_QWORD *)v24[1];
            if (v32)
            {
              do
              {
                v33 = (_QWORD **)v32;
                v32 = (_QWORD *)*v32;
              }
              while (v32);
            }
            else
            {
              do
              {
                v33 = (_QWORD **)v24[2];
                v31 = *v33 == v24;
                v24 = v33;
              }
              while (!v31);
            }
            v24 = v33;
            if (v33 == v42)
              goto LABEL_35;
          }
          while (1)
          {
            if (quasar::PronChoice::pronToEmbeddingVector(*((_DWORD *)v27 + 8), (uint64_t)(v27 + 5), (float *)(*(_QWORD *)(a3 + 8) + 4 * *(_DWORD *)(a3 + 24) * *a4), *(_DWORD *)(a3 + 16)))
            {
              v28 = *a4 + 1;
              *a4 = v28;
              if (v28 >= *(_DWORD *)(a3 + 20))
                break;
            }
            v29 = (_QWORD *)v27[1];
            if (v29)
            {
              do
              {
                v30 = v29;
                v29 = (_QWORD *)*v29;
              }
              while (v29);
            }
            else
            {
              do
              {
                v30 = (_QWORD *)v27[2];
                v31 = *v30 == (_QWORD)v27;
                v27 = v30;
              }
              while (!v31);
            }
            v27 = v30;
            if (v30 == v26)
              goto LABEL_29;
          }
          v34 = 1;
        }
        std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy((uint64_t)&v41, v42[0]);
        v35 = v43;
        if (v43)
        {
          v36 = (unint64_t *)&v43->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
      }
      else
      {
        v34 = 4;
      }
      v38 = (std::__shared_weak_count *)*((_QWORD *)&v45 + 1);
      if (*((_QWORD *)&v45 + 1))
      {
        v39 = (unint64_t *)(*((_QWORD *)&v45 + 1) + 8);
        do
          v40 = __ldaxr(v39);
        while (__stlxr(v40 - 1, v39));
        if (!v40)
        {
          ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
          std::__shared_weak_count::__release_weak(v38);
        }
      }
      if ((v34 | 4) != 4)
        break;
      ++v11;
      v5 = *a2;
    }
    while (v11 < (a2[1] - *a2) >> 4);
  }
}

void sub_1ADCE2C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t quasar::AmFusionEncoderFe::createOnlineFeInputImpl@<X0>(uint64_t a1@<X0>, double *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  kaldi::quasar::CEFusedAcousticEncoder *v8;
  kaldi::quasar::CEFusedAcousticEncoder **v9;
  _BOOL4 HasContextualBiasing;
  _BOOL4 v11;
  uint64_t ContextEmbeddingDim;
  int NumLmeContextEmbeddings;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int ContextEmbeddingMaskDim;
  uint64_t v20;
  int v21;
  int v22;
  BOOL v23;
  int v24;
  uint64_t v25;
  size_t v26;
  int v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  float v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  double v45;
  int v46;
  float v47;
  int32x2_t v48;
  void *v49[2];
  __int128 v50;
  char v51;
  void *__p[2];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  if (!*(_QWORD *)a2)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"'", 1);
    v38 = *(_QWORD *)(a1 + 8);
    v37 = a1 + 8;
    v36 = v38;
    v39 = *(char *)(v37 + 23);
    if (v39 >= 0)
      v40 = v37;
    else
      v40 = v36;
    if (v39 >= 0)
      v41 = *(unsigned __int8 *)(v37 + 23);
    else
      v41 = *(_QWORD *)(v37 + 8);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, v40, v41);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v50 = 0u;
  *(_OWORD *)v49 = 0u;
  v48 = (int32x2_t)&unk_1E5D34170;
  v51 = 0;
  v9 = (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 48);
  v8 = *(kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 48);
  v47 = *(float *)(a1 + 572);
  HasContextualBiasing = kaldi::quasar::CEFusedAcousticEncoder::HasContextualBiasing(v8);
  if (*(_BYTE *)(a3 + 120))
    v11 = 0;
  else
    v11 = HasContextualBiasing;
  if (v11)
  {
    ContextEmbeddingDim = kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingDim(*v9);
    NumLmeContextEmbeddings = quasar::AmFusionEncoderFe::getNumLmeContextEmbeddings(a1, (uint64_t *)(a3 + 72), ContextEmbeddingDim, *(unsigned __int8 *)(a3 + 112));
    v14 = *(_QWORD *)(a3 + 96);
    if (v14 && *(_DWORD *)(v14 + 16) == (_DWORD)ContextEmbeddingDim)
      NumLmeContextEmbeddings += *(_DWORD *)(v14 + 20);
    v15 = *(_QWORD *)(a1 + 96);
    if (v15 && *(int *)(v15 + 20) >= 1)
    {
      if (*(_DWORD *)(v15 + 16) == (_DWORD)ContextEmbeddingDim)
        v16 = *(_DWORD *)(v15 + 20);
      else
        v16 = 1;
    }
    else
    {
      v16 = 1;
    }
    LODWORD(v17) = v16 + NumLmeContextEmbeddings;
    if (quasar::gLogLevel >= 4)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Total number of context embeddings ", 35);
      std::ostream::operator<<();
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    ContextEmbeddingMaskDim = kaldi::quasar::CEFusedAcousticEncoder::GetContextEmbeddingMaskDim(*v9);
    if ((int)v17 <= ContextEmbeddingMaskDim || ContextEmbeddingMaskDim <= 0)
      v17 = v17;
    else
      v17 = ContextEmbeddingMaskDim;
    kaldi::CuMatrix<float>::Resize(&v48, v17, ContextEmbeddingDim, 1, 0);
    v20 = *(_QWORD *)(a1 + 96);
    if (v20 && *(int *)(v20 + 20) >= 1 && *(_DWORD *)(v20 + 16) == (_DWORD)ContextEmbeddingDim)
    {
      if ((int)v17 < 1)
      {
        v24 = 0;
      }
      else
      {
        v21 = 1;
        do
        {
          memcpy((char *)v49[0] + 4 * (int)v50 * (v21 - 1), (const void *)(*(_QWORD *)(v20 + 8) + 4 * *(_DWORD *)(v20 + 24) * (v21 - 1)), 4 * (int)ContextEmbeddingDim);
          v20 = *(_QWORD *)(a1 + 96);
          v22 = v21 + 1;
          v23 = v21 < *(_DWORD *)(v20 + 20) && v21 < (int)v17;
          ++v21;
        }
        while (v23);
        v24 = v22 - 1;
      }
    }
    else
    {
      bzero(v49[0], 4 * (int)ContextEmbeddingDim);
      v24 = 1;
    }
    v46 = v24;
    if (v24 < (int)v17)
    {
      quasar::AmFusionEncoderFe::getLmeContextEmbeddings(a1, (uint64_t *)(a3 + 72), (uint64_t)&v48, &v46, *(unsigned __int8 *)(a3 + 112));
      v24 = v46;
    }
    if (v24 < (int)v17)
    {
      v25 = *(_QWORD *)(a3 + 96);
      if (v25)
      {
        if (*(_DWORD *)(v25 + 16) == (_DWORD)ContextEmbeddingDim)
        {
          if (*(int *)(v25 + 20) >= 1)
          {
            v26 = 4 * (int)ContextEmbeddingDim;
            v27 = 1;
            do
            {
              memcpy((char *)v49[0] + 4 * (int)v50 * (v24 + v27 - 1), (const void *)(*(_QWORD *)(v25 + 8) + 4 * *(_DWORD *)(v25 + 24) * (v27 - 1)), v26);
              v25 = *(_QWORD *)(a3 + 96);
              v28 = v27 + 1;
              v29 = v27 < *(_DWORD *)(v25 + 20) && v24 + v27 < (int)v17;
              ++v27;
            }
            while (v29);
            v24 = v24 + v28 - 1;
          }
          v46 = v24;
        }
      }
    }
    if (v24 != (_DWORD)v17)
    {
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Error in populating context embeddings. Expected ", 49);
      v43 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" embeddings. But only populated ", 32);
      v44 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" embeddings", 11);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    if (SHIDWORD(v49[1]) < 1)
    {
      if (quasar::gLogLevel >= 4)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"No context embeddings", 21);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
    }
    else
    {
      v30 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 600, (const void **)(a3 + 144));
      if (a1 + 608 != v30)
      {
        v31 = *(double *)(v30 + 56);
        v47 = v31;
      }
      if (quasar::gLogLevel >= 4)
      {
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Use number of context embeddings: ", 34);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)", gating threshold: ", 20);
        std::ostream::operator<<();
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v33 = *(_QWORD *)(a3 + 128);
      if (v33)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "numContextualBiasingEmbeddings");
        v45 = (double)(int)v17;
        quasar::SpeechRequestResultData::addAA(v33, (__int128 *)__p, &v45, 1);
        if (SBYTE7(v53) < 0)
          operator delete(__p[0]);
      }
    }
  }
  v45 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::AmFusionEncoderInput,std::allocator<kaldi::AmFusionEncoderInput>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,void>((uint64_t *)&v45, (int *)(a1 + 264), (char *)(a1 + 268), (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 48), (kaldi::quasar::CEFusedAcousticEncoder **)(a1 + 64), (_QWORD *)(a1 + 80), (int *)(a1 + 256), __p, (uint64_t)&v48, &v47);
  *a4 = *(_OWORD *)__p;
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v48);
}

void sub_1ADCE32E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

double quasar::OnlineAcousticEncoderFe::registerParams(quasar::OnlineAcousticEncoderFe *this, quasar::SystemConfig *a2)
{
  char *v4;
  double result;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  v4 = (char *)this + 168;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 168, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v8, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 98, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 97, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v8, (uint64_t)this + 100, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "strict-batch-size");
  std::string::basic_string[abi:ne180100]<0>(__p, "Batch size applied just for this extractor. Ignored if <= 0. Unlike feature-read.batch-size, which is just a hint, this batch size is so strict that even the last batch will be padded to exactly this size with copies of the last frame if the last batch is too small. ");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v8, (uint64_t)this + 104, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 136, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specifiedexpect an additional row appended to the output with the valid output length as the first elementthe padding is removed from the output based on the valid output length");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v8, (uint64_t)this + 137, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "strict-batch-sizes");
  std::string::basic_string[abi:ne180100]<0>(__p, "Defines an array of 3 sizes - [ModelInterfaceSize, FirstBatchSize, SubsequentBatchSize]ModelInterfaceSize: defines the size of input expected by the modelFirstBatchSize: defines the batch size used for 1st inference, will be padded with zeros                 if less than than ModelInterfaceSizeSubsequentBatchSize: defines the batch size used for the rest of the inferenences, will be                     padded with zeros if less than than ModelInterfaceSize");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v8, (uint64_t)this + 144, (uint64_t)__p, 0, 223, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  *((_BYTE *)this + 98) = 0;
  *((_BYTE *)this + 96) = 0;
  *((_BYTE *)this + 97) = 0;
  *(_QWORD *)&result = 4294967294;
  *(_QWORD *)((char *)this + 100) = 4294967294;
  *((_BYTE *)this + 136) = 0;
  *((_BYTE *)this + 137) = 0;
  return result;
}

void sub_1ADCE3820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineAcousticEncoderFe::finishInit(quasar::OnlineAcousticEncoderFe *this, quasar::SystemConfig *a2)
{
  uint64_t ModelLoader;
  int *v4;
  int v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  ModelLoader = quasar::SystemConfig::getModelLoader(a2);
  if (*((char *)this + 167) < 0)
  {
    if (!*((_QWORD *)this + 19))
      goto LABEL_10;
  }
  else if (!*((_BYTE *)this + 167))
  {
    goto LABEL_10;
  }
  if (*((_DWORD *)this + 26))
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "cannot set both strict-batch-size & strict-batch-sizes");
    goto LABEL_35;
  }
  kaldi::SplitStringToIntegers<int>((uint64_t)this + 144, ",", 0, (std::vector<unsigned int> *)((char *)this + 112));
  v4 = (int *)*((_QWORD *)this + 14);
  if (*((_QWORD *)this + 15) - (_QWORD)v4 != 12)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "strict-batch-sizes needs 3 sizes");
    goto LABEL_35;
  }
  v5 = *v4;
  v6 = v4[1];
  v7 = v4[2];
  if (v6 > v7)
    v7 = v6;
  if (v5 < v7)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Model input size must be greater than batch sizes");
LABEL_35:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_10:
  quasar::ModelLoader::readAcousticEncoder(ModelLoader, (__int128 *)this + 3, __p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 592, (__int128 *)__p);
  v8 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v9 = (unint64_t *)((char *)__p[1] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (char *)this + 72;
  v12 = *((unsigned __int8 *)this + 95);
  if (*((_BYTE *)this + 98))
  {
    if ((v12 & 0x80) != 0)
    {
      if (!*((_QWORD *)this + 10))
        goto LABEL_26;
    }
    else if (!*((_BYTE *)this + 95))
    {
      goto LABEL_26;
    }
    fst::FstReadOptions::FstReadOptions(__p, v11, 0, 0, 0);
    LODWORD(v19) = 2;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 216, (uint64_t)__p);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if ((v12 & 0x80) != 0)
      v12 = *((_QWORD *)this + 10);
    if (v12)
      kaldi::nnet1::Nnet::Read((uint64_t)this + 216, (uint64_t)v11);
  }
LABEL_26:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 200, (__int128 *)__p);
  v13 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v14 = (unint64_t *)((char *)__p[1] + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADCE3B40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineAcousticEncoderFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  void **v7;
  char *v8;
  char *v9;
  char **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _DWORD *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  double result;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;

  v5 = *a2;
  if (!*a2)
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"'", 1);
    v43 = *(_QWORD *)(a1 + 8);
    v42 = a1 + 8;
    v41 = v43;
    v44 = *(char *)(v42 + 23);
    if (v44 >= 0)
      v45 = v42;
    else
      v45 = v41;
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(v42 + 23);
    else
      v46 = *(_QWORD *)(v42 + 8);
    v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, v45, v46);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v47, "' cannot occur at the first stage of feature-extract");
    goto LABEL_65;
  }
  if (*(_BYTE *)(a1 + 97) && *(_BYTE *)(a1 + 96))
  {
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v52, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_65;
  }
  if (*(char *)(a1 + 191) < 0)
  {
    if (!*(_QWORD *)(a1 + 176))
      goto LABEL_9;
    goto LABEL_8;
  }
  if (*(_BYTE *)(a1 + 191))
  {
LABEL_8:
    if (*(unsigned __int8 *)(a1 + 96) | *(unsigned __int8 *)(a1 + 97))
      goto LABEL_9;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v52 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v52);
    v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v52, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v48, "--no-softmax or --apply-log");
LABEL_65:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v52);
  }
LABEL_9:
  v8 = *(char **)(a1 + 112);
  v7 = (void **)(a1 + 112);
  if (v8 == *(char **)(a1 + 120))
  {
    v10 = (char **)(a1 + 128);
    v9 = *(char **)(a1 + 128);
    if (v8 >= v9)
    {
      v12 = v9 - v8;
      v13 = (v9 - v8) >> 1;
      if (v13 <= 1)
        v13 = 1;
      if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v14 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v14);
      v16 = *(char **)(a1 + 112);
      v17 = *(char **)(a1 + 120);
      v9 = (char *)&v15[v18];
      *v15 = *(_DWORD *)(a1 + 104);
      v11 = (char *)(v15 + 1);
      while (v17 != v16)
      {
        v19 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *--v15 = v19;
      }
      *(_QWORD *)(a1 + 112) = v15;
      *(_QWORD *)(a1 + 120) = v11;
      *(_QWORD *)(a1 + 128) = v9;
      if (v16)
      {
        operator delete(v16);
        v9 = *v10;
      }
    }
    else
    {
      *(_DWORD *)v8 = *(_DWORD *)(a1 + 104);
      v11 = v8 + 4;
    }
    *(_QWORD *)(a1 + 120) = v11;
    if (v11 >= v9)
    {
      v21 = (char *)*v7;
      v22 = (v11 - (_BYTE *)*v7) >> 2;
      v23 = v22 + 1;
      if ((unint64_t)(v22 + 1) >> 62)
        goto LABEL_66;
      v24 = v9 - v21;
      if (v24 >> 1 > v23)
        v23 = v24 >> 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
        v25 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v25 = v23;
      if (v25)
      {
        v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v25);
        v21 = *(char **)(a1 + 112);
        v11 = *(char **)(a1 + 120);
      }
      else
      {
        v26 = 0;
      }
      v27 = &v26[4 * v22];
      v9 = &v26[4 * v25];
      *(_DWORD *)v27 = *(_DWORD *)(a1 + 104);
      v20 = v27 + 4;
      while (v11 != v21)
      {
        v28 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v27 - 1) = v28;
        v27 -= 4;
      }
      *(_QWORD *)(a1 + 112) = v27;
      *(_QWORD *)(a1 + 120) = v20;
      *(_QWORD *)(a1 + 128) = v9;
      if (v21)
      {
        operator delete(v21);
        v9 = *v10;
      }
    }
    else
    {
      *(_DWORD *)v11 = *(_DWORD *)(a1 + 104);
      v20 = v11 + 4;
    }
    *(_QWORD *)(a1 + 120) = v20;
    if (v20 < v9)
    {
      *(_DWORD *)v20 = *(_DWORD *)(a1 + 104);
      v29 = v20 + 4;
LABEL_54:
      *(_QWORD *)(a1 + 120) = v29;
      v5 = *a2;
      goto LABEL_55;
    }
    v30 = (char *)*v7;
    v31 = (v20 - (_BYTE *)*v7) >> 2;
    v32 = v31 + 1;
    if (!((unint64_t)(v31 + 1) >> 62))
    {
      v33 = v9 - v30;
      if (v33 >> 1 > v32)
        v32 = v33 >> 1;
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v32;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 128, v34);
        v30 = *(char **)(a1 + 112);
        v20 = *(char **)(a1 + 120);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[4 * v31];
      v37 = &v35[4 * v34];
      *(_DWORD *)v36 = *(_DWORD *)(a1 + 104);
      v29 = v36 + 4;
      while (v20 != v30)
      {
        v38 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v36 - 1) = v38;
        v36 -= 4;
      }
      *(_QWORD *)(a1 + 112) = v36;
      *(_QWORD *)(a1 + 120) = v29;
      *(_QWORD *)(a1 + 128) = v37;
      if (v30)
        operator delete(v30);
      goto LABEL_54;
    }
LABEL_66:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  }
LABEL_55:
  v50 = a1 + 216;
  v51 = v5;
  v49 = *(_QWORD *)(a1 + 200);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,std::allocator<kaldi::OnlineAcousticEncoderInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,void>(&v51, &v50, (_QWORD *)(a1 + 592), (__int128 *)(a1 + 168), &v49, (char *)(a1 + 97), (char *)(a1 + 96), &v52, a1 + 112, (char *)(a1 + 136), (unsigned __int8 *)(a1 + 137));
  result = *(double *)&v52;
  *a3 = v52;
  return result;
}

void sub_1ADCE3F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)va);
}

void quasar::OnlineNnetForwardSkipFe::registerParams(quasar::OnlineNnetForwardSkipFe *this, quasar::SystemConfig *a2)
{
  char *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  v4 = (char *)this + 176;
  kaldi::nnet1::PdfPriorOptions::Register((uint64_t)this + 176, (uint64_t)a2);
  std::string::basic_string[abi:ne180100]<0>(v7, "enable-memory-map");
  std::string::basic_string[abi:ne180100]<0>(__p, "Map model into memory (requires aligned models)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 108, (uint64_t)__p, 0, 16, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for feature transform in front of nnet's main network (in nnet format)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 72, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "skip-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames to be skipped in nnet computation (default 0).");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 96, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "no-softmax");
  std::string::basic_string[abi:ne180100]<0>(__p, "No softmax on MLP output (or remove it if found), the pre-softmax activations will be used as log-likelihoods, log-priors will be subtracted");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 100, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "apply-log");
  std::string::basic_string[abi:ne180100]<0>(__p, "Transform MLP output to logscale");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 101, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "use-gpu-id");
  std::string::basic_string[abi:ne180100]<0>(__p, "Unused, kaldi is compiled w/o CUDA");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 104, (uint64_t)__p, 0, 14, 2, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "class-frame-counts-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File containing vector with frame-counts of pdfs to compute log-priors. This is the same as class-frame-counts, but allows paths that are relative to the json config file (class-frame-counts requires absolute paths). If class-frame-counts is also specified, this param will override it.");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)v4, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "silence-model-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "Name of nnet model file for computing silence posteriors");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 112, (uint64_t)__p, 0, 75, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "skip-across-batch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Make skip-frames deterministic by skipping across batches instead of within batches (default: false).");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 136, (uint64_t)__p, 0, 77, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "strict-batch-size");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 140, (uint64_t)__p, 0, 164, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "zero-pad");
  std::string::basic_string[abi:ne180100]<0>(__p, "Zero pad the features, instead of last frame padding, to reach the strict-batch-size requirementvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 144, (uint64_t)__p, 0, 166, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "append-pad-info");
  std::string::basic_string[abi:ne180100]<0>(__p, "Append the pad info as an additional row in the input matrixThe first element of the appended row is the number of padded rows, which excludes this extra appended rowvalid only when strict-batch-size is also specified");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v7, (uint64_t)this + 145, (uint64_t)__p, 0, 176, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "default-speaker-code");
  std::string::basic_string[abi:ne180100]<0>(__p, "If the nnet requires speaker code as input and speaker code is not set by request data, the default one will be used as a backup");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v7, (uint64_t)this + 152, (uint64_t)__p, 0, 216, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *((_BYTE *)this + 108) = 0;
  *((_BYTE *)this + 100) = 0;
  *((_BYTE *)this + 101) = 0;
  *((_DWORD *)this + 26) = -2;
  *((_BYTE *)this + 136) = 0;
  *((_DWORD *)this + 35) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_BYTE *)this + 145) = 0;
  *((_DWORD *)this + 24) = 0;
}

void sub_1ADCE45E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineNnetForwardSkipFe::finishInit(quasar::OnlineNnetForwardSkipFe *this, quasar::SystemConfig *a2)
{
  std::string *ModelLoader;
  std::__shared_weak_count *v4;
  void *v5;
  NSObject *DispatchGroup;
  NSObject *DispatchQueue;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned __int8 isKeepANEModelLoadedEnabled;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;
  char *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *__p[2];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  unsigned __int8 *v56;
  std::__shared_weak_count *v57;
  void *v58;
  std::__shared_weak_count *v59;
  _QWORD block[7];
  std::__shared_weak_count *v61;
  void *v62;
  std::__shared_weak_count *v63;

  ModelLoader = (std::string *)quasar::SystemConfig::getModelLoader(a2);
  v62 = 0;
  v63 = 0;
  quasar::ModelLoader::requestEmbeddedMlock(ModelLoader, (unsigned __int8 *)this + 48, __p, 1.0);
  v5 = __p[0];
  v4 = (std::__shared_weak_count *)__p[1];
  v62 = __p[0];
  v63 = (std::__shared_weak_count *)__p[1];
  if (quasar::ModelLoader::isParallelLoadingEnabled((uint64_t)ModelLoader, (uint64_t **)this + 6))
  {
    DispatchGroup = quasar::ModelLoader::getDispatchGroup((quasar::ModelLoader *)ModelLoader);
    DispatchQueue = quasar::ModelLoader::getDispatchQueue((quasar::ModelLoader *)ModelLoader);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN6quasar23OnlineNnetForwardSkipFe10finishInitERNS_12SystemConfigE_block_invoke;
    block[3] = &__block_descriptor_tmp_0;
    block[4] = this;
    block[5] = ModelLoader;
    block[6] = v5;
    v61 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    dispatch_group_async(DispatchGroup, DispatchQueue, block);
    v10 = v61;
    if (v61)
    {
      v11 = (unint64_t *)&v61->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_20;
    }
  }
  else
  {
    v13 = *((unsigned __int8 *)this + 108);
    v14 = *((unsigned __int8 *)this + 100);
    isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)ModelLoader, (uint64_t)this + 48);
    v58 = v5;
    v59 = v4;
    if (v4)
    {
      v16 = (unint64_t *)&v4->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    quasar::ModelLoader::readFeedForwardNetwork(ModelLoader, (uint64_t)this + 48, v13 != 0, v14 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v58, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 600, (__int128 *)__p);
    v18 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v19 = (unint64_t *)((char *)__p[1] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v10 = v59;
    if (v59)
    {
      v21 = (unint64_t *)&v59->__shared_owners_;
      do
        v12 = __ldaxr(v21);
      while (__stlxr(v12 - 1, v21));
LABEL_20:
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  v22 = (char *)this + 72;
  if (!*((_BYTE *)this + 108))
  {
    if ((*((_BYTE *)this + 95) & 0x80) != 0)
    {
      if (!*((_QWORD *)this + 10))
        goto LABEL_34;
    }
    else if (!*((_BYTE *)this + 95))
    {
      goto LABEL_34;
    }
    kaldi::nnet1::Nnet::Read((uint64_t)this + 224, (uint64_t)v22);
    goto LABEL_34;
  }
  if ((*((_BYTE *)this + 95) & 0x80) != 0)
  {
    if (!*((_QWORD *)this + 10))
      goto LABEL_34;
  }
  else if (!*((_BYTE *)this + 95))
  {
    goto LABEL_34;
  }
  fst::FstReadOptions::FstReadOptions(__p, v22, 0, 0, 0);
  LODWORD(v42) = 2;
  kaldi::nnet1::Nnet::ReadMapped((uint64_t)this + 224, (uint64_t)__p);
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
LABEL_34:
  if (*((char *)this + 135) < 0)
  {
    if (!*((_QWORD *)this + 15))
      goto LABEL_56;
  }
  else if (!*((_BYTE *)this + 135))
  {
    goto LABEL_56;
  }
  v56 = 0;
  v57 = 0;
  quasar::ModelLoader::readNeuralNetwork(ModelLoader, (uint64_t)this + 112, 0, 0, 1, &v56, (uint64_t *)__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 616, (__int128 *)__p);
  v23 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v24 = (unint64_t *)((char *)__p[1] + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = v57;
  if (v57)
  {
    v27 = (unint64_t *)&v57->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  if (quasar::gLogLevel >= 5)
  {
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read model file for computing silence posteriors=", 49);
    v30 = *((char *)this + 135);
    if (v30 >= 0)
      v31 = (char *)this + 112;
    else
      v31 = (char *)*((_QWORD *)this + 14);
    if (v30 >= 0)
      v32 = *((unsigned __int8 *)this + 135);
    else
      v32 = *((_QWORD *)this + 15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)v31, v32);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
  }
LABEL_56:
  std::allocate_shared[abi:ne180100]<kaldi::nnet1::PdfPrior,std::allocator<kaldi::nnet1::PdfPrior>,kaldi::nnet1::PdfPriorOptions &,void>(__p);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 208, (__int128 *)__p);
  v33 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v34 = (unint64_t *)((char *)__p[1] + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v63;
  if (v63)
  {
    v37 = (unint64_t *)&v63->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1ADCE4AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v14 - 88);
  _Unwind_Resume(a1);
}

void ___ZN6quasar23OnlineNnetForwardSkipFe10finishInitERNS_12SystemConfigE_block_invoke(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  int v4;
  int v5;
  unsigned __int8 isKeepANEModelLoadedEnabled;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;

  v3 = a1[4];
  v2 = (_QWORD *)a1[5];
  v4 = *(unsigned __int8 *)(v3 + 108);
  v5 = *(unsigned __int8 *)(v3 + 100);
  isKeepANEModelLoadedEnabled = quasar::ModelLoader::isKeepANEModelLoadedEnabled((uint64_t)v2, v3 + 48);
  v7 = (std::__shared_weak_count *)a1[7];
  v16 = a1[6];
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::ModelLoader::readFeedForwardNetwork(v2, v3 + 48, v4 != 0, v5 != 0, 0, isKeepANEModelLoadedEnabled, (uint64_t)&v16, &v18);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](v3 + 600, &v18);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADCE4C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c70_ZTSNSt3__110shared_ptrIN6quasar11ModelLoader20EmbeddedMlockContextEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(result + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 56) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_48c70_ZTSNSt3__110shared_ptrIN6quasar11ModelLoader20EmbeddedMlockContextEEE(uint64_t a1)
{
  return std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a1 + 48);
}

void quasar::OnlineNnetForwardSkipFe::createOnlineFeInputImpl(uint64_t a1@<X0>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  _BYTE *v8;
  const void *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t Component;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int32x2_t *v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int32x2_t v50;
  __int128 v51;
  __int128 v52;
  char v53;
  _QWORD *v54;
  std::__shared_weak_count *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  if (!*a2)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    v37 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"'", 1);
    v40 = *(_QWORD *)(a1 + 8);
    v39 = a1 + 8;
    v38 = v40;
    v41 = *(char *)(v39 + 23);
    if (v41 >= 0)
      v42 = v39;
    else
      v42 = v38;
    if (v41 >= 0)
      v43 = *(unsigned __int8 *)(v39 + 23);
    else
      v43 = *(_QWORD *)(v39 + 8);
    v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, v42, v43);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v44, "' cannot occur at the first stage of feature-extract");
LABEL_62:
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v56);
  }
  v8 = (_BYTE *)(a1 + 101);
  if (*(_BYTE *)(a1 + 101) && *(_BYTE *)(a1 + 100))
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v56, "Nonsense option combination : --apply-log=true and --no-softmax=true");
    goto LABEL_62;
  }
  v9 = *(const void **)(a1 + 600);
  if (v9
  {
    v11 = *(std::__shared_weak_count **)(a1 + 608);
    v54 = v10;
    v55 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    if (*v8)
    {
      Component = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v10 + 1), ((v10[2] - v10[1]) >> 3) - 1);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) != 513)
      {
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v56 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
        v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Used --apply-log=true, but nnet ", 32);
        v18 = *(_QWORD *)(a1 + 48);
        v17 = a1 + 48;
        v16 = v18;
        v19 = *(char *)(v17 + 23);
        if (v19 >= 0)
          v20 = v17;
        else
          v20 = v16;
        if (v19 >= 0)
          v21 = *(unsigned __int8 *)(v17 + 23);
        else
          v21 = *(_QWORD *)(v17 + 8);
        v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, v20, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" does not have <softmax> as last component!", 43);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v56);
      }
    }
  }
  else
  {
    v54 = 0;
    v55 = 0;
  }
  if (*(char *)(a1 + 199) < 0)
  {
    if (!*(_QWORD *)(a1 + 184))
      goto LABEL_25;
  }
  else if (!*(_BYTE *)(a1 + 199))
  {
    goto LABEL_25;
  }
  if (!*(_BYTE *)(a1 + 100) && !*v8)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    v45 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Option --class-frame-counts has to be used together with ", 57);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"--no-softmax or --apply-log", 27);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v56);
  }
LABEL_25:
  v52 = 0u;
  v51 = 0u;
  v50 = (int32x2_t)&unk_1E5D34170;
  v53 = 0;
  v23 = *(int32x2_t **)(a3 + 24);
  if (v23)
  {
    kaldi::CuMatrix<float>::operator=(&v50, v23);
    if (quasar::gLogLevel < 4)
      goto LABEL_46;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Set inference speaker code to: ", 31);
    kaldi::operator<<<float>(v24, (uint64_t)&v50);
    goto LABEL_45;
  }
  if (*(char *)(a1 + 175) < 0)
  {
    if (!*(_QWORD *)(a1 + 160))
      goto LABEL_46;
  }
  else if (!*(_BYTE *)(a1 + 175))
  {
    goto LABEL_46;
  }
  std::allocate_shared[abi:ne180100]<std::istringstream,std::allocator<std::istringstream>,std::string &,void>((const std::string *)(a1 + 152), &v56);
  kaldi::CuMatrix<float>::Read((uint64_t)&v50, (uint64_t *)v56, 0, 0);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
  if (*((_QWORD *)&v56 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v56 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v56);
    v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v56, (uint64_t)"Set inference speaker code to be default: ", 42);
    v29 = *(char *)(a1 + 175);
    if (v29 >= 0)
      v30 = a1 + 152;
    else
      v30 = *(_QWORD *)(a1 + 152);
    if (v29 >= 0)
      v31 = *(unsigned __int8 *)(a1 + 175);
    else
      v31 = *(_QWORD *)(a1 + 160);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, v30, v31);
LABEL_45:
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v56);
  }
LABEL_46:
  v32 = *a2;
  v48 = a1 + 224;
  v49 = v32;
  v47 = *(_QWORD *)(a1 + 208);
  v46 = *(_QWORD *)(a1 + 616);
  std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,void>(&v49, &v48, (_QWORD *)(a1 + 600), (__int128 *)(a1 + 176), &v47, (int *)(a1 + 96), (char *)(a1 + 101), &v56, (char *)(a1 + 100), &v46, (char *)(a1 + 136), (int *)(a1 + 140), (char *)(a1 + 144), (uint64_t)&v50, (char *)(a1 + 145), (_QWORD *)(a3 + 40), (int *)(a3 + 116));
  v33 = *(_DWORD **)(a3 + 56);
  if (v33)
    *v33 = *(_DWORD *)(a1 + 96);
  *a4 = v56;
  v34 = v55;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v50);
  if (v34)
  {
    v35 = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
}

double quasar::OnlineSpliceFe::registerParams(quasar::OnlineSpliceFe *this, quasar::SystemConfig *a2)
{
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of left context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 44, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  std::string::basic_string[abi:ne180100]<0>(v7, "right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames of right context");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v7, (uint64_t)this + 48, (uint64_t)__p, 0, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  *(_QWORD *)&result = 0x400000004;
  *(_QWORD *)((char *)this + 44) = 0x400000004;
  return result;
}

void sub_1ADCE5300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineSpliceFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, kaldi::OnlineFeatInputItf **a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  kaldi::OnlineFeatInputItf *v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineSpliceInput,std::allocator<kaldi::OnlineSpliceInput>,kaldi::OnlineFeatInputItf *,int &,int &,void>(&v14, (int *)(a1 + 44), (int *)(a1 + 48), v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineStaticTransformFe::registerParams(quasar::OnlineStaticTransformFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "transform-file");
  std::string::basic_string[abi:ne180100]<0>(__p, "File for any linear (or affine) feature transformation");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)v6, (uint64_t)this + 48, (uint64_t)__p, 1, 1, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE54B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void quasar::OnlineStaticTransformFe::finishInit(int32x2_t *this, quasar::SystemConfig *a2)
{
  quasar::readMatrixFile((uint64_t)&this[6], this + 9);
}

double quasar::OnlineStaticTransformFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _OWORD *a3@<X8>)
{
  double result;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v15[17];

  if (!*a2)
  {
    memset(v15, 0, sizeof(v15));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v15);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"'", 1);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = a1 + 8;
    v7 = v9;
    v10 = *(char *)(v8 + 23);
    if (v10 >= 0)
      v11 = v8;
    else
      v11 = v7;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v8 + 23);
    else
      v12 = *(_QWORD *)(v8 + 8);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, v11, v12);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v15);
  }
  v14 = *a2;
  std::allocate_shared[abi:ne180100]<kaldi::OnlineTransformInput,std::allocator<kaldi::OnlineTransformInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,void>(&v14, v15);
  result = *(double *)v15;
  *a3 = v15[0];
  return result;
}

void quasar::OnlineCacheInputFe::registerParams(quasar::OnlineCacheInputFe *this, quasar::SystemConfig *a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "cache-data");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache all data (e.g. fbank feats)");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 44, (uint64_t)__p, 0, 132, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "cache-analytics");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, cache all analytics data");
  quasar::SystemConfig::Register<BOOL>((uint64_t)a2, (const void **)v6, (uint64_t)this + 45, (uint64_t)__p, 0, 132, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE56D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

char *quasar::OnlineCacheInputFe::createOnlineFeInputImpl@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  char *v6;
  __int16 v7;
  char *result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD v17[17];

  v4 = *a2;
  if (!*a2)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"'", 1);
    v12 = *(_QWORD *)(a1 + 8);
    v11 = a1 + 8;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v17);
  }
  v6 = (char *)operator new(0xA0uLL);
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = &unk_1E5D41680;
  *((_QWORD *)v6 + 1) = 0;
  v7 = *(_WORD *)(a1 + 44);
  *((_QWORD *)v6 + 4) = v4;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 6) = 0;
  *((_QWORD *)v6 + 7) = 0;
  *((_QWORD *)v6 + 8) = 850045863;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 136) = 0u;
  *((_WORD *)v6 + 76) = v7;
  a3[1] = v6;
  *((_QWORD *)v6 + 3) = &off_1E5D2A400;
  result = v6 + 24;
  *a3 = result;
  return result;
}

uint64_t quasar::OnlineComputeAheadInputFe::registerParams(quasar::OnlineComputeAheadInputFe *this, quasar::SystemConfig *a2)
{
  int *v4;
  uint64_t result;
  int v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "max-queued-frames");
  std::string::basic_string[abi:ne180100]<0>(__p, "Max number of frames to compute ahead. Use this to limit memory. Note this is not a strict limit: If we are at or above the limit, we will wait to fetch the next batch. If we are under the limit, we will fetch the next batch, which may cause us to exceed the limit. Values <= 0: no limit Value = 1 (default): compute ahead only 1 batch");
  v4 = (int *)((char *)this + 44);
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)v9, (uint64_t)v4, (uint64_t)__p, 0, 199, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  result = QuasarC_getSpeechRecognizerDisableOverBuffer();
  if ((_DWORD)result)
    v6 = 1;
  else
    v6 = 250;
  *v4 = v6;
  return result;
}

void sub_1ADCE58E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

double quasar::OnlineComputeAheadInputFe::createOnlineFeInputImpl@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t a3@<X3>, _OWORD *a4@<X8>)
{
  double result;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  if (!*a2)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"'", 1);
    v12 = *(_QWORD *)(a1 + 8);
    v11 = a1 + 8;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, v14, v15);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "' cannot occur at the first stage of feature-extract");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v18);
  }
  if (quasar::gLogLevel >= 5)
  {
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v18, (uint64_t)"Creating ComputeAheadFeatInput with maxQueuedFrames=", 52);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v18);
  }
  v17 = 16;
  std::allocate_shared[abi:ne180100]<quasar::ComputeAheadFeatInput,std::allocator<quasar::ComputeAheadFeatInput>,std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,void>((uint64_t)a2, (unsigned __int8 *)(a3 + 16), &v17, (unsigned int *)(a1 + 44), &v18);
  result = *(double *)&v18;
  *a4 = v18;
  return result;
}

void sub_1ADCE5A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va);
  _Unwind_Resume(a1);
}

void quasar::OnlineCmnFe::~OnlineCmnFe(void **this)
{
  *this = off_1E5D34738;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D34738;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineCmvnFe::~OnlineCmvnFe(void **this)
{
  *this = off_1E5D34CF8;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D34CF8;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineDeltaFe::~OnlineDeltaFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineFbankFe::~OnlineFbankFe(void **this)
{
  *this = off_1E5D34FC8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  kaldi::FbankOptions::~FbankOptions(this + 6);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D34FC8;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 22));
  kaldi::FbankOptions::~FbankOptions(this + 6);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineSimpleWaveformFe::~OnlineSimpleWaveformFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineFbankWithPitchFe::~OnlineFbankWithPitchFe(void **this)
{
  *this = off_1E5D38A40;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D38A40;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 34));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineFbankWithAudioAnalyticsFe::~OnlineFbankWithAudioAnalyticsFe(void **this)
{
  *this = off_1E5D3ABE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  kaldi::FbankOptions::~FbankOptions(this + 6);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D3ABE0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 40));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 38));
  kaldi::FbankOptions::~FbankOptions(this + 6);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineLdaFe::~OnlineLdaFe(void **this)
{
  *this = off_1E5D34778;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D34778;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 10));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineMfccFe::~OnlineMfccFe(void **this)
{
  *this = off_1E5D34D38;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D34D38;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 19));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineNnetForwardFe::~OnlineNnetForwardFe(void **this)
{
  quasar::OnlineNnetForwardFe::~OnlineNnetForwardFe(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *this = off_1E5D37348;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 81));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 79));
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 32));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 30));
  if (*((char *)this + 231) < 0)
    operator delete(this[26]);
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  v2 = this[18];
  if (v2)
  {
    this[19] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void quasar::SpeechActivityDetectorFe::~SpeechActivityDetectorFe(void **this)
{
  *this = off_1E5CFF200;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5CFF200;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 8));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 6));
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::AmFusionEncoderFe::~AmFusionEncoderFe(quasar::AmFusionEncoderFe *this)
{
  quasar::AmFusionEncoderFe::~AmFusionEncoderFe(this);
  JUMPOUT(0x1AF44D190);
}

{
  *(_QWORD *)this = off_1E5D363A8;
  std::__tree<std::string>::destroy((uint64_t)this + 600, *((char **)this + 76));
  if (*((char *)this + 599) < 0)
    operator delete(*((void **)this + 72));
  if (*((char *)this + 567) < 0)
    operator delete(*((void **)this + 68));
  quasar::SpeechModelInfo::~SpeechModelInfo((quasar::AmFusionEncoderFe *)((char *)this + 272));
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  if (*((char *)this + 183) < 0)
    operator delete(*((void **)this + 20));
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 96);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 80);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 64);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  *(_QWORD *)this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void quasar::OnlineAcousticEncoderFe::~OnlineAcousticEncoderFe(void **this)
{
  quasar::OnlineAcousticEncoderFe::~OnlineAcousticEncoderFe(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;

  *this = off_1E5D393F0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 74));
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 27));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 25));
  if (*((char *)this + 191) < 0)
    operator delete(this[21]);
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  v2 = this[14];
  if (v2)
  {
    this[15] = v2;
    operator delete(v2);
  }
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void quasar::OnlineNnetForwardSkipFe::~OnlineNnetForwardSkipFe(void **this)
{
  quasar::OnlineNnetForwardSkipFe::~OnlineNnetForwardSkipFe(this);
  JUMPOUT(0x1AF44D190);
}

{
  *this = off_1E5D39430;
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)(this + 79));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 77));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 75));
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)(this + 28));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(this + 26));
  if (*((char *)this + 199) < 0)
    operator delete(this[22]);
  if (*((char *)this + 175) < 0)
    operator delete(this[19]);
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void quasar::OnlineSpliceFe::~OnlineSpliceFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineStaticTransformFe::~OnlineStaticTransformFe(void **this)
{
  *this = off_1E5D39470;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E5D39470;
  kaldi::Matrix<float>::~Matrix((uint64_t)(this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineCacheInputFe::~OnlineCacheInputFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineComputeAheadInputFe::~OnlineComputeAheadInputFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

void quasar::OnlineSubsampleFe::~OnlineSubsampleFe(void **this)
{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = &unk_1E5D35D78;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1AF44D190);
}

kaldi::FbankOptions *kaldi::FbankOptions::FbankOptions(kaldi::FbankOptions *this)
{
  *(_QWORD *)this = off_1E5D29D98;
  *(_OWORD *)((char *)this + 8) = xmmword_1AE140DB0;
  *((_DWORD *)this + 6) = 1064849900;
  *((_BYTE *)this + 28) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 4, "povey");
  *((_WORD *)this + 28) = 257;
  *(_QWORD *)((char *)this + 60) = 0x17BF800000;
  *(_OWORD *)((char *)this + 68) = xmmword_1AE15BDD0;
  *((_WORD *)this + 42) = 0;
  *((_BYTE *)this + 88) = 0;
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = 16842753;
  return this;
}

kaldi::FbankWithPitchOptions *kaldi::FbankWithPitchOptions::FbankWithPitchOptions(kaldi::FbankWithPitchOptions *this)
{
  *(_OWORD *)this = xmmword_1AE140DB0;
  *((_DWORD *)this + 4) = 1064849900;
  *((_BYTE *)this + 20) = 1;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)this + 3, "povey");
  *((_WORD *)this + 24) = 257;
  *(_QWORD *)((char *)this + 52) = 0x17BF800000;
  *(_OWORD *)((char *)this + 60) = xmmword_1AE15BDD0;
  *((_WORD *)this + 38) = 0;
  *((_OWORD *)this + 5) = xmmword_1AE1404D0;
  *((_OWORD *)this + 6) = xmmword_1AE1404E0;
  *((_OWORD *)this + 7) = xmmword_1AE1404F0;
  *((_QWORD *)this + 16) = 0x500000001;
  *((_QWORD *)this + 17) = 0;
  *((_BYTE *)this + 144) = 0;
  *((_DWORD *)this + 37) = 500;
  *((_WORD *)this + 76) = 256;
  *(_OWORD *)((char *)this + 156) = xmmword_1AE16F260;
  *(_QWORD *)((char *)this + 172) = 0x3BA3D70A42C80000;
  *(_OWORD *)((char *)this + 180) = xmmword_1AE16F270;
  *((_DWORD *)this + 49) = 65793;
  *((_BYTE *)this + 200) = 0;
  *((_BYTE *)this + 204) = 0;
  *((_DWORD *)this + 52) = 0;
  *((_DWORD *)this + 53) = 16842753;
  return this;
}

double kaldi::FbankWithAudioAnalyticsOptions::FbankWithAudioAnalyticsOptions(kaldi::FbankWithAudioAnalyticsOptions *this)
{
  kaldi::FbankOptions *v1;
  double result;

  v1 = kaldi::FbankOptions::FbankOptions(this);
  *(_QWORD *)v1 = &unk_1E5D2ADB0;
  *(_OWORD *)((char *)v1 + 100) = xmmword_1AE1404D0;
  *(_OWORD *)((char *)v1 + 116) = xmmword_1AE1404E0;
  *(_OWORD *)((char *)v1 + 132) = xmmword_1AE1404F0;
  *(_QWORD *)((char *)v1 + 148) = 0x500000001;
  *(_QWORD *)((char *)v1 + 156) = 0;
  *((_BYTE *)v1 + 164) = 0;
  *((_DWORD *)v1 + 42) = 500;
  *((_WORD *)v1 + 86) = 256;
  *((_DWORD *)v1 + 44) = -1;
  *(_OWORD *)((char *)v1 + 180) = xmmword_1AE16F260;
  *((_DWORD *)v1 + 50) = 1000593162;
  *(_OWORD *)((char *)v1 + 204) = xmmword_1AE16F270;
  result = 7.7485972e-304;
  *(_QWORD *)((char *)v1 + 220) = 0x101010000010101;
  *((_BYTE *)v1 + 228) = 0;
  return result;
}

void kaldi::FbankWithAudioAnalyticsOptions::~FbankWithAudioAnalyticsOptions(void **this)
{
  kaldi::FbankOptions::~FbankOptions(this);
  JUMPOUT(0x1AF44D190);
}

void kaldi::PitchExtractionOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "sample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Waveform data sample frequency (must match the waveform file, if specified there)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-length");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame length in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frame-shift");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frame shift in milliseconds");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "preemphasis-coefficient");
  std::string::basic_string[abi:ne180100]<0>(__p, "Coefficient for use in signal preemphasis (deprecated)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "min. F0 to search for (Hz)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "max. F0 to search for (Hz)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "soft-min-f0");
  std::string::basic_string[abi:ne180100]<0>(__p, "Minimum f0, applied in soft way, must not exceed min-f0");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "penalty-factor");
  std::string::basic_string[abi:ne180100]<0>(__p, "cost factor for FO change.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-cutoff");
  std::string::basic_string[abi:ne180100]<0>(__p, "cutoff frequency for LowPass filter (Hz) ");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "resample-frequency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Frequency that we down-sample the signal to.  Must be more than twice lowpass-cutoff");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 36, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "Smallest relative change in pitch that our algorithm measures");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 40, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast");
  std::string::basic_string[abi:ne180100]<0>(__p, "Increasing this factor reduces NCCF for quiet frames");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 44, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "nccf-ballast-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "This is useful mainly for debug; it affects how the NCCF ballast is computed.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 72, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "lowpass-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width of lowpass filter, more gives sharper filter");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 48, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "upsample-filter-width");
  std::string::basic_string[abi:ne180100]<0>(__p, "Integer that determines filter width when upsampling NCCF");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 52, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "frames-per-chunk");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for offline pitch extraction (e.g. compute-kaldi-pitch-feats), you can set it to a small nonzero value, such as 10, for better feature compatibility with online decoding (affects energy normalization in the algorithm)");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 60, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "simulate-first-pass-online");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, compute-kaldi-pitch-feats will output features that correspond to what an online decoder would see in the first pass of decoding-- not the final version of the features, which is the default.  Relevant if --frames-per-chunk > 0");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 64, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "recompute-frame");
  std::string::basic_string[abi:ne180100]<0>(__p, "Only relevant for online pitch extraction, or for compatibility with online pitch extraction.  A non-critical parameter; the frame at which we recompute some of the forward pointers, after revising our estimate of the signal energy."
    "  Relevant if--frames-per-chunk > 0");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 68, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "max-frames-latency");
  std::string::basic_string[abi:ne180100]<0>(__p, "Maximum number of frames of latency that we allow pitch tracking to introduce into the feature processing (affects output only if --frames-per-chunk > 0 and --simulate-first-pass-online=true");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 56, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "snip-edges");
  std::string::basic_string[abi:ne180100]<0>(__p, "If this is set to false, the incomplete frames near the ending edge won't be snipped, so that the number of frames is the file size divided by the frame-shift. This makes different types of features give the same number of frames.");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 73, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE6F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::ProcessPitchOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the final normalized log-pitch value");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for final POV (probability of voicing) feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "This can be used to add an offset to the POV feature. Intended for use in online decoding as a substitute for  CMN.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final delta log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta2-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final 2nd-order log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 16, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-noise-stddev");
  std::string::basic_string[abi:ne180100]<0>(__p, "Standard deviation for noise we add to the delta log-pitch (before scaling); should be about the same as delta-pitch"
    " option to pitch creation.  The purpose is to get rid of peaks in the delta-pitch caused by discretization of pitch values.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Left-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Right-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames on each side of central frame, to use for delta window.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delay");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames by which the pitch information is delayed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 36, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov-feature");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the warped NCCF is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 40, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-normalized-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the log-pitch with POV-weighted mean subtraction over 1.5 second window is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 41, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 42, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta2-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, 2nd order time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 43, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-raw-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, log(pitch) is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 44, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE75C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void kaldi::ProcessAudioAnalyticsOptions::Register(uint64_t a1, uint64_t a2)
{
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  std::string::basic_string[abi:ne180100]<0>(v6, "pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for the final normalized log-pitch value");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Scaling factor for final POV (probability of voicing) feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 4, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "pov-offset");
  std::string::basic_string[abi:ne180100]<0>(__p, "This can be used to add an offset to the POV feature. Intended for use in online decoding as a substitute for  CMN.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 8, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-scale");
  std::string::basic_string[abi:ne180100]<0>(__p, "Term to scale the final delta log-pitch feature");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 12, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-pitch-noise-stddev");
  std::string::basic_string[abi:ne180100]<0>(__p, "Standard deviation for noise we add to the delta log-pitch (before scaling); should be about the same as delta-pitch"
    " option to pitch creation.  The purpose is to get rid of peaks in the delta-pitch caused by discretization of pitch values.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 24))(a2, v6, a1 + 20, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-left-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Left-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 24, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "normalization-right-context");
  std::string::basic_string[abi:ne180100]<0>(__p, "Right-context (in frames) for moving window normalization");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 28, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delta-window");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames on each side of central frame, to use for delta window.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 32, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "delay");
  std::string::basic_string[abi:ne180100]<0>(__p, "Number of frames by which the pitch information is delayed.");
  (*(void (**)(uint64_t, void **, uint64_t, void **))(*(_QWORD *)a2 + 8))(a2, v6, a1 + 36, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov-feature");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the warped NCCF is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 40, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-normalized-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, the log-pitch with POV-weighted mean subtraction over 1.5 second window is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 41, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-delta-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, time derivative of log-pitch is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 42, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-raw-log-pitch");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, log(pitch) is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 44, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pitch-period");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, pitch period is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 45, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-pov");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, probability of voicing is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 46, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  std::string::basic_string[abi:ne180100]<0>(v6, "add-max-amplitude");
  std::string::basic_string[abi:ne180100]<0>(__p, "If true, max amplitude is added to output features");
  (**(void (***)(uint64_t, void **, uint64_t, void **))a2)(a2, v6, a1 + 47, __p);
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
}

void sub_1ADCE7C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__emplace_unique_key_args<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::Word>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

_OWORD *std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::__construct_node<quasar::LmeDataFactoryBase::Word>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _OWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;

  v5 = a1 + 8;
  result = operator new(0x70uLL);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v5;
  result[2] = *(_OWORD *)a2;
  *((_QWORD *)result + 6) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)((char *)result + 56) = *(_OWORD *)(a2 + 24);
  *((_QWORD *)result + 9) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *((_DWORD *)result + 20) = *(_DWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v7 = (_QWORD *)(a2 + 64);
  *((_QWORD *)result + 11) = *(_QWORD *)(a2 + 56);
  *((_QWORD *)result + 12) = v8;
  v10 = (char *)(result + 6);
  *((_QWORD *)result + 13) = v9;
  if (v9)
  {
    *(_QWORD *)(v8 + 16) = v10;
    *(_QWORD *)(a2 + 56) = v7;
    *v7 = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  else
  {
    *((_QWORD *)result + 11) = v10;
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void std::unique_ptr<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<quasar::LmeDataFactoryBase::Word,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>(uint64_t a1)
{
  std::__tree<std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::__map_value_compare<std::pair<quasar::PronType,std::string>,std::__value_type<std::pair<quasar::PronType,std::string>,float>,std::less<std::pair<quasar::PronType,std::string>>,true>,std::allocator<std::__value_type<std::pair<quasar::PronType,std::string>,float>>>::destroy(a1 + 56, *(char **)(a1 + 64));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(a1, *a2);
    std::__tree<quasar::LmeDataFactoryBase::Word,quasar::LmeDataFactoryBase::WordOrthoComparator,std::allocator<quasar::LmeDataFactoryBase::Word>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<quasar::LmeDataFactoryBase::Word,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineSubsampleFe,std::allocator<kaldi::OnlineSubsampleFe>,kaldi::OnlineFeatInputItf *,int &,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, int *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x30uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,std::allocator<kaldi::OnlineSubsampleFe>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADCE828C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,std::allocator<kaldi::OnlineSubsampleFe>,0>(_QWORD *a1, kaldi::OnlineFeatInputItf **a2, int *a3)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41808;
  a1[1] = 0;
  kaldi::OnlineSubsampleFe::OnlineSubsampleFe((uint64_t)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1ADCE82E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41808;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineSubsampleFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineCmnFe,std::allocator<quasar::OnlineCmnFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmnFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8390(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmnFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42560;
  a1[1] = 0;
  quasar::OnlineCmnFe::OnlineCmnFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE83DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCmnFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCmnFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCmnFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineCmvnFe,std::allocator<quasar::OnlineCmvnFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x98uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmvnFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE848C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCmvnFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D426E8;
  a1[1] = 0;
  quasar::OnlineCmvnFe::OnlineCmvnFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE84D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D426E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D426E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCmvnFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineDeltaFe,std::allocator<quasar::OnlineDeltaFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDeltaFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8588(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineDeltaFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42838;
  a1[1] = 0;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = off_1E5D34F88;
  *(_QWORD *)((char *)a1 + 68) = 0x200000002;
  return a1;
}

void sub_1ADCE85E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42838;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42838;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineDeltaFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankFe,std::allocator<quasar::OnlineFbankFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD8uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8698(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42870;
  a1[1] = 0;
  quasar::OnlineFbankFe::OnlineFbankFe(a1 + 3, a2);
  return a1;
}

void sub_1ADCE86E4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithPitchFe,std::allocator<quasar::OnlineFbankWithPitchFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x138uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithPitchFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8794(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithPitchFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43C90;
  a1[1] = 0;
  quasar::OnlineFbankWithPitchFe::OnlineFbankWithPitchFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE87E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43C90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43C90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankWithPitchFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineLdaFe,std::allocator<quasar::OnlineLdaFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLdaFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8890(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineLdaFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42598;
  a1[1] = 0;
  quasar::OnlineLdaFe::OnlineLdaFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE88DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineLdaFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42598;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineLdaFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42598;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineLdaFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineMfccFe,std::allocator<quasar::OnlineMfccFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xC0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineMfccFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE898C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineMfccFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42720;
  a1[1] = 0;
  quasar::OnlineMfccFe::OnlineMfccFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE89D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineMfccFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42720;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineMfccFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42720;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineMfccFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardFe,std::allocator<quasar::OnlineNnetForwardFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2B0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8A88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43638;
  a1[1] = 0;
  quasar::OnlineNnetForwardFe::OnlineNnetForwardFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE8AD4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43638;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43638;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineNnetForwardFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::AmFusionEncoderFe,std::allocator<quasar::AmFusionEncoderFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x288uLL);
  result = std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AmFusionEncoderFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8B84(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::AmFusionEncoderFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D42F70;
  a1[1] = 0;
  quasar::AmFusionEncoderFe::AmFusionEncoderFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE8BD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42F70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::AmFusionEncoderFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::SpeechActivityDetectorFe,std::allocator<quasar::SpeechActivityDetectorFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechActivityDetectorFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8C80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::SpeechActivityDetectorFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5CFFE00;
  a1[1] = 0;
  quasar::SpeechActivityDetectorFe::SpeechActivityDetectorFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE8CCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFE00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::SpeechActivityDetectorFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineAcousticEncoderFe,std::allocator<quasar::OnlineAcousticEncoderFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x278uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAcousticEncoderFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8D7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAcousticEncoderFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44010;
  a1[1] = 0;
  quasar::OnlineAcousticEncoderFe::OnlineAcousticEncoderFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE8DC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44010;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44010;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAcousticEncoderFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineNnetForwardSkipFe,std::allocator<quasar::OnlineNnetForwardSkipFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x2C0uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardSkipFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8E78(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineNnetForwardSkipFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44048;
  a1[1] = 0;
  quasar::OnlineNnetForwardSkipFe::OnlineNnetForwardSkipFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE8EC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44048;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44048;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineNnetForwardSkipFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSpliceFe,std::allocator<quasar::OnlineSpliceFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSpliceFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE8F74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSpliceFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D429F8;
  a1[1] = 0;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = off_1E5D35370;
  return a1;
}

void sub_1ADCE8FCC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D429F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D429F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSpliceFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSubsampleFe,std::allocator<quasar::OnlineSubsampleFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSubsampleFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE907C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSubsampleFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43018;
  a1[1] = 0;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = off_1E5D36568;
  return a1;
}

void sub_1ADCE90D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSubsampleFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineStaticTransformFe,std::allocator<quasar::OnlineStaticTransformFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x88uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineStaticTransformFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9184(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineStaticTransformFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44080;
  a1[1] = 0;
  quasar::OnlineStaticTransformFe::OnlineStaticTransformFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE91D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44080;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44080;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineStaticTransformFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

uint64_t std::allocate_shared[abi:ne180100]<quasar::OnlineCacheInputFe,std::allocator<quasar::OnlineCacheInputFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCacheInputFe>,0>((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9280(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineCacheInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineCacheInputFe>,0>(uint64_t a1, __int128 *a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_1E5D43280;
  *(_QWORD *)(a1 + 8) = 0;
  quasar::FeatureExtractor::FeatureExtractor(a1 + 24, a2);
  *(_QWORD *)(a1 + 24) = off_1E5D369B8;
  *(_WORD *)(a1 + 68) = 257;
  return a1;
}

void sub_1ADCE92E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineComputeAheadInputFe,std::allocator<quasar::OnlineComputeAheadInputFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineComputeAheadInputFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineComputeAheadInputFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44438;
  a1[1] = 0;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = off_1E5D39A30;
  return a1;
}

void sub_1ADCE9390(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44438;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineComputeAheadInputFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineFbankWithAudioAnalyticsFe,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x168uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9440(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineFbankWithAudioAnalyticsFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D44A90;
  a1[1] = 0;
  quasar::OnlineFbankWithAudioAnalyticsFe::OnlineFbankWithAudioAnalyticsFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE948C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44A90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineFbankWithAudioAnalyticsFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineAppendFe,std::allocator<quasar::OnlineAppendFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAppendFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE953C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineAppendFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D429C0;
  a1[1] = 0;
  quasar::OnlineAppendFe::OnlineAppendFe((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE9588(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineAppendFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D429C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineAppendFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D429C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineAppendFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::OnlineSimpleWaveformFe,std::allocator<quasar::OnlineSimpleWaveformFe>,std::string const&,void>@<X0>(__int128 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x58uLL);
  result = std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSimpleWaveformFe>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9638(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<quasar::OnlineSimpleWaveformFe>,0>(_QWORD *a1, __int128 *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D43D00;
  a1[1] = 0;
  quasar::FeatureExtractor::FeatureExtractor((uint64_t)(a1 + 3), a2);
  a1[3] = off_1E5D38B48;
  __asm { FMOV            V0.2S, #-1.0 }
  *(_QWORD *)((char *)a1 + 68) = _D0;
  *(_QWORD *)((char *)a1 + 76) = 0xA4579F000;
  return a1;
}

void sub_1ADCE96A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D43D00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::OnlineSimpleWaveformFe>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 32))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineCmnInput,std::allocator<kaldi::OnlineCmnInput>,kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, uint64_t *a4@<X4>, int *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmnInput>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADCE9788(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmnInput>,0>(_QWORD *a1, uint64_t *a2, int *a3, int *a4, uint64_t *a5, int *a6)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41568;
  a1[1] = 0;
  kaldi::OnlineCmvnInput::OnlineCmvnInput((uint64_t)(a1 + 3), *a2, *a3, *a4, 0, *a5, *a6);
  a1[3] = &unk_1E5D2A150;
  return a1;
}

void sub_1ADCE9800(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCmnInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineCmvnInput::OnlineCmvnInput(uint64_t a1, uint64_t a2, int a3, int a4, char a5, uint64_t a6, int a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  double v19;
  int v20;
  double v21;
  const double *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;

  *(_QWORD *)a1 = &off_1E5D2A2C8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a4;
  *(_BYTE *)(a1 + 24) = a5;
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  kaldi::Matrix<float>::Matrix(a1 + 32, (a3 + 1), v12, 0, 0);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  kaldi::Vector<double>::Resize((void **)(a1 + 88), v13, 0);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  kaldi::Vector<double>::Resize((void **)(a1 + 112), v14, 0);
  *(_QWORD *)(a1 + 136) = a6;
  *(_QWORD *)(a1 + 144) = 0x3FF0000000000000;
  *(_DWORD *)(a1 + 152) = a7;
  if (a6 && kaldi::MatrixBase<float>::NumRows(a6))
  {
    kaldi::MatrixBase<float>::NumCols(*(_QWORD *)(a1 + 136));
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8));
    v16 = *(_QWORD *)(a1 + 136);
    v17 = *(_DWORD *)(v16 + 12);
    *(double *)(a1 + 144) = *(float *)(*(_QWORD *)v16 + 4 * v15);
    kaldi::SubMatrix<float>::SubMatrix((uint64_t)&v23, v16, 0, v17, 0, v15);
    kaldi::Matrix<double>::Matrix<float>(v26, &v23, 111);
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v23);
    v18 = *(_DWORD *)(a1 + 152);
    v19 = *(double *)(a1 + 144);
    v24 = 0;
    v25 = 0;
    v23 = (const double *)v26[0];
    LODWORD(v24) = kaldi::MatrixBase<float>::NumCols((uint64_t)v26);
    kaldi::VectorBase<double>::AddVec<double>(a1 + 88, &v23, (double)v18 / v19);
    v20 = *(_DWORD *)(a1 + 152);
    v21 = *(double *)(a1 + 144);
    v24 = 0;
    v25 = 0;
    v23 = (const double *)(v26[0] + 8 * v27);
    LODWORD(v24) = kaldi::MatrixBase<float>::NumCols((uint64_t)v26);
    kaldi::VectorBase<double>::AddVec<double>(a1 + 112, &v23, (double)v20 / v21);
    kaldi::Matrix<float>::~Matrix((uint64_t)v26);
  }
  return a1;
}

void sub_1ADCE9A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  quasar::Bitmap *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  va_list va;

  va_start(va, a6);
  kaldi::Matrix<float>::~Matrix((uint64_t)va);
  kaldi::Vector<float>::Destroy(v9);
  kaldi::Vector<float>::Destroy(v8);
  kaldi::Matrix<float>::~Matrix(v7);
  quasar::Bitmap::~Bitmap(v6);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineCmvnInput,std::allocator<kaldi::OnlineCmvnInput>,kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, int *a3@<X3>, char *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0xB8uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmvnInput>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADCE9B48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,BOOL,kaldi::Matrix<float> *,int &,std::allocator<kaldi::OnlineCmvnInput>,0>(_QWORD *a1, uint64_t *a2, int *a3, int *a4, char *a5, uint64_t *a6, int *a7)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41610;
  a1[1] = 0;
  kaldi::OnlineCmvnInput::OnlineCmvnInput((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5, *a6, *a7);
  return a1;
}

void sub_1ADCE9BAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41610;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41610;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCmvnInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineDeltaInput,std::allocator<kaldi::OnlineDeltaInput>,kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,void>@<X0>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineDeltaInput>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADCE9C64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::DeltaFeaturesOptions &,kaldi::OnlineFeatInputItf *,std::allocator<kaldi::OnlineDeltaInput>,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D416B8;
  kaldi::OnlineDeltaInput::OnlineDeltaInput((uint64_t)(a1 + 3), a2, *a3);
  return a1;
}

void sub_1ADCE9CB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D416B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D416B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineDeltaInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::SimpleWaveformReader,std::allocator<kaldi::SimpleWaveformReader>,kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,void>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, unsigned __int8 *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x40uLL);
  result = std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,std::allocator<kaldi::SimpleWaveformReader>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADCE9D7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::ResamplerOptions &,BOOL &,std::allocator<kaldi::SimpleWaveformReader>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned __int8 *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41958;
  a1[1] = 0;
  kaldi::SimpleWaveformReader::SimpleWaveformReader(a1 + 3, *a2, a3, *a4);
  return a1;
}

void sub_1ADCE9DD0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::SimpleWaveformReader>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::Fbank,std::allocator<kaldi::Fbank>,kaldi::FbankOptions &,void>@<X0>(const kaldi::FbankOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xD0uLL);
  result = std::__shared_ptr_emplace<kaldi::Fbank>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankOptions &,std::allocator<kaldi::Fbank>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCE9E80(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::Fbank>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankOptions &,std::allocator<kaldi::Fbank>,0>(_QWORD *a1, const kaldi::FbankOptions *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41BC0;
  a1[1] = 0;
  kaldi::Fbank::Fbank((kaldi::Fbank *)(a1 + 3), a2);
  return a1;
}

void sub_1ADCE9ECC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41BC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41BC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::Fbank>::__on_zero_shared(uint64_t a1)
{
  kaldi::Fbank::~Fbank((kaldi::Fbank *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Fbank>,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1ADCE9FC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Fbank*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::Fbank>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7, uint64_t a8)
{
  a1[2] = 0;
  *a1 = &unk_1E5D414F8;
  a1[1] = 0;
  kaldi::OnlineFeInput<kaldi::Fbank>::OnlineFeInput((uint64_t)(a1 + 3), *a2, *a3, (int)*a4, (int)*a5, (int)*a6, *a7, a8);
  return a1;
}

void sub_1ADCEA030(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D414F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D414F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Fbank>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::OnlineFeInput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t *v9;
  float v10;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)a1 = &unk_1E5D29F30;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = a7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = *(float *)(a8 + 4);
  if (v10 > 0.0 && *(float *)a8 != v10)
  {
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)a8;
    v14 = (uint64_t *)*v9;
    *v9 = v13;
    if (v14)
      std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v9, v14);
  }
  return a1;
}

void sub_1ADCEA154(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v6;

  v6 = *v3;
  *v3 = 0;
  if (v6)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::Compute(uint64_t a1, uint64_t *a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  void *v31;
  _QWORD v32[33];

  v4 = (int32x2_t *)*a2;
  v5 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    v7 = *(_DWORD *)(a1 + 36);
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v9 < 0 != v8)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    if ((int)v6 >= v10)
      v12 = v10;
    else
      v12 = v6;
    v11 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), &v31, v12);
    v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        v16 = v32;
      }
      else
      {
        v15 = (const void **)&v29;
        v16 = v30;
      }
    }
    else
    {
      v15 = (const void **)&v31;
      v16 = v32;
    }
    v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    v27 = 0;
    v28 = 0;
    v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    v18 = *(_DWORD *)(a1 + 72);
    v25 = 0;
    v23 = v26;
    v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    v19 = *(int *)(a1 + 72);
    v20 = *(_DWORD *)v16;
    v25 = 0;
    v23 = &v26[4 * v19];
    v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24))
      v21 = v11;
    else
      v21 = 0;
    if ((v21 & 1) != 0)
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    }
    else
    {
      kaldi::Fbank::Compute(*(kaldi::Fbank **)(a1 + 16), (uint64_t)&v26, v4, (void **)(a1 + 64), 1.0, a2[2], v11 ^ 1);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1ADCEA3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::Dim(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80) + *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 104);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::Fbank>::~OnlineFeInput(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29F30;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29F30;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineFeInput<kaldi::Fbank>::getSnrTracker@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(result + 16);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::FbankWithPitch,std::allocator<kaldi::FbankWithPitch>,kaldi::FbankWithPitchOptions &,void>@<X0>(const kaldi::FbankWithPitchOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x160uLL);
  result = std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithPitchOptions &,std::allocator<kaldi::FbankWithPitch>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCEA59C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithPitchOptions &,std::allocator<kaldi::FbankWithPitch>,0>(_QWORD *a1, const kaldi::FbankWithPitchOptions *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41530;
  a1[1] = 0;
  kaldi::FbankWithPitch::FbankWithPitch((kaldi::FbankWithPitch *)(a1 + 3), a2);
  return a1;
}

void sub_1ADCEA5E8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41530;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::FbankWithPitch>::__on_zero_shared(uint64_t a1)
{
  kaldi::FbankWithPitch::~FbankWithPitch((kaldi::FbankWithPitch *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithPitch>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADCEA6CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithPitch*,float,float,float &,int &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7)
{
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _QWORD v20[2];

  a1[2] = 0;
  *a1 = &unk_1E5D41450;
  a1[1] = 0;
  v8 = *a2;
  v9 = (int)*a4;
  v10 = (int)*a5;
  v11 = (int)*a6;
  v12 = *a3;
  v13 = *a7;
  __asm { FMOV            V0.2S, #-1.0 }
  v20[0] = _D0;
  v20[1] = 0xA4579F000;
  kaldi::OnlineFeInput<kaldi::FbankWithPitch>::OnlineFeInput((uint64_t)(a1 + 3), v8, v12, v9, v10, v11, v13, (uint64_t)v20);
  return a1;
}

void sub_1ADCEA760(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41450;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41450;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithPitch>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::OnlineFeInput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t *v9;
  float v10;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)a1 = &unk_1E5D29DF8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = a7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = *(float *)(a8 + 4);
  if (v10 > 0.0 && *(float *)a8 != v10)
  {
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)a8;
    v14 = (uint64_t *)*v9;
    *v9 = v13;
    if (v14)
      std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v9, v14);
  }
  return a1;
}

void sub_1ADCEA884(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v6;

  v6 = *v3;
  *v3 = 0;
  if (v6)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::Compute(uint64_t a1, uint64_t *a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  void *v31;
  _QWORD v32[33];

  v4 = (int32x2_t *)*a2;
  v5 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    v7 = *(_DWORD *)(a1 + 36);
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v9 < 0 != v8)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    if ((int)v6 >= v10)
      v12 = v10;
    else
      v12 = v6;
    v11 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), &v31, v12);
    v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        v16 = v32;
      }
      else
      {
        v15 = (const void **)&v29;
        v16 = v30;
      }
    }
    else
    {
      v15 = (const void **)&v31;
      v16 = v32;
    }
    v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    v27 = 0;
    v28 = 0;
    v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    v18 = *(_DWORD *)(a1 + 72);
    v25 = 0;
    v23 = v26;
    v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    v19 = *(int *)(a1 + 72);
    v20 = *(_DWORD *)v16;
    v25 = 0;
    v23 = &v26[4 * v19];
    v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24))
      v21 = v11;
    else
      v21 = 0;
    if ((v21 & 1) != 0)
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    }
    else
    {
      kaldi::FbankWithPitch::Compute(*(kaldi::FbankWithPitch **)(a1 + 16), (uint64_t)&v26, v4, a1 + 64, 1.0, a2[2], v11 ^ 1);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1ADCEAB0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::Dim(uint64_t a1, uint8x8_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  a2.i32[0] = *(_DWORD *)(v2 + 212);
  return vaddvq_s32((int32x4_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a2)))
       + *(unsigned __int8 *)(v2 + 220)
       + *(_DWORD *)(v2 + 72)
       + *(unsigned __int8 *)(v2 + 216);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::FbankWithPitch>::~OnlineFeInput(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29DF8;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29DF8;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithPitch>::getSnrTracker@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(result + 16);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::FbankWithAudioAnalytics,std::allocator<kaldi::FbankWithAudioAnalytics>,kaldi::FbankWithAudioAnalyticsOptions &,void>@<X0>(const kaldi::FbankWithAudioAnalyticsOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithAudioAnalyticsOptions &,std::allocator<kaldi::FbankWithAudioAnalytics>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCEACEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__shared_ptr_emplace[abi:ne180100]<kaldi::FbankWithAudioAnalyticsOptions &,std::allocator<kaldi::FbankWithAudioAnalytics>,0>(_QWORD *a1, const kaldi::FbankWithAudioAnalyticsOptions *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41A00;
  a1[1] = 0;
  kaldi::FbankWithAudioAnalytics::FbankWithAudioAnalytics((kaldi::FbankWithAudioAnalytics *)(a1 + 3), a2);
  return a1;
}

void sub_1ADCEAD38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41A00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::FbankWithAudioAnalytics>::__on_zero_shared(uint64_t a1)
{
  kaldi::FbankWithAudioAnalytics::~FbankWithAudioAnalytics((kaldi::FbankWithAudioAnalytics *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, int *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,0>(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1ADCEAE2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::FbankWithAudioAnalytics*,float,float,float &,int &,kaldi::ResamplerOptions &,std::allocator<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6, int *a7, uint64_t a8)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41488;
  a1[1] = 0;
  kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::OnlineFeInput((uint64_t)(a1 + 3), *a2, *a3, (int)*a4, (int)*a5, (int)*a6, *a7, a8);
  return a1;
}

void sub_1ADCEAE9C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41488;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41488;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::OnlineFeInput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t *v9;
  float v10;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)a1 = &unk_1E5D29E60;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = a7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = *(float *)(a8 + 4);
  if (v10 > 0.0 && *(float *)a8 != v10)
  {
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)a8;
    v14 = (uint64_t *)*v9;
    *v9 = v13;
    if (v14)
      std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v9, v14);
  }
  return a1;
}

void sub_1ADCEAFC0(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v6;

  v6 = *v3;
  *v3 = 0;
  if (v6)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::Compute(uint64_t a1, int32x2_t **a2)
{
  int32x2_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  const void **v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  char v21;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  void *v31;
  _QWORD v32[33];

  v4 = *a2;
  v5 = kaldi::MatrixBase<float>::NumRows((uint64_t)*a2);
  if (v5 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v31, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v31);
    }
    return 1;
  }
  else
  {
    v6 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v5 - 1));
    v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    kaldi::Vector<float>::Resize(&v31, v6, 1);
    v7 = *(_DWORD *)(a1 + 36);
    v8 = __OFSUB__(v7, 1);
    v9 = v7 - 1;
    if (v9 < 0 != v8)
      v10 = 0;
    else
      v10 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v9;
    if ((int)v6 >= v10)
      v12 = v10;
    else
      v12 = v6;
    v11 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), &v31, v12);
    v29 = 0;
    v30[0] = 0;
    v30[1] = 0;
    v13 = *(_QWORD *)(a1 + 88);
    if (v13)
    {
      v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v15 = (const void **)&v31;
      kaldi::Resampler::Resample(v13, (uint64_t)&v31, (uint64_t)&v29, v14);
      if (SLODWORD(v30[0]) <= 0)
      {
        v16 = v32;
      }
      else
      {
        v15 = (const void **)&v29;
        v16 = v30;
      }
    }
    else
    {
      v15 = (const void **)&v31;
      v16 = v32;
    }
    v17 = (*(_DWORD *)v16 + *(_DWORD *)(a1 + 72));
    v27 = 0;
    v28 = 0;
    v26 = 0;
    kaldi::Vector<float>::Resize((void **)&v26, v17, 1);
    v18 = *(_DWORD *)(a1 + 72);
    v25 = 0;
    v23 = v26;
    v24 = v18;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, (const void **)(a1 + 64));
    v19 = *(int *)(a1 + 72);
    v20 = *(_DWORD *)v16;
    v25 = 0;
    v23 = &v26[4 * v19];
    v24 = v20;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v23, v15);
    if ((int)v27 < *(_DWORD *)(a1 + 24))
      v21 = v11;
    else
      v21 = 0;
    if ((v21 & 1) != 0)
    {
      kaldi::Matrix<float>::Resize(v4, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v27, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v26);
    }
    else
    {
      kaldi::FbankWithAudioAnalytics::Compute(*(kaldi::FbankWithAudioAnalytics **)(a1 + 16), (uint64_t)&v26, v4, a1 + 64, a2[2], v11 ^ 1, 1.0);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v26);
    kaldi::Vector<float>::Destroy((uint64_t)&v29);
    kaldi::Vector<float>::Destroy((uint64_t)&v31);
  }
  return v11;
}

void sub_1ADCEB248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::Dim(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 16) + 80)
       + *(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 104)
       + *(_DWORD *)(*(_QWORD *)(a1 + 16) + 344);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::~OnlineFeInput(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29E60;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29E60;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineFeInput<kaldi::FbankWithAudioAnalytics>::getSnrTracker@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(result + 16);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineLdaInput,std::allocator<kaldi::OnlineLdaInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,void>@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, unsigned int *a3@<X3>, unsigned int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,std::allocator<kaldi::OnlineLdaInput>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADCEB430(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,int &,int &,std::allocator<kaldi::OnlineLdaInput>,0>(_QWORD *a1, _QWORD *a2, uint64_t a3, unsigned int *a4, unsigned int *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D415A0;
  a1[1] = 0;
  kaldi::OnlineLdaInput::OnlineLdaInput(a1 + 3, *a2, a3, *a4, *a5);
  return a1;
}

void sub_1ADCEB488(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D415A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D415A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineLdaInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::Mfcc,std::allocator<kaldi::Mfcc>,kaldi::MfccOptions &,void>@<X0>(const kaldi::MfccOptions *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x110uLL);
  result = std::__shared_ptr_emplace<kaldi::Mfcc>::__shared_ptr_emplace[abi:ne180100]<kaldi::MfccOptions &,std::allocator<kaldi::Mfcc>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCEB538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::Mfcc>::__shared_ptr_emplace[abi:ne180100]<kaldi::MfccOptions &,std::allocator<kaldi::Mfcc>,0>(_QWORD *a1, const kaldi::MfccOptions *a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41B88;
  a1[1] = 0;
  kaldi::Mfcc::Mfcc((kaldi::Mfcc *)(a1 + 3), a2);
  return a1;
}

void sub_1ADCEB584(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41B88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::Mfcc>::__on_zero_shared(uint64_t a1)
{
  kaldi::Mfcc::~Mfcc((kaldi::Mfcc *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineFeInput<kaldi::Mfcc>,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, float *a3@<X3>, float *a4@<X4>, float *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x78uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_1ADCEB660(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineAudioSourceItf *&,kaldi::Mfcc*,float,float,float &,std::allocator<kaldi::OnlineFeInput<kaldi::Mfcc>>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, float *a4, float *a5, float *a6)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _QWORD v18[2];

  a1[2] = 0;
  *a1 = &unk_1E5D414C0;
  a1[1] = 0;
  v7 = *a2;
  v8 = *a3;
  v9 = (int)*a4;
  v10 = (int)*a5;
  v11 = (int)*a6;
  __asm { FMOV            V0.2S, #-1.0 }
  v18[0] = _D0;
  v18[1] = 0xA4579F000;
  kaldi::OnlineFeInput<kaldi::Mfcc>::OnlineFeInput((uint64_t)(a1 + 3), v7, v8, v9, v10, v11, 0, (uint64_t)v18);
  return a1;
}

void sub_1ADCEB6F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D414C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D414C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineFeInput<kaldi::Mfcc>>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::OnlineFeInput(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6, int a7, uint64_t a8)
{
  uint64_t *v9;
  float v10;
  uint64_t v13;
  uint64_t *v14;

  *(_QWORD *)a1 = &unk_1E5D29EC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_DWORD *)(a1 + 36) = a7;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  v9 = (uint64_t *)(a1 + 88);
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  v10 = *(float *)(a8 + 4);
  if (v10 > 0.0 && *(float *)a8 != v10)
  {
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_OWORD *)(v13 + 8) = *(_OWORD *)a8;
    v14 = (uint64_t *)*v9;
    *v9 = v13;
    if (v14)
      std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v9, v14);
  }
  return a1;
}

void sub_1ADCEB818(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  uint64_t *v6;

  v6 = *v3;
  *v3 = 0;
  if (v6)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v3, v6);
  kaldi::Vector<float>::Destroy(v4);
  kaldi::Vector<float>::Destroy(v2);
  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::Compute(uint64_t a1, uint64_t *a2)
{
  int32x2_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  const void **v14;
  _QWORD *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  void *v30;
  _QWORD v31[33];

  v3 = (int32x2_t *)*a2;
  v4 = kaldi::MatrixBase<float>::NumRows(*a2);
  if (v4 <= 0)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v30, (uint64_t)"No feature vectors requested?!", 30);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v30);
    }
    return 1;
  }
  else
  {
    v5 = (*(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * (v4 - 1));
    v30 = 0;
    v31[0] = 0;
    v31[1] = 0;
    kaldi::Vector<float>::Resize(&v30, v5, 1);
    v6 = *(_DWORD *)(a1 + 36);
    v7 = __OFSUB__(v6, 1);
    v8 = v6 - 1;
    if (v8 < 0 != v7)
      v9 = 0;
    else
      v9 = *(_DWORD *)(a1 + 24) + *(_DWORD *)(a1 + 28) * v8;
    if ((int)v5 >= v9)
      v11 = v9;
    else
      v11 = v5;
    v10 = (*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 8) + 8))(*(_QWORD *)(a1 + 8), &v30, v11);
    v28 = 0;
    v29[0] = 0;
    v29[1] = 0;
    v12 = *(_QWORD *)(a1 + 88);
    if (v12)
    {
      v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      v14 = (const void **)&v30;
      kaldi::Resampler::Resample(v12, (uint64_t)&v30, (uint64_t)&v28, v13);
      if (SLODWORD(v29[0]) <= 0)
      {
        v15 = v31;
      }
      else
      {
        v14 = (const void **)&v28;
        v15 = v29;
      }
    }
    else
    {
      v14 = (const void **)&v30;
      v15 = v31;
    }
    v16 = (*(_DWORD *)v15 + *(_DWORD *)(a1 + 72));
    v26 = 0;
    v27 = 0;
    v25 = 0;
    kaldi::Vector<float>::Resize((void **)&v25, v16, 1);
    v17 = *(_DWORD *)(a1 + 72);
    v24 = 0;
    v22 = v25;
    v23 = v17;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, (const void **)(a1 + 64));
    v18 = *(int *)(a1 + 72);
    v19 = *(_DWORD *)v15;
    v24 = 0;
    v22 = &v25[4 * v18];
    v23 = v19;
    kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v22, v14);
    if ((int)v26 < *(_DWORD *)(a1 + 24))
      v20 = v10;
    else
      v20 = 0;
    if ((v20 & 1) != 0)
    {
      kaldi::Matrix<float>::Resize(v3, 0, 0, 0, 0);
      kaldi::Vector<float>::Resize((void **)(a1 + 64), v26, 1);
      kaldi::VectorBase<float>::CopyFromVec(a1 + 64, (const void **)&v25);
    }
    else
    {
      kaldi::Mfcc::Compute(*(kaldi::Mfcc **)(a1 + 16), (uint64_t)&v25, v3, (void **)(a1 + 64), 1.0);
    }
    kaldi::Vector<float>::Destroy((uint64_t)&v25);
    kaldi::Vector<float>::Destroy((uint64_t)&v28);
    kaldi::Vector<float>::Destroy((uint64_t)&v30);
  }
  return v10;
}

void sub_1ADCEBAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::Dim(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 16) + 96);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::FrameDurationMs(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::FrameDurationMsForAlignment(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void kaldi::OnlineFeInput<kaldi::Mfcc>::~OnlineFeInput(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29EC8;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;

  *a1 = &unk_1E5D29EC8;
  v4 = (uint64_t *)a1[11];
  v2 = a1 + 11;
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<kaldi::Resampler>::operator()[abi:ne180100]((uint64_t)v2, v3);
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 8));
  kaldi::Vector<float>::Destroy((uint64_t)(a1 + 5));
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t kaldi::OnlineFeInput<kaldi::Mfcc>::getSnrTracker@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(uint64_t **)(result + 16);
  v4 = *v2;
  v3 = v2[1];
  *a2 = v4;
  a2[1] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardInput,std::allocator<kaldi::OnlineNnetForwardInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, __int128 *a4@<X4>, uint64_t *a5@<X5>, char *a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9, int *a10, int *a11, uint64_t a12, char *a13, char *a14, int *a15, char *a16, char *a17)
{
  _QWORD *v25;
  _QWORD *result;

  v25 = operator new(0x148uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,std::allocator<kaldi::OnlineNnetForwardInput>,0>(v25, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  *a8 = v25 + 3;
  a8[1] = v25;
  return result;
}

void sub_1ADCEBCEC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &,std::allocator<kaldi::OnlineNnetForwardInput>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __int128 *a5, uint64_t *a6, char *a7, char *a8, uint64_t *a9, int *a10, int *a11, uint64_t a12, char *a13, char *a14, int *a15, char *a16, char *a17)
{
  char v19;

  a1[2] = 0;
  *a1 = &unk_1E5D419C8;
  a1[1] = 0;
  std::allocator<kaldi::OnlineNnetForwardInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &>((uint64_t)&v19, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return a1;
}

void sub_1ADCEBD88(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D419C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D419C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineNnetForwardInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::allocator<kaldi::OnlineNnetForwardInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,kaldi::InferenceNetItf *,int &,int &,std::vector<int> &,BOOL &,BOOL &,int &,BOOL &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, __int128 *a6, uint64_t *a7, char *a8, char *a9, uint64_t *a10, int *a11, int *a12, uint64_t a13, char *a14, char *a15, int *a16, char *a17, char *a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  const void *v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  void *__p;
  void *v33;
  uint64_t v34;

  v18 = *a3;
  v19 = *a4;
  v28 = *a7;
  v26 = *a9;
  v27 = *a8;
  v20 = *a10;
  v21 = *a11;
  v22 = *a12;
  v33 = 0;
  v34 = 0;
  v23 = *(const void **)a13;
  v24 = *(_QWORD *)(a13 + 8);
  v25 = (v24 - *(_QWORD *)a13) >> 2;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v23, v24, v25);
  kaldi::OnlineNnetForwardInput::OnlineNnetForwardInput(a2, v18, v19, a5, a6, v28, v27, v26, v20, v21, v22, (uint64_t)&__p, *a14, *a15, *a16, *a17, *a18);
  if (__p)
  {
    v33 = __p;
    operator delete(__p);
  }
}

void sub_1ADCEBEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineNnetForwardInput::OnlineNnetForwardInput(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, __int128 *a5, uint64_t a6, char a7, char a8, uint64_t a9, int a10, int a11, uint64_t a12, char a13, char a14, int a15, char a16, char a17)
{
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  kaldi::OnlineSpliceBatchInput **v28;
  int **v29;
  int *v30;
  int *v31;
  int v32;
  int v33;
  int v34;
  const void *v35;
  void *v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  kaldi::nnet1::Nnet *v40;
  int v41;
  uint64_t Component;
  _QWORD *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  kaldi::OnlineSpliceBatchInput *v51;
  kaldi::OnlineSpliceBatchInput *v52;
  kaldi::OnlineBufferingInput *v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  const void **v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  uint64_t __src;
  int v68;
  _BYTE v69[276];

  *(_QWORD *)&v69[260] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E5D2AA40;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *a4;
  v64 = (const void **)(a1 + 24);
  v23 = a4[1];
  *(_QWORD *)(a1 + 32) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v26 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v26;
  }
  v27 = *((_QWORD *)a5 + 3);
  *(_OWORD *)(a1 + 104) = 0u;
  v28 = (kaldi::OnlineSpliceBatchInput **)(a1 + 104);
  *(_QWORD *)(a1 + 64) = v27;
  *(_QWORD *)(a1 + 72) = a6;
  *(_BYTE *)(a1 + 80) = a7;
  *(_BYTE *)(a1 + 81) = a8;
  *(_QWORD *)(a1 + 88) = a9;
  *(_DWORD *)(a1 + 96) = a11 + a10;
  v29 = (int **)(a1 + 112);
  *(_OWORD *)(a1 + 120) = 0u;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 112), *(const void **)a12, *(_QWORD *)(a12 + 8), (uint64_t)(*(_QWORD *)(a12 + 8) - *(_QWORD *)a12) >> 2);
  *(_BYTE *)(a1 + 136) = a13;
  *(_BYTE *)(a1 + 137) = a14;
  *(_DWORD *)(a1 + 140) = a15;
  kaldi::Matrix<float>::Matrix(a1 + 144);
  *(_QWORD *)(a1 + 200) = &unk_1E5D34170;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_BYTE *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_BYTE *)(a1 + 288) = 0;
  *(_BYTE *)(a1 + 296) = a16;
  *(_BYTE *)(a1 + 297) = a17;
  v30 = *(int **)(a1 + 112);
  v31 = *(int **)(a1 + 120);
  if (v30 == v31)
  {
    __src = 0;
    v68 = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 112), (char *)&__src, (uint64_t)v69, 3uLL);
    v33 = **v29;
  }
  else
  {
    if ((char *)v31 - (char *)v30 != 12)
    {
      if (!(*(unsigned int (**)(const void *))(*(_QWORD *)*v64 + 72))(*v64))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-sizes supports only 3 sizes", 40);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      v30 = *v29;
    }
    v33 = *v30;
    v32 = v30[1];
    v34 = v30[2];
    if (v32 > v34)
      v34 = v32;
    if (v33 < v34)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"Model input size must be greater than other batch sizes in strict-batch-sizes", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  if (*(_BYTE *)(a1 + 137) && v33 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(_BYTE *)(a1 + 136) && v33 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(int *)(a1 + 140) >= 1 && v33 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-context-size cannot be set if strict-batch-size is <= 0", 62);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  *(_DWORD *)(a1 + 184) = 0;
  v35 = *(const void **)(a1 + 24);
  if (v35
  {
    v37 = *(std::__shared_weak_count **)(a1 + 32);
    v66 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v39 = __ldxr(p_shared_owners);
      while (__stxr(v39 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v36 + 152))(v36);
  }
  else
  {
    v66 = 0;
  }
  v40 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v40 && (int)((*((_QWORD *)v40 + 1) - *(_QWORD *)v40) >> 3) >= 1)
  {
    v41 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v40, v41);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        v60 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v41;
      v40 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v41 < (int)((*((_QWORD *)v40 + 1) - *(_QWORD *)v40) >> 3));
  }
  if (*v64
  {
    v44 = v43;
    v45 = *(std::__shared_weak_count **)(a1 + 32);
    v65 = v45;
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    if ((int)((v43[2] - v43[1]) >> 3) >= 1)
    {
      v48 = 0;
      do
      {
        v49 = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v44 + 1), v48);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v49 + 24))(v49) == 1026)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
          v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
          v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"OnlineNnetForwardInput. Use a separate splice operation to ", 59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"perform splicing.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
        }
        ++v48;
      }
      while (v48 < (int)((v44[2] - v44[1]) >> 3));
    }
  }
  else
  {
    v65 = 0;
  }
  if (*a4 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 72))(*a4))
  {
    v50 = *(_QWORD *)(a12 + 8);
    if (*(_QWORD *)a12 == v50
      || memcmp((const void *)(*(_QWORD *)a12 + 4), *(const void **)a12, v50 - (*(_QWORD *)a12 + 4)))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-size should be defined or strict-bath-sizes should have same value with streaming model", 100);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    if (*(_BYTE *)(a1 + 296))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"legacy streaming settings is not supported with streaming model", 63);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    if ((*(_BYTE *)(a1 + 137) || *(int *)(a1 + 140) >= 1)
      && (*(unsigned int (**)(_QWORD))(*(_QWORD *)*a4 + 80))(*a4))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"legacy masking is not supported with streaming model specified maskings as input", 80);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  if (*(int *)(a1 + 96) >= 1)
  {
    v51 = (kaldi::OnlineSpliceBatchInput *)operator new();
    kaldi::OnlineSpliceBatchInput::OnlineSpliceBatchInput(v51, *(kaldi::OnlineFeatInputItf **)(a1 + 8), a10, a11);
    v52 = *v28;
    *v28 = v51;
    if (v52)
    {
      (*(void (**)(kaldi::OnlineSpliceBatchInput *))(*(_QWORD *)v52 + 72))(v52);
      v51 = *v28;
    }
    *(_QWORD *)(a1 + 8) = v51;
    goto LABEL_57;
  }
  if (v33 < 1)
  {
LABEL_57:
    if (*(_BYTE *)(a1 + 297) && !v33)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"one row output can only be applied with fixed batch size input", 62);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    goto LABEL_64;
  }
  v53 = (kaldi::OnlineBufferingInput *)operator new();
  kaldi::OnlineBufferingInput::OnlineBufferingInput(v53, *(kaldi::OnlineFeatInputItf **)(a1 + 8), 1);
  v54 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v53;
  if (v54)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 72))(v54);
    v53 = *(kaldi::OnlineBufferingInput **)(a1 + 192);
  }
  *(_QWORD *)(a1 + 8) = v53;
LABEL_64:
  if (v65)
  {
    v55 = (unint64_t *)&v65->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  if (v66)
  {
    v57 = (unint64_t *)&v66->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  return a1;
}

void sub_1ADCEC728(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCEC7D4);
}

void sub_1ADCEC748(_Unwind_Exception *a1, void **a2, uint64_t a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  va_list va;

  va_start(va, a9);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  kaldi::CuMatrix<float>::~CuMatrix(a3);
  kaldi::CuMatrix<float>::~CuMatrix(v10);
  v13 = *(_QWORD *)(v9 + 192);
  *(_QWORD *)(v9 + 192) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
  kaldi::Matrix<float>::~Matrix(a4);
  v14 = *a5;
  if (*a5)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
  }
  v15 = *v11;
  *v11 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  if (*(char *)(v9 + 63) < 0)
    operator delete(*a2);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a7);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::Vector<float>>::__on_zero_shared(uint64_t a1)
{
  kaldi::Vector<float>::Destroy(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, __int128 *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x218uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADCEC8A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(_QWORD *a1, uint64_t a2, __int128 *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D42090;
  a1[1] = 0;
  std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADCEC914(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42090;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42090;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__on_zero_shared(uint64_t a1)
{
  kaldi::quasar::CEFusedAcousticEncoder::~CEFusedAcousticEncoder((kaldi::quasar::CEFusedAcousticEncoder *)(a1 + 24));
}

void std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,BOOL,BOOL>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v9 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(a2, a3, &v9, *a5, *a6);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1ADCEC9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::SpeechActivityDetector,std::allocator<kaldi::SpeechActivityDetector>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,void>@<X0>(_QWORD *a1@<X1>, unsigned int *a2@<X2>, unsigned __int8 *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, unsigned __int8 *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x50uLL);
  result = std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,std::allocator<kaldi::SpeechActivityDetector>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADCECA8C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,BOOL &,std::allocator<kaldi::SpeechActivityDetector>,0>(_QWORD *a1, _QWORD *a2, unsigned int *a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  a1[2] = 0;
  *a1 = &unk_1E5CFFCB0;
  a1[1] = 0;
  kaldi::SpeechActivityDetector::SpeechActivityDetector(a1 + 3, *a2, *a3, *a4, a5, a6, *a7);
  return a1;
}

void sub_1ADCECAE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFCB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5CFFCB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::SpeechActivityDetector>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,void>@<X0>(uint64_t a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x218uLL);
  result = std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADCECBA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::quasar::CEFusedAcousticEncoder>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::shared_ptr<kaldi::ModelInitializeContext>,std::allocator<kaldi::quasar::CEFusedAcousticEncoder>,0>(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D42090;
  a1[1] = 0;
  std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADCECC04(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<kaldi::quasar::CEFusedAcousticEncoder>::construct[abi:ne180100]<kaldi::quasar::CEFusedAcousticEncoder,std::string &,std::shared_ptr<kaldi::ModelInitializeContext>>(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v7 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  kaldi::quasar::CEFusedAcousticEncoder::CEFusedAcousticEncoder(a2, a3, &v7, 0, 0);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1ADCECC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::AmFusionEncoderInput,std::allocator<kaldi::AmFusionEncoderInput>,kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,void>@<X0>(uint64_t *a1@<X1>, int *a2@<X2>, char *a3@<X3>, kaldi::quasar::CEFusedAcousticEncoder **a4@<X4>, kaldi::quasar::CEFusedAcousticEncoder **a5@<X5>, _QWORD *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, float *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x120uLL);
  result = std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,std::allocator<kaldi::AmFusionEncoderInput>,0>(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1ADCECD48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,BOOL &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::quasar::CEFusedAcousticEncoder> &,std::shared_ptr<kaldi::Vector<float>> &,int &,kaldi::CuMatrix<float> &,float &,std::allocator<kaldi::AmFusionEncoderInput>,0>(_QWORD *a1, uint64_t *a2, int *a3, char *a4, kaldi::quasar::CEFusedAcousticEncoder **a5, kaldi::quasar::CEFusedAcousticEncoder **a6, _QWORD *a7, int *a8, uint64_t a9, float *a10)
{
  a1[2] = 0;
  *a1 = &unk_1E5D418B0;
  a1[1] = 0;
  kaldi::AmFusionEncoderInput::AmFusionEncoderInput((uint64_t)(a1 + 3), *a2, *a3, *a4, a5, a6, a7, *a8, *a10, a9);
  return a1;
}

void sub_1ADCECDB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D418B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D418B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::AmFusionEncoderInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,std::allocator<kaldi::OnlineAcousticEncoderInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, __int128 *a4@<X4>, uint64_t *a5@<X5>, char *a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, char *a10, unsigned __int8 *a11)
{
  _QWORD *v19;
  _QWORD *result;

  v19 = operator new(0xA0uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,std::allocator<kaldi::OnlineAcousticEncoderInput>,0>(v19, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  *a8 = v19 + 3;
  a8[1] = v19;
  return result;
}

void sub_1ADCECED0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &,std::allocator<kaldi::OnlineAcousticEncoderInput>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __int128 *a5, uint64_t *a6, char *a7, char *a8, uint64_t a9, char *a10, unsigned __int8 *a11)
{
  char v13;

  a1[2] = 0;
  *a1 = &unk_1E5D41AA8;
  a1[1] = 0;
  std::allocator<kaldi::OnlineAcousticEncoderInput>::construct[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &>((uint64_t)&v13, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return a1;
}

void sub_1ADCECF5C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41AA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41AA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineAcousticEncoderInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::allocator<kaldi::OnlineAcousticEncoderInput>::construct[abi:ne180100]<kaldi::OnlineAcousticEncoderInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::quasar::CEAcousticEncoderNet> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,BOOL &,BOOL &,std::vector<int> &,BOOL &,BOOL &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, __int128 *a6, uint64_t *a7, char *a8, char *a9, uint64_t a10, char *a11, unsigned __int8 *a12)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  void *__p;
  void *v21;
  uint64_t v22;

  v15 = *a3;
  v16 = *a4;
  v17 = *a7;
  v18 = *a8;
  v19 = *a9;
  v21 = 0;
  v22 = 0;
  __p = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, *(const void **)a10, *(_QWORD *)(a10 + 8), (uint64_t)(*(_QWORD *)(a10 + 8) - *(_QWORD *)a10) >> 2);
  kaldi::OnlineAcousticEncoderInput::OnlineAcousticEncoderInput(a2, v15, v16, a5, a6, v17, v18, v19, (char *)&__p, *a11, *a12);
  if (__p)
  {
    v21 = __p;
    operator delete(__p);
  }
}

void sub_1ADCED098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::OnlineAcousticEncoderInput::OnlineAcousticEncoderInput(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, __int128 *a5, uint64_t a6, char a7, char a8, char *a9, char a10, unsigned __int8 a11)
{
  kaldi::quasar::CEAcousticEncoderNet **v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  kaldi::OnlineBufferingInput **v23;
  char *v24;
  int *v25;
  int v26;
  int v27;
  kaldi::nnet1::Nnet *v28;
  int v29;
  uint64_t Component;
  kaldi::OnlineBufferingInput *v31;
  kaldi::OnlineBufferingInput *v32;
  _QWORD *v34;
  _QWORD *v35;
  void **p_src;
  __int128 __src;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = &off_1E5D2AB88;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *a4;
  v16 = (kaldi::quasar::CEAcousticEncoderNet **)(a1 + 24);
  v17 = a4[1];
  *(_QWORD *)(a1 + 32) = v17;
  if (v17)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v20 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v20;
  }
  v21 = a11;
  v22 = *((_QWORD *)a5 + 3);
  *(_OWORD *)(a1 + 104) = 0u;
  v23 = (kaldi::OnlineBufferingInput **)(a1 + 104);
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = a6;
  *(_BYTE *)(a1 + 80) = a7;
  *(_BYTE *)(a1 + 81) = a8;
  *(_BYTE *)(a1 + 96) = a10;
  *(_BYTE *)(a1 + 97) = a11;
  *(_OWORD *)(a1 + 120) = 0u;
  v25 = *(int **)a9;
  v24 = (char *)*((_QWORD *)a9 + 1);
  if (*(char **)a9 == v24)
  {
    *(_QWORD *)&__src = 0;
    DWORD2(__src) = 0;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(a9, (char *)&__src, (uint64_t)&__src + 12, 3uLL);
    v25 = *(int **)a9;
    v26 = **(_DWORD **)a9;
    v21 = *(unsigned __int8 *)(a1 + 97);
  }
  else
  {
    if (v24 - (char *)v25 != 12)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"strict-batch-sizes supports only 3 sizes", 40);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
    v26 = *v25;
    v27 = v25[1];
    if (v27 <= v25[2])
      v27 = v25[2];
    if (v26 < v27)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"Model input size must be greater than other batch sizes in strict-batch-sizes", 77);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
    }
  }
  *(_DWORD *)(a1 + 84) = v26;
  *(_DWORD *)(a1 + 88) = v25[1];
  *(_DWORD *)(a1 + 92) = v25[2];
  if (v21 && v26 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  if (*(_BYTE *)(a1 + 96) && v26 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
  }
  *(_DWORD *)(a1 + 100) = 0;
  v28 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v28 && (int)((*((_QWORD *)v28 + 1) - *(_QWORD *)v28) >> 3) >= 1)
  {
    v29 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v28, v29);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__src);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__src, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        v35 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&__src);
      }
      ++v29;
      v28 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v29 < (int)((*((_QWORD *)v28 + 1) - *(_QWORD *)v28) >> 3));
    v26 = *(_DWORD *)(a1 + 84);
  }
  if (v26 >= 1)
  {
    v31 = (kaldi::OnlineBufferingInput *)operator new();
    kaldi::OnlineBufferingInput::OnlineBufferingInput(v31, *(kaldi::OnlineFeatInputItf **)(a1 + 8), 1);
    v32 = *v23;
    *v23 = v31;
    if (v32)
    {
      (*(void (**)(kaldi::OnlineBufferingInput *))(*(_QWORD *)v32 + 72))(v32);
      v31 = *v23;
    }
    *(_QWORD *)(a1 + 8) = v31;
  }
  kaldi::quasar::CEAcousticEncoderNet::InitialStates(*v16, &__src);
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__vdeallocate((_QWORD *)(a1 + 112));
  *(_OWORD *)(a1 + 112) = __src;
  *(_QWORD *)(a1 + 128) = v38;
  v38 = 0;
  p_src = (void **)&__src;
  __src = 0uLL;
  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&p_src);
  return a1;
}

void sub_1ADCED498(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCED4F4);
}

void sub_1ADCED4A8(_Unwind_Exception *a1)
{
  char *v1;
  uint64_t v2;
  void **v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;

  std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>::__destroy_vector::operator()[abi:ne180100](&v7);
  v6 = *v4;
  *v4 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 72))(v6);
  if (v1[63] < 0)
    operator delete(*v3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,void>@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X3>, __int128 *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, char *a7@<X7>, _QWORD *a8@<X8>, char *a9, uint64_t *a10, char *a11, int *a12, char *a13, uint64_t a14, char *a15, _QWORD *a16, int *a17)
{
  _QWORD *v25;
  _QWORD *result;

  v25 = operator new(0x1A8uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,0>(v25, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  *a8 = v25 + 3;
  a8[1] = v25;
  return result;
}

void sub_1ADCED5D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&,std::allocator<kaldi::OnlineNnetForwardSkippedInput>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, _QWORD *a4, __int128 *a5, uint64_t *a6, int *a7, char *a8, char *a9, uint64_t *a10, char *a11, int *a12, char *a13, uint64_t a14, char *a15, _QWORD *a16, int *a17)
{
  char v19;

  a1[2] = 0;
  *a1 = &unk_1E5D41AE0;
  a1[1] = 0;
  std::allocator<kaldi::OnlineNnetForwardSkippedInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&>((uint64_t)&v19, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  return a1;
}

void sub_1ADCED670(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41AE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41AE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineNnetForwardSkippedInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t std::allocator<kaldi::OnlineNnetForwardSkippedInput>::construct[abi:ne180100]<kaldi::OnlineNnetForwardSkippedInput,kaldi::OnlineFeatInputItf *,kaldi::nnet1::Nnet *,std::shared_ptr<kaldi::FeedForwardNetItf> &,kaldi::nnet1::PdfPriorOptions &,kaldi::nnet1::PdfPrior *,int &,BOOL &,BOOL &,kaldi::InferenceNetItf *,BOOL &,int &,BOOL &,kaldi::CuMatrix<float> &,BOOL &,std::shared_ptr<std::queue<kaldi::CuMatrix<float>>> const&,unsigned int const&>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, _QWORD *a5, __int128 *a6, uint64_t *a7, int *a8, char *a9, char *a10, uint64_t *a11, char *a12, int *a13, char *a14, uint64_t a15, char *a16, _QWORD *a17, int *a18)
{
  return kaldi::OnlineNnetForwardSkippedInput::OnlineNnetForwardSkippedInput(a2, *a3, *a4, a5, a6, *a7, *a8, *a9, *a10, *a11, *a12, *a13, *a14, a15, *a16, a17, *a18);
}

uint64_t kaldi::OnlineNnetForwardSkippedInput::OnlineNnetForwardSkippedInput(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, __int128 *a5, uint64_t a6, int a7, char a8, char a9, uint64_t a10, char a11, int a12, char a13, uint64_t a14, char a15, _QWORD *a16, int a17)
{
  const void **v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  void *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  kaldi::nnet1::Nnet *v35;
  int v36;
  uint64_t Component;
  _QWORD *v38;
  _QWORD *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  kaldi::OnlineBufferingInput *v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  std::__shared_weak_count *v57;
  _QWORD v58[35];

  *(_QWORD *)a1 = &off_1E5D2AD48;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = *a4;
  v22 = (const void **)(a1 + 24);
  v23 = a4[1];
  *(_QWORD *)(a1 + 32) = v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  if (*((char *)a5 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)a5, *((_QWORD *)a5 + 1));
  }
  else
  {
    v26 = *a5;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a5 + 2);
    *(_OWORD *)(a1 + 40) = v26;
  }
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a5 + 3);
  *(_QWORD *)(a1 + 72) = a6;
  *(_DWORD *)(a1 + 80) = a7 + 1;
  *(_BYTE *)(a1 + 84) = a8;
  *(_BYTE *)(a1 + 85) = a9;
  *(_QWORD *)(a1 + 88) = a10;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = a11;
  *(_DWORD *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = a12;
  *(_BYTE *)(a1 + 164) = a13;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 176) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = &unk_1E5D34170;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_BYTE *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 272) = &unk_1E5D34170;
  *(_BYTE *)(a1 + 312) = 0;
  kaldi::CuMatrix<float>::CuMatrix(a1 + 320, a14, 111);
  *(_BYTE *)(a1 + 368) = a15;
  *(_QWORD *)(a1 + 376) = *a16;
  v27 = a16[1];
  *(_QWORD *)(a1 + 384) = v27;
  if (v27)
  {
    v28 = (unint64_t *)(v27 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  *(_DWORD *)(a1 + 392) = a17;
  if (a7 >= 5 && (kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"Skipping ", 9);
    v30 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" frames may not give you good results.", 38);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v58);
  }
  if (*(_BYTE *)(a1 + 100) && *(_DWORD *)(a1 + 80) == 1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"skip_across_batch cannot be set if you aren't frame skipping", 60);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  if (*(_BYTE *)(a1 + 368) && *(int *)(a1 + 160) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"append-pad-info cannot be set if strict-batch-size is <= 0", 58);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  if (*(_BYTE *)(a1 + 164) && *(int *)(a1 + 160) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"zero-pad cannot be set if strict-batch-size is <= 0", 51);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
  }
  if (*v22
  {
    v32 = *(std::__shared_weak_count **)(a1 + 32);
    v57 = v32;
    if (v32)
    {
      p_shared_owners = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldxr(p_shared_owners);
      while (__stxr(v34 + 1, p_shared_owners));
    }
    (*(void (**)(void *))(*(_QWORD *)v31 + 152))(v31);
  }
  else
  {
    v57 = 0;
  }
  v35 = *(kaldi::nnet1::Nnet **)(a1 + 16);
  if (v35 && (int)((*((_QWORD *)v35 + 1) - *(_QWORD *)v35) >> 3) >= 1)
  {
    v36 = 0;
    do
    {
      Component = kaldi::nnet1::Nnet::GetComponent(v35, v36);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)Component + 24))(Component) == 1026)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
        v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"nnet transformation contains splicing, which is not ", 52);
        v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)"supported by OnlineNnetForwardInput. Use a separate splice ", 59);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"operation to perform splicing.", 30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
      }
      ++v36;
      v35 = *(kaldi::nnet1::Nnet **)(a1 + 16);
    }
    while (v36 < (int)((*((_QWORD *)v35 + 1) - *(_QWORD *)v35) >> 3));
  }
  if (*v22
  {
    v39 = v38;
    v40 = *(std::__shared_weak_count **)(a1 + 32);
    v56 = v40;
    if (v40)
    {
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
    }
    if ((int)((v38[2] - v38[1]) >> 3) >= 1)
    {
      v43 = 0;
      do
      {
        v44 = kaldi::nnet1::Nnet::GetComponent((kaldi::nnet1::Nnet *)(v39 + 1), v43);
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 24))(v44) == 1026)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v58);
          v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)"nnet contains splicing, which is not supported by ", 50);
          v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"OnlineNnetForwardInput. Use a separate splice operation to ", 59);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)"perform splicing.", 17);
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v58);
        }
        ++v43;
      }
      while (v43 < (int)((v39[2] - v39[1]) >> 3));
    }
  }
  else
  {
    v56 = 0;
  }
  if (*(int *)(a1 + 160) >= 1)
  {
    v45 = (kaldi::OnlineBufferingInput *)operator new();
    kaldi::OnlineBufferingInput::OnlineBufferingInput(v45, *(kaldi::OnlineFeatInputItf **)(a1 + 8), 1);
    v46 = *(_QWORD *)(a1 + 168);
    *(_QWORD *)(a1 + 168) = v45;
    if (v46)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v46 + 72))(v46);
      v45 = *(kaldi::OnlineBufferingInput **)(a1 + 168);
    }
    *(_QWORD *)(a1 + 8) = v45;
  }
  if (v56)
  {
    v47 = (unint64_t *)&v56->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  if (v57)
  {
    v49 = (unint64_t *)&v57->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  return a1;
}

void sub_1ADCEDD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  va_list va;

  va_start(va, a4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4 + 376);
  kaldi::CuMatrix<float>::~CuMatrix(v10);
  kaldi::CuMatrix<float>::~CuMatrix(v9 + 48);
  kaldi::CuMatrix<float>::~CuMatrix(v9);
  kaldi::CuMatrix<float>::~CuMatrix(v8);
  v12 = *(_QWORD *)(v4 + 168);
  *(_QWORD *)(v4 + 168) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 72))(v12);
  kaldi::Vector<float>::Destroy(v9 - 88);
  kaldi::Vector<float>::Destroy(v7);
  if (*(char *)(v4 + 63) < 0)
    operator delete(*v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v4);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineSpliceInput,std::allocator<kaldi::OnlineSpliceInput>,kaldi::OnlineFeatInputItf *,int &,int &,void>@<X0>(kaldi::OnlineFeatInputItf **a1@<X1>, int *a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,std::allocator<kaldi::OnlineSpliceInput>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_1ADCEDE40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,int &,int &,std::allocator<kaldi::OnlineSpliceInput>,0>(_QWORD *a1, kaldi::OnlineFeatInputItf **a2, int *a3, int *a4)
{
  a1[2] = 0;
  *a1 = &unk_1E5D417D0;
  a1[1] = 0;
  kaldi::OnlineSpliceInput::OnlineSpliceInput((kaldi::OnlineSpliceInput *)(a1 + 3), *a2, *a3, *a4);
  return a1;
}

void sub_1ADCEDE98(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D417D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D417D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineSpliceInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

kaldi::OnlineSpliceInput *kaldi::OnlineSpliceInput::OnlineSpliceInput(kaldi::OnlineSpliceInput *this, kaldi::OnlineFeatInputItf *a2, int a3, int a4)
{
  *(_QWORD *)this = &off_1E5D2A590;
  *((_QWORD *)this + 1) = a2;
  *((_DWORD *)this + 4) = (*(uint64_t (**)(kaldi::OnlineFeatInputItf *))(*(_QWORD *)a2 + 8))(a2);
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = a4;
  kaldi::Matrix<float>::Matrix((uint64_t)this + 32);
  return this;
}

void sub_1ADCEDF64(_Unwind_Exception *a1)
{
  quasar::Bitmap *v1;

  quasar::Bitmap::~Bitmap(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<kaldi::OnlineTransformInput,std::allocator<kaldi::OnlineTransformInput>,kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,void>@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,std::allocator<kaldi::OnlineTransformInput>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCEDFC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__shared_ptr_emplace[abi:ne180100]<kaldi::OnlineFeatInputItf *,kaldi::Matrix<float> &,std::allocator<kaldi::OnlineTransformInput>,0>(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1E5D41920;
  kaldi::OnlineTransformInput::OnlineTransformInput(a1 + 3, *a2);
  return a1;
}

void sub_1ADCEE014(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineTransformInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

void std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41680;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41680;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::OnlineCacheInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::ComputeAheadFeatInput,std::allocator<quasar::ComputeAheadFeatInput>,std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,void>@<X0>(uint64_t a1@<X1>, unsigned __int8 *a2@<X2>, int *a3@<X3>, unsigned int *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,std::allocator<quasar::ComputeAheadFeatInput>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADCEE13C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<kaldi::OnlineFeatInputItf> &,BOOL const&,int,int &,std::allocator<quasar::ComputeAheadFeatInput>,0>(_QWORD *a1, uint64_t a2, unsigned __int8 *a3, int *a4, unsigned int *a5)
{
  a1[2] = 0;
  *a1 = &unk_1E5D439F0;
  a1[1] = 0;
  quasar::ComputeAheadFeatInput::ComputeAheadFeatInput(a1 + 3, a2, *a3, *a4, *a5);
  return a1;
}

void sub_1ADCEE194(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D439F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D439F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::ComputeAheadFeatInput>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
}

uint64_t kaldi::quasar::MinEntropyPartitioning::GetRange(uint64_t this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v4[34];

  if ((a2 & 0x80000000) != 0 || (uint64_t)(*(_QWORD *)(this + 32) - *(_QWORD *)(this + 24)) >> 2 < (unint64_t)a2)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Invalid partition id ", 21);
    v2 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" has to be in range [0,", 23);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v3, "]");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return this;
}

uint64_t TNewWords::TNewWords(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

_QWORD *TNewWords::findAndAddWords(uint64_t a1, int *a2, uint64_t a3, char *a4, char a5)
{
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  uint64_t ActiveConfigHandle;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ValidConfig;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  int v27;
  uint64_t v28;
  __int128 v29;
  void *__p;
  _BYTE *v31;
  uint64_t v32;

  if (TLexicon::checkName(*(_QWORD *)(a1 + 24), a2, 0, 0xFFFFFFFFFFFFFFFFLL))
    return 0;
  __p = 0;
  v31 = 0;
  v32 = 0;
  v11 = *(_QWORD **)(a1 + 24);
  v12 = TStringParam::get((TStringParam *)(*(_QWORD *)(a1 + 32) + 10736));
  v13 = *(_QWORD *)(a1 + 32);
  ActiveConfigHandle = TParam::getActiveConfigHandle((TParam *)(v13 + 16456));
  v15 = *(int *)(v13 + 4 * TParam::getValidConfig((TParam *)(v13 + 16456), ActiveConfigHandle) + 16616);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = TParam::getActiveConfigHandle((TParam *)(v16 + 16104));
  ValidConfig = TParam::getValidConfig((TParam *)(v16 + 16104), v17);
  TLexicon::findHeadClonesCollated(v11, a2, v12, v15, *(int *)(v16 + 4 * ValidConfig + 16264), &__p);
  v19 = __p;
  v20 = v31;
  if (v31 == __p)
  {
    v10 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v10 = 0;
    do
    {
      if ((v19[v21 + 16] & 0xC0) == 0)
      {
        if (!v10)
        {
          v10 = TGraph::addVertex(*(TGraph **)(a1 + 8), a4);
          v19 = __p;
        }
        v23 = &v19[v21];
        v23[24] += a5;
        v24 = *(_QWORD **)(a1 + 8);
        v25 = *(_QWORD *)v23;
        v27 = 1;
        v28 = v25;
        v29 = *((_OWORD *)v23 + 1);
        TGraph::addEdge(v24, a3, v10, (uint64_t)&v27);
        v19 = __p;
        v20 = v31;
      }
      ++v22;
      v21 += 32;
    }
    while (v22 < (v20 - v19) >> 5);
  }
  std::vector<TLexiconMatch>::resize((uint64_t)&__p, 0);
  if (__p)
  {
    v31 = __p;
    operator delete(__p);
  }
  return v10;
}

void sub_1ADCEE4A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL TNewWords::addAlphanumWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  char *v4;
  unint64_t v5;
  uint64_t Segment;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int *v10;
  _BOOL8 v12;
  int *v13;
  uint64_t v14;
  int *v15;
  _QWORD *v16;
  TAllocator *v17;
  int *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  char v27;
  int *v28;
  __int128 v29;
  _BYTE v30[1024];
  char v31;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1872);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  v4 = *(char **)(*(_QWORD *)this + 16);
  v28 = (int *)v30;
  v29 = xmmword_1AE1418C0;
  v31 = 1;
  if (!*v4)
  {
    v12 = 0;
LABEL_36:
    if (v28 != (int *)v30 && v28 != 0)
      MEMORY[0x1AF44D160]();
    return v12;
  }
  v5 = 0;
  do
  {
    Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), v4);
    v7 = Segment;
    v8 = *(_DWORD *)(Segment + 24);
    if (v8 != 1 && (!v5 || v8 != 2))
      break;
    v9 = 0;
    v10 = *(int **)Segment;
    while (v10[v9++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), v10, v9 - 1);
    ++v5;
    v4 = *(char **)(v7 + 8);
  }
  while (*v4);
  v12 = v5 > 1;
  if (v5 >= 2)
  {
    if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
    {
      if (v31)
      {
        v24 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
        v13 = v28;
        --*((_QWORD *)&v29 + 1);
      }
      else
      {
        v13 = v28;
        if ((_QWORD)v29)
          v28[(_QWORD)v29 - 1] = 0;
      }
    }
    else
    {
      v13 = v28;
      v28[*((_QWORD *)&v29 + 1)] = 0;
    }
    if (!TNewWords::findAndAddWords((uint64_t)this, v13, *(_QWORD *)this, v4, 0))
    {
      v14 = *((_QWORD *)this + 3);
      if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
      {
        if (v31)
        {
          v24 = 0;
          TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
          v15 = v28;
          --*((_QWORD *)&v29 + 1);
        }
        else
        {
          v15 = v28;
          if ((_QWORD)v29)
            v28[(_QWORD)v29 - 1] = 0;
        }
      }
      else
      {
        v15 = v28;
        v28[*((_QWORD *)&v29 + 1)] = 0;
      }
      if (!TLexicon::checkName(v14, v15, 0, 0xFFFFFFFFFFFFFFFFLL))
      {
        v16 = TGraph::addVertex(*((TGraph **)this + 1), v4);
        v17 = (TAllocator *)*((_QWORD *)this + 3);
        if (*((_QWORD *)&v29 + 1) >= (unint64_t)v29)
        {
          if (v31)
          {
            v24 = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v28, *((unint64_t *)&v29 + 1), &v24, 1uLL);
            v18 = v28;
            --*((_QWORD *)&v29 + 1);
          }
          else
          {
            v18 = v28;
            if ((_QWORD)v29)
              v28[(_QWORD)v29 - 1] = 0;
          }
        }
        else
        {
          v18 = v28;
          v28[*((_QWORD *)&v29 + 1)] = 0;
        }
        v19 = TLexicon::addTempWord(v17, v18, 0, 0, 0);
        v20 = *(_QWORD *)this;
        v21 = (_QWORD *)*((_QWORD *)this + 1);
        v24 = 4;
        v25 = v19;
        v26 = 0;
        v27 = 0;
        TGraph::addEdge(v21, v20, v16, (uint64_t)&v24);
      }
    }
    *((_QWORD *)this + 5) = v4;
  }
  if (v31)
    goto LABEL_36;
  return v12;
}

void sub_1ADCEE7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]))
  {
    if (a13 != v13 && a13 != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addHyphenatedWord(TSegmenter **this)
{
  char *v1;
  uint64_t Segment;
  char v4;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  const __int32 **v9;
  const __int32 **v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned __int8 v14;
  BOOL v15;
  BOOL v16;
  const __int32 **v17;
  char *v18;
  unint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v24;
  int *v25;
  int *v27;
  int v28;
  TSegmenter *v29;
  uint64_t v30;
  TSegmenter *v31;
  uint64_t v32;
  uint64_t k;
  uint64_t v34;
  int *v35;
  uint64_t v37;
  int *v38;
  TSegmenter *v39;
  uint64_t ActiveConfigHandle;
  uint64_t j;
  uint64_t v42;
  int *v43;
  int *v45;
  TAllocator *v46;
  int *v47;
  _QWORD *v48;
  TGraph *v49;
  TSegmenter *v50;
  _QWORD *v51;
  TSegmenter *v52;
  uint64_t v53;
  char v54;
  TSegmenter *v55;
  unint64_t v56;
  unint64_t v57;
  int **v58;
  char *v59;
  TSegmenter *v60;
  int *v61;
  _QWORD *v62;
  TSegmenter *v63;
  TLocaleInfo *v64;
  int v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  int *v69;
  __int128 v70;
  _BYTE v71[1024];
  char v72;
  _OWORD v73[8];
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v1 = (char *)*((_QWORD *)*this + 2);
  if (!*v1)
    return 0;
  memset(v73, 0, sizeof(v73));
  Segment = TSegmenter::getSegment(this[2], v1);
  if (*(_DWORD *)(Segment + 24) == 1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v6;
      v8 = *(_QWORD *)Segment;
      v1 = *(char **)(Segment + 8);
      *((_QWORD *)v73 + v7) = *(_QWORD *)Segment;
      v4 |= *(_DWORD *)(v8 + 4) == 0;
      v9 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
      if (!v9)
        break;
      v10 = v9;
      if (wcscmp(*v9, (const __int32 *)"-"))
        break;
      v11 = TSegmenter::getSegment(this[2], (char *)v10[1]);
      if (!v11)
        break;
      v12 = v11;
      if (*(_DWORD *)(v11 + 24) == 5)
        break;
      v13 = **(_DWORD **)v11;
      if ((v14 & 1) == 0
      {
        v64 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v64);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v64;
      }
      v15 = v13 == 10 || v13 == 13;
      v16 = v15;
      v5 |= v16;
      v17 = v15 ? (const __int32 **)v12 : v10;
      v18 = (char *)v17[1];
      if (!*v18 || v7 >= 0xF)
        break;
      Segment = TSegmenter::getSegment(this[2], v18);
      v6 = v7 + 1;
    }
    while (*(_DWORD *)(Segment + 24) == 1);
    v20 = v7 + 1;
  }
  else
  {
    v5 = 0;
    v4 = 0;
    v20 = 0;
  }
  if (v20 < 2)
    return 0;
  v69 = (int *)v71;
  v70 = xmmword_1AE1418C0;
  v72 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
  for (i = 1; i != v20; ++i)
  {
    v65 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
    v24 = 0;
    v25 = (int *)*((_QWORD *)v73 + i);
    while (v25[v24++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v25, v24 - 1);
  }
  if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
  {
    if (v72)
    {
      v65 = 0;
      TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
      v27 = v69;
      --*((_QWORD *)&v70 + 1);
    }
    else
    {
      v27 = v69;
      if ((_QWORD)v70)
        v69[(_QWORD)v70 - 1] = 0;
    }
  }
  else
  {
    v27 = v69;
    v69[*((_QWORD *)&v70 + 1)] = 0;
  }
  if (TNewWords::findAndAddWords((uint64_t)this, v27, (uint64_t)*this, v1, 0))
    goto LABEL_42;
  if ((v4 & 1) != 0)
    goto LABEL_44;
  if ((v5 & 1) != 0
    || (v39 = this[4],
        ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v39 + 1376)),
        *((_BYTE *)v39 + TParam::getValidConfig((TSegmenter *)((char *)v39 + 1376), ActiveConfigHandle) + 1528)))
  {
    TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
    for (j = 1; j != v20; ++j)
    {
      v42 = 0;
      v43 = (int *)*((_QWORD *)v73 + j);
      while (v43[v42++])
        ;
      TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v43, v42 - 1);
    }
    if (*((_QWORD *)&v70 + 1) >= (unint64_t)v70)
    {
      if (v72)
      {
        v65 = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
        v45 = v69;
        --*((_QWORD *)&v70 + 1);
      }
      else
      {
        v45 = v69;
        if ((_QWORD)v70)
          v69[(_QWORD)v70 - 1] = 0;
      }
    }
    else
    {
      v45 = v69;
      v69[*((_QWORD *)&v70 + 1)] = 0;
    }
    if (TNewWords::findAndAddWords((uint64_t)this, v45, (uint64_t)*this, v1, 1))
      goto LABEL_42;
  }
  v52 = this[4];
  v53 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v52 + 1624));
  if (!*((_BYTE *)v52 + TParam::getValidConfig((TSegmenter *)((char *)v52 + 1624), v53) + 1776))
  {
LABEL_44:
    v28 = 4;
  }
  else
  {
    v54 = 0;
    v55 = *this;
    v56 = v20 - 1;
    v57 = v20;
    v58 = (int **)v73;
    do
    {
      if (v56)
        v59 = 0;
      else
        v59 = v1;
      v60 = (TSegmenter *)TNewWords::findAndAddWords((uint64_t)this, *v58, (uint64_t)v55, v59, 1);
      if (!v60)
      {
        v61 = *v58;
        if (TLexicon::checkName((uint64_t)this[3], *v58, 0, 0xFFFFFFFFFFFFFFFFLL))
        {
          v60 = 0;
        }
        else
        {
          v62 = TLexicon::addTempWord(this[3], v61, 0, 0, 0);
          v60 = (TSegmenter *)TGraph::addVertex(this[1], v59);
          v63 = this[1];
          v65 = 0;
          v66 = v62;
          v67 = 0;
          v68 = 0;
          TGraph::addEdge(v63, (uint64_t)v55, v60, (uint64_t)&v65);
          v54 = 1;
        }
      }
      ++v58;
      --v56;
      v55 = v60;
      --v57;
    }
    while (v57);
    v28 = 0;
    v21 = 0;
    if ((v54 & 1) == 0)
      goto LABEL_53;
  }
  v29 = this[4];
  v30 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v29 + 1872));
  if (!*((_BYTE *)v29 + TParam::getValidConfig((TSegmenter *)((char *)v29 + 1872), v30) + 2024))
    goto LABEL_52;
  v31 = this[4];
  v32 = TParam::getActiveConfigHandle((TSegmenter *)((char *)v31 + 1128));
  if (!*((_BYTE *)v31 + TParam::getValidConfig((TSegmenter *)((char *)v31 + 1128), v32) + 1280))
    goto LABEL_52;
  TBuffer<wchar_t>::assign((uint64_t)&v69, *(int **)&v73[0]);
  for (k = 1; k != v20; ++k)
  {
    v65 = 45;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), &v65, 1uLL);
    v34 = 0;
    v35 = (int *)*((_QWORD *)v73 + k);
    while (v35[v34++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v69, *((unint64_t *)&v70 + 1), v35, v34 - 1);
  }
  v37 = (uint64_t)this[3];
  v38 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v69);
  if (TLexicon::checkName(v37, v38, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_52:
    v21 = 0;
    goto LABEL_53;
  }
  v46 = this[3];
  v47 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v69);
  v48 = TLexicon::addTempWord(v46, v47, 0, 0, 0);
  v50 = *this;
  v49 = this[1];
  v51 = TGraph::addVertex(v49, v1);
  v65 = v28;
  v66 = v48;
  v67 = 0;
  v68 = 0;
  TGraph::addEdge(v49, (uint64_t)v50, v51, (uint64_t)&v65);
LABEL_42:
  this[5] = (TSegmenter *)v1;
  v21 = 1;
LABEL_53:
  if (v72 && v69 != (int *)v71 && v69)
    MEMORY[0x1AF44D160]();
  return v21;
}

void sub_1ADCEEE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  MEMORY[0x1AF44D190](a10, 0x1070C40ADD13FEBLL);
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addContractionWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  char *v4;
  __int32 *v5;
  __int32 **Segment;
  uint64_t PrevVertex;
  __int32 **v9;
  __int32 *v10;
  int *v11;
  uint64_t Vertex;
  uint64_t v13;
  uint64_t OutEdge;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  int *v26;
  uint64_t v27;
  int *v28;
  TAllocator *v29;
  int *v30;
  _QWORD *v31;
  TGraph *v32;
  _QWORD *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  char v37;
  _BYTE *v38;
  __int128 v39;
  _BYTE v40[1024];
  char v41;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1872);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  v4 = TStringParam::get((TStringParam *)(*((_QWORD *)this + 4) + 2368));
  if (!*(_DWORD *)v4)
    return 0;
  v5 = (__int32 *)v4;
  Segment = (__int32 **)TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(_QWORD *)this + 16));
  if ((*Segment)[1])
    return 0;
  v9 = Segment;
  v10 = wcschr(v5, **Segment);
  if (!v10)
    return 0;
  if (*(_QWORD *)(*(_QWORD *)this + 16) != *(_QWORD *)(*(_QWORD *)this + 24))
    return 0;
  v11 = v10;
  Vertex = TGraph::getVertex(*((TGraph **)this + 1), (const char *)v9[1]);
  if (!Vertex)
    return 0;
  v13 = Vertex;
  if (*(_QWORD *)(Vertex + 16) != *(_QWORD *)(Vertex + 24))
    return 0;
  OutEdge = TVertex::getOutEdge(*(_QWORD *)this);
  if (OutEdge)
  {
    if (*(_QWORD *)(OutEdge + 24) != v13)
      return 0;
    while (1)
    {
      OutEdge = *(_QWORD *)(OutEdge + 8);
      if (!OutEdge)
        break;
      if (!*(_BYTE *)(OutEdge + 32))
      {
        PrevVertex = 0;
        if (*(_QWORD *)(OutEdge + 24) != v13)
          return PrevVertex;
      }
    }
  }
  v15 = TVertex::getInEdge(v13);
  v16 = *(_QWORD *)this;
  if (!v15)
    goto LABEL_22;
  if (*(_QWORD *)(v15 + 16) != v16)
    return 0;
  while (1)
  {
    v15 = *(_QWORD *)v15;
    if (!v15)
      break;
    if (!*(_BYTE *)(v15 + 32))
    {
      PrevVertex = 0;
      if (*(_QWORD *)(v15 + 16) != v16)
        return PrevVertex;
    }
  }
LABEL_22:
  PrevVertex = TGraph::getPrevVertex(*((TGraph **)this + 1), *(_QWORD *)(v16 + 24) - 1);
  if (!PrevVertex)
    return PrevVertex;
  v17 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(PrevVertex + 16));
  if (!v17 || *(_DWORD *)(v17 + 24) != 1 || *(_QWORD *)(v17 + 8) != *(_QWORD *)(*(_QWORD *)this + 24))
    return 0;
  v18 = 0;
  v38 = v40;
  v39 = xmmword_1AE1418C0;
  v41 = 1;
  v19 = *(int **)v17;
  while (v19[v18++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, 0, v19, v18 - 1);
  v34 = *v11;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), &v34, 1uLL);
  v21 = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(v13 + 16));
  v22 = v21;
  if (!v21 || *(_DWORD *)(v21 + 24) != 1)
    goto LABEL_35;
  v23 = 0;
  v24 = *(int **)v21;
  while (v24[v23++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v38, *((unint64_t *)&v39 + 1), v24, v23 - 1);
  v26 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TNewWords::findAndAddWords((uint64_t)this, v26, PrevVertex, *(char **)(v22 + 8), 0))
    goto LABEL_33;
  v27 = *((_QWORD *)this + 3);
  v28 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  if (TLexicon::checkName(v27, v28, 0, 0xFFFFFFFFFFFFFFFFLL))
  {
LABEL_35:
    PrevVertex = 0;
    goto LABEL_36;
  }
  v29 = (TAllocator *)*((_QWORD *)this + 3);
  v30 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v38);
  v31 = TLexicon::addTempWord(v29, v30, 0, 0, 0);
  v32 = (TGraph *)*((_QWORD *)this + 1);
  v33 = TGraph::addVertex(v32, *(char **)(v22 + 8));
  v34 = 4;
  v35 = v31;
  v36 = 0;
  v37 = 0;
  TGraph::addEdge(v32, PrevVertex, v33, (uint64_t)&v34);
LABEL_33:
  *((_QWORD *)this + 5) = *(_QWORD *)(v22 + 8);
  PrevVertex = 1;
LABEL_36:
  if (v41 && v38 != v40 && v38)
    MEMORY[0x1AF44D160]();
  return PrevVertex;
}

void sub_1ADCEF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

BOOL TNewWords::addAcronymWord(TSegmenter **this)
{
  char *v1;
  char v3;
  uint64_t Segment;
  uint64_t v5;
  int *v6;
  int v7;
  unsigned __int8 v8;
  char isUpper;
  uint64_t v10;
  int *v11;
  const __int32 **v13;
  const __int32 **v14;
  uint64_t v15;
  int *v16;
  TLocaleInfo *v18;
  _BOOL8 v19;
  unint64_t v20;
  signed int v21;
  unsigned __int8 v22;
  TLocaleInfo *v23;
  int *v24;
  _QWORD *v25;
  TSegmenter *v26;
  uint64_t ActiveConfigHandle;
  int *v28;
  uint64_t v29;
  int *v30;
  _QWORD *v31;
  TAllocator *v32;
  int *v33;
  _QWORD *v34;
  TSegmenter *v35;
  TSegmenter *v36;
  int *v39;
  __int128 v40;
  _BYTE v41[785];
  char v42;
  int *v43;
  __int128 v44;
  _BYTE v45[1024];
  char v46;
  int v47[3];

  v1 = (char *)*((_QWORD *)*this + 2);
  v43 = (int *)v45;
  v44 = xmmword_1AE1418C0;
  v46 = 1;
  if (!*v1)
  {
    v19 = 0;
LABEL_62:
    if (v43 != (int *)v45 && v43 != 0)
      MEMORY[0x1AF44D160]();
    return v19;
  }
  v3 = 1;
  do
  {
    Segment = TSegmenter::getSegment(this[2], v1);
    v5 = Segment;
    if (*(_DWORD *)(Segment + 24) != 1)
      break;
    v6 = *(int **)Segment;
    if (wcslen(*(const __int32 **)Segment) != 1)
      break;
    v7 = *v6;
    {
      v18 = (TLocaleInfo *)operator new();
      TLocaleInfo::TLocaleInfo(v18);
      TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v18;
    }
    isUpper = TLocaleInfo::isUpper(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v7);
    v10 = 0;
    v11 = *(int **)v5;
    while (v11[v10++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v11, v10 - 1);
    v1 = *(char **)(v5 + 8);
    v13 = (const __int32 **)TSegmenter::getSegment(this[2], v1);
    v14 = v13;
    v3 &= isUpper;
    if (!v13)
      break;
    if (wcscmp(*v13, (const __int32 *)"."))
      break;
    v15 = 0;
    v16 = (int *)*v14;
    while (v16[v15++])
      ;
    TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), v16, v15 - 1);
    v1 = (char *)v14[1];
  }
  while (*v1);
  v19 = *((_QWORD *)&v44 + 1) > 3uLL;
  if (*((_QWORD *)&v44 + 1) >= 4uLL)
  {
    if ((v3 & 1) == 0)
      goto LABEL_38;
    v20 = 0;
    v39 = (int *)v41;
    v40 = xmmword_1AE1418C0;
    v42 = 1;
    do
    {
      v21 = v43[v20];
      if ((v22 & 1) == 0
      {
        v23 = (TLocaleInfo *)operator new();
        TLocaleInfo::TLocaleInfo(v23);
        TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo = (uint64_t)v23;
      }
      if (TLocaleInfo::isAlpha(TLocaleInfo::getGlobalLocaleInfo(void)::s_localeInfo, v21))
      {
        v47[0] = v43[v20];
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v47, 1uLL);
      }
      ++v20;
    }
    while (v20 < *((_QWORD *)&v44 + 1));
    if (*((_QWORD *)&v40 + 1) >= (unint64_t)v40)
    {
      if (v42)
      {
        v47[0] = 0;
        TBuffer<wchar_t>::insert((uint64_t)&v39, *((unint64_t *)&v40 + 1), v47, 1uLL);
        v24 = v39;
        --*((_QWORD *)&v40 + 1);
      }
      else
      {
        v24 = v39;
        if ((_QWORD)v40)
          v39[(_QWORD)v40 - 1] = 0;
      }
    }
    else
    {
      v24 = v39;
      v39[*((_QWORD *)&v40 + 1)] = 0;
    }
    v25 = TNewWords::findAndAddWords((uint64_t)this, v24, (uint64_t)*this, v1, 1);
    if (v42 && v39 != (int *)v41 && v39)
      MEMORY[0x1AF44D160]();
    if (!v25)
    {
LABEL_38:
      v26 = this[4];
      ActiveConfigHandle = TParam::getActiveConfigHandle((TSegmenter *)((char *)v26 + 1872));
      if (*((_BYTE *)v26 + TParam::getValidConfig((TSegmenter *)((char *)v26 + 1872), ActiveConfigHandle) + 2024))
      {
        if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
        {
          if (v46)
          {
            LODWORD(v39) = 0;
            TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
            v28 = v43;
            --*((_QWORD *)&v44 + 1);
          }
          else
          {
            v28 = v43;
            if ((_QWORD)v44)
              v43[(_QWORD)v44 - 1] = 0;
          }
        }
        else
        {
          v28 = v43;
          v43[*((_QWORD *)&v44 + 1)] = 0;
        }
        if (!TNewWords::findAndAddWords((uint64_t)this, v28, (uint64_t)*this, v1, 0))
        {
          v29 = (uint64_t)this[3];
          if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
          {
            if (v46)
            {
              LODWORD(v39) = 0;
              TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
              v30 = v43;
              --*((_QWORD *)&v44 + 1);
            }
            else
            {
              v30 = v43;
              if ((_QWORD)v44)
                v43[(_QWORD)v44 - 1] = 0;
            }
          }
          else
          {
            v30 = v43;
            v43[*((_QWORD *)&v44 + 1)] = 0;
          }
          if (!TLexicon::checkName(v29, v30, 0, 0xFFFFFFFFFFFFFFFFLL))
          {
            v31 = TGraph::addVertex(this[1], v1);
            v32 = this[3];
            if (*((_QWORD *)&v44 + 1) >= (unint64_t)v44)
            {
              if (v46)
              {
                LODWORD(v39) = 0;
                TBuffer<wchar_t>::insert((uint64_t)&v43, *((unint64_t *)&v44 + 1), (int *)&v39, 1uLL);
                v33 = v43;
                --*((_QWORD *)&v44 + 1);
              }
              else
              {
                v33 = v43;
                if ((_QWORD)v44)
                  v43[(_QWORD)v44 - 1] = 0;
              }
            }
            else
            {
              v33 = v43;
              v43[*((_QWORD *)&v44 + 1)] = 0;
            }
            v34 = TLexicon::addTempWord(v32, v33, 0, 0, 0);
            v35 = *this;
            v36 = this[1];
            LODWORD(v39) = 4;
            v40 = (unint64_t)v34;
            v41[0] = 0;
            TGraph::addEdge(v36, (uint64_t)v35, v31, (uint64_t)&v39);
          }
        }
      }
    }
    this[5] = (TSegmenter *)v1;
  }
  if (v46)
    goto LABEL_62;
  return v19;
}

void sub_1ADCEF74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  MEMORY[0x1AF44D190](v11, 0x1070C40ADD13FEBLL);
  if (LOBYTE(STACK[0x428]) && a11 != v13 && a11)
    MEMORY[0x1AF44D160]();
  if (LOBYTE(STACK[0x848]))
  {
    if (STACK[0x430] != v12 && STACK[0x430] != 0)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addAbbreviationWord(TNewWords *this)
{
  TParam *v2;
  uint64_t ActiveConfigHandle;
  uint64_t result;
  int **v5;
  char *v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v10;
  char *v11;
  uint64_t OutEdge;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int *v17;
  uint64_t v18;
  int *v19;
  _QWORD *v20;
  TAllocator *v21;
  int *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t Segment;
  int v27;
  int v28;
  uint64_t GlobalLocaleInfo;
  BOOL v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  _BYTE *v35;
  __int128 v36;
  _BYTE v37[1024];
  char v38;

  v2 = (TParam *)(*((_QWORD *)this + 4) + 1872);
  ActiveConfigHandle = TParam::getActiveConfigHandle(v2);
  if (!*((_BYTE *)v2 + TParam::getValidConfig(v2, ActiveConfigHandle) + 152))
    return 0;
  result = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(*(_QWORD *)this + 16));
  if (!result)
    return result;
  v5 = (int **)result;
  v6 = *(char **)(result + 8);
  v7 = (unint64_t)&v6[-*(_QWORD *)(*(_QWORD *)this + 16)];
  v8 = *(_DWORD *)(result + 24) == 1 && v7 >= 2;
  if (!v8 || v7 > 5)
    return 0;
  result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v6);
  if (!result)
    return result;
  v10 = result;
  if (wcscmp(*(const __int32 **)result, (const __int32 *)"."))
    return 0;
  v11 = *(char **)(v10 + 8);
  if (!*v11)
    return 0;
  OutEdge = TVertex::getOutEdge(*(_QWORD *)this);
  if (OutEdge)
  {
    v13 = OutEdge;
    if ((*(_BYTE *)(OutEdge + 64) & 0xC0) == 0)
      return 0;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (!v13)
        break;
      if (!*(_BYTE *)(v13 + 32))
      {
        result = 0;
        if ((*(_BYTE *)(v13 + 64) & 0xC0) == 0)
          return result;
      }
    }
  }
  if (!memchr(";:,!?", *v11, 6uLL))
  {
    result = TSegmenter::getSegment(*((TSegmenter **)this + 2), v11);
    if (!result)
      return result;
    Segment = result;
    if (*(_DWORD *)(result + 24))
      return 0;
    while (1)
    {
      v27 = *(_DWORD *)(Segment + 24);
      v28 = **(_DWORD **)Segment;
      GlobalLocaleInfo = TLocaleInfo::getGlobalLocaleInfo((TLocaleInfo *)result);
      if (v27)
        break;
      result = 0;
      if (v28 <= 8202)
      {
        if (v28 != 32 && v28 != 160)
          return result;
      }
      else
      {
        v30 = v28 == 8203 || v28 == 65279;
        if (!v30 && v28 != 12288)
          return result;
      }
      Segment = TSegmenter::getSegment(*((TSegmenter **)this + 2), *(char **)(Segment + 8));
      result = 0;
      if (!Segment)
        return result;
    }
    if ((TLocaleInfo::isUpper(GlobalLocaleInfo, v28) & 1) != 0)
      return 0;
  }
  v35 = v37;
  v36 = xmmword_1AE1418C0;
  v38 = 1;
  TBuffer<wchar_t>::assign((uint64_t)&v35, *v5);
  v14 = 0;
  v15 = *(int **)v10;
  while (v15[v14++])
    ;
  TBuffer<wchar_t>::insert((uint64_t)&v35, *((unint64_t *)&v36 + 1), v15, v14 - 1);
  v17 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
  if (!TNewWords::findAndAddWords((uint64_t)this, v17, *(_QWORD *)this, *(char **)(v10 + 8), 0))
  {
    v18 = *((_QWORD *)this + 3);
    v19 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
    if (!TLexicon::checkName(v18, v19, 0, 0xFFFFFFFFFFFFFFFFLL))
    {
      v20 = TGraph::addVertex(*((TGraph **)this + 1), *(char **)(v10 + 8));
      v21 = (TAllocator *)*((_QWORD *)this + 3);
      v22 = (int *)TBuffer<wchar_t>::c_str((uint64_t)&v35);
      v23 = TLexicon::addTempWord(v21, v22, 0, 0, 0);
      v24 = *(_QWORD *)this;
      v25 = (_QWORD *)*((_QWORD *)this + 1);
      v31 = 4;
      v32 = v23;
      v33 = 0;
      v34 = 0;
      TGraph::addEdge(v25, v24, v20, (uint64_t)&v31);
    }
  }
  *((_QWORD *)this + 5) = *(_QWORD *)(v10 + 8);
  if (v38 && v35 != v37 && v35)
    MEMORY[0x1AF44D160]();
  return 1;
}

void sub_1ADCEFB30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v13;

  if (LOBYTE(STACK[0x438]) && a13 != v13)
  {
    if (a13)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(a1);
}

uint64_t TNewWords::addWords(uint64_t this, TVertex *a2, TGraph *a3, TSegmenter *a4, TLexicon *a5)
{
  TSegmenter **v5;

  *(_QWORD *)this = a2;
  *(_QWORD *)(this + 8) = a3;
  *(_QWORD *)(this + 16) = a4;
  *(_QWORD *)(this + 24) = a5;
  if (*((_QWORD *)a2 + 2) >= *(_QWORD *)(this + 40))
  {
    v5 = (TSegmenter **)this;
    this = TNewWords::addAlphanumWord((TNewWords *)this);
    if ((this & 1) == 0)
    {
      this = TNewWords::addHyphenatedWord(v5);
      if ((this & 1) == 0)
      {
        this = TNewWords::addContractionWord((TNewWords *)v5);
        if ((this & 1) == 0)
        {
          this = TNewWords::addAcronymWord(v5);
          if ((this & 1) == 0)
            return TNewWords::addAbbreviationWord((TNewWords *)v5);
        }
      }
    }
  }
  return this;
}

double kaldi::quasar::ErrorRegion::ErrorRegion(kaldi::quasar::ErrorRegion *this, int a2, int a3)
{
  double result;

  *(_QWORD *)this = &off_1E5D32A90;
  *((_QWORD *)this + 1) = 0x7F800000FFFFFFFFLL;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a3;
  *((_DWORD *)this + 12) = a2;
  *((_DWORD *)this + 13) = a3;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_DWORD *)this + 74) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  return result;
}

kaldi::quasar::ErrorRegion *kaldi::quasar::ErrorRegion::ErrorRegion(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  *(_QWORD *)this = &off_1E5D32A90;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 38) = 0;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  kaldi::quasar::ErrorRegion::CopyAndAssign(this, a2);
  return this;
}

void sub_1ADCEFD00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a2);
  v5 = v3;
  v7 = *v5;
  if (*v5)
  {
    v2[39] = v7;
    operator delete(v7);
  }
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  v8 = (void *)v2[28];
  if (v8)
  {
    v2[29] = v8;
    operator delete(v8);
  }
  v9 = (void *)v2[25];
  if (v9)
  {
    v2[26] = v9;
    operator delete(v9);
  }
  v10 = (void *)v2[22];
  if (v10)
  {
    v2[23] = v10;
    operator delete(v10);
  }
  v11 = (void *)v2[19];
  if (v11)
  {
    v2[20] = v11;
    operator delete(v11);
  }
  v12 = (void *)v2[16];
  if (v12)
  {
    v2[17] = v12;
    operator delete(v12);
  }
  v13 = (void *)v2[13];
  if (v13)
  {
    v2[14] = v13;
    operator delete(v13);
  }
  v14 = (void *)v2[10];
  if (v14)
  {
    v2[11] = v14;
    operator delete(v14);
  }
  v15 = *v4;
  if (*v4)
  {
    v2[8] = v15;
    operator delete(v15);
  }
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

float kaldi::quasar::ErrorRegion::CopyAndAssign(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  float result;
  uint64_t v11;

  v4 = (_QWORD *)((char *)this + 16);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize((uint64_t *)this + 2, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 3) - *((_QWORD *)a2 + 2)) >> 3));
  v6 = *((_QWORD *)this + 2);
  v5 = *((_QWORD *)this + 3);
  if (v5 != v6)
  {
    v7 = 0;
    do
    {
      v8 = *(uint64_t ***)(*((_QWORD *)a2 + 2) + 40 * v7 + 16);
      if (v8)
      {
        do
        {
          v9 = *v4 + 40 * v7;
          v11 = (*(uint64_t (**)(uint64_t *))(*v8[2] + 32))(v8[2]);
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v9, &v11, &v11);
          v8 = (uint64_t **)*v8;
        }
        while (v8);
        v6 = *((_QWORD *)this + 2);
        v5 = *((_QWORD *)this + 3);
      }
      ++v7;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v5 - v6) >> 3) > v7);
  }
  *((_DWORD *)this + 2) = *((_DWORD *)a2 + 2);
  *((_DWORD *)this + 3) = *((_DWORD *)a2 + 3);
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)((char *)a2 + 40);
  if (this == a2)
  {
    result = *((float *)a2 + 74);
    *((float *)this + 74) = result;
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 56, *((char **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 80, *((char **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 104, *((char **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 128, *((char **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 152, *((char **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 176, *((char **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 200, *((char **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 2);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 224, *((char **)a2 + 28), *((_QWORD *)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 2);
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 248, *((_QWORD *)a2 + 31), *((_QWORD *)a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3));
    std::vector<std::vector<int>>::__assign_with_size[abi:ne180100]<std::vector<int>*,std::vector<int>*>((uint64_t)this + 272, *((_QWORD *)a2 + 34), *((_QWORD *)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 3));
    *((_DWORD *)this + 74) = *((_DWORD *)a2 + 74);
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 304, *((char **)a2 + 38), *((_QWORD *)a2 + 39), (uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 2);
  }
  return result;
}

kaldi::quasar::ErrorRegion *kaldi::quasar::ErrorRegion::operator=(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  if (this != a2)
  {
    kaldi::quasar::ErrorRegion::FreeAttributes(this);
    kaldi::quasar::ErrorRegion::CopyAndAssign(this, a2);
  }
  return this;
}

_QWORD *kaldi::quasar::ErrorRegion::FreeAttributes(_QWORD *this)
{
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v1 = this[2];
  if (this[3] != v1)
  {
    v2 = this;
    v3 = 0;
    do
    {
      v4 = *(_QWORD **)(v1 + 40 * v3 + 16);
      if (v4)
      {
        do
        {
          if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)v4[2] + 56))(v4[2]) & 1) == 0)
          {
            v5 = v4[2];
            if (v5)
              (*(void (**)(uint64_t))(*(_QWORD *)v5 + 72))(v5);
          }
          v4 = (_QWORD *)*v4;
        }
        while (v4);
        v1 = v2[2];
      }
      this = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear((_QWORD *)(v1 + 40 * v3++));
      v1 = v2[2];
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((v2[3] - v1) >> 3) > v3);
  }
  return this;
}

void kaldi::quasar::ErrorRegion::~ErrorRegion(kaldi::quasar::ErrorRegion *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void **v11;

  *(_QWORD *)this = &off_1E5D32A90;
  kaldi::quasar::ErrorRegion::FreeAttributes(this);
  v2 = (void *)*((_QWORD *)this + 38);
  if (v2)
  {
    *((_QWORD *)this + 39) = v2;
    operator delete(v2);
  }
  v11 = (void **)((char *)this + 272);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v11 = (void **)((char *)this + 248);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v11);
  v3 = (void *)*((_QWORD *)this + 28);
  if (v3)
  {
    *((_QWORD *)this + 29) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 25);
  if (v4)
  {
    *((_QWORD *)this + 26) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 22);
  if (v5)
  {
    *((_QWORD *)this + 23) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 19);
  if (v6)
  {
    *((_QWORD *)this + 20) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 16);
  if (v7)
  {
    *((_QWORD *)this + 17) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 13);
  if (v8)
  {
    *((_QWORD *)this + 14) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 10);
  if (v9)
  {
    *((_QWORD *)this + 11) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 7);
  if (v10)
  {
    *((_QWORD *)this + 8) = v10;
    operator delete(v10);
  }
  v11 = (void **)((char *)this + 16);
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](&v11);
}

{
  kaldi::quasar::ErrorRegion::~ErrorRegion(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  result = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((result - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__append(a1, v6);
  if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (result != v7)
      result = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(result - 40);
    a1[1] = v7;
  }
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::AddRefArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  int v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  int v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  float *v55;
  char *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t result;

  v6 = a1 + 72;
  v7 = *(_QWORD *)(a1 + 72);
  v8 = *(char **)(a1 + 64);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char **)(a1 + 56);
    v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
      v10 = *(char **)(a1 + 56);
      v8 = *(char **)(a1 + 64);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = *(_DWORD *)(a2 + 4);
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)(a1 + 56) = v16;
    *(_QWORD *)(a1 + 64) = v9;
    *(_QWORD *)(a1 + 72) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(a2 + 4);
    v9 = v8 + 4;
  }
  v19 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 64) = v9;
  v20 = *(_DWORD *)(a2 + 12);
  v21 = *(char **)(a1 + 112);
  if ((unint64_t)v21 >= v19)
  {
    v23 = *(char **)(a1 + 104);
    v24 = (v21 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62)
      goto LABEL_69;
    v25 = v19 - (_QWORD)v23;
    v26 = (uint64_t)(v19 - (_QWORD)v23) >> 1;
    if (v26 <= v24 + 1)
      v26 = v24 + 1;
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 120, v27);
      v23 = *(char **)(a1 + 104);
      v21 = *(char **)(a1 + 112);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *(_DWORD *)v29 = v20;
    v22 = v29 + 4;
    while (v21 != v23)
    {
      v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(_QWORD *)(a1 + 104) = v29;
    *(_QWORD *)(a1 + 112) = v22;
    *(_QWORD *)(a1 + 120) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v21 = v20;
    v22 = v21 + 4;
  }
  v32 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 112) = v22;
  v33 = *(_DWORD *)(a3 + 8);
  v34 = *(char **)(a1 + 160);
  if ((unint64_t)v34 >= v32)
  {
    v36 = *(char **)(a1 + 152);
    v37 = (v34 - v36) >> 2;
    if ((unint64_t)(v37 + 1) >> 62)
      goto LABEL_69;
    v38 = v32 - (_QWORD)v36;
    v39 = (uint64_t)(v32 - (_QWORD)v36) >> 1;
    if (v39 <= v37 + 1)
      v39 = v37 + 1;
    if (v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 168, v40);
      v36 = *(char **)(a1 + 152);
      v34 = *(char **)(a1 + 160);
    }
    else
    {
      v41 = 0;
    }
    v42 = &v41[4 * v37];
    v43 = &v41[4 * v40];
    *(_DWORD *)v42 = v33;
    v35 = v42 + 4;
    while (v34 != v36)
    {
      v44 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v42 - 1) = v44;
      v42 -= 4;
    }
    *(_QWORD *)(a1 + 152) = v42;
    *(_QWORD *)(a1 + 160) = v35;
    *(_QWORD *)(a1 + 168) = v43;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_DWORD *)v34 = v33;
    v35 = v34 + 4;
  }
  v45 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 160) = v35;
  v46 = *(float *)(a2 + 8) - *(float *)(a3 + 8);
  v47 = *(float **)(a1 + 208);
  if ((unint64_t)v47 < v45)
  {
    *v47 = v46;
    v48 = v47 + 1;
    goto LABEL_65;
  }
  v49 = *(float **)(a1 + 200);
  v50 = v47 - v49;
  if ((unint64_t)(v50 + 1) >> 62)
LABEL_69:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v51 = v45 - (_QWORD)v49;
  v52 = (uint64_t)(v45 - (_QWORD)v49) >> 1;
  if (v52 <= v50 + 1)
    v52 = v50 + 1;
  if (v51 >= 0x7FFFFFFFFFFFFFFCLL)
    v53 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  if (v53)
  {
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 216, v53);
    v49 = *(float **)(a1 + 200);
    v47 = *(float **)(a1 + 208);
  }
  else
  {
    v54 = 0;
  }
  v55 = (float *)&v54[4 * v50];
  v56 = &v54[4 * v53];
  *v55 = v46;
  v48 = v55 + 1;
  while (v47 != v49)
  {
    v57 = *((_DWORD *)v47-- - 1);
    *((_DWORD *)v55-- - 1) = v57;
  }
  *(_QWORD *)(a1 + 200) = v55;
  *(_QWORD *)(a1 + 208) = v48;
  *(_QWORD *)(a1 + 216) = v56;
  if (v49)
    operator delete(v49);
LABEL_65:
  *(_QWORD *)(a1 + 208) = v48;
  v58 = (uint64_t *)(a1 + 248);
  v59 = a2 + 16;
  v60 = *(_QWORD *)(a1 + 256);
  if (v60 >= *(_QWORD *)(a1 + 264))
  {
    result = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v58, v59);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v58, v59);
    result = v60 + 24;
  }
  *(_QWORD *)(a1 + 256) = result;
  *(_DWORD *)(a1 + 48) += (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2;
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::AddHypoArc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  char *v8;
  _DWORD *v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  unint64_t v19;
  int v20;
  char *v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  unint64_t v32;
  int v33;
  char *v34;
  _DWORD *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  int v44;
  unint64_t v45;
  float v46;
  float *v47;
  float *v48;
  float *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  float *v55;
  char *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t result;

  v6 = a1 + 96;
  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(char **)(a1 + 88);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(char **)(a1 + 80);
    v11 = (v8 - v10) >> 2;
    if ((unint64_t)(v11 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v12 = v7 - (_QWORD)v10;
    v13 = (uint64_t)(v7 - (_QWORD)v10) >> 1;
    if (v13 <= v11 + 1)
      v13 = v11 + 1;
    if (v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
    {
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v6, v14);
      v10 = *(char **)(a1 + 80);
      v8 = *(char **)(a1 + 88);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[4 * v11];
    v17 = &v15[4 * v14];
    *(_DWORD *)v16 = *(_DWORD *)(a2 + 4);
    v9 = v16 + 4;
    while (v8 != v10)
    {
      v18 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v16 - 1) = v18;
      v16 -= 4;
    }
    *(_QWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 88) = v9;
    *(_QWORD *)(a1 + 96) = v17;
    if (v10)
      operator delete(v10);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(a2 + 4);
    v9 = v8 + 4;
  }
  v19 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 88) = v9;
  v20 = *(_DWORD *)(a2 + 12);
  v21 = *(char **)(a1 + 136);
  if ((unint64_t)v21 >= v19)
  {
    v23 = *(char **)(a1 + 128);
    v24 = (v21 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62)
      goto LABEL_69;
    v25 = v19 - (_QWORD)v23;
    v26 = (uint64_t)(v19 - (_QWORD)v23) >> 1;
    if (v26 <= v24 + 1)
      v26 = v24 + 1;
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v28 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 144, v27);
      v23 = *(char **)(a1 + 128);
      v21 = *(char **)(a1 + 136);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *(_DWORD *)v29 = v20;
    v22 = v29 + 4;
    while (v21 != v23)
    {
      v31 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(_QWORD *)(a1 + 128) = v29;
    *(_QWORD *)(a1 + 136) = v22;
    *(_QWORD *)(a1 + 144) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v21 = v20;
    v22 = v21 + 4;
  }
  v32 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 136) = v22;
  v33 = *(_DWORD *)(a3 + 8);
  v34 = *(char **)(a1 + 184);
  if ((unint64_t)v34 >= v32)
  {
    v36 = *(char **)(a1 + 176);
    v37 = (v34 - v36) >> 2;
    if ((unint64_t)(v37 + 1) >> 62)
      goto LABEL_69;
    v38 = v32 - (_QWORD)v36;
    v39 = (uint64_t)(v32 - (_QWORD)v36) >> 1;
    if (v39 <= v37 + 1)
      v39 = v37 + 1;
    if (v38 >= 0x7FFFFFFFFFFFFFFCLL)
      v40 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v40 = v39;
    if (v40)
    {
      v41 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 192, v40);
      v36 = *(char **)(a1 + 176);
      v34 = *(char **)(a1 + 184);
    }
    else
    {
      v41 = 0;
    }
    v42 = &v41[4 * v37];
    v43 = &v41[4 * v40];
    *(_DWORD *)v42 = v33;
    v35 = v42 + 4;
    while (v34 != v36)
    {
      v44 = *((_DWORD *)v34 - 1);
      v34 -= 4;
      *((_DWORD *)v42 - 1) = v44;
      v42 -= 4;
    }
    *(_QWORD *)(a1 + 176) = v42;
    *(_QWORD *)(a1 + 184) = v35;
    *(_QWORD *)(a1 + 192) = v43;
    if (v36)
      operator delete(v36);
  }
  else
  {
    *(_DWORD *)v34 = v33;
    v35 = v34 + 4;
  }
  v45 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 184) = v35;
  v46 = *(float *)(a2 + 8) - *(float *)(a3 + 8);
  v47 = *(float **)(a1 + 232);
  if ((unint64_t)v47 < v45)
  {
    *v47 = v46;
    v48 = v47 + 1;
    goto LABEL_65;
  }
  v49 = *(float **)(a1 + 224);
  v50 = v47 - v49;
  if ((unint64_t)(v50 + 1) >> 62)
LABEL_69:
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v51 = v45 - (_QWORD)v49;
  v52 = (uint64_t)(v45 - (_QWORD)v49) >> 1;
  if (v52 <= v50 + 1)
    v52 = v50 + 1;
  if (v51 >= 0x7FFFFFFFFFFFFFFCLL)
    v53 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v53 = v52;
  if (v53)
  {
    v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 240, v53);
    v49 = *(float **)(a1 + 224);
    v47 = *(float **)(a1 + 232);
  }
  else
  {
    v54 = 0;
  }
  v55 = (float *)&v54[4 * v50];
  v56 = &v54[4 * v53];
  *v55 = v46;
  v48 = v55 + 1;
  while (v47 != v49)
  {
    v57 = *((_DWORD *)v47-- - 1);
    *((_DWORD *)v55-- - 1) = v57;
  }
  *(_QWORD *)(a1 + 224) = v55;
  *(_QWORD *)(a1 + 232) = v48;
  *(_QWORD *)(a1 + 240) = v56;
  if (v49)
    operator delete(v49);
LABEL_65:
  *(_QWORD *)(a1 + 232) = v48;
  v58 = (uint64_t *)(a1 + 272);
  v59 = a2 + 16;
  v60 = *(_QWORD *)(a1 + 280);
  if (v60 >= *(_QWORD *)(a1 + 288))
  {
    result = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(v58, v59);
  }
  else
  {
    std::vector<std::vector<int>>::__construct_one_at_end[abi:ne180100]<std::vector<int> const&>((uint64_t)v58, v59);
    result = v60 + 24;
  }
  *(_QWORD *)(a1 + 280) = result;
  *(_DWORD *)(a1 + 52) += (*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2;
  return result;
}

void kaldi::quasar::ErrorRegion::AddRefWord(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _BOOL4 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  _QWORD v15[2];
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  int v26;
  float v27;
  int v28;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)*a4) + 48);
  v20[0] = *(_QWORD *)v8;
  v20[1] = *(_QWORD *)(v8 + 8);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
  v24 = *(_DWORD *)(v8 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 64) + 8 * (int)*a4) + 48);
  v15[0] = *(_QWORD *)v9;
  v15[1] = *(_QWORD *)(v9 + 8);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v16, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
  v19 = *(_DWORD *)(v9 + 40);
  kaldi::quasar::ErrorRegion::AddRefArc(a1, (uint64_t)v20, (uint64_t)v15);
  *a4 = v24;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a2 + 32))(&v12, a2);
  v27 = *((float *)&v12 + 1);
  v28 = v12;
  v26 = 2139095040;
  v25 = INFINITY;
  v10.n128_u32[0] = v12;
  v11 = *(float *)&v12 != INFINITY || (v10.n128_f32[0] = v27, v27 != v25) || v14 != __p;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, __n128))(*a2 + 32))(&v12, a2, *a4, v10);
    *(float *)(*(_QWORD *)(a1 + 208) - 4) = *(float *)&v12 + *(float *)(*(_QWORD *)(a1 + 208) - 4);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1ADCF0ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::AddHypoWord(uint64_t *a1, _QWORD *a2, uint64_t a3, unsigned int *a4)
{
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  _BOOL4 v11;
  uint64_t v12;
  void *__p;
  void *v14;
  _QWORD v15[2];
  void *v16;
  void *v17;
  uint64_t v18;
  int v19;
  _QWORD v20[2];
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned int v24;
  float v25;
  int v26;
  float v27;
  int v28;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2[1] + 64) + 8 * (int)*a4) + 48);
  v20[0] = *(_QWORD *)v8;
  v20[1] = *(_QWORD *)(v8 + 8);
  v22 = 0;
  v23 = 0;
  v21 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v21, *(const void **)(v8 + 16), *(_QWORD *)(v8 + 24), (uint64_t)(*(_QWORD *)(v8 + 24) - *(_QWORD *)(v8 + 16)) >> 2);
  v24 = *(_DWORD *)(v8 + 40);
  v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 64) + 8 * (int)*a4) + 48);
  v15[0] = *(_QWORD *)v9;
  v15[1] = *(_QWORD *)(v9 + 8);
  v17 = 0;
  v18 = 0;
  v16 = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v16, *(const void **)(v9 + 16), *(_QWORD *)(v9 + 24), (uint64_t)(*(_QWORD *)(v9 + 24) - *(_QWORD *)(v9 + 16)) >> 2);
  v19 = *(_DWORD *)(v9 + 40);
  kaldi::quasar::ErrorRegion::AddHypoArc((uint64_t)a1, (uint64_t)v20, (uint64_t)v15);
  *a4 = v24;
  (*(void (**)(uint64_t *__return_ptr, _QWORD *))(*a2 + 32))(&v12, a2);
  v27 = *((float *)&v12 + 1);
  v28 = v12;
  v26 = 2139095040;
  v25 = INFINITY;
  v10.n128_u32[0] = v12;
  v11 = *(float *)&v12 != INFINITY || (v10.n128_f32[0] = v27, v27 != v25) || v14 != __p;
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v11)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, _QWORD, __n128))(*a2 + 32))(&v12, a2, *a4, v10);
    *(float *)(a1[29] - 4) = *(float *)&v12 + *(float *)(a1[29] - 4);
    if (__p)
    {
      v14 = __p;
      operator delete(__p);
    }
  }
  std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::resize(a1 + 2, (a1[11] - a1[10]) >> 2);
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  if (v21)
  {
    v22 = v21;
    operator delete(v21);
  }
}

void sub_1ADCF0D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

char *kaldi::quasar::ErrorRegion::AddAcousticOnlyDecoding(uint64_t a1, uint64_t a2, uint64_t a3)
{
  float *v3;
  unint64_t v4;
  uint64_t v5;
  float v6;
  float v7;
  char *result;

  v3 = *(float **)a3;
  v4 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if ((v4 >> 2))
  {
    v5 = (v4 >> 2);
    v6 = 0.0;
    do
    {
      v7 = *v3++;
      v6 = v6 + v7;
      --v5;
    }
    while (v5);
  }
  else
  {
    v6 = 0.0;
  }
  *(float *)(a1 + 296) = v6;
  result = (char *)(a1 + 304);
  if (result != (char *)a2)
    return std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(result, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  return result;
}

float kaldi::quasar::ErrorRegion::Overlap(kaldi::quasar::ErrorRegion *this)
{
  float result;
  float v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;

  result = 0.0;
  if (*((_QWORD *)this + 7) != *((_QWORD *)this + 8) && *((_QWORD *)this + 10) != *((_QWORD *)this + 11))
  {
    v2 = (float)*((int *)this + 10);
    v3 = (float)*((int *)this + 12);
    v4 = (float)*((int *)this + 11);
    v5 = (float)*((int *)this + 13);
    if (v4 >= v2)
      v6 = (float)*((int *)this + 10);
    else
      v6 = (float)*((int *)this + 11);
    if (v3 >= v5)
      v7 = (float)*((int *)this + 12);
    else
      v7 = (float)*((int *)this + 13);
    if (v2 < v4)
      v2 = (float)*((int *)this + 11);
    if (v5 >= v3)
      v8 = (float)*((int *)this + 12);
    else
      v8 = (float)*((int *)this + 13);
    return (float)(v8 - v2) / (float)(v7 - v6);
  }
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HaveSameWordSequence(kaldi::quasar::ErrorRegion *this)
{
  const void *v2;
  char *v3;
  size_t v4;
  const void *v5;

  v3 = (char *)this + 56;
  v2 = (const void *)*((_QWORD *)this + 7);
  v4 = *((_QWORD *)v3 + 1) - (_QWORD)v2;
  v5 = (const void *)*((_QWORD *)this + 10);
  return v4 == *((_QWORD *)this + 11) - (_QWORD)v5 && memcmp(v2, v5, v4) == 0;
}

float kaldi::quasar::ErrorRegion::GetScoreSum(uint64_t a1, signed int a2, int a3, _QWORD *a4)
{
  float result;
  float *v5;
  float v6;

  result = 0.0;
  if (a2 < a3)
  {
    v5 = (float *)(*a4 + 4 * a2);
    do
    {
      v6 = *v5++;
      result = result + v6;
      ++a2;
    }
    while (a2 < a3);
  }
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HasErrors(kaldi::quasar::ErrorRegion *this)
{
  _BOOL8 v1;
  _QWORD v3[2];
  int v4;

  v3[0] = &off_1E5D32A08;
  v3[1] = 0x3F80000000000000;
  v4 = 0;
  v1 = !kaldi::quasar::ErrorRegion::HasAttribute(this, (kaldi::quasar::AbstractAttribute *)v3);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v3);
  return v1;
}

void sub_1ADCF0EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

BOOL kaldi::quasar::ErrorRegion::HasAttribute(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t **v7;
  _BOOL8 result;
  kaldi::quasar::AbstractAttribute *v9;

  if (*((_QWORD *)this + 11) == *((_QWORD *)this + 10))
    return 0;
  v4 = 0;
  v5 = 0;
  do
  {
    v6 = (_QWORD *)(*((_QWORD *)this + 2) + v4);
    v9 = a2;
    v7 = std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::find<kaldi::quasar::AbstractAttribute *>(v6, &v9);
    result = v7 != 0;
    if (v7)
      break;
    ++v5;
    v4 += 40;
  }
  while (v5 < (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2);
  return result;
}

BOOL kaldi::quasar::ErrorRegion::HasWordConfusion(kaldi::quasar::ErrorRegion *this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD v5[34];

  if ((a2 & 0x80000000) != 0
    || a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"Requested word position is out of bounds ", 41);
    std::ostream::operator<<();
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v5);
  }
  v2 = (_QWORD *)(*((_QWORD *)this + 2) + 40 * a2 + 16);
  do
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    v3 = (_QWORD *)v2[2];
    if ((*(unsigned int (**)(_QWORD *))(*v3 + 40))(v3) == 7)
      v3 = (_QWORD *)v3[2];
  }
  while ((*(unsigned int (**)(_QWORD *))(*v3 + 40))(v3) != 6);
  return v2 != 0;
}

uint64_t **kaldi::quasar::ErrorRegion::AddAttribute(uint64_t **this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t **v3;
  unint64_t v4;

  if (this[3] != this[2])
  {
    v3 = this;
    v4 = 0;
    do
      this = kaldi::quasar::ErrorRegion::AddAttribute((kaldi::quasar::ErrorRegion *)v3, a2, v4++);
    while (0xCCCCCCCCCCCCCCCDLL * (v3[3] - v3[2]) > v4);
  }
  return this;
}

uint64_t **kaldi::quasar::ErrorRegion::AddAttribute(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AbstractAttribute *a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t **result;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[34];

  if ((a3 & 0x80000000) != 0
    || (v4 = *((_QWORD *)this + 2), 0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)this + 3) - v4) >> 3) <= a3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Supplied word position index ", 29);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", is out of bounds in ErrorRegion, should be in range [0,", 57);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v11);
  }
  v11[0] = a2;
  result = std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((_QWORD *)(v4 + 40 * a3), v11);
  if (!result)
  {
    v8 = *((_QWORD *)this + 2) + 40 * a3;
    v11[0] = (*(uint64_t (**)(kaldi::quasar::AbstractAttribute *))(*(_QWORD *)a2 + 32))(a2);
    return (uint64_t **)std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v8, v11, v11);
  }
  return result;
}

uint64_t kaldi::quasar::ErrorRegion::RemoveAttribute(uint64_t this, kaldi::quasar::AbstractAttribute *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  kaldi::quasar::AbstractAttribute *v8;

  v2 = *(_QWORD *)(this + 16);
  if (*(_QWORD *)(this + 24) != v2)
  {
    v4 = this;
    v5 = 0;
    v6 = 0;
    do
    {
      v8 = a2;
      this = (uint64_t)std::__hash_table<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,std::__unordered_map_hasher<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,true>,std::__unordered_map_equal<kaldi::quasar::AbstractAttribute *,std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>,kaldi::quasar::AttributeEquality,kaldi::quasar::AttributeHash,true>,std::allocator<std::__hash_value_type<kaldi::quasar::AbstractAttribute *,std::vector<std::pair<int,int>>>>>::find<kaldi::quasar::AbstractAttribute *>((_QWORD *)(v2 + v5), &v8);
      if (this)
      {
        v7 = *(_QWORD *)(this + 16);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::erase((_QWORD *)(*(_QWORD *)(v4 + 16) + v5), (uint64_t *)this);
        this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
        if ((this & 1) == 0)
          this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
      }
      ++v6;
      v2 = *(_QWORD *)(v4 + 16);
      v5 += 40;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(v4 + 24) - v2) >> 3) > v6);
  }
  return this;
}

BOOL kaldi::quasar::ErrorRegion::IsHomophoneRegion(kaldi::quasar::ErrorRegion *this, const kaldi::TransitionModel *a2)
{
  int *v4;
  int *v5;
  _BOOL8 v6;
  int *v8;
  int *v9;
  int *v10;
  int *v11;

  kaldi::quasar::ErrorRegion::GetSequence(a2, (uint64_t *)this + 31, 2, 0, &v10);
  kaldi::quasar::ErrorRegion::GetSequence(a2, (uint64_t *)this + 34, 2, 0, &v8);
  v4 = v10;
  v5 = v8;
  if ((char *)v11 - (char *)v10 != (char *)v9 - (char *)v8)
  {
    v6 = 0;
    if (!v8)
      goto LABEL_6;
    goto LABEL_5;
  }
  v6 = memcmp(v10, v8, (char *)v11 - (char *)v10) == 0;
  if (v5)
  {
LABEL_5:
    v9 = v5;
    operator delete(v5);
    v4 = v10;
  }
LABEL_6:
  if (v4)
  {
    v11 = v4;
    operator delete(v4);
  }
  return v6;
}

void sub_1ADCF132C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::GetSequence(kaldi::TransitionModel *this@<X2>, uint64_t *a2@<X1>, int a3@<W3>, int a4@<W4>, int **a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  int *v19;
  int *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  int *v27;
  int v28;
  unint64_t v30;
  _QWORD v31[35];

  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v7 = *a2;
  v6 = a2[1];
  if (v6 != *a2)
  {
    v11 = 0;
    v12 = a5 + 2;
    do
    {
      v13 = (uint64_t *)(v7 + 24 * v11);
      v14 = *v13;
      if (v13[1] != *v13)
      {
        v30 = v11;
        v15 = 0;
        do
        {
          v16 = *(_DWORD *)(v14 + 4 * v15);
          v17 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v16);
          if (a3)
          {
            if (a3 == 1)
            {
              v18 = kaldi::TransitionModel::TransitionStateToForwardPdf(this, v17);
            }
            else
            {
              if (a3 != 2)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v31);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Algorithmic error, do not know what to do with level ", 53);
                std::ostream::operator<<();
                kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v31);
              }
              v18 = kaldi::TransitionModel::TransitionStateToPhone(this, v17);
            }
            v16 = v18;
          }
          v19 = a5[1];
          if (!a4 || *a5 == v19 || *(v19 - 1) != v16)
          {
            if ((unint64_t)v19 >= *v12)
            {
              v21 = *a5;
              v22 = v19 - *a5;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v24 = *v12 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a5 + 2), v25);
                v21 = *a5;
                v19 = a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = (int *)&v26[4 * v22];
              *v27 = v16;
              v20 = v27 + 1;
              while (v19 != v21)
              {
                v28 = *--v19;
                *--v27 = v28;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = (int *)&v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *v19 = v16;
              v20 = v19 + 1;
            }
            a5[1] = v20;
          }
          ++v15;
          v14 = *v13;
        }
        while (v15 < (v13[1] - *v13) >> 2);
        v11 = v30;
        v7 = *a2;
        v6 = a2[1];
      }
      ++v11;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) > v11);
  }
}

void sub_1ADCF156C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::ComputePhoneAlignment(uint64_t a1, int a2, _QWORD *a3, int a4, int a5, void **a6, uint64_t a7)
{
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unint64_t v19;
  int v20;
  int v21;
  int v22;
  unint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t *v44;
  char *v45;
  char *v46;
  char *v47;
  unint64_t v48;
  unint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _DWORD *v54;
  unint64_t v55;
  unint64_t i;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  int v63;
  int v64;
  unint64_t v65;
  _DWORD *v66;
  _DWORD *v67;
  _DWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  int v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t *v85;
  char *v86;
  char *v87;
  unint64_t v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  _DWORD *v92;
  _DWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t *v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  unint64_t *v111;
  char *v112;
  char *v113;
  unint64_t v114;
  _DWORD *v115;
  unint64_t j;
  uint64_t v117;
  int v118;
  int v119;
  unint64_t v120;
  _DWORD *v121;
  _DWORD *v122;
  _DWORD *v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  unint64_t v127;
  char *v128;
  char *v129;
  int v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  char *v139;
  unint64_t *v140;
  char *v141;
  char *v142;
  unint64_t v143;
  uint64_t v146;
  uint64_t v147;

  v12 = *(_DWORD **)a1;
  v11 = *(_DWORD **)(a1 + 8);
  if (v11 == *(_DWORD **)a1)
  {
    LODWORD(v13) = 0;
  }
  else
  {
    v13 = 0;
    v14 = ((uint64_t)v11 - *(_QWORD *)a1) >> 2;
    if (v14 <= 1)
      v14 = 1;
    while (v12[v13] == *v12)
    {
      if (v14 == ++v13)
      {
        LODWORD(v13) = v14;
        break;
      }
    }
  }
  v15 = a3[1];
  v16 = v15 - *a3;
  if (v15 != *a3)
  {
    v17 = 0;
    v18 = v13 - 1;
    v19 = v16 >> 2;
    if (v19 <= 1)
      v19 = 1;
    while (*(_DWORD *)(*a3 + 4 * v17) == *(_DWORD *)*a3)
    {
      if (v19 == ++v17)
      {
        LODWORD(v17) = v19;
        break;
      }
    }
    if (v11 != v12)
    {
      v20 = v18 + a2;
      if (v18 + a2 >= 0)
      {
        v21 = v17 - 1;
        v22 = v17 - 1 + a4;
        if ((v22 & 0x80000000) == 0)
        {
          v23 = *(_QWORD *)(a7 + 16);
          v147 = a7 + 16;
          v24 = *(_DWORD **)(a7 + 8);
          if ((unint64_t)v24 >= v23)
          {
            v26 = *(_DWORD **)a7;
            v27 = ((uint64_t)v24 - *(_QWORD *)a7) >> 2;
            v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62)
LABEL_194:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v29 = v23 - (_QWORD)v26;
            if (v29 >> 1 > v28)
              v28 = v29 >> 1;
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
              v30 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v30 = v28;
            if (v30)
            {
              v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v30);
              v26 = *(_DWORD **)a7;
              v24 = *(_DWORD **)(a7 + 8);
            }
            else
            {
              v31 = 0;
            }
            v32 = &v31[4 * v27];
            v33 = &v31[4 * v30];
            *(_DWORD *)v32 = v22;
            v25 = v32 + 4;
            while (v24 != v26)
            {
              v34 = *--v24;
              *((_DWORD *)v32 - 1) = v34;
              v32 -= 4;
            }
            *(_QWORD *)a7 = v32;
            *(_QWORD *)(a7 + 8) = v25;
            *(_QWORD *)(a7 + 16) = v33;
            if (v26)
              operator delete(v26);
          }
          else
          {
            *v24 = v22;
            v25 = v24 + 1;
          }
          *(_QWORD *)(a7 + 8) = v25;
          v35 = *(unsigned int *)(*(_QWORD *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
          v36 = (unint64_t)a6[2];
          v146 = (uint64_t)(a6 + 2);
          v37 = (unint64_t *)a6[1];
          if ((unint64_t)v37 >= v36)
          {
            v39 = ((char *)v37 - (_BYTE *)*a6) >> 3;
            if ((unint64_t)(v39 + 1) >> 61)
LABEL_193:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v40 = v36 - (_QWORD)*a6;
            v41 = v40 >> 2;
            if (v40 >> 2 <= (unint64_t)(v39 + 1))
              v41 = v39 + 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
              v42 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v42 = v41;
            if (v42)
              v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v42);
            else
              v43 = 0;
            v44 = (unint64_t *)&v43[8 * v39];
            v45 = &v43[8 * v42];
            *v44 = v35;
            v38 = v44 + 1;
            v47 = (char *)*a6;
            v46 = (char *)a6[1];
            if (v46 != *a6)
            {
              do
              {
                v48 = *((_QWORD *)v46 - 1);
                v46 -= 8;
                *--v44 = v48;
              }
              while (v46 != v47);
              v46 = (char *)*a6;
            }
            *a6 = v44;
            a6[1] = v38;
            a6[2] = v45;
            if (v46)
              operator delete(v46);
          }
          else
          {
            *v37 = v35;
            v38 = v37 + 1;
          }
          v49 = v18;
          a6[1] = v38;
          v50 = *(_DWORD **)a1;
          v51 = *(_QWORD *)(a1 + 8);
          v52 = (v51 - *(_QWORD *)a1) >> 2;
          v53 = v52 - 1;
          if (v52 - 1 > v18)
          {
            v54 = (_DWORD *)*a3;
            v55 = (uint64_t)(a3[1] - *a3) >> 2;
            for (i = v55 - 1; ; i = v55 - 1)
            {
              if (i <= v21)
              {
                v49 = v18;
                v52 = (v51 - (uint64_t)v50) >> 2;
                v53 = v52 - 1;
                goto LABEL_114;
              }
              v57 = v20 - v22;
              if (v20 - v22 < 0)
                v57 = v22 - v20;
              if (v57 <= a5)
                break;
              if (v20 >= v22)
              {
                v62 = v21 + 1;
                if (v55 > v62)
                {
                  v64 = v54[v62];
                  while (v54[v62] == v64)
                  {
                    if (v55 == ++v62)
                    {
                      LODWORD(v62) = v55;
                      break;
                    }
                  }
                }
LABEL_78:
                v21 = v62 - 1;
                v22 = v62 - 1 + a4;
                goto LABEL_79;
              }
              v58 = v18 + 1;
              if (v52 > v58)
              {
                v59 = v50[v58];
                while (v50[v58] == v59)
                {
                  if (v52 == ++v58)
                  {
                    LODWORD(v58) = v52;
                    break;
                  }
                }
              }
              v18 = v58 - 1;
              v20 = v58 - 1 + a2;
LABEL_79:
              v66 = *(_DWORD **)(a7 + 8);
              v65 = *(_QWORD *)(a7 + 16);
              if ((unint64_t)v66 >= v65)
              {
                v68 = *(_DWORD **)a7;
                v69 = ((uint64_t)v66 - *(_QWORD *)a7) >> 2;
                v70 = v69 + 1;
                if ((unint64_t)(v69 + 1) >> 62)
                  goto LABEL_194;
                v71 = v65 - (_QWORD)v68;
                if (v71 >> 1 > v70)
                  v70 = v71 >> 1;
                if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL)
                  v72 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v72 = v70;
                if (v72)
                {
                  v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v72);
                  v68 = *(_DWORD **)a7;
                  v66 = *(_DWORD **)(a7 + 8);
                }
                else
                {
                  v73 = 0;
                }
                v74 = &v73[4 * v69];
                *(_DWORD *)v74 = v22;
                v67 = v74 + 4;
                while (v66 != v68)
                {
                  v75 = *--v66;
                  *((_DWORD *)v74 - 1) = v75;
                  v74 -= 4;
                }
                *(_QWORD *)a7 = v74;
                *(_QWORD *)(a7 + 8) = v67;
                *(_QWORD *)(a7 + 16) = &v73[4 * v72];
                if (v68)
                  operator delete(v68);
              }
              else
              {
                *v66 = v22;
                v67 = v66 + 1;
              }
              *(_QWORD *)(a7 + 8) = v67;
              v76 = *(unsigned int *)(*(_QWORD *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
              v78 = (unint64_t *)a6[1];
              v77 = (unint64_t)a6[2];
              if ((unint64_t)v78 >= v77)
              {
                v80 = ((char *)v78 - (_BYTE *)*a6) >> 3;
                if ((unint64_t)(v80 + 1) >> 61)
                  goto LABEL_193;
                v81 = v77 - (_QWORD)*a6;
                v82 = v81 >> 2;
                if (v81 >> 2 <= (unint64_t)(v80 + 1))
                  v82 = v80 + 1;
                if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF8)
                  v83 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v83 = v82;
                if (v83)
                  v84 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v83);
                else
                  v84 = 0;
                v85 = (unint64_t *)&v84[8 * v80];
                *v85 = v76;
                v79 = v85 + 1;
                v87 = (char *)*a6;
                v86 = (char *)a6[1];
                if (v86 != *a6)
                {
                  do
                  {
                    v88 = *((_QWORD *)v86 - 1);
                    v86 -= 8;
                    *--v85 = v88;
                  }
                  while (v86 != v87);
                  v86 = (char *)*a6;
                }
                *a6 = v85;
                a6[1] = v79;
                a6[2] = &v84[8 * v83];
                if (v86)
                  operator delete(v86);
              }
              else
              {
                *v78 = v76;
                v79 = v78 + 1;
              }
              v49 = v18;
              a6[1] = v79;
              v50 = *(_DWORD **)a1;
              v51 = *(_QWORD *)(a1 + 8);
              v52 = (v51 - *(_QWORD *)a1) >> 2;
              v53 = v52 - 1;
              if (v52 - 1 <= v18)
                goto LABEL_114;
              v54 = (_DWORD *)*a3;
              v55 = (uint64_t)(a3[1] - *a3) >> 2;
            }
            v60 = v18 + 1;
            if (v52 > v60)
            {
              v61 = v50[v60];
              while (v50[v60] == v61)
              {
                if (v52 == ++v60)
                {
                  LODWORD(v60) = v52;
                  break;
                }
              }
            }
            v62 = v21 + 1;
            if (v55 > v62)
            {
              v63 = v54[v62];
              while (v54[v62] == v63)
              {
                if (v55 == ++v62)
                {
                  LODWORD(v62) = v55;
                  break;
                }
              }
            }
            v18 = v60 - 1;
            v20 = v60 - 1 + a2;
            goto LABEL_78;
          }
LABEL_114:
          if (v53 > v49)
          {
            do
            {
              LODWORD(v89) = v18 + 1;
              if (v52 > (int)v89)
              {
                v89 = (int)v89;
                v90 = v50[(int)v89];
                while (v50[v89] == v90)
                {
                  if (v52 == ++v89)
                  {
                    LODWORD(v89) = v52;
                    break;
                  }
                }
              }
              v92 = *(_DWORD **)(a7 + 8);
              v91 = *(_QWORD *)(a7 + 16);
              if ((unint64_t)v92 >= v91)
              {
                v94 = *(_DWORD **)a7;
                v95 = ((uint64_t)v92 - *(_QWORD *)a7) >> 2;
                v96 = v95 + 1;
                if ((unint64_t)(v95 + 1) >> 62)
                  goto LABEL_194;
                v97 = v91 - (_QWORD)v94;
                if (v97 >> 1 > v96)
                  v96 = v97 >> 1;
                if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
                  v98 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v98 = v96;
                if (v98)
                {
                  v99 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v98);
                  v94 = *(_DWORD **)a7;
                  v92 = *(_DWORD **)(a7 + 8);
                }
                else
                {
                  v99 = 0;
                }
                v100 = &v99[4 * v95];
                *(_DWORD *)v100 = v22;
                v93 = v100 + 4;
                while (v92 != v94)
                {
                  v101 = *--v92;
                  *((_DWORD *)v100 - 1) = v101;
                  v100 -= 4;
                }
                *(_QWORD *)a7 = v100;
                *(_QWORD *)(a7 + 8) = v93;
                *(_QWORD *)(a7 + 16) = &v99[4 * v98];
                if (v94)
                  operator delete(v94);
              }
              else
              {
                *v92 = v22;
                v93 = v92 + 1;
              }
              v18 = v89 - 1;
              *(_QWORD *)(a7 + 8) = v93;
              v102 = *(unsigned int *)(*(_QWORD *)a1 + 4 * v18) | ((unint64_t)*(unsigned int *)(a3[1] - 4) << 32);
              v104 = (unint64_t *)a6[1];
              v103 = (unint64_t)a6[2];
              if ((unint64_t)v104 >= v103)
              {
                v106 = ((char *)v104 - (_BYTE *)*a6) >> 3;
                if ((unint64_t)(v106 + 1) >> 61)
                  goto LABEL_193;
                v107 = v103 - (_QWORD)*a6;
                v108 = v107 >> 2;
                if (v107 >> 2 <= (unint64_t)(v106 + 1))
                  v108 = v106 + 1;
                if ((unint64_t)v107 >= 0x7FFFFFFFFFFFFFF8)
                  v109 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v109 = v108;
                if (v109)
                  v110 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v109);
                else
                  v110 = 0;
                v111 = (unint64_t *)&v110[8 * v106];
                *v111 = v102;
                v105 = v111 + 1;
                v113 = (char *)*a6;
                v112 = (char *)a6[1];
                if (v112 != *a6)
                {
                  do
                  {
                    v114 = *((_QWORD *)v112 - 1);
                    v112 -= 8;
                    *--v111 = v114;
                  }
                  while (v112 != v113);
                  v112 = (char *)*a6;
                }
                *a6 = v111;
                a6[1] = v105;
                a6[2] = &v110[8 * v109];
                if (v112)
                  operator delete(v112);
              }
              else
              {
                *v104 = v102;
                v105 = v104 + 1;
              }
              a6[1] = v105;
              v50 = *(_DWORD **)a1;
              v52 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
            }
            while (v52 - 1 > v18);
          }
          v115 = (_DWORD *)*a3;
          for (j = (uint64_t)(a3[1] - *a3) >> 2; j - 1 > v21; j = (uint64_t)(a3[1] - *a3) >> 2)
          {
            LODWORD(v117) = v21 + 1;
            if (j > v21 + 1)
            {
              v117 = (int)v117;
              v118 = v115[(int)v117];
              while (v115[v117] == v118)
              {
                if (j == ++v117)
                {
                  LODWORD(v117) = j;
                  break;
                }
              }
            }
            v21 = v117 - 1;
            v119 = v117 - 1 + a4;
            v121 = *(_DWORD **)(a7 + 8);
            v120 = *(_QWORD *)(a7 + 16);
            if ((unint64_t)v121 >= v120)
            {
              v123 = *(_DWORD **)a7;
              v124 = ((uint64_t)v121 - *(_QWORD *)a7) >> 2;
              v125 = v124 + 1;
              if ((unint64_t)(v124 + 1) >> 62)
                goto LABEL_194;
              v126 = v120 - (_QWORD)v123;
              if (v126 >> 1 > v125)
                v125 = v126 >> 1;
              if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFFCLL)
                v127 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v127 = v125;
              if (v127)
              {
                v128 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v147, v127);
                v123 = *(_DWORD **)a7;
                v121 = *(_DWORD **)(a7 + 8);
              }
              else
              {
                v128 = 0;
              }
              v129 = &v128[4 * v124];
              *(_DWORD *)v129 = v119;
              v122 = v129 + 4;
              while (v121 != v123)
              {
                v130 = *--v121;
                *((_DWORD *)v129 - 1) = v130;
                v129 -= 4;
              }
              *(_QWORD *)a7 = v129;
              *(_QWORD *)(a7 + 8) = v122;
              *(_QWORD *)(a7 + 16) = &v128[4 * v127];
              if (v123)
                operator delete(v123);
            }
            else
            {
              *v121 = v119;
              v122 = v121 + 1;
            }
            *(_QWORD *)(a7 + 8) = v122;
            v131 = *(unsigned int *)(*(_QWORD *)(a1 + 8) - 4) | ((unint64_t)*(unsigned int *)(*a3 + 4 * v21) << 32);
            v133 = (unint64_t *)a6[1];
            v132 = (unint64_t)a6[2];
            if ((unint64_t)v133 >= v132)
            {
              v135 = ((char *)v133 - (_BYTE *)*a6) >> 3;
              if ((unint64_t)(v135 + 1) >> 61)
                goto LABEL_193;
              v136 = v132 - (_QWORD)*a6;
              v137 = v136 >> 2;
              if (v136 >> 2 <= (unint64_t)(v135 + 1))
                v137 = v135 + 1;
              if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFF8)
                v138 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v138 = v137;
              if (v138)
                v139 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v146, v138);
              else
                v139 = 0;
              v140 = (unint64_t *)&v139[8 * v135];
              *v140 = v131;
              v134 = v140 + 1;
              v142 = (char *)*a6;
              v141 = (char *)a6[1];
              if (v141 != *a6)
              {
                do
                {
                  v143 = *((_QWORD *)v141 - 1);
                  v141 -= 8;
                  *--v140 = v143;
                }
                while (v141 != v142);
                v141 = (char *)*a6;
              }
              *a6 = v140;
              a6[1] = v134;
              a6[2] = &v139[8 * v138];
              if (v141)
                operator delete(v141);
            }
            else
            {
              *v133 = v131;
              v134 = v133 + 1;
            }
            a6[1] = v134;
            v115 = (_DWORD *)*a3;
          }
        }
      }
    }
  }
}

void kaldi::quasar::ErrorRegion::ComputeWordAlignment(uint64_t a1, kaldi::TransitionModel *a2, uint64_t *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  char *v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  char *v35;
  _DWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  char *v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  int64_t v56;
  unint64_t v57;
  char *v58;
  char *v59;
  int v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  void *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  int64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  int v78;
  int v79;
  std::vector<int> v80;
  void *__src[2];
  void *v82[2];
  __int128 v83;
  std::vector<int> __p;
  std::vector<int> v85;

  v5 = *(_DWORD *)(a1 + 44);
  v78 = *(_DWORD *)(a1 + 40);
  memset(&v85, 0, sizeof(v85));
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)v82 = 0u;
  v83 = 0u;
  *(_OWORD *)__src = 0u;
  v7 = *(_QWORD *)(a1 + 80);
  v6 = *(_QWORD *)(a1 + 88);
  if (v6 == v7)
  {
    LODWORD(v9) = 0;
    v10 = 0;
    v7 = *(_QWORD *)(a1 + 88);
  }
  else
  {
    if (*(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 56))
    {
      v79 = v5;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      while (1)
      {
        if (v82[1] == (void *)v83)
        {
          kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(a1 + 272) + 24 * v11, a2, 2, 1, &v80.__begin_);
          if (__p.__begin_)
          {
            __p.__end_ = __p.__begin_;
            operator delete(__p.__begin_);
          }
          __p = v80;
LABEL_37:
          v34 = *(_QWORD *)(a1 + 80);
          v35 = (char *)v83;
          if ((unint64_t)v83 >= *((_QWORD *)&v83 + 1))
          {
            v37 = (char *)v82[1];
            v38 = (uint64_t)(v83 - (unint64_t)v82[1]) >> 2;
            v39 = v38 + 1;
            if ((unint64_t)(v38 + 1) >> 62)
LABEL_133:
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v40 = *((_QWORD *)&v83 + 1) - (unint64_t)v82[1];
            if ((uint64_t)(*((_QWORD *)&v83 + 1) - (unint64_t)v82[1]) >> 1 > v39)
              v39 = v40 >> 1;
            if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL)
              v41 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v41 = v39;
            if (v41)
            {
              v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83 + 8, v41);
              v37 = (char *)v82[1];
              v35 = (char *)v83;
            }
            else
            {
              v42 = 0;
            }
            v43 = &v42[4 * v38];
            *(_DWORD *)v43 = *(_DWORD *)(v34 + 4 * v11);
            v36 = v43 + 4;
            while (v35 != v37)
            {
              v44 = *((_DWORD *)v35 - 1);
              v35 -= 4;
              *((_DWORD *)v43 - 1) = v44;
              v43 -= 4;
            }
            v82[1] = v43;
            *(_QWORD *)&v83 = v36;
            *((_QWORD *)&v83 + 1) = &v42[4 * v41];
            if (v37)
              operator delete(v37);
          }
          else
          {
            *(_DWORD *)v83 = *(_DWORD *)(v34 + 4 * v11);
            v36 = v35 + 4;
          }
          *(_QWORD *)&v83 = v36;
          v79 += (*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24 * v11 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 272) + 24 * v11)) >> 2;
          v9 = (v9 + 1);
          goto LABEL_71;
        }
        if (__src[0] == __src[1])
          break;
        v12 = v9;
        v13 = a3;
        if (v79 - v78 >= 0)
          v14 = v79 - v78;
        else
          v14 = v78 - v79;
        v76 = v14;
        v15 = kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_);
        if (v79 >= v78)
        {
          v9 = v12;
          if (v79 > v78)
          {
            kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(a1 + 248) + 24 * v8, a2, 2, 1, &v80.__begin_);
            std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&v85, (uint64_t)v85.__end_, (char *)v80.__begin_, (char *)v80.__end_, v80.__end_ - v80.__begin_);
            v23 = (uint64_t *)(*(_QWORD *)(a1 + 248) + 24 * v8);
            v25 = *v23;
            v24 = v23[1];
            if (v15 <= (int)kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_))
            {
              v47 = v79 - v78 - ((unint64_t)(v24 - v25) >> 2);
              if (v47 < 0)
                v47 = ((unint64_t)(v24 - v25) >> 2) - (v79 - v78);
              v26 = v76 > v47;
            }
            else
            {
              v26 = 1;
            }
            if (v80.__begin_)
            {
              v80.__end_ = v80.__begin_;
              operator delete(v80.__begin_);
            }
            if (v26)
              goto LABEL_18;
          }
        }
        else
        {
          kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(a1 + 272) + 24 * v11, a2, 2, 1, &v80.__begin_);
          std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>(&__p, (uint64_t)__p.__end_, (char *)v80.__begin_, (char *)v80.__end_, v80.__end_ - v80.__begin_);
          v16 = (uint64_t *)(*(_QWORD *)(a1 + 272) + 24 * v11);
          v18 = *v16;
          v17 = v16[1];
          if (v15 <= (int)kaldi::LevenshteinEditDistance<int>((uint64_t *)&v85, &__p.__begin_))
          {
            v33 = v79 - v78 + ((unint64_t)(v17 - v18) >> 2);
            if (v33 < 0)
              v33 = -v33;
            v19 = v76 > v33;
          }
          else
          {
            v19 = 1;
          }
          a3 = v13;
          v9 = v12;
          if (v80.__begin_)
          {
            v80.__end_ = v80.__begin_;
            operator delete(v80.__begin_);
          }
          if (v19)
            goto LABEL_37;
        }
        v48 = a3[1];
        if (v48 >= a3[2])
        {
          v49 = std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(a3, (uint64_t)__src);
        }
        else
        {
          std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]((_QWORD *)a3[1], (uint64_t)__src);
          v49 = v48 + 48;
          a3[1] = v48 + 48;
        }
        a3[1] = v49;
        __src[1] = __src[0];
        *(void **)&v83 = v82[1];
        v85.__end_ = v85.__begin_;
        __p.__end_ = __p.__begin_;
LABEL_71:
        v11 = (int)v9;
        v7 = *(_QWORD *)(a1 + 80);
        v6 = *(_QWORD *)(a1 + 88);
        if ((int)v9 < (unint64_t)((v6 - v7) >> 2))
        {
          v8 = v10;
          if (v10 < (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2))
            continue;
        }
        goto LABEL_76;
      }
      kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(a1 + 248) + 24 * v8, a2, 2, 1, &v80.__begin_);
      if (v85.__begin_)
      {
        v85.__end_ = v85.__begin_;
        operator delete(v85.__begin_);
      }
      v85 = v80;
LABEL_18:
      v20 = *(_QWORD *)(a1 + 56);
      v21 = (char *)__src[1];
      if (__src[1] >= v82[0])
      {
        v27 = (char *)__src[0];
        v28 = ((char *)__src[1] - (char *)__src[0]) >> 2;
        v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62)
          goto LABEL_133;
        v30 = (char *)v82[0] - (char *)__src[0];
        if (((char *)v82[0] - (char *)__src[0]) >> 1 > v29)
          v29 = v30 >> 1;
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
          v31 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v31 = v29;
        if (v31)
        {
          v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v31);
          v27 = (char *)__src[0];
          v21 = (char *)__src[1];
        }
        else
        {
          v32 = 0;
        }
        v45 = &v32[4 * v28];
        *(_DWORD *)v45 = *(_DWORD *)(v20 + 4 * v8);
        v22 = v45 + 4;
        while (v21 != v27)
        {
          v46 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        __src[0] = v45;
        __src[1] = v22;
        v82[0] = &v32[4 * v31];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_DWORD *)__src[1] = *(_DWORD *)(v20 + 4 * v8);
        v22 = v21 + 4;
      }
      __src[1] = v22;
      v78 += (*(_QWORD *)(*(_QWORD *)(a1 + 248) + 24 * v8 + 8) - *(_QWORD *)(*(_QWORD *)(a1 + 248) + 24 * v8)) >> 2;
      ++v10;
      goto LABEL_71;
    }
    LODWORD(v9) = 0;
    v10 = 0;
  }
LABEL_76:
  v50 = (int)v9;
  if ((int)v9 < (unint64_t)((v6 - v7) >> 2))
  {
    v51 = (char *)v83;
    do
    {
      if ((unint64_t)v51 >= *((_QWORD *)&v83 + 1))
      {
        v53 = (char *)v82[1];
        v54 = (v51 - (char *)v82[1]) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
LABEL_132:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v56 = *((_QWORD *)&v83 + 1) - (unint64_t)v82[1];
        if ((uint64_t)(*((_QWORD *)&v83 + 1) - (unint64_t)v82[1]) >> 1 > v55)
          v55 = v56 >> 1;
        if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
          v57 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
        {
          v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v83 + 8, v57);
          v53 = (char *)v82[1];
          v51 = (char *)v83;
        }
        else
        {
          v58 = 0;
        }
        v59 = &v58[4 * v54];
        *(_DWORD *)v59 = *(_DWORD *)(v7 + 4 * v50);
        v52 = v59 + 4;
        while (v51 != v53)
        {
          v60 = *((_DWORD *)v51 - 1);
          v51 -= 4;
          *((_DWORD *)v59 - 1) = v60;
          v59 -= 4;
        }
        v82[1] = v59;
        *(_QWORD *)&v83 = v52;
        *((_QWORD *)&v83 + 1) = &v58[4 * v57];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_DWORD *)v51 = *(_DWORD *)(v7 + 4 * v50);
        v52 = v51 + 4;
      }
      *(_QWORD *)&v83 = v52;
      ++v50;
      v7 = *(_QWORD *)(a1 + 80);
      v51 = v52;
    }
    while (v50 < (*(_QWORD *)(a1 + 88) - v7) >> 2);
  }
  v61 = v10;
  v62 = *(_QWORD *)(a1 + 56);
  if (v10 >= (unint64_t)((*(_QWORD *)(a1 + 64) - v62) >> 2))
  {
    v64 = __src[1];
  }
  else
  {
    v63 = (char *)__src[1];
    do
    {
      if (v63 >= v82[0])
      {
        v65 = (char *)__src[0];
        v66 = (v63 - (char *)__src[0]) >> 2;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          goto LABEL_132;
        v68 = (char *)v82[0] - (char *)__src[0];
        if (((char *)v82[0] - (char *)__src[0]) >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v82, v69);
          v65 = (char *)__src[0];
          v63 = (char *)__src[1];
        }
        else
        {
          v70 = 0;
        }
        v71 = &v70[4 * v66];
        *(_DWORD *)v71 = *(_DWORD *)(v62 + 4 * v61);
        v64 = v71 + 4;
        while (v63 != v65)
        {
          v72 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        __src[0] = v71;
        __src[1] = v64;
        v82[0] = &v70[4 * v69];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *(_DWORD *)v63 = *(_DWORD *)(v62 + 4 * v61);
        v64 = v63 + 4;
      }
      __src[1] = v64;
      ++v61;
      v62 = *(_QWORD *)(a1 + 56);
      v63 = (char *)v64;
    }
    while (v61 < (*(_QWORD *)(a1 + 64) - v62) >> 2);
  }
  if (__src[0] == v64 || v82[1] == (void *)v83)
  {
    v75 = a3[1];
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(v75 - 48), *(_QWORD *)(v75 - 40), (char *)__src[0], (char *)v64, (int64_t)((uint64_t)v64 - (unint64_t)__src[0]) >> 2);
    std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)(v75 - 24), *(_QWORD *)(v75 - 16), (char *)v82[1], (char *)v83, (uint64_t)(v83 - (unint64_t)v82[1]) >> 2);
  }
  else
  {
    v73 = a3[1];
    if (v73 >= a3[2])
    {
      v74 = std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(a3, (uint64_t)__src);
    }
    else
    {
      std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100]((_QWORD *)a3[1], (uint64_t)__src);
      v74 = v73 + 48;
      a3[1] = v73 + 48;
    }
    a3[1] = v74;
  }
  if (v82[1])
  {
    *(void **)&v83 = v82[1];
    operator delete(v82[1]);
  }
  if (__src[0])
  {
    __src[1] = __src[0];
    operator delete(__src[0]);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v85.__begin_)
  {
    v85.__end_ = v85.__begin_;
    operator delete(v85.__begin_);
  }
}

void sub_1ADCF2654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v30;

  *(_QWORD *)(v27 + 8) = v26;
  kaldi::LatticeWordAligner::ComputationState::~ComputationState((kaldi::LatticeWordAligner::ComputationState *)&a19);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  v30 = *(void **)(v28 - 112);
  if (v30)
  {
    *(_QWORD *)(v28 - 104) = v30;
    operator delete(v30);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::GetSequence(uint64_t a1@<X1>, kaldi::TransitionModel *a2@<X2>, int a3@<W3>, int a4@<W4>, int **a5@<X8>)
{
  uint64_t v9[3];
  void **v10;

  std::vector<std::vector<int>>::vector(v9, 1uLL, a1);
  kaldi::quasar::ErrorRegion::GetSequence(a2, v9, a3, a4, a5);
  v10 = (void **)v9;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v10);
}

void sub_1ADCF2768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::LevenshteinEditDistance<int>(uint64_t *a1, int **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::vector<int>::pointer end;
  std::vector<int>::pointer begin;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::vector<int>::pointer v17;
  int v18;
  char *v19;
  uint64_t v20;
  int *v21;
  int *v22;
  int *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  std::vector<int> __p;
  std::vector<int> v32;

  v5 = *a1;
  v4 = a1[1];
  v6 = (char *)a2[1] - (char *)*a2;
  std::vector<int>::vector(&v32, (uint64_t)((v6 << 30) + 0x100000000) >> 32);
  std::vector<int>::vector(&__p, (uint64_t)((v6 << 30) + 0x100000000) >> 32);
  v7 = (unint64_t)(v4 - v5) >> 2;
  begin = v32.__begin_;
  end = v32.__end_;
  if (v32.__end_ != v32.__begin_)
  {
    v10 = 0;
    v11 = v32.__end_ - v32.__begin_;
    if (v11 <= 1)
      v11 = 1;
    do
    {
      begin[v10] = v10;
      ++v10;
    }
    while (v11 != v10);
  }
  if ((int)v7 >= 1)
  {
    v12 = v6 >> 2;
    v13 = (v6 >> 2) + 1;
    v14 = (v7 + 1);
    v15 = v13 - 1;
    v16 = 1;
    do
    {
      v17 = v32.__begin_;
      v18 = *v32.__begin_ + 1;
      v19 = (char *)__p.__begin_;
      *__p.__begin_ = v18;
      if ((int)v12 >= 1)
      {
        v20 = *a1;
        v21 = *a2;
        v22 = v17 + 1;
        v23 = (int *)(v19 + 4);
        v24 = v15;
        do
        {
          v25 = *(v22 - 1);
          v26 = *v21++;
          if (*(_DWORD *)(v20 + 4 * (v16 - 1)) != v26)
            ++v25;
          v28 = *v22++;
          v27 = v28;
          if (v18 >= v28)
            v18 = v27;
          if (v18 + 1 < v25)
            ++v18;
          else
            v18 = v25;
          *v23++ = v18;
          --v24;
        }
        while (v24);
      }
      std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v32, v19, (uint64_t)__p.__end_, ((char *)__p.__end_ - v19) >> 2);
      ++v16;
    }
    while (v16 != v14);
    end = v32.__end_;
  }
  v29 = *(end - 1);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v32.__begin_)
  {
    v32.__end_ = v32.__begin_;
    operator delete(v32.__begin_);
  }
  return v29;
}

void sub_1ADCF28F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *kaldi::quasar::ErrorRegion::GetWordConfusionFromErrorRegion(kaldi::quasar::ErrorRegion *this, unsigned int a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD v10[34];

  if ((a2 & 0x80000000) != 0
    || a2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Supplied region_id is out of bound, have only ", 46);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" regions, asked for ", 20);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, ".");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  if (!kaldi::quasar::ErrorRegion::HasWordConfusion(this, a2))
    return 0;
  v4 = *(_QWORD **)(*((_QWORD *)this + 2) + 40 * a2 + 16);
  if (!v4)
    return 0;
  v5 = 0;
  do
  {
    v6 = (_QWORD *)v4[2];
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 40))(v6) == 7)
      v6 = (_QWORD *)v6[2];
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 40))(v6) == 6)
      v5 = v6;
    v4 = (_QWORD *)*v4;
  }
  while (v4);
  return v5;
}

uint64_t kaldi::quasar::ErrorRegion::PrintDetailedErrorInformation(uint64_t result, _QWORD *a2, kaldi::TransitionModel *a3, kaldi::quasar::ErrorProfile *a4, kaldi::LatticeScoreCache *a5, kaldi::LatticeScoreCache *a6)
{
  uint64_t v8;
  BOOL v9;
  int v10;
  _QWORD *WordConfusionFromErrorRegion;
  _QWORD *v12;
  const std::locale::facet *v13;
  _QWORD *v14;
  const std::locale::facet *v15;
  const std::locale::facet *v16;
  _QWORD *v17;
  void *first;
  uint64_t end_high;
  _QWORD *v20;
  void *v21;
  uint64_t begin;
  _QWORD *v23;
  const std::locale::facet *v24;
  _QWORD *v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  const std::locale::facet *v28;
  _QWORD *v29;
  const std::locale::facet *v30;
  _BYTE *v31;
  _BYTE *v32;
  char *v33;
  int v34;
  int v35;
  unint64_t v36;
  const std::locale::facet *v37;
  _QWORD *v38;
  const std::locale::facet *v39;
  const std::locale::facet *v40;
  std::locale::__imp *locale;
  unint64_t v42;
  float Score;
  float v44;
  float *v45;
  float *v46;
  float *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  float *v53;
  int v54;
  float v55;
  float v56;
  float *v57;
  float *v58;
  float *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  float *v65;
  int v66;
  float *v67;
  float *v68;
  float v69;
  float v70;
  float *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  float *v77;
  int v78;
  float v79;
  float v80;
  std::vector<std::string>::pointer end;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  __int128 v86;
  unint64_t v87;
  std::wstring *v88;
  std::wstring *v89;
  __int128 v90;
  std::string *v91;
  _QWORD *v92;
  const std::locale::facet *v93;
  float *v94;
  uint64_t v95;
  float v96;
  float v97;
  _QWORD *v98;
  const std::locale::facet *v99;
  float *v100;
  uint64_t v101;
  float v102;
  float v103;
  _QWORD *v104;
  const std::locale::facet *v105;
  const std::locale::facet *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  const std::locale::facet *v112;
  uint64_t v113;
  const std::locale::facet *v114;
  uint64_t v115;
  _QWORD *v116;
  void *v117;
  uint64_t v118;
  const std::locale::facet *v119;
  uint64_t v120;
  _QWORD *v121;
  void *v122;
  uint64_t v123;
  const std::locale::facet *v124;
  uint64_t v125;
  const std::locale::facet *v126;
  uint64_t v127;
  const std::locale::facet *v128;
  uint64_t v129;
  _QWORD *v130;
  const std::locale::facet *v131;
  uint64_t v132;
  _QWORD *v133;
  int v134;
  char *v135;
  uint64_t v136;
  const std::locale::facet *v137;
  const std::locale::facet *v138;
  int v139;
  uint64_t *v141;
  uint64_t v142;
  int v145;
  uint64_t v146;
  void *v147[2];
  std::wstring::size_type v148;
  void *v149;
  float *v150;
  float *v151;
  std::vector<std::string> v152;
  void *v153;
  float *v154;
  float *v155;
  void *__p;
  float *v157;
  float *v158;
  void *v159[3];
  void *v160[3];
  int *v161[3];
  std::locale v162;
  std::locale::__imp *v163;
  char *v164;
  char *v165;
  std::__split_buffer<std::wstring> v166;

  if (*(_QWORD *)(result + 88) != *(_QWORD *)(result + 80))
  {
    v8 = 0;
    v145 = *(_DWORD *)(result + 44);
    if (a5)
      v9 = a6 == 0;
    else
      v9 = 1;
    v10 = !v9;
    v139 = v10;
    v141 = (uint64_t *)(result + 248);
    v146 = result;
    do
    {
      v142 = v8;
      WordConfusionFromErrorRegion = kaldi::quasar::ErrorRegion::GetWordConfusionFromErrorRegion((kaldi::quasar::ErrorRegion *)result, v8);
      if (WordConfusionFromErrorRegion)
      {
        v12 = WordConfusionFromErrorRegion;
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v13 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"--------------------------------------------", 44);
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
        v15 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v15->__vftable[2].~facet_0)(v15, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v14 + *(_QWORD *)(*v14 - 24)));
        v16 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\n", 1);
        kaldi::quasar::ErrorProfile::ToWordString(a4, *(_DWORD *)(*(_QWORD *)(v146 + 80) + 4 * v142), (std::string *)&v166);
        if (SHIBYTE(v166.__end_) >= 0)
          first = &v166;
        else
          first = v166.__first_;
        if (SHIBYTE(v166.__end_) >= 0)
          end_high = HIBYTE(v166.__end_);
        else
          end_high = (uint64_t)v166.__begin_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)first, end_high);
        if (SHIBYTE(v166.__end_) < 0)
          operator delete(v166.__first_);
        kaldi::quasar::ErrorRegion::GetTransitionIds(v146, v145, v145+ ((*(_QWORD *)(*(_QWORD *)(v146 + 272) + 24 * v142 + 8) - *(_QWORD *)(*(_QWORD *)(v146 + 272) + 24 * v142)) >> 2), *(_DWORD *)(v146 + 40), v141, &v164);
        v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
        (*(void (**)(std::__split_buffer<std::wstring> *__return_ptr, _QWORD *, kaldi::quasar::ErrorProfile *))(*v12 + 8))(&v166, v12, a4);
        if (SHIBYTE(v166.__end_) >= 0)
          v21 = &v166;
        else
          v21 = v166.__first_;
        if (SHIBYTE(v166.__end_) >= 0)
          begin = HIBYTE(v166.__end_);
        else
          begin = (uint64_t)v166.__begin_;
        v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, begin);
        std::ios_base::getloc((const std::ios_base *)((char *)v23 + *(_QWORD *)(*v23 - 24)));
        v24 = std::locale::use_facet(&v162, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v24->__vftable[2].~facet_0)(v24, 10);
        std::locale::~locale(&v162);
        std::ostream::put();
        std::ostream::flush();
        if (SHIBYTE(v166.__end_) < 0)
          operator delete(v166.__first_);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"From frame ", 11);
        v25 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)" to ", 4);
        v26 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
        v27 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
        v28 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v28->__vftable[2].~facet_0)(v28, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        v29 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"LM scores:", 10);
        std::ios_base::getloc((const std::ios_base *)((char *)v29 + *(_QWORD *)(*v29 - 24)));
        v30 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v30->__vftable[2].~facet_0)(v30, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref", 3);
        v31 = (_BYTE *)v12[2];
        v32 = (_BYTE *)v12[3];
        v33 = *(char **)(v146 + 56);
        v34 = -1;
        do
        {
          v35 = memcmp(v31, v33, v32 - v31);
          ++v34;
          v33 += 4;
        }
        while (v35);
        if (v32 != v31)
        {
          v36 = 0;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)" ", 1);
            std::ostream::operator<<();
            ++v36;
          }
          while (v36 < (uint64_t)(v12[3] - v12[2]) >> 2);
        }
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v37 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v37->__vftable[2].~facet_0)(v37, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp ", 4);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v38 + *(_QWORD *)(*v38 - 24)));
        v39 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v39->__vftable[2].~facet_0)(v39, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
        v40 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v40->__vftable[2].~facet_0)(v40, 10);
        std::locale::~locale((std::locale *)&v166);
        std::ostream::put();
        std::ostream::flush();
        kaldi::quasar::ErrorRegion::GetSequence((uint64_t)&v164, a3, 1, 0, (int **)&v162);
        kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(v146 + 272) + 24 * v142, a3, 1, 0, v161);
        kaldi::quasar::ErrorRegion::GetSequence((uint64_t)&v164, a3, 2, 0, (int **)v160);
        kaldi::quasar::ErrorRegion::GetSequence(*(_QWORD *)(v146 + 272) + 24 * v142, a3, 2, 0, (int **)v159);
        __p = 0;
        v157 = 0;
        v158 = 0;
        v153 = 0;
        v154 = 0;
        v155 = 0;
        memset(&v152, 0, sizeof(v152));
        v149 = 0;
        v150 = 0;
        v151 = 0;
        if (v139)
        {
          locale = v162.__locale_;
          if (v163 != v162.__locale_)
          {
            v42 = 0;
            while (1)
            {
              Score = kaldi::LatticeScoreCache::GetScore(a5, v145 + v42, *((_DWORD *)locale + v42));
              v44 = Score;
              v45 = v157;
              if (v157 >= v158)
              {
                v47 = (float *)__p;
                v48 = ((char *)v157 - (_BYTE *)__p) >> 2;
                v49 = v48 + 1;
                if ((unint64_t)(v48 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v50 = (char *)v158 - (_BYTE *)__p;
                if (((char *)v158 - (_BYTE *)__p) >> 1 > v49)
                  v49 = v50 >> 1;
                if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                  v51 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v51 = v49;
                if (v51)
                {
                  v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v158, v51);
                  v47 = (float *)__p;
                  v45 = v157;
                }
                else
                {
                  v52 = 0;
                }
                v53 = (float *)&v52[4 * v48];
                *v53 = v44;
                v46 = v53 + 1;
                while (v45 != v47)
                {
                  v54 = *((_DWORD *)v45-- - 1);
                  *((_DWORD *)v53-- - 1) = v54;
                }
                __p = v53;
                v157 = v46;
                v158 = (float *)&v52[4 * v51];
                if (v47)
                  operator delete(v47);
              }
              else
              {
                *v157 = Score;
                v46 = v45 + 1;
              }
              v157 = v46;
              v55 = kaldi::LatticeScoreCache::GetScore(a6, v145 + v42, v161[0][v42]);
              v56 = v55;
              v57 = v154;
              if (v154 >= v155)
              {
                v59 = (float *)v153;
                v60 = ((char *)v154 - (_BYTE *)v153) >> 2;
                v61 = v60 + 1;
                if ((unint64_t)(v60 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v62 = (char *)v155 - (_BYTE *)v153;
                if (((char *)v155 - (_BYTE *)v153) >> 1 > v61)
                  v61 = v62 >> 1;
                if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFFCLL)
                  v63 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v63 = v61;
                if (v63)
                {
                  v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v155, v63);
                  v59 = (float *)v153;
                  v57 = v154;
                }
                else
                {
                  v64 = 0;
                }
                v65 = (float *)&v64[4 * v60];
                *v65 = v56;
                v58 = v65 + 1;
                while (v57 != v59)
                {
                  v66 = *((_DWORD *)v57-- - 1);
                  *((_DWORD *)v65-- - 1) = v66;
                }
                v153 = v65;
                v154 = v58;
                v155 = (float *)&v64[4 * v63];
                if (v59)
                  operator delete(v59);
              }
              else
              {
                *v154 = v55;
                v58 = v57 + 1;
              }
              v154 = v58;
              v67 = (float *)v149;
              v68 = v150;
              if (v149 == v150)
                v69 = 0.0;
              else
                v69 = *(v150 - 1);
              v70 = (float)(v69 + *(v157 - 1)) - *(v58 - 1);
              if (v150 >= v151)
              {
                v72 = ((char *)v150 - (_BYTE *)v149) >> 2;
                v73 = v72 + 1;
                if ((unint64_t)(v72 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v74 = (char *)v151 - (_BYTE *)v149;
                if (((char *)v151 - (_BYTE *)v149) >> 1 > v73)
                  v73 = v74 >> 1;
                if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFFCLL)
                  v75 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v75 = v73;
                if (v75)
                {
                  v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v151, v75);
                  v67 = (float *)v149;
                  v68 = v150;
                }
                else
                {
                  v76 = 0;
                }
                v77 = (float *)&v76[4 * v72];
                *v77 = v70;
                v71 = v77 + 1;
                while (v68 != v67)
                {
                  v78 = *((_DWORD *)v68-- - 1);
                  *((_DWORD *)v77-- - 1) = v78;
                }
                v149 = v77;
                v150 = v71;
                v151 = (float *)&v76[4 * v75];
                if (v67)
                  operator delete(v67);
              }
              else
              {
                *v150 = v70;
                v71 = v68 + 1;
              }
              v150 = v71;
              v79 = *(v157 - 1);
              v80 = *(v154 - 1);
              if (vabds_f32(v79, v80) <= 0.01)
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "");
                end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  v85 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v85)
                    v85 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555)
                    v84 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v84 = v85;
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84)
LABEL_114:
                    v88 = (std::wstring *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v152.__end_cap_, v84);
                  else
                    v88 = 0;
LABEL_118:
                  v89 = v88 + v82;
                  v166.__first_ = v88;
                  v166.__begin_ = v89;
                  v166.__end_cap_.__value_ = &v88[v84];
                  v90 = *(_OWORD *)v147;
                  v89->__r_.__value_.__r.__words[2] = v148;
                  *(_OWORD *)&v89->__r_.__value_.__l.__data_ = v90;
                  v147[1] = 0;
                  v148 = 0;
                  v147[0] = 0;
                  v166.__end_ = v89 + 1;
                  std::vector<std::string>::__swap_out_circular_buffer(&v152, (std::__split_buffer<std::string> *)&v166);
                  v91 = v152.__end_;
                  std::__split_buffer<std::string>::~__split_buffer(&v166);
                  v152.__end_ = v91;
                  if (SHIBYTE(v148) < 0)
                    operator delete(v147[0]);
                  goto LABEL_120;
                }
              }
              else if (v80 >= v79)
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "REF");
                end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  v87 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v87)
                    v87 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555)
                    v84 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v84 = v87;
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84)
                    goto LABEL_114;
                  v88 = 0;
                  goto LABEL_118;
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(v147, "HYP");
                end = v152.__end_;
                if (v152.__end_ >= v152.__end_cap_.__value_)
                {
                  v82 = 0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_ - (char *)v152.__begin_) >> 3);
                  v83 = v82 + 1;
                  if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
                    std::vector<int>::__throw_length_error[abi:ne180100]();
                  if (0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) > v83)
                    v83 = 0x5555555555555556 * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * (((char *)v152.__end_cap_.__value_ - (char *)v152.__begin_) >> 3) >= 0x555555555555555)
                    v84 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v84 = v83;
                  v166.__end_cap_.__value_ = (std::allocator<std::wstring> *)&v152.__end_cap_;
                  if (v84)
                    goto LABEL_114;
                  v88 = 0;
                  goto LABEL_118;
                }
              }
              v86 = *(_OWORD *)v147;
              end->__r_.__value_.__r.__words[2] = v148;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v86;
              v152.__end_ = end + 1;
LABEL_120:
              ++v42;
              locale = v162.__locale_;
              if (v42 >= (v163 - v162.__locale_) >> 2)
              {
                if (__p != v157)
                {
                  v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"AM scores: ", 11);
                  std::ios_base::getloc((const std::ios_base *)((char *)v92 + *(_QWORD *)(*v92 - 24)));
                  v93 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
                  ((void (*)(const std::locale::facet *, uint64_t))v93->__vftable[2].~facet_0)(v93, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref: ", 5);
                  v94 = (float *)__p;
                  if (((unint64_t)((char *)v157 - (_BYTE *)__p) >> 2))
                  {
                    v95 = ((unint64_t)((char *)v157 - (_BYTE *)__p) >> 2);
                    v96 = 0.0;
                    do
                    {
                      v97 = *v94++;
                      v96 = v96 + v97;
                      --v95;
                    }
                    while (v95);
                  }
                  v98 = (_QWORD *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v98 + *(_QWORD *)(*v98 - 24)));
                  v99 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
                  ((void (*)(const std::locale::facet *, uint64_t))v99->__vftable[2].~facet_0)(v99, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp: ", 5);
                  v100 = (float *)v153;
                  if (((unint64_t)((char *)v154 - (_BYTE *)v153) >> 2))
                  {
                    v101 = ((unint64_t)((char *)v154 - (_BYTE *)v153) >> 2);
                    v102 = 0.0;
                    do
                    {
                      v103 = *v100++;
                      v102 = v102 + v103;
                      --v101;
                    }
                    while (v101);
                  }
                  v104 = (_QWORD *)std::ostream::operator<<();
                  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(_QWORD *)(*v104 - 24)));
                  v105 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
                  ((void (*)(const std::locale::facet *, uint64_t))v105->__vftable[2].~facet_0)(v105, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                  std::ios_base::getloc((const std::ios_base *)((char *)v104 + *(_QWORD *)(*v104 - 24)));
                  v106 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
                  ((void (*)(const std::locale::facet *, uint64_t))v106->__vftable[2].~facet_0)(v106, 10);
                  std::locale::~locale((std::locale *)&v166);
                  std::ostream::put();
                  std::ostream::flush();
                }
                break;
              }
            }
          }
        }
        v107 = 0;
        v108 = 0;
        if ((int)((unint64_t)(v165 - v164) >> 2) >= 20)
          v109 = 20;
        else
          v109 = (unint64_t)(v165 - v164) >> 2;
        while (v109 > (int)v108)
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Models:", 11);
          v110 = v109;
          v111 = v108;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            std::ostream::operator<<();
            ++v111;
          }
          while (v109 != v111);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v112 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v112->__vftable[2].~facet_0)(v112, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Models:", 11);
          v113 = v108;
          do
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            std::ostream::operator<<();
            ++v113;
          }
          while (v109 != v113);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v114 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v114->__vftable[2].~facet_0)(v114, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Phones:", 11);
          v115 = v108;
          do
          {
            v116 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            kaldi::quasar::ErrorProfile::ToPhoneString(a4, *((_DWORD *)v160[0] + v115), (std::string *)&v166);
            if (SHIBYTE(v166.__end_) >= 0)
              v117 = &v166;
            else
              v117 = v166.__first_;
            if (SHIBYTE(v166.__end_) >= 0)
              v118 = HIBYTE(v166.__end_);
            else
              v118 = (uint64_t)v166.__begin_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v116, (uint64_t)v117, v118);
            if (SHIBYTE(v166.__end_) < 0)
              operator delete(v166.__first_);
            ++v115;
          }
          while (v109 != v115);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v119 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v119->__vftable[2].~facet_0)(v119, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Phones:", 11);
          v120 = v108;
          do
          {
            v121 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
            kaldi::quasar::ErrorProfile::ToPhoneString(a4, *((_DWORD *)v159[0] + v120), (std::string *)&v166);
            if (SHIBYTE(v166.__end_) >= 0)
              v122 = &v166;
            else
              v122 = v166.__first_;
            if (SHIBYTE(v166.__end_) >= 0)
              v123 = HIBYTE(v166.__end_);
            else
              v123 = (uint64_t)v166.__begin_;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v121, (uint64_t)v122, v123);
            if (SHIBYTE(v166.__end_) < 0)
              operator delete(v166.__first_);
            ++v120;
          }
          while (v109 != v120);
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v124 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v124->__vftable[2].~facet_0)(v124, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          std::ostream::flush();
          if (__p != v157)
          {
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Ref Scores:", 11);
            v125 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              std::ostream::operator<<();
              ++v125;
            }
            while (v109 != v125);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v126 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v126->__vftable[2].~facet_0)(v126, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"Hyp Scores:", 11);
            v127 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              std::ostream::operator<<();
              ++v127;
            }
            while (v109 != v127);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v128 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v128->__vftable[2].~facet_0)(v128, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"           ", 11);
            v129 = v108;
            do
            {
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              v130 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v130, (uint64_t)"%", 1);
              ++v129;
            }
            while (v109 != v129);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v131 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v131->__vftable[2].~facet_0)(v131, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"           ", 11);
            v132 = v107;
            do
            {
              v133 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a2, (uint64_t)"\t", 1);
              v134 = *((char *)&v152.__begin_->__r_.__value_.__r.__words[2] + v132 + 7);
              if (v134 >= 0)
                v135 = (char *)v152.__begin_ + v132;
              else
                v135 = *(std::string::pointer *)((char *)&v152.__begin_->__r_.__value_.__l.__data_ + v132);
              if (v134 >= 0)
                v136 = *((unsigned __int8 *)&v152.__begin_->__r_.__value_.__r.__words[2] + v132 + 7);
              else
                v136 = *(std::string::size_type *)((char *)&v152.__begin_->__r_.__value_.__l.__size_ + v132);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v133, (uint64_t)v135, v136);
              v132 += 24;
              --v110;
            }
            while (v108 != v110);
            std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
            v137 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
            ((void (*)(const std::locale::facet *, uint64_t))v137->__vftable[2].~facet_0)(v137, 10);
            std::locale::~locale((std::locale *)&v166);
            std::ostream::put();
            std::ostream::flush();
          }
          if (v109 + 20 >= (int)((unint64_t)(v165 - v164) >> 2))
            v109 = (unint64_t)(v165 - v164) >> 2;
          else
            v109 += 20;
          std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
          v138 = std::locale::use_facet((const std::locale *)&v166, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v138->__vftable[2].~facet_0)(v138, 10);
          std::locale::~locale((std::locale *)&v166);
          std::ostream::put();
          v108 += 20;
          v107 += 480;
          std::ostream::flush();
        }
        if (v149)
        {
          v150 = (float *)v149;
          operator delete(v149);
        }
        v166.__first_ = (std::__split_buffer<std::wstring>::pointer)&v152;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v166);
        if (v153)
        {
          v154 = (float *)v153;
          operator delete(v153);
        }
        if (__p)
        {
          v157 = (float *)__p;
          operator delete(__p);
        }
        if (v159[0])
        {
          v159[1] = v159[0];
          operator delete(v159[0]);
        }
        if (v160[0])
        {
          v160[1] = v160[0];
          operator delete(v160[0]);
        }
        if (v161[0])
        {
          v161[1] = v161[0];
          operator delete(v161[0]);
        }
        if (v162.__locale_)
        {
          v163 = v162.__locale_;
          operator delete(v162.__locale_);
        }
        if (v164)
        {
          v165 = v164;
          operator delete(v164);
        }
      }
      result = v146;
      v145 += (*(_QWORD *)(*(_QWORD *)(v146 + 272) + 24 * v142 + 8) - *(_QWORD *)(*(_QWORD *)(v146 + 272) + 24 * v142)) >> 2;
      v8 = v142 + 1;
    }
    while (v142 + 1 < (unint64_t)((uint64_t)(*(_QWORD *)(v146 + 88) - *(_QWORD *)(v146 + 80)) >> 2));
  }
  return result;
}

void sub_1ADCF3FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char *__p,char *a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43)
{
  uint64_t v43;
  void *v45;
  void *v46;
  void *v47;

  std::locale::~locale((std::locale *)(v43 - 144));
  if (__p)
  {
    a28 = __p;
    operator delete(__p);
  }
  __p = &a30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a36)
  {
    a37 = (uint64_t)a36;
    operator delete(a36);
  }
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  if (a42)
  {
    a43 = (uint64_t)a42;
    operator delete(a42);
  }
  v45 = *(void **)(v43 - 216);
  if (v45)
  {
    *(_QWORD *)(v43 - 208) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v43 - 192);
  if (v46)
  {
    *(_QWORD *)(v43 - 184) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v43 - 168);
  if (v47)
  {
    *(_QWORD *)(v43 - 160) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::GetTransitionIds(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, uint64_t *a5@<X4>, char **a6@<X8>)
{
  int v9;
  unint64_t LocationOfTransIdInList;
  char *v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  unint64_t v28;
  _QWORD *v29;
  int v30;

  if (a2 == a3)
  {
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
  else
  {
    v9 = a2;
    LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(a1, a2, a4, a5);
    a6[1] = 0;
    a6[2] = 0;
    *a6 = 0;
    if (v9 < a3)
    {
      v11 = 0;
      v12 = HIDWORD(LocationOfTransIdInList);
      v13 = a6 + 2;
      v14 = *a5;
      v15 = a5[1];
      v16 = LocationOfTransIdInList;
      do
      {
        if (0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3) <= v16)
          break;
        v17 = v16;
        v18 = *(_QWORD *)(v14 + 24 * v16);
        if ((unint64_t)v11 >= *v13)
        {
          v19 = *a6;
          v20 = (v11 - *a6) >> 2;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v22 = *v13 - (_QWORD)v19;
          if (v22 >> 1 > v21)
            v21 = v22 >> 1;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
            v23 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v13, v23);
            v19 = *a6;
            v11 = a6[1];
            v13 = a6 + 2;
          }
          else
          {
            v24 = 0;
          }
          v25 = &v24[4 * v20];
          *(_DWORD *)v25 = *(_DWORD *)(v18 + 4 * (int)v12);
          v26 = v25 + 4;
          while (v11 != v19)
          {
            v27 = *((_DWORD *)v11 - 1);
            v11 -= 4;
            *((_DWORD *)v25 - 1) = v27;
            v25 -= 4;
          }
          *a6 = v25;
          a6[1] = v26;
          a6[2] = &v24[4 * v23];
          if (v19)
          {
            operator delete(v19);
            v13 = a6 + 2;
          }
          v11 = v26;
        }
        else
        {
          *(_DWORD *)v11 = *(_DWORD *)(v18 + 4 * (int)v12);
          v11 += 4;
        }
        a6[1] = v11;
        LODWORD(v12) = v12 + 1;
        v14 = *a5;
        v15 = a5[1];
        v28 = 0xAAAAAAAAAAAAAAABLL * ((v15 - *a5) >> 3);
        if (v28 > v16)
        {
          v29 = (_QWORD *)(v14 + 24 * v16 + 8);
          while ((int)v12 >= (unint64_t)((uint64_t)(*v29 - *(v29 - 1)) >> 2))
          {
            LODWORD(v12) = 0;
            v30 = 0;
            ++v17;
            v29 += 3;
            if (v28 <= v17)
              goto LABEL_29;
          }
          v30 = v12;
LABEL_29:
          LODWORD(v12) = v30;
          v16 = v17;
        }
        ++v9;
      }
      while (v9 != a3);
    }
  }
}

void sub_1ADCF43EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::Analyze(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  _BOOL4 HasAttribute;
  _QWORD v9[2];
  int v10;

  v9[0] = &off_1E5D32A08;
  v9[1] = 0x3F80000000000000;
  v10 = 0;
  HasAttribute = kaldi::quasar::ErrorRegion::HasAttribute(this, (kaldi::quasar::AbstractAttribute *)v9);
  kaldi::quasar::ErrorRegion::AddPdfAttributes(this, a2, a3, HasAttribute);
  kaldi::quasar::ErrorRegion::AddPhoneAttributes(this, a2, a3, HasAttribute);
  kaldi::quasar::ErrorRegion::AddWordAttributes(this, a2, a3, a4, HasAttribute);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v9);
}

void sub_1ADCF44B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::AddPdfAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  int *v8;
  unint64_t v9;
  uint64_t *BaseAttribute;
  unsigned int LocationOfTransIdInList;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  unint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t *v23;
  unsigned int v24;
  unint64_t v25;
  int *v26;
  int *v27;
  void *__p;
  _BYTE *v29;

  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 31, 1, 0, (int **)&__p);
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 34, 1, 0, &v26);
  if (a4)
  {
    v8 = v27;
    if (v27 != v26)
    {
      v9 = 0;
      v8 = v26;
      do
      {
        BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v8[v9], 1, 0, 1);
        LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)BaseAttribute, (int)v9 + *((_DWORD *)this + 11), *((_DWORD *)this + 11), (_QWORD *)this + 34);
        kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, LocationOfTransIdInList);
        ++v9;
        v8 = v26;
      }
      while (v9 < v27 - v26);
    }
  }
  else
  {
    v12 = *((_DWORD *)this + 10);
    v13 = *((_DWORD *)this + 11);
    v14 = v12 - v13;
    v15 = v14 & ~(v14 >> 31);
    v17 = __p;
    v16 = v29;
    v18 = ((v29 - (_BYTE *)__p) >> 2) + v12 - v13;
    v8 = v26;
    v19 = v27;
    if (v27 - v26 < v18)
      v18 = v27 - v26;
    if (v18 > v15)
    {
      v20 = v14;
      v21 = v13 - v12;
      do
      {
        v22 = v8[v15];
        if (v17[v21 + (int)v15] != v22)
        {
          v23 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v22, 1, 0, 1);
          v24 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)v23, (int)v15 + *((_DWORD *)this + 11), *((_DWORD *)this + 11), (_QWORD *)this + 34);
          kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)v23, v24);
          v17 = __p;
          v16 = v29;
          v8 = v26;
          v19 = v27;
        }
        ++v15;
        v25 = v20 + ((v16 - (_BYTE *)v17) >> 2);
        if (v19 - v8 < v25)
          v25 = v19 - v8;
      }
      while (v25 > v15);
    }
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

void sub_1ADCF4684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::quasar::ErrorRegion::AddPhoneAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  int v10;
  _DWORD *v11;
  unint64_t v12;
  unint64_t i;
  _BYTE *v14;
  _BYTE *v15;
  unint64_t v16;
  int *v17;
  int v18;
  int v19;
  _DWORD *v20;
  uint64_t *BaseAttribute;
  unsigned int LocationOfTransIdInList;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unsigned int v28;
  void *v29[3];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  void *v39[3];
  void *v40;
  void *v41;
  uint64_t v42;
  _DWORD *v43;
  _BYTE *v44;
  uint64_t v45;

  v43 = 0;
  v44 = 0;
  v45 = 0;
  v40 = 0;
  v41 = 0;
  v8 = (_QWORD *)((char *)this + 272);
  v42 = 0;
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 34, 2, 0, (int **)v39);
  kaldi::quasar::ErrorRegion::GetSequence(a3, (uint64_t *)this + 31, 2, 0, (int **)&__p);
  kaldi::quasar::ErrorRegion::ComputePhoneAlignment((uint64_t)&__p, *((_DWORD *)this + 10), v39, *((_DWORD *)this + 11), 1, (void **)&v43, (uint64_t)&v40);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  __p = 0;
  v37 = 0;
  v38 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  if (*((_QWORD *)this + 38) != *((_QWORD *)this + 39))
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
    v9 = std::vector<std::vector<int>>::__push_back_slow_path<std::vector<int> const&>(&v30, (uint64_t)this + 304);
    v10 = *((_DWORD *)this + 11);
    v31 = v9;
    kaldi::quasar::ErrorRegion::GetSequence(a3, &v30, 2, 0, (int **)v29);
    kaldi::quasar::ErrorRegion::ComputePhoneAlignment((uint64_t)v39, v10, v29, *((_DWORD *)this + 11), 1, &__p, (uint64_t)&v33);
    if (v29[0])
    {
      v29[1] = v29[0];
      operator delete(v29[0]);
    }
    v29[0] = &v30;
    std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)v29);
  }
  v11 = v43;
  if (v44 != (_BYTE *)v43)
  {
    v12 = 0;
    LODWORD(i) = 0;
    v14 = __p;
    v15 = v37;
    while (1)
    {
      if (v14 != v15)
      {
        v16 = (v15 - v14) >> 3;
        if (v16 > (int)i)
        {
          i = (int)i;
          v17 = (int *)&v14[8 * (int)i];
          do
          {
            v18 = *v17;
            v17 += 2;
            if (v18 == v11[2 * v12 + 1])
              break;
            ++i;
          }
          while (v16 > i);
        }
      }
      if (a4)
        break;
      v20 = &v11[2 * v12];
      v19 = v20[1];
      if (*v20 != v19)
        goto LABEL_17;
LABEL_26:
      ++v12;
      v11 = v43;
      if (v12 >= (v44 - (_BYTE *)v43) >> 3)
        goto LABEL_27;
    }
    v19 = v11[2 * v12 + 1];
LABEL_17:
    BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v19, 2, 0, 1);
    LocationOfTransIdInList = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)BaseAttribute, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
    kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, LocationOfTransIdInList);
    v15 = __p;
    if (__p == v37)
    {
      v14 = __p;
    }
    else
    {
      v23 = 8 * (int)i;
      for (i = (int)i; ; ++i)
      {
        v14 = __p;
        v15 = v37;
        if (i >= (v37 - (_BYTE *)__p) >> 3 || *(_DWORD *)((char *)__p + v23) != v43[2 * v12 + 1])
          break;
        if (*(_DWORD *)((char *)__p + v23 + 8) == *(_DWORD *)((char *)__p + v23 + 12))
          v24 = 7;
        else
          v24 = 6;
        v25 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, *((_DWORD *)__p + 2 * v12 + 1), 2, v24, 2);
        v26 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList((uint64_t)v25, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
        v27 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(v26, *((_DWORD *)v33 + i + 1), *((_DWORD *)this + 11), v8);
        v28 = kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(v27, *((_DWORD *)v40 + v12), *((_DWORD *)this + 11), v8);
        v23 += 8;
        kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)v25, v28);
      }
    }
    goto LABEL_26;
  }
LABEL_27:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v39[0])
  {
    v39[1] = v39[0];
    operator delete(v39[0]);
  }
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
}

void sub_1ADCF49EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  uint64_t v26;
  void *v28;

  if (__p)
  {
    a11 = __p;
    operator delete(__p);
  }
  __p = &a13;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a16)
  {
    a17 = (uint64_t)a16;
    operator delete(a16);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a22)
  {
    a23 = (uint64_t)a22;
    operator delete(a22);
  }
  if (a25)
  {
    a26 = (uint64_t)a25;
    operator delete(a25);
  }
  v28 = *(void **)(v26 - 104);
  if (v28)
  {
    *(_QWORD *)(v26 - 96) = v28;
    operator delete(v28);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ErrorRegion::AddWordAttributes(kaldi::quasar::ErrorRegion *this, kaldi::quasar::AttributeFactory *a2, const kaldi::TransitionModel *a3, int a4, char a5)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  _DWORD *v12;
  char *v13;
  unint64_t v14;
  int v15;
  BOOL v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;
  char *v28;
  unint64_t v29;
  _BYTE *v30;
  int v31;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  int v41;
  char *v42;
  int v43;
  _BOOL4 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t *BaseAttribute;
  unint64_t v48;
  uint64_t *WordConfusionAttribute;
  _BOOL4 v51;
  unint64_t v52;
  int v53;
  char *v55;
  char *v56;
  char *v57;
  void *__p;
  char *v59;
  char *v60;
  void *v61;
  _DWORD *v62;
  uint64_t v63;
  void *v64;
  _BYTE *v65;
  uint64_t v66;
  void **v67[3];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v68 = 0;
  v69 = 0;
  v70 = 0;
  kaldi::quasar::ErrorRegion::ComputeWordAlignment((uint64_t)this, a3, &v68);
  v8 = (uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2;
  LOBYTE(v64) = 0;
  std::vector<BOOL>::vector(v67, v8, (unsigned __int8 *)&v64);
  v9 = v68;
  if (v69 != v68)
  {
    v10 = 0;
    v53 = 0;
    do
    {
      v64 = 0;
      v65 = 0;
      v66 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v64, *(const void **)(v9 + 48 * v10), *(_QWORD *)(v9 + 48 * v10 + 8), (uint64_t)(*(_QWORD *)(v9 + 48 * v10 + 8) - *(_QWORD *)(v9 + 48 * v10)) >> 2);
      v62 = 0;
      v63 = 0;
      v61 = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v61, *(const void **)(v68 + 48 * v10 + 24), *(_QWORD *)(v68 + 48 * v10 + 32), (uint64_t)(*(_QWORD *)(v68 + 48 * v10 + 32) - *(_QWORD *)(v68 + 48 * v10 + 24)) >> 2);
      __p = 0;
      v59 = 0;
      v60 = 0;
      v12 = v64;
      v11 = v65;
      if (v65 == v64)
      {
        v13 = 0;
      }
      else
      {
        v13 = 0;
        v14 = 0;
        do
        {
          v15 = v12[v14];
          v16 = v15 == a4 || v15 == 0;
          if (!v16)
          {
            if (v13 >= v60)
            {
              v18 = (char *)__p;
              v19 = (v13 - (_BYTE *)__p) >> 2;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v21 = v60 - (_BYTE *)__p;
              if ((v60 - (_BYTE *)__p) >> 1 > v20)
                v20 = v21 >> 1;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                v22 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              if (v22)
              {
                v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v60, v22);
                v18 = (char *)__p;
                v13 = v59;
                v15 = v12[v14];
              }
              else
              {
                v23 = 0;
              }
              v24 = &v23[4 * v19];
              *(_DWORD *)v24 = v15;
              v17 = v24 + 4;
              while (v13 != v18)
              {
                v25 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v24 - 1) = v25;
                v24 -= 4;
              }
              __p = v24;
              v59 = v17;
              v60 = &v23[4 * v22];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *(_DWORD *)v13 = v15;
              v17 = v13 + 4;
            }
            v59 = v17;
            v13 = v17;
            v12 = v64;
            v11 = v65;
          }
          ++v14;
        }
        while (v14 < (v11 - (_BYTE *)v12) >> 2);
      }
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v27 = v61;
      v26 = v62;
      if (v62 == v61)
      {
        v42 = 0;
        v28 = 0;
        v30 = v62;
      }
      else
      {
        v28 = 0;
        v29 = 0;
        v30 = v62;
        do
        {
          v31 = v27[v29];
          if (v31 != a4 && v31 != 0)
          {
            if (v28 >= v57)
            {
              v34 = v55;
              v35 = (v28 - v55) >> 2;
              v36 = v35 + 1;
              if ((unint64_t)(v35 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v37 = v57 - v55;
              if ((v57 - v55) >> 1 > v36)
                v36 = v37 >> 1;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
                v38 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              if (v38)
              {
                v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v57, v38);
                v34 = v55;
                v28 = v56;
                v31 = v27[v29];
              }
              else
              {
                v39 = 0;
              }
              v40 = &v39[4 * v35];
              *(_DWORD *)v40 = v31;
              v33 = v40 + 4;
              while (v28 != v34)
              {
                v41 = *((_DWORD *)v28 - 1);
                v28 -= 4;
                *((_DWORD *)v40 - 1) = v41;
                v40 -= 4;
              }
              v55 = v40;
              v57 = &v39[4 * v38];
              if (v34)
                operator delete(v34);
            }
            else
            {
              *(_DWORD *)v28 = v31;
              v33 = v28 + 4;
            }
            v56 = v33;
            v28 = v33;
            v27 = v61;
            v30 = v62;
          }
          ++v29;
        }
        while (v29 < (v30 - (_BYTE *)v27) >> 2);
        v13 = v59;
        v42 = v55;
        v26 = v27;
      }
      if (v13 - (_BYTE *)__p == v28 - v42)
      {
        v43 = memcmp(__p, v42, v13 - (_BYTE *)__p);
        v44 = v43 != 0;
        if ((a5 & 1) == 0 && !v43)
          goto LABEL_69;
      }
      else
      {
        v44 = 1;
      }
      if (v30 == (_BYTE *)v26)
      {
        v30 = v26;
        if (v44)
          goto LABEL_66;
      }
      else
      {
        v51 = v44;
        v52 = v10;
        v45 = 0;
        v46 = 24 * v53;
        do
        {
          BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v26[v45], 3, 0, 1);
          kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)BaseAttribute, v53 + v45);
          kaldi::quasar::ErrorRegion::AddMinDurationAttributes(this, a2, (uint64_t *)(*((_QWORD *)this + 34) + v46), *((_DWORD *)v61 + v45), v53 + v45, 3, 1, a3);
          ++v45;
          v26 = v61;
          v30 = v62;
          v46 += 24;
        }
        while (v45 < ((char *)v62 - (_BYTE *)v61) >> 2);
        v10 = v52;
        if (v51)
        {
LABEL_66:
          v16 = v30 == (_BYTE *)v26;
          v30 = v26;
          if (!v16)
          {
            v48 = 0;
            do
            {
              WordConfusionAttribute = kaldi::quasar::AttributeFactory::CreateWordConfusionAttribute(a2, v48, (uint64_t)&v64, (uint64_t)&v61);
              kaldi::quasar::ErrorRegion::AddAttribute(this, (kaldi::quasar::AbstractAttribute *)WordConfusionAttribute, v53 + v48++);
              v26 = v61;
              v30 = v62;
            }
            while (v48 < ((char *)v62 - (_BYTE *)v61) >> 2);
          }
        }
      }
LABEL_69:
      if (v55)
        operator delete(v55);
      if (__p)
      {
        v59 = (char *)__p;
        operator delete(__p);
      }
      if (v61)
      {
        v62 = v61;
        operator delete(v61);
      }
      if (v64)
      {
        v65 = v64;
        operator delete(v64);
      }
      v53 += (unint64_t)(v30 - (_BYTE *)v26) >> 2;
      ++v10;
      v9 = v68;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v69 - v68) >> 4) > v10);
  }
  if (v67[0])
    operator delete(v67[0]);
  v67[0] = (void **)&v68;
  std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100](v67);
}

void sub_1ADCF4F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  uint64_t v26;

  *(_QWORD *)(v26 - 136) = v26 - 112;
  std::vector<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v26 - 136));
  _Unwind_Resume(a1);
}

uint64_t **kaldi::quasar::ErrorRegion::AddMinDurationAttributes(kaldi::quasar::ErrorRegion *a1, kaldi::quasar::AttributeFactory *a2, uint64_t *a3, int a4, unsigned int a5, int a6, int a7, kaldi::TransitionModel *this)
{
  uint64_t v13;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t **result;
  int v20;
  int v21;
  uint64_t *BaseAttribute;
  int v23;
  uint64_t *v24;
  uint64_t *v25;
  char v27;

  v13 = *a3;
  if (a3[1] != *a3)
  {
    v16 = 0;
    v17 = 1;
LABEL_3:
    v27 = v17;
    do
    {
      v18 = *(_DWORD *)(v13 + 4 * v16);
      result = (uint64_t **)kaldi::TransitionModel::IsSelfLoop(this, v18);
      if ((result & 1) != 0)
      {
        v17 = 0;
        ++v16;
        v13 = *a3;
        if (v16 < (a3[1] - *a3) >> 2)
          goto LABEL_3;
        return result;
      }
      result = (uint64_t **)kaldi::TransitionModel::IsFinal(this, v18);
      if ((result & v17) == 1)
      {
        v20 = kaldi::TransitionModel::TransitionIdToTransitionState(this, v18);
        v21 = kaldi::TransitionModel::TransitionStateToPhone(this, v20);
        BaseAttribute = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v21, 2, 0, a7);
        result = (uint64_t **)kaldi::quasar::ErrorRegion::HasAttribute(a1, (kaldi::quasar::AbstractAttribute *)BaseAttribute);
        if ((_DWORD)result)
        {
          v23 = kaldi::TransitionModel::TransitionStateToPhone(this, v20);
          v24 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, v23, 2, a6, a7);
          result = kaldi::quasar::ErrorRegion::AddAttribute(a1, (kaldi::quasar::AbstractAttribute *)v24, a5);
        }
        v17 = 1;
      }
      else
      {
        v17 |= result;
      }
      ++v16;
      v13 = *a3;
    }
    while (v16 < (a3[1] - *a3) >> 2);
    if ((v27 & 1) == 0)
      return result;
  }
  v25 = kaldi::quasar::AttributeFactory::CreateBaseAttribute(a2, a4, 3, a6, a7);
  return kaldi::quasar::ErrorRegion::AddAttribute(a1, (kaldi::quasar::AbstractAttribute *)v25, a5);
}

unint64_t kaldi::quasar::ErrorRegion::GetLocationOfTransIdInList(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v10[34];

  if (a2 < a3)
    goto LABEL_12;
  v4 = *a4;
  v5 = ((*(_QWORD *)(*a4 + 8) - *(_QWORD *)*a4) >> 2) + a3;
  v6 = (a4[1] - *a4) / 24;
  if (v5 <= a2)
  {
    v7 = 0;
    v8 = (_QWORD *)(v4 + 32);
    while (v6 != v7)
    {
      ++v7;
      v5 += (*v8 - *(v8 - 1)) >> 2;
      v8 += 3;
      if (v5 > a2)
        goto LABEL_9;
    }
    v7 = (a4[1] - *a4) / 24;
LABEL_9:
    v7 = v7;
  }
  else
  {
    v7 = 0;
  }
  if (v6 <= v7)
  {
LABEL_12:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Supplied frame is not part of given transition ids");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  return v7 | ((unint64_t)(a2
                                - v5
                                + ((*(_QWORD *)(v4 + 24 * v7 + 8)
                                                - *(_QWORD *)(v4 + 24 * v7)) >> 2)) << 32);
}

void kaldi::quasar::ErrorRegion::AddErrorRegion(kaldi::quasar::ErrorRegion *this, const kaldi::quasar::ErrorRegion *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t **v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  int v10;

  *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)this + 56), *((_QWORD *)this + 8), *((char **)a2 + 7), *((char **)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  std::vector<int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<int const*>,std::__wrap_iter<int const*>>((std::vector<int> *)((char *)this + 80), *((_QWORD *)this + 11), *((char **)a2 + 10), *((char **)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 104, *((_QWORD *)this + 14), *((char **)a2 + 13), *((char **)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 128, *((_QWORD *)this + 17), *((char **)a2 + 16), *((char **)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 152, *((_QWORD *)this + 20), *((char **)a2 + 19), *((char **)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 176, *((_QWORD *)this + 23), *((char **)a2 + 22), *((char **)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 200, *((_QWORD *)this + 26), *((char **)a2 + 25), *((char **)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 2);
  std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>((uint64_t)this + 224, *((_QWORD *)this + 29), *((char **)a2 + 28), *((char **)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 2);
  std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>((uint64_t *)this + 31, *((__n128 **)this + 32), *((_QWORD *)a2 + 31), *((_QWORD *)a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 32) - *((_QWORD *)a2 + 31)) >> 3));
  std::vector<std::vector<int>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<int> const*>,std::__wrap_iter<std::vector<int> const*>>((uint64_t *)this + 34, *((__n128 **)this + 35), *((_QWORD *)a2 + 34), *((_QWORD *)a2 + 35), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 35) - *((_QWORD *)a2 + 34)) >> 3));
  if (*((_QWORD *)a2 + 3) != *((_QWORD *)a2 + 2))
  {
    v4 = 0;
    do
    {
      v8 = 0u;
      v9 = 0u;
      v10 = 1065353216;
      std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::push_back[abi:ne180100]((uint64_t *)this + 2, (uint64_t *)&v8);
      std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v8);
      v5 = *((_QWORD *)a2 + 2);
      v6 = *(uint64_t ***)(v5 + 40 * v4 + 16);
      if (v6)
      {
        do
        {
          v7 = *((_QWORD *)this + 3) - 40;
          *(_QWORD *)&v8 = (*(uint64_t (**)(uint64_t *))(*v6[2] + 32))(v6[2]);
          std::__hash_table<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>::__emplace_unique_key_args<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AbstractAttribute * const&>(v7, &v8, &v8);
          v6 = (uint64_t **)*v6;
        }
        while (v6);
        v5 = *((_QWORD *)a2 + 2);
      }
      ++v4;
    }
    while (0xCCCCCCCCCCCCCCCDLL * ((*((_QWORD *)a2 + 3) - v5) >> 3) > v4);
  }
  *(_QWORD *)&v8 = &off_1E5D32A08;
  *((_QWORD *)&v8 + 1) = 0x3F80000000000000;
  LODWORD(v9) = 0;
  if (kaldi::quasar::ErrorRegion::HaveSameWordSequence(this))
    kaldi::quasar::ErrorRegion::AddAttribute((uint64_t **)this, (kaldi::quasar::AbstractAttribute *)&v8);
  else
    kaldi::quasar::ErrorRegion::RemoveAttribute((uint64_t)this, (kaldi::quasar::AbstractAttribute *)&v8);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v8);
}

void sub_1ADCF5524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    if (v10 + 1 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x333333333333333)
      v13 = 0x666666666666666;
    else
      v13 = v12;
    v19 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(v4, v13);
    else
      v14 = 0;
    v15 = v14;
    v16 = &v14[40 * v10];
    v18 = &v14[40 * v13];
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table((uint64_t)v16, a2);
    v17 = v16 + 40;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, &v15);
    v9 = a1[1];
    result = std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    result = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__hash_table(*(_QWORD *)(v4 - 8), a2);
    v9 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v9;
  return result;
}

void sub_1ADCF5654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<int>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::string>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_1ADCF5700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v4 - 40);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      do
      {
        *(_OWORD *)v7 = 0uLL;
        *(_OWORD *)(v7 + 16) = 0uLL;
        *(_DWORD *)(v7 + 32) = 1065353216;
        v7 += 40;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[40 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[40 * v11];
    v15 = &v14[40 * a2];
    do
    {
      *(_OWORD *)v14 = 0uLL;
      *((_OWORD *)v14 + 1) = 0uLL;
      *((_DWORD *)v14 + 8) = 1065353216;
      v14 += 40;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::unordered_map<std::string,unsigned long>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_1ADCF58CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<std::unordered_set<kaldi::quasar::AbstractAttribute *,kaldi::quasar::AttributeHash,kaldi::quasar::AttributeEquality,std::allocator<kaldi::quasar::AbstractAttribute *>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(i - 40);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::pair<std::vector<int>,std::vector<int>>>::__push_back_slow_path<std::pair<std::vector<int>,std::vector<int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[48 * v4];
  v16 = &v10[48 * v9];
  std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100](v14, a2);
  v15 = v14 + 48;
  std::vector<std::pair<std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADCF5A1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::pair<std::vector<int>,std::vector<int>>::pair[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(a1 + 3, *(const void **)(a2 + 24), *(_QWORD *)(a2 + 32), (uint64_t)(*(_QWORD *)(a2 + 32) - *(_QWORD *)(a2 + 24)) >> 2);
  return a1;
}

void sub_1ADCF5A8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<std::vector<int>,std::vector<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 48) = 0;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      v8 = *(_OWORD *)(a3 - 48);
      a3 -= 48;
      *(_OWORD *)(v7 - 48) = v8;
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 24);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 40);
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 48;
      *((_QWORD *)&v14 + 1) -= 48;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::vector<int>,std::vector<int>>>,std::reverse_iterator<std::pair<std::vector<int>,std::vector<int>>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::pair<std::vector<int>,std::vector<int>>>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<std::pair<std::vector<quasar::rescoring::FeatureType>,std::vector<quasar::rescoring::FeatureTransformation>>>::destroy[abi:ne180100](v4, i - 48);
  }
}

uint64_t TDataManager::getBoolVar(TDataManager *this, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v17;
  std::exception_vtbl *v18;
  _QWORD *exception;
  void *__p[2];
  char v21;
  std::exception v22[3];
  char v23;

  v6 = (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, a2, 0, 0);
  if (v6)
  {
    v7 = v6;
    v8 = (char *)operator new[]();
    (*(void (**)(TDataManager *, const char *, char *, uint64_t))(*(_QWORD *)this + 40))(this, a2, v8, v7);
    v8[v7] = 0;
    v9 = *v8;
    v10 = v8;
    v11 = MEMORY[0x1E0C80978];
    if (*v8)
    {
      v10 = v8;
      do
      {
        if ((v9 & 0x80) != 0)
        {
          if (!__maskrune(v9, 0x4000uLL))
            break;
        }
        else if ((*(_DWORD *)(v11 + 4 * v9 + 60) & 0x4000) == 0)
        {
          break;
        }
        v12 = *(unsigned __int8 *)++v10;
        v9 = v12;
      }
      while (v12);
    }
    v13 = &v10[strlen(v10)];
    while (1)
    {
      v14 = v13;
      if (v13 <= v10)
        break;
      --v13;
      v15 = *((unsigned __int8 *)v14 - 1);
      if (*(v14 - 1) < 0)
      {
        if (!__maskrune(v15, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v11 + 4 * v15 + 60) & 0x4000) == 0)
      {
        break;
      }
    }
    *v14 = 0;
    if (!strcmp(v10, "0") || !strcasecmp(v10, "false"))
    {
      a3 = 0;
    }
    else
    {
      if (strcmp(v10, "1") && strcasecmp(v10, "true"))
      {
        MEMORY[0x1AF44D160](v8, 0x1000C8077774924);
        tknPrintf("Error: '%s' was not a BOOLean\n", v17, a2);
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        TException::TException(v22, (__int128 *)__p);
        v22[0].__vftable = (std::exception_vtbl *)&unk_1E5D16AB0;
        if (v23 >= 0)
          v18 = (std::exception_vtbl *)&v22[1];
        else
          v18 = v22[1].__vftable;
        conditionalAssert((const char *)v18, "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/libtennessee/src/nashville/libtextproc/shared/datamgr.cpp", 66);
        TException::~TException(v22);
        if (v21 < 0)
          operator delete(__p[0]);
        exception = __cxa_allocate_exception(0x20uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "");
        TException::TException(exception, (__int128 *)v22);
        *exception = &unk_1E5D16AB0;
      }
      a3 = 1;
    }
    MEMORY[0x1AF44D160](v8, 0x1000C8077774924);
  }
  return a3;
}

void sub_1ADCF5F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
  {
    operator delete(__p);
    if ((v22 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v21);
  goto LABEL_6;
}

uint64_t TDataManager::getIntVar(TDataManager *this, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = (*(uint64_t (**)(TDataManager *, const char *, _QWORD, _QWORD))(*(_QWORD *)this + 40))(this, a2, 0, 0);
  if (!v6)
    return a3;
  v7 = v6;
  v8 = (char *)operator new[]();
  (*(void (**)(TDataManager *, const char *, char *, uint64_t))(*(_QWORD *)this + 40))(this, a2, v8, v7);
  v8[v7] = 0;
  v9 = *v8;
  v10 = v8;
  v11 = MEMORY[0x1E0C80978];
  if (*v8)
  {
    v10 = v8;
    do
    {
      if ((v9 & 0x80) != 0)
      {
        if (!__maskrune(v9, 0x4000uLL))
          break;
      }
      else if ((*(_DWORD *)(v11 + 4 * v9 + 60) & 0x4000) == 0)
      {
        break;
      }
      v12 = *(unsigned __int8 *)++v10;
      v9 = v12;
    }
    while (v12);
  }
  v13 = &v10[strlen(v10)];
  while (1)
  {
    v14 = v13;
    if (v13 <= v10)
      break;
    --v13;
    v15 = *((unsigned __int8 *)v14 - 1);
    if (*(v14 - 1) < 0)
    {
      if (!__maskrune(v15, 0x4000uLL))
        break;
    }
    else if ((*(_DWORD *)(v11 + 4 * v15 + 60) & 0x4000) == 0)
    {
      break;
    }
  }
  *v14 = 0;
  v16 = atoi(v10);
  MEMORY[0x1AF44D160](v8, 0x1000C8077774924);
  return v16;
}

void TDataManager::getStringVar(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 40))(a1, a2, 0, 0);
  if (v6)
  {
    v7 = v6;
    v8 = operator new[]();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, a2, v8, v7);
    *(_BYTE *)(v8 + v7) = 0;
    MEMORY[0x1AF44C914](a3, v8);
    JUMPOUT(0x1AF44D160);
  }
  JUMPOUT(0x1AF44C914);
}

off_t TDataManager::getVar(TDataManager *this, char *a2, char *a3, size_t a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v10;
  FILE *v12;
  FILE *v13;
  off_t v14;
  off_t v15;
  char DirSep;
  char *__filename;
  __int128 v19;
  _BYTE v20[256];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  __filename = v20;
  v19 = xmmword_1AE1418C0;
  v21 = 1;
  v7 = (char *)this + 16;
  if (*((char *)this + 39) < 0)
    v7 = *(char **)v7;
  TBuffer<char>::assign((uint64_t)&__filename, v7);
  DirSep = getDirSep();
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
  v8 = 0;
  while (a2[v8++])
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), a2, v8 - 1);
  v10 = 0;
  while (*(unsigned __int8 *)(FILE_EXTENSION + v10++))
    ;
  TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), (char *)FILE_EXTENSION, v10 - 1);
  if (*((_QWORD *)&v19 + 1) >= (unint64_t)v19)
  {
    if (v21)
    {
      DirSep = 0;
      TBuffer<char>::insert((uint64_t)&__filename, *((unint64_t *)&v19 + 1), &DirSep, 1uLL);
      --*((_QWORD *)&v19 + 1);
    }
    else if ((_QWORD)v19)
    {
      __filename[(_QWORD)v19 - 1] = 0;
    }
  }
  else
  {
    __filename[*((_QWORD *)&v19 + 1)] = 0;
  }
  v12 = fopen(__filename, "rb");
  v13 = v12;
  if (v12)
  {
    fseek(v12, 0, 2);
    v14 = ftello(v13);
    v15 = v14;
    if (a4 && v14)
    {
      fseek(v13, 0, 0);
      fread(a3, 1uLL, a4, v13);
    }
    fclose(v13);
  }
  else
  {
    v15 = 0;
  }
  if (v21 && __filename != v20 && __filename)
    MEMORY[0x1AF44D160]();
  return v15;
}

void sub_1ADCF63CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  if (a45 && a10 != v45)
  {
    if (a10)
      MEMORY[0x1AF44D160]();
  }
  _Unwind_Resume(exception_object);
}

void TDataSaver::~TDataSaver(char **this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  char *v5;
  char *v6;
  BOOL v7;

  v2 = (char *)(this + 1);
  v3 = *this;
  if (*this != (char *)(this + 1))
  {
    do
    {
      v4 = *((_QWORD *)v3 + 7);
      if (v4)
        MEMORY[0x1AF44D190](v4, 0x1000C4077774924);
      v5 = (char *)*((_QWORD *)v3 + 1);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(char **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (char *)*((_QWORD *)v3 + 2);
          v7 = *(_QWORD *)v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
  std::__tree<std::string>::destroy((uint64_t)this, this[1]);
}

void TDataSaver::load(uint64_t **this, const TDataManager *a2, char *a3, char *a4)
{
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  void *__p[2];
  char v14;
  void **v15;

  if (a4)
    v7 = a4;
  else
    v7 = a3;
  v8 = (*(uint64_t (**)(const TDataManager *, char *, _QWORD, _QWORD))(*(_QWORD *)a2 + 40))(a2, a3, 0, 0);
  if (v8)
  {
    v9 = v8;
    v10 = operator new[]();
    (*(void (**)(const TDataManager *, char *, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, a3, v10, v9);
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    v15 = __p;
    v11 = std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    *((_QWORD *)v11 + 7) = v10;
    *((_QWORD *)v11 + 8) = v9;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, v7);
    v15 = __p;
    v12 = std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(this, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v15);
    *((_QWORD *)v12 + 7) = 0;
    *((_QWORD *)v12 + 8) = 0;
  }
  if (v14 < 0)
    operator delete(__p[0]);
}

void sub_1ADCF65BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void TDataManager::~TDataManager(void **this)
{
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E5D161C0;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1AF44D190);
}

uint64_t TDataManager::isOpen(TDataManager *this)
{
  return 1;
}

uint64_t TBuffer<char>::assign(uint64_t a1, char *a2)
{
  uint64_t v4;

  TBuffer<char>::resize(a1, 0);
  v4 = 0;
  while (a2[v4++])
    ;
  return TBuffer<char>::insert(a1, 0, a2, v4 - 1);
}

_OWORD *std::__tree<std::__value_type<std::string,std::pair<char *,unsigned long>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::pair<char *,unsigned long>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::pair<char *,unsigned long>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x48uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_QWORD *)v7 + 7) = 0;
    *((_QWORD *)v7 + 8) = 0;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

BOOL quasar::WordSet::containsWord(_QWORD *a1, uint64_t a2)
{
  int v4;
  char *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _OWORD v18[17];
  void *v19[2];
  unsigned __int8 v20;
  char v21;

  v4 = *(char *)(a2 + 23);
  if (v4 >= 0)
    v5 = (char *)a2;
  else
    v5 = *(char **)a2;
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  quasar::utf8::convertToLowerCase(v5, v6, (uint64_t)v19);
  if (!v21)
  {
    memset(v18, 0, sizeof(v18));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v18);
    v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"Unable to convert string: '", 27);
    v11 = *(char *)(a2 + 23);
    if (v11 >= 0)
      v12 = a2;
    else
      v12 = *(_QWORD *)a2;
    if (v11 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 23);
    else
      v13 = *(_QWORD *)(a2 + 8);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, v12, v13);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"' to lower case, error: ", 24);
    if ((v20 & 0x80u) == 0)
      v16 = v19;
    else
      v16 = (void **)v19[0];
    if ((v20 & 0x80u) == 0)
      v17 = v20;
    else
      v17 = (uint64_t)v19[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v18);
  }
  v7 = (unsigned __int8 *)tl::expected<std::string,std::string>::value<std::string,(void *)0>((uint64_t)v19);
  v8 = std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::find<std::string>(a1, v7);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  return v8 != 0;
}

void sub_1ADCF688C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

void sub_1ADCF6930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::exception a16)
{
  tl::bad_expected_access<std::string>::~bad_expected_access(&a16);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t quasar::NgramFstConfig::NgramFstConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  void *v18[2];
  char v19;
  std::string __p;

  *(_QWORD *)(a1 + 8) = 0x3F80000000000000;
  *(_BYTE *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_QWORD *)a1 = off_1E5D352B8;
  *(_OWORD *)(a1 + 120) = 0u;
  v6 = a1 + 120;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  quasar::LmBuildConfig::readSysConfig(a1, a2, a3);
  MEMORY[0x1AF44C914](a1 + 144, "bigG");
  MEMORY[0x1AF44C914](v6, "squeezed_acceptor");
  if (*(char *)(a3 + 23) >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v7)
  {
    if (*(char *)(a3 + 23) >= 0)
      v9 = (_QWORD *)a3;
    else
      v9 = *(_QWORD **)a3;
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 46;
  quasar::SystemConfig::setPrefix(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-type");
  std::string::basic_string[abi:ne180100]<0>(v18, "fst format (default: squeezed_acceptor)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, v6, (uint64_t)v18, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = *(char *)(a3 + 23);
  if ((v10 & 0x80000000) == 0)
  {
    v11 = (_QWORD *)a3;
    if (v10 != 20)
      goto LABEL_29;
LABEL_22:
    v12 = *v11;
    v13 = v11[1];
    v14 = *((_DWORD *)v11 + 4);
    if (v12 == 0x6F737265702D6D6CLL && v13 == 0x6D2E657A696C616ELL && v14 == 1818584175)
      goto LABEL_33;
    goto LABEL_29;
  }
  if (*(_QWORD *)(a3 + 8) == 20)
  {
    v11 = *(_QWORD **)a3;
    goto LABEL_22;
  }
LABEL_29:
  std::string::basic_string[abi:ne180100]<0>(&__p, "fst-basename");
  std::string::basic_string[abi:ne180100]<0>(v18, "basename of FST file (default: bigG)");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)&__p.__r_.__value_.__l.__data_, a1 + 144, (uint64_t)v18, 0, 189, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v19 < 0)
    operator delete(v18[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_33:
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  quasar::NgramFstConfig::makeFstFileName((const void **)(a1 + 144), v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADCF6BFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void **v22;
  uint64_t v23;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::pair<std::string,std::string>::~pair(v23);
  quasar::LmBuildConfig::~LmBuildConfig(v22);
  _Unwind_Resume(a1);
}

void quasar::NgramFstConfig::makeFstFileName(const void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  std::string::size_type size;
  std::string::size_type v8;
  uint64_t v9;
  std::string::size_type v10;
  size_t v11;
  size_t v12;
  std::string *v13;
  _QWORD *v14;
  std::string *v15;
  std::string::size_type v16;
  size_t v17;
  std::string *v18;
  const void *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  std::string *v25;
  __int128 v26;
  std::string v27;
  _BYTE v28[32];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  std::string v44;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v44 = *(std::string *)a2;
  v5 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  size = v44.__r_.__value_.__l.__size_;
  if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  else
    v8 = v44.__r_.__value_.__l.__size_;
  if (!v8)
  {
    MEMORY[0x1AF44C914](&v44, "squeezed_acceptor");
    v5 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    size = v44.__r_.__value_.__l.__size_;
    v6 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
  }
  v9 = 0;
  v10 = v44.__r_.__value_.__r.__words[0];
  while (1)
  {
    v11 = strlen(&quasar::NgramFstConfig::FstOptions[v9]);
    v12 = v11;
    if (v6 < 0)
      break;
    if (v11 == v5)
    {
      v13 = &v44;
      goto LABEL_15;
    }
LABEL_16:
    v9 += 30;
    if (v9 == 360)
    {
      v42 = 0u;
      v43 = 0u;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v34 = 0u;
      v35 = 0u;
      v32 = 0u;
      v33 = 0u;
      v30 = 0u;
      v31 = 0u;
      v29 = 0u;
      memset(v28, 0, sizeof(v28));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Unsupported FST type: ", 22);
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v15 = &v44;
      else
        v15 = (std::string *)v44.__r_.__value_.__r.__words[0];
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
      else
        v16 = v44.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v15, v16);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v28);
    }
  }
  if (v11 != size)
    goto LABEL_16;
  v13 = (std::string *)v10;
  if (size == -1)
    std::string::__throw_out_of_range[abi:ne180100]();
LABEL_15:
  if (memcmp(v13, &quasar::NgramFstConfig::FstOptions[v9], v12))
    goto LABEL_16;
  if (*((char *)a1 + 23) >= 0)
    v17 = *((unsigned __int8 *)a1 + 23);
  else
    v17 = (size_t)a1[1];
  if (v17)
  {
    v18 = &v27;
    std::string::basic_string[abi:ne180100]((uint64_t)&v27, v17 + 1);
    if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
    if (*((char *)a1 + 23) >= 0)
      v19 = a1;
    else
      v19 = *a1;
    memmove(v18, v19, v17);
    *(_WORD *)((char *)&v18->__r_.__value_.__l.__data_ + v17) = 46;
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v44;
    else
      v20 = (std::string *)v44.__r_.__value_.__r.__words[0];
    if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v44.__r_.__value_.__r.__words[2]);
    else
      v21 = v44.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v27, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    *(_QWORD *)&v28[16] = *((_QWORD *)&v22->__r_.__value_.__l + 2);
    *(_OWORD *)v28 = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append((std::string *)v28, ".fst");
  }
  else
  {
    std::operator+<char>();
    v25 = std::string::append(&v27, ".fst");
    v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    *(_QWORD *)&v28[16] = *((_QWORD *)&v25->__r_.__value_.__l + 2);
    *(_OWORD *)v28 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::insert((std::string *)v28, 0, "bigG");
  }
  *(_OWORD *)a3 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)&v24->__r_.__value_.__l + 2);
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if ((v28[23] & 0x80000000) != 0)
    operator delete(*(void **)v28);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
}

uint64_t quasar::NgramFstConfig::getType(quasar::NgramFstConfig *this)
{
  return 1;
}

uint64_t quasar::NgramSrilmCountConfig::getType(quasar::NgramSrilmCountConfig *this)
{
  return 2;
}

uint64_t quasar::NgramSrilmCountConfig::NgramSrilmCountConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  std::vector<std::wstring> *v7;
  size_t v8;
  void **v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t i;
  const void **v19;
  const void **j;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  BOOL v28;
  _QWORD *v30;
  int v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char v40;
  std::string v41;
  void **v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = quasar::NgramFstConfig::NgramFstConfig(a1, a2, a3);
  *(_QWORD *)v6 = off_1E5D38678;
  *(_OWORD *)(v6 + 168) = 0u;
  v7 = (std::vector<std::wstring> *)(v6 + 168);
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 225) = 0u;
  memset(&v41, 0, sizeof(v41));
  if (*(char *)(a3 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
  if (SBYTE7(v44) < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (_QWORD *)a3;
    else
      v10 = *(_QWORD **)a3;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)v9 + v8) = 46;
  quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count-flags");
  std::string::basic_string[abi:ne180100]<0>(&v38, "SRILM ngram-count flags");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)&v41, (uint64_t)&v38, 1, 173, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  v11 = *(char *)(a3 + 23);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = (_QWORD *)a3;
    if (v11 != 20)
      goto LABEL_29;
LABEL_22:
    v13 = *v12;
    v14 = v12[1];
    v15 = *((_DWORD *)v12 + 4);
    if (v13 == 0x6F737265702D6D6CLL && v14 == 0x6D2E657A696C616ELL && v15 == 1818584175)
      goto LABEL_37;
    goto LABEL_29;
  }
  if (*(_QWORD *)(a3 + 8) == 20)
  {
    v12 = *(_QWORD **)a3;
    goto LABEL_22;
  }
LABEL_29:
  *(_BYTE *)(a1 + 240) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "arpa-lm-output-file-name");
  std::string::basic_string[abi:ne180100]<0>(&v38, "output arpa language model (relative) file name (default: \"\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, a1 + 192, (uint64_t)&v38, 0, 191, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-counts-output-file-name");
  std::string::basic_string[abi:ne180100]<0>(&v38, "output ngram counts file name (default: \"\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, a1 + 216, (uint64_t)&v38, 0, 191, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
LABEL_37:
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  quasar::trim(&v41);
  std::string::basic_string[abi:ne180100]<0>(&v38, " ");
  quasar::split((uint64_t)&v41, (uint64_t *)&v38, 1, (uint64_t)__p);
  std::vector<std::string>::__vdeallocate(v7);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 184) = v44;
  __p[1] = 0;
  *(_QWORD *)&v44 = 0;
  v42 = __p;
  __p[0] = 0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v42);
  if (v40 < 0)
    operator delete(v38);
  std::string::basic_string[abi:ne180100]<0>(__p, "-text");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v44 + 1, "-vocab");
  std::string::basic_string[abi:ne180100]<0>(&v46, "-lm");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v38, (const void **)__p, 3);
  for (i = 0; i != -72; i -= 24)
  {
    if (*((char *)&v47 + i + 7) < 0)
      operator delete(*(void **)((char *)&v46 + i));
  }
  v19 = *(const void ***)(a1 + 168);
  for (j = *(const void ***)(a1 + 176); v19 != j; v19 += 3)
  {
    if (&v39 != (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v38, v19))
    {
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-count-flags is not allowed to contain ", 44);
      v31 = *((char *)v19 + 23);
      if (v31 >= 0)
        v32 = (char *)v19;
      else
        v32 = (char *)*v19;
      if (v31 >= 0)
        v33 = *((unsigned __int8 *)v19 + 23);
      else
        v33 = (uint64_t)v19[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "-");
    if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)__p))
    {
      if (*((char *)v19 + 23) < 0)
      {
        v22 = (char *)*v19;
        v21 = (uint64_t)v19[1];
      }
      else
      {
        v21 = *((unsigned __int8 *)v19 + 23);
        v22 = (char *)v19;
      }
      v23 = &v22[v21];
      if (v21 >= 5)
      {
        v24 = v22;
        do
        {
          v25 = (char *)memchr(v24, 119, v21 - 4);
          if (!v25)
            break;
          if (*(_DWORD *)v25 == 1953067639 && v25[4] == 101)
            goto LABEL_60;
          v24 = v25 + 1;
          v21 = v23 - (_BYTE *)v24;
        }
        while (v23 - (_BYTE *)v24 > 4);
      }
      v25 = v23;
LABEL_60:
      v28 = v25 == v23 || v25 - v22 == -1;
      if (SBYTE7(v44) < 0)
        operator delete(__p[0]);
      if (!v28)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-count-flags is not allowed to write flag: ", 48);
        v35 = *((char *)v19 + 23);
        if (v35 >= 0)
          v36 = v19;
        else
          v36 = (void *)*v19;
        if (v35 >= 0)
          v37 = *((unsigned __int8 *)v19 + 23);
        else
          v37 = (uint64_t)v19[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
    }
    else if (SBYTE7(v44) < 0)
    {
      operator delete(__p[0]);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v38, v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADCF7668(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCF76B0);
}

void sub_1ADCF7680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void **v18;
  void **v19;

  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(v19);
  quasar::NgramFstConfig::~NgramFstConfig(v18);
  _Unwind_Resume(a1);
}

void sub_1ADCF76B8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCF7684);
}

void quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(void **this)
{
  void **v2;

  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  v2 = this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::NgramFstConfig::~NgramFstConfig(void **this)
{
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::NgramSrilmInterpolationConfig::getType(quasar::NgramSrilmInterpolationConfig *this)
{
  return 3;
}

uint64_t quasar::NgramSrilmInterpolationConfig::NgramSrilmInterpolationConfig(uint64_t a1, std::string *a2, uint64_t a3, uint64_t a4)
{
  std::string::size_type v7;
  std::string::size_type size;
  void **v9;
  std::string *v10;
  char v11;
  void **v12;
  int v13;
  int v14;
  int v16;
  _QWORD *v18;
  void **v19;
  uint64_t v20;
  void *__p[2];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  void *v38[2];
  char v39;
  std::string v40;
  int v41;
  void **v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)quasar::NgramFstConfig::NgramFstConfig(a1, a2, a3) = off_1E5D3A3D0;
  v42 = 0;
  v43 = 0;
  v44 = 0;
  v41 = 3;
  if (*(char *)(a4 + 23) < 0)
  {
    v7 = *(_QWORD *)(a4 + 8);
    if (v7)
    {
      std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)a4, v7);
      goto LABEL_7;
    }
  }
  else if (*(_BYTE *)(a4 + 23))
  {
    v40 = *(std::string *)a4;
    goto LABEL_7;
  }
  std::string::basic_string[abi:ne180100]<0>(&v40, "app-lm.interpolation");
LABEL_7:
  if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v40.__r_.__value_.__r.__words[2]);
  else
    size = v40.__r_.__value_.__l.__size_;
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, size + 1);
  if (SBYTE7(v22) < 0)
    v9 = (void **)__p[0];
  if (size)
  {
    if ((v40.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v40;
    else
      v10 = (std::string *)v40.__r_.__value_.__r.__words[0];
    memmove(v9, v10, size);
  }
  *(_WORD *)((char *)v9 + size) = 46;
  quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "weight-optimization-strategy");
  std::string::basic_string[abi:ne180100]<0>(v38, "Weight optimization strategy");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)&v42, (uint64_t)v38, 0, 205, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v39 < 0)
    operator delete(v38[0]);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-order");
  std::string::basic_string[abi:ne180100]<0>(v38, "N-gram order for interpolation");
  quasar::SystemConfig::Register<int>((uint64_t)a2, (const void **)__p, (uint64_t)&v41, (uint64_t)v38, 0, 205, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v39 < 0)
    operator delete(v38[0]);
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  quasar::SystemConfig::readPtree((uint64_t)a2, (uint64_t)&v40, 1u, 0);
  v11 = HIBYTE(v44);
  if (SHIBYTE(v44) < 0)
  {
    if (!v43)
      goto LABEL_39;
    if (v43 != 7)
      goto LABEL_44;
    v12 = v42;
  }
  else
  {
    if (!HIBYTE(v44))
      goto LABEL_39;
    if (HIBYTE(v44) != 7)
      goto LABEL_44;
    v12 = (void **)&v42;
  }
  v13 = *(_DWORD *)v12;
  v14 = *(_DWORD *)((char *)v12 + 3);
  if (v13 != 1718185589 || v14 != 1836216166)
  {
LABEL_44:
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unknown weight optimization strategy ", 37);
    if (v44 >= 0)
      v19 = (void **)&v42;
    else
      v19 = v42;
    if (v44 >= 0)
      v20 = HIBYTE(v44);
    else
      v20 = v43;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v19, v20);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
LABEL_39:
  v16 = v41;
  *(_DWORD *)(a1 + 168) = 0;
  *(_DWORD *)(a1 + 172) = v16;
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v40.__r_.__value_.__l.__data_);
    if ((v44 & 0x8000000000000000) == 0)
      return a1;
LABEL_43:
    operator delete(v42);
    return a1;
  }
  if (v11 < 0)
    goto LABEL_43;
  return a1;
}

void sub_1ADCF7A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void **v16;
  uint64_t v17;

  if (*(char *)(v17 - 49) < 0)
    operator delete(*(void **)(v17 - 72));
  quasar::NgramFstConfig::~NgramFstConfig(v16);
  _Unwind_Resume(a1);
}

uint64_t quasar::NgramSrilmAdaptationConfig::NgramSrilmAdaptationConfig(uint64_t a1, std::string *a2, uint64_t a3)
{
  uint64_t v6;
  std::vector<std::wstring> *v7;
  size_t v8;
  void **v9;
  _QWORD *v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t i;
  const void **v19;
  const void **j;
  uint64_t v21;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  BOOL v28;
  _QWORD *v30;
  int v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  void *v36;
  uint64_t v37;
  void *v38;
  char *v39;
  char v40;
  std::string v41;
  void **v42;
  void *__p[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = quasar::NgramFstConfig::NgramFstConfig(a1, a2, a3);
  *(_QWORD *)v6 = off_1E5D39E10;
  *(_OWORD *)(v6 + 168) = 0u;
  v7 = (std::vector<std::wstring> *)(v6 + 168);
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 225) = 0u;
  memset(&v41, 0, sizeof(v41));
  if (*(char *)(a3 + 23) >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = __p;
  std::string::basic_string[abi:ne180100]((uint64_t)__p, v8 + 1);
  if (SBYTE7(v44) < 0)
    v9 = (void **)__p[0];
  if (v8)
  {
    if (*(char *)(a3 + 23) >= 0)
      v10 = (_QWORD *)a3;
    else
      v10 = *(_QWORD **)a3;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)v9 + v8) = 46;
  quasar::SystemConfig::setPrefix(a2, (const std::string *)__p);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-adapt-flags");
  std::string::basic_string[abi:ne180100]<0>(&v38, "SRILM flags for adaptation");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, (uint64_t)&v41, (uint64_t)&v38, 1, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "arpa-lm-input-file");
  std::string::basic_string[abi:ne180100]<0>(&v38, "arpa language model to be adapted - (relative) file name (default: \"\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, a1 + 192, (uint64_t)&v38, 0, 231, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
  v11 = *(char *)(a3 + 23);
  if ((v11 & 0x80000000) == 0)
  {
    v12 = (_QWORD *)a3;
    if (v11 != 20)
      goto LABEL_33;
LABEL_26:
    v13 = *v12;
    v14 = v12[1];
    v15 = *((_DWORD *)v12 + 4);
    if (v13 == 0x6F737265702D6D6CLL && v14 == 0x6D2E657A696C616ELL && v15 == 1818584175)
      goto LABEL_37;
    goto LABEL_33;
  }
  if (*(_QWORD *)(a3 + 8) == 20)
  {
    v12 = *(_QWORD **)a3;
    goto LABEL_26;
  }
LABEL_33:
  *(_BYTE *)(a1 + 240) = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "arpa-lm-output-file-name");
  std::string::basic_string[abi:ne180100]<0>(&v38, "output arpa language model (relative) file name (default: \"\")");
  quasar::SystemConfig::Register<std::string>((uint64_t)a2, (const void **)__p, a1 + 216, (uint64_t)&v38, 0, 191, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v44) < 0)
    operator delete(__p[0]);
LABEL_37:
  quasar::SystemConfig::readPtree((uint64_t)a2, a3, 0, 0);
  quasar::trim(&v41);
  std::string::basic_string[abi:ne180100]<0>(&v38, " ");
  quasar::split((uint64_t)&v41, (uint64_t *)&v38, 1, (uint64_t)__p);
  std::vector<std::string>::__vdeallocate(v7);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 184) = v44;
  __p[1] = 0;
  *(_QWORD *)&v44 = 0;
  v42 = __p;
  __p[0] = 0;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v42);
  if (v40 < 0)
    operator delete(v38);
  std::string::basic_string[abi:ne180100]<0>(__p, "-read-text");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v44 + 1, "-read-counts");
  std::string::basic_string[abi:ne180100]<0>(&v46, "-read-dev");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v47 + 1, "-vocab");
  std::string::basic_string[abi:ne180100]<0>(&v49, "-write-lm");
  std::set<std::string>::set[abi:ne180100]((uint64_t)&v38, (const void **)__p, 5);
  for (i = 0; i != -120; i -= 24)
  {
    if (*((char *)&v50 + i + 7) < 0)
      operator delete(*(void **)((char *)&v49 + i));
  }
  v19 = *(const void ***)(a1 + 168);
  for (j = *(const void ***)(a1 + 176); v19 != j; v19 += 3)
  {
    if (&v39 != (char **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>((uint64_t)&v38, v19))
    {
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-adapt-flags is not allowed to contain ", 44);
      v31 = *((char *)v19 + 23);
      if (v31 >= 0)
        v32 = (char *)v19;
      else
        v32 = (char *)*v19;
      if (v31 >= 0)
        v33 = *((unsigned __int8 *)v19 + 23);
      else
        v33 = (uint64_t)v19[1];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)v32, v33);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "-");
    if (quasar::startsWith((unsigned __int8 *)v19, (unsigned __int8 *)__p))
    {
      if (*((char *)v19 + 23) < 0)
      {
        v22 = (char *)*v19;
        v21 = (uint64_t)v19[1];
      }
      else
      {
        v21 = *((unsigned __int8 *)v19 + 23);
        v22 = (char *)v19;
      }
      v23 = &v22[v21];
      if (v21 >= 5)
      {
        v24 = v22;
        do
        {
          v25 = (char *)memchr(v24, 119, v21 - 4);
          if (!v25)
            break;
          if (*(_DWORD *)v25 == 1953067639 && v25[4] == 101)
            goto LABEL_60;
          v24 = v25 + 1;
          v21 = v23 - (_BYTE *)v24;
        }
        while (v23 - (_BYTE *)v24 > 4);
      }
      v25 = v23;
LABEL_60:
      v28 = v25 == v23 || v25 - v22 == -1;
      if (SBYTE7(v44) < 0)
        operator delete(__p[0]);
      if (!v28)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-adapt-flags is not allowed to write flag: ", 48);
        v35 = *((char *)v19 + 23);
        if (v35 >= 0)
          v36 = v19;
        else
          v36 = (void *)*v19;
        if (v35 >= 0)
          v37 = *((unsigned __int8 *)v19 + 23);
        else
          v37 = (uint64_t)v19[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)v36, v37);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
    }
    else if (SBYTE7(v44) < 0)
    {
      operator delete(__p[0]);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v38, v39);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADCF8200(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADCF8248);
}

void sub_1ADCF8218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void **v18;
  void **v19;

  std::__tree<std::string>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(v19);
  quasar::NgramFstConfig::~NgramFstConfig(v18);
  _Unwind_Resume(a1);
}

void sub_1ADCF8250(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCF821CLL);
}

uint64_t quasar::NgramSrilmAdaptationConfig::getType(quasar::NgramSrilmAdaptationConfig *this)
{
  return 4;
}

BOOL quasar::addUnseenWords(uint64_t a1, _QWORD *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  _BOOL8 result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  signed int v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  BOOL v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __n128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;

  if (*(_BYTE *)(a1 + 100))
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 120))(*(_QWORD *)(a1 + 16)) - 5;
  else
    v4 = *(_DWORD *)(a1 + 72);
  v5 = *(_DWORD *)(a1 + 76) - 1;
  v6 = v4 - v5;
  if (v4 == v5)
    return 1;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 120))(v8);
  v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v8 + 128))(v8, 0);
  if (*(_BYTE *)(a1 + 100))
  {
    if (!v9)
      goto LABEL_32;
    v11 = 0;
    while (1)
    {
      if (v10)
      {
        v12 = v10 == *(_DWORD *)(a1 + 88) || v10 == *(_DWORD *)(a1 + 80);
        v13 = v12 || v10 == *(_DWORD *)(a1 + 84);
        v14 = v13 || v10 == *(_DWORD *)(a1 + 92);
        if (!v14 && ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
          break;
      }
      if (++v11 < v9)
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 128))(v8, v11);
      if (v9 == v11)
        goto LABEL_32;
    }
    LODWORD(v16) = v10;
    if ((v10 & 0x80000000) != 0)
      goto LABEL_32;
LABEL_37:
    v17 = *(_QWORD *)(a2[1] + 72) - *(_QWORD *)(a2[1] + 64);
    if ((int)(v17 >> 3) < 1)
      goto LABEL_71;
    v18 = logf((float)v6);
    v19 = 0;
    v37 = (v17 >> 3);
    v20 = 0xFFFFFFFFLL;
    while (2)
    {
      v38 = &unk_1E5D213B0;
      v41 = 0;
      fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)a2);
      v21 = a2[1];
      v22 = *(_QWORD *)(*(_QWORD *)(v21 + 64) + 8 * v19);
      v39 = v22;
      v40 = v21 + 8;
      for (i = v41; ; v41 = ++i)
      {
        v24 = *(_QWORD *)(v22 + 24);
        if (i >= (*(_QWORD *)(v22 + 32) - v24) >> 4)
          break;
        v25 = v24 + 16 * i;
        if (*(_DWORD *)v25 == *(_DWORD *)(a1 + 88))
        {
          if ((_DWORD)v20 != -1)
          {
            if (quasar::gLogLevel >= 1)
            {
              v58 = 0u;
              v59 = 0u;
              v56 = 0u;
              v57 = 0u;
              v54 = 0u;
              v55 = 0u;
              v52 = 0u;
              v53 = 0u;
              v50 = 0u;
              v51 = 0u;
              v48 = 0u;
              v49 = 0u;
              v46 = 0u;
              v47 = 0u;
              v44 = 0u;
              v45 = 0u;
              v43 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Encountered more than 1 arc with <unseen>", 41);
              quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
            }
            return 0;
          }
          v42.n128_u64[1] = *(_QWORD *)(v25 + 8);
          v42.n128_u32[0] = v16;
          v42.n128_u32[1] = v16;
          v42.n128_f32[2] = v18 + *(float *)(v24 + 16 * i + 8);
          fst::MutableArcIterator<fst::VectorFst<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::VectorState<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::ReverseArc<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::SetValue((uint64_t)&v38, &v42);
          i = v41;
          v22 = v39;
          v20 = v19;
        }
      }
      if (++v19 != v37)
        continue;
      break;
    }
    if ((_DWORD)v20 == -1)
    {
LABEL_71:
      if (quasar::gLogLevel >= 4)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"No arc with <unseen>", 20);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
      }
      return 1;
    }
    v26 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a2 + 40))(a2, v20);
    v27 = v6 - 1;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a2 + 256))(a2, v20, v26 + v27);
    if (*(_BYTE *)(a1 + 100))
    {
      v28 = v11 + 1;
      if (v11 + 1 < v9)
        v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 128))(v8, v11 + 1);
      if (v28 != v9)
      {
        v29 = 0;
        do
        {
          if (v10)
          {
            v30 = v10 == *(_DWORD *)(a1 + 88) || v10 == *(_DWORD *)(a1 + 80);
            v31 = v30 || v10 == *(_DWORD *)(a1 + 84);
            v32 = v31 || v10 == *(_DWORD *)(a1 + 92);
            if (!v32 && ((*(_QWORD *)(*(_QWORD *)(a1 + 48) + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
            {
              v42.n128_u32[0] = v10;
              v42.n128_u32[1] = v10;
              (*(void (**)(_QWORD *, uint64_t, __n128 *))(*a2 + 208))(a2, v20, &v42);
              ++v29;
            }
          }
          if (++v28 < v9)
            v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 128))(v8, v28);
        }
        while (v9 != v28);
        goto LABEL_81;
      }
    }
    else
    {
      v33 = *(_QWORD *)(a1 + 32);
      if (v33 > (int)v16 + 1)
      {
        v29 = 0;
        v34 = (int)v16 + 1;
        do
        {
          if ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v34 >> 6)) & (1 << v34)) != 0
            && (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v34 >> 6)) & (1 << v34)) == 0)
          {
            v42.n128_u32[0] = v34;
            v42.n128_u32[1] = v34;
            (*(void (**)(_QWORD *, uint64_t, __n128 *))(*a2 + 208))(a2, v20, &v42);
            ++v29;
            v33 = *(_QWORD *)(a1 + 32);
          }
          ++v34;
        }
        while (v33 > v34);
LABEL_81:
        v35 = quasar::gLogLevel;
        if (quasar::gLogLevel >= 4)
        {
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"numArcsAdded ", 13);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" numArcsToAdd ", 14);
          std::ostream::operator<<();
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v43);
          v35 = quasar::gLogLevel;
        }
        result = v29 == v27;
        if (v29 != v27 && v35 >= 1)
        {
          v58 = 0u;
          v59 = 0u;
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v43 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Incorrect number of arcs added. This is a bug.", 46);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
          return 0;
        }
        return result;
      }
    }
    v29 = 0;
    goto LABEL_81;
  }
  v15 = *(_QWORD *)(a1 + 32);
  if (v15)
  {
    v16 = 0;
    while ((*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8 * (v16 >> 6)) & (1 << v16)) == 0
         || (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * (v16 >> 6)) & (1 << v16)) != 0)
    {
      if (v15 == ++v16)
        goto LABEL_32;
    }
    v11 = 0;
    goto LABEL_37;
  }
LABEL_32:
  if (quasar::gLogLevel >= 1)
  {
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v48 = 0u;
    v49 = 0u;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v43 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"There are no unseen words in vocab", 34);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v43);
  }
  return 0;
}

void sub_1ADCF8870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NgramLmModel2::NgramLmModel2(uint64_t a1, uint64_t *a2, void ***a3, uint64_t *a4, const std::string **a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  quasar::LmModel2 *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  void **v20;
  std::__shared_weak_count *v21;
  const std::string *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const std::string *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  _OWORD v32[17];

  v10 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 24);
  *(_QWORD *)(a1 + 1048) = &unk_1E5D34118;
  v11 = *(_QWORD *)(v10 + 8);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v10 + 16);
  *(_QWORD *)(a1 + 1056) = v11;
  v12 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1E5D151A0, a4);
  v13 = (quasar::LmModel2 *)(v12 + 656);
  if (*a4)
    v14 = *a4 + *(_QWORD *)(*(_QWORD *)*a4 - 24);
  else
    v14 = 0;
  v15 = a4[1];
  *(_QWORD *)&v32[0] = v14;
  *((_QWORD *)&v32[0] + 1) = v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  quasar::LmModel2::LmModel2(v12 + 656, (uint64_t *)&off_1E5D151B0);
  if (*((_QWORD *)&v32[0] + 1))
  {
    v18 = (unint64_t *)(*((_QWORD *)&v32[0] + 1) + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v32[0] + 1) + 16))(*((_QWORD *)&v32[0] + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v32[0] + 1));
    }
  }
  *(_QWORD *)a1 = &off_1E5D34ED8;
  *(_QWORD *)(a1 + 1048) = &off_1E5D34F60;
  *(_QWORD *)(a1 + 656) = &off_1E5D34F18;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1001) = 0u;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  quasar::LmModel2::setModelSysConfigParams(v13, (const quasar::LmBuildConfig::ModelSysConfigParameters *)&(*a5)->__r_.__value_.__r.__words[1]);
  std::string::operator=((std::string *)(a1 + 920), *a5 + 6);
  std::string::operator=((std::string *)(a1 + 896), *a5 + 5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 1024), a2);
  v20 = *a3;
  *a3 = 0;
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)(a1 + 1040), v20);
  switch((*(unsigned int (**)(const std::string *))((*a5)->__r_.__value_.__r.__words[0] + 16))(*a5))
  {
    case 1u:
    case 3u:
      return a1;
    case 2u:
      v22 = *a5;
      v21 = (std::__shared_weak_count *)a5[1];
      *(_QWORD *)&v32[0] = v22;
      *((_QWORD *)&v32[0] + 1) = v21;
      if (v21)
      {
        p_shared_owners = (unint64_t *)&v21->__shared_owners_;
        do
          v24 = __ldxr(p_shared_owners);
        while (__stxr(v24 + 1, p_shared_owners));
      }
      std::string::operator=((std::string *)(a1 + 992), v22 + 9);
      std::string::operator=((std::string *)(a1 + 968), v22 + 8);
      *(_BYTE *)(a1 + 1016) = v22[10].__r_.__value_.__s.__data_[0];
      if (!v21)
        return a1;
      v25 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      break;
    case 4u:
      v27 = *a5;
      v21 = (std::__shared_weak_count *)a5[1];
      *(_QWORD *)&v32[0] = v27;
      *((_QWORD *)&v32[0] + 1) = v21;
      if (v21)
      {
        v28 = (unint64_t *)&v21->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      std::string::operator=((std::string *)(a1 + 968), v27 + 9);
      *(_BYTE *)(a1 + 1016) = v27[10].__r_.__value_.__s.__data_[0];
      if (!v21)
        return a1;
      v30 = (unint64_t *)&v21->__shared_owners_;
      do
        v26 = __ldaxr(v30);
      while (__stlxr(v26 - 1, v30));
      break;
    default:
      memset(v32, 0, sizeof(v32));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"Unsupported LmBuildConfig type", 30);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v32);
  }
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  return a1;
}

void sub_1ADCF8C00(_Unwind_Exception *a1)
{
  void **v1;
  quasar::LmModel2 *v2;
  uint64_t v3;
  uint64_t v4;
  void ***v5;

  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](v5, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4);
  quasar::NgramSrilmCountConfig::NgramCountSysConfigParameters::~NgramCountSysConfigParameters(v1 + 118);
  std::pair<std::string,std::string>::~pair(v3);
  quasar::LmModel2::~LmModel2(v2, (uint64_t *)&off_1E5D151B0);
  quasar::FstLmHandle::~FstLmHandle((quasar::FstLmHandle *)v1, (uint64_t *)&off_1E5D151A0);
  _Unwind_Resume(a1);
}

uint64_t quasar::NgramLmModel2::NgramLmModel2(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v13;

  v4 = *a2 + *(_QWORD *)(*(_QWORD *)*a2 - 24);
  *(_QWORD *)(a1 + 1048) = &unk_1E5D34118;
  v5 = *(_QWORD *)(v4 + 8);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 1056) = v5;
  v6 = quasar::FstLmHandle::FstLmHandle(a1, (uint64_t *)&off_1E5D151A0, a2) + 656;
  v7 = (std::__shared_weak_count *)a2[1];
  v13 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  quasar::LmModel2::LmModel2(v6, (uint64_t *)&off_1E5D151B0);
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)a1 = &off_1E5D34ED8;
  *(_QWORD *)(a1 + 1048) = &off_1E5D34F60;
  *(_QWORD *)(a1 + 656) = &off_1E5D34F18;
  *(_BYTE *)(a1 + 888) = 0;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 944) = 0u;
  *(_OWORD *)(a1 + 960) = 0u;
  *(_OWORD *)(a1 + 976) = 0u;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1001) = 0u;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  *(_QWORD *)(a1 + 1032) = 0;
  return a1;
}

void sub_1ADCF8DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::FstLmHandle *v9;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  quasar::FstLmHandle::~FstLmHandle(v9, (uint64_t *)&off_1E5D151A0);
  _Unwind_Resume(a1);
}

uint64_t quasar::NgramLmModel2::writeImpl(const void **a1, uint64_t a2)
{
  size_t v4;
  std::string *v5;
  const void *v6;
  void **v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  _QWORD *v11;
  char v12;
  uint64_t v13;
  std::string::size_type size;
  std::string __p;
  char v17;
  _QWORD *v18;
  void *v19[2];
  unsigned __int8 v20;
  std::string v21;
  _QWORD v22[3];
  char v23;

  if (*(char *)(a2 + 23) >= 0)
    v4 = *(unsigned __int8 *)(a2 + 23);
  else
    v4 = *(_QWORD *)(a2 + 8);
  v5 = &v21;
  std::string::basic_string[abi:ne180100]((uint64_t)&v21, v4 + 1);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v5 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = (const void *)a2;
    else
      v6 = *(const void **)a2;
    memmove(v5, v6, v4);
  }
  *(_WORD *)((char *)&v5->__r_.__value_.__l.__data_ + v4) = 47;
  quasar::NgramFstConfig::makeFstFileName(a1 + 115, (uint64_t)(a1 + 112), (uint64_t)v19);
  if ((v20 & 0x80u) == 0)
    v7 = v19;
  else
    v7 = (void **)v19[0];
  if ((v20 & 0x80u) == 0)
    v8 = v20;
  else
    v8 = (std::string::size_type)v19[1];
  v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  quasar::filesystem::Path::Path(v22, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v20 < 0)
    operator delete(v19[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  v11 = (_QWORD *)operator new();
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v22, &__p);
  std::ofstream::basic_ofstream(v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = v11;
  v12 = quasar::NgramLmModel2::writeFst((uint64_t)a1, (uint64_t *)&v18);
  (*(void (**)(_QWORD *))(*v11 + 8))(v11);
  if ((v12 & 1) == 0)
  {
    v13 = 0;
    goto LABEL_38;
  }
  quasar::NgramLmModel2::getArpaFileName((uint64_t)a1, a2, &v21);
  quasar::filesystem::Path::Path(&__p, (__int128 *)&v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)&__p, &v21);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
  {
    size = v21.__r_.__value_.__l.__size_;
    operator delete(v21.__r_.__value_.__l.__data_);
    if (!size)
    {
LABEL_34:
      v13 = 1;
      goto LABEL_36;
    }
  }
  else if (!*((_BYTE *)&v21.__r_.__value_.__s + 23))
  {
    goto LABEL_34;
  }
  if (quasar::NgramLmModel2::writeArpa((quasar::NgramLmModel2 *)a1, (const quasar::filesystem::Path *)&__p))
    goto LABEL_34;
  v13 = 0;
LABEL_36:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E5D343A0;
  if (v17 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
LABEL_38:
  v22[0] = &unk_1E5D343A0;
  if (v23 < 0)
    operator delete((void *)v22[1]);
  return v13;
}

void sub_1ADCF902C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a18 < 0)
    operator delete(__p);
  *(_QWORD *)(v32 - 64) = &unk_1E5D343A0;
  if (*(char *)(v32 - 33) < 0)
    operator delete(*(void **)(v32 - 56));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NgramLmModel2::writeFst(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::string __p;
  std::string v7;
  int v8;

  v2 = *(_QWORD *)(a1 + 1024);
  v3 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v7 = __p;
  v8 = 16777217;
  v4 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *))(*(_QWORD *)v2 + 96))(v2, v3, &v7);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1ADCF91DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::NgramLmModel2::getArpaFileName(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string::size_type v5;
  size_t v6;
  std::string *v7;
  void **v8;
  int v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  size_t v14;
  void **v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  std::string v33;

  if (*(_BYTE *)(a1 + 1016))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      v5 = *(_QWORD *)(a2 + 8);
      if (v5)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)a2, v5);
        goto LABEL_11;
      }
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      *(_QWORD *)&v17 = *(_QWORD *)(a2 + 16);
      goto LABEL_11;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "/current");
LABEL_11:
    if (*(char *)(a1 + 991) < 0)
    {
      if (*(_QWORD *)(a1 + 976))
        goto LABEL_13;
    }
    else if (*(_BYTE *)(a1 + 991))
    {
LABEL_13:
      if ((SBYTE7(v17) & 0x80u) == 0)
        v6 = BYTE7(v17);
      else
        v6 = (size_t)__p[1];
      v7 = &v33;
      std::string::basic_string[abi:ne180100]((uint64_t)&v33, v6 + 1);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v7 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if (v6)
      {
        if ((SBYTE7(v17) & 0x80u) == 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        memmove(v7, v8, v6);
      }
      *(_WORD *)((char *)&v7->__r_.__value_.__l.__data_ + v6) = 47;
      v9 = *(char *)(a1 + 991);
      if (v9 >= 0)
        v10 = (const std::string::value_type *)(a1 + 968);
      else
        v10 = *(const std::string::value_type **)(a1 + 968);
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a1 + 991);
      else
        v11 = *(_QWORD *)(a1 + 976);
      v12 = std::string::append(&v33, v10, v11);
      v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      a3[2] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
      *(_OWORD *)a3 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
LABEL_43:
      if (SBYTE7(v17) < 0)
        operator delete(__p[0]);
      return;
    }
    if ((SBYTE7(v17) & 0x80u) == 0)
      v14 = BYTE7(v17);
    else
      v14 = (size_t)__p[1];
    std::string::basic_string[abi:ne180100]((uint64_t)a3, v14 + 8);
    if (*((char *)a3 + 23) < 0)
      a3 = (_QWORD *)*a3;
    if (v14)
    {
      if ((SBYTE7(v17) & 0x80u) == 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      memmove(a3, v15, v14);
    }
    strcpy((char *)a3 + v14, "/lm.arpa");
    goto LABEL_43;
  }
  if (quasar::gLogLevel >= 4)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Config not set to write ARPA file", 33);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  std::string::basic_string[abi:ne180100]<0>(a3, "");
}

void sub_1ADCF9460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&__p);
  _Unwind_Resume(a1);
}

BOOL quasar::NgramLmModel2::writeArpa(quasar::NgramLmModel2 *this, const quasar::filesystem::Path *a2)
{
  void **v3;
  int v4;
  _BOOL8 v5;
  BOOL v6;
  _BYTE v8[104];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (*(_QWORD *)(*((_QWORD *)this + 130) + 48))
  {
    kaldi::quasar::Vocab::OOvWord(a2, (std::string *)__p);
    if ((SBYTE7(v10) & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    File::File((File *)v8, (const char *)v3, "w", 0);
    if (SBYTE7(v10) < 0)
      operator delete(__p[0]);
    v4 = (*(uint64_t (**)(_QWORD, _BYTE *))(**(_QWORD **)(*((_QWORD *)this + 130) + 48) + 248))(*(_QWORD *)(*((_QWORD *)this + 130) + 48), v8);
    v5 = v4 != 0;
    if (v4)
      v6 = 1;
    else
      v6 = quasar::gLogLevel < 1;
    if (!v6)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      *(_OWORD *)__p = 0u;
      v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ARPA LM write error", 19);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    File::close((File *)v8);
    File::~File((File *)v8);
  }
  else
  {
    if (quasar::gLogLevel >= 1)
    {
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      *(_OWORD *)__p = 0u;
      v10 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngramCountCtx is null", 21);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    return 0;
  }
  return v5;
}

void sub_1ADCF9624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&__p);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'quasar::NgramLmModel2::writeImpl(uint64_t a1, uint64_t a2)
{
  return quasar::NgramLmModel2::writeImpl((const void **)(a1 - 656), a2);
}

void quasar::NgramLmModel2::AddTo(uint64_t a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  quasar::FstLmHandle::AddTo(a1, a2, a3, a4, a5, a6, a7, a8);
}

void `virtual thunk to'quasar::NgramLmModel2::AddTo(_QWORD *a1, _QWORD *a2, uint64_t *a3, unsigned int a4, int a5, char a6, int a7, uint64_t a8)
{
  quasar::FstLmHandle::AddTo((uint64_t)a1 + *(_QWORD *)(*a1 - 32), a2, a3, a4, a5, a6, a7, a8);
}

BOOL quasar::NgramLmModel2::writeArpa(quasar::NgramLmModel2 *a1, uint64_t *a2)
{
  _BOOL8 v4;
  _QWORD *v5;
  void **v6;
  double v7;
  uint64_t v9;
  _QWORD v10[3];
  char v11;
  _BYTE v12[63];
  std::string v13;
  void *__p[2];
  _BYTE v15[408];
  _QWORD v16[20];

  v16[19] = *MEMORY[0x1E0C80C00];
  quasar::filesystem::TemporaryDirectoryPath::TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)v12);
  std::string::basic_string[abi:ne180100]<0>(__p, "arpa");
  quasar::filesystem::Path::operator/((uint64_t)v12, (uint64_t)__p, v10);
  if ((v15[7] & 0x80000000) != 0)
    operator delete(__p[0]);
  v4 = quasar::NgramLmModel2::writeArpa(a1, (const quasar::filesystem::Path *)v10);
  if (v4)
  {
    kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v10, &v13);
    std::ifstream::basic_ifstream(__p);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    *(_DWORD *)((char *)&__p[1] + *((_QWORD *)__p[0] - 3)) &= ~0x1000u;
    v5 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>(__p, &v9);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      v6 = 0;
    else
      v6 = __p;
    v7 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::ostream_iterator<unsigned char,char,std::char_traits<char>>>((uint64_t)v6, v9, 0, *a2, 0, &v13);
    __p[0] = *(void **)MEMORY[0x1E0DE4F40];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F40] + 24);
    MEMORY[0x1AF44CA70](v15, v7);
    std::istream::~istream();
    MEMORY[0x1AF44D094](v16);
  }
  v10[0] = &unk_1E5D343A0;
  if (v11 < 0)
    operator delete((void *)v10[1]);
  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)v12);
  return v4;
}

void sub_1ADCF985C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  quasar::filesystem::TemporaryDirectoryPath::~TemporaryDirectoryPath((quasar::filesystem::TemporaryDirectoryPath *)&a19);
  _Unwind_Resume(a1);
}

void sub_1ADCF98D8()
{
  JUMPOUT(0x1ADCF98D0);
}

void quasar::NgramLmModel2::getMetadata(quasar::NgramLmModel2 *this@<X0>, quasar::PTree *a2@<X8>)
{
  _BYTE v4[64];
  void *v5[2];
  char v6;

  quasar::LmModel2::getMetadata((quasar::NgramLmModel2 *)((char *)this + 656), a2);
  std::string::basic_string[abi:ne180100]<0>(v5, "fst-basename");
  quasar::PTree::PTree(v4, (char *)this + 920);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v5, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0)
    operator delete(v5[0]);
  std::string::basic_string[abi:ne180100]<0>(v5, "fst-type");
  quasar::PTree::PTree(v4, (char *)this + 896);
  quasar::PTree::putChild((uint64_t)a2, (uint64_t)v5, (uint64_t)v4, 1);
  quasar::PTree::~PTree((quasar::PTree *)v4);
  if (v6 < 0)
    operator delete(v5[0]);
}

void sub_1ADCF99A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  quasar::PTree *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  quasar::PTree::~PTree((quasar::PTree *)va);
  if (*(char *)(v3 - 17) < 0)
    operator delete(*(void **)(v3 - 40));
  quasar::PTree::~PTree(v2);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'quasar::NgramLmModel2::getMetadata(quasar::NgramLmModel2 *this@<X0>, quasar::PTree *a2@<X8>)
{
  quasar::NgramLmModel2::getMetadata((quasar::NgramLmModel2 *)((char *)this - 656), a2);
}

void quasar::_populateNgramCountArgv(void **a1, uint64_t **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 != v3)
  {
    v5 = (uint64_t)(a1 + 2);
    do
    {
      v6 = v2;
      if (*((char *)v2 + 23) < 0)
        v6 = (uint64_t *)*v2;
      v8 = a1[1];
      v7 = (unint64_t)a1[2];
      if ((unint64_t)v8 >= v7)
      {
        v10 = ((char *)v8 - (_BYTE *)*a1) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v11 = v7 - (_QWORD)*a1;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = v6;
        v9 = v15 + 8;
        v17 = (char *)*a1;
        v16 = (char *)a1[1];
        if (v16 != *a1)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = (char *)*a1;
        }
        *a1 = v15;
        a1[1] = v9;
        a1[2] = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8 = v6;
        v9 = v8 + 1;
      }
      a1[1] = v9;
      v2 += 3;
    }
    while (v2 != v3);
  }
}

uint64_t (***quasar::_populateNgramCountContext(std::string **a1, const std::string *a2, std::string *__str, quasar::LmData *a4, int a5))()
{
  int v9;
  std::string *v10;
  uint64_t *SymbolTableData;
  uint64_t Sentences;
  std::string *v13;
  _QWORD *v14;
  std::string::size_type size;
  uint64_t (***v16)();
  uint64_t v17;
  uint64_t (***v18)();
  uint64_t v19;
  uint64_t (***result)();
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  _QWORD *v24;
  std::string::size_type v25;
  uint64_t (***v26)();
  uint64_t v27;
  uint64_t (***v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t (**v31)();
  uint64_t v32;
  uint64_t (***v33)();
  uint64_t (**v34)();
  uint64_t v35;
  uint64_t (***v36)();
  uint64_t (**v37)();
  uint64_t v38;
  uint64_t *v39;
  uint64_t (***v40)();
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v9 = *((_DWORD *)a4 + 26);
  v10 = *a1;
  LODWORD((*a1)[3].__r_.__value_.__r.__words[2]) = v9;
  if ((v9 | 2) == 2)
  {
    std::string::operator=(v10 + 4, a2);
    v10 = *a1;
  }
  std::string::operator=(v10 + 6, __str);
  SymbolTableData = (uint64_t *)quasar::LmData::getSymbolTableData(a4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](&(*a1)[1].__r_.__value_.__l.__size_, SymbolTableData);
  Sentences = quasar::LmData::getSentences((uint64_t)a4, 0);
  v13 = *a1;
  v14 = (_QWORD *)operator new();
  v37 = &off_1E5D3E2D0;
  v38 = Sentences;
  v40 = &v37;
  v34 = &off_1E5D3E328;
  v35 = Sentences;
  v36 = &v34;
  v31 = &off_1E5D3E380;
  v32 = Sentences;
  v33 = &v31;
  quasar::lm::Generator<quasar::lm::TokenStringAndCount>::Generator(v14, (uint64_t)&v37, (uint64_t)&v34, (uint64_t)&v31);
  size = v13->__r_.__value_.__l.__size_;
  v13->__r_.__value_.__l.__size_ = (std::string::size_type)v14;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  v16 = v33;
  if (v33 == &v31)
  {
    v17 = 4;
    v16 = &v31;
  }
  else
  {
    if (!v33)
      goto LABEL_10;
    v17 = 5;
  }
  (*v16)[v17]();
LABEL_10:
  v18 = v36;
  if (v36 == &v34)
  {
    v19 = 4;
    v18 = &v34;
  }
  else
  {
    if (!v36)
      goto LABEL_15;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_15:
  result = v40;
  if (v40 == &v37)
  {
    v21 = 4;
    result = &v37;
  }
  else
  {
    if (!v40)
      goto LABEL_20;
    v21 = 5;
  }
  result = (uint64_t (***)())(*result)[v21]();
LABEL_20:
  if (!a5)
    return result;
  v22 = quasar::LmData::getSentences((uint64_t)a4, 1u);
  v23 = *a1;
  v24 = (_QWORD *)operator new();
  v37 = &off_1E5D3E3D8;
  v38 = v22;
  v39 = SymbolTableData;
  v40 = &v37;
  v34 = &off_1E5D3E430;
  v35 = v22;
  v36 = &v34;
  v31 = &off_1E5D3E488;
  v32 = v22;
  v33 = &v31;
  quasar::lm::Generator<quasar::lm::TokenStringAndCount>::Generator(v24, (uint64_t)&v37, (uint64_t)&v34, (uint64_t)&v31);
  v25 = v23->__r_.__value_.__r.__words[2];
  v23->__r_.__value_.__r.__words[2] = (std::string::size_type)v24;
  if (v25)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v25 + 8))(v25);
  v26 = v33;
  if (v33 == &v31)
  {
    v27 = 4;
    v26 = &v31;
  }
  else
  {
    if (!v33)
      goto LABEL_28;
    v27 = 5;
  }
  (*v26)[v27]();
LABEL_28:
  v28 = v36;
  if (v36 == &v34)
  {
    v29 = 4;
    v28 = &v34;
  }
  else
  {
    if (!v36)
      goto LABEL_33;
    v29 = 5;
  }
  (*v28)[v29]();
LABEL_33:
  result = v40;
  if (v40 == &v37)
  {
    v30 = 4;
    result = &v37;
  }
  else
  {
    if (!v40)
      return result;
    v30 = 5;
  }
  return (uint64_t (***)())(*result)[v30]();
}

void sub_1ADCF9E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  uint64_t v21;
  char *v22;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;

  v24 = a13;
  if (a13 == v22)
  {
    v25 = 4;
    v24 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  v26 = a17;
  if (a17 == &a14)
  {
    v27 = 4;
    v26 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v27 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v26 + 8 * v27))();
LABEL_11:
  v28 = a21;
  if (a21 == &a18)
  {
    v29 = 4;
    v28 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_16;
    v29 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v28 + 8 * v29))();
LABEL_16:
  MEMORY[0x1AF44D190](v21, 0x10A1C4014ADDB9CLL);
  _Unwind_Resume(a1);
}

uint64_t quasar::_generateArpaLm(quasar::LmData *a1, std::string **a2, uint64_t **a3, const std::string *a4, _DWORD *a5, const kaldi::Timer *a6, uint64_t **a7)
{
  double *v13;
  srilm::NgramCountContext *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  void *__p[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  void **v39;

  if (*((_DWORD *)a1 + 26) >= 3u)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "other input types not yet implemented");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  quasar::_populateNgramCountArgv(&v19, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::_populateNgramCountContext(a2, a4, (std::string *)__p, a1, 0);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  (*a2)->__r_.__value_.__s.__data_[0] = 1;
  std::string::basic_string[abi:ne180100]<0>(__p, "ngram-count");
  v39 = __p;
  v13 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v39);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v18, a6, v13 + 7);
  if (SBYTE7(v23) < 0)
    operator delete(__p[0]);
  if (srilm::ngram_count((srilm *)((unint64_t)(v20 - (_BYTE *)v19) >> 3), (uint64_t)v19, &(*a2)->__r_.__value_.__l.__data_, v14))
  {
    if (quasar::gLogLevel >= 1)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-count failed with status: ", 32);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
LABEL_9:
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v18);
    v15 = 0;
    goto LABEL_20;
  }
  if (!(*a2)[2].__r_.__value_.__r.__words[0])
  {
    if (quasar::gLogLevel >= 1)
    {
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-count failed to generate lm", 33);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    goto LABEL_9;
  }
  if (quasar::gLogLevel >= 4)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ngram-count", 11);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v18);
  v16 = 0;
  do
  {
    if ((*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)(*a2)[2].__r_.__value_.__l.__data_
                                                                    + 456))((*a2)[2].__r_.__value_.__r.__words[0], v16))
    {
      *a5 = v16;
    }
    v16 = (v16 + 1);
  }
  while ((_DWORD)v16 != 10);
  if (quasar::gLogLevel > 3)
  {
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Built ngram with order ", 23);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v15 = 1;
LABEL_20:
  if (v19)
  {
    v20 = v19;
    operator delete(v19);
  }
  return v15;
}

uint64_t quasar::_adaptArpaLm(quasar::LmData *a1, std::string **a2, uint64_t **a3, std::string *a4, _DWORD *a5, const kaldi::Timer *a6, uint64_t **a7)
{
  uint64_t LGFstName;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string::size_type size;
  uint64_t v18;
  int v19;
  unsigned __int8 *v20;
  double *v21;
  srilm::NgramCountContext *v22;
  uint64_t v23;
  double v25;
  uint64_t v27;
  _BYTE v28[24];
  void *v29;
  _BYTE *v30;
  uint64_t v31;
  void *__p[2];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  void **v49;

  if (*((_DWORD *)a1 + 26) >= 3u)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "other input types not yet implemented");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v29 = 0;
  v30 = 0;
  v31 = 0;
  quasar::_populateNgramCountArgv(&v29, a3);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::_populateNgramCountContext(a2, (const std::string *)__p, a4, a1, 1);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  (*a2)->__r_.__value_.__s.__data_[0] = 1;
  LGFstName = quasar::PMBuilder::getLGFstName(a1);
  v14 = *(unsigned __int8 *)(LGFstName + 23);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(LGFstName + 8);
  if (!v14)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ARPA vocabulary file not set. Hint: check lm-personalize.data.train-arpa-lm-file", 80);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v15 = quasar::PMBuilder::getLGFstName(a1);
  v16 = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  if ((v16 & 0x80u) == 0)
    size = HIBYTE(a4->__r_.__value_.__r.__words[2]);
  else
    size = a4->__r_.__value_.__l.__size_;
  v18 = *(unsigned __int8 *)(v15 + 23);
  v19 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v18 = *(_QWORD *)(v15 + 8);
  if (size == v18)
  {
    if (v19 >= 0)
      v20 = (unsigned __int8 *)v15;
    else
      v20 = *(unsigned __int8 **)v15;
    if ((v16 & 0x80) != 0)
    {
      if (!memcmp(a4->__r_.__value_.__l.__data_, v20, a4->__r_.__value_.__l.__size_))
        goto LABEL_25;
    }
    else
    {
      if (!*((_BYTE *)&a4->__r_.__value_.__s + 23))
        goto LABEL_25;
      while (a4->__r_.__value_.__s.__data_[0] == *v20)
      {
        a4 = (std::string *)((char *)a4 + 1);
        ++v20;
        if (!--v16)
          goto LABEL_25;
      }
    }
  }
  if (quasar::gLogLevel >= 4)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Input ARPA file doesn't match LmData. Hint: check lm-personalize.data.train-arpa-lm-file", 88);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
LABEL_25:
  std::string::basic_string[abi:ne180100]<0>(__p, "residual-adapt");
  v49 = __p;
  v21 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a7, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v49);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v28, a6, v21 + 7);
  if (SBYTE7(v33) < 0)
    operator delete(__p[0]);
  if (srilm::residual_adapt((srilm *)((unint64_t)(v30 - (_BYTE *)v29) >> 3), (uint64_t)v29, &(*a2)->__r_.__value_.__l.__data_, v22))
  {
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"residual-adapt failed with status: ", 35);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
LABEL_30:
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v28);
    v23 = 0;
    goto LABEL_31;
  }
  if (!(*a2)[2].__r_.__value_.__r.__words[0])
  {
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"residual-adapt failed to generate lm", 36);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    goto LABEL_30;
  }
  v25 = *(double *)&(*a2)[3].__r_.__value_.__l.__size_;
  if (v25 < 0.0 || v25 >= 1.0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v47 = 0u;
      v48 = 0u;
      v45 = 0u;
      v46 = 0u;
      v43 = 0u;
      v44 = 0u;
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"residual-adapt failed to determine eta", 38);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    goto LABEL_30;
  }
  if (quasar::gLogLevel >= 4)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"residual-adapt: eta: ", 21);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v28);
  v27 = 0;
  do
  {
    if ((*(uint64_t (**)(std::string::size_type, uint64_t))(*(_QWORD *)(*a2)[2].__r_.__value_.__l.__data_
                                                                    + 456))((*a2)[2].__r_.__value_.__r.__words[0], v27))
    {
      *a5 = v27;
    }
    v27 = (v27 + 1);
  }
  while ((_DWORD)v27 != 10);
  if (quasar::gLogLevel > 3)
  {
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Built ngram with order ", 23);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  v23 = 1;
LABEL_31:
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  return v23;
}

void sub_1ADCFA874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)va);
  JUMPOUT(0x1ADCFA888);
}

void sub_1ADCFA884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)&a9);
  JUMPOUT(0x1ADCFA8C4);
}

void sub_1ADCFA898(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCFA8C4);
}

void sub_1ADCFA8C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::generateNgramCountsStr(uint64_t ***a1@<X0>, const quasar::NgramSrilmCountConfig *a2@<X1>, std::string *a3@<X8>)
{
  quasar::generateNgramCountsStr(*a1, a2, a3);
}

void quasar::generateNgramCountsStr(uint64_t **this@<X0>, const quasar::NgramSrilmCountConfig *a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6;
  srilm::NgramCountContext *v7;
  std::string __p;
  std::string *v9;
  void *v10;
  _BYTE *v11;
  uint64_t v12;
  void *v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;

  if ((*((_DWORD *)a2 + 26) | 2) != 2)
  {
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)v13 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v13, "Ngram counts can only be generated from plain text or phrase counts");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v13);
  }
  v10 = 0;
  v11 = 0;
  v12 = 0;
  quasar::_populateNgramCountArgv(&v10, this + 21);
  v6 = operator new();
  *(_QWORD *)(v6 + 160) = 0;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 144) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  srilm::NgramCountContext::NgramCountContext((srilm::NgramCountContext *)v6);
  v9 = (std::string *)v6;
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  quasar::_populateNgramCountContext(&v9, (const std::string *)v13, &__p, a2, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SBYTE7(v14) < 0)
    operator delete(v13[0]);
  *(_BYTE *)v6 = 0;
  if (srilm::ngram_count((srilm *)((unint64_t)(v11 - (_BYTE *)v10) >> 3), (uint64_t)v10, (char **)v6, v7))
  {
    if (quasar::gLogLevel >= 1)
    {
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)v13 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"ngram-count failed with status: ", 32);
      std::ostream::operator<<();
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v13);
    }
    std::string::basic_string[abi:ne180100]<0>(a3, "");
  }
  else if (*(char *)(v6 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v6 + 56), *(_QWORD *)(v6 + 64));
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)(v6 + 56);
    a3->__r_.__value_.__r.__words[2] = *(_QWORD *)(v6 + 72);
  }
  srilm::NgramCountContext::~NgramCountContext((void **)v6);
  MEMORY[0x1AF44D190]();
  if (v10)
  {
    v11 = v10;
    operator delete(v10);
  }
}

void sub_1ADCFAB24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void **a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](&a16, 0);
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::_buildFst(quasar::lm::SymbolTableData *a1, uint64_t a2, void ***a3, int a4, uint64_t a5, int a6, const kaldi::Timer *a7, uint64_t **a8, float a9, uint64_t *a10, _QWORD *a11, char a12)
{
  double *v21;
  double *v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  const void *v30;
  _QWORD *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  double *v35;
  LMThreads *v36;
  double *v37;
  double *v38;
  double *v39;
  double *v40;
  double *v41;
  double *v42;
  _BOOL4 v43;
  double *v44;
  double *v45;
  double *v46;
  double *v47;
  int v48;
  uint64_t v50;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t *v67;
  _QWORD *v68;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  double *v74;
  double *v75;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  void *__p[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  void *v107;
  std::__shared_weak_count *v108;
  void **v109;
  std::__shared_weak_count *v110;
  _OWORD *v111[3];
  uint64_t v112[3];

  std::string::basic_string[abi:ne180100]<0>(__p, "Arpa2Fst");
  v111[0] = __p;
  v21 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v21 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conversion");
  v109 = __p;
  v22 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v22 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  v109 = 0;
  v110 = 0;
  if ((a12 & 1) != 0)
  {
    quasar::lm::SymbolTableData::generateTrainToBigGIdRemapping(a1, __p);
    v109 = (void **)__p[0];
    v110 = (std::__shared_weak_count *)__p[1];
    v23 = *((_QWORD *)a1 + 2);
    v107 = __p[0];
    v108 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v24 = (unint64_t *)((char *)__p[1] + 8);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
    }
  }
  else
  {
    v23 = *((_QWORD *)a1 + 2);
    v107 = 0;
    v108 = 0;
  }
  v26 = quasar::lm::arpa2fst::ConvertToFST::create((quasar::lm *)1, v23, (uint64_t *)&v107, 0, 0, 0);
  v27 = v108;
  if (v108)
  {
    p_shared_owners = (unint64_t *)&v108->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (const void *)(**(uint64_t (***)(uint64_t, uint64_t))v26)(v26, a2);
  if (v30)
  else
    v31 = 0;
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Arpa2Fst", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26);
  v32 = v110;
  if (v110)
  {
    v33 = (unint64_t *)&v110->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  if (a6)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "free");
    v111[0] = __p;
    v35 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
    quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v35 + 7);
    if (SBYTE7(v91) < 0)
      operator delete(__p[0]);
    std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100](a3, 0);
    std::shared_ptr<quasar::LmeData>::reset[abi:ne180100](a1);
    LMThreads::freeThread(v36);
    if (quasar::gLogLevel >= 4)
    {
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"free", 4);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "MinimizeEncoded");
  v111[0] = __p;
  v37 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v37 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "optimization");
  v109 = __p;
  v38 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v38 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  fst::MinimizeEncoded<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v31, 0.00097656);
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"MinimizeEncoded", 15);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  std::string::basic_string[abi:ne180100]<0>(__p, "ArcSort1");
  v111[0] = __p;
  v39 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v39 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "optimization");
  v109 = __p;
  v40 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v40 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v31);
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ArcSort1", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  std::string::basic_string[abi:ne180100]<0>(__p, "addUnseenWords");
  v111[0] = __p;
  v41 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v41 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conversion");
  v109 = __p;
  v42 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v42 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  v43 = quasar::addUnseenWords((uint64_t)a1, v31);
  if (v43)
  {
    if (quasar::gLogLevel >= 4)
    {
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"addUnseenWords", 14);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Add unseen words failed", 23);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  if (!v43)
  {
    if (v31)
      (*(void (**)(_QWORD *))(*v31 + 8))(v31);
    return 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ArcSort2");
  v111[0] = __p;
  v44 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v44 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "optimization");
  v109 = __p;
  v45 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v45 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(v31);
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ArcSort2", 8);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  std::string::basic_string[abi:ne180100]<0>(__p, "Convert");
  v111[0] = __p;
  v46 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v46 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conversion");
  v109 = __p;
  v47 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v47 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  v48 = *(unsigned __int8 *)(a5 + 23);
  if (*(char *)(a5 + 23) < 0)
  {
    v50 = *(_QWORD *)(a5 + 8);
    if (v50 == 5)
    {
      if (**(_DWORD **)a5 == 1936617315 && *(_BYTE *)(*(_QWORD *)a5 + 4) == 116)
        goto LABEL_135;
      v50 = *(_QWORD *)(a5 + 8);
      if (v50 == 5)
      {
        if (**(_DWORD **)a5 == 1634887534 && *(_BYTE *)(*(_QWORD *)a5 + 4) == 109)
        {
LABEL_121:
          std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
          std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
          v63 = (std::__shared_weak_count *)__p[1];
          if (!__p[1])
            goto LABEL_157;
          v64 = (unint64_t *)((char *)__p[1] + 8);
          do
            v65 = __ldaxr(v64);
          while (__stlxr(v65 - 1, v64));
LABEL_147:
          if (!v65)
          {
            ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
            std::__shared_weak_count::__release_weak(v63);
          }
LABEL_157:
          if (!v31)
            goto LABEL_159;
          goto LABEL_158;
        }
        if ((v48 & 0x80) == 0)
          goto LABEL_129;
      }
    }
    else if (v50 == 6 && **(_DWORD **)a5 == 1952671094 && *(_WORD *)(*(_QWORD *)a5 + 4) == 29295)
    {
      goto LABEL_139;
    }
    if (v50 == 15)
    {
      if (**(_QWORD **)a5 == 0x75715F6D6172676ELL && *(_QWORD *)(*(_QWORD *)a5 + 7) == 0x64657A69746E6175)
        goto LABEL_144;
      v50 = *(_QWORD *)(a5 + 8);
    }
    if (v50 != 18)
      goto LABEL_129;
    v55 = *(_QWORD *)a5;
    goto LABEL_103;
  }
  if (*(unsigned __int8 *)(a5 + 23) > 0xEu)
  {
    if (v48 != 15)
    {
      v55 = a5;
      if (v48 != 18)
        goto LABEL_129;
LABEL_103:
      v56 = *(_QWORD *)v55;
      v57 = *(_QWORD *)(v55 + 8);
      v58 = *(unsigned __int16 *)(v55 + 16);
      if (v56 == 0x5F64656375646572 && v57 == 0x637564736E617274 && v58 == 29285)
      {
        std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
        goto LABEL_157;
      }
      goto LABEL_129;
    }
    if (*(_QWORD *)a5 != 0x75715F6D6172676ELL || *(_QWORD *)(a5 + 7) != 0x64657A69746E6175)
    {
LABEL_129:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "reduced_acceptor"))
      {
        std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "reduced_quantized_transducer"))
      {
        std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "reduced_quantized_acceptor"))
      {
        std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "squeezed_transducer"))
      {
        std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "squeezed_acceptor"))
      {
        std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "squeezed_quantized_transducer"))
      {
        std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      else
      {
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a5, "squeezed_quantized_acceptor"))
        {
          v105 = 0u;
          v106 = 0u;
          v103 = 0u;
          v104 = 0u;
          v101 = 0u;
          v102 = 0u;
          v99 = 0u;
          v100 = 0u;
          v97 = 0u;
          v98 = 0u;
          v95 = 0u;
          v96 = 0u;
          v93 = 0u;
          v94 = 0u;
          v91 = 0u;
          v92 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v86 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported FST type: ", 22);
          v87 = *(char *)(a5 + 23);
          if (v87 >= 0)
            v88 = a5;
          else
            v88 = *(_QWORD *)a5;
          if (v87 >= 0)
            v89 = *(unsigned __int8 *)(a5 + 23);
          else
            v89 = *(_QWORD *)(a5 + 8);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v86, v88, v89);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
        }
        std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
        std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)__p);
      }
      goto LABEL_157;
    }
LABEL_144:
    std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
    v63 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_157;
    v73 = (unint64_t *)((char *)__p[1] + 8);
    do
      v65 = __ldaxr(v73);
    while (__stlxr(v65 - 1, v73));
    goto LABEL_147;
  }
  if (v48 == 5)
  {
    if (*(_DWORD *)a5 != 1936617315 || *(_BYTE *)(a5 + 4) != 116)
    {
      if (*(_DWORD *)a5 != 1634887534 || *(_BYTE *)(a5 + 4) != 109)
        goto LABEL_129;
      goto LABEL_121;
    }
LABEL_135:
    std::allocate_shared[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>((uint64_t)v31, __p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
    v63 = (std::__shared_weak_count *)__p[1];
    if (!__p[1])
      goto LABEL_157;
    v67 = (unint64_t *)((char *)__p[1] + 8);
    do
      v65 = __ldaxr(v67);
    while (__stlxr(v65 - 1, v67));
    goto LABEL_147;
  }
  if (v48 != 6)
    goto LABEL_129;
  if (*(_DWORD *)a5 != 1952671094 || *(_WORD *)(a5 + 4) != 29295)
    goto LABEL_129;
LABEL_139:
  v68 = operator new(0x28uLL);
  v68[2] = 0;
  *v68 = &unk_1E5D413A8;
  v68[1] = 0;
  v69 = v31[1];
  v68[4] = v69;
  ++*(_DWORD *)(v69 + 56);
  v68[3] = &unk_1E5D28970;
  __p[0] = v68 + 3;
  __p[1] = v68;
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)a10, (__int128 *)__p);
  v70 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v71 = (unint64_t *)((char *)__p[1] + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
LABEL_158:
  (*(void (**)(_QWORD *))(*v31 + 8))(v31);
LABEL_159:
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FstConvert", 10);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  std::string::basic_string[abi:ne180100]<0>(__p, "Verify");
  v111[0] = __p;
  v74 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, v111);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v112, a7, v74 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  std::string::basic_string[abi:ne180100]<0>(__p, "conversion");
  v109 = __p;
  v75 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(a8, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v109);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v111, a7, v75 + 7);
  if (SBYTE7(v91) < 0)
    operator delete(__p[0]);
  if ((fst::Verify<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*a10, 0, 1) & 1) == 0)
  {
    if (quasar::gLogLevel >= 1)
    {
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST verification failed", 23);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
    goto LABEL_172;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a10 + 64))(*a10, 268763136, 0) != 268763136
    || (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)*a10 + 64))(*a10, 4, 0))
  {
    if (quasar::gLogLevel >= 1)
    {
      v105 = 0u;
      v106 = 0u;
      v103 = 0u;
      v104 = 0u;
      v101 = 0u;
      v102 = 0u;
      v99 = 0u;
      v100 = 0u;
      v97 = 0u;
      v98 = 0u;
      v95 = 0u;
      v96 = 0u;
      v93 = 0u;
      v94 = 0u;
      v91 = 0u;
      v92 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"FST properties incorrect", 24);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
    }
LABEL_172:
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
    return 0;
  }
  if (quasar::gLogLevel >= 4)
  {
    v105 = 0u;
    v106 = 0u;
    v103 = 0u;
    v104 = 0u;
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v93 = 0u;
    v94 = 0u;
    v91 = 0u;
    v92 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Verify", 6);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v111);
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v112);
  v77 = operator new();
  v78 = v77;
  v79 = (unint64_t *)a10[1];
  __p[0] = (void *)*a10;
  __p[1] = v79;
  if (v79)
  {
    v80 = v79 + 1;
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  quasar::FstLmHandle::FstLmHandle(v77, __p, a4, 1.0, a9);
  v112[0] = v78;
  v82 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v83 = (unint64_t *)((char *)__p[1] + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  std::shared_ptr<quasar::FstLmHandle>::operator=[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>(a11, v112);
  v85 = v112[0];
  v112[0] = 0;
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85);
  return 1;
}

void sub_1ADCFBDC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)(v15 - 160));
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)(v15 - 136));
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  _Unwind_Resume(a1);
}

void sub_1ADCFC0A0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCFC098);
}

uint64_t fst::Verify<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, char a2, int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  fst *v10;
  _QWORD *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  int v21;
  int v22;
  float v23;
  fst *v24;
  _QWORD *v25;
  fst *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  fst *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  fst *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  fst *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  fst *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  fst *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  fst *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  int v62;
  _QWORD *v63;
  unint64_t v65;
  uint64_t v66;
  fst *v67;
  _QWORD *v68;
  fst *v69;
  _QWORD *v70;
  _QWORD *v71;
  fst *v72;
  _QWORD *v73;
  _QWORD *v74;
  unsigned int v75;
  void *v76;
  uint64_t v77;
  char v78;
  char v79;
  void *__p;
  uint64_t v81;
  unint64_t v82;
  _DWORD *v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;

  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  LODWORD(v82) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &__p);
  v9 = 0;
  while (1)
  {
    while (!__p)
    {
      if ((int)v82 >= (int)v81)
        goto LABEL_11;
      ++v9;
LABEL_8:
      LODWORD(v82) = v82 + 1;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 16))(__p))
      break;
    ++v9;
    if (!__p)
      goto LABEL_8;
    (*(void (**)(void))(*(_QWORD *)__p + 32))();
  }
  if (__p)
    (*(void (**)(void))(*(_QWORD *)__p + 8))();
LABEL_11:
  if (v6 == -1 && v9)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v10 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
    v11 = (_QWORD *)fst::cerr(v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Verify: Fst start state ID unset", 32);
    goto LABEL_69;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1))
    v12 = v6 < v9;
  else
    v12 = 1;
  if (!v12)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
    v24 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Verify: Fst start state ID exceeds number of states ", 52);
    goto LABEL_69;
  }
  v87 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v85);
  while (2)
  {
    if (!v85)
    {
      if (v87 < v86)
        goto LABEL_25;
LABEL_99:
      v65 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 0);
      if ((v65 & 4) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v67 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
        v68 = (_QWORD *)fst::cerr(v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v68, (uint64_t)"Verify: Fst error property is set", 33);
      }
      else
      {
        if (a3)
        {
          v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0007, 1);
        }
        else
        {
          __p = 0;
          v66 = fst::ComputeProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, 0x3FFFFFFF0007, (uint64_t *)&__p, 0);
        }
        if (fst::CompatProperties(v65, v66))
          return 1;
        std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
        v69 = fst::LogMessage::LogMessage((fst *)&v85, (uint64_t)&__p);
        v70 = (_QWORD *)fst::cerr(v69);
        v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Verify: stored Fst properties incorrect ", 40);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)"(props1 = stored props, props2 = tested)", 40);
      }
LABEL_69:
      fst::LogMessage::~LogMessage((fst::LogMessage *)&v85);
      if (SHIBYTE(v82) < 0)
        operator delete(__p);
      return 0;
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v85 + 16))(v85) & 1) != 0)
    {
      if (v85)
        (*(void (**)(void))(*(_QWORD *)v85 + 8))();
      goto LABEL_99;
    }
    if (v85)
    {
      v13 = (*(uint64_t (**)(void))(*(_QWORD *)v85 + 24))();
      goto LABEL_26;
    }
LABEL_25:
    v13 = v87;
LABEL_26:
    v84 = 0;
    v75 = v13;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 136))(a1);
    v14 = 0;
    while (2)
    {
      if (!__p)
      {
        if (v84 >= v82)
          goto LABEL_61;
        goto LABEL_32;
      }
      if (((*(uint64_t (**)(void *))(*(_QWORD *)__p + 24))(__p) & 1) == 0)
      {
        if (__p)
        {
          v15 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
          goto LABEL_33;
        }
LABEL_32:
        v15 = v81 + 16 * v84;
LABEL_33:
        v16 = *(_DWORD *)v15;
        if ((a2 & 1) == 0 && v16 < 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          v26 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          v27 = (_QWORD *)fst::cerr(v26);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Verify: Fst input label ID of arc at position ", 46);
          v28 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" of state ", 10);
          v29 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        if (v7)
        {
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 88))(&v76, v7, v16);
          if (v78 < 0)
          {
            v17 = v77;
            operator delete(v76);
            if (!v17)
            {
LABEL_75:
              std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
              v46 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
              v47 = (_QWORD *)fst::cerr(v46);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)"Verify: Fst input label ID ", 27);
              v48 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)" of arc at position ", 20);
              v49 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)" of state ", 10);
              v50 = (_QWORD *)std::ostream::operator<<();
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" is missing from input symbol table \"", 37);
              v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
              v53 = *(char *)(v52 + 23);
              if (v53 >= 0)
                v54 = v52;
              else
                v54 = *(_QWORD *)v52;
              if (v53 >= 0)
                v55 = *(unsigned __int8 *)(v52 + 23);
              else
                v55 = *(_QWORD *)(v52 + 8);
LABEL_87:
              v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v51, v54, v55);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)"\"", 1);
              goto LABEL_88;
            }
          }
          else if (!v78)
          {
            goto LABEL_75;
          }
        }
        v18 = *(_DWORD *)(v15 + 4);
        if ((a2 & 1) == 0 && v18 < 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          v30 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          v31 = (_QWORD *)fst::cerr(v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"Verify: Fst output label ID of arc at position ", 47);
          v32 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" of state ", 10);
          v33 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        if (v8)
        {
          (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v8 + 88))(&v76, v8, v18);
          if (v78 < 0)
          {
            v19 = v77;
            operator delete(v76);
            if (!v19)
            {
LABEL_81:
              std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
              v56 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
              v57 = (_QWORD *)fst::cerr(v56);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)"Verify: Fst output label ID ", 28);
              v58 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" of arc at position ", 20);
              v59 = (_QWORD *)std::ostream::operator<<();
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)" of state ", 10);
              v60 = (_QWORD *)std::ostream::operator<<();
              v51 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v60, (uint64_t)" is missing from output symbol table \"", 38);
              v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(v8);
              v62 = *(char *)(v61 + 23);
              if (v62 >= 0)
                v54 = v61;
              else
                v54 = *(_QWORD *)v61;
              if (v62 >= 0)
                v55 = *(unsigned __int8 *)(v61 + 23);
              else
                v55 = *(_QWORD *)(v61 + 8);
              goto LABEL_87;
            }
          }
          else if (!v78)
          {
            goto LABEL_81;
          }
        }
        v20 = *(float *)(v15 + 8);
        if (v20 >= -INFINITY && v20 <= -INFINITY)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          v34 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          v35 = (_QWORD *)fst::cerr(v34);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Verify: Fst weight of arc at position ", 38);
          v36 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" of state ", 10);
          v37 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)" is invalid", 11);
LABEL_88:
          fst::LogMessage::~LogMessage((fst::LogMessage *)&v79);
          if (v78 < 0)
            operator delete(v76);
          if (__p)
          {
            (*(void (**)(void *))(*(_QWORD *)__p + 8))(__p);
          }
          else if (v83)
          {
            --*v83;
          }
          goto LABEL_94;
        }
        if ((*(_DWORD *)(v15 + 12) & 0x80000000) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          v38 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          v39 = (_QWORD *)fst::cerr(v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Verify: Fst destination state ID of arc at position ", 52);
          v40 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" of state ", 10);
          v41 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" is negative", 12);
          goto LABEL_88;
        }
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
        if (*(_DWORD *)(v15 + 12) >= v9)
          v22 = v21;
        else
          v22 = 0;
        if (v22 == 1)
        {
          std::string::basic_string[abi:ne180100]<0>(&v76, "ERROR");
          v42 = fst::LogMessage::LogMessage((fst *)&v79, (uint64_t)&v76);
          v43 = (_QWORD *)fst::cerr(v42);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)"Verify: Fst destination state ID of arc at position ", 52);
          v44 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)" of state ", 10);
          v45 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)" exceeds number of states", 25);
          goto LABEL_88;
        }
        if (__p)
          (*(void (**)(void *))(*(_QWORD *)__p + 40))(__p);
        else
          ++v84;
        ++v14;
        continue;
      }
      break;
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
    }
    else
    {
LABEL_61:
      if (v83)
        --*v83;
    }
    v23 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, v75);
    if (v23 < -INFINITY || v23 > -INFINITY)
    {
      if (v85)
        (*(void (**)(uint64_t))(*(_QWORD *)v85 + 32))(v85);
      else
        ++v87;
      continue;
    }
    break;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
  v72 = fst::LogMessage::LogMessage((fst *)&v76, (uint64_t)&__p);
  v73 = (_QWORD *)fst::cerr(v72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v73, (uint64_t)"Verify: Fst final weight of state ", 34);
  v74 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v74, (uint64_t)" is invalid", 11);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&v76);
  if (SHIBYTE(v82) < 0)
    operator delete(__p);
LABEL_94:
  if (v85)
    (*(void (**)(uint64_t))(*(_QWORD *)v85 + 8))(v85);
  return 0;
}

void sub_1ADCFC9F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  if (a26 < 0)
    operator delete(__p);
  if (a29)
    (*(void (**)(uint64_t))(*(_QWORD *)a29 + 8))(a29);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<quasar::FstLmHandle>::operator=[abi:ne180100]<quasar::FstLmHandle,std::default_delete<quasar::FstLmHandle>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45F20;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

void quasar::trainOrAdaptNgramSrilmModel(const std::string **a1@<X0>, quasar::LmData *a2@<X1>, const void **a3@<X2>, int a4@<W3>, __int128 *a5@<X8>)
{
  clockid_t v10;
  uint64_t v11;
  double *v12;
  int v13;
  const std::string *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  char ArpaLm;
  quasar::LmData *v19;
  int v20;
  quasar *v21;
  double v22;
  const void **v23;
  __int128 *v24;
  const std::string *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  quasar::LmData *v28;
  std::string::pointer data;
  std::string::size_type i;
  __int128 v31;
  int v32;
  int v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  size_t v37;
  void *v38;
  const void *v39;
  const char *v40;
  BOOL v41;
  quasar::lm::SymbolTableData *SymbolTableData;
  quasar *Size;
  quasar *v44;
  quasar *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  void **v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  void *v66[2];
  char v67;
  quasar::FstLmHandle *v68;
  std::__shared_weak_count *v69;
  char v70;
  void *__p[2];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  const std::string *v88;
  std::__shared_weak_count *v89;
  int v90[3];
  __int128 v91;
  char **v92;
  char *v93[2];
  _BYTE v94[32];
  uint64_t v95;
  int v96;
  std::string v97;
  std::string *v98;
  std::string *v99;
  char v100;

  quasar::PTree::PTree((quasar::PTree *)&v96);
  v94[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v94, v10);
  v95 = 0;
  v93[0] = 0;
  v93[1] = 0;
  v92 = v93;
  v91 = 0uLL;
  v11 = operator new();
  *(_QWORD *)(v11 + 160) = 0;
  *(_OWORD *)(v11 + 128) = 0u;
  *(_OWORD *)(v11 + 144) = 0u;
  *(_OWORD *)(v11 + 96) = 0u;
  *(_OWORD *)(v11 + 112) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 80) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  srilm::NgramCountContext::NgramCountContext((srilm::NgramCountContext *)v11);
  *(_QWORD *)&v90[1] = v11;
  v90[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "training");
  v68 = (quasar::FstLmHandle *)__p;
  v12 = (double *)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>((uint64_t **)&v92, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v68);
  quasar::ScopedTimer::ScopedTimer((quasar::ScopedTimer *)v66, (const kaldi::Timer *)v94, v12 + 7);
  if (SBYTE7(v72) < 0)
    operator delete(__p[0]);
  v13 = (*(uint64_t (**)(const std::string *))((*a1)->__r_.__value_.__r.__words[0] + 16))(*a1);
  if (v13 == 2)
  {
    v23 = a3;
    v65 = a4;
    v24 = a5;
    v25 = *a1;
    v15 = (std::__shared_weak_count *)a1[1];
    v88 = *a1;
    v89 = v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    v28 = a2;
    if (*((_DWORD *)a2 + 2) != -1)
    {
      data = v25[7].__r_.__value_.__l.__data_;
      for (i = v25[7].__r_.__value_.__l.__size_; data != (std::string::pointer)i; data += 24)
      {
        if (data[23] < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)data, *((_QWORD *)data + 1));
        }
        else
        {
          v31 = *(_OWORD *)data;
          *(_QWORD *)&v72 = *((_QWORD *)data + 2);
          *(_OWORD *)__p = v31;
        }
        if (SBYTE7(v72) < 0)
        {
          if (__p[1] == (void *)4)
          {
            v32 = *(_DWORD *)__p[0];
            operator delete(__p[0]);
            if (v32 == 1802401069)
              goto LABEL_33;
          }
          else
          {
            operator delete(__p[0]);
          }
        }
        else if (SBYTE7(v72) == 4 && LODWORD(__p[0]) == 1802401069)
        {
          goto LABEL_33;
        }
      }
      if (quasar::gLogLevel >= 2)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"OOV replacement set, but ngram-count flags don't contain -unk. ngrams will be ignored", 85);
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
      }
    }
LABEL_33:
    a2 = v28;
    ArpaLm = quasar::_generateArpaLm(v28, (std::string **)&v90[1], (uint64_t **)&v25[7], v25 + 9, v90, (const kaldi::Timer *)v94, (uint64_t **)&v92);
    a5 = v24;
    if ((ArpaLm & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v68, "order");
      a3 = v23;
      v33 = v90[0];
      LODWORD(__p[0]) = quasar::getType((quasar *)v90[0]);
      std::to_string((std::string *)&__p[1], v33);
      v73 = 0uLL;
      *(_QWORD *)&v74 = 0;
      BYTE8(v74) = 1;
      quasar::PTree::putChild((uint64_t)&v96, (uint64_t)&v68, (uint64_t)__p, 1);
      a4 = v65;
      quasar::PTree::~PTree((quasar::PTree *)__p);
      a2 = v28;
      if (v70 < 0)
        operator delete(v68);
      if (!v15)
        goto LABEL_48;
    }
    else
    {
      *(_QWORD *)v24 = 0;
      *((_QWORD *)v24 + 1) = 0;
      v91 = 0uLL;
      a4 = v65;
      a3 = v23;
      if (!v15)
        goto LABEL_48;
    }
    v36 = (unint64_t *)&v15->__shared_owners_;
    do
      v35 = __ldaxr(v36);
    while (__stlxr(v35 - 1, v36));
LABEL_46:
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
    goto LABEL_48;
  }
  if (v13 != 4)
  {
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported LmBuildConfig type", 30);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v14 = *a1;
  v15 = (std::__shared_weak_count *)a1[1];
  v88 = *a1;
  v89 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  ArpaLm = quasar::_adaptArpaLm(a2, (std::string **)&v90[1], (uint64_t **)&v14[7], (std::string *)&v14[8], v90, (const kaldi::Timer *)v94, (uint64_t **)&v92);
  if ((ArpaLm & 1) != 0)
  {
    v19 = a2;
    std::string::basic_string[abi:ne180100]<0>(&v68, "order");
    v20 = v90[0];
    LODWORD(__p[0]) = quasar::getType((quasar *)v90[0]);
    std::to_string((std::string *)&__p[1], v20);
    v73 = 0uLL;
    *(_QWORD *)&v74 = 0;
    BYTE8(v74) = 1;
    quasar::PTree::putChild((uint64_t)&v96, (uint64_t)&v68, (uint64_t)__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    a2 = v19;
    if (v70 < 0)
      operator delete(v68);
    if (*(_QWORD *)&v90[1])
    {
      v21 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&v68, "residualAdaptationWeight");
      v22 = *(double *)(*(_QWORD *)&v90[1] + 80);
      LODWORD(__p[0]) = quasar::getType(v21, *(float *)&v22);
      std::to_string((std::string *)&__p[1], v22);
      v73 = 0uLL;
      *(_QWORD *)&v74 = 0;
      BYTE8(v74) = 1;
      quasar::PTree::putChild((uint64_t)&v96, (uint64_t)&v68, (uint64_t)__p, 1);
      quasar::PTree::~PTree((quasar::PTree *)__p);
      if (v70 < 0)
        operator delete(v68);
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *((_QWORD *)a5 + 1) = 0;
    v91 = 0uLL;
  }
  if (v15)
  {
    v34 = (unint64_t *)&v15->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    goto LABEL_46;
  }
LABEL_48:
  if ((ArpaLm & 1) == 0)
  {
    quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v66);
    goto LABEL_105;
  }
  quasar::ScopedTimer::~ScopedTimer((quasar::ScopedTimer *)v66);
  if (*((char *)a3 + 23) >= 0)
    v37 = *((unsigned __int8 *)a3 + 23);
  else
    v37 = (size_t)a3[1];
  if (v37)
  {
    std::string::basic_string[abi:ne180100]((uint64_t)&v68, v37 + 8);
    if (v70 >= 0)
      v38 = &v68;
    else
      v38 = v68;
    if (*((char *)a3 + 23) >= 0)
      v39 = a3;
    else
      v39 = *a3;
    memmove(v38, v39, v37);
    strcpy((char *)v38 + v37, "/lm.arpa");
    if (v70 < 0)
    {
      if (!v69)
      {
LABEL_71:
        operator delete(v68);
        goto LABEL_72;
      }
      v40 = (const char *)v68;
LABEL_65:
      File::File((File *)v66, v40, "w", 1);
      if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(*(_QWORD *)&v90[1] + 48) + 248))(*(_QWORD *)(*(_QWORD *)&v90[1] + 48), v66))
      {
        v41 = 1;
      }
      else
      {
        v41 = quasar::gLogLevel < 1;
      }
      if (!v41)
      {
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        v82 = 0u;
        v83 = 0u;
        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        v76 = 0u;
        v77 = 0u;
        v74 = 0u;
        v75 = 0u;
        v72 = 0u;
        v73 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"ARPA LM write error", 19);
        quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)__p);
      }
      File::close((File *)v66);
      File::~File((File *)v66);
      if ((v70 & 0x80000000) == 0)
        goto LABEL_72;
      goto LABEL_71;
    }
    if (v70)
    {
      v40 = (const char *)&v68;
      goto LABEL_65;
    }
  }
LABEL_72:
  v68 = 0;
  v69 = 0;
  v88 = 0;
  v89 = 0;
  SymbolTableData = (quasar::lm::SymbolTableData *)quasar::LmData::getSymbolTableData(a2);
  if ((quasar::_buildFst(SymbolTableData, *(_QWORD *)(*(_QWORD *)&v90[1] + 48), (void ***)&v90[1], v90[0], (uint64_t)&(*a1)[5], a4, (const kaldi::Timer *)v94, (uint64_t **)&v92, *((float *)&(*a1)->__r_.__value_.__r.__words[1] + 1), (uint64_t *)&v88, &v68, 1) & 1) != 0)
  {
    if (v68)
    {
      Size = (quasar *)quasar::FstLmHandle::GetSize(v68);
      v45 = v44;
    }
    else
    {
      Size = 0;
      v45 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v66, "numStates");
    LODWORD(__p[0]) = quasar::getType(Size);
    std::to_string((std::string *)&__p[1], (unint64_t)Size);
    v73 = 0uLL;
    *(_QWORD *)&v74 = 0;
    BYTE8(v74) = 1;
    quasar::PTree::putChild((uint64_t)&v96, (uint64_t)v66, (uint64_t)__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
    std::string::basic_string[abi:ne180100]<0>(v66, "numArcs");
    LODWORD(__p[0]) = quasar::getType(v45);
    std::to_string((std::string *)&__p[1], (unint64_t)v45);
    v73 = 0uLL;
    *(_QWORD *)&v74 = 0;
    BYTE8(v74) = 1;
    quasar::PTree::putChild((uint64_t)&v96, (uint64_t)v66, (uint64_t)__p, 1);
    quasar::PTree::~PTree((quasar::PTree *)__p);
    if (v67 < 0)
      operator delete(v66[0]);
    std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,void>((uint64_t *)&v88, (srilm::NgramCountContext **)&v90[1], (uint64_t *)&v68, a1, __p);
    v46 = *(_OWORD *)__p;
    __p[0] = 0;
    __p[1] = 0;
    v47 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
    v91 = v46;
    if (v47)
    {
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    v50 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v51 = (unint64_t *)((char *)__p[1] + 8);
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
    v53 = v91;
    if ((char ***)(v91 + 688) != &v92)
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>((uint64_t **)(v91 + 688), v92, v93);
    *(_DWORD *)(v53 + 712) = v96;
    std::string::operator=((std::string *)(v53 + 720), &v97);
    if ((int *)(v53 + 712) != &v96)
      std::vector<std::pair<std::string,quasar::PTree>>::__assign_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(v53 + 744, v98, v99, 0x2E8BA2E8BA2E8BA3 * (((char *)v99 - (char *)v98) >> 3));
    *(_BYTE *)(v53 + 768) = v100;
    v54 = *((_QWORD *)&v91 + 1);
    *(_QWORD *)a5 = v53;
    *((_QWORD *)a5 + 1) = v54;
    a5 = &v91;
  }
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v55 = v89;
  if (v89)
  {
    v56 = (unint64_t *)&v89->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  v58 = v69;
  if (v69)
  {
    v59 = (unint64_t *)&v69->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v58);
    }
  }
LABEL_105:
  v61 = *(void ***)&v90[1];
  *(_QWORD *)&v90[1] = 0;
  if (v61)
  {
    srilm::NgramCountContext::~NgramCountContext(v61);
    MEMORY[0x1AF44D190]();
  }
  v62 = (std::__shared_weak_count *)*((_QWORD *)&v91 + 1);
  if (*((_QWORD *)&v91 + 1))
  {
    v63 = (unint64_t *)(*((_QWORD *)&v91 + 1) + 8);
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  std::__tree<std::string>::destroy((uint64_t)&v92, v93[0]);
  quasar::PTree::~PTree((quasar::PTree *)&v96);
}

void sub_1ADCFD5E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32)
{
  quasar::PTree::~PTree((quasar::PTree *)&a32);
  if (a31 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADCFD6C0);
}

void sub_1ADCFD66C()
{
  JUMPOUT(0x1ADCFD674);
}

void sub_1ADCFD6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  JUMPOUT(0x1ADCFD734);
}

void sub_1ADCFD6D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a63);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  JUMPOUT(0x1ADCFD73CLL);
}

void sub_1ADCFD6E8()
{
  JUMPOUT(0x1ADCFD734);
}

void sub_1ADCFD6F0()
{
  JUMPOUT(0x1ADCFD73CLL);
}

void sub_1ADCFD6F8()
{
  uint64_t v0;

  MEMORY[0x1AF44D190](v0, 0x1032C40A1079DF8);
  JUMPOUT(0x1ADCFD748);
}

void sub_1ADCFD718()
{
  JUMPOUT(0x1ADCFD748);
}

void sub_1ADCFD720()
{
  JUMPOUT(0x1ADCFD75CLL);
}

void sub_1ADCFD76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0)
    JUMPOUT(0x1ADCFD77CLL);
  JUMPOUT(0x1ADCFD73CLL);
}

void quasar::loadNgramSrilmModel(uint64_t a1@<X0>, float *a2@<X1>, const void **a3@<X2>, uint64_t *a4@<X8>)
{
  size_t v8;
  std::string *v9;
  const void *v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  __int128 v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  void *v22[2];
  unsigned __int8 v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::string v26;
  std::string v27;
  std::string __p;
  char v29;
  std::string v30;

  std::string::basic_string[abi:ne180100]<0>(&v27, "fst-basename");
  quasar::PTree::getStringOptional(a1, (uint64_t)&v27, &__p);
  if (v29)
  {
    v30 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v30, "bigG");
    if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&v26, "fst-type");
  quasar::PTree::getStringOptional(a1, (uint64_t)&v26, &__p);
  if (v29)
  {
    v27 = __p;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "squeezed_acceptor");
    if (v29 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (*((char *)a3 + 23) >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  v9 = &v26;
  std::string::basic_string[abi:ne180100]((uint64_t)&v26, v8 + 1);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v9 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if (v8)
  {
    if (*((char *)a3 + 23) >= 0)
      v10 = a3;
    else
      v10 = *a3;
    memmove(v9, v10, v8);
  }
  *(_WORD *)((char *)&v9->__r_.__value_.__l.__data_ + v8) = 47;
  quasar::NgramFstConfig::makeFstFileName((const void **)&v30.__r_.__value_.__l.__data_, (uint64_t)&v27, (uint64_t)v22);
  if ((v23 & 0x80u) == 0)
    v11 = v22;
  else
    v11 = (void **)v22[0];
  if ((v23 & 0x80u) == 0)
    v12 = v23;
  else
    v12 = (std::string::size_type)v22[1];
  v13 = std::string::append(&v26, (const std::string::value_type *)v11, v12);
  v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __p.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  v15 = operator new();
  quasar::FstLmHandle::FstLmHandle(v15, (uint64_t)&__p, 0, *a2, a2[1]);
  v24 = v15;
  v16 = (std::__shared_weak_count *)operator new();
  v16->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45F20;
  v16->__shared_owners_ = 0;
  v16->__shared_weak_owners_ = 0;
  v16[1].__vftable = (std::__shared_weak_count_vtbl *)v15;
  v25 = v16;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((char)v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  v17 = operator new();
  quasar::NgramLmModel2::NgramLmModel2(v17, &v24);
  quasar::LmModel2::setModelSysConfigParams((quasar::LmModel2 *)(v17 + 656), (const quasar::LmBuildConfig::ModelSysConfigParameters *)a2);
  *a4 = v17;
  v18 = (_QWORD *)operator new();
  *v18 = &unk_1E5D45FC8;
  v18[1] = 0;
  v18[2] = 0;
  v18[3] = v17;
  a4[1] = (uint64_t)v18;
  v19 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void sub_1ADCFDAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  uint64_t v36;

  if (a36 && a35 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  if (*(char *)(v36 - 57) < 0)
    operator delete(*(void **)(v36 - 80));
  _Unwind_Resume(exception_object);
}

void quasar::interpolateNgramSrilmArpaFiles(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 **v3;
  __int128 **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::string::size_type v12;
  std::string::size_type size;
  __int128 *p_p;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  __int128 v18;
  uint64_t PtreeOptional;
  quasar::PTree *ChildOptional;
  uint64_t String;
  char v22;
  int64_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26;
  _BYTE *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  __int128 *v37;
  __int128 *v38;
  _QWORD *LazyLoadedNgramModelStream;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t **v44;
  void **v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  srilm::NgramCountContext *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  void ***v62;
  std::__shared_weak_count *v63;
  void **v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  void *v67;
  int v68;
  int v69;
  __int128 v70;
  std::string v71;
  std::string v72[64];
  uint64_t v73;
  void *v74;
  std::__shared_weak_count *v75;
  uint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  std::string v81[64];
  std::string v82;
  void *v83[2];
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  char **v87;
  char *v88[2];
  _BYTE v89[32];
  uint64_t v90;
  __int128 __p;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v9 = v2;
  v11 = v10;
  v108 = *MEMORY[0x1E0C80C00];
  v89[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v89, (clockid_t)v7);
  v90 = 0;
  v88[1] = 0;
  v88[0] = 0;
  v87 = v88;
  v85 = 0uLL;
  v86 = 0;
  v83[1] = 0;
  v83[0] = 0;
  v84 = 0;
  if (*(char *)(v6 + 23) < 0)
  {
    v12 = *(_QWORD *)(v6 + 8);
    if (v12)
    {
      std::string::__init_copy_ctor_external(&v82, *(const std::string::value_type **)v6, v12);
      goto LABEL_7;
    }
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v82, "lm-personalize.data");
    goto LABEL_7;
  }
  if (!*(_BYTE *)(v6 + 23))
    goto LABEL_6;
  v82 = *(std::string *)v6;
LABEL_7:
  v75 = 0;
  v74 = 0;
  v76 = 0;
  __p = 0u;
  v92 = 0u;
  LODWORD(v93) = 1065353216;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v81, v8, (uint64_t *)&v74, (uint64_t)&__p);
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)&__p);
  *(_QWORD *)&__p = &v74;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  else
    size = v82.__r_.__value_.__l.__size_;
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, size + 1);
  if (SBYTE7(v92) < 0)
    p_p = (__int128 *)__p;
  if (size)
  {
    if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v82;
    else
      v15 = (std::string *)v82.__r_.__value_.__r.__words[0];
    memmove(p_p, v15, size);
  }
  *(_WORD *)((char *)p_p + size) = 46;
  quasar::SystemConfig::setPrefix(v81, (const std::string *)&__p);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "decoder-chain-name");
  std::string::basic_string[abi:ne180100]<0>(&v74, "Name of the decoder for the given task from which to take the bigG FST, e.g., msg");
  quasar::SystemConfig::Register<std::string>((uint64_t)v81, (const void **)&__p, (uint64_t)&v85, (uint64_t)&v74, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v76) < 0)
    operator delete(v74);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "task-name");
  std::string::basic_string[abi:ne180100]<0>(&v74, "Name of the task to lookup, e.g., Dictation");
  quasar::SystemConfig::Register<std::string>((uint64_t)v81, (const void **)&__p, (uint64_t)v83, (uint64_t)&v74, 0, 190, 0, 0x7FFFFFFF, 0x7FFFFFFF);
  if (SHIBYTE(v76) < 0)
    operator delete(v74);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  quasar::SystemConfig::readPtree((uint64_t)v81, (uint64_t)&v82, 0, 0);
  quasar::getOrValidateDecoderChainName((quasar *)v81, (uint64_t)v83, (const void **)&v85, (std::string *)&__p);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)v85);
  v85 = __p;
  v86 = v92;
  quasar::SystemConfig::SystemConfig((quasar::SystemConfig *)v72, (const quasar::SystemConfig *)v81, 1, 1);
  quasar::inferSymbolTableRootFromDecoderChainName((std::string *)&__p);
  quasar::loadSymbolTable(v72, (uint64_t)&__p, &v73);
  quasar::lm::SymbolTableData::SymbolTableData(&v74, &v73);
  v16 = v73;
  v73 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v72);
  std::operator+<char>();
  v17 = std::string::append(&v71, ".lattice-biglm-lme-faster");
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  *(_QWORD *)&v92 = *((_QWORD *)&v17->__r_.__value_.__l + 2);
  __p = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  PtreeOptional = quasar::SystemConfig::getPtreeOptional((uint64_t)v81, (uint64_t)&__p);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "big-g-fst-file-list");
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional(PtreeOptional, (uint64_t)&__p);
  if (SBYTE7(v92) < 0)
    operator delete((void *)__p);
  if (!ChildOptional)
    goto LABEL_115;
  String = quasar::PTree::getString(ChildOptional);
  v22 = *(_BYTE *)(String + 23);
  v23 = v22 >= 0 ? *(unsigned __int8 *)(String + 23) : *(_QWORD *)(String + 8);
  v24 = v22 >= 0 ? String : *(_QWORD *)String;
  if (v23 >= 1)
  {
    v25 = (_BYTE *)(v24 + v23);
    v26 = (void *)v24;
    while (1)
    {
      v27 = memchr(v26, 44, v23);
      if (!v27)
        goto LABEL_54;
      if (*v27 == 44)
        break;
      v26 = v27 + 1;
      v23 = v25 - (_BYTE *)v26;
      if (v25 - (_BYTE *)v26 < 1)
        goto LABEL_54;
    }
    if (v27 != v25 && &v27[-v24] != (_BYTE *)-1)
    {
LABEL_115:
      v106 = 0u;
      v107 = 0u;
      v104 = 0u;
      v105 = 0u;
      v102 = 0u;
      v103 = 0u;
      v100 = 0u;
      v101 = 0u;
      v98 = 0u;
      v99 = 0u;
      v96 = 0u;
      v97 = 0u;
      v94 = 0u;
      v95 = 0u;
      v92 = 0u;
      v93 = 0u;
      __p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&__p, (uint64_t)"Unsupported config: first decoder must have only one big G FST", 62);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&__p);
    }
  }
LABEL_54:
  quasar::ModelLoader::ModelLoader((quasar::ModelLoader *)&__p);
  v28 = quasar::PTree::getString(ChildOptional);
  quasar::ModelLoader::readFstNetwork((uint64_t)&__p, v28, (uint64_t *)&v71);
  v70 = *(_OWORD *)&v71.__r_.__value_.__l.__data_;
  if (v71.__r_.__value_.__l.__size_)
  {
    v29 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  quasar::lm::SymbolTableData::observeBigGSymbols((uint64_t)&v74, (uint64_t *)&v70);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)v71.__r_.__value_.__l.__size_;
  if (v71.__r_.__value_.__l.__size_)
  {
    v35 = (unint64_t *)(v71.__r_.__value_.__l.__size_ + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  quasar::ModelLoader::~ModelLoader((quasar::ModelLoader *)&__p);
  Vocab::Vocab((Vocab *)&__p, 0, 0xFFFFFFFE);
  Vocab::remove((uint64_t)&__p, v95);
  v37 = *v4;
  v38 = v4[1];
  while (v37 != v38)
  {
    quasar::lm::ExtractVocabularyFromARPA((uint64_t)v37, (File *)&__p);
    v37 = (__int128 *)((char *)v37 + 24);
  }
  quasar::lm::SymbolTableData::observeSrilmVocabulary((quasar::lm::SymbolTableData *)&v74, (Vocab *)&__p);
  quasar::lm::SymbolTableData::extractTrainVocabFromSymbolTable((quasar::lm::SymbolTableData *)&v74);
  Vocab::~Vocab((Vocab *)&__p);
  LazyLoadedNgramModelStream = quasar::lm::srilm::CreateLazyLoadedNgramModelStream(v4, (uint64_t)v74, *(_DWORD *)(*(_QWORD *)v9 + 172));
  v40 = *(_DWORD *)(*(_QWORD *)v9 + 168);
  v41 = -1431655765 * ((unint64_t)((char *)v4[1] - (char *)*v4) >> 3);
  v67 = &unk_1E5D3A6F0;
  v68 = v40;
  v69 = v41;
  quasar::lm::WeightOptimizationStrategy::operator()((quasar::lm *)&v67, &v71);
  v64 = 0;
  v65 = 0;
  v66 = 0;
  quasar::lm::srilm::Interpolate::Interpolate(&__p, &v71, &v64);
  v62 = &v64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
  v42 = quasar::lm::srilm::Interpolate::operator()((uint64_t)&__p, (uint64_t)LazyLoadedNgramModelStream);
  std::shared_ptr<Ngram>::shared_ptr[abi:ne180100]<Ngram,void>(&v64, v42);
  v62 = 0;
  v63 = 0;
  v60 = 0;
  v61 = 0;
  v43 = operator new();
  *(_QWORD *)(v43 + 160) = 0;
  *(_OWORD *)(v43 + 128) = 0u;
  *(_OWORD *)(v43 + 144) = 0u;
  *(_OWORD *)(v43 + 96) = 0u;
  *(_OWORD *)(v43 + 112) = 0u;
  *(_OWORD *)(v43 + 64) = 0u;
  *(_OWORD *)(v43 + 80) = 0u;
  *(_OWORD *)(v43 + 32) = 0u;
  *(_OWORD *)(v43 + 48) = 0u;
  *(_OWORD *)v43 = 0u;
  *(_OWORD *)(v43 + 16) = 0u;
  srilm::NgramCountContext::NgramCountContext((srilm::NgramCountContext *)v43);
  v59 = (srilm::NgramCountContext *)v43;
  if ((quasar::_buildFst((quasar::lm::SymbolTableData *)&v74, (uint64_t)v64, (void ***)&v59, *(_DWORD *)(*(_QWORD *)v9 + 172), *(_QWORD *)v9 + 120, 0, (const kaldi::Timer *)v89, (uint64_t **)&v87, *(float *)(*(_QWORD *)v9 + 12), &v60, &v62, 0) & 1) != 0)
  {
    std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,void>(&v60, &v59, (uint64_t *)&v62, v9, v11);
    v44 = (uint64_t **)(*v11 + 688);
    if (v44 != (uint64_t **)&v87)
      std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,double>,std::__tree_node<std::__value_type<std::string,double>,void *> *,long>>(v44, v87, v88);
  }
  else
  {
    *v11 = 0;
    v11[1] = 0;
  }
  v45 = (void **)v59;
  v59 = 0;
  if (v45)
  {
    srilm::NgramCountContext::~NgramCountContext(v45);
    MEMORY[0x1AF44D190]();
  }
  v46 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v63;
  if (v63)
  {
    v50 = (unint64_t *)&v63->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = v65;
  if (v65)
  {
    v53 = (unint64_t *)&v65->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  *(_QWORD *)&__p = &off_1E5D3A710;
  if ((_QWORD)v93)
  {
    *((_QWORD *)&v93 + 1) = v93;
    operator delete((void *)v93);
  }
  v64 = (void **)&__p + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v64);
  if (v71.__r_.__value_.__r.__words[0])
  {
    v71.__r_.__value_.__l.__size_ = v71.__r_.__value_.__r.__words[0];
    operator delete(v71.__r_.__value_.__l.__data_);
  }
  if (LazyLoadedNgramModelStream)
    (*(void (**)(_QWORD *))(*LazyLoadedNgramModelStream + 8))(LazyLoadedNgramModelStream);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v80);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)&v79);
  if (v78)
    operator delete(v78);
  if (v77)
    operator delete(v77);
  v55 = v76;
  v76 = 0;
  if (v55)
    (*(void (**)(uint64_t))(*(_QWORD *)v55 + 8))(v55);
  v56 = v75;
  if (v75)
  {
    v57 = (unint64_t *)&v75->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)v81);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (SHIBYTE(v84) < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v86) < 0)
    operator delete((void *)v85);
  std::__tree<std::string>::destroy((uint64_t)&v87, v88[0]);
}

void sub_1ADCFE560(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::Interpolate::~Interpolate(quasar::lm::srilm::Interpolate *this)
{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D3A710;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_1E5D3A710;
  v2 = (void *)*((_QWORD *)this + 4);
  if (v2)
  {
    *((_QWORD *)this + 5) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  MEMORY[0x1AF44D190](this, 0xA1C40D2948F72);
}

void quasar::lm::SymbolTableData::~SymbolTableData(quasar::lm::SymbolTableData *this)
{
  void *v2;
  void *v3;
  uint64_t v4;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)this + 144);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 104);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
    operator delete(v2);
  v3 = (void *)*((_QWORD *)this + 3);
  if (v3)
    operator delete(v3);
  v4 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

void quasar::NgramSrilmCountConfig::~NgramSrilmCountConfig(void **this)
{
  void **v2;
  void **v3;

  *this = off_1E5D38678;
  v2 = this + 21;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  void **v2;
  void **v3;

  *this = off_1E5D38678;
  v2 = this + 21;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  MEMORY[0x1AF44D190]();
}

void quasar::NgramSrilmInterpolationConfig::~NgramSrilmInterpolationConfig(void **this)
{
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  JUMPOUT(0x1AF44D190);
}

void quasar::NgramSrilmAdaptationConfig::~NgramSrilmAdaptationConfig(void **this)
{
  void **v2;
  void **v3;

  *this = off_1E5D39E10;
  v2 = this + 21;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
}

{
  void **v2;
  void **v3;

  *this = off_1E5D39E10;
  v2 = this + 21;
  if (*((char *)this + 239) < 0)
    operator delete(this[27]);
  if (*((char *)this + 215) < 0)
    operator delete(this[24]);
  v3 = v2;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  *this = off_1E5D352B8;
  if (*((char *)this + 167) < 0)
    operator delete(this[18]);
  if (*((char *)this + 143) < 0)
    operator delete(this[15]);
  quasar::LmBuildConfig::~LmBuildConfig(this);
  MEMORY[0x1AF44D190]();
}

void quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this)
{
}

{
  JUMPOUT(0x1AF44D190);
}

void quasar::lm::WeightOptimizationStrategy::~WeightOptimizationStrategy(quasar::lm::WeightOptimizationStrategy *this)
{
  JUMPOUT(0x1AF44D190);
}

void quasar::NgramLmModel2::~NgramLmModel2(quasar::NgramLmModel2 *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 82) = a2[6];
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)this + 130, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 1024);
  if (*((char *)this + 1015) < 0)
    operator delete(*((void **)this + 124));
  if (*((char *)this + 991) < 0)
    operator delete(*((void **)this + 121));
  v6 = (void **)((char *)this + 944);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 943) < 0)
    operator delete(*((void **)this + 115));
  if (*((char *)this + 919) < 0)
    operator delete(*((void **)this + 112));
  quasar::LmModel2::~LmModel2((quasar::NgramLmModel2 *)((char *)this + 656), a2 + 3);
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  quasar::ModelLoader::~ModelLoader((quasar::NgramLmModel2 *)((char *)this + 8));
}

_QWORD *std::operator>>[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v4;
  _BYTE *v5;
  int v6;
  char v8;

  MEMORY[0x1AF44CADC](&v8, a1, 0);
  if (v8)
  {
    v4 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v5 = (_BYTE *)v4[3];
    if (v5 == (_BYTE *)v4[4])
    {
      LODWORD(v4) = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
      if ((_DWORD)v4 == -1)
      {
        v6 = 6;
        goto LABEL_6;
      }
    }
    else
    {
      v4[3] = v5 + 1;
      LOBYTE(v4) = *v5;
    }
    v6 = 0;
    *a2 = (_BYTE)v4;
LABEL_6:
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v6);
  }
  return a1;
}

void sub_1ADCFEEDC(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1ADCFEEA8);
  }
  __cxa_rethrow();
}

void sub_1ADCFEF1C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::istream_iterator<unsigned char,char,std::char_traits<char>,long>,std::ostream_iterator<unsigned char,char,std::char_traits<char>>>@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, _OWORD *a6@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v13 = a1;
  *((_QWORD *)&v13 + 1) = a2;
  *(_QWORD *)&v12 = a4;
  *((_QWORD *)&v12 + 1) = a5;
  if (a1 != a3)
  {
    do
    {
      std::ostream_iterator<unsigned char,char,std::char_traits<char>>::operator=[abi:ne180100]((uint64_t)&v12, (char *)&v13 + 8);
      v8 = std::operator>>[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v13, (_BYTE *)&v13 + 8);
      if ((*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) != 0)
      {
        v9 = 0;
        *(_QWORD *)&v13 = 0;
      }
      else
      {
        v9 = v13;
      }
    }
    while (v9 != a3);
  }
  v11 = v12;
  result = *(double *)&v13;
  *a6 = v13;
  a6[1] = v11;
  return result;
}

uint64_t std::ostream_iterator<unsigned char,char,std::char_traits<char>>::operator=[abi:ne180100](uint64_t a1, char *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t v5;
  char v7;

  v3 = *(_QWORD **)a1;
  v7 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)&v7, 1);
  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = strlen(*(const char **)(a1 + 8));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)a1, v4, v5);
  }
  return a1;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E2D0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E2D0;
  a2[1] = v2;
  return result;
}

quasar::lm::TokenStringAndCount *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  quasar::lm::TokenStringAndCount *v4;

  v3 = *a2;
  v4 = (quasar::lm::TokenStringAndCount *)operator new();
  quasar::lm::TokenStringAndCount::TokenStringAndCount(v4, (const quasar::lm::TokenStringAndCount *)(**(_QWORD **)(a1 + 8) + (v3 << 7)));
  return v4;
}

void sub_1ADCFF0F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40D9E35CA9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_0>,quasar::lm::TokenStringAndCount * ()(long long)>::target_type()
{
}

quasar::lm::TokenStringAndCount *quasar::lm::TokenStringAndCount::TokenStringAndCount(quasar::lm::TokenStringAndCount *this, const quasar::lm::TokenStringAndCount *a2)
{
  __int128 v4;

  *(_QWORD *)this = *(_QWORD *)a2;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 32), *((__int128 **)a2 + 4), *((__int128 **)a2 + 5), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 7, *((const void **)a2 + 7), *((_QWORD *)a2 + 8), (uint64_t)(*((_QWORD *)a2 + 8) - *((_QWORD *)a2 + 7)) >> 2);
  *((_QWORD *)this + 10) = 0;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 104), *((__int128 **)a2 + 13), *((__int128 **)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
  return this;
}

void sub_1ADCFF26C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void *v7;
  void *v8;
  va_list va;

  va_start(va, a2);
  v7 = *v5;
  if (*v5)
  {
    *(_QWORD *)(v3 + 88) = v7;
    operator delete(v7);
  }
  v8 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 64) = v8;
    operator delete(v8);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (*(char *)(v3 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E328;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E328;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 < (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 7);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_1>,BOOL ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E380;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_2>,void ()(void)>::target_type()
{
}

_QWORD *quasar::lm::Generator<quasar::lm::TokenStringAndCount>::Generator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  *a1 = &unk_1E5D3A938;
  v7 = (uint64_t)(a1 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v7, a3);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a4);
  a1[13] = 0;
  a1[14] = 0;
  return a1;
}

void sub_1ADCFF4C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = v3;
  v6 = *(_QWORD **)(v1 + 64);
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *(_QWORD **)(v1 + 32);
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::lm::Generator<quasar::lm::TokenStringAndCount>::~Generator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3A938;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void quasar::lm::Generator<quasar::lm::TokenStringAndCount>::~Generator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3A938;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::lm::Generator<quasar::lm::TokenStringAndCount>::next(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[13];
  a1[13] = v2 + 1;
  v5 = v2;
  v3 = a1[4];
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  a1[14] = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v5);
  return a1 + 14;
}

uint64_t quasar::lm::Generator<quasar::lm::TokenStringAndCount>::has_next(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  FstCheck(*(_QWORD *)(a1 + 104) >= 0, "(current_idx_) >= (0)", "../libquasar/liblm/include/lm/streams_liblm.h");
  v4 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t quasar::lm::Generator<quasar::lm::TokenStringAndCount>::reset(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[12];
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  a1[13] = 0;
  a1[14] = 0;
  return result;
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

__n128 std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E5D3E3D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E5D3E3D8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void **std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::operator()(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  void **v4;
  int *v5;
  int *v6;
  void **v7;
  int v8;
  int v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;

  v3 = *a2;
  v4 = (void **)operator new();
  quasar::lm::TokenStringAndCount::TokenStringAndCount((quasar::lm::TokenStringAndCount *)v4, (const quasar::lm::TokenStringAndCount *)(**(_QWORD **)(a1 + 8) + (v3 << 7)));
  v5 = (int *)v4[7];
  v6 = (int *)v4[8];
  if (v5 != v6)
  {
    v7 = v4 + 10;
    do
    {
      v8 = quasar::lm::SymbolTableData::lookupTrainId(*(quasar::lm::SymbolTableData **)(a1 + 16), v5, 0);
      v9 = v8;
      v11 = (char *)v4[11];
      v10 = (unint64_t)v4[12];
      if ((unint64_t)v11 >= v10)
      {
        v13 = (char *)*v7;
        v14 = (v11 - (_BYTE *)*v7) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(v4 + 12), v17);
          v13 = (char *)v4[10];
          v11 = (char *)v4[11];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = v9;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        v4[10] = v19;
        v4[11] = v12;
        v4[12] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v11 = v8;
        v12 = v11 + 4;
      }
      v4[11] = v12;
      ++v5;
    }
    while (v5 != v6);
  }
  return v4;
}

void sub_1ADCFF980(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1032C40D9E35CA9);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_3>,quasar::lm::TokenStringAndCount * ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E430;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E430;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return *a2 < (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 7);
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_4>,BOOL ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E5D3E488;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E5D3E488;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5,std::allocator<quasar::_populateNgramCountContext(std::unique_ptr<srilm::NgramCountContext> &,std::string const&,std::string const&,quasar::LmData &,BOOL)::$_5>,void ()(void)>::target_type()
{
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADCFFBB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41220;
  a1[1] = 0;
  fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(a1 + 3, a2);
  return a1;
}

void sub_1ADCFFBFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41220;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41220;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ConstFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(v4, a2);
  *a1 = &unk_1E5D22AC8;
  a1[1] = v4;
  return a1;
}

void sub_1ADCFFCC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C402D64F9CALL);
  _Unwind_Resume(a1);
}

uint64_t fst::ConstFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,unsigned int>::ConstFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  _QWORD v24[2];
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  std::string __str;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1AF80;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__str, "const");
  std::string::operator=(v4, &__str);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v6 = *(_QWORD *)(a1 + 40);
  if (v6 != v5)
  {
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    if (v5)
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    else
      v7 = 0;
    *(_QWORD *)(a1 + 40) = v7;
  }
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v9 = *(_QWORD *)(a1 + 48);
  if (v9 != v8)
  {
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (v8)
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
    else
      v10 = 0;
    *(_QWORD *)(a1 + 48) = v10;
  }
  *(_DWORD *)(a1 + 112) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v28);
  while (1)
  {
    if (!v28)
    {
      if ((int)v30 >= v29)
        goto LABEL_40;
      ++*(_DWORD *)(a1 + 96);
LABEL_22:
      v13 = v30;
      goto LABEL_23;
    }
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28);
    v12 = v28;
    if (v11)
      break;
    ++*(_DWORD *)(a1 + 96);
    if (!v12)
      goto LABEL_22;
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
LABEL_23:
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, v13, v24);
    while (1)
    {
      while (!v24[0])
      {
        if (v27 >= v25)
          goto LABEL_33;
        ++*(_QWORD *)(a1 + 104);
LABEL_30:
        ++v27;
      }
      v14 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]);
      v15 = v24[0];
      if (v14)
        break;
      ++*(_QWORD *)(a1 + 104);
      if (!v15)
        goto LABEL_30;
      (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    }
    if (v24[0])
    {
      (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
      goto LABEL_35;
    }
LABEL_33:
    if (v26)
      --*v26;
LABEL_35:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    (*(void (**)(void))(*(_QWORD *)v28 + 8))();
LABEL_40:
  *(_QWORD *)(a1 + 64) = fst::MappedFile::Allocate((fst::MappedFile *)(20 * *(int *)(a1 + 96)), 16);
  v16 = fst::MappedFile::Allocate((fst::MappedFile *)(16 * *(_QWORD *)(a1 + 104)), 16);
  *(_QWORD *)(a1 + 72) = v16;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v16 + 8);
  if (*(int *)(a1 + 96) < 1)
    goto LABEL_62;
  v17 = 0;
  v18 = 0;
  while (2)
  {
    *(float *)(*(_QWORD *)(a1 + 80) + 20 * v17) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v17);
    v19 = *(_QWORD *)(a1 + 80) + 20 * v17;
    *(_DWORD *)(v19 + 4) = v18;
    *(_QWORD *)(v19 + 8) = 0;
    *(_DWORD *)(v19 + 16) = 0;
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a2 + 136))(a2, v17, v24);
    v20 = 16 * v18;
    while (2)
    {
      if (!v24[0])
      {
        if (v27 >= v25)
          goto LABEL_59;
        goto LABEL_48;
      }
      if (!(*(unsigned int (**)(_QWORD))(*(_QWORD *)v24[0] + 24))(v24[0]))
      {
        if (v24[0])
        {
          v21 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v24[0] + 32))();
LABEL_49:
          v22 = *(_QWORD *)(a1 + 80);
          ++*(_DWORD *)(v22 + 20 * v17 + 8);
          if (!*v21)
            ++*(_DWORD *)(v22 + 20 * v17 + 12);
          if (!v21[1])
            ++*(_DWORD *)(v22 + 20 * v17 + 16);
          *(_OWORD *)(*(_QWORD *)(a1 + 88) + v20) = *(_OWORD *)v21;
          if (v24[0])
            (*(void (**)(_QWORD))(*(_QWORD *)v24[0] + 40))(v24[0]);
          else
            ++v27;
          v20 += 16;
          ++v18;
          continue;
        }
LABEL_48:
        v21 = (_DWORD *)(v24[1] + 16 * v27);
        goto LABEL_49;
      }
      break;
    }
    if (v24[0])
    {
      (*(void (**)(void))(*(_QWORD *)v24[0] + 8))();
      goto LABEL_61;
    }
LABEL_59:
    if (v26)
      --*v26;
LABEL_61:
    if (++v17 < *(int *)(a1 + 96))
      continue;
    break;
  }
LABEL_62:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1ADD001A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  if (a23 < 0)
    operator delete(__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v23);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD002A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41258;
  a1[1] = 0;
  fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADD002F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41258;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41258;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFst(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(v4, a2, 0);
  *(_QWORD *)a1 = &unk_1E5D22B80;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1ADD003DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C40C4ACC742);
  _Unwind_Resume(a1);
}

_QWORD *fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFst(_QWORD *a1)
{
  void *v2;
  _DWORD *v3;
  int v4;

  *a1 = &unk_1E5D22B80;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1E5D23B30;
  v3 = (_DWORD *)a1[1];
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFst(_QWORD *a1)
{
  void *v2;
  _DWORD *v3;
  int v4;

  *a1 = &unk_1E5D22B80;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1E5D23B30;
  v3 = (_DWORD *)a1[1];
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start()
{
  return 1;
}

float fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NumArcs(uint64_t a1, int a2)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(a1 + 8), a2, a1 + 16);
  if (a2)
    return *(_QWORD *)(a1 + 24) + 1;
  else
    return *(_QWORD *)(a1 + 24);
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Copy(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *(_QWORD *)result = &unk_1E5D22B80;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 16) = -1;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = -1;
  return result;
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(v2 + 104);
  return result;
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(a1 + 8), a2, a1 + 16);
  v6 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 48) != v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 40) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v7 + 216), v6);
  }
  v8 = operator new();
  result = fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::ArcIterator(v8, a1, a2);
  *a3 = v8;
  return result;
}

void sub_1ADD0072C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40D85477E9);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::InitMatcher(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADD007A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 104);
}

_QWORD *fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstImpl(_QWORD *a1, uint64_t a2, std::vector<unsigned int> *a3)
{
  _QWORD *v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  fst *v26;
  _QWORD *v27;
  fst *v28;
  _QWORD *v29;
  char *v30;
  unsigned int *v31;
  uint64_t v32;
  unint64_t v33;
  int *v34;
  unint64_t v35;
  char *v36;
  int *v37;
  unsigned int *v38;
  int v39;
  _DWORD *v40;
  uint64_t v41;
  unint64_t v42;
  int v43;
  float v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  fst *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  unint64_t v81;
  std::vector<unsigned int> *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _DWORD *v94;
  uint64_t v95;
  _DWORD *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  fst *v100;
  _QWORD *v101;
  fst *v102;
  _QWORD *v103;
  fst *v104;
  _QWORD *v105;
  _QWORD *v106;
  int v107;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  const unint64_t *v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  uint64_t v116;
  const unint64_t *v117;
  char *v118;
  unint64_t v119;
  int v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  void *v131;
  uint64_t v132;
  unint64_t v133;
  _DWORD *v134;
  unint64_t v135;
  void *__p[2];
  __int128 v137;
  unsigned __int128 v138;
  float v139[4];
  void *v140;
  _QWORD *v141;
  void *v142[3];
  __int128 __str;
  __int128 __str_16;
  __int128 v145;

  v4 = a1;
  *a1 = &unk_1E5D227F0;
  a1[1] = 0;
  v5 = (std::string *)(a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(a1 + 2, "null");
  v4[5] = 0;
  v6 = v4 + 5;
  v4[6] = 0;
  v4[7] = 1;
  *((_DWORD *)v4 + 16) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)v4 + 68) = _D0;
  *v4 = &unk_1E5D1AFB8;
  v4[16] = 0;
  v4[17] = 0;
  *(_OWORD *)(v4 + 27) = 0u;
  v4[10] = 0;
  v4[11] = 0;
  *((_BYTE *)v4 + 96) = 0;
  *(_OWORD *)(v4 + 29) = 0u;
  *(_OWORD *)(v4 + 31) = 0u;
  *(_OWORD *)(v4 + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  *(_OWORD *)(v4 + 37) = 0u;
  *(_OWORD *)(v4 + 39) = 0u;
  *(_OWORD *)(v4 + 41) = 0u;
  *(_OWORD *)(v4 + 43) = 0u;
  *(_OWORD *)(v4 + 45) = 0u;
  *(_OWORD *)(v4 + 47) = 0u;
  *(_OWORD *)(v4 + 49) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__str, "ngram");
  std::string::operator=(v5, (const std::string *)&__str);
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v13 = *v6;
  if (*v6 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *v6 = v14;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v16 = v4[6];
  if (v16 != v15)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v15)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    else
      v17 = 0;
    v4[6] = v17;
  }
  v4[1] = v4[1] & 4 | 0x25A555550001;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10011050000, 1) == 0x10011050000)
  {
    v18 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    v127 = 4 * v18;
    v129 = operator new[]();
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v119 = v18;
    v120 = v18;
    while (1)
    {
      if ((_DWORD)v19 == -1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
        v28 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
        v29 = (_QWORD *)fst::cerr(v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Could not identify unigram state.", 33);
        goto LABEL_92;
      }
      *(_QWORD *)&v145 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, v19, &__str);
      if ((_QWORD)__str)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)__str + 24))(__str))
          goto LABEL_29;
        if ((_QWORD)__str)
        {
          v20 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)__str + 32))(__str);
          goto LABEL_26;
        }
      }
      else if ((unint64_t)v145 >= (unint64_t)__str_16)
      {
LABEL_29:
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v22 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
        v23 = (_QWORD *)fst::cerr(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unigram state ", 14);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" has no arcs.", 13);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
        if (SBYTE7(v137) < 0)
          operator delete(__p[0]);
        goto LABEL_31;
      }
      v20 = (_DWORD *)(*((_QWORD *)&__str + 1) + 16 * v145);
LABEL_26:
      if (!*v20)
      {
        if ((_QWORD)__str)
          v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)__str + 32))(__str);
        else
          v21 = *((_QWORD *)&__str + 1) + 16 * v145;
        v19 = *(unsigned int *)(v21 + 12);
        v25 = 1;
        goto LABEL_32;
      }
LABEL_31:
      v25 = 0;
LABEL_32:
      if ((_QWORD)__str)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)__str + 8))(__str);
      }
      else if (*((_QWORD *)&__str_16 + 1))
      {
        --**((_DWORD **)&__str_16 + 1);
      }
      if ((v25 & 1) == 0)
      {
        __str_16 = 0u;
        v145 = 0u;
        __str = 0u;
        std::vector<BOOL>::vector(v142, v119);
        __p[0] = (void *)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        std::deque<std::pair<int,int>>::push_back(&__str, __p);
        *(_QWORD *)&v138 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v19, __p);
        while (1)
        {
          if (!__p[0])
          {
            if ((unint64_t)v138 >= (unint64_t)v137)
              goto LABEL_59;
LABEL_50:
            v30 = (char *)__p[1] + 16 * v138;
LABEL_51:
            v31 = (unsigned int *)((char *)__p[1] + 16 * v138);
            goto LABEL_52;
          }
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
            break;
          if (!__p[0])
            goto LABEL_50;
          v30 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
          if (!__p[0])
            goto LABEL_51;
          v31 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
LABEL_52:
          v131 = (void *)(*((unsigned int *)v30 + 3) | ((unint64_t)*v31 << 32));
          std::deque<std::pair<int,int>>::push_back(&__str, &v131);
          if (__p[0])
            (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
          else
            *(_QWORD *)&v138 = v138 + 1;
        }
        if (__p[0])
        {
          (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
          goto LABEL_61;
        }
LABEL_59:
        if (*((_QWORD *)&v137 + 1))
          --**((_DWORD **)&v137 + 1);
LABEL_61:
        v32 = *((_QWORD *)&v145 + 1);
        if (!*((_QWORD *)&v145 + 1))
          goto LABEL_84;
        v33 = v145;
        while (2)
        {
          v34 = (int *)(*(_QWORD *)(*((_QWORD *)&__str + 1) + ((v33 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v33 & 0x1FF));
          v35 = *v34;
          v36 = (char *)v142[0];
          if (((*(_QWORD *)((char *)v142[0] + ((v35 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v35) & 1) != 0)
            goto LABEL_81;
          v37 = (int *)(*(_QWORD *)(*((_QWORD *)&__str + 1) + ((v33 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v33 & 0x1FF));
          v39 = v34[1];
          v38 = (unsigned int *)(v34 + 1);
          *(_DWORD *)(v129 + 4 * v35) = v39;
          *(_QWORD *)&v36[((unint64_t)*v37 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *v37;
          *(_QWORD *)&v138 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
          while (2)
          {
            if (!__p[0])
            {
              if ((unint64_t)v138 >= (unint64_t)v137)
                goto LABEL_78;
              goto LABEL_70;
            }
            if (!(*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
            {
              if (__p[0])
              {
                v40 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
LABEL_71:
                if (*v40)
                {
                  v131 = (void *)(v40[3] | ((unint64_t)*v38 << 32));
                  std::deque<std::pair<int,int>>::push_back(&__str, &v131);
                }
                if (__p[0])
                  (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
                else
                  *(_QWORD *)&v138 = v138 + 1;
                continue;
              }
LABEL_70:
              v40 = (char *)__p[1] + 16 * v138;
              goto LABEL_71;
            }
            break;
          }
          if (__p[0])
          {
            (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
            goto LABEL_80;
          }
LABEL_78:
          if (*((_QWORD *)&v137 + 1))
            --**((_DWORD **)&v137 + 1);
LABEL_80:
          v32 = *((_QWORD *)&v145 + 1);
          v33 = v145;
LABEL_81:
          --v32;
          *(_QWORD *)&v145 = ++v33;
          *((_QWORD *)&v145 + 1) = v32;
          if (v33 >= 0x400)
          {
            operator delete(**((void ***)&__str + 1));
            v33 = v145 - 512;
            *((_QWORD *)&__str + 1) += 8;
            *(_QWORD *)&v145 = v145 - 512;
            v32 = *((_QWORD *)&v145 + 1);
          }
          if (v32)
            continue;
          break;
        }
LABEL_84:
        v142[1] = 0;
        *(_DWORD *)(v129 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)) = 0;
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v140);
        if (v120 < 1)
        {
          v42 = 0;
        }
        else
        {
          v41 = 0;
          v42 = 0;
          do
          {
            LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v41);
            LODWORD(v131) = 2139095040;
            if (*(float *)__p != INFINITY)
              ++v42;
            v43 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v140);
            v44 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v41);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v140, v43, v44);
            v41 = (v41 + 1);
          }
          while (v120 != (_DWORD)v41);
        }
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v140);
        v45 = v141;
        *((_DWORD *)v141 + 22) = v19;
        v46 = (*(uint64_t (**)(_QWORD *))(*v45 + 24))(v45);
        v45[1] = v46 & 0xCCFFFFF0007 | (((v46 >> 35) & 1) << 37) | v45[1] & 4;
        v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols((uint64_t)&v140, v47);
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols((uint64_t)&v140, v48);
        LODWORD(v133) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 128))(a2, &v131);
        v49 = 0;
        v50 = 0;
        while (2)
        {
          if (!v131)
          {
            if ((int)v133 >= (int)v132)
              goto LABEL_120;
            goto LABEL_102;
          }
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v131 + 16))(v131))
          {
            if (v131)
            {
              v51 = (*(uint64_t (**)(void))(*(_QWORD *)v131 + 24))();
              goto LABEL_103;
            }
LABEL_102:
            v51 = v133;
LABEL_103:
            v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v51);
            v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v51);
            *(_QWORD *)&v138 = 0;
            (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v51, __p);
            if (__p[0])
            {
              if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
                goto LABEL_111;
              if (__p[0])
              {
                v54 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
LABEL_109:
                if (!*(_DWORD *)v54)
                {
                  v55 = v50;
                  v139[0] = *(float *)(v129 + 4 * (int)v51);
                  v139[1] = v139[0];
                  v56 = *((_DWORD *)v54 + 3);
                  v139[2] = *((float *)v54 + 2);
                  LODWORD(v139[3]) = v51;
                  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v140);
                  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v141, v56, v139);
                  ++v49;
                  v50 = v55;
                }
LABEL_111:
                if (__p[0])
                {
                  (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
                }
                else if (*((_QWORD *)&v137 + 1))
                {
                  --**((_DWORD **)&v137 + 1);
                }
                v50 = v52 + v50 - v53;
                if (v131)
                  (*(void (**)(void *))(*(_QWORD *)v131 + 32))(v131);
                else
                  LODWORD(v133) = v133 + 1;
                continue;
              }
            }
            else if ((unint64_t)v138 >= (unint64_t)v137)
            {
              goto LABEL_111;
            }
            v54 = (char *)__p[1] + 16 * v138;
            goto LABEL_109;
          }
          break;
        }
        if (v131)
          (*(void (**)(void))(*(_QWORD *)v131 + 8))();
LABEL_120:
        v57 = v141[9] - v141[8];
        if (v49 == (uint64_t)((v57 << 29) - 0x100000000) >> 32)
        {
          if (v120 == (v57 >> 3))
          {
            v121 = v42;
            __p[0] = 0;
            v111 = (uint64_t)v4;
            v58 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v140, 268697600, (uint64_t *)__p);
            v59 = v58;
            v141[1] = v141[1] & (~(uint64_t)__p[0] | 4) | (unint64_t)__p[0] & v58;
            if ((v58 & 0x40000) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
              v60 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
              v61 = (_QWORD *)fst::cerr(v60);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input fst is not structured properly", 36);
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
              if (SBYTE7(v137) < 0)
                operator delete(__p[0]);
            }
            if ((v59 & 0x10000000) == 0)
              fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v140);
            MEMORY[0x1AF44D160](v129, 0x1000C8052888210);
            fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_DWORD *)v4 + 16, (unsigned int *)v4 + 15, (_DWORD *)v4 + 17, (_DWORD *)v4 + 18);
            v122 = a2;
            v62 = (2 * v119 + 64) >> 6;
            v63 = v50 + v119 + 64;
            v109 = fst::MappedFile::Allocate((fst::MappedFile *)(((4 * (v50 + v119) + 8 * (v62 + ((v119 + 63) >> 6) + (v63 >> 6)) + 31) & 0xFFFFFFFFFFFFFFFCLL)+ 4 * (v50 + v119 + v42)+ 8), 16);
            v64 = *(unint64_t **)(v109 + 8);
            bzero(v64, ((4 * (v50 + v119) + 8 * (v62 + ((v119 + 63) >> 6) + (v63 >> 6)) + 31) & 0xFFFFFFFFFFFFFFFCLL)+ 4 * (v50 + v119 + v42)+ 8);
            *v64 = v119;
            v64[1] = v50;
            v64[2] = v42;
            v65 = v64 + 3;
            v66 = (v63 >> 6) + v62;
            v67 = v66 + ((v119 + 63) >> 6);
            v68 = v67 * 8 + 24 + v127 + 4;
            v69 = v68 + 4 * v50;
            v64[3] |= 1uLL;
            LODWORD(v64[v67 + 3]) = -1;
            v112 = v64;
            *(_DWORD *)((char *)v64 + v69) = 2139095040;
            if (a3)
            {
              a3->__end_ = a3->__begin_;
              std::vector<int>::resize(a3, v119);
            }
            v137 = 0u;
            v138 = 0u;
            *(_OWORD *)__p = 0u;
            LODWORD(v131) = *((_DWORD *)v141 + 22);
            std::deque<int>::push_back(__p, &v131);
            v110 = v50 + v119;
            v113 = v50;
            if (!*((_QWORD *)&v138 + 1))
            {
              v71 = 0;
              v70 = 0;
              LODWORD(v80) = 0;
              v77 = 2;
              v128 = 1;
              v78 = 1;
              v81 = v121;
              goto LABEL_174;
            }
            v70 = 0;
            v71 = 0;
            v72 = v69 + v127 + 4;
            v73 = (char *)v112 + v68;
            v74 = (char *)v112 + v72;
            v118 = (char *)v112 + 4 * v113 + v72;
            v75 = v138;
            v117 = &v112[v67];
            v76 = (uint64_t)v112 + 4 * v113 + v127 + v67 * 8 + 28;
            v77 = 2;
            v78 = 1;
            v128 = 1;
            v130 = v74;
            v79 = &v65[v62];
            v115 = &v65[v66];
            v116 = v76;
            v80 = 0;
            v81 = v121;
            v82 = a3;
            v114 = v73;
            while (1)
            {
              v83 = *(_QWORD *)((char *)__p[1] + ((v75 >> 7) & 0x1FFFFFFFFFFFFF8));
              v84 = v75 & 0x3FF;
              if (v82)
                v82->__begin_[*(int *)(v83 + 4 * v84)] = v80;
              v85 = v141[8];
              v86 = **(float **)(v85 + 8 * *(int *)(v83 + 4 * v84));
              *(float *)&v131 = v86;
              v139[0] = INFINITY;
              if (v86 != INFINITY)
              {
                *(_QWORD *)((char *)v115 + ((v80 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v80;
                *(float *)&v118[4 * v70++] = v86;
                v85 = v141[8];
              }
              v87 = *(int *)(v83 + 4 * v84);
              v89 = (uint64_t *)(*(_QWORD *)(v85 + 8 * v87) + 24);
              v88 = *v89;
              v90 = v89[1] - *v89;
              if (v90)
              {
                v123 = v84;
                v124 = v83;
                v125 = v80;
                v91 = 0;
                v92 = v90 >> 4;
                if (v92 <= 1)
                  v93 = 1;
                else
                  v93 = v92;
                v94 = (_DWORD *)(v88 + 12);
                do
                {
                  *((_DWORD *)v117 + v128 + v91 + 6) = *(v94 - 3);
                  *(_DWORD *)(v116 + 4 * v128 + 4 * v91) = *(v94 - 1);
                  *(_QWORD *)((char *)v65 + (((unint64_t)(v77 + v91) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (v77 + v91);
                  std::deque<int>::push_back(__p, v94);
                  v94 += 4;
                  ++v91;
                }
                while (v93 != v91);
                v87 = *(unsigned int *)(v124 + 4 * v123);
                v77 += v91;
                v82 = a3;
                v128 += v91;
                v81 = v121;
                v80 = v125;
                v73 = v114;
              }
              v135 = 0;
              (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v122 + 136))(v122, v87, &v131);
              ++v77;
              while (1)
              {
                if (!v131)
                {
                  if (v135 >= v133)
                    goto LABEL_156;
                  goto LABEL_148;
                }
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v131 + 24))(v131))
                  break;
                if (v131)
                {
                  v96 = (_DWORD *)(*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v131 + 32))(v131, v95);
                  goto LABEL_149;
                }
LABEL_148:
                v96 = (_DWORD *)(v132 + 16 * v135);
LABEL_149:
                if (*v96)
                {
                  *(_DWORD *)&v73[4 * v71] = *v96;
                  *(_DWORD *)&v130[4 * v71++] = v96[2];
                  v97 = 1 << v78;
                  v98 = v78++ >> 3;
                  *(_QWORD *)((char *)v79 + (v98 & 0x1FFFFFFFFFFFFFF8)) |= v97;
                }
                if (v131)
                  (*(void (**)(void *))(*(_QWORD *)v131 + 40))(v131);
                else
                  ++v135;
              }
              if (v131)
              {
                (*(void (**)(void *, uint64_t))(*(_QWORD *)v131 + 8))(v131, v95);
                goto LABEL_158;
              }
LABEL_156:
              if (v134)
                --*v134;
LABEL_158:
              v99 = *((_QWORD *)&v138 + 1) - 1;
              v75 = v138 + 1;
              v138 = __PAIR128__(*((unint64_t *)&v138 + 1), (uint64_t)v138 + 1) + __PAIR128__(-1, 0);
              if (v75 >= 0x800)
              {
                operator delete(*(void **)__p[1]);
                v75 = v138 - 1024;
                __p[1] = (char *)__p[1] + 8;
                *(_QWORD *)&v138 = v138 - 1024;
                v99 = *((_QWORD *)&v138 + 1);
              }
              ++v80;
              ++v78;
              if (!v99)
              {
LABEL_174:
                if ((_DWORD)v80 == v120
                  && v77 == ((2 * v119) | 1)
                  && v128 == v119
                  && v71 == v113
                  && v78 == v110 + 1
                  && v70 == v81)
                {
                  v4 = (_QWORD *)v111;
                  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Init(v111, v112, 0, v109);
                }
                else
                {
                  if (FLAGS_fst_error_fatal)
                    std::string::basic_string[abi:ne180100]<0>(&v131, "FATAL");
                  else
                    std::string::basic_string[abi:ne180100]<0>(&v131, "ERROR");
                  v104 = fst::LogMessage::LogMessage((fst *)v139, (uint64_t)&v131);
                  v4 = (_QWORD *)v111;
                  v105 = (_QWORD *)fst::cerr(v104);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"Structure problems detected during construction", 47);
                  fst::LogMessage::~LogMessage((fst::LogMessage *)v139);
                  if (SHIBYTE(v133) < 0)
                    operator delete(v131);
                  *(_QWORD *)(v111 + 8) |= 4uLL;
                }
                std::deque<int>::~deque[abi:ne180100](__p);
                goto LABEL_188;
              }
            }
          }
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v102 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
          v103 = (_QWORD *)fst::cerr(v102);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)"Number of contexts != number of states", 38);
        }
        else
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v100 = fst::LogMessage::LogMessage((fst *)&v131, (uint64_t)__p);
          v101 = (_QWORD *)fst::cerr(v100);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v101, (uint64_t)"Number of contexts arcs != number of states - 1", 47);
        }
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v131);
        if (SBYTE7(v137) < 0)
          operator delete(__p[0]);
        v4[1] |= 4uLL;
LABEL_188:
        v140 = &unk_1E5D256C0;
        v106 = v141;
        if (v141)
        {
          v107 = *((_DWORD *)v141 + 14) - 1;
          *((_DWORD *)v141 + 14) = v107;
          if (!v107)
            (*(void (**)(_QWORD *))(*v106 + 8))(v106);
        }
        if (v142[0])
          operator delete(v142[0]);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](&__str);
        return v4;
      }
    }
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
  v26 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
  v27 = (_QWORD *)fst::cerr(v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"NGramFst only accepts OpenGRM langauge models as input", 54);
LABEL_92:
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v4[1] |= 4uLL;
  return v4;
}

void sub_1ADD019A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46)
{
  uint64_t v46;
  _DWORD *v48;
  int v49;
  void *v50;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v46 - 200));
  if (a37 < 0)
    operator delete(__p);
  std::deque<int>::~deque[abi:ne180100](&a40);
  *(_QWORD *)(v46 - 184) = &unk_1E5D256C0;
  v48 = *(_DWORD **)(v46 - 176);
  if (v48)
  {
    v49 = v48[14] - 1;
    v48[14] = v49;
    if (!v49)
      (*(void (**)(_DWORD *))(*(_QWORD *)v48 + 8))(v48);
  }
  v50 = *(void **)(v46 - 168);
  if (v50)
    operator delete(v50);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((_QWORD *)(v46 - 144));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(a13 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(a13 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(a9);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a13);
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2, unsigned int *a3, _DWORD *a4, _DWORD *a5)
{
  signed int v10;
  uint64_t v11;
  signed int v12;
  signed int v13;
  unsigned int v14;
  fst *v15;
  _QWORD *v16;
  void *__p;
  uint64_t v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unsigned int v24;

  v24 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v22);
  v10 = 0;
  while (1)
  {
    if (!v22)
    {
      if ((int)v24 >= v23)
        goto LABEL_37;
LABEL_7:
      v11 = v24;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22))
      break;
    if (!v22)
      goto LABEL_7;
    v11 = (*(uint64_t (**)(void))(*(_QWORD *)v22 + 24))();
LABEL_8:
    if ((_DWORD)v11 == -1)
      goto LABEL_32;
    v21 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v11, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v21 >= v19)
          goto LABEL_30;
LABEL_23:
        if (*(_DWORD *)(v18 + 16 * v21) > v10)
          v10 = *(_DWORD *)(v18 + 16 * v21);
        goto LABEL_25;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      if (!__p)
        goto LABEL_23;
      (*(void (**)(void))(*(_QWORD *)__p + 32))();
      if (!__p)
        goto LABEL_23;
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (!__p)
        goto LABEL_23;
      v12 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (v12 > v10)
        v10 = v12;
      if (__p)
      {
        v13 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v13 > v10)
          v10 = v13;
        if (!__p)
          goto LABEL_27;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_25:
        if (*(_DWORD *)(v18 + 16 * v21 + 4) > v10)
          v10 = *(_DWORD *)(v18 + 16 * v21 + 4);
LABEL_27:
        ++v21;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_32;
    }
LABEL_30:
    if (v20)
      --*v20;
LABEL_32:
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 32))(v22);
    else
      ++v24;
  }
  if (v22)
    (*(void (**)(void))(*(_QWORD *)v22 + 8))();
LABEL_37:
  v14 = __clz(v10);
  *a3 = v14;
  if (v10 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v15 = fst::LogMessage::LogMessage((fst *)&v22, (uint64_t)&__p);
    v16 = (_QWORD *)fst::cerr(v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v22);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    v14 = *a3;
  }
  *a4 = 1065353216;
  *a5 = 1065353216;
  *a2 = 2 * ~(-1 << (v14 - 1));
}

void sub_1ADD01FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Init(uint64_t a1, const unint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  fst *v23;
  _QWORD *v24;
  uint64_t v25;
  void *__p[2];
  char v27;
  char v28;

  if (*(_BYTE *)(a1 + 96))
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      MEMORY[0x1AF44D160](v8, 0x1000C8077774924);
  }
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_BYTE *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = a2;
  v10 = *a2;
  *(_QWORD *)(a1 + 104) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = a2[2];
  v12 = (2 * v10) | 1;
  v13 = v11 + v10 + 1;
  v14 = 2 * v10 + 64;
  *(_QWORD *)(a1 + 144) = a2 + 3;
  *(_QWORD *)(a1 + 152) = &a2[(v14 >> 6) + 3];
  v15 = ((v11 + v10 + 64) >> 6) + (v14 >> 6);
  *(_QWORD *)(a1 + 160) = &a2[v15 + 3];
  v16 = 8 * (v15 + ((v10 + 63) >> 6)) + 24;
  v17 = (uint64_t)a2 + v16;
  v18 = 4 * v10 + 4;
  v19 = v16 + v18;
  *(_QWORD *)(a1 + 176) = v17;
  *(_QWORD *)(a1 + 184) = (char *)a2 + v19;
  v20 = v19 + 4 * v11;
  v21 = v20 + v18;
  *(_QWORD *)(a1 + 192) = (char *)a2 + v20;
  *(_QWORD *)(a1 + 200) = (char *)a2 + v21;
  *(_QWORD *)(a1 + 208) = (char *)a2 + 4 * v11 + v21;
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 216), a2 + 3, v12);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 280), *(const unint64_t **)(a1 + 152), v13);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 344), *(const unint64_t **)(a1 + 160), *(_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 128) = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), 0);
  *(_QWORD *)(a1 + 136) = v22;
  if (!fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 0)
    && *(_QWORD *)(a1 + 128) == 1
    && (**(_BYTE **)(a1 + 216) & 4) != 0)
  {
    v25 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v25 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 2uLL);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v23 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)__p);
    v24 = (_QWORD *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Malformed file", 14);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (v27 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
}

void sub_1ADD02254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(uint64_t a1)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

void std::deque<std::pair<int,int>>::push_back(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = a1[2];
  v5 = a1[1];
  v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<int,int>>::__add_back_capacity(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  *(_QWORD *)(*(_QWORD *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<std::pair<int,int>>::__add_back_capacity(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_back(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **>>::push_front((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_back(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> **> &>::push_front((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1ADD02604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &unk_1E5D1AFB8;
  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
      MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  }
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 384);
  if (v4)
  {
    *(_QWORD *)(a1 + 392) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(_QWORD *)(a1 + 368) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 296);
  if (v7)
  {
    *(_QWORD *)(a1 + 304) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(_QWORD *)(a1 + 264) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 232);
  if (v9)
  {
    *(_QWORD *)(a1 + 240) = v9;
    operator delete(v9);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (a2)
  {
    v3 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(v2 + 35), a2);
  }
  else
  {
    v3 = v2[16];
    v4 = v2[17];
  }
  return v4 + ~v3;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(uint64_t result, int a2, uint64_t a3)
{
  fst::BitmapIndex *v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_DWORD *)a3 != a2)
  {
    *(_DWORD *)a3 = a2;
    v4 = (fst::BitmapIndex *)(result + 280);
    v5 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(result + 280), a2);
    *(_QWORD *)(a3 + 8) = v6 + ~v5;
    result = fst::BitmapIndex::Rank1(v4, v5 + 1);
    *(_QWORD *)(a3 + 16) = result;
  }
  return result;
}

float fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(uint64_t a1, int a2)
{
  uint64_t v2;

  if (((*(_QWORD *)(*(_QWORD *)(a1 + 344) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
    return INFINITY;
  v2 = *(_QWORD *)(a1 + 208);
  return *(float *)(v2 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 344), a2));
}

BOOL fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v5;
  _BOOL8 v6;
  fst *v7;
  _QWORD *v8;
  void *__p[2];
  char v11;
  char v12;
  _BYTE v13[8];
  void *v14[2];
  void *v15[2];
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v17 = 0u;
  v16 = 0u;
  *(_OWORD *)v15 = 0u;
  *(_OWORD *)v14 = 0u;
  v5 = *(_QWORD *)(a1 + 104);
  v18 = 1;
  v19 = v5;
  v20 = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, 4, (uint64_t)v13);
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v7 = fst::LogMessage::LogMessage((fst *)&v12, (uint64_t)__p);
    v8 = (_QWORD *)fst::cerr(v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v12);
    if (v11 < 0)
      operator delete(__p[0]);
    v6 = 0;
  }
  else
  {
    std::ostream::write();
    v6 = (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
  }
  if (SHIBYTE(v16) < 0)
    operator delete(v15[1]);
  if (SHIBYTE(v15[0]) < 0)
    operator delete(v14[0]);
  return v6;
}

void sub_1ADD02950(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = &unk_1E5D1A408;
  *(_DWORD *)(a1 + 24) = -1;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 15;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  if (a1 + 40 != a2 + 16)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 80), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    v6 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 80);
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(v6, a3, a1 + 40);
  v9 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 64) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v10 + 216), v9);
  }
  return a1;
}

void sub_1ADD02A84(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~ArcIterator(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1A408;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::~ArcIterator(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1A408;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

BOOL fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Done_(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[6];
  if (a1[8])
    ++v1;
  return a1[14] >= v1;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 112);
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Seek_(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 112) != a2)
  {
    *(_QWORD *)(result + 112) = a2;
    *(_DWORD *)(result + 24) = -1;
  }
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::SetFlags_(uint64_t result, char a2, int a3)
{
  *(_DWORD *)(result + 120) = *(_DWORD *)(result + 120) & ~a3 | a2 & 0xF;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>>::Value(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  fst::BitmapIndex *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v4 = v3 == 0;
    LODWORD(v5) = v3 - 1;
    v6 = *(_DWORD *)(a1 + 120);
    v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
      goto LABEL_9;
    if (!v3)
    {
      v8 = 0;
      LODWORD(v3) = -1;
      v4 = 1;
      goto LABEL_8;
    }
    LODWORD(v3) = v3 - 1;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 120);
    v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
    {
      if ((v6 & v7 & 8) == 0)
      {
        if ((v6 & v7 & 4) == 0)
          return a1 + 8;
        goto LABEL_22;
      }
      v5 = *(_QWORD *)(a1 + 112);
LABEL_14:
      if ((v7 & 8) != 0)
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(*(_QWORD *)(a1 + 32), (int *)(a1 + 40));
      v12 = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(*(_QWORD **)(a1 + 32), (_QWORD *)(a1 + 80), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 184) + 4 * (*(_QWORD *)(a1 + 56) + (int)v5)));
      v4 = 0;
      goto LABEL_17;
    }
  }
  v4 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 184) + 4 * (*(_QWORD *)(a1 + 56) + (int)v3));
LABEL_8:
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v8;
  v7 &= 0xFFFFFFFC;
  *(_DWORD *)(a1 + 24) = v7;
  LODWORD(v5) = v3;
LABEL_9:
  if ((v6 & v7 & 8) == 0)
    goto LABEL_18;
  if (!v4)
    goto LABEL_14;
  v9 = (fst::BitmapIndex *)(*(_QWORD *)(a1 + 32) + 216);
  v10 = fst::BitmapIndex::Rank1(v9, v2);
  v11 = fst::BitmapIndex::Select1(v9, v2 + ~v10);
  v12 = fst::BitmapIndex::Rank1(v9, v11);
  v4 = 1;
LABEL_17:
  v7 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF7;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + 24) = v7;
  v6 = *(_DWORD *)(a1 + 120);
LABEL_18:
  if ((v6 & v7 & 4) != 0)
  {
    if (v4)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 192);
      v14 = *(int *)(a1 + 40);
LABEL_23:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(v13 + 4 * v14);
      *(_DWORD *)(a1 + 24) = v7 & 0xFFFFFFFB;
      return a1 + 8;
    }
    LODWORD(v3) = v5;
LABEL_22:
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 200);
    v14 = *(_QWORD *)(a1 + 56) + (int)v3;
    goto LABEL_23;
  }
  return a1 + 8;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;

  v3 = result;
  v4 = a2[8];
  v5 = *a2;
  if (v4 != *a2)
  {
    a2[8] = v5;
    result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(result + 216), v5);
    *((_QWORD *)a2 + 3) = result;
    v4 = *a2;
  }
  if (a2[16] != v4)
  {
    v7 = (void **)(a2 + 10);
    v6 = *((_QWORD *)a2 + 5);
    a2[16] = v4;
    *((_QWORD *)a2 + 6) = v6;
    v8 = *((_QWORD *)a2 + 3);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(v3 + 176);
        v10 = *(_DWORD *)(v9 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8));
        v12 = (char *)*((_QWORD *)a2 + 6);
        v11 = *((_QWORD *)a2 + 7);
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)*v7;
          v15 = (v12 - (_BYTE *)*v7) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 14), v18);
            v14 = (char *)*((_QWORD *)a2 + 5);
            v12 = (char *)*((_QWORD *)a2 + 6);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = v10;
          v13 = v20 + 4;
          while (v12 != v14)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *((_QWORD *)a2 + 5) = v20;
          *((_QWORD *)a2 + 6) = v13;
          *((_QWORD *)a2 + 7) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = v10;
          v13 = v12 + 4;
        }
        *((_QWORD *)a2 + 6) = v13;
        v22 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8);
        result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v3 + 216), v8 + ~v22);
        v8 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(_QWORD *a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  char *v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  fst::BitmapIndex *v20;
  unint64_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  uint64_t v27;
  int *v28;
  int v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  int *v33;
  _DWORD *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = a1[17];
  v5 = v4 - 2;
  if (v4 == 2)
    goto LABEL_11;
  v7 = (char *)a1[21];
  v8 = &v7[4 * v5];
  v9 = v7;
  do
  {
    v10 = v5 >> 1;
    v11 = &v9[4 * (v5 >> 1)];
    v13 = *(_DWORD *)v11;
    v12 = v11 + 4;
    v5 += ~(v5 >> 1);
    if (v13 < a3)
      v9 = v12;
    else
      v5 = v10;
  }
  while (v5);
  if (v9 == v8 || *(_DWORD *)v9 != a3)
  {
LABEL_11:
    v20 = (fst::BitmapIndex *)(a1 + 27);
    v21 = 0;
  }
  else
  {
    v14 = (v9 - v7 + 8) >> 2;
    v15 = a1 + 27;
    v16 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v14);
    if (v16)
    {
      v17 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 27), v16);
      v19 = v18;
    }
    else
    {
      v17 = a1[16];
      v19 = a1[17];
    }
    v23 = v17 + 1;
    if (((*(_QWORD *)(*v15 + (((unint64_t)(v17 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v17 + 1)) & 1) != 0)
    {
      v24 = ((a2[1] - *a2) >> 2) - 1;
      if (v24 >= 0)
      {
        v25 = a1[22];
        v26 = (_DWORD *)(v25 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v17 + 1));
        v27 = (uint64_t)&v26[v19 + ~v17];
        if ((_DWORD *)v27 != v26)
        {
          v28 = (int *)(*a2 + 4 * v24);
          do
          {
            v29 = *v28;
            v30 = (v27 - (uint64_t)v26) >> 2;
            v31 = v26;
            do
            {
              v32 = v30 >> 1;
              v33 = &v31[v30 >> 1];
              v35 = *v33;
              v34 = v33 + 1;
              v30 += ~(v30 >> 1);
              if (v35 < v29)
                v31 = v34;
              else
                v30 = v32;
            }
            while (v30);
            if (v31 == (_DWORD *)v27 || *v31 != v29)
              break;
            v14 = &v31[v23] - v26;
            v36 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v14);
            if (v36)
            {
              v37 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 27), v36);
              v39 = v38;
            }
            else
            {
              v37 = a1[16];
              v39 = a1[17];
            }
            v23 = v37 + 1;
            if (((*(_QWORD *)(*v15 + (((unint64_t)(v37 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v37 + 1)) & 1) == 0)
              break;
            if (v24 <= 0)
              break;
            --v24;
            v40 = a1[22];
            v26 = (_DWORD *)(v40 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 27), v37 + 1));
            v27 = (uint64_t)&v26[v39 + ~v37];
            v28 = (int *)(*a2 + 4 * v24);
          }
          while ((_DWORD *)v27 != v26);
        }
      }
    }
    v20 = (fst::BitmapIndex *)(a1 + 27);
    v21 = v14;
  }
  return fst::BitmapIndex::Rank1(v20, v21);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D1ECD0;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v9 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v9 + 32) = a3;
  *(_BYTE *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 60) = xmmword_1AE142840;
  if (a3 == 1)
    *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstMatcher(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1ECD0;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::~NGramFstMatcher(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1ECD0;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(v2, a1);
  return v2;
}

void sub_1ADD0326C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetState_(uint64_t a1, int a2)
{
  uint64_t result;

  result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, a1 + 16);
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Find_(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _DWORD *v11;
  unint64_t v12;
  int *v13;
  _DWORD *v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  fst::BitmapIndex *v18;
  uint64_t v19;
  unint64_t v20;

  *(_BYTE *)(a1 + 92) = 1;
  if ((a2 + 1) > 1)
  {
    *(_BYTE *)(a1 + 112) = 0;
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_QWORD *)(v7 + 184) + 4 * v8;
      v10 = (_DWORD *)(v9 + 4 * v5);
      v11 = (_DWORD *)v9;
      do
      {
        v12 = v5 >> 1;
        v13 = &v11[v5 >> 1];
        v15 = *v13;
        v14 = v13 + 1;
        v5 += ~(v5 >> 1);
        if (v15 < a2)
          v11 = v14;
        else
          v5 = v12;
      }
      while (v5);
      if (v11 != v10 && *v11 == a2)
      {
        *(_DWORD *)(a1 + 96) = a2;
        *(_DWORD *)(a1 + 100) = a2;
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)(v7 + 200) + 4 * (v8 + (((unint64_t)v11 - v9) >> 2)));
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstContext(*(_QWORD *)(v6 + 8), (int *)(a1 + 16));
        *(_DWORD *)(a1 + 108) = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Transition(*(_QWORD **)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(a1 + 56), a2);
LABEL_19:
        *(_BYTE *)(a1 + 92) = 0;
      }
    }
  }
  else
  {
    if (a2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      if (!v4)
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) ^ 1;
      goto LABEL_15;
    }
    *(_BYTE *)(a1 + 112) = 1;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 128) = v4;
    if (v4)
    {
LABEL_15:
      *(_QWORD *)(a1 + 96) = 0;
      if (*(_DWORD *)(a1 + 48) == v4)
      {
        v16 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        *(_DWORD *)(a1 + 48) = v4;
        v16 = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v17 + 216), v4);
        *(_QWORD *)(a1 + 40) = v16;
      }
      v18 = (fst::BitmapIndex *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 216);
      v19 = fst::BitmapIndex::Rank1(v18, v16);
      v20 = fst::BitmapIndex::Select1(v18, v16 + ~v19);
      *(_DWORD *)(a1 + 108) = fst::BitmapIndex::Rank1(v18, v20);
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 192)
                                        + 4 * *(int *)(a1 + 16));
      goto LABEL_19;
    }
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) ^ 1;
}

BOOL fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 92) != 0;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
    return a1 + 116;
  else
    return a1 + 96;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 112))
    *(_BYTE *)(result + 112) = 0;
  else
    *(_BYTE *)(result + 92) = 1;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::NGramFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1ECD0;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 80);
  v9 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 56) = 0;
  *(_OWORD *)(v8 + 60) = xmmword_1AE142840;
  if (v9 == 1)
    *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD035CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D41290;
  a1[1] = 0;
  fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1ADD03618(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41290;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFst(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(v4, a2, 0);
  *(_QWORD *)a1 = &unk_1E5D22C38;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = -1;
  *(_DWORD *)(a1 + 48) = -1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 80) = -1;
  return a1;
}

void sub_1ADD03700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F3C407D00F10ALL);
  _Unwind_Resume(a1);
}

_QWORD *fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFst(_QWORD *a1)
{
  void *v2;
  _DWORD *v3;
  int v4;

  *a1 = &unk_1E5D22C38;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1E5D23BE8;
  v3 = (_DWORD *)a1[1];
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFst(_QWORD *a1)
{
  void *v2;
  _DWORD *v3;
  int v4;

  *a1 = &unk_1E5D22C38;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_1E5D23BE8;
  v3 = (_DWORD *)a1[1];
  if (v3)
  {
    v4 = v3[14] - 1;
    v3[14] = v4;
    if (!v4)
      (*(void (**)(_DWORD *))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start()
{
  return 1;
}

float fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::Final(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NumArcs(uint64_t a1, int a2)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(a1 + 8), a2, a1 + 16);
  if (a2)
    return *(_QWORD *)(a1 + 24) + 1;
  else
    return *(_QWORD *)(a1 + 24);
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

BOOL fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return a2 != 0;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Copy(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *(_QWORD *)result = &unk_1E5D22C38;
  *(_QWORD *)(result + 8) = v3;
  *(_DWORD *)(result + 16) = -1;
  *(_DWORD *)(result + 48) = -1;
  *(_QWORD *)(result + 64) = 0;
  *(_QWORD *)(result + 72) = 0;
  *(_QWORD *)(result + 56) = 0;
  *(_DWORD *)(result + 80) = -1;
  return result;
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  return fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(*(_QWORD *)(a1 + 8), a2, a3);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_QWORD *)(v2 + 104);
  return result;
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(a1 + 8), a2, a1 + 16);
  v6 = *(_DWORD *)(a1 + 16);
  if (*(_DWORD *)(a1 + 48) != v6)
  {
    v7 = *(_QWORD *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = v6;
    *(_QWORD *)(a1 + 40) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v7 + 216), v6);
  }
  v8 = operator new();
  result = fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::ArcIterator(v8, a1, a2);
  *a3 = v8;
  return result;
}

void sub_1ADD03A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40D85477E9);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::InitMatcher(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(v4, a1, a2);
  return v4;
}

void sub_1ADD03AC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

BOOL fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 80) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 104);
}

_QWORD *fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstImpl(_QWORD *a1, uint64_t a2, std::vector<unsigned int> *a3)
{
  _QWORD *v4;
  std::string *v5;
  uint64_t *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  fst *v22;
  _QWORD *v23;
  _QWORD *v24;
  char v25;
  fst *v26;
  _QWORD *v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  char *v31;
  unsigned int *v32;
  uint64_t v33;
  unint64_t v34;
  int *v35;
  unint64_t v36;
  char *v37;
  int *v38;
  unsigned int *v39;
  int v40;
  _DWORD *v41;
  uint64_t v42;
  unint64_t v43;
  int v44;
  float v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  int v56;
  unint64_t v57;
  unint64_t v58;
  int v59;
  fst *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  unint64_t v68;
  _DWORD *v69;
  float v70;
  _BOOL4 v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  std::vector<unsigned int> *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float *v93;
  float v94;
  _BOOL4 v95;
  float v96;
  uint64_t v97;
  float v98;
  _BOOL4 v99;
  float v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  fst *v104;
  _QWORD *v105;
  fst *v106;
  _QWORD *v107;
  fst *v108;
  _QWORD *v109;
  _QWORD *v110;
  int v111;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  const unint64_t *v116;
  uint64_t v117;
  unint64_t v118;
  char *v119;
  uint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v128;
  uint64_t v129;
  unint64_t v130;
  unsigned int *v131;
  float *v132;
  void *v133;
  uint64_t v134;
  unint64_t v135;
  _DWORD *v136;
  unint64_t v137;
  void *__p[2];
  __int128 v139;
  unsigned __int128 v140;
  float v141[4];
  void *v142;
  _QWORD *v143;
  void *v144[3];
  __int128 __str;
  __int128 __str_16;
  __int128 v147;

  v4 = a1;
  *a1 = &unk_1E5D227F0;
  a1[1] = 0;
  v5 = (std::string *)(a1 + 2);
  std::string::basic_string[abi:ne180100]<0>(a1 + 2, "null");
  v4[5] = 0;
  v6 = v4 + 5;
  v4[6] = 0;
  v4[7] = 1;
  *((_DWORD *)v4 + 16) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)((char *)v4 + 68) = _D0;
  v132 = (float *)v4 + 17;
  *v4 = &unk_1E5D1AFF0;
  v4[16] = 0;
  v4[17] = 0;
  *(_OWORD *)(v4 + 27) = 0u;
  v4[10] = 0;
  v4[11] = 0;
  *((_BYTE *)v4 + 96) = 0;
  *(_OWORD *)(v4 + 29) = 0u;
  *(_OWORD *)(v4 + 31) = 0u;
  *(_OWORD *)(v4 + 33) = 0u;
  *(_OWORD *)(v4 + 35) = 0u;
  *(_OWORD *)(v4 + 37) = 0u;
  *(_OWORD *)(v4 + 39) = 0u;
  *(_OWORD *)(v4 + 41) = 0u;
  *(_OWORD *)(v4 + 43) = 0u;
  *(_OWORD *)(v4 + 45) = 0u;
  *(_OWORD *)(v4 + 47) = 0u;
  *(_OWORD *)(v4 + 49) = 0u;
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString((std::string *)&__str);
  std::string::operator=(v5, (const std::string *)&__str);
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v13 = *v6;
  if (*v6 != v12)
  {
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    if (v12)
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
    else
      v14 = 0;
    *v6 = v14;
  }
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v16 = v4[6];
  if (v16 != v15)
  {
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    if (v15)
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    else
      v17 = 0;
    v4[6] = v17;
  }
  v4[1] = v4[1] & 4 | 0x25A555550001;
  if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x10011050000, 1) == 0x10011050000)
  {
    v18 = fst::CountStates<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>(a2);
    v129 = operator new[]();
    v123 = 4 * v18;
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v131 = (unsigned int *)v4 + 15;
    v128 = v18;
    v121 = v18;
    while (1)
    {
      if ((_DWORD)v19 == -1)
      {
        if (FLAGS_fst_error_fatal)
          std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
        else
          std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
        v28 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
        v29 = (_QWORD *)fst::cerr(v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Could not identify unigram state.", 33);
        goto LABEL_92;
      }
      *(_QWORD *)&v147 = 0;
      (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 136))(a2, v19, &__str);
      if ((_QWORD)__str)
      {
        if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)__str + 24))(__str))
          goto LABEL_29;
        if ((_QWORD)__str)
        {
          v20 = (_DWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)__str + 32))(__str);
          goto LABEL_26;
        }
      }
      else if ((unint64_t)v147 >= (unint64_t)__str_16)
      {
LABEL_29:
        std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
        v22 = fst::LogMessage::LogMessage((fst *)&v133, (uint64_t)__p);
        v23 = (_QWORD *)fst::cerr(v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Unigram state ", 14);
        v24 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" has no arcs.", 13);
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v133);
        if (SBYTE7(v139) < 0)
          operator delete(__p[0]);
        goto LABEL_31;
      }
      v20 = (_DWORD *)(*((_QWORD *)&__str + 1) + 16 * v147);
LABEL_26:
      if (!*v20)
      {
        if ((_QWORD)__str)
          v21 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)__str + 32))(__str);
        else
          v21 = *((_QWORD *)&__str + 1) + 16 * v147;
        v19 = *(unsigned int *)(v21 + 12);
        v25 = 1;
        goto LABEL_32;
      }
LABEL_31:
      v25 = 0;
LABEL_32:
      if ((_QWORD)__str)
      {
        (*(void (**)(_QWORD))(*(_QWORD *)__str + 8))(__str);
      }
      else if (*((_QWORD *)&__str_16 + 1))
      {
        --**((_DWORD **)&__str_16 + 1);
      }
      if ((v25 & 1) == 0)
      {
        __str_16 = 0u;
        v147 = 0u;
        __str = 0u;
        std::vector<BOOL>::vector(v144, v121);
        v30 = v128;
        __p[0] = (void *)(*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
        std::deque<std::pair<int,int>>::push_back(&__str, __p);
        *(_QWORD *)&v140 = 0;
        (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v19, __p);
        while (1)
        {
          if (!__p[0])
          {
            if ((unint64_t)v140 >= (unint64_t)v139)
              goto LABEL_59;
LABEL_50:
            v31 = (char *)__p[1] + 16 * v140;
LABEL_51:
            v32 = (unsigned int *)((char *)__p[1] + 16 * v140);
            goto LABEL_52;
          }
          if ((*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
            break;
          if (!__p[0])
            goto LABEL_50;
          v31 = (char *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
          if (!__p[0])
            goto LABEL_51;
          v32 = (unsigned int *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
LABEL_52:
          v133 = (void *)(*((unsigned int *)v31 + 3) | ((unint64_t)*v32 << 32));
          std::deque<std::pair<int,int>>::push_back(&__str, &v133);
          if (__p[0])
            (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
          else
            *(_QWORD *)&v140 = v140 + 1;
        }
        if (__p[0])
        {
          (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
          goto LABEL_61;
        }
LABEL_59:
        if (*((_QWORD *)&v139 + 1))
          --**((_DWORD **)&v139 + 1);
LABEL_61:
        v33 = *((_QWORD *)&v147 + 1);
        if (!*((_QWORD *)&v147 + 1))
          goto LABEL_84;
        v34 = v147;
        while (2)
        {
          v35 = (int *)(*(_QWORD *)(*((_QWORD *)&__str + 1) + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v34 & 0x1FF));
          v36 = *v35;
          v37 = (char *)v144[0];
          if (((*(_QWORD *)((char *)v144[0] + ((v36 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v36) & 1) != 0)
            goto LABEL_81;
          v38 = (int *)(*(_QWORD *)(*((_QWORD *)&__str + 1) + ((v34 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v34 & 0x1FF));
          v40 = v35[1];
          v39 = (unsigned int *)(v35 + 1);
          *(_DWORD *)(v129 + 4 * v36) = v40;
          *(_QWORD *)&v37[((unint64_t)*v38 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << *v38;
          *(_QWORD *)&v140 = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
          while (2)
          {
            if (!__p[0])
            {
              if ((unint64_t)v140 >= (unint64_t)v139)
                goto LABEL_78;
              goto LABEL_70;
            }
            if (!(*(unsigned int (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]))
            {
              if (__p[0])
              {
                v41 = (_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p[0] + 32))();
LABEL_71:
                if (*v41)
                {
                  v133 = (void *)(v41[3] | ((unint64_t)*v39 << 32));
                  std::deque<std::pair<int,int>>::push_back(&__str, &v133);
                }
                if (__p[0])
                  (*(void (**)(void *))(*(_QWORD *)__p[0] + 40))(__p[0]);
                else
                  *(_QWORD *)&v140 = v140 + 1;
                continue;
              }
LABEL_70:
              v41 = (char *)__p[1] + 16 * v140;
              goto LABEL_71;
            }
            break;
          }
          if (__p[0])
          {
            (*(void (**)(void))(*(_QWORD *)__p[0] + 8))();
            goto LABEL_80;
          }
LABEL_78:
          if (*((_QWORD *)&v139 + 1))
            --**((_DWORD **)&v139 + 1);
LABEL_80:
          v33 = *((_QWORD *)&v147 + 1);
          v34 = v147;
LABEL_81:
          --v33;
          *(_QWORD *)&v147 = ++v34;
          *((_QWORD *)&v147 + 1) = v33;
          if (v34 >= 0x400)
          {
            operator delete(**((void ***)&__str + 1));
            v34 = v147 - 512;
            *((_QWORD *)&__str + 1) += 8;
            *(_QWORD *)&v147 = v147 - 512;
            v33 = *((_QWORD *)&v147 + 1);
          }
          if (v33)
            continue;
          break;
        }
LABEL_84:
        v144[1] = 0;
        *(_DWORD *)(v129 + 4 * (*(int (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2)) = 0;
        fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::VectorFst(&v142);
        if (v128 < 1)
        {
          v43 = 0;
        }
        else
        {
          v42 = 0;
          v43 = 0;
          do
          {
            LODWORD(__p[0]) = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v42);
            LODWORD(v133) = 2139095040;
            if (*(float *)__p != INFINITY)
              ++v43;
            v44 = fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::AddState((uint64_t)&v142);
            v45 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v42);
            fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetFinal((uint64_t)&v142, v44, v45);
            v42 = (v42 + 1);
          }
          while (v128 != (_DWORD)v42);
        }
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v142);
        v46 = v143;
        *((_DWORD *)v143 + 22) = v19;
        v47 = (*(uint64_t (**)(_QWORD *))(*v46 + 24))(v46);
        v46[1] = v47 & 0xCCFFFFF0007 | (((v47 >> 35) & 1) << 37) | v46[1] & 4;
        v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetInputSymbols((uint64_t)&v142, v48);
        v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
        fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::SetOutputSymbols((uint64_t)&v142, v49);
        LODWORD(v135) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 128))(a2, &v133);
        v50 = 0;
        v51 = 0;
        while (2)
        {
          if (!v133)
          {
            if ((int)v135 >= (int)v134)
              goto LABEL_120;
            goto LABEL_102;
          }
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v133 + 16))(v133))
          {
            if (v133)
            {
              v52 = (*(uint64_t (**)(void))(*(_QWORD *)v133 + 24))();
              goto LABEL_103;
            }
LABEL_102:
            v52 = v135;
LABEL_103:
            v53 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v52);
            v54 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 48))(a2, v52);
            *(_QWORD *)&v140 = 0;
            (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a2 + 136))(a2, v52, __p);
            if (__p[0])
            {
              if (((*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 24))(__p[0]) & 1) != 0)
                goto LABEL_111;
              if (__p[0])
              {
                v55 = (char *)(*(uint64_t (**)(void *))(*(_QWORD *)__p[0] + 32))(__p[0]);
LABEL_109:
                if (!*(_DWORD *)v55)
                {
                  v141[0] = *(float *)(v129 + 4 * (int)v52);
                  v141[1] = v141[0];
                  v56 = *((_DWORD *)v55 + 3);
                  v141[2] = *((float *)v55 + 2);
                  LODWORD(v141[3]) = v52;
                  fst::ImplToMutableFst<fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,fst::MutableFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::MutateCheck((uint64_t)&v142);
                  fst::VectorFstImpl<fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::AddArc(v143, v56, v141);
                  ++v50;
                  v30 = v128;
                }
LABEL_111:
                if (__p[0])
                {
                  (*(void (**)(void *))(*(_QWORD *)__p[0] + 8))(__p[0]);
                }
                else if (*((_QWORD *)&v139 + 1))
                {
                  --**((_DWORD **)&v139 + 1);
                }
                v51 = v53 + v51 - v54;
                if (v133)
                  (*(void (**)(void *))(*(_QWORD *)v133 + 32))(v133);
                else
                  LODWORD(v135) = v135 + 1;
                continue;
              }
            }
            else if ((unint64_t)v140 >= (unint64_t)v139)
            {
              goto LABEL_111;
            }
            v55 = (char *)__p[1] + 16 * v140;
            goto LABEL_109;
          }
          break;
        }
        if (v133)
          (*(void (**)(void))(*(_QWORD *)v133 + 8))();
LABEL_120:
        v57 = v143[9] - v143[8];
        if (v50 == (uint64_t)((v57 << 29) - 0x100000000) >> 32)
        {
          if (v30 == (v57 >> 3))
          {
            v118 = v43;
            __p[0] = 0;
            v115 = (uint64_t)v4;
            v58 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>((uint64_t)&v142, 268697600, (uint64_t *)__p);
            v59 = v58;
            v143[1] = v143[1] & (~(uint64_t)__p[0] | 4) | (unint64_t)__p[0] & v58;
            if ((v58 & 0x40000) == 0)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "WARNING");
              v60 = fst::LogMessage::LogMessage((fst *)&v133, (uint64_t)__p);
              v61 = (_QWORD *)fst::cerr(v60);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)"Input fst is not structured properly", 36);
              fst::LogMessage::~LogMessage((fst::LogMessage *)&v133);
              if (SBYTE7(v139) < 0)
                operator delete(__p[0]);
            }
            if ((v59 & 0x10000000) == 0)
              fst::ArcSort<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(&v142);
            MEMORY[0x1AF44D160](v129, 0x1000C8052888210);
            fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_DWORD *)v4 + 16, v131, v132, (float *)v4 + 18);
            v122 = a2;
            v62 = (2 * v121 + 64) >> 6;
            v63 = v51 + v121 + 64;
            v114 = v51 + v121;
            v113 = fst::MappedFile::Allocate((fst::MappedFile *)(((4 * (v51 + v121) + 8 * (v62 + ((v121 + 63) >> 6) + (v63 >> 6)) + 31) & 0xFFFFFFFFFFFFFFFCLL)+ 4 * v118), 16);
            v64 = *(unint64_t **)(v113 + 8);
            bzero(v64, ((4 * (v51 + v121) + 8 * (v62 + ((v121 + 63) >> 6) + (v63 >> 6)) + 31) & 0xFFFFFFFFFFFFFFFCLL) + 4 * v118);
            *v64 = v121;
            v64[1] = v51;
            v116 = v64;
            v117 = v51;
            v64[2] = v118;
            v66 = (uint64_t *)(v64 + 3);
            v65 = v64[3];
            v67 = (v63 >> 6) + v62;
            v68 = 8 * (v67 + ((v121 + 63) >> 6)) + 24;
            v69 = (_DWORD *)((char *)v64 + v68);
            *v66 = v65 | 1;
            v70 = floorf(*v132 * INFINITY);
            LODWORD(v65) = fabsf(v70);
            v71 = v70 < 0.0;
            *v69 = (-1 << *v131) | v71 | (2 * v65);
            *v69 = (-1 << *v131) | v71 | (2 * v65);
            if (a3)
            {
              a3->__end_ = a3->__begin_;
              std::vector<int>::resize(a3, v121);
            }
            v139 = 0u;
            v140 = 0u;
            *(_OWORD *)__p = 0u;
            LODWORD(v133) = *((_DWORD *)v143 + 22);
            std::deque<int>::push_back(__p, &v133);
            if (!*((_QWORD *)&v140 + 1))
            {
              v74 = 0;
              v73 = 0;
              LODWORD(v72) = 0;
              v79 = 2;
              v81 = 1;
              v80 = 1;
              goto LABEL_174;
            }
            v72 = 0;
            v73 = 0;
            v74 = 0;
            v75 = &v66[v62];
            v120 = &v66[v67];
            v76 = v123 + v68 + 4;
            v77 = (char *)v116 + v76;
            v119 = (char *)v116 + 4 * v117 + v76;
            v78 = v140;
            v79 = 2;
            v80 = 1;
            v81 = 1;
            v82 = a3;
            while (1)
            {
              v83 = *(_QWORD *)((char *)__p[1] + ((v78 >> 7) & 0x1FFFFFFFFFFFFF8));
              v84 = v78 & 0x3FF;
              if (v82)
                v82->__begin_[*(int *)(v83 + 4 * v84)] = v72;
              v85 = v143[8];
              v86 = **(float **)(v85 + 8 * *(int *)(v83 + 4 * v84));
              *(float *)&v133 = v86;
              v141[0] = INFINITY;
              v130 = v72;
              if (v86 != INFINITY)
              {
                *(uint64_t *)((char *)v120 + ((v72 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v72;
                *(float *)&v119[4 * v73++] = v86;
                v85 = v143[8];
              }
              v87 = *(int *)(v83 + 4 * v84);
              v89 = (uint64_t *)(*(_QWORD *)(v85 + 8 * v87) + 24);
              v88 = *v89;
              v90 = v89[1] - *v89;
              if (v90)
              {
                v124 = v84;
                v125 = v83;
                v126 = v73;
                v91 = v90 >> 4;
                if (v91 <= 1)
                  v92 = 1;
                else
                  v92 = v91;
                v93 = (float *)(v88 + 12);
                do
                {
                  v94 = floorf(*(v93 - 1) * *v132);
                  v95 = v94 < 0.0;
                  v96 = fabsf(v94);
                  v69[v81] = (*((_DWORD *)v93 - 3) << *v131) | v95 | (2 * v96);
                  v69[v81] = (*((_DWORD *)v93 - 3) << *v131) | v95 | (2 * v96);
                  *(uint64_t *)((char *)v66 + ((v79 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v79;
                  std::deque<int>::push_back(__p, v93);
                  v93 += 4;
                  ++v79;
                  ++v81;
                  --v92;
                }
                while (v92);
                v87 = *(unsigned int *)(v125 + 4 * v124);
                v73 = v126;
                v82 = a3;
              }
              v137 = 0;
              (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)v122 + 136))(v122, v87, &v133);
              ++v79;
              while (1)
              {
                if (!v133)
                {
                  if (v137 >= v135)
                    goto LABEL_156;
                  goto LABEL_148;
                }
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v133 + 24))(v133))
                  break;
                if (v133)
                {
                  v97 = (*(uint64_t (**)(void))(*(_QWORD *)v133 + 32))();
                  goto LABEL_149;
                }
LABEL_148:
                v97 = v134 + 16 * v137;
LABEL_149:
                if (*(_DWORD *)v97)
                {
                  v98 = floorf(*(float *)(v97 + 8) * *v132);
                  v99 = v98 < 0.0;
                  v100 = fabsf(v98);
                  *(_DWORD *)&v77[4 * v74] = (*(_DWORD *)v97 << *v131) | v99 | (2 * v100);
                  *(_DWORD *)&v77[4 * v74++] = (*(_DWORD *)v97 << *v131) | v99 | (2 * v100);
                  v101 = 1 << v80;
                  v102 = v80++ >> 3;
                  *(uint64_t *)((char *)v75 + (v102 & 0x1FFFFFFFFFFFFFF8)) |= v101;
                }
                if (v133)
                  (*(void (**)(void *))(*(_QWORD *)v133 + 40))(v133);
                else
                  ++v137;
              }
              if (v133)
              {
                (*(void (**)(void))(*(_QWORD *)v133 + 8))();
                goto LABEL_158;
              }
LABEL_156:
              if (v136)
                --*v136;
LABEL_158:
              v103 = *((_QWORD *)&v140 + 1) - 1;
              v78 = v140 + 1;
              v140 = __PAIR128__(*((unint64_t *)&v140 + 1), (uint64_t)v140 + 1) + __PAIR128__(-1, 0);
              if (v78 >= 0x800)
              {
                operator delete(*(void **)__p[1]);
                v78 = v140 - 1024;
                __p[1] = (char *)__p[1] + 8;
                *(_QWORD *)&v140 = v140 - 1024;
                v103 = *((_QWORD *)&v140 + 1);
              }
              v72 = v130 + 1;
              ++v80;
              if (!v103)
              {
LABEL_174:
                if ((_DWORD)v72 == v128
                  && v79 == ((2 * v121) | 1)
                  && v81 == v121
                  && v74 == v117
                  && v80 == v114 + 1
                  && v73 == v118)
                {
                  v4 = (_QWORD *)v115;
                  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Init(v115, v116, 0, v113);
                }
                else
                {
                  if (FLAGS_fst_error_fatal)
                    std::string::basic_string[abi:ne180100]<0>(&v133, "FATAL");
                  else
                    std::string::basic_string[abi:ne180100]<0>(&v133, "ERROR");
                  v108 = fst::LogMessage::LogMessage((fst *)v141, (uint64_t)&v133);
                  v4 = (_QWORD *)v115;
                  v109 = (_QWORD *)fst::cerr(v108);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v109, (uint64_t)"Structure problems detected during construction", 47);
                  fst::LogMessage::~LogMessage((fst::LogMessage *)v141);
                  if (SHIBYTE(v135) < 0)
                    operator delete(v133);
                  *(_QWORD *)(v115 + 8) |= 4uLL;
                }
                std::deque<int>::~deque[abi:ne180100](__p);
                goto LABEL_188;
              }
            }
          }
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v106 = fst::LogMessage::LogMessage((fst *)&v133, (uint64_t)__p);
          v107 = (_QWORD *)fst::cerr(v106);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v107, (uint64_t)"Number of contexts != number of states", 38);
        }
        else
        {
          if (FLAGS_fst_error_fatal)
            std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
          else
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
          v104 = fst::LogMessage::LogMessage((fst *)&v133, (uint64_t)__p);
          v105 = (_QWORD *)fst::cerr(v104);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"Number of contexts arcs != number of states - 1", 47);
        }
        fst::LogMessage::~LogMessage((fst::LogMessage *)&v133);
        if (SBYTE7(v139) < 0)
          operator delete(__p[0]);
        v4[1] |= 4uLL;
LABEL_188:
        v142 = &unk_1E5D256C0;
        v110 = v143;
        if (v143)
        {
          v111 = *((_DWORD *)v143 + 14) - 1;
          *((_DWORD *)v143 + 14) = v111;
          if (!v111)
            (*(void (**)(_QWORD *))(*v110 + 8))(v110);
        }
        if (v144[0])
          operator delete(v144[0]);
        std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100](&__str);
        return v4;
      }
    }
  }
  if (FLAGS_fst_error_fatal)
    std::string::basic_string[abi:ne180100]<0>(&__str, "FATAL");
  else
    std::string::basic_string[abi:ne180100]<0>(&__str, "ERROR");
  v26 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)&__str);
  v27 = (_QWORD *)fst::cerr(v26);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"NGramFst only accepts OpenGRM langauge models as input", 54);
LABEL_92:
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SBYTE7(__str_16) < 0)
    operator delete((void *)__str);
  v4[1] |= 4uLL;
  return v4;
}

void sub_1ADD04D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44)
{
  uint64_t v44;
  _DWORD *v46;
  int v47;
  void *v48;

  fst::LogMessage::~LogMessage((fst::LogMessage *)(v44 - 200));
  if (a35 < 0)
    operator delete(__p);
  std::deque<int>::~deque[abi:ne180100](&a38);
  *(_QWORD *)(v44 - 184) = &unk_1E5D256C0;
  v46 = *(_DWORD **)(v44 - 176);
  if (v46)
  {
    v47 = v46[14] - 1;
    v46[14] = v47;
    if (!v47)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
  }
  v48 = *(void **)(v44 - 168);
  if (v48)
    operator delete(v48);
  std::deque<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *,std::allocator<fst::DfsState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>> *>>::~deque[abi:ne180100]((_QWORD *)(v44 - 144));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(a14 + 344));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer((_QWORD *)(a14 + 280));
  fst::CompactLatticeMinimizer<fst::LatticeWeightTpl<float>,int>::~CompactLatticeMinimizer(a10);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a14);
  _Unwind_Resume(a1);
}

std::string *fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "ngram");
  return std::string::append(a1, "_quantized");
}

void sub_1ADD050A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _DWORD *a2, unsigned int *a3, float *a4, float *a5)
{
  signed int v10;
  float v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  signed int v16;
  signed int v17;
  unsigned int v18;
  fst *v19;
  _QWORD *v20;
  char v21;
  float v22;
  float v23;
  double v24;
  float v25;
  float result;
  void *__p;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  unsigned int v34;

  v34 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v32);
  v10 = 0;
  v11 = -INFINITY;
  v12 = INFINITY;
  while (1)
  {
    if (!v32)
    {
      if ((int)v34 >= v33)
        goto LABEL_45;
LABEL_7:
      v13 = v34;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v32 + 16))(v32))
      break;
    if (!v32)
      goto LABEL_7;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v32 + 24))();
LABEL_8:
    if ((_DWORD)v13 == -1)
      goto LABEL_40;
    v31 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v13, &__p);
    while (1)
    {
      if (!__p)
      {
        if (v31 >= v29)
          goto LABEL_38;
LABEL_27:
        if (*(float *)(v28 + 16 * v31 + 8) >= v11)
          v11 = *(float *)(v28 + 16 * v31 + 8);
LABEL_29:
        if (v12 >= *(float *)(v28 + 16 * v31 + 8))
          v12 = *(float *)(v28 + 16 * v31 + 8);
LABEL_31:
        if (*(_DWORD *)(v28 + 16 * v31) > v10)
          v10 = *(_DWORD *)(v28 + 16 * v31);
        goto LABEL_33;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      if (!__p)
        goto LABEL_27;
      v14 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v14 + 8) >= v11)
        v11 = *(float *)(v14 + 8);
      if (!__p)
        goto LABEL_29;
      v15 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v12 >= *(float *)(v15 + 8))
        v12 = *(float *)(v15 + 8);
      if (!__p)
        goto LABEL_31;
      v16 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v16 > v10)
        v10 = v16;
      if (__p)
      {
        v17 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v17 > v10)
          v10 = v17;
        if (!__p)
          goto LABEL_35;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_33:
        if (*(_DWORD *)(v28 + 16 * v31 + 4) > v10)
          v10 = *(_DWORD *)(v28 + 16 * v31 + 4);
LABEL_35:
        ++v31;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v30)
      --*v30;
LABEL_40:
    if (v32)
      (*(void (**)(uint64_t))(*(_QWORD *)v32 + 32))(v32);
    else
      ++v34;
  }
  if (v32)
    (*(void (**)(void))(*(_QWORD *)v32 + 8))();
LABEL_45:
  v18 = __clz(v10);
  *a3 = v18;
  if (v10 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v19 = fst::LogMessage::LogMessage((fst *)&v32, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v32);
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    v18 = *a3;
  }
  v21 = v18 - 1;
  v22 = fabsf(v11);
  v23 = fabsf(v12);
  if (v22 < v23)
    v22 = v23;
  if (v22 <= 0.0)
    v24 = (double)(1 << v21) + -1.0;
  else
    v24 = v22;
  v25 = ((double)(1 << v21) + -1.0) / v24;
  *a4 = v25;
  result = 1.0 / v25;
  *a5 = result;
  *a2 = (2 << v21) - 2;
  return result;
}

void sub_1ADD05408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Init(uint64_t a1, const unint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  fst *v19;
  _QWORD *v20;
  uint64_t v21;
  void *__p[2];
  char v23;
  char v24;

  if (*(_BYTE *)(a1 + 96))
  {
    v8 = *(_QWORD *)(a1 + 88);
    if (v8)
      MEMORY[0x1AF44D160](v8, 0x1000C8077774924);
  }
  v9 = *(_QWORD *)(a1 + 80);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  *(_BYTE *)(a1 + 96) = a3;
  *(_QWORD *)(a1 + 80) = a4;
  *(_QWORD *)(a1 + 88) = a2;
  v10 = *a2;
  *(_QWORD *)(a1 + 104) = *a2;
  v11 = a2[1];
  *(_QWORD *)(a1 + 112) = v11;
  *(_QWORD *)(a1 + 120) = a2[2];
  v12 = (2 * v10) | 1;
  v13 = v11 + v10 + 1;
  v14 = 2 * v10 + 64;
  *(_QWORD *)(a1 + 144) = a2 + 3;
  *(_QWORD *)(a1 + 152) = &a2[(v14 >> 6) + 3];
  v15 = ((v11 + v10 + 64) >> 6) + (v14 >> 6);
  *(_QWORD *)(a1 + 160) = &a2[v15 + 3];
  v16 = 8 * (v15 + ((v10 + 63) >> 6)) + 24;
  v17 = v16 + 4 * v10 + 4;
  *(_QWORD *)(a1 + 176) = (char *)a2 + v16;
  *(_QWORD *)(a1 + 184) = (char *)a2 + v17;
  *(_QWORD *)(a1 + 192) = (char *)a2 + v16;
  *(_QWORD *)(a1 + 200) = (char *)a2 + v17;
  *(_QWORD *)(a1 + 208) = (char *)a2 + 4 * v11 + v17;
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 216), a2 + 3, v12);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 280), *(const unint64_t **)(a1 + 152), v13);
  fst::BitmapIndex::BuildIndex((fst::BitmapIndex *)(a1 + 344), *(const unint64_t **)(a1 + 160), *(_QWORD *)(a1 + 104));
  *(_QWORD *)(a1 + 128) = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), 0);
  *(_QWORD *)(a1 + 136) = v18;
  if (!fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 0)
    && *(_QWORD *)(a1 + 128) == 1
    && (**(_BYTE **)(a1 + 216) & 4) != 0)
  {
    v21 = *(_QWORD *)(a1 + 176);
    *(_QWORD *)(a1 + 168) = v21 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), 2uLL);
  }
  else
  {
    if (FLAGS_fst_error_fatal)
      std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    else
      std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v19 = fst::LogMessage::LogMessage((fst *)&v24, (uint64_t)__p);
    v20 = (_QWORD *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Malformed file", 14);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v24);
    if (v23 < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a1 + 8) |= 4uLL;
  }
}

void sub_1ADD056A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  fst::LogMessage::~LogMessage((fst::LogMessage *)&a18);
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(uint64_t a1)
{
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstImpl(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;

  *(_QWORD *)a1 = &unk_1E5D1AFF0;
  if (*(_BYTE *)(a1 + 96))
  {
    v2 = *(_QWORD *)(a1 + 88);
    if (v2)
      MEMORY[0x1AF44D160](v2, 0x1000C8077774924);
  }
  v3 = *(_QWORD *)(a1 + 80);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(void **)(a1 + 384);
  if (v4)
  {
    *(_QWORD *)(a1 + 392) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 360);
  if (v5)
  {
    *(_QWORD *)(a1 + 368) = v5;
    operator delete(v5);
  }
  v6 = *(void **)(a1 + 320);
  if (v6)
  {
    *(_QWORD *)(a1 + 328) = v6;
    operator delete(v6);
  }
  v7 = *(void **)(a1 + 296);
  if (v7)
  {
    *(_QWORD *)(a1 + 304) = v7;
    operator delete(v7);
  }
  v8 = *(void **)(a1 + 256);
  if (v8)
  {
    *(_QWORD *)(a1 + 264) = v8;
    operator delete(v8);
  }
  v9 = *(void **)(a1 + 232);
  if (v9)
  {
    *(_QWORD *)(a1 + 240) = v9;
    operator delete(v9);
  }
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(a1);
}

uint64_t fst::ImplToFst<fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  if (a2)
  {
    v3 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(v2 + 35), a2);
  }
  else
  {
    v3 = v2[16];
    v4 = v2[17];
  }
  return v4 + ~v3;
}

BOOL fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Write(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  _BOOL8 v7;
  fst *v8;
  _QWORD *v9;
  void *__p[2];
  char v12;
  char v13;
  _BYTE v14[8];
  void *v15[2];
  void *v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v18 = 0u;
  v17 = 0u;
  *(_OWORD *)v16 = 0u;
  *(_OWORD *)v15 = 0u;
  v6 = *(_QWORD *)(a1 + 104);
  v19 = 1;
  v20 = v6;
  v21 = 0;
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteHeader(a1, (uint64_t)a2, a3, 4, (uint64_t)v14);
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
    v8 = fst::LogMessage::LogMessage((fst *)&v13, (uint64_t)__p);
    v9 = (_QWORD *)fst::cerr(v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v13);
    if (v12 < 0)
      operator delete(__p[0]);
    v7 = 0;
  }
  else
  {
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 68);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 72);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 60);
    std::ostream::write();
    LODWORD(__p[0]) = *(_DWORD *)(a1 + 64);
    std::ostream::write();
    std::ostream::write();
    v7 = (*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 5) == 0;
  }
  if (SHIBYTE(v17) < 0)
    operator delete(v16[1]);
  if (SHIBYTE(v16[0]) < 0)
    operator delete(v15[0]);
  return v7;
}

void sub_1ADD059B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, void *a19)
{
  if (a14 < 0)
    operator delete(__p);
  fst::FstHeader::~FstHeader(&a19);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  *(_QWORD *)a1 = &unk_1E5D1A470;
  *(_DWORD *)(a1 + 24) = -1;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 32) = v6;
  *(_DWORD *)(a1 + 40) = -1;
  *(_DWORD *)(a1 + 72) = -1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 15;
  v7 = *(_OWORD *)(a2 + 16);
  v8 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 40) = v7;
  if (a1 + 40 != a2 + 16)
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(a1 + 80), *(char **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
    v6 = *(_QWORD *)(a1 + 32);
  }
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 80);
  fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(v6, a3, a1 + 40);
  v9 = *(_DWORD *)(a1 + 40);
  if (*(_DWORD *)(a1 + 72) != v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 64) = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v10 + 216), v9);
  }
  return a1;
}

void sub_1ADD05AE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 88) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~ArcIterator(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1A470;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::~ArcIterator(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1A470;
  v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

BOOL fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Done_(_QWORD *a1)
{
  unint64_t v1;

  v1 = a1[6];
  if (a1[8])
    ++v1;
  return a1[14] >= v1;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 112);
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 112) = 0;
  *(_DWORD *)(result + 24) = -1;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Seek_(uint64_t result, uint64_t a2)
{
  if (*(_QWORD *)(result + 112) != a2)
  {
    *(_QWORD *)(result + 112) = a2;
    *(_DWORD *)(result + 24) = -1;
  }
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::SetFlags_(uint64_t result, char a2, int a3)
{
  *(_DWORD *)(result + 120) = *(_DWORD *)(result + 120) & ~a3 | a2 & 0xF;
  return result;
}

uint64_t fst::ArcIterator<fst::NGramFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>>::Value(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int v8;
  fst::BitmapIndex *v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  float v17;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v4 = v3 == 0;
    LODWORD(v5) = v3 - 1;
    v6 = *(_DWORD *)(a1 + 120);
    v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
      goto LABEL_9;
    if (!v3)
    {
      v8 = 0;
      LODWORD(v3) = -1;
      v4 = 1;
      goto LABEL_8;
    }
    LODWORD(v3) = v3 - 1;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 120);
    v7 = *(_DWORD *)(a1 + 24);
    if ((v6 & v7 & 3) == 0)
    {
      if ((v6 & v7 & 8) == 0)
      {
        if ((v6 & v7 & 4) == 0)
          return a1 + 8;
        goto LABEL_22;
      }
      v5 = *(_QWORD *)(a1 + 112);
LABEL_14:
      if ((v7 & 8) != 0)
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(*(_QWORD *)(a1 + 32), (int *)(a1 + 40));
      v12 = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(*(_QWORD *)(a1 + 32), (_QWORD *)(a1 + 80), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 184) + 4 * (*(_QWORD *)(a1 + 56) + (int)v5)) >> *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60));
      v4 = 0;
      goto LABEL_17;
    }
  }
  v4 = 0;
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 184) + 4 * (*(_QWORD *)(a1 + 56) + (int)v3)) >> *(_DWORD *)(*(_QWORD *)(a1 + 32) + 60);
LABEL_8:
  *(_DWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 12) = v8;
  v7 &= 0xFFFFFFFC;
  *(_DWORD *)(a1 + 24) = v7;
  LODWORD(v5) = v3;
LABEL_9:
  if ((v6 & v7 & 8) == 0)
    goto LABEL_18;
  if (!v4)
    goto LABEL_14;
  v9 = (fst::BitmapIndex *)(*(_QWORD *)(a1 + 32) + 216);
  v10 = fst::BitmapIndex::Rank1(v9, v2);
  v11 = fst::BitmapIndex::Select1(v9, v2 + ~v10);
  v12 = fst::BitmapIndex::Rank1(v9, v11);
  v4 = 1;
LABEL_17:
  v7 = *(_DWORD *)(a1 + 24) & 0xFFFFFFF7;
  *(_DWORD *)(a1 + 20) = v12;
  *(_DWORD *)(a1 + 24) = v7;
  v6 = *(_DWORD *)(a1 + 120);
LABEL_18:
  if ((v6 & v7 & 4) == 0)
    return a1 + 8;
  if (!v4)
  {
    LODWORD(v3) = v5;
LABEL_22:
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(v13 + 200);
    v15 = *(_QWORD *)(a1 + 56) + (int)v3;
    goto LABEL_23;
  }
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(v13 + 192);
  v15 = *(int *)(a1 + 40);
LABEL_23:
  v16 = *(_DWORD *)(v14 + 4 * v15);
  v17 = (float)((*(_DWORD *)(v13 + 64) & v16) >> 1);
  if ((v16 & 1) != 0)
    v17 = -v17;
  *(float *)(a1 + 16) = *(float *)(v13 + 72) * v17;
  *(_DWORD *)(a1 + 24) = v7 & 0xFFFFFFFB;
  return a1 + 8;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(uint64_t result, int *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  void **v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  char *v12;
  _DWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  int v21;
  uint64_t v22;

  v3 = result;
  v4 = a2[8];
  v5 = *a2;
  if (v4 != *a2)
  {
    a2[8] = v5;
    result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(result + 216), v5);
    *((_QWORD *)a2 + 3) = result;
    v4 = *a2;
  }
  if (a2[16] != v4)
  {
    v7 = (void **)(a2 + 10);
    v6 = *((_QWORD *)a2 + 5);
    a2[16] = v4;
    *((_QWORD *)a2 + 6) = v6;
    v8 = *((_QWORD *)a2 + 3);
    if (v8)
    {
      do
      {
        v9 = *(_QWORD *)(v3 + 176);
        v10 = *(_DWORD *)(v9 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8)) >> *(_DWORD *)(v3 + 60);
        v12 = (char *)*((_QWORD *)a2 + 6);
        v11 = *((_QWORD *)a2 + 7);
        if ((unint64_t)v12 >= v11)
        {
          v14 = (char *)*v7;
          v15 = (v12 - (_BYTE *)*v7) >> 2;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = v11 - (_QWORD)v14;
          if (v17 >> 1 > v16)
            v16 = v17 >> 1;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
            v18 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
          {
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a2 + 14), v18);
            v14 = (char *)*((_QWORD *)a2 + 5);
            v12 = (char *)*((_QWORD *)a2 + 6);
          }
          else
          {
            v19 = 0;
          }
          v20 = &v19[4 * v15];
          *(_DWORD *)v20 = v10;
          v13 = v20 + 4;
          while (v12 != v14)
          {
            v21 = *((_DWORD *)v12 - 1);
            v12 -= 4;
            *((_DWORD *)v20 - 1) = v21;
            v20 -= 4;
          }
          *((_QWORD *)a2 + 5) = v20;
          *((_QWORD *)a2 + 6) = v13;
          *((_QWORD *)a2 + 7) = &v19[4 * v18];
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v12 = v10;
          v13 = v12 + 4;
        }
        *((_QWORD *)a2 + 6) = v13;
        v22 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(v3 + 216), v8);
        result = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v3 + 216), v8 + ~v22);
        v8 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(uint64_t a1, _QWORD *a2, int a3)
{
  uint64_t v4;
  unint64_t v5;
  char *v7;
  char *v8;
  int v9;
  char *v10;
  unint64_t v11;
  char *v12;
  char *v13;
  unsigned int v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  fst::BitmapIndex *v21;
  unint64_t v22;
  uint64_t v24;
  int v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  unint64_t v32;
  _DWORD *v33;
  unint64_t v34;
  unsigned int *v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = *(_QWORD *)(a1 + 136);
  v5 = v4 - 2;
  if (v4 == 2)
    goto LABEL_11;
  v7 = *(char **)(a1 + 168);
  v8 = &v7[4 * v5];
  v9 = *(_DWORD *)(a1 + 60);
  v10 = v7;
  do
  {
    v11 = v5 >> 1;
    v12 = &v10[4 * (v5 >> 1)];
    v14 = *(_DWORD *)v12;
    v13 = v12 + 4;
    v5 += ~(v5 >> 1);
    if (v14 < a3 << v9)
      v10 = v13;
    else
      v5 = v11;
  }
  while (v5);
  if (v10 == v8 || *(_DWORD *)v10 >> v9 != a3)
  {
LABEL_11:
    v21 = (fst::BitmapIndex *)(a1 + 216);
    v22 = 0;
  }
  else
  {
    v15 = (v10 - v7 + 8) >> 2;
    v16 = (_QWORD *)(a1 + 216);
    v17 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v15);
    if (v17)
    {
      v18 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), v17);
      v20 = v19;
    }
    else
    {
      v18 = *(_QWORD *)(a1 + 128);
      v20 = *(_QWORD *)(a1 + 136);
    }
    v24 = v18 + 1;
    if (((*(_QWORD *)(*v16 + (((unint64_t)(v18 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v18 + 1)) & 1) != 0)
    {
      v25 = ((a2[1] - *a2) >> 2) - 1;
      if (v25 >= 0)
      {
        v26 = *(_QWORD *)(a1 + 176);
        v27 = (_DWORD *)(v26 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v18 + 1));
        v28 = (uint64_t)&v27[v20 + ~v18];
        if ((_DWORD *)v28 != v27)
        {
          v29 = *(_DWORD *)(*a2 + 4 * v25);
          v30 = *(_DWORD *)(a1 + 60);
          v31 = v29 << v30;
          do
          {
            v32 = (v28 - (uint64_t)v27) >> 2;
            v33 = v27;
            do
            {
              v34 = v32 >> 1;
              v35 = &v33[v32 >> 1];
              v37 = *v35;
              v36 = v35 + 1;
              v32 += ~(v32 >> 1);
              if (v37 < v31)
                v33 = v36;
              else
                v32 = v34;
            }
            while (v32);
            if (v33 == (_DWORD *)v28 || *v33 >> v30 != v29)
              break;
            v15 = &v33[v24] - v27;
            v38 = fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v15);
            if (v38)
            {
              v39 = fst::BitmapIndex::Select0s((fst::BitmapIndex *)(a1 + 216), v38);
              v41 = v40;
            }
            else
            {
              v39 = *(_QWORD *)(a1 + 128);
              v41 = *(_QWORD *)(a1 + 136);
            }
            v24 = v39 + 1;
            if (((*(_QWORD *)(*v16 + (((unint64_t)(v39 + 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v39 + 1)) & 1) == 0)
              break;
            if (v25 <= 0)
              break;
            --v25;
            v42 = *(_QWORD *)(a1 + 176);
            v27 = (_DWORD *)(v42 + 4 * fst::BitmapIndex::Rank1((fst::BitmapIndex *)(a1 + 216), v39 + 1));
            v28 = (uint64_t)&v27[v41 + ~v39];
            v29 = *(_DWORD *)(*a2 + 4 * v25);
            v30 = *(_DWORD *)(a1 + 60);
            v31 = v29 << v30;
          }
          while ((_DWORD *)v28 != v27);
        }
      }
    }
    v21 = (fst::BitmapIndex *)(a1 + 216);
    v22 = v15;
  }
  return fst::BitmapIndex::Rank1(v21, v22);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(uint64_t a1, uint64_t a2, int a3)
{
  __int128 v6;
  __int128 v7;
  int v8;
  uint64_t v9;

  *(_QWORD *)a1 = &unk_1E5D1ED50;
  *(_QWORD *)(a1 + 8) = a2;
  v6 = *(_OWORD *)(a2 + 16);
  v7 = *(_OWORD *)(a2 + 32);
  v8 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v9 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(v9 + 32) = a3;
  *(_BYTE *)(v9 + 56) = 0;
  *(_OWORD *)(v9 + 60) = xmmword_1AE142840;
  if (a3 == 1)
    *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstMatcher(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1ED50;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  return a1;
}

void fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::~NGramFstMatcher(_QWORD *a1)
{
  void *v2;

  *a1 = &unk_1E5D1ED50;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Copy(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(v2, a1);
  return v2;
}

void sub_1ADD06320(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10F1C40F1851BD1);
  _Unwind_Resume(a1);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Type(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::GetFst(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Properties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetState_(uint64_t a1, int a2)
{
  uint64_t result;

  result = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false>::SetInstFuture(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), a2, a1 + 16);
  *(_BYTE *)(a1 + 112) = 0;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Find_(uint64_t a1, int a2)
{
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;
  unsigned int *v15;
  _DWORD *v16;
  unsigned int v17;
  unsigned int v18;
  float v19;
  unint64_t v20;
  uint64_t v21;
  fst::BitmapIndex *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unsigned int v26;
  float v27;

  *(_BYTE *)(a1 + 92) = 1;
  if ((a2 + 1) > 1)
  {
    *(_BYTE *)(a1 + 112) = 0;
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      v8 = (int *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_QWORD *)(v7 + 184) + 4 * v9;
      v11 = (_DWORD *)(v10 + 4 * v5);
      v12 = *(_DWORD *)(v7 + 60);
      v13 = (_DWORD *)v10;
      do
      {
        v14 = v5 >> 1;
        v15 = &v13[v5 >> 1];
        v17 = *v15;
        v16 = v15 + 1;
        v5 += ~(v5 >> 1);
        if (v17 < a2 << v12)
          v13 = v16;
        else
          v5 = v14;
      }
      while (v5);
      if (v13 != v11 && *v13 >> v12 == a2)
      {
        *(_DWORD *)(a1 + 96) = a2;
        *(_DWORD *)(a1 + 100) = a2;
        v18 = *(_DWORD *)(*(_QWORD *)(v7 + 200) + 4 * (v9 + (((unint64_t)v13 - v10) >> 2)));
        v19 = (float)((*(_DWORD *)(v7 + 64) & v18) >> 1);
        if ((v18 & 1) != 0)
          v19 = -v19;
        *(float *)(a1 + 104) = *(float *)(v7 + 72) * v19;
        fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::SetInstContext(*(_QWORD *)(v6 + 8), v8);
        *(_DWORD *)(a1 + 108) = fst::NGramFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Transition(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8), (_QWORD *)(a1 + 56), a2);
        goto LABEL_23;
      }
    }
  }
  else
  {
    if (a2)
    {
      v4 = *(_DWORD *)(a1 + 16);
      if (!v4)
        return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) ^ 1;
      goto LABEL_17;
    }
    *(_BYTE *)(a1 + 112) = 1;
    v4 = *(_DWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 128) = v4;
    if (v4)
    {
LABEL_17:
      *(_QWORD *)(a1 + 96) = 0;
      if (*(_DWORD *)(a1 + 48) == v4)
      {
        v20 = *(_QWORD *)(a1 + 40);
      }
      else
      {
        v21 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
        *(_DWORD *)(a1 + 48) = v4;
        v20 = fst::BitmapIndex::Select1((fst::BitmapIndex *)(v21 + 216), v4);
        *(_QWORD *)(a1 + 40) = v20;
      }
      v22 = (fst::BitmapIndex *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) + 216);
      v23 = fst::BitmapIndex::Rank1(v22, v20);
      v24 = fst::BitmapIndex::Select1(v22, v20 + ~v23);
      *(_DWORD *)(a1 + 108) = fst::BitmapIndex::Rank1(v22, v24);
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      v26 = *(_DWORD *)(*(_QWORD *)(v25 + 192) + 4 * *(int *)(a1 + 16));
      v27 = (float)((*(_DWORD *)(v25 + 64) & v26) >> 1);
      if ((v26 & 1) != 0)
        v27 = -v27;
      *(float *)(a1 + 104) = *(float *)(v25 + 72) * v27;
LABEL_23:
      *(_BYTE *)(a1 + 92) = 0;
    }
  }
  return (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1) ^ 1;
}

BOOL fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Done_(uint64_t a1)
{
  return !*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 92) != 0;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Value_(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 112))
    return a1 + 116;
  else
    return a1 + 96;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Next_(uint64_t result)
{
  if (*(_BYTE *)(result + 112))
    *(_BYTE *)(result + 112) = 0;
  else
    *(_BYTE *)(result + 92) = 1;
  return result;
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::Priority_(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::NGramFstMatcher<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true>::NGramFstMatcher(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  int v7;
  uint64_t v8;
  int v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1ED50;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  v8 = a1 + 56;
  *(_DWORD *)(a1 + 48) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)(a1 + 56), *(const void **)(a2 + 56), *(_QWORD *)(a2 + 64), (uint64_t)(*(_QWORD *)(a2 + 64) - *(_QWORD *)(a2 + 56)) >> 2);
  *(_DWORD *)(v8 + 24) = *(_DWORD *)(a2 + 80);
  v9 = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(v8 + 32) = v9;
  *(_BYTE *)(v8 + 56) = 0;
  *(_OWORD *)(v8 + 60) = xmmword_1AE142840;
  if (v9 == 1)
    *(_QWORD *)(a1 + 116) = 0xFFFFFFFF00000000;
  return a1;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD066D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40CE0;
  a1[1] = 0;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD06720(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40CE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40CE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(v4, a2);
  *a1 = &unk_1E5D19B80;
  a1[1] = v4;
  return a1;
}

void sub_1ADD067EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D260E8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D260E8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v5 = (int *)(a2 + v2 + 8);
  do
  {
    v6 = *v5;
    v5 += 4;
    if (!v6)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v5 = (int *)(a2 + v2 + 12);
  do
  {
    v6 = *v5;
    v5 += 4;
    if (!v6)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D19B80;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = operator new();
  *(_QWORD *)result = &unk_1E5D1C0A8;
  *(_DWORD *)(result + 8) = 0;
  v5 = 8 * *(int *)(v3 + 80) + 16 * *(_QWORD *)(v3 + 88);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = result;
  return result;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(result + 8) + 72) + a2;
  *a3 = 0;
  a3[1] = v3 + 8;
  a3[2] = *(unsigned int *)(v3 + 4);
  a3[3] = 0;
  return result;
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  __int128 *v18;
  __int128 v20;
  _DWORD *v21[3];
  _DWORD *v22;
  _DWORD *v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _BYTE __str[32];
  int v28;
  _DWORD *v29;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E550;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  memset(__str, 0, sizeof(__str));
  v28 = 1065353216;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (_DWORD *)(a1 + 104), (_DWORD *)(a1 + 100));
  LODWORD(v24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v21[0] = &v24;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v24, (uint64_t)&std::piecewise_construct, v21)+ 5);
  v12 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * *(int *)(a1 + 80) + 16 * *(_QWORD *)(a1 + 88)), 16);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v12 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v26 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v24);
  v13 = 0;
  while (1)
  {
    if (!v24)
    {
      if ((int)v26 >= v25)
        goto LABEL_45;
LABEL_23:
      v14 = v26;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24))
      break;
    if (!v24)
      goto LABEL_23;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v24 + 24))();
LABEL_24:
    v15 = *(_QWORD *)(a1 + 72) + v13;
    *(float *)v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    *(_DWORD *)(v15 + 4) = 0;
    v23 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)a2 + 136))(a2, v14, v21);
    for (v13 += 8; ; v13 += 16)
    {
      if (!v21[0])
      {
        if (v23 >= v21[2])
          goto LABEL_38;
        ++*(_DWORD *)(v15 + 4);
        goto LABEL_31;
      }
      v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v21[0] + 24))(v21[0]);
      v17 = v21[0];
      if (v16)
        break;
      ++*(_DWORD *)(v15 + 4);
      if (v17)
      {
        v18 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17);
        goto LABEL_32;
      }
LABEL_31:
      v18 = (__int128 *)&v21[1][4 * (_QWORD)v23];
LABEL_32:
      v20 = *v18;
      v29 = (_DWORD *)&v20 + 3;
      HIDWORD(v20) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v20 + 3, (uint64_t)&std::piecewise_construct, &v29)+ 5);
      *(_OWORD *)(*(_QWORD *)(a1 + 72) + v13) = v20;
      ++*(_QWORD *)(a1 + 88);
      if (v21[0])
        (*(void (**)(_DWORD *))(*(_QWORD *)v21[0] + 40))(v21[0]);
      else
        v23 = (_DWORD *)((char *)v23 + 1);
    }
    if (v21[0])
    {
      (*(void (**)(void))(*(_QWORD *)v21[0] + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v22)
      --*v22;
LABEL_40:
    ++*(_DWORD *)(a1 + 80);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
    else
      ++v26;
  }
  if (v24)
    (*(void (**)(void))(*(_QWORD *)v24 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__str);
  return a1;
}

void sub_1ADD06F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "reduced");
  return std::string::append(a1, "_transducer");
}

void sub_1ADD07078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  signed int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  signed int v18;
  signed int v19;
  fst *v20;
  _QWORD *v21;
  unsigned int v22;
  fst *v23;
  _QWORD *v24;
  void *__p;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  signed int v35;
  signed int v36;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v36 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v34);
  v13 = 0;
  v14 = 0;
  while (1)
  {
    if (!v34)
    {
      if (v36 >= v35)
        goto LABEL_39;
LABEL_7:
      v15 = v36;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34))
      break;
    v33 = 0;
    if (!v34)
      goto LABEL_7;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 24))();
LABEL_8:
    v33 = v15;
    if (v15 == -1)
      goto LABEL_34;
    ++*a3;
    __p = &v33;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v32 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 136))(a1, v33, &__p);
    v16 = 0;
    v17 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v32 >= v30)
          goto LABEL_31;
        ++v16;
LABEL_24:
        if (*(_DWORD *)(v29 + 16 * v32) > v13)
          v13 = *(_DWORD *)(v29 + 16 * v32);
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v16;
      if (!__p)
        goto LABEL_24;
      (*(void (**)(void))(*(_QWORD *)__p + 32))();
      if (!__p)
        goto LABEL_24;
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (!__p)
        goto LABEL_24;
      v18 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (v18 > v13)
        v13 = v18;
      if (__p)
      {
        v19 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v19 > v13)
          v13 = v19;
        if (!__p)
          goto LABEL_28;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_26:
        if (*(_DWORD *)(v29 + 16 * v32 + 4) > v13)
          v13 = *(_DWORD *)(v29 + 16 * v32 + 4);
LABEL_28:
        ++v32;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_33;
    }
LABEL_31:
    if (v31)
      --*v31;
LABEL_33:
    *a2 += v16;
    v14 = v17 + 16 * v16;
LABEL_34:
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
    else
      ++v36;
  }
  if (v34)
    (*(void (**)(void))(*(_QWORD *)v34 + 8))();
LABEL_39:
  if ((unint64_t)(8 * *a3 + 16 * *a2) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v20 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v21 = (_QWORD *)fst::cerr(v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
  }
  v22 = __clz(v13);
  if (v13 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v23 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v24 = (_QWORD *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
  }
  *a6 = v22 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v22 - 1));
}

void sub_1ADD07438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E550;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E550;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  int v13;
  fst *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  unint64_t v21;
  void *__p[2];
  char v23;
  __int128 v24;
  void *v25[2];
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  float v29;
  int v30;
  std::string __str;
  _BYTE v32[8];
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD v42[2];
  int v43;
  int v44;
  uint64_t v45;
  _BYTE v46[17];

  v6 = a3[27];
  v45 = 0;
  v44 = 0;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  memset(v42, 0, sizeof(v42));
  v43 = 1065353216;
  v40 = 0;
  v41 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(a1, &v45, &v44, v42, (_DWORD *)&v41 + 1, &v41, (_DWORD *)&v40 + 1, &v40);
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v38 = 0;
  v39 = 0;
  v37 = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v25[0] = &__str;
  v37 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v42, (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)v25)+ 5);
  v38 = v44;
  v39 = v45;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v32);
  LODWORD(v25[0]) = HIDWORD(v40);
  std::ostream::write();
  LODWORD(v25[0]) = v40;
  std::ostream::write();
  LODWORD(v25[0]) = v41;
  std::ostream::write();
  LODWORD(v25[0]) = HIDWORD(v41);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    v29 = INFINITY;
    v9 = a1[1];
    v21 = 8 * *(int *)(v9 + 80) + 16 * *(_QWORD *)(v9 + 88);
    if (!v21)
      goto LABEL_31;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if ((_DWORD)v11 == -1)
        goto LABEL_30;
      v29 = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v11);
      v30 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      v28 = 0;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a1 + 136))(a1, v11, v25);
      while (1)
      {
        if (!v25[0])
        {
          if (v28 >= v26)
            goto LABEL_28;
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v25[0] + 24))(v25[0]))
          break;
        if (v25[0])
        {
          v12 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v25[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        v12 = (__int128 *)((char *)v25[1] + 16 * v28);
LABEL_16:
        v24 = *v12;
        if (HIDWORD(v24) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v42, (int *)&v24 + 3))
          {
            __p[0] = (char *)&v24 + 12;
            v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v42, (int *)&v24 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
            v14 = fst::LogMessage::LogMessage((fst *)v46, (uint64_t)__p);
            v15 = (_QWORD *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            v16 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v46);
            if (v23 < 0)
              operator delete(__p[0]);
            v13 = -1;
          }
          HIDWORD(v24) = v13;
        }
        *(_OWORD *)__p = v24;
        std::ostream::write();
        if (v25[0])
          (*(void (**)(void *))(*(_QWORD *)v25[0] + 40))(v25[0]);
        else
          ++v28;
      }
      if (v25[0])
      {
        (*(void (**)(void))(*(_QWORD *)v25[0] + 8))();
        goto LABEL_30;
      }
LABEL_28:
      if (v27)
        --*v27;
LABEL_30:
      v11 = (v11 + 16 * *(_DWORD *)(*(_QWORD *)(v9 + 72) + v10 + 4) + 8);
      v10 = (int)v11;
      if (v21 <= (int)v11)
      {
LABEL_31:
        v17 = 1;
        goto LABEL_35;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "ERROR");
  v18 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v25);
  v19 = (_QWORD *)fst::cerr(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(v26) < 0)
    operator delete(v25[0]);
  v17 = 0;
LABEL_35:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35) < 0)
    operator delete(*((void **)&v34 + 1));
  if (SBYTE7(v34) < 0)
    operator delete((void *)v33);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v42);
  return v17;
}

void sub_1ADD079F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  uint64_t v36;

  if (a26 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  fst::FstHeader::~FstHeader(&a36);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v36 - 160);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  unsigned int v23;
  fst *v24;
  _QWORD *v25;
  void *__p;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned int v36;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v11 = a1[1];
  v12 = 8 * *(int *)(v11 + 80) + 16 * *(_QWORD *)(v11 + 88);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_32;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  for (i = 0; i < v12; v13 = i)
  {
    v36 = i;
    if (i == -1)
      goto LABEL_29;
    ++*a3;
    __p = &v36;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v35 = 0;
    (*(void (**)(_QWORD *, _QWORD, void **))(*a1 + 136))(a1, v36, &__p);
    v17 = 0;
    v18 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v35 >= v33)
          goto LABEL_26;
        ++v17;
LABEL_19:
        if (*(_DWORD *)(v32 + 16 * v35) > v15)
          v15 = *(_DWORD *)(v32 + 16 * v35);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v17;
      if (!__p)
        goto LABEL_19;
      (*(void (**)(void))(*(_QWORD *)__p + 32))();
      if (!__p)
        goto LABEL_19;
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (!__p)
        goto LABEL_19;
      v19 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (v19 > v15)
        v15 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v15)
          v15 = v20;
        if (!__p)
          goto LABEL_23;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_21:
        if (*(_DWORD *)(v32 + 16 * v35 + 4) > v15)
          v15 = *(_DWORD *)(v32 + 16 * v35 + 4);
LABEL_23:
        ++v35;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v34)
      --*v34;
LABEL_28:
    *a2 += v17;
    v14 = v18 + 16 * v17;
LABEL_29:
    i += 16 * *(_DWORD *)(*(_QWORD *)(v11 + 72) + v13 + 4) + 8;
  }
LABEL_32:
  if ((unint64_t)(8 * *a3 + 16 * *a2) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
  }
  v23 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v24 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
  }
  *a6 = v23 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v23 - 1));
}

void sub_1ADD07E24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 16 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD07F44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40D50;
  a1[1] = 0;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD07F90(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(v4, a2);
  *a1 = &unk_1E5D19CF0;
  a1[1] = v4;
  return a1;
}

void sub_1ADD0805C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26258;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26258;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v5 = (int *)(a2 + v2 + 12);
  do
  {
    v6 = *v5;
    v5 += 3;
    if (!v6)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int *v5;
  int v6;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v5 = (int *)(a2 + v2 + 12);
  do
  {
    v6 = *v5;
    v5 += 3;
    if (!v6)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D19CF0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = operator new();
  *(_QWORD *)result = &unk_1E5D1C128;
  *(_DWORD *)(result + 8) = 0;
  v5 = 12 * *(_QWORD *)(v3 + 88) + 8 * *(int *)(v3 + 80);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = result;
  return result;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  __int128 *v18;
  int v19;
  _DWORD *v20;
  __int128 v22;
  _DWORD *v23[3];
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  int v27;
  unsigned int v28;
  _BYTE __str[32];
  int v30;
  _DWORD *v31;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E5C0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  memset(__str, 0, sizeof(__str));
  v30 = 1065353216;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (_DWORD *)(a1 + 104), (_DWORD *)(a1 + 100));
  LODWORD(v26) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v23[0] = &v26;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v26, (uint64_t)&std::piecewise_construct, v23)+ 5);
  v12 = fst::MappedFile::Allocate((fst::MappedFile *)(12 * *(_QWORD *)(a1 + 88) + 8 * *(int *)(a1 + 80)), 16);
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v12 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v28 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v26);
  for (i = 0; ; i += 8)
  {
    if (!v26)
    {
      if ((int)v28 >= v27)
        goto LABEL_45;
LABEL_23:
      v14 = v28;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v26 + 16))(v26))
      break;
    if (!v26)
      goto LABEL_23;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 24))();
LABEL_24:
    v15 = *(_QWORD *)(a1 + 72) + i;
    *(float *)v15 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v14);
    *(_DWORD *)(v15 + 4) = 0;
    v25 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)a2 + 136))(a2, v14, v23);
    while (1)
    {
      if (!v23[0])
      {
        if (v25 >= v23[2])
          goto LABEL_38;
        ++*(_DWORD *)(v15 + 4);
        goto LABEL_31;
      }
      v16 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v23[0] + 24))(v23[0]);
      v17 = v23[0];
      if (v16)
        break;
      ++*(_DWORD *)(v15 + 4);
      if (v17)
      {
        v18 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v17 + 32))(v17);
        goto LABEL_32;
      }
LABEL_31:
      v18 = (__int128 *)&v23[1][4 * (_QWORD)v25];
LABEL_32:
      v22 = *v18;
      v31 = (_DWORD *)&v22 + 3;
      HIDWORD(v22) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v22 + 3, (uint64_t)&std::piecewise_construct, &v31)+ 5);
      v19 = HIDWORD(v22);
      v20 = (_DWORD *)(*(_QWORD *)(a1 + 72) + i);
      v20[2] = DWORD2(v22);
      v20[3] = v22;
      v20[4] = v19;
      ++*(_QWORD *)(a1 + 88);
      if (v23[0])
        (*(void (**)(_DWORD *))(*(_QWORD *)v23[0] + 40))(v23[0]);
      else
        v25 = (_DWORD *)((char *)v25 + 1);
      i += 12;
    }
    if (v23[0])
    {
      (*(void (**)(void))(*(_QWORD *)v23[0] + 8))();
      goto LABEL_40;
    }
LABEL_38:
    if (v24)
      --*v24;
LABEL_40:
    ++*(_DWORD *)(a1 + 80);
    if (v26)
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 32))(v26);
    else
      ++v28;
  }
  if (v26)
    (*(void (**)(void))(*(_QWORD *)v26 + 8))();
LABEL_45:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__str);
  return a1;
}

void sub_1ADD087FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "reduced");
  return std::string::append(a1, "_acceptor");
}

void sub_1ADD088E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  signed int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  signed int v17;
  signed int v18;
  fst *v19;
  _QWORD *v20;
  unsigned int v21;
  fst *v22;
  _QWORD *v23;
  void *__p;
  uint64_t v29;
  unint64_t v30;
  _DWORD *v31;
  unint64_t v32;
  unsigned int v33;
  uint64_t v34;
  signed int v35;
  signed int v36;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v36 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v34);
  v12 = 0;
  v13 = 0;
  while (1)
  {
    if (!v34)
    {
      if (v36 >= v35)
        goto LABEL_39;
LABEL_7:
      v14 = v36;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v34 + 16))(v34))
      break;
    v33 = 0;
    if (!v34)
      goto LABEL_7;
    v14 = (*(uint64_t (**)(void))(*(_QWORD *)v34 + 24))();
LABEL_8:
    v33 = v14;
    if (v14 == -1)
      goto LABEL_34;
    ++*a3;
    __p = &v33;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v33, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v13;
    v32 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 136))(a1, v33, &__p);
    v15 = 0;
    v16 = v13 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v32 >= v30)
          goto LABEL_31;
        ++v15;
LABEL_24:
        if (*(_DWORD *)(v29 + 16 * v32) > v12)
          v12 = *(_DWORD *)(v29 + 16 * v32);
        goto LABEL_26;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v15;
      if (!__p)
        goto LABEL_24;
      (*(void (**)(void))(*(_QWORD *)__p + 32))();
      if (!__p)
        goto LABEL_24;
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (!__p)
        goto LABEL_24;
      v17 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (v17 > v12)
        v12 = v17;
      if (__p)
      {
        v18 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v18 > v12)
          v12 = v18;
        if (!__p)
          goto LABEL_28;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_26:
        if (*(_DWORD *)(v29 + 16 * v32 + 4) > v12)
          v12 = *(_DWORD *)(v29 + 16 * v32 + 4);
LABEL_28:
        ++v32;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_33;
    }
LABEL_31:
    if (v31)
      --*v31;
LABEL_33:
    *a2 += v15;
    v13 = v16 + 12 * v15;
LABEL_34:
    if (v34)
      (*(void (**)(uint64_t))(*(_QWORD *)v34 + 32))(v34);
    else
      ++v36;
  }
  if (v34)
    (*(void (**)(void))(*(_QWORD *)v34 + 8))();
LABEL_39:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v19 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v20 = (_QWORD *)fst::cerr(v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
  }
  v21 = __clz(v12);
  if (v12 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v22 = fst::LogMessage::LogMessage((fst *)&v34, (uint64_t)&__p);
    v23 = (_QWORD *)fst::cerr(v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v34);
    if (SHIBYTE(v30) < 0)
      operator delete(__p);
  }
  *a6 = v21 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v21 - 1));
}

void sub_1ADD08CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E5C0;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E5C0;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  int v13;
  fst *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  unint64_t v21;
  void *__p;
  int v23;
  char v24;
  __int128 v25;
  void *v26[2];
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float v30;
  int v31;
  std::string __str;
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  int v45;
  uint64_t v46;
  _BYTE v47[17];

  v6 = a3[27];
  v46 = 0;
  v45 = 0;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v41 = 0;
  v42 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(a1, &v46, &v45, v43, (_DWORD *)&v42 + 1, &v42, (_DWORD *)&v41 + 1, &v41);
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v39 = 0;
  v40 = 0;
  v38 = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v26[0] = &__str;
  v38 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v43, (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)v26)+ 5);
  v39 = v45;
  v40 = v46;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v33);
  LODWORD(v26[0]) = HIDWORD(v41);
  std::ostream::write();
  LODWORD(v26[0]) = v41;
  std::ostream::write();
  LODWORD(v26[0]) = v42;
  std::ostream::write();
  LODWORD(v26[0]) = HIDWORD(v42);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    v30 = INFINITY;
    v9 = a1[1];
    v21 = 12 * *(_QWORD *)(v9 + 88) + 8 * *(int *)(v9 + 80);
    if (!v21)
      goto LABEL_31;
    v10 = 0;
    v11 = 0;
    while (1)
    {
      if ((_DWORD)v11 == -1)
        goto LABEL_30;
      v30 = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v11);
      v31 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v11);
      std::ostream::write();
      v29 = 0;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a1 + 136))(a1, v11, v26);
      while (1)
      {
        if (!v26[0])
        {
          if (v29 >= v27)
            goto LABEL_28;
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v26[0] + 24))(v26[0]))
          break;
        if (v26[0])
        {
          v12 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v26[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        v12 = (__int128 *)((char *)v26[1] + 16 * v29);
LABEL_16:
        v25 = *v12;
        v13 = HIDWORD(v25);
        if (HIDWORD(v25) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v43, (int *)&v25 + 3))
          {
            __p = (char *)&v25 + 12;
            v13 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v43, (int *)&v25 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
            v14 = fst::LogMessage::LogMessage((fst *)v47, (uint64_t)&__p);
            v15 = (_QWORD *)fst::cerr(v14);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"State ", 6);
            v16 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v47);
            if (v24 < 0)
              operator delete(__p);
            v13 = -1;
          }
          HIDWORD(v25) = v13;
        }
        __p = (void *)__PAIR64__(v25, DWORD2(v25));
        v23 = v13;
        std::ostream::write();
        if (v26[0])
          (*(void (**)(void *))(*(_QWORD *)v26[0] + 40))(v26[0]);
        else
          ++v29;
      }
      if (v26[0])
      {
        (*(void (**)(void))(*(_QWORD *)v26[0] + 8))();
        goto LABEL_30;
      }
LABEL_28:
      if (v28)
        --*v28;
LABEL_30:
      v11 = (v11 + 12 * *(_DWORD *)(*(_QWORD *)(v9 + 72) + v10 + 4) + 8);
      v10 = (int)v11;
      if (v21 <= (int)v11)
      {
LABEL_31:
        v17 = 1;
        goto LABEL_35;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
  v18 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)v26);
  v19 = (_QWORD *)fst::cerr(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  v17 = 0;
LABEL_35:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36) < 0)
    operator delete(*((void **)&v35 + 1));
  if (SBYTE7(v35) < 0)
    operator delete((void *)v34);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v43);
  return v17;
}

void sub_1ADD0927C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34)
{
  uint64_t v34;

  if (a24 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  fst::FstHeader::~FstHeader(&a34);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v34 - 160);
  _Unwind_Resume(a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  int i;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  unsigned int v23;
  fst *v24;
  _QWORD *v25;
  void *__p;
  uint64_t v32;
  unint64_t v33;
  _DWORD *v34;
  unint64_t v35;
  unsigned int v36;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v11 = a1[1];
  v12 = 12 * *(_QWORD *)(v11 + 88) + 8 * *(int *)(v11 + 80);
  if (!v12)
  {
    v15 = 0;
    goto LABEL_32;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  for (i = 0; i < v12; v13 = i)
  {
    v36 = i;
    if (i == -1)
      goto LABEL_29;
    ++*a3;
    __p = &v36;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v36, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v35 = 0;
    (*(void (**)(_QWORD *, _QWORD, void **))(*a1 + 136))(a1, v36, &__p);
    v17 = 0;
    v18 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v35 >= v33)
          goto LABEL_26;
        ++v17;
LABEL_19:
        if (*(_DWORD *)(v32 + 16 * v35) > v15)
          v15 = *(_DWORD *)(v32 + 16 * v35);
        goto LABEL_21;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v17;
      if (!__p)
        goto LABEL_19;
      (*(void (**)(void))(*(_QWORD *)__p + 32))();
      if (!__p)
        goto LABEL_19;
      (*(void (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (!__p)
        goto LABEL_19;
      v19 = *(_DWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)__p + 32))(__p);
      if (v19 > v15)
        v15 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v15)
          v15 = v20;
        if (!__p)
          goto LABEL_23;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_21:
        if (*(_DWORD *)(v32 + 16 * v35 + 4) > v15)
          v15 = *(_DWORD *)(v32 + 16 * v35 + 4);
LABEL_23:
        ++v35;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_28;
    }
LABEL_26:
    if (v34)
      --*v34;
LABEL_28:
    *a2 += v17;
    v14 = v18 + 12 * v17;
LABEL_29:
    i += 12 * *(_DWORD *)(*(_QWORD *)(v11 + 72) + v13 + 4) + 8;
  }
LABEL_32:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
  }
  v23 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v24 = fst::LogMessage::LogMessage((fst *)&v36, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v36);
    if (SHIBYTE(v33) < 0)
      operator delete(__p);
  }
  *a6 = v23 - 1;
  *a7 = 1065353216;
  *a8 = 1065353216;
  *a5 = 2 * ~(-1 << (v23 - 1));
}

void sub_1ADD096B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 12 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

_QWORD *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D19FF8;
  v6[1] = a1;
  v7 = *(_QWORD *)(a1 + 72) + a2;
  v8 = v7 + 8;
  v9 = *(unsigned int *)(v7 + 4);
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = 0;
  result = fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(v6);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADD09814(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(_QWORD *result)
{
  unint64_t v1;
  unsigned int *v2;
  unint64_t v3;
  unint64_t v4;

  v1 = result[4];
  if (v1 < result[3])
  {
    v2 = (unsigned int *)(result[2] + 12 * v1);
    v3 = v2[1] | ((unint64_t)v2[1] << 32);
    v4 = *v2 | ((unint64_t)v2[2] << 32);
    result[5] = v3;
    result[6] = v4;
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reinit(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1[1] + 72) + a2;
  v3 = v2 + 8;
  v4 = *(unsigned int *)(v2 + 4);
  a1[2] = v3;
  a1[3] = v4;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >= *(_QWORD *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

_QWORD *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(_QWORD *result)
{
  ++result[4];
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

_QWORD *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(_QWORD *result)
{
  result[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

_QWORD *fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Seek_(_QWORD *result, uint64_t a2)
{
  result[4] = a2;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Flags_()
{
  return 15;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD09944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40D18;
  a1[1] = 0;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD09990(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D18;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(v4, a2);
  *a1 = &unk_1E5D19C38;
  a1[1] = v4;
  return a1;
}

void sub_1ADD09A5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40D5640F62);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D261A0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D261A0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D19C38;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = operator new();
  *(_QWORD *)result = &unk_1E5D1C0E8;
  *(_DWORD *)(result + 8) = 0;
  v5 = 12 * *(_QWORD *)(v3 + 88) + 8 * *(int *)(v3 + 80);
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = result;
  return result;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  __int128 *v19;
  int v20;
  uint64_t v21;
  float v22;
  double v23;
  uint64_t v24;
  __int128 v26;
  _DWORD *v27[3];
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _BYTE __str[32];
  int v34;
  _DWORD *v35;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E588;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  memset(__str, 0, sizeof(__str));
  v34 = 1065353216;
  v12 = fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 88), (int *)(a1 + 80), __str, (_QWORD *)(a1 + 120), (_QWORD *)(a1 + 112), (float *)(a1 + 104), (float *)(a1 + 100));
  LODWORD(v30) = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 24))(a2, v12);
  v27[0] = &v30;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v30, (uint64_t)&std::piecewise_construct, v27)+ 5);
  v13 = fst::MappedFile::Allocate((fst::MappedFile *)(12 * *(_QWORD *)(a1 + 88) + 8 * *(int *)(a1 + 80)), 16);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v30);
  for (i = 0; ; i += 8)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_47;
LABEL_23:
      v15 = v32;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
      break;
    if (!v30)
      goto LABEL_23;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 24))();
LABEL_24:
    v16 = *(_QWORD *)(a1 + 72) + i;
    *(float *)v16 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v15);
    *(_DWORD *)(v16 + 4) = 0;
    v29 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)a2 + 136))(a2, v15, v27);
    while (1)
    {
      if (!v27[0])
      {
        if (v29 >= v27[2])
          goto LABEL_40;
        ++*(_DWORD *)(v16 + 4);
        goto LABEL_31;
      }
      v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27[0] + 24))(v27[0]);
      v18 = v27[0];
      if (v17)
        break;
      ++*(_DWORD *)(v16 + 4);
      if (v18)
      {
        v19 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 32))(v18);
        goto LABEL_32;
      }
LABEL_31:
      v19 = (__int128 *)&v27[1][4 * (_QWORD)v29];
LABEL_32:
      v26 = *v19;
      v35 = (_DWORD *)&v26 + 3;
      v20 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v26 + 3, (uint64_t)&std::piecewise_construct, &v35)+ 5);
      HIDWORD(v26) = v20;
      v21 = *(_QWORD *)(a1 + 112);
      v22 = *(float *)(a1 + 104) * *((float *)&v26 + 2);
      v23 = roundf(fabsf(v22));
      if ((double)(unint64_t)(1 << v21) + -1.0 < v23)
        v23 = (double)(unint64_t)(1 << v21) + -1.0;
      v24 = *(_QWORD *)(a1 + 72) + i;
      *(_QWORD *)(v24 + 8) = ((((uint64_t)(int)v26 << ((unint64_t)(63 - v21) >> 1)) | SDWORD1(v26)) << (v21 + 1)) | (v22 < 0.0) | (2 * (unint64_t)v23);
      *(_DWORD *)(v24 + 16) = v20;
      ++*(_QWORD *)(a1 + 88);
      if (v27[0])
        (*(void (**)(_DWORD *))(*(_QWORD *)v27[0] + 40))(v27[0]);
      else
        v29 = (_DWORD *)((char *)v29 + 1);
      i += 12;
    }
    if (v27[0])
    {
      (*(void (**)(void))(*(_QWORD *)v27[0] + 8))();
      goto LABEL_42;
    }
LABEL_40:
    if (v28)
      --*v28;
LABEL_42:
    ++*(_DWORD *)(a1 + 80);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    else
      ++v32;
  }
  if (v30)
    (*(void (**)(void))(*(_QWORD *)v30 + 8))();
LABEL_47:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__str);
  return a1;
}

void sub_1ADD0A1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "reduced");
  std::string::append(a1, "_quantized");
  return std::string::append(a1, "_transducer");
}

void sub_1ADD0A2E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, int *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, float *a7, float *a8)
{
  signed int v12;
  uint64_t v13;
  float v14;
  float v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  signed int v21;
  signed int v22;
  fst *v23;
  _QWORD *v24;
  uint64_t v25;
  fst *v26;
  _QWORD *v27;
  int v28;
  float v29;
  float v30;
  double v31;
  float v32;
  float result;
  void *__p;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  signed int v45;
  signed int v46;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v46 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v44);
  v12 = 0;
  v13 = 0;
  v14 = -INFINITY;
  v15 = INFINITY;
  while (1)
  {
    if (!v44)
    {
      if (v46 >= v45)
        goto LABEL_47;
LABEL_7:
      v16 = v46;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44))
      break;
    v43 = 0;
    if (!v44)
      goto LABEL_7;
    v16 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 24))();
LABEL_8:
    v43 = v16;
    if (v16 == -1)
      goto LABEL_42;
    ++*a3;
    __p = &v43;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v13;
    v42 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 136))(a1, v43, &__p);
    v17 = 0;
    v18 = v13 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v42 >= v40)
          goto LABEL_39;
        ++v17;
LABEL_28:
        if (*(float *)(v39 + 16 * v42 + 8) >= v14)
          v14 = *(float *)(v39 + 16 * v42 + 8);
LABEL_30:
        if (v15 >= *(float *)(v39 + 16 * v42 + 8))
          v15 = *(float *)(v39 + 16 * v42 + 8);
LABEL_32:
        if (*(_DWORD *)(v39 + 16 * v42) > v12)
          v12 = *(_DWORD *)(v39 + 16 * v42);
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v17;
      if (!__p)
        goto LABEL_28;
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v19 + 8) >= v14)
        v14 = *(float *)(v19 + 8);
      if (!__p)
        goto LABEL_30;
      v20 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v15 >= *(float *)(v20 + 8))
        v15 = *(float *)(v20 + 8);
      if (!__p)
        goto LABEL_32;
      v21 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v21 > v12)
        v12 = v21;
      if (__p)
      {
        v22 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v22 > v12)
          v12 = v22;
        if (!__p)
          goto LABEL_36;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_34:
        if (*(_DWORD *)(v39 + 16 * v42 + 4) > v12)
          v12 = *(_DWORD *)(v39 + 16 * v42 + 4);
LABEL_36:
        ++v42;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v41)
      --*v41;
LABEL_41:
    *a2 += v17;
    v13 = v18 + 12 * v17;
LABEL_42:
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
    else
      ++v46;
  }
  if (v44)
    (*(void (**)(void))(*(_QWORD *)v44 + 8))();
LABEL_47:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v23 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    v24 = (_QWORD *)fst::cerr(v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  v25 = __clz(v12);
  if (v12 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v26 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    v27 = (_QWORD *)fst::cerr(v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  *a6 = v25 - 1;
  v28 = 1 << (v25 - 1);
  v29 = fabsf(v14);
  v30 = fabsf(v15);
  if (v29 < v30)
    v29 = v30;
  if (v29 <= 0.0)
    v31 = (double)v28 + -1.0;
  else
    v31 = v29;
  v32 = ((double)v28 + -1.0) / v31;
  *a7 = v32;
  result = 1.0 / v32;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v25 - 1));
  return result;
}

void sub_1ADD0A754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E588;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E588;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v6 = (uint64_t *)(a2 + v2 + 8);
  v7 = 0xFFFFFFFFLL << (*(_QWORD *)(a1 + 112)
                      + ((unint64_t)(63 - *(_QWORD *)(a1 + 112)) >> 1)
                      + 1);
  do
  {
    v8 = *v6;
    v6 = (uint64_t *)((char *)v6 + 12);
    if ((v7 & v8) == 0)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v6;
  uint64_t v7;
  int v8;
  char v9;
  unint64_t v10;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v6 = (unint64_t *)(a2 + v2 + 8);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = ~(-1 << ((unint64_t)(63 - v7) >> 1));
  v9 = v7 + 1;
  do
  {
    v10 = *v6;
    v6 = (unint64_t *)((char *)v6 + 12);
    if ((v8 & (v10 >> v9)) == 0)
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  unint64_t v21;
  uint64_t v22;
  void *__p;
  int v24;
  char v25;
  __int128 v26;
  void *v27[2];
  unint64_t v28;
  _DWORD *v29;
  unint64_t v30;
  float v31;
  int v32;
  std::string __str;
  _BYTE v34[8];
  void *v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  _OWORD v45[2];
  int v46;
  int v47;
  uint64_t v48;
  _BYTE v49[17];

  v6 = a3[27];
  v48 = 0;
  v47 = 0;
  v45[1] = 0u;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  v45[0] = 0uLL;
  v46 = 1065353216;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(a1, &v48, &v47, v45, &v44, &v43, (float *)&v42 + 1, (float *)&v42);
  v38 = 0u;
  v37 = 0u;
  v36 = 0u;
  *(_OWORD *)v35 = 0u;
  v40 = 0;
  v41 = 0;
  v39 = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v27[0] = &__str;
  v39 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v45, (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)v27)+ 5);
  v40 = v47;
  v41 = v48;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v34);
  LODWORD(v27[0]) = HIDWORD(v42);
  std::ostream::write();
  LODWORD(v27[0]) = v42;
  std::ostream::write();
  v27[0] = v43;
  std::ostream::write();
  v27[0] = v44;
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    v31 = INFINITY;
    v22 = a1[1];
    v21 = 12 * *(_QWORD *)(v22 + 88) + 8 * *(int *)(v22 + 80);
    if (!v21)
      goto LABEL_33;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if ((_DWORD)v10 == -1)
        goto LABEL_32;
      v31 = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v10);
      v32 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v10);
      std::ostream::write();
      v30 = 0;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a1 + 136))(a1, v10, v27);
      while (1)
      {
        if (!v27[0])
        {
          if (v30 >= v28)
            goto LABEL_30;
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v27[0] + 24))(v27[0]))
          break;
        if (v27[0])
        {
          v11 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v27[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        v11 = (__int128 *)((char *)v27[1] + 16 * v30);
LABEL_16:
        v26 = *v11;
        v12 = HIDWORD(v26);
        if (HIDWORD(v26) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v45, (int *)&v26 + 3))
          {
            __p = (char *)&v26 + 12;
            v12 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v45, (int *)&v26 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ERROR");
            v13 = fst::LogMessage::LogMessage((fst *)v49, (uint64_t)&__p);
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"State ", 6);
            v15 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v49);
            if (v25 < 0)
              operator delete(__p);
            v12 = -1;
          }
          HIDWORD(v26) = v12;
        }
        v16 = roundf(fabsf(*((float *)&v42 + 1) * *((float *)&v26 + 2)));
        if ((double)(unint64_t)(1 << (char)v43) + -1.0 < v16)
          v16 = (double)(unint64_t)(1 << (char)v43) + -1.0;
        __p = (void *)(((((uint64_t)(int)v26 << ((unint64_t)(63 - (_QWORD)v43) >> 1)) | SDWORD1(v26)) << (v43 + 1)) | ((float)(*((float *)&v42 + 1) * *((float *)&v26 + 2)) < 0.0) | (2 * (unint64_t)v16));
        v24 = v12;
        std::ostream::write();
        if (v27[0])
          (*(void (**)(void *))(*(_QWORD *)v27[0] + 40))(v27[0]);
        else
          ++v30;
      }
      if (v27[0])
      {
        (*(void (**)(void))(*(_QWORD *)v27[0] + 8))();
        goto LABEL_32;
      }
LABEL_30:
      if (v29)
        --*v29;
LABEL_32:
      v10 = (v10 + 12 * *(_DWORD *)(*(_QWORD *)(v22 + 72) + v9 + 4) + 8);
      v9 = (int)v10;
      if (v21 <= (int)v10)
      {
LABEL_33:
        v17 = 1;
        goto LABEL_37;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "ERROR");
  v18 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)v27);
  v19 = (_QWORD *)fst::cerr(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
  if (SHIBYTE(v28) < 0)
    operator delete(v27[0]);
  v17 = 0;
LABEL_37:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v37) < 0)
    operator delete(*((void **)&v36 + 1));
  if (SBYTE7(v36) < 0)
    operator delete(v35[0]);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v45);
  return v17;
}

void sub_1ADD0AE74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35)
{
  uint64_t v35;

  if (a25 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  fst::FstHeader::~FstHeader(&a35);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v35 - 176);
  _Unwind_Resume(a1);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, float *a7, float *a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  signed int v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  float v31;
  float v32;
  double v33;
  float v34;
  float result;
  void *__p;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unsigned int v46;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v11 = a1[1];
  v12 = 12 * *(_QWORD *)(v11 + 88) + 8 * *(int *)(v11 + 80);
  if (!v12)
  {
    v15 = 0;
    v18 = -INFINITY;
    v17 = INFINITY;
    goto LABEL_40;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = INFINITY;
  v18 = -INFINITY;
  do
  {
    v46 = v16;
    if (v16 == -1)
      goto LABEL_37;
    ++*a3;
    __p = &v46;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v46, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v45 = 0;
    (*(void (**)(_QWORD *, _QWORD, void **))(*a1 + 136))(a1, v46, &__p);
    v19 = 0;
    v20 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v45 >= v43)
          goto LABEL_34;
        ++v19;
LABEL_23:
        if (*(float *)(v42 + 16 * v45 + 8) >= v18)
          v18 = *(float *)(v42 + 16 * v45 + 8);
LABEL_25:
        if (v17 >= *(float *)(v42 + 16 * v45 + 8))
          v17 = *(float *)(v42 + 16 * v45 + 8);
LABEL_27:
        if (*(_DWORD *)(v42 + 16 * v45) > v15)
          v15 = *(_DWORD *)(v42 + 16 * v45);
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v19;
      if (!__p)
        goto LABEL_23;
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v21 + 8) >= v18)
        v18 = *(float *)(v21 + 8);
      if (!__p)
        goto LABEL_25;
      v22 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v17 >= *(float *)(v22 + 8))
        v17 = *(float *)(v22 + 8);
      if (!__p)
        goto LABEL_27;
      v23 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v23 > v15)
        v15 = v23;
      if (__p)
      {
        v24 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v24 > v15)
          v15 = v24;
        if (!__p)
          goto LABEL_31;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_29:
        if (*(_DWORD *)(v42 + 16 * v45 + 4) > v15)
          v15 = *(_DWORD *)(v42 + 16 * v45 + 4);
LABEL_31:
        ++v45;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v44)
      --*v44;
LABEL_36:
    *a2 += v19;
    v14 = v20 + 12 * v19;
LABEL_37:
    v16 += 12 * *(_DWORD *)(*(_QWORD *)(v11 + 72) + v13 + 4) + 8;
    v13 = v16;
  }
  while (v12 > v16);
LABEL_40:
  if ((unint64_t)(12 * *a2 + 8 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v25 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v43) < 0)
      operator delete(__p);
  }
  v27 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v28 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v43) < 0)
      operator delete(__p);
  }
  *a6 = v27 - 1;
  v30 = 1 << (v27 - 1);
  v31 = fabsf(v18);
  v32 = fabsf(v17);
  if (v31 < v32)
    v31 = v32;
  if (v31 <= 0.0)
    v33 = (double)v30 + -1.0;
  else
    v33 = v31;
  v34 = ((double)v30 + -1.0) / v33;
  *a7 = v34;
  result = 1.0 / v34;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v27 - 1));
  return result;
}

void sub_1ADD0B36C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 12 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D19F90;
  v6[1] = a1;
  v7 = *(_QWORD *)(a1 + 72) + a2;
  v8 = v7 + 8;
  v9 = *(unsigned int *)(v7 + 4);
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(v6, v10);
  *a3 = v6;
  a3[3] = 0;
}

void sub_1ADD0B4C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(_QWORD *a1, float result)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float v11;
  uint64_t v12;
  unint64_t v13;

  v2 = a1[4];
  if (v2 < a1[3])
  {
    v3 = a1[1];
    v4 = a1[2] + 12 * v2;
    v5 = *(float *)(v3 + 100);
    v7 = *(_QWORD *)(v3 + 112);
    v6 = *(_QWORD *)(v3 + 120);
    v8 = 63 - v7;
    v9 = (unint64_t)(63 - v7) >> 1;
    LOBYTE(v7) = v7 + 1;
    v10 = *(_QWORD *)v4 >> (v7 + (v8 >> 1));
    v11 = (float)((*(_QWORD *)v4 & v6) >> 1);
    v12 = (*(_QWORD *)v4 >> v7) & ~(-1 << v9);
    if ((*(_QWORD *)v4 & 1) != 0)
      v11 = -v11;
    result = v5 * v11;
    v13 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v4 + 8) << 32);
    a1[5] = v10 | (unint64_t)(v12 << 32);
    a1[6] = v13;
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reinit(_QWORD *a1, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1[1] + 72) + a2;
  v4 = v3 + 8;
  v5 = *(unsigned int *)(v3 + 4);
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, a3);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >= *(_QWORD *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(_QWORD *a1, float result)
{
  ++a1[4];
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(_QWORD *a1, float result)
{
  a1[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Seek_(_QWORD *a1, float result, uint64_t a3)
{
  a1[4] = a3;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Flags_()
{
  return 15;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD0B64C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40D88;
  a1[1] = 0;
  fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD0B698(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40D88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(v4, a2);
  *a1 = &unk_1E5D19DA8;
  a1[1] = v4;
  return a1;
}

void sub_1ADD0B764(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C4097CFB54CLL);
  _Unwind_Resume(a1);
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26310;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26310;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 96);
}

float fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  return *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + a2 + 4);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

_QWORD *fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D19DA8;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitStateIterator(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  result = operator new();
  *(_QWORD *)result = &unk_1E5D1C168;
  *(_DWORD *)(result + 8) = 0;
  v5 = 8 * (*(_QWORD *)(v3 + 88) + *(int *)(v3 + 80));
  *(_QWORD *)(result + 16) = v3;
  *(_QWORD *)(result + 24) = v5;
  *a2 = result;
  return result;
}

void fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::IsMemoryMapped(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 64) + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 80);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ReducedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _DWORD *v18;
  __int128 *v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  float v23;
  double v24;
  __int128 v26;
  _DWORD *v27[3];
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  _BYTE __str[32];
  int v34;
  _DWORD *v35;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1E5F8;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString((std::string *)__str);
  std::string::operator=(v4, (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  memset(__str, 0, sizeof(__str));
  v34 = 1065353216;
  v12 = fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 88), (int *)(a1 + 80), __str, (_DWORD *)(a1 + 112), (_DWORD *)(a1 + 108), (float *)(a1 + 104), (float *)(a1 + 100));
  LODWORD(v30) = (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a2 + 24))(a2, v12);
  v27[0] = &v30;
  *(_DWORD *)(a1 + 96) = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v30, (uint64_t)&std::piecewise_construct, v27)+ 5);
  v13 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * (*(_QWORD *)(a1 + 88) + *(int *)(a1 + 80))), 16);
  *(_QWORD *)(a1 + 64) = v13;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v13 + 8);
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  v32 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v30);
  v14 = 0;
  while (1)
  {
    if (!v30)
    {
      if ((int)v32 >= v31)
        goto LABEL_46;
LABEL_23:
      v15 = v32;
      goto LABEL_24;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30))
      break;
    if (!v30)
      goto LABEL_23;
    v15 = (*(uint64_t (**)(void))(*(_QWORD *)v30 + 24))();
LABEL_24:
    v16 = *(_QWORD *)(a1 + 72) + v14;
    *(float *)v16 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v15);
    *(_DWORD *)(v16 + 4) = 0;
    v29 = 0;
    (*(void (**)(uint64_t, uint64_t, _DWORD **))(*(_QWORD *)a2 + 136))(a2, v15, v27);
    while (1)
    {
      v14 += 8;
      if (!v27[0])
      {
        if (v29 >= v27[2])
          goto LABEL_39;
        ++*(_DWORD *)(v16 + 4);
        goto LABEL_31;
      }
      v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v27[0] + 24))(v27[0]);
      v18 = v27[0];
      if (v17)
        break;
      ++*(_DWORD *)(v16 + 4);
      if (v18)
      {
        v19 = (__int128 *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 32))(v18);
        goto LABEL_32;
      }
LABEL_31:
      v19 = (__int128 *)&v27[1][4 * (_QWORD)v29];
LABEL_32:
      v26 = *v19;
      v35 = (_DWORD *)&v26 + 3;
      v20 = std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)__str, (int *)&v26 + 3, (uint64_t)&std::piecewise_construct, &v35);
      v21 = *((unsigned int *)v20 + 5);
      HIDWORD(v26) = *((_DWORD *)v20 + 5);
      v22 = *(_DWORD *)(a1 + 108);
      v23 = *(float *)(a1 + 104) * *((float *)&v26 + 2);
      v24 = roundf(fabsf(v23));
      if ((double)(1 << v22) + -1.0 < v24)
        v24 = (double)(1 << v22) + -1.0;
      *(_QWORD *)(*(_QWORD *)(a1 + 72) + v14) = ((_DWORD)v26 << (v22 + 1)) | (v23 < 0.0) | (2 * v24) | (unint64_t)(v21 << 32);
      ++*(_QWORD *)(a1 + 88);
      if (v27[0])
        (*(void (**)(_DWORD *))(*(_QWORD *)v27[0] + 40))(v27[0]);
      else
        v29 = (_DWORD *)((char *)v29 + 1);
    }
    if (v27[0])
    {
      (*(void (**)(void))(*(_QWORD *)v27[0] + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v28)
      --*v28;
LABEL_41:
    ++*(_DWORD *)(a1 + 80);
    if (v30)
      (*(void (**)(uint64_t))(*(_QWORD *)v30 + 32))(v30);
    else
      ++v32;
  }
  if (v30)
    (*(void (**)(void))(*(_QWORD *)v30 + 8))();
LABEL_46:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)__str);
  return a1;
}

void sub_1ADD0BECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&__p);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v24);
  _Unwind_Resume(a1);
}

std::string *fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "reduced");
  std::string::append(a1, "_quantized");
  return std::string::append(a1, "_acceptor");
}

void sub_1ADD0BFC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, float *a7, float *a8)
{
  signed int v13;
  uint64_t v14;
  float v15;
  float v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;
  signed int v23;
  fst *v24;
  _QWORD *v25;
  unsigned int v26;
  fst *v27;
  _QWORD *v28;
  int v29;
  float v30;
  float v31;
  double v32;
  float v33;
  float result;
  void *__p;
  uint64_t v39;
  unint64_t v40;
  _DWORD *v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  signed int v45;
  signed int v46;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v46 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v44);
  v13 = 0;
  v14 = 0;
  v15 = -INFINITY;
  v16 = INFINITY;
  while (1)
  {
    if (!v44)
    {
      if (v46 >= v45)
        goto LABEL_47;
LABEL_7:
      v17 = v46;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v44 + 16))(v44))
      break;
    v43 = 0;
    if (!v44)
      goto LABEL_7;
    v17 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 24))();
LABEL_8:
    v43 = v17;
    if (v17 == -1)
      goto LABEL_42;
    ++*a3;
    __p = &v43;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v43, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v42 = 0;
    (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)a1 + 136))(a1, v43, &__p);
    v18 = 0;
    v19 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v42 >= v40)
          goto LABEL_39;
        ++v18;
LABEL_28:
        if (*(float *)(v39 + 16 * v42 + 8) >= v15)
          v15 = *(float *)(v39 + 16 * v42 + 8);
LABEL_30:
        if (v16 >= *(float *)(v39 + 16 * v42 + 8))
          v16 = *(float *)(v39 + 16 * v42 + 8);
LABEL_32:
        if (*(_DWORD *)(v39 + 16 * v42) > v13)
          v13 = *(_DWORD *)(v39 + 16 * v42);
        goto LABEL_34;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v18;
      if (!__p)
        goto LABEL_28;
      v20 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v20 + 8) >= v15)
        v15 = *(float *)(v20 + 8);
      if (!__p)
        goto LABEL_30;
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v16 >= *(float *)(v21 + 8))
        v16 = *(float *)(v21 + 8);
      if (!__p)
        goto LABEL_32;
      v22 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v22 > v13)
        v13 = v22;
      if (__p)
      {
        v23 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v23 > v13)
          v13 = v23;
        if (!__p)
          goto LABEL_36;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_34:
        if (*(_DWORD *)(v39 + 16 * v42 + 4) > v13)
          v13 = *(_DWORD *)(v39 + 16 * v42 + 4);
LABEL_36:
        ++v42;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_41;
    }
LABEL_39:
    if (v41)
      --*v41;
LABEL_41:
    *a2 += v18;
    v14 = v19 + 8 * v18;
LABEL_42:
    if (v44)
      (*(void (**)(uint64_t))(*(_QWORD *)v44 + 32))(v44);
    else
      ++v46;
  }
  if (v44)
    (*(void (**)(void))(*(_QWORD *)v44 + 8))();
LABEL_47:
  if ((((unint64_t)(*a2 + *a3) >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v24 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    v25 = (_QWORD *)fst::cerr(v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  v26 = __clz(v13);
  if (v13 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v27 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&__p);
    v28 = (_QWORD *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v40) < 0)
      operator delete(__p);
  }
  *a6 = v26 - 1;
  v29 = 1 << (v26 - 1);
  v30 = fabsf(v15);
  v31 = fabsf(v16);
  if (v30 < v31)
    v30 = v31;
  if (v30 <= 0.0)
    v32 = (double)v29 + -1.0;
  else
    v32 = v30;
  v33 = ((double)v29 + -1.0) / v32;
  *a7 = v33;
  result = 1.0 / v33;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v26 - 1));
  return result;
}

void sub_1ADD0C424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E5F8;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~ReducedFstImpl(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E5D1E5F8;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::HasSequentialStates()
{
  return 0;
}

uint64_t fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned int *v6;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(unsigned int *)(v2 + a2 + 4);
  if ((int)v3 <= 0)
    return 0;
  result = 0;
  v6 = (unsigned int *)(a2 + v2 + 8);
  v7 = *(_DWORD *)(a1 + 108) + 1;
  do
  {
    v8 = *v6;
    v6 += 2;
    if (!(v8 >> v7))
      ++result;
    --v3;
  }
  while (v3);
  return result;
}

uint64_t fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(_QWORD *a1, _QWORD *a2, _BYTE *a3)
{
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  int v12;
  fst *v13;
  _QWORD *v14;
  _QWORD *v15;
  double v16;
  uint64_t v17;
  fst *v18;
  _QWORD *v19;
  unint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  __int128 v25;
  void *v26[2];
  unint64_t v27;
  _DWORD *v28;
  unint64_t v29;
  float v30;
  int v31;
  std::string __str;
  _BYTE v33[8];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[4];
  int v44;
  int v45;
  uint64_t v46;
  _BYTE v47[17];

  v6 = a3[27];
  v46 = 0;
  v45 = 0;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  memset(v43, 0, sizeof(v43));
  v44 = 1065353216;
  v41 = 0;
  v42 = 0;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(a1, &v46, &v45, v43, (_DWORD *)&v42 + 1, &v42, (float *)&v41 + 1, (float *)&v41);
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v39 = 0;
  v40 = 0;
  v38 = -1;
  LODWORD(__str.__r_.__value_.__l.__data_) = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v26[0] = &__str;
  v38 = *((int *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v43, (int *)&__str, (uint64_t)&std::piecewise_construct, (_DWORD **)v26)+ 5);
  v39 = v45;
  v40 = v46;
  fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  v8 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader((uint64_t)a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v33);
  LODWORD(v26[0]) = HIDWORD(v41);
  std::ostream::write();
  LODWORD(v26[0]) = v41;
  std::ostream::write();
  LODWORD(v26[0]) = v42;
  std::ostream::write();
  LODWORD(v26[0]) = HIDWORD(v42);
  std::ostream::write();
  if (!a3[27] || fst::AlignOutput(a2))
  {
    v30 = INFINITY;
    v22 = a1[1];
    v21 = 8 * (*(_QWORD *)(v22 + 88) + *(int *)(v22 + 80));
    if (!v21)
      goto LABEL_33;
    v9 = 0;
    v10 = 0;
    while (1)
    {
      if ((_DWORD)v10 == -1)
        goto LABEL_32;
      v30 = (*(float (**)(_QWORD *, uint64_t))(*a1 + 32))(a1, v10);
      v31 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 40))(a1, v10);
      std::ostream::write();
      v29 = 0;
      (*(void (**)(_QWORD *, uint64_t, void **))(*a1 + 136))(a1, v10, v26);
      while (1)
      {
        if (!v26[0])
        {
          if (v29 >= v27)
            goto LABEL_30;
          goto LABEL_15;
        }
        if ((*(unsigned int (**)(void *))(*(_QWORD *)v26[0] + 24))(v26[0]))
          break;
        if (v26[0])
        {
          v11 = (__int128 *)(*(uint64_t (**)(void))(*(_QWORD *)v26[0] + 32))();
          goto LABEL_16;
        }
LABEL_15:
        v11 = (__int128 *)((char *)v26[1] + 16 * v29);
LABEL_16:
        v25 = *v11;
        v12 = HIDWORD(v25);
        if (HIDWORD(v25) != -1)
        {
          if (std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(v43, (int *)&v25 + 3))
          {
            __p[0] = (char *)&v25 + 12;
            v12 = *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)v43, (int *)&v25 + 3, (uint64_t)&std::piecewise_construct, (_DWORD **)__p)+ 5);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "ERROR");
            v13 = fst::LogMessage::LogMessage((fst *)v47, (uint64_t)__p);
            v14 = (_QWORD *)fst::cerr(v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"State ", 6);
            v15 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" missing in new FST!", 20);
            fst::LogMessage::~LogMessage((fst::LogMessage *)v47);
            if (v24 < 0)
              operator delete(__p[0]);
            v12 = -1;
          }
          HIDWORD(v25) = v12;
        }
        v16 = roundf(fabsf(*((float *)&v41 + 1) * *((float *)&v25 + 2)));
        if ((double)(1 << v42) + -1.0 < v16)
          v16 = (double)(1 << v42) + -1.0;
        LODWORD(__p[0]) = ((_DWORD)v25 << (v42 + 1)) | ((float)(*((float *)&v41 + 1) * *((float *)&v25 + 2)) < 0.0) | (2 * v16);
        HIDWORD(__p[0]) = v12;
        std::ostream::write();
        if (v26[0])
          (*(void (**)(void *))(*(_QWORD *)v26[0] + 40))(v26[0]);
        else
          ++v29;
      }
      if (v26[0])
      {
        (*(void (**)(void))(*(_QWORD *)v26[0] + 8))();
        goto LABEL_32;
      }
LABEL_30:
      if (v28)
        --*v28;
LABEL_32:
      v10 = (v10 + 8 * *(_DWORD *)(*(_QWORD *)(v22 + 72) + v9 + 4) + 8);
      v9 = (int)v10;
      if (v21 <= (int)v10)
      {
LABEL_33:
        v17 = 1;
        goto LABEL_37;
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(v26, "ERROR");
  v18 = fst::LogMessage::LogMessage((fst *)__p, (uint64_t)v26);
  v19 = (_QWORD *)fst::cerr(v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Could not align file during write after header", 46);
  fst::LogMessage::~LogMessage((fst::LogMessage *)__p);
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  v17 = 0;
LABEL_37:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36) < 0)
    operator delete(*((void **)&v35 + 1));
  if (SBYTE7(v35) < 0)
    operator delete((void *)v34);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v43);
  return v17;
}

void sub_1ADD0CAA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36)
{
  uint64_t v36;

  if (a26 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  fst::FstHeader::~FstHeader(&a36);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v36 - 176);
  _Unwind_Resume(a1);
}

float fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(_QWORD *a1, _QWORD *a2, int *a3, _QWORD *a4, _DWORD *a5, _DWORD *a6, float *a7, float *a8)
{
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  int v16;
  float v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  signed int v23;
  signed int v24;
  fst *v25;
  _QWORD *v26;
  unsigned int v27;
  fst *v28;
  _QWORD *v29;
  int v30;
  float v31;
  float v32;
  double v33;
  float v34;
  float result;
  void *__p;
  uint64_t v42;
  unint64_t v43;
  _DWORD *v44;
  unint64_t v45;
  unsigned int v46;

  *a2 = 0;
  *a3 = 0;
  std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::clear(a4);
  v11 = a1[1];
  v12 = 8 * (*(_QWORD *)(v11 + 88) + *(int *)(v11 + 80));
  if (!v12)
  {
    v15 = 0;
    v18 = -INFINITY;
    v17 = INFINITY;
    goto LABEL_40;
  }
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = INFINITY;
  v18 = -INFINITY;
  do
  {
    v46 = v16;
    if (v16 == -1)
      goto LABEL_37;
    ++*a3;
    __p = &v46;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<int,float>,std::__unordered_map_hasher<int,std::__hash_value_type<int,float>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,float>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int &&>,std::tuple<>>((uint64_t)a4, (int *)&v46, (uint64_t)&std::piecewise_construct, (_DWORD **)&__p)+ 5) = v14;
    v45 = 0;
    (*(void (**)(_QWORD *, _QWORD, void **))(*a1 + 136))(a1, v46, &__p);
    v19 = 0;
    v20 = v14 + 8;
    while (1)
    {
      if (!__p)
      {
        if (v45 >= v43)
          goto LABEL_34;
        ++v19;
LABEL_23:
        if (*(float *)(v42 + 16 * v45 + 8) >= v18)
          v18 = *(float *)(v42 + 16 * v45 + 8);
LABEL_25:
        if (v17 >= *(float *)(v42 + 16 * v45 + 8))
          v17 = *(float *)(v42 + 16 * v45 + 8);
LABEL_27:
        if (*(_DWORD *)(v42 + 16 * v45) > v15)
          v15 = *(_DWORD *)(v42 + 16 * v45);
        goto LABEL_29;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v19;
      if (!__p)
        goto LABEL_23;
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v21 + 8) >= v18)
        v18 = *(float *)(v21 + 8);
      if (!__p)
        goto LABEL_25;
      v22 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v17 >= *(float *)(v22 + 8))
        v17 = *(float *)(v22 + 8);
      if (!__p)
        goto LABEL_27;
      v23 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v23 > v15)
        v15 = v23;
      if (__p)
      {
        v24 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v24 > v15)
          v15 = v24;
        if (!__p)
          goto LABEL_31;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_29:
        if (*(_DWORD *)(v42 + 16 * v45 + 4) > v15)
          v15 = *(_DWORD *)(v42 + 16 * v45 + 4);
LABEL_31:
        ++v45;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_36;
    }
LABEL_34:
    if (v44)
      --*v44;
LABEL_36:
    *a2 += v19;
    v14 = v20 + 8 * v19;
LABEL_37:
    v16 += 8 * *(_DWORD *)(*(_QWORD *)(v11 + 72) + v13 + 4) + 8;
    v13 = v16;
  }
  while (v12 > v16);
LABEL_40:
  if ((((unint64_t)(*a2 + *a3) >> 28) & 0x1FFFFFFFFLL) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v25 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Too much data for reduced file format: ", 39);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v43) < 0)
      operator delete(__p);
  }
  v27 = __clz(v15);
  if (v15 >> 27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v28 = fst::LogMessage::LogMessage((fst *)&v46, (uint64_t)&__p);
    v29 = (_QWORD *)fst::cerr(v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v29, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v46);
    if (SHIBYTE(v43) < 0)
      operator delete(__p);
  }
  *a6 = v27 - 1;
  v30 = 1 << (v27 - 1);
  v31 = fabsf(v18);
  v32 = fabsf(v17);
  if (v31 < v32)
    v31 = v32;
  if (v31 <= 0.0)
    v33 = (double)v30 + -1.0;
  else
    v33 = v31;
  v34 = ((double)v30 + -1.0) / v33;
  *a7 = v34;
  result = 1.0 / v34;
  *a8 = result;
  *a5 = 2 * ~(-1 << (v27 - 1));
  return result;
}

void sub_1ADD0CF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~StateIterator()
{
  JUMPOUT(0x1AF44D190);
}

BOOL fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) <= (unint64_t)*(int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t result)
{
  *(_DWORD *)(result + 8) += 8 * *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 16) + 72) + *(int *)(result + 8) + 4)
                           + 8;
  return result;
}

uint64_t fst::StateIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(uint64_t result)
{
  *(_DWORD *)(result + 8) = 0;
  return result;
}

void fst::ReducedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;

  v6 = (_QWORD *)operator new();
  *v6 = &unk_1E5D1A060;
  v6[1] = a1;
  v7 = *(_QWORD *)(a1 + 72) + a2;
  v8 = v7 + 8;
  v9 = *(unsigned int *)(v7 + 4);
  v6[2] = v8;
  v6[3] = v9;
  v6[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(v6, v10);
  *a3 = v6;
  a3[3] = 0;
}

void sub_1ADD0D0D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402B94B19BLL);
  _Unwind_Resume(a1);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(_QWORD *a1, float result)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  float v10;

  v2 = a1[4];
  if (v2 < a1[3])
  {
    v3 = a1[1];
    v4 = (unsigned int *)(a1[2] + 8 * v2);
    v5 = *(float *)(v3 + 100);
    v6 = v3 + 108;
    v8 = *v4;
    v7 = v4[1];
    v9 = v8 >> (*(_DWORD *)(v3 + 108) + 1);
    v10 = (float)((v8 & *(_DWORD *)(v6 + 4)) >> 1);
    if ((v8 & 1) != 0)
      v10 = -v10;
    result = v5 * v10;
    a1[5] = v9 | (v9 << 32);
    a1[6] = LODWORD(result) | (unint64_t)(v7 << 32);
  }
  return result;
}

void fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reinit(_QWORD *a1, int a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1[1] + 72) + a2;
  v4 = v3 + 8;
  v5 = *(unsigned int *)(v3 + 4);
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = 0;
  fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, a3);
  return 1;
}

BOOL fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) >= *(_QWORD *)(a1 + 24);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return a1 + 40;
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(_QWORD *a1, float result)
{
  ++a1[4];
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(_QWORD *a1, float result)
{
  a1[4] = 0;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

float fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Seek_(_QWORD *a1, float result, uint64_t a3)
{
  a1[4] = a3;
  return fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1, result);
}

uint64_t fst::ArcIterator<fst::ReducedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Flags_()
{
  return 15;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD0D230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40DC0;
  a1[1] = 0;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD0D27C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40DC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40DC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(v4, a2);
  *a1 = &unk_1E5D1AA88;
  a1[1] = v4;
  return a1;
}

void sub_1ADD0D348(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26478;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26478;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v7 + 4);
    return *(_QWORD *)(v2 + 120) - v7 + 1;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v5 + 4);
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::GetArcs(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  fst::ArcBuffer<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::SetFromFst<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a3, a1, a2, a4, 2);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D1AA88;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t a1, int a2, _QWORD *a3)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::IsMemoryMapped(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(v1[8] + 16) && *(_QWORD *)(v1[10] + 16) && *(_QWORD *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  uint64_t i;
  _OWORD *v28;
  std::string __p;
  _DWORD *v31;
  std::string::size_type v32;
  uint64_t v33;
  int v34;
  unsigned int v35;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EDD0;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 120), (int *)(a1 + 112), (_QWORD *)(a1 + 128), (uint64_t *)&__p);
  v12 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v12;
  if (v13)
  {
    MEMORY[0x1AF44D190](v13, 0x1000C40451B5BE8);
    v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
      MEMORY[0x1AF44D190](v14, 0x1000C40451B5BE8);
  }
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v16 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v17 = fst::MappedFile::Allocate((fst::MappedFile *)(4 * *(int *)(a1 + 112)), 16);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v17 + 8);
  v18 = fst::MappedFile::Allocate((fst::MappedFile *)(16 * v16), 16);
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v18 + 8);
  v19 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * v15), 16);
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v19 + 8);
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v35 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v33);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    if (!v33)
    {
      if ((int)v35 >= v34)
        goto LABEL_53;
LABEL_26:
      v22 = v35;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33))
      break;
    if (!v33)
      goto LABEL_26;
    v22 = (*(uint64_t (**)(void))(*(_QWORD *)v33 + 24))();
LABEL_27:
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v22);
    if (v24 > INFINITY || (float)(v24 + 0.00097656) < INFINITY)
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = -v20;
      v26 = *(_QWORD *)(a1 + 104) + 8 * v20;
      *(float *)v26 = v24;
      *(_DWORD *)(v26 + 4) = v21;
      ++v20;
    }
    else
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = v21;
    }
    v32 = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a2 + 136))(a2, (int)v22, &__p);
    for (i = 16 * v21 - 16; ; i += 16)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v32 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_46;
        goto LABEL_39;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (__p.__r_.__value_.__r.__words[0])
      {
        v28 = (_OWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
        goto LABEL_40;
      }
LABEL_39:
      v28 = (_OWORD *)(__p.__r_.__value_.__l.__size_ + 16 * v32);
LABEL_40:
      *(_OWORD *)(*(_QWORD *)(a1 + 88) + i) = *v28;
      ++*(_QWORD *)(a1 + 120);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v32;
      ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_48;
    }
LABEL_46:
    if (v31)
      --*v31;
LABEL_48:
    ++*(_DWORD *)(a1 + 112);
    if (v33)
      (*(void (**)(uint64_t))(*(_QWORD *)v33 + 32))(v33);
    else
      ++v35;
  }
  if (v33)
    (*(void (**)(void))(*(_QWORD *)v33 + 8))();
LABEL_53:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  return a1;
}

void sub_1ADD0DB00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v17 + 144) = 0;
  if (v19)
    MEMORY[0x1AF44D190](v19, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  signed int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  v10 = 0;
  v11 = -INFINITY;
  v12 = INFINITY;
  while (1)
  {
    if (!v28)
    {
      if ((int)v30 >= v29)
        goto LABEL_53;
LABEL_7:
      v13 = v30;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28))
      break;
    if (!v28)
      goto LABEL_7;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_8:
    v14 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v13);
    if (v14 > INFINITY || (float)(v14 + 0.00097656) < INFINITY)
      ++*a4;
    if ((_DWORD)v13 == -1)
      goto LABEL_48;
    ++*a3;
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v13, &__p);
    v16 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v27 >= v25)
          goto LABEL_45;
        ++v16;
LABEL_34:
        if (*(float *)(v24 + 16 * v27 + 8) >= v11)
          v11 = *(float *)(v24 + 16 * v27 + 8);
LABEL_36:
        if (v12 >= *(float *)(v24 + 16 * v27 + 8))
          v12 = *(float *)(v24 + 16 * v27 + 8);
LABEL_38:
        if (*(_DWORD *)(v24 + 16 * v27) > v10)
          v10 = *(_DWORD *)(v24 + 16 * v27);
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v16;
      if (!__p)
        goto LABEL_34;
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v17 + 8) >= v11)
        v11 = *(float *)(v17 + 8);
      if (!__p)
        goto LABEL_36;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v12 >= *(float *)(v18 + 8))
        v12 = *(float *)(v18 + 8);
      if (!__p)
        goto LABEL_38;
      v19 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v19 > v10)
        v10 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v10)
          v10 = v20;
        if (!__p)
          goto LABEL_42;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v24 + 16 * v27 + 4) > v10)
          v10 = *(_DWORD *)(v24 + 16 * v27 + 4);
LABEL_42:
        ++v27;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_47;
    }
LABEL_45:
    if (v26)
      --*v26;
LABEL_47:
    *a2 += v16;
LABEL_48:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    (*(void (**)(void))(*(_QWORD *)v28 + 8))();
LABEL_53:
  if ((unint64_t)(4 * *a3 + 16 * *a2 + 8 * *a4) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for squeezed file format: ", 40);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
  }
  fst::SqueezedQuantizationOptions<false,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v10, a5);
}

void sub_1ADD0DF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(_QWORD *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::HasSequentialStates()
{
  return 1;
}

double fst::SqueezedQuantizationOptions<false,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>@<D0>(signed int a1@<W0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  fst *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  double result;
  void *__p[2];
  char v15;
  char v16;

  v3 = __clz(a1);
  if (a1 <= 0)
    v4 = 31;
  else
    v4 = v3;
  if (v4 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v5 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v7 = v4 - 1;
  v8 = operator new();
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)v8 = result;
  *(_DWORD *)(v8 + 8) = v7;
  *(_DWORD *)(v8 + 12) = 2 * ~(-1 << v7);
  *a2 = v8;
  return result;
}

void sub_1ADD0E0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::~SqueezedFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D1EDD0;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C40451B5BE8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0)
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v10 + 4);
    LODWORD(v5) = v5 - v10 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v8 = (int *)(*(_QWORD *)(a1 + 88) + 16 * (v6 - 1));
  v5 = v5;
  do
  {
    v9 = *v8;
    v8 += 4;
    if (!v9)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0)
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v10 + 4);
    LODWORD(v5) = v5 - v10 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v5 = v5;
  v8 = (int *)(16 * (v6 - 1) + *(_QWORD *)(a1 + 88) + 4);
  do
  {
    v9 = *v8;
    v8 += 4;
    if (!v9)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  BOOL v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int v32;
  fst *v33;
  _QWORD *v34;
  fst *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  void *__p;
  char *v48;
  char *v49;
  int v50;
  std::string __str;
  char v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63[3];

  v6 = a3[27] == 0;
  v63[0] = 0;
  if (v6)
    v7 = 4;
  else
    v7 = 3;
  v62 = 0;
  v61 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, v63, &v62, &v61, &v60);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  v57 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v58 = v62;
  v59 = v63[0];
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::TypeString(&__str);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v52);
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v25 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v39);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_100;
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v9 = 0;
  v10 = 1;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_42;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_13;
    }
LABEL_12:
    v11 = v41;
LABEL_13:
    if ((_DWORD)v11 != -1)
    {
      v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
      if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY)
      {
        v50 = -v9;
        v14 = v48;
        if (v48 >= v49)
        {
          v16 = (char *)__p;
          v17 = (v48 - (_BYTE *)__p) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v49 - (_BYTE *)__p;
          if ((v49 - (_BYTE *)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v20);
            v16 = (char *)__p;
            v14 = v48;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = (char *)(v22 + 1);
          while (v14 != v16)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--v22 = v23;
          }
          __p = v22;
          v48 = v15;
          v49 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v48 = v10;
          v15 = v14 + 4;
        }
        ++v9;
        v48 = v15;
      }
      else
      {
        v50 = v10;
      }
      std::ostream::write();
      v10 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_42:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v33 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Could not align file during write after states", 46);
LABEL_95:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_98;
  }
  v46 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 128))(a1, &v44);
  while (1)
  {
    if (!v44)
    {
      if ((int)v46 >= v45)
        goto LABEL_72;
LABEL_50:
      v24 = v46;
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44))
      break;
    if (!v44)
      goto LABEL_50;
    v24 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 24))();
LABEL_51:
    v43 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v24, &v39);
    while (!v39)
    {
      if (v43 >= v41)
        goto LABEL_62;
LABEL_57:
      std::ostream::write();
      if (v39)
        (*(void (**)(void *))(*(_QWORD *)v39 + 40))(v39);
      else
        ++v43;
    }
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v39 + 24))(v39))
    {
      if (v39)
        (*(void (**)(void))(*(_QWORD *)v39 + 32))();
      goto LABEL_57;
    }
    if (v39)
    {
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
      goto LABEL_64;
    }
LABEL_62:
    if (v42)
      --*v42;
LABEL_64:
    if (v44)
      (*(void (**)(unint64_t))(*(_QWORD *)v44 + 32))(v44);
    else
      ++v46;
  }
  if (v44)
    (*(void (**)(void))(*(_QWORD *)v44 + 8))();
LABEL_72:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v35 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v36 = (_QWORD *)fst::cerr(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not align file during write after arcs", 44);
    goto LABEL_95;
  }
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v28 = 0;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_93;
      goto LABEL_80;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v29 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_81;
    }
LABEL_80:
    v29 = v41;
LABEL_81:
    v30 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
    if (v30 > INFINITY || (float)(v30 + 0.00097656) < INFINITY)
    {
      *(float *)&v32 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
      v44 = __PAIR64__(*((_DWORD *)__p + v28), v32);
      std::ostream::write();
      ++v28;
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_93:
  v27 = 1;
LABEL_98:
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
LABEL_100:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  v37 = v60;
  v60 = 0;
  if (v37)
    MEMORY[0x1AF44D190](v37, 0x1000C40451B5BE8);
  return v27;
}

void sub_1ADD0EA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35)
{
  uint64_t v35;
  uint64_t v37;

  if (a19 < 0)
    operator delete(__p);
  if (a25)
    operator delete(a25);
  if (a34 < 0)
    operator delete(a29);
  fst::FstHeader::~FstHeader(&a35);
  v37 = *(_QWORD *)(v35 - 128);
  *(_QWORD *)(v35 - 128) = 0;
  if (v37)
    MEMORY[0x1AF44D190](v37, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,false>::InitArcIterator(uint64_t result, int a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  *a3 = 0;
  v3 = *(_QWORD *)(result + 72);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = v4;
  if (v4 <= 0)
    v5 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * -v4 + 4);
  a3[1] = *(_QWORD *)(result + 88) + 16 * (v5 - 1);
  if (*(_DWORD *)(result + 112) - 1 == a2)
  {
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * -v4 + 4);
    v7 = *(_QWORD *)(result + 120) - v4 + 1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * -v6 + 4);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(result + 104) + 8 * -v4 + 4);
    v7 = v6 - v4;
  }
  a3[2] = v7;
  a3[3] = 0;
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD0EC9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40E30;
  a1[1] = 0;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD0ECE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40E30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40E30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(v4, a2);
  *a1 = &unk_1E5D1ABF8;
  a1[1] = v4;
  return a1;
}

void sub_1ADD0EDB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D265E8;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D265E8;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v7 + 4);
    return *(_QWORD *)(v2 + 120) - v7 + 1;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v5 + 4);
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *result;
  int v15;
  uint64_t v16;
  unint64_t *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  unsigned int v21;
  int v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    v7 = *(_QWORD *)(v6 + 72);
    v22 = *(_DWORD *)(v7 + 4 * a2);
    if (v22 <= 0)
      v22 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v22 + 4);
    v10 = *(_QWORD *)(v6 + 120) - v22 + 1;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 72);
    v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v8 + 4);
    v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0)
      v9 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v9 + 4);
    v10 = v8 - v9;
  }
  v11 = 2;
  if (!a4)
    v11 = 0;
  v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3)
      free(*a3);
    v23 = 0x4000;
    if (v12 > 0x4000)
      v23 = v12;
    a3[1] = (void *)v23;
    result = (char *)malloc_type_malloc(16 * v23, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    v7 = *(_QWORD *)(v6 + 72);
    v13 = result;
  }
  else
  {
    v13 = (char *)a3[2];
    result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0)
    v15 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v15 + 4);
  if (v10)
  {
    v16 = 12 * (v15 - 1);
    v17 = (unint64_t *)(result + 8);
    v18 = (unsigned int *)(v16 + *(_QWORD *)(v6 + 88) + 8);
    do
    {
      v19 = *(v18 - 2);
      v20 = *(v18 - 1) | ((unint64_t)*(v18 - 1) << 32);
      v21 = *v18;
      v18 += 3;
      *(v17 - 1) = v20;
      *v17 = v19 | ((unint64_t)v21 << 32);
      v17 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D1ABF8;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::IsMemoryMapped(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(v1[8] + 16) && *(_QWORD *)(v1[10] + 16) && *(_QWORD *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  uint64_t i;
  int *v28;
  int v29;
  int v30;
  uint64_t v31;
  std::string __p;
  _DWORD *v34;
  std::string::size_type v35;
  uint64_t v36;
  int v37;
  unsigned int v38;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE40;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 120), (int *)(a1 + 112), (_QWORD *)(a1 + 128), (uint64_t *)&__p);
  v12 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v12;
  if (v13)
  {
    MEMORY[0x1AF44D190](v13, 0x1000C40451B5BE8);
    v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
      MEMORY[0x1AF44D190](v14, 0x1000C40451B5BE8);
  }
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v16 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v17 = fst::MappedFile::Allocate((fst::MappedFile *)(4 * *(int *)(a1 + 112)), 16);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v17 + 8);
  v18 = fst::MappedFile::Allocate((fst::MappedFile *)(12 * v16), 16);
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v18 + 8);
  v19 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * v15), 16);
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v19 + 8);
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v38 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v36);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    if (!v36)
    {
      if ((int)v38 >= v37)
        goto LABEL_53;
LABEL_26:
      v22 = v38;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36))
      break;
    if (!v36)
      goto LABEL_26;
    v22 = (*(uint64_t (**)(void))(*(_QWORD *)v36 + 24))();
LABEL_27:
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v22);
    if (v24 > INFINITY || (float)(v24 + 0.00097656) < INFINITY)
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = -v20;
      v26 = *(_QWORD *)(a1 + 104) + 8 * v20;
      *(float *)v26 = v24;
      *(_DWORD *)(v26 + 4) = v21;
      ++v20;
    }
    else
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = v21;
    }
    v35 = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a2 + 136))(a2, (int)v22, &__p);
    for (i = 12 * v21; ; i += 12)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v35 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_46;
        goto LABEL_39;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (__p.__r_.__value_.__r.__words[0])
      {
        v28 = (int *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
        goto LABEL_40;
      }
LABEL_39:
      v28 = (int *)(__p.__r_.__value_.__l.__size_ + 16 * v35);
LABEL_40:
      v29 = *v28;
      v30 = v28[3];
      v31 = *(_QWORD *)(a1 + 88) + i;
      *(_DWORD *)(v31 - 12) = v28[2];
      *(_DWORD *)(v31 - 8) = v29;
      *(_DWORD *)(v31 - 4) = v30;
      ++*(_QWORD *)(a1 + 120);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v35;
      ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_48;
    }
LABEL_46:
    if (v34)
      --*v34;
LABEL_48:
    ++*(_DWORD *)(a1 + 112);
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 32))(v36);
    else
      ++v38;
  }
  if (v36)
    (*(void (**)(void))(*(_QWORD *)v36 + 8))();
LABEL_53:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  return a1;
}

void sub_1ADD0F6F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v17 + 144) = 0;
  if (v19)
    MEMORY[0x1AF44D190](v19, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  signed int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v24;
  unint64_t v25;
  _DWORD *v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v30;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v30 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v28);
  v10 = 0;
  v11 = -INFINITY;
  v12 = INFINITY;
  while (1)
  {
    if (!v28)
    {
      if ((int)v30 >= v29)
        goto LABEL_53;
LABEL_7:
      v13 = v30;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v28 + 16))(v28))
      break;
    if (!v28)
      goto LABEL_7;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v28 + 24))();
LABEL_8:
    v14 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v13);
    if (v14 > INFINITY || (float)(v14 + 0.00097656) < INFINITY)
      ++*a4;
    if ((_DWORD)v13 == -1)
      goto LABEL_48;
    ++*a3;
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v13, &__p);
    v16 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v27 >= v25)
          goto LABEL_45;
        ++v16;
LABEL_34:
        if (*(float *)(v24 + 16 * v27 + 8) >= v11)
          v11 = *(float *)(v24 + 16 * v27 + 8);
LABEL_36:
        if (v12 >= *(float *)(v24 + 16 * v27 + 8))
          v12 = *(float *)(v24 + 16 * v27 + 8);
LABEL_38:
        if (*(_DWORD *)(v24 + 16 * v27) > v10)
          v10 = *(_DWORD *)(v24 + 16 * v27);
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v16;
      if (!__p)
        goto LABEL_34;
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v17 + 8) >= v11)
        v11 = *(float *)(v17 + 8);
      if (!__p)
        goto LABEL_36;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v12 >= *(float *)(v18 + 8))
        v12 = *(float *)(v18 + 8);
      if (!__p)
        goto LABEL_38;
      v19 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v19 > v10)
        v10 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v10)
          v10 = v20;
        if (!__p)
          goto LABEL_42;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v24 + 16 * v27 + 4) > v10)
          v10 = *(_DWORD *)(v24 + 16 * v27 + 4);
LABEL_42:
        ++v27;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_47;
    }
LABEL_45:
    if (v26)
      --*v26;
LABEL_47:
    *a2 += v16;
LABEL_48:
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 32))(v28);
    else
      ++v30;
  }
  if (v28)
    (*(void (**)(void))(*(_QWORD *)v28 + 8))();
LABEL_53:
  if ((unint64_t)(12 * *a2 + 4 * *a3 + 8 * *a4) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v28, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for squeezed file format: ", 40);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v28);
    if (SHIBYTE(v25) < 0)
      operator delete(__p);
  }
  fst::SqueezedQuantizationOptions<true,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v10, a5);
}

void sub_1ADD0FB40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(_QWORD *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::HasSequentialStates()
{
  return 1;
}

double fst::SqueezedQuantizationOptions<true,false>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>@<D0>(signed int a1@<W0>, uint64_t *a2@<X8>)
{
  unsigned int v3;
  unsigned int v4;
  fst *v5;
  _QWORD *v6;
  unsigned int v7;
  uint64_t v8;
  double result;
  void *__p[2];
  char v15;
  char v16;

  v3 = __clz(a1);
  if (a1 <= 0)
    v4 = 31;
  else
    v4 = v3;
  if (v4 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v5 = fst::LogMessage::LogMessage((fst *)&v16, (uint64_t)__p);
    v6 = (_QWORD *)fst::cerr(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v16);
    if (v15 < 0)
      operator delete(__p[0]);
  }
  v7 = v4 - 1;
  v8 = operator new();
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)v8 = result;
  *(_DWORD *)(v8 + 8) = v7;
  *(_DWORD *)(v8 + 12) = 2 * ~(-1 << v7);
  *a2 = v8;
  return result;
}

void sub_1ADD0FCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::~SqueezedFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D1EE40;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C40451B5BE8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0)
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v10 + 4);
    LODWORD(v5) = v5 - v10 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v5 = v5;
  v8 = (int *)(12 * (v6 - 1) + *(_QWORD *)(a1 + 88) + 4);
  do
  {
    v9 = *v8;
    v8 += 3;
    if (!v9)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  BOOL v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int v32;
  fst *v33;
  _QWORD *v34;
  fst *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  void *__p;
  char *v48;
  char *v49;
  int v50;
  std::string __str;
  char v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  v6 = a3[27] == 0;
  v63 = 0;
  if (v6)
    v7 = 4;
  else
    v7 = 3;
  v62 = 0;
  v61 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v63, &v62, &v61, &v60);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  v57 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v58 = v62;
  v59 = v63;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::TypeString(&__str);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v52);
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v25 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v39);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_100;
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v9 = 0;
  v10 = 1;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_42;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_13;
    }
LABEL_12:
    v11 = v41;
LABEL_13:
    if ((_DWORD)v11 != -1)
    {
      v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
      if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY)
      {
        v50 = -v9;
        v14 = v48;
        if (v48 >= v49)
        {
          v16 = (char *)__p;
          v17 = (v48 - (_BYTE *)__p) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v49 - (_BYTE *)__p;
          if ((v49 - (_BYTE *)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v20);
            v16 = (char *)__p;
            v14 = v48;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = (char *)(v22 + 1);
          while (v14 != v16)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--v22 = v23;
          }
          __p = v22;
          v48 = v15;
          v49 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v48 = v10;
          v15 = v14 + 4;
        }
        ++v9;
        v48 = v15;
      }
      else
      {
        v50 = v10;
      }
      std::ostream::write();
      v10 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_42:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v33 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Could not align file during write after states", 46);
LABEL_95:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_98;
  }
  v46 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 128))(a1, &v44);
  while (1)
  {
    if (!v44)
    {
      if ((int)v46 >= v45)
        goto LABEL_72;
LABEL_50:
      v24 = v46;
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44))
      break;
    if (!v44)
      goto LABEL_50;
    v24 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 24))();
LABEL_51:
    v43 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v24, &v39);
    while (!v39)
    {
      if (v43 >= v41)
        goto LABEL_62;
LABEL_57:
      std::ostream::write();
      if (v39)
        (*(void (**)(void *))(*(_QWORD *)v39 + 40))(v39);
      else
        ++v43;
    }
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v39 + 24))(v39))
    {
      if (v39)
        (*(void (**)(void))(*(_QWORD *)v39 + 32))();
      goto LABEL_57;
    }
    if (v39)
    {
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
      goto LABEL_64;
    }
LABEL_62:
    if (v42)
      --*v42;
LABEL_64:
    if (v44)
      (*(void (**)(unint64_t))(*(_QWORD *)v44 + 32))(v44);
    else
      ++v46;
  }
  if (v44)
    (*(void (**)(void))(*(_QWORD *)v44 + 8))();
LABEL_72:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v35 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v36 = (_QWORD *)fst::cerr(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not align file during write after arcs", 44);
    goto LABEL_95;
  }
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v28 = 0;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_93;
      goto LABEL_80;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v29 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_81;
    }
LABEL_80:
    v29 = v41;
LABEL_81:
    v30 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
    if (v30 > INFINITY || (float)(v30 + 0.00097656) < INFINITY)
    {
      *(float *)&v32 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
      v44 = __PAIR64__(*((_DWORD *)__p + v28), v32);
      std::ostream::write();
      ++v28;
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_93:
  v27 = 1;
LABEL_98:
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
LABEL_100:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  v37 = v60;
  v60 = 0;
  if (v37)
    MEMORY[0x1AF44D190](v37, 0x1000C40451B5BE8);
  return v27;
}

void sub_1ADD10564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v45;

  if (a16 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a31 < 0)
    operator delete(a26);
  fst::FstHeader::~FstHeader(&a32);
  v45 = a44;
  a44 = 0;
  if (v45)
    MEMORY[0x1AF44D190](v45, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(v6, a1, a2);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADD1073C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E5D1A130;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(v4 + 4 * a3);
  v6 = v5;
  if (v5 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 88) + 12 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = *(_QWORD *)(a2 + 120) - v5 + 1;
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v7 + 4);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = v7 - v5;
  }
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1A130;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_DWORD *)(v5 + 4 * a3);
  v7 = v6;
  if (v6 <= 0)
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 88) + 12 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = *(_QWORD *)(v4 + 120) - v6 + 1;
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v8 + 4);
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = v8 - v6;
  }
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(a1);
  return a1;
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(result + 48);
  if (v1 < *(_QWORD *)(result + 40))
  {
    v2 = *(_QWORD *)(result + 16);
    if ((*(_DWORD *)(result + 56) & 0xF) == 2)
    {
      *(_DWORD *)(result + 28) = *(_DWORD *)(v2 + 12 * v1 + 4);
    }
    else if ((*(_DWORD *)(result + 56) & 0xF) == 1)
    {
      *(_DWORD *)(result + 24) = *(_DWORD *)(v2 + 12 * v1 + 4);
    }
    else
    {
      v3 = (unsigned int *)(v2 + 12 * v1);
      v4 = v3[1] | ((unint64_t)v3[1] << 32);
      v5 = *v3 | ((unint64_t)v3[2] << 32);
      *(_QWORD *)(result + 24) = v4;
      *(_QWORD *)(result + 32) = v5;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reinit(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = v4;
  if (v4 <= 0)
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
  a1[2] = *(_QWORD *)(v2 + 88) + 12 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = *(_QWORD *)(v2 + 120) - v4 + 1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v6 + 4);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >= *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Next_(uint64_t result)
{
  ++*(_QWORD *)(result + 48);
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Reset_(uint64_t result)
{
  *(_QWORD *)(result + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Seek_(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFlags_(uint64_t result, char a2, int a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(result + 56);
  v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(result + 56) = v4;
  if (v3 != 15 && v3 != v4)
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,false>>::SetFullArc(result);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD10A60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40DF8;
  a1[1] = 0;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD10AAC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40DF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40DF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(v4, a2);
  *a1 = &unk_1E5D1AB40;
  a1[1] = v4;
  return a1;
}

void sub_1ADD10B78(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D26530;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D26530;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v7 + 4);
    return *(_QWORD *)(v2 + 120) - v7 + 1;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v5 + 4);
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unint64_t *v27;
  _DWORD *v28;
  unint64_t v29;
  float v30;
  unsigned int v31;
  int v32;
  uint64_t v33;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    v7 = *(_QWORD *)(v6 + 72);
    v32 = *(_DWORD *)(v7 + 4 * a2);
    if (v32 <= 0)
      v32 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v32 + 4);
    v10 = *(_QWORD *)(v6 + 120) - v32 + 1;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 72);
    v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v8 + 4);
    v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0)
      v9 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v9 + 4);
    v10 = v8 - v9;
  }
  v11 = 2;
  if (!a4)
    v11 = 0;
  v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3)
      free(*a3);
    v33 = 0x4000;
    if (v12 > 0x4000)
      v33 = v12;
    a3[1] = (void *)v33;
    result = (char *)malloc_type_malloc(16 * v33, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    v7 = *(_QWORD *)(v6 + 72);
    v13 = result;
  }
  else
  {
    v13 = (char *)a3[2];
    result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0)
    v15 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v15 + 4);
  if (v10)
  {
    v16 = 12 * (v15 - 1);
    v17 = *(_QWORD *)(v6 + 144);
    v18 = *(float *)(v17 + 4);
    v21 = v17 + 8;
    v20 = *(_QWORD *)(v17 + 8);
    v19 = *(_QWORD *)(v21 + 8);
    v22 = 63 - v20;
    v23 = (unint64_t)(63 - v20) >> 1;
    v24 = v20 + 1;
    v25 = v24 + (v22 >> 1);
    v26 = ~(-1 << v23);
    v27 = (unint64_t *)(result + 8);
    v28 = (_DWORD *)(v16 + *(_QWORD *)(v6 + 88) + 8);
    do
    {
      v29 = *((_QWORD *)v28 - 1);
      v30 = (float)((v29 & v19) >> 1);
      if ((v29 & 1) != 0)
        v30 = -v30;
      v31 = *v28;
      v28 += 3;
      *(v27 - 1) = (v29 >> v25) | ((unint64_t)((v29 >> v24) & v26) << 32);
      *v27 = COERCE_UNSIGNED_INT(v18 * v30) | ((unint64_t)v31 << 32);
      v27 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D1AB40;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::IsMemoryMapped(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(v1[8] + 16) && *(_QWORD *)(v1[10] + 16) && *(_QWORD *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  uint64_t i;
  float *v28;
  std::string::size_type v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  int v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  float v37;
  double v38;
  unint64_t v39;
  uint64_t v40;
  std::string __p;
  _DWORD *v43;
  std::string::size_type v44;
  uint64_t v45;
  int v46;
  unsigned int v47;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE08;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 120), (int *)(a1 + 112), (_QWORD *)(a1 + 128), (uint64_t *)&__p);
  v12 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v12;
  if (v13)
  {
    MEMORY[0x1AF44D190](v13, 0x1000C40504FFAC1);
    v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
      MEMORY[0x1AF44D190](v14, 0x1000C40504FFAC1);
  }
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v16 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v17 = fst::MappedFile::Allocate((fst::MappedFile *)(4 * *(int *)(a1 + 112)), 16);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v17 + 8);
  v18 = fst::MappedFile::Allocate((fst::MappedFile *)(12 * v16), 16);
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v18 + 8);
  v19 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * v15), 16);
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v19 + 8);
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v47 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v45);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    if (!v45)
    {
      if ((int)v47 >= v46)
        goto LABEL_55;
LABEL_26:
      v22 = v47;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v45 + 16))(v45))
      break;
    if (!v45)
      goto LABEL_26;
    v22 = (*(uint64_t (**)(void))(*(_QWORD *)v45 + 24))();
LABEL_27:
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v22);
    if (v24 > INFINITY || (float)(v24 + 0.00097656) < INFINITY)
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = -v20;
      v26 = *(_QWORD *)(a1 + 104) + 8 * v20;
      *(float *)v26 = v24;
      *(_DWORD *)(v26 + 4) = v21;
      ++v20;
    }
    else
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = v21;
    }
    v44 = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a2 + 136))(a2, (int)v22, &__p);
    for (i = 12 * v21; ; i += 12)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v44 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_48;
        goto LABEL_39;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (__p.__r_.__value_.__r.__words[0])
      {
        v28 = (float *)(*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
        v29 = __p.__r_.__value_.__r.__words[0];
        goto LABEL_40;
      }
LABEL_39:
      v29 = 0;
      v28 = (float *)(__p.__r_.__value_.__l.__size_ + 16 * v44);
LABEL_40:
      v30 = *(int *)v28;
      v31 = *((int *)v28 + 1);
      v32 = v28[2];
      v33 = *((_DWORD *)v28 + 3);
      v34 = *(_QWORD *)(a1 + 144);
      v35 = *(float *)v34;
      v36 = *(_QWORD *)(v34 + 8);
      v37 = v32 * v35;
      v38 = roundf(fabsf(v37));
      if ((double)(unint64_t)(1 << v36) + -1.0 < v38)
        v38 = (double)(unint64_t)(1 << v36) + -1.0;
      v39 = (((v30 << ((unint64_t)(63 - v36) >> 1)) | v31) << (v36 + 1)) | (v37 < 0.0) | (2 * (unint64_t)v38);
      v40 = *(_QWORD *)(a1 + 88) + i;
      *(_QWORD *)(v40 - 12) = v39;
      *(_DWORD *)(v40 - 4) = v33;
      ++*(_QWORD *)(a1 + 120);
      if (v29)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 40))(v29);
      else
        ++v44;
      ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (v43)
      --*v43;
LABEL_50:
    ++*(_DWORD *)(a1 + 112);
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 32))(v45);
    else
      ++v47;
  }
  if (v45)
    (*(void (**)(void))(*(_QWORD *)v45 + 8))();
LABEL_55:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  return a1;
}

void sub_1ADD1158C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v17 + 144) = 0;
  if (v19)
    MEMORY[0x1AF44D190](v19, 0x1000C40504FFAC1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  signed int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v31 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v29);
  v10 = 0;
  v11 = -INFINITY;
  v12 = INFINITY;
  while (1)
  {
    if (!v29)
    {
      if ((int)v31 >= v30)
        goto LABEL_53;
LABEL_7:
      v13 = v31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29))
      break;
    if (!v29)
      goto LABEL_7;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
LABEL_8:
    v14 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v13);
    if (v14 > INFINITY || (float)(v14 + 0.00097656) < INFINITY)
      ++*a4;
    if ((_DWORD)v13 == -1)
      goto LABEL_48;
    ++*a3;
    v28 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v13, &__p);
    v16 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v28 >= v26)
          goto LABEL_45;
        ++v16;
LABEL_34:
        if (*(float *)(v25 + 16 * v28 + 8) >= v11)
          v11 = *(float *)(v25 + 16 * v28 + 8);
LABEL_36:
        if (v12 >= *(float *)(v25 + 16 * v28 + 8))
          v12 = *(float *)(v25 + 16 * v28 + 8);
LABEL_38:
        if (*(_DWORD *)(v25 + 16 * v28) > v10)
          v10 = *(_DWORD *)(v25 + 16 * v28);
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v16;
      if (!__p)
        goto LABEL_34;
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v17 + 8) >= v11)
        v11 = *(float *)(v17 + 8);
      if (!__p)
        goto LABEL_36;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v12 >= *(float *)(v18 + 8))
        v12 = *(float *)(v18 + 8);
      if (!__p)
        goto LABEL_38;
      v19 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v19 > v10)
        v10 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v10)
          v10 = v20;
        if (!__p)
          goto LABEL_42;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v25 + 16 * v28 + 4) > v10)
          v10 = *(_DWORD *)(v25 + 16 * v28 + 4);
LABEL_42:
        ++v28;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_47;
    }
LABEL_45:
    if (v27)
      --*v27;
LABEL_47:
    *a2 += v16;
LABEL_48:
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    else
      ++v31;
  }
  if (v29)
    (*(void (**)(void))(*(_QWORD *)v29 + 8))();
LABEL_53:
  if ((unint64_t)(12 * *a2 + 4 * *a3 + 8 * *a4) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for squeezed file format: ", 40);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
  }
  return fst::SqueezedQuantizationOptions<false,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v10, a5, v12, v11);
}

void sub_1ADD119DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(_QWORD *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::HasSequentialStates()
{
  return 1;
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "squeezed");
  std::string::append(a1, "_quantized");
  return std::string::append(a1, "_transducer");
}

void sub_1ADD11AE4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedQuantizationOptions<false,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>@<X0>(signed int a1@<W0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  unsigned int v7;
  uint64_t v8;
  fst *v9;
  _QWORD *v10;
  uint64_t v11;
  float v12;
  float v13;
  double v14;
  float v15;
  uint64_t result;
  void *__p[2];
  char v18;
  char v19;

  v7 = __clz(a1);
  if (a1 <= 0)
    v8 = 31;
  else
    v8 = v7;
  if (v8 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v9 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v10 = (_QWORD *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v11 = v8 - 1;
  v12 = fabsf(a4);
  v13 = fabsf(a3);
  if (v12 < v13)
    v12 = v13;
  if (v12 <= 0.0)
    v14 = (double)(1 << v11) + -1.0;
  else
    v14 = v12;
  v15 = ((double)(1 << v11) + -1.0) / v14;
  result = operator new();
  *(float *)result = v15;
  *(float *)(result + 4) = 1.0 / v15;
  *(_QWORD *)(result + 8) = v11;
  *(_QWORD *)(result + 16) = 2 * ~(-1 << v11);
  *a2 = result;
  return result;
}

void sub_1ADD11C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::~SqueezedFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D1EE08;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C40504FFAC1);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0)
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v10 + 4);
    LODWORD(v5) = v5 - v10 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 88) + 12 * (v6 - 1));
  v5 = v5;
  do
  {
    v9 = *v8;
    v8 = (uint64_t *)((char *)v8 + 12);
    if (((0xFFFFFFFFLL << (*(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)
                          + ((unint64_t)(63 - *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8)) >> 1)
                          + 1)) & v9) == 0)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::NumOutputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  int v10;
  char v11;
  unint64_t v12;
  int v13;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v13 = *(_DWORD *)(v2 + 4 * a2);
    if (v13 <= 0)
      v13 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v13 + 4);
    LODWORD(v5) = v5 - v13 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v8 = (unint64_t *)(*(_QWORD *)(a1 + 88) + 12 * (v6 - 1));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 8);
  v10 = ~(-1 << ((unint64_t)(63 - v9) >> 1));
  v11 = v9 + 1;
  v5 = v5;
  do
  {
    v12 = *v8;
    v8 = (unint64_t *)((char *)v8 + 12);
    if ((v10 & (v12 >> v11)) == 0)
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  BOOL v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  fst *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  unsigned int v35;
  fst *v36;
  _QWORD *v37;
  fst *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _DWORD *v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  void *__p;
  char *v51;
  char *v52;
  int v53;
  std::string __str;
  char v55[8];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;

  v6 = a3[27] == 0;
  v66 = 0;
  if (v6)
    v7 = 4;
  else
    v7 = 3;
  v65 = 0;
  v64 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v66, &v65, &v64, &v63);
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v61 = 0;
  v62 = 0;
  v60 = -1;
  v60 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v61 = v65;
  v62 = v66;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::TypeString(&__str);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v55);
  fst::SqueezedQuantizationOptions<false,true>::Write();
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "ERROR");
    v27 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v42);
    v28 = (_QWORD *)fst::cerr(v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (SHIBYTE(v44) < 0)
      operator delete(v42);
    v29 = 0;
    goto LABEL_100;
  }
  __p = 0;
  v51 = 0;
  v52 = 0;
  LODWORD(v44) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v42);
  v9 = 0;
  v10 = 1;
  while (1)
  {
    if (!v42)
    {
      if ((int)v44 >= (int)v43)
        goto LABEL_42;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v42 + 16))(v42))
      break;
    if (v42)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v42 + 24))();
      goto LABEL_13;
    }
LABEL_12:
    v11 = v44;
LABEL_13:
    if ((_DWORD)v11 != -1)
    {
      v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
      if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY)
      {
        v53 = -v9;
        v14 = v51;
        if (v51 >= v52)
        {
          v16 = (char *)__p;
          v17 = (v51 - (_BYTE *)__p) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v52 - (_BYTE *)__p;
          if ((v52 - (_BYTE *)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v52, v20);
            v16 = (char *)__p;
            v14 = v51;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = (char *)(v22 + 1);
          while (v14 != v16)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--v22 = v23;
          }
          __p = v22;
          v51 = v15;
          v52 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v51 = v10;
          v15 = v14 + 4;
        }
        ++v9;
        v51 = v15;
      }
      else
      {
        v53 = v10;
      }
      std::ostream::write();
      v10 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
    }
    if (v42)
      (*(void (**)(void *))(*(_QWORD *)v42 + 32))(v42);
    else
      LODWORD(v44) = v44 + 1;
  }
  if (v42)
    (*(void (**)(void))(*(_QWORD *)v42 + 8))();
LABEL_42:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "ERROR");
    v36 = fst::LogMessage::LogMessage((fst *)&v47, (uint64_t)&v42);
    v37 = (_QWORD *)fst::cerr(v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)"Could not align file during write after states", 46);
LABEL_95:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v47);
    if (SHIBYTE(v44) < 0)
      operator delete(v42);
    v29 = 0;
    goto LABEL_98;
  }
  v49 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 128))(a1, &v47);
  while (1)
  {
    if (!v47)
    {
      if ((int)v49 >= v48)
        goto LABEL_72;
LABEL_50:
      v25 = v49;
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v47 + 16))(v47))
      break;
    if (!v47)
      goto LABEL_50;
    v25 = (*(uint64_t (**)(unint64_t, uint64_t))(*(_QWORD *)v47 + 24))(v47, v24);
LABEL_51:
    v46 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v25, &v42);
    while (!v42)
    {
      if (v46 >= v44)
        goto LABEL_62;
LABEL_57:
      std::ostream::write();
      if (v42)
        (*(void (**)(void *))(*(_QWORD *)v42 + 40))(v42);
      else
        ++v46;
    }
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v42 + 24))(v42))
    {
      if (v42)
        (*(void (**)(void *, uint64_t))(*(_QWORD *)v42 + 32))(v42, v26);
      goto LABEL_57;
    }
    if (v42)
    {
      (*(void (**)(void *, uint64_t))(*(_QWORD *)v42 + 8))(v42, v26);
      goto LABEL_64;
    }
LABEL_62:
    if (v45)
      --*v45;
LABEL_64:
    if (v47)
      (*(void (**)(unint64_t))(*(_QWORD *)v47 + 32))(v47);
    else
      ++v49;
  }
  if (v47)
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v47 + 8))(v47, v24);
LABEL_72:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "ERROR");
    v38 = fst::LogMessage::LogMessage((fst *)&v47, (uint64_t)&v42);
    v39 = (_QWORD *)fst::cerr(v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)"Could not align file during write after arcs", 44);
    goto LABEL_95;
  }
  LODWORD(v44) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v42);
  v30 = 0;
  while (1)
  {
    if (!v42)
    {
      if ((int)v44 >= (int)v43)
        goto LABEL_93;
      goto LABEL_80;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v42 + 16))(v42))
      break;
    if (v42)
    {
      v32 = (*(uint64_t (**)(void *, uint64_t))(*(_QWORD *)v42 + 24))(v42, v31);
      goto LABEL_81;
    }
LABEL_80:
    v32 = v44;
LABEL_81:
    v33 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v32);
    if (v33 > INFINITY || (float)(v33 + 0.00097656) < INFINITY)
    {
      *(float *)&v35 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v32);
      v47 = __PAIR64__(*((_DWORD *)__p + v30), v35);
      std::ostream::write();
      ++v30;
    }
    if (v42)
      (*(void (**)(void *))(*(_QWORD *)v42 + 32))(v42);
    else
      LODWORD(v44) = v44 + 1;
  }
  if (v42)
    (*(void (**)(void *, uint64_t))(*(_QWORD *)v42 + 8))(v42, v31);
LABEL_93:
  v29 = 1;
LABEL_98:
  if (__p)
  {
    v51 = (char *)__p;
    operator delete(__p);
  }
LABEL_100:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58) < 0)
    operator delete(*((void **)&v57 + 1));
  if (SBYTE7(v57) < 0)
    operator delete((void *)v56);
  v40 = v63;
  v63 = 0;
  if (v40)
    MEMORY[0x1AF44D190](v40, 0x1000C40504FFAC1);
  return v29;
}

void sub_1ADD12650(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  uint64_t v32;
  uint64_t v34;

  if (a16 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a31 < 0)
    operator delete(a26);
  fst::FstHeader::~FstHeader(&a32);
  v34 = *(_QWORD *)(v32 - 136);
  *(_QWORD *)(v32 - 136) = 0;
  if (v34)
    MEMORY[0x1AF44D190](v34, 0x1000C40504FFAC1);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedQuantizationOptions<false,true>::Write()
{
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  return 1;
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(v6, a1, a2);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADD12894(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E5D1A0C8;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(v4 + 4 * a3);
  v6 = v5;
  if (v5 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 88) + 12 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = *(_QWORD *)(a2 + 120) - v5 + 1;
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v7 + 4);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = v7 - v5;
  }
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1A0C8;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_DWORD *)(v5 + 4 * a3);
  v7 = v6;
  if (v6 <= 0)
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 88) + 12 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = *(_QWORD *)(v4 + 120) - v6 + 1;
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v8 + 4);
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = v8 - v6;
  }
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  return a1;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  float v12;
  float result;
  unint64_t v14;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 < *(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = (unint64_t *)(v2 + 12 * v1);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v5 = *(_QWORD *)(v4 + 8);
    if ((*(_DWORD *)(a1 + 56) & 0xF) == 2)
    {
      *(_DWORD *)(a1 + 28) = (*v3 >> (v5 + 1)) & ~(-1 << ((unint64_t)(63 - v5) >> 1));
    }
    else if ((*(_DWORD *)(a1 + 56) & 0xF) == 1)
    {
      *(_DWORD *)(a1 + 24) = *v3 >> (v5 + ((unint64_t)(63 - v5) >> 1) + 1);
    }
    else
    {
      v6 = 63 - v5;
      v7 = (unint64_t)(63 - v5) >> 1;
      v8 = *v3;
      v9 = v5 + 1;
      v10 = v8 >> (v9 + (v6 >> 1));
      v11 = (v8 >> v9) & ~(-1 << v7);
      v12 = (float)((v8 & *(_QWORD *)(v4 + 16)) >> 1);
      if ((v8 & 1) != 0)
        v12 = -v12;
      result = *(float *)(v4 + 4) * v12;
      v14 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v2 + 12 * v1 + 8) << 32);
      *(_QWORD *)(a1 + 24) = v10 | (unint64_t)(v11 << 32);
      *(_QWORD *)(a1 + 32) = v14;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reinit(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = v4;
  if (v4 <= 0)
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
  a1[2] = *(_QWORD *)(v2 + 88) + 12 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = *(_QWORD *)(v2 + 120) - v4 + 1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v6 + 4);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >= *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Next_(uint64_t a1)
{
  ++*(_QWORD *)(a1 + 48);
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Reset_(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Seek_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v3;
  int v4;
  float result;

  v3 = *(_DWORD *)(a1 + 56);
  v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(a1 + 56) = v4;
  if (v3 != 15 && v3 != v4)
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,false,true>>::SetFullArc(a1);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,void>@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD12C40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__shared_ptr_emplace[abi:ne180100]<fst::VectorFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>> &,std::allocator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>,0>(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = &unk_1E5D40E68;
  a1[1] = 0;
  fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst(a1 + 3, a2);
  return a1;
}

void sub_1ADD12C8C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D40E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFst(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(v4, a2);
  *a1 = &unk_1E5D1ACB0;
  a1[1] = v4;
  return a1;
}

void sub_1ADD12D58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B3C40CC721279);
  _Unwind_Resume(a1);
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v2;
  int v3;

  *a1 = &unk_1E5D266A0;
  v2 = (_DWORD *)a1[1];
  if (v2)
  {
    v3 = v2[14] - 1;
    v2[14] = v3;
    if (!v3)
      (*(void (**)(_DWORD *))(*(_QWORD *)v2 + 8))(v2);
  }
  return a1;
}

void fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFst(_QWORD *a1)
{
  _DWORD *v1;
  int v2;

  *a1 = &unk_1E5D266A0;
  v1 = (_DWORD *)a1[1];
  if (v1)
  {
    v2 = v1[14] - 1;
    v1[14] = v2;
    if (!v2)
      (*(void (**)(_DWORD *))(*(_QWORD *)v1 + 8))(v1);
  }
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::HasSequentialStates(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Start(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 136);
}

float fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Final(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
  if (v3 <= 0)
    return *(float *)(*(_QWORD *)(v2 + 104) + 8 * -v3);
  else
    return INFINITY;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumArcs(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    v7 = *(_DWORD *)(*(_QWORD *)(v2 + 72) + 4 * a2);
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v7 + 4);
    return *(_QWORD *)(v2 + 120) - v7 + 1;
  }
  else
  {
    v3 = *(_QWORD *)(v2 + 72);
    v4 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v5 = *(_DWORD *)(v3 + 4 * a2);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v5 + 4);
    return v4 - v5;
  }
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumInputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumOutputEpsilons(uint64_t a1, int a2)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(*(_QWORD *)(a1 + 8), a2);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Properties(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  uint64_t v7;

  if (!a3)
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  v7 = 0;
  v5 = fst::TestProperties<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(a1, a2, &v7);
  *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) & (~v7 | 4) | v7 & v5;
  return v5 & a2;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::Type(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) + 16;
}

char *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::GetArcs(uint64_t a1, int a2, void **a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *result;
  int v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  unsigned int v19;
  int v20;
  unint64_t *v21;
  unsigned int *v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  int v26;
  uint64_t v27;

  v6 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)(v6 + 112) - 1 == a2)
  {
    v7 = *(_QWORD *)(v6 + 72);
    v26 = *(_DWORD *)(v7 + 4 * a2);
    if (v26 <= 0)
      v26 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v26 + 4);
    v10 = *(_QWORD *)(v6 + 120) - v26 + 1;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 72);
    v8 = *(_DWORD *)(v7 + 4 * (a2 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v8 + 4);
    v9 = *(_DWORD *)(v7 + 4 * a2);
    if (v9 <= 0)
      v9 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v9 + 4);
    v10 = v8 - v9;
  }
  v11 = 2;
  if (!a4)
    v11 = 0;
  v12 = v10 + v11;
  if ((unint64_t)a3[1] < v10 + v11)
  {
    if (*a3)
      free(*a3);
    v27 = 0x4000;
    if (v12 > 0x4000)
      v27 = v12;
    a3[1] = (void *)v27;
    result = (char *)malloc_type_malloc(16 * v27, 0x1000040451B5BE8uLL);
    *a3 = result;
    a3[2] = result;
    v7 = *(_QWORD *)(v6 + 72);
    v13 = result;
  }
  else
  {
    v13 = (char *)a3[2];
    result = (char *)*a3;
  }
  a3[3] = &v13[16 * v12];
  v15 = *(_DWORD *)(v7 + 4 * a2);
  if (v15 <= 0)
    v15 = *(_DWORD *)(*(_QWORD *)(v6 + 104) + 8 * -v15 + 4);
  if (v10)
  {
    v16 = 8 * (v15 - 1);
    v17 = *(_QWORD *)(v6 + 144);
    v18 = *(float *)(v17 + 4);
    v19 = *(_DWORD *)(v17 + 12);
    v20 = *(_DWORD *)(v17 + 8) + 1;
    v21 = (unint64_t *)(result + 8);
    v22 = (unsigned int *)(v16 + *(_QWORD *)(v6 + 88) + 4);
    do
    {
      v23 = *(v22 - 1);
      v24 = (float)((v23 & v19) >> 1);
      if ((v23 & 1) != 0)
        v24 = -v24;
      v25 = *v22;
      v22 += 2;
      *(v21 - 1) = (v23 >> v20) | ((unint64_t)(v23 >> v20) << 32);
      *v21 = COERCE_UNSIGNED_INT(v18 * v24) | ((unint64_t)v25 << 32);
      v21 += 2;
      --v10;
    }
    while (v10);
  }
  return result;
}

_QWORD *fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::Copy(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = (_QWORD *)operator new();
  v3 = *(_QWORD *)(a1 + 8);
  ++*(_DWORD *)(v3 + 56);
  *result = &unk_1E5D1ACB0;
  result[1] = v3;
  return result;
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::InputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 40);
}

uint64_t fst::ImplToFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::OutputSymbols(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 8) + 48);
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitStateIterator(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(v2 + 112);
  return result;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  return fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(*(_QWORD *)(a1 + 8), a2, a3);
}

BOOL fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::IsMemoryMapped(uint64_t a1)
{
  _QWORD *v1;

  v1 = *(_QWORD **)(a1 + 8);
  return *(_QWORD *)(v1[8] + 16) && *(_QWORD *)(v1[10] + 16) && *(_QWORD *)(v1[12] + 16) != 0;
}

uint64_t fst::ImplToExpandedFst<fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>,fst::ExpandedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::NumStates(uint64_t a1)
{
  return *(unsigned int *)(*(_QWORD *)(a1 + 8) + 112);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::SqueezedFstImpl(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type v12;
  uint64_t v13;
  std::string::size_type v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v26;
  std::string::size_type v27;
  uint64_t v28;
  float v29;
  int v30;
  float v31;
  double v32;
  std::string __p;
  _DWORD *v35;
  std::string::size_type v36;
  uint64_t v37;
  int v38;
  unsigned int v39;

  *(_QWORD *)a1 = &unk_1E5D227F0;
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (std::string *)(a1 + 16);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 16), "null");
  *(_QWORD *)(a1 + 40) = 0;
  v5 = (uint64_t *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 1;
  *(_QWORD *)a1 = &unk_1E5D1EE78;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__p);
  std::string::operator=(v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 112))(a2);
  v7 = *v5;
  if (*v5 != v6)
  {
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v6)
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    else
      v8 = 0;
    *v5 = v8;
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10 != v9)
  {
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    if (v9)
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    else
      v11 = 0;
    *(_QWORD *)(a1 + 48) = v11;
  }
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a2, (_QWORD *)(a1 + 120), (int *)(a1 + 112), (_QWORD *)(a1 + 128), (uint64_t *)&__p);
  v12 = __p.__r_.__value_.__r.__words[0];
  __p.__r_.__value_.__r.__words[0] = 0;
  v13 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v12;
  if (v13)
  {
    MEMORY[0x1AF44D190](v13, 0x1000C40451B5BE8);
    v14 = __p.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__r.__words[0] = 0;
    if (v14)
      MEMORY[0x1AF44D190](v14, 0x1000C40451B5BE8);
  }
  *(_DWORD *)(a1 + 136) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v16 = *(_QWORD *)(a1 + 120);
  v15 = *(_QWORD *)(a1 + 128);
  v17 = fst::MappedFile::Allocate((fst::MappedFile *)(4 * *(int *)(a1 + 112)), 16);
  *(_QWORD *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(v17 + 8);
  v18 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * v16), 16);
  *(_QWORD *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(v18 + 8);
  v19 = fst::MappedFile::Allocate((fst::MappedFile *)(8 * v15), 16);
  *(_QWORD *)(a1 + 96) = v19;
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(v19 + 8);
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v39 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 128))(a2, &v37);
  v20 = 0;
  v21 = 1;
  while (1)
  {
    if (!v37)
    {
      if ((int)v39 >= v38)
        goto LABEL_55;
LABEL_26:
      v22 = v39;
      goto LABEL_27;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v37 + 16))(v37))
      break;
    if (!v37)
      goto LABEL_26;
    v22 = (*(uint64_t (**)(void))(*(_QWORD *)v37 + 24))();
LABEL_27:
    v23 = *(_QWORD *)(a1 + 72);
    v24 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, v22);
    if (v24 > INFINITY || (float)(v24 + 0.00097656) < INFINITY)
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = -v20;
      v26 = *(_QWORD *)(a1 + 104) + 8 * v20;
      *(float *)v26 = v24;
      *(_DWORD *)(v26 + 4) = v21;
      ++v20;
    }
    else
    {
      *(_DWORD *)(v23 + 4 * (int)v22) = v21;
    }
    v36 = 0;
    (*(void (**)(uint64_t, _QWORD, std::string *))(*(_QWORD *)a2 + 136))(a2, (int)v22, &__p);
    while (1)
    {
      if (!__p.__r_.__value_.__r.__words[0])
      {
        if (v36 >= __p.__r_.__value_.__r.__words[2])
          goto LABEL_48;
        goto LABEL_39;
      }
      if ((*(unsigned int (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 24))(__p.__r_.__value_.__r.__words[0]))
        break;
      if (__p.__r_.__value_.__r.__words[0])
      {
        v27 = (*(uint64_t (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))();
        goto LABEL_40;
      }
LABEL_39:
      v27 = __p.__r_.__value_.__l.__size_ + 16 * v36;
LABEL_40:
      v28 = *(_QWORD *)(a1 + 144);
      v29 = *(float *)v28;
      v30 = *(_DWORD *)(v28 + 8);
      v31 = *(float *)(v27 + 8) * v29;
      v32 = roundf(fabsf(v31));
      if ((double)(1 << v30) + -1.0 < v32)
        v32 = (double)(1 << v30) + -1.0;
      *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8 * v21 - 8) = (*(_DWORD *)v27 << (v30 + 1)) | (v31 < 0.0) | (2 * v32) | ((unint64_t)*(unsigned int *)(v27 + 12) << 32);
      ++*(_QWORD *)(a1 + 120);
      if (__p.__r_.__value_.__r.__words[0])
        (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 40))(__p.__r_.__value_.__r.__words[0]);
      else
        ++v36;
      ++v21;
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(void))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 8))();
      goto LABEL_50;
    }
LABEL_48:
    if (v35)
      --*v35;
LABEL_50:
    ++*(_DWORD *)(a1 + 112);
    if (v37)
      (*(void (**)(uint64_t))(*(_QWORD *)v37 + 32))(v37);
    else
      ++v39;
  }
  if (v37)
    (*(void (**)(void))(*(_QWORD *)v37 + 8))();
LABEL_55:
  *(_QWORD *)(a1 + 8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, 0x3FFFFFFF0004, 1) | *(_QWORD *)(a1 + 8) & 4 | 1;
  return a1;
}

void sub_1ADD13714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v19;

  v19 = *(_QWORD *)(v17 + 144);
  *(_QWORD *)(v17 + 144) = 0;
  if (v19)
    MEMORY[0x1AF44D190](v19, 0x1000C40451B5BE8);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl(v17);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  signed int v10;
  float v11;
  float v12;
  uint64_t v13;
  float v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  signed int v19;
  signed int v20;
  fst *v21;
  _QWORD *v22;
  void *__p;
  uint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  unint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;

  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  v31 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 128))(a1, &v29);
  v10 = 0;
  v11 = -INFINITY;
  v12 = INFINITY;
  while (1)
  {
    if (!v29)
    {
      if ((int)v31 >= v30)
        goto LABEL_53;
LABEL_7:
      v13 = v31;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29))
      break;
    if (!v29)
      goto LABEL_7;
    v13 = (*(uint64_t (**)(void))(*(_QWORD *)v29 + 24))();
LABEL_8:
    v14 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v13);
    if (v14 > INFINITY || (float)(v14 + 0.00097656) < INFINITY)
      ++*a4;
    if ((_DWORD)v13 == -1)
      goto LABEL_48;
    ++*a3;
    v28 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v13, &__p);
    v16 = 0;
    while (1)
    {
      if (!__p)
      {
        if (v28 >= v26)
          goto LABEL_45;
        ++v16;
LABEL_34:
        if (*(float *)(v25 + 16 * v28 + 8) >= v11)
          v11 = *(float *)(v25 + 16 * v28 + 8);
LABEL_36:
        if (v12 >= *(float *)(v25 + 16 * v28 + 8))
          v12 = *(float *)(v25 + 16 * v28 + 8);
LABEL_38:
        if (*(_DWORD *)(v25 + 16 * v28) > v10)
          v10 = *(_DWORD *)(v25 + 16 * v28);
        goto LABEL_40;
      }
      if ((*(unsigned int (**)(void *))(*(_QWORD *)__p + 24))(__p))
        break;
      ++v16;
      if (!__p)
        goto LABEL_34;
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (*(float *)(v17 + 8) >= v11)
        v11 = *(float *)(v17 + 8);
      if (!__p)
        goto LABEL_36;
      v18 = (*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v12 >= *(float *)(v18 + 8))
        v12 = *(float *)(v18 + 8);
      if (!__p)
        goto LABEL_38;
      v19 = *(_DWORD *)(*(uint64_t (**)(void))(*(_QWORD *)__p + 32))();
      if (v19 > v10)
        v10 = v19;
      if (__p)
      {
        v20 = *(_DWORD *)((*(uint64_t (**)(void))(*(_QWORD *)__p + 32))() + 4);
        if (v20 > v10)
          v10 = v20;
        if (!__p)
          goto LABEL_42;
        (*(void (**)(void))(*(_QWORD *)__p + 40))();
      }
      else
      {
LABEL_40:
        if (*(_DWORD *)(v25 + 16 * v28 + 4) > v10)
          v10 = *(_DWORD *)(v25 + 16 * v28 + 4);
LABEL_42:
        ++v28;
      }
    }
    if (__p)
    {
      (*(void (**)(void))(*(_QWORD *)__p + 8))();
      goto LABEL_47;
    }
LABEL_45:
    if (v27)
      --*v27;
LABEL_47:
    *a2 += v16;
LABEL_48:
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 32))(v29);
    else
      ++v31;
  }
  if (v29)
    (*(void (**)(void))(*(_QWORD *)v29 + 8))();
LABEL_53:
  if ((unint64_t)(8 * (*a4 + *a2) + 4 * *a3) >> 31)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "FATAL");
    v21 = fst::LogMessage::LogMessage((fst *)&v29, (uint64_t)&__p);
    v22 = (_QWORD *)fst::cerr(v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Too much data for squeezed file format: ", 40);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v29);
    if (SHIBYTE(v26) < 0)
      operator delete(__p);
  }
  return fst::SqueezedQuantizationOptions<true,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(v10, a5, v12, v11);
}

void sub_1ADD13B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(_QWORD *a1)
{
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::HasSequentialStates()
{
  return 1;
}

std::string *fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString@<X0>(std::string *a1@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(a1, "squeezed");
  std::string::append(a1, "_quantized");
  return std::string::append(a1, "_acceptor");
}

void sub_1ADD13C68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedQuantizationOptions<true,true>::EstimateFromLabelsAndWeights<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>@<X0>(signed int a1@<W0>, uint64_t *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  unsigned int v7;
  unsigned int v8;
  fst *v9;
  _QWORD *v10;
  unsigned int v11;
  float v12;
  float v13;
  double v14;
  float v15;
  uint64_t result;
  void *__p[2];
  char v18;
  char v19;

  v7 = __clz(a1);
  if (a1 <= 0)
    v8 = 31;
  else
    v8 = v7;
  if (v8 <= 4)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "FATAL");
    v9 = fst::LogMessage::LogMessage((fst *)&v19, (uint64_t)__p);
    v10 = (_QWORD *)fst::cerr(v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"Not enough bits for quantization: ", 34);
    std::ostream::operator<<();
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v19);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  v11 = v8 - 1;
  v12 = fabsf(a4);
  v13 = fabsf(a3);
  if (v12 < v13)
    v12 = v13;
  if (v12 <= 0.0)
    v14 = (double)(1 << v11) + -1.0;
  else
    v14 = v12;
  v15 = ((double)(1 << v11) + -1.0) / v14;
  result = operator new();
  *(float *)result = v15;
  *(float *)(result + 4) = 1.0 / v15;
  *(_DWORD *)(result + 8) = v11;
  *(_DWORD *)(result + 12) = 2 * ~(-1 << v11);
  *a2 = result;
  return result;
}

void sub_1ADD13DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::~SqueezedFstImpl(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = &unk_1E5D1EE78;
  v2 = a1[8];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[10];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[12];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    MEMORY[0x1AF44D190](v5, 0x1000C40451B5BE8);
  return fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~FstImpl((uint64_t)a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::NumInputEpsilons(uint64_t a1, int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  int v10;

  if (*(_DWORD *)(a1 + 112) - 1 == a2)
  {
    v5 = *(_QWORD *)(a1 + 120);
    v2 = *(_QWORD *)(a1 + 72);
    v10 = *(_DWORD *)(v2 + 4 * a2);
    if (v10 <= 0)
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v10 + 4);
    LODWORD(v5) = v5 - v10 + 1;
    if (!(_DWORD)v5)
      return 0;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 72);
    v3 = *(_DWORD *)(v2 + 4 * (a2 + 1));
    if (v3 <= 0)
      v3 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v3 + 4);
    v4 = *(_DWORD *)(v2 + 4 * a2);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v4 + 4);
    LODWORD(v5) = v3 - v4;
    if (!(_DWORD)v5)
      return 0;
  }
  v6 = *(_DWORD *)(v2 + 4 * a2);
  if (v6 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a1 + 104) + 8 * -v6 + 4);
  if ((int)v5 < 1)
    return 0;
  v7 = 0;
  v8 = (unsigned int *)(*(_QWORD *)(a1 + 88) + 8 * (v6 - 1));
  v5 = v5;
  do
  {
    v9 = *v8;
    v8 += 2;
    if (!(v9 >> (*(_BYTE *)(*(_QWORD *)(a1 + 144) + 8) + 1)))
      ++v7;
    --v5;
  }
  while (v5);
  return v7;
}

uint64_t fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::WriteFst<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>(uint64_t a1, _QWORD *a2, _BYTE *a3)
{
  BOOL v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  float v12;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  int *v22;
  int v23;
  uint64_t v24;
  fst *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  unsigned int v32;
  fst *v33;
  _QWORD *v34;
  fst *v35;
  _QWORD *v36;
  uint64_t v37;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  unsigned int v46;
  void *__p;
  char *v48;
  char *v49;
  int v50;
  std::string __str;
  char v52[8];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;

  v6 = a3[27] == 0;
  v63 = 0;
  if (v6)
    v7 = 4;
  else
    v7 = 3;
  v62 = 0;
  v61 = 0;
  fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::ComputeReductionInformation<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>(a1, &v63, &v62, &v61, &v60);
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v58 = 0;
  v59 = 0;
  v57 = -1;
  v57 = (*(int (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v58 = v62;
  v59 = v63;
  fst::SqueezedFstConsts<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::TypeString(&__str);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, 0x3FFFFFFF0004, 1);
  fst::FstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WriteFstHeader(a1, (uint64_t)a2, a3, v7, &__str, v8 | 1, (uint64_t)v52);
  fst::SqueezedQuantizationOptions<true,false>::Write();
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v25 = fst::LogMessage::LogMessage((fst *)&__p, (uint64_t)&v39);
    v26 = (_QWORD *)fst::cerr(v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"Could not align file during write after header", 46);
    fst::LogMessage::~LogMessage((fst::LogMessage *)&__p);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_100;
  }
  __p = 0;
  v48 = 0;
  v49 = 0;
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v9 = 0;
  v10 = 1;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_42;
      goto LABEL_12;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v11 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_13;
    }
LABEL_12:
    v11 = v41;
LABEL_13:
    if ((_DWORD)v11 != -1)
    {
      v12 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11);
      if (v12 > INFINITY || (float)(v12 + 0.00097656) < INFINITY)
      {
        v50 = -v9;
        v14 = v48;
        if (v48 >= v49)
        {
          v16 = (char *)__p;
          v17 = (v48 - (_BYTE *)__p) >> 2;
          v18 = v17 + 1;
          if ((unint64_t)(v17 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v49 - (_BYTE *)__p;
          if ((v49 - (_BYTE *)__p) >> 1 > v18)
            v18 = v19 >> 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
            v20 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v20 = v18;
          if (v20)
          {
            v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v49, v20);
            v16 = (char *)__p;
            v14 = v48;
          }
          else
          {
            v21 = 0;
          }
          v22 = (int *)&v21[4 * v17];
          *v22 = v10;
          v15 = (char *)(v22 + 1);
          while (v14 != v16)
          {
            v23 = *((_DWORD *)v14 - 1);
            v14 -= 4;
            *--v22 = v23;
          }
          __p = v22;
          v48 = v15;
          v49 = &v21[4 * v20];
          if (v16)
            operator delete(v16);
        }
        else
        {
          *(_DWORD *)v48 = v10;
          v15 = v14 + 4;
        }
        ++v9;
        v48 = v15;
      }
      else
      {
        v50 = v10;
      }
      std::ostream::write();
      v10 += (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v11);
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_42:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v33 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v34 = (_QWORD *)fst::cerr(v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Could not align file during write after states", 46);
LABEL_95:
    fst::LogMessage::~LogMessage((fst::LogMessage *)&v44);
    if (SHIBYTE(v41) < 0)
      operator delete(v39);
    v27 = 0;
    goto LABEL_98;
  }
  v46 = 0;
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 128))(a1, &v44);
  while (1)
  {
    if (!v44)
    {
      if ((int)v46 >= v45)
        goto LABEL_72;
LABEL_50:
      v24 = v46;
      goto LABEL_51;
    }
    if ((*(unsigned int (**)(unint64_t))(*(_QWORD *)v44 + 16))(v44))
      break;
    if (!v44)
      goto LABEL_50;
    v24 = (*(uint64_t (**)(void))(*(_QWORD *)v44 + 24))();
LABEL_51:
    v43 = 0;
    (*(void (**)(uint64_t, uint64_t, void **))(*(_QWORD *)a1 + 136))(a1, v24, &v39);
    while (!v39)
    {
      if (v43 >= v41)
        goto LABEL_62;
LABEL_57:
      std::ostream::write();
      if (v39)
        (*(void (**)(void *))(*(_QWORD *)v39 + 40))(v39);
      else
        ++v43;
    }
    if (!(*(unsigned int (**)(void *))(*(_QWORD *)v39 + 24))(v39))
    {
      if (v39)
        (*(void (**)(void))(*(_QWORD *)v39 + 32))();
      goto LABEL_57;
    }
    if (v39)
    {
      (*(void (**)(void))(*(_QWORD *)v39 + 8))();
      goto LABEL_64;
    }
LABEL_62:
    if (v42)
      --*v42;
LABEL_64:
    if (v44)
      (*(void (**)(unint64_t))(*(_QWORD *)v44 + 32))(v44);
    else
      ++v46;
  }
  if (v44)
    (*(void (**)(void))(*(_QWORD *)v44 + 8))();
LABEL_72:
  if (a3[27] && !fst::AlignOutput(a2))
  {
    std::string::basic_string[abi:ne180100]<0>(&v39, "ERROR");
    v35 = fst::LogMessage::LogMessage((fst *)&v44, (uint64_t)&v39);
    v36 = (_QWORD *)fst::cerr(v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"Could not align file during write after arcs", 44);
    goto LABEL_95;
  }
  LODWORD(v41) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 128))(a1, &v39);
  v28 = 0;
  while (1)
  {
    if (!v39)
    {
      if ((int)v41 >= (int)v40)
        goto LABEL_93;
      goto LABEL_80;
    }
    if ((*(unsigned int (**)(void *))(*(_QWORD *)v39 + 16))(v39))
      break;
    if (v39)
    {
      v29 = (*(uint64_t (**)(void))(*(_QWORD *)v39 + 24))();
      goto LABEL_81;
    }
LABEL_80:
    v29 = v41;
LABEL_81:
    v30 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
    if (v30 > INFINITY || (float)(v30 + 0.00097656) < INFINITY)
    {
      *(float *)&v32 = (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v29);
      v44 = __PAIR64__(*((_DWORD *)__p + v28), v32);
      std::ostream::write();
      ++v28;
    }
    if (v39)
      (*(void (**)(void *))(*(_QWORD *)v39 + 32))(v39);
    else
      LODWORD(v41) = v41 + 1;
  }
  if (v39)
    (*(void (**)(void))(*(_QWORD *)v39 + 8))();
LABEL_93:
  v27 = 1;
LABEL_98:
  if (__p)
  {
    v48 = (char *)__p;
    operator delete(__p);
  }
LABEL_100:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v55) < 0)
    operator delete(*((void **)&v54 + 1));
  if (SBYTE7(v54) < 0)
    operator delete((void *)v53);
  v37 = v60;
  v60 = 0;
  if (v37)
    MEMORY[0x1AF44D190](v37, 0x1000C40451B5BE8);
  return v27;
}

void sub_1ADD14694(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32)
{
  uint64_t v32;
  uint64_t v34;

  if (a16 < 0)
    operator delete(__p);
  if (a22)
    operator delete(a22);
  if (a31 < 0)
    operator delete(a26);
  fst::FstHeader::~FstHeader(&a32);
  v34 = *(_QWORD *)(v32 - 136);
  *(_QWORD *)(v32 - 136) = 0;
  if (v34)
    MEMORY[0x1AF44D190](v34, 0x1000C40451B5BE8);
  _Unwind_Resume(a1);
}

uint64_t fst::SqueezedFstImpl<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>::InitArcIterator(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(v6, a1, a2);
  *a3 = v6;
  a3[3] = 0;
  return result;
}

void sub_1ADD1484C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10E1C402D792D55);
  _Unwind_Resume(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::ArcIterator(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;

  *(_QWORD *)a1 = &unk_1E5D1A198;
  *(_QWORD *)(a1 + 8) = a2;
  v4 = *(_QWORD *)(a2 + 72);
  v5 = *(_DWORD *)(v4 + 4 * a3);
  v6 = v5;
  if (v5 <= 0)
    v6 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 88) + 8 * (v6 - 1);
  if (*(_DWORD *)(a2 + 112) - 1 == a3)
  {
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = *(_QWORD *)(a2 + 120) - v5 + 1;
  }
  else
  {
    v7 = *(_DWORD *)(v4 + 4 * (a3 + 1));
    if (v7 <= 0)
      v7 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v7 + 4);
    if (v5 <= 0)
      v5 = *(_DWORD *)(*(_QWORD *)(a2 + 104) + 8 * -v5 + 4);
    v8 = v7 - v5;
  }
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = &unk_1E5D1A198;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = *(_QWORD *)(v4 + 72);
  v6 = *(_DWORD *)(v5 + 4 * a3);
  v7 = v6;
  if (v6 <= 0)
    v7 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(v4 + 88) + 8 * (v7 - 1);
  if (*(_DWORD *)(v4 + 112) - 1 == a3)
  {
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = *(_QWORD *)(v4 + 120) - v6 + 1;
  }
  else
  {
    v8 = *(_DWORD *)(v5 + 4 * (a3 + 1));
    if (v8 <= 0)
      v8 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v8 + 4);
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v4 + 104) + 8 * -v6 + 4);
    v9 = v8 - v6;
  }
  *(_QWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 15;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  return a1;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  float v7;
  uint64_t v8;
  float result;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1 < *(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    v3 = (unsigned int *)(v2 + 8 * v1);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 144);
    v5 = *(_DWORD *)(v4 + 8);
    if ((*(_DWORD *)(a1 + 56) & 0xF) == 2)
    {
      *(_DWORD *)(a1 + 28) = *v3 >> (v5 + 1);
    }
    else if ((*(_DWORD *)(a1 + 56) & 0xF) == 1)
    {
      *(_DWORD *)(a1 + 24) = *v3 >> (v5 + 1);
    }
    else
    {
      v6 = *v3;
      v7 = (float)((v6 & *(_DWORD *)(v4 + 12)) >> 1);
      v8 = v6 >> (v5 + 1);
      if ((v6 & 1) != 0)
        v7 = -v7;
      result = *(float *)(v4 + 4) * v7;
      v10 = LODWORD(result) | ((unint64_t)*(unsigned int *)(v2 + 8 * v1 + 4) << 32);
      *(_QWORD *)(a1 + 24) = v8 | (v8 << 32);
      *(_QWORD *)(a1 + 32) = v10;
    }
  }
  return result;
}

void fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::~ArcIterator()
{
  JUMPOUT(0x1AF44D190);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reinit(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = *(_QWORD *)(v2 + 72);
  v4 = *(_DWORD *)(v3 + 4 * a2);
  v5 = v4;
  if (v4 <= 0)
    v5 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
  a1[2] = *(_QWORD *)(v2 + 88) + 8 * (v5 - 1);
  if (*(_DWORD *)(v2 + 112) - 1 == a2)
  {
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = *(_QWORD *)(v2 + 120) - v4 + 1;
  }
  else
  {
    v6 = *(_DWORD *)(v3 + 4 * (a2 + 1));
    if (v6 <= 0)
      v6 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v6 + 4);
    if (v4 <= 0)
      v4 = *(_DWORD *)(*(_QWORD *)(v2 + 104) + 8 * -v4 + 4);
    v7 = v6 - v4;
  }
  a1[5] = v7;
  a1[6] = 0;
  fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc((uint64_t)a1);
  return 1;
}

BOOL fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Done_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48) >= *(_QWORD *)(a1 + 40);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Value_(uint64_t a1)
{
  return a1 + 24;
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Next_(uint64_t a1)
{
  ++*(_QWORD *)(a1 + 48);
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Position_(uint64_t a1)
{
  return *(_QWORD *)(a1 + 48);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Reset_(uint64_t a1)
{
  *(_QWORD *)(a1 + 48) = 0;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Seek_(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 48) = a2;
  return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
}

uint64_t fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::Flags_(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

float fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFlags_(uint64_t a1, char a2, int a3)
{
  int v3;
  int v4;
  float result;

  v3 = *(_DWORD *)(a1 + 56);
  v4 = v3 & ~a3 | a2 & 0xF;
  *(_DWORD *)(a1 + 56) = v4;
  if (v3 != 15 && v3 != v4)
    return fst::ArcIterator<fst::SqueezedFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,true,true>>::SetFullArc(a1);
  return result;
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,void>@<X0>(uint64_t *a1@<X1>, srilm::NgramCountContext **a2@<X2>, uint64_t *a3@<X3>, const std::string **a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x448uLL);
  result = std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,std::allocator<quasar::NgramLmModel2>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADD14BC0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&,std::allocator<quasar::NgramLmModel2>,0>(_QWORD *a1, uint64_t *a2, srilm::NgramCountContext **a3, uint64_t *a4, const std::string **a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D42800;
  a1[1] = 0;
  std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADD14C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramLmModel2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42800;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramLmModel2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D42800;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramLmModel2>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramFstConfig const> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, srilm::NgramCountContext **a4, uint64_t *a5, const std::string **a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  srilm::NgramCountContext *v9;
  void **v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  srilm::NgramCountContext *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v6 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a4;
  *a4 = 0;
  v14 = v9;
  quasar::NgramLmModel2::NgramLmModel2(a2, &v15, (void ***)&v14, a5, a6);
  v10 = (void **)v14;
  v14 = 0;
  if (v10)
  {
    srilm::NgramCountContext::~NgramCountContext(v10);
    MEMORY[0x1AF44D190]();
  }
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1ADD14D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v3;
  va_list va;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void **);
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)va, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<quasar::NgramLmModel2  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

_QWORD *std::shared_ptr<Ngram>::shared_ptr[abi:ne180100]<Ngram,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_1E5D45A18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_1ADD14E50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Ngram *,std::shared_ptr<Ngram>::__shared_ptr_default_delete<Ngram,Ngram>,std::allocator<Ngram>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NgramLmModel2,std::allocator<quasar::NgramLmModel2>,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,void>@<X0>(uint64_t *a1@<X1>, srilm::NgramCountContext **a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x448uLL);
  result = std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,std::allocator<quasar::NgramLmModel2>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADD14F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NgramLmModel2>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&,std::allocator<quasar::NgramLmModel2>,0>(_QWORD *a1, uint64_t *a2, srilm::NgramCountContext **a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D42800;
  a1[1] = 0;
  std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&>((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADD14FC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::NgramLmModel2>::construct[abi:ne180100]<quasar::NgramLmModel2,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> &,std::unique_ptr<srilm::NgramCountContext>,std::shared_ptr<quasar::FstLmHandle> &,std::shared_ptr<quasar::NgramSrilmInterpolationConfig> const&>(uint64_t a1, uint64_t a2, uint64_t *a3, srilm::NgramCountContext **a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  srilm::NgramCountContext *v9;
  std::string *v10;
  unint64_t *p_size;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  void **v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  const std::string *v19[2];
  srilm::NgramCountContext *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v6 = a3[1];
  v21 = *a3;
  v22 = (std::__shared_weak_count *)v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a4;
  *a4 = 0;
  v10 = *(std::string **)(a6 + 8);
  v19[0] = *(const std::string **)a6;
  v19[1] = v10;
  v20 = v9;
  if (v10)
  {
    p_size = &v10->__r_.__value_.__l.__size_;
    do
      v12 = __ldxr(p_size);
    while (__stxr(v12 + 1, p_size));
  }
  quasar::NgramLmModel2::NgramLmModel2(a2, &v21, (void ***)&v20, a5, v19);
  if (v10)
  {
    v13 = &v10->__r_.__value_.__l.__size_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      (*(void (**)(std::string *))(v10->__r_.__value_.__r.__words[0] + 16))(v10);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v10);
    }
  }
  v15 = (void **)v20;
  v20 = 0;
  if (v15)
  {
    srilm::NgramCountContext::~NgramCountContext(v15);
    MEMORY[0x1AF44D190]();
  }
  v16 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1ADD150EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  void **v6;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, void **);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::unique_ptr<srilm::NgramCountContext>::reset[abi:ne180100]((void ***)va1, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::srilm::VocabIterator::VocabIterator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)a1 = off_1E5D3A738;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
  *(_QWORD *)(a1 + 40) = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 128))(a2, 0);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  quasar::lm::srilm::VocabIterator::advance((quasar::lm::srilm::VocabIterator *)a1);
  return a1;
}

void sub_1ADD15194(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[71] < 0)
    operator delete(*v2);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)v1);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::VocabIterator::advance(quasar::lm::srilm::VocabIterator *this)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  __int128 v7;
  uint64_t v8;

  if (!*((_BYTE *)this + 72))
  {
    v2 = (char *)this + 48;
    do
    {
      v4 = *((_QWORD *)this + 3);
      v3 = *((_QWORD *)this + 4);
      if (v4 == v3)
      {
        *((_BYTE *)this + 72) = 1;
        return;
      }
      *((_QWORD *)this + 3) = v4 + 1;
      if (v4 + 1 >= v3)
      {
        v5 = *((_QWORD *)this + 5);
      }
      else
      {
        v5 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 2) + 128))(*((_QWORD *)this + 2));
        *((_QWORD *)this + 5) = v5;
      }
      (*(void (**)(__int128 *__return_ptr, _QWORD, unint64_t))(**((_QWORD **)this + 2) + 88))(&v7, *((_QWORD *)this + 2), v5);
      if (*((char *)this + 71) < 0)
        operator delete(*(void **)v2);
      *(_OWORD *)v2 = v7;
      *((_QWORD *)v2 + 2) = v8;
      if (*((char *)this + 71) < 0)
      {
        if (!*((_QWORD *)this + 7))
          continue;
      }
      else if (!*((_BYTE *)this + 71))
      {
        continue;
      }
      v6 = (_QWORD *)*((_QWORD *)this + 1);
      if (v5 < v6[1] && ((*(_QWORD *)(*v6 + ((v5 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        return;
    }
    while (!*((_BYTE *)this + 72));
  }
}

uint64_t quasar::lm::srilm::VocabIterator::done(quasar::lm::srilm::VocabIterator *this)
{
  return *((unsigned __int8 *)this + 72);
}

void quasar::lm::srilm::VocabIterator::next(quasar::lm::srilm::VocabIterator *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = *((_OWORD *)this + 3);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)this + 8);
  *((_QWORD *)this + 7) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 6) = 0;
  quasar::lm::srilm::VocabIterator::advance(this);
}

void sub_1ADD15308(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<Vocab>::operator=[abi:ne180100]<Vocab,std::default_delete<Vocab>,void>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  if (*a2)
  {
    v5 = (_QWORD *)operator new();
    v6 = *a2;
    *v5 = &unk_1E5D45A50;
    v5[1] = 0;
    v5[2] = 0;
    v5[3] = v6;
  }
  else
  {
    v5 = 0;
  }
  *a2 = 0;
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v5;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t quasar::lm::srilm::Interpolate::Interpolate(uint64_t a1, uint64_t a2, __int128 **a3)
{
  quasar::lm *v5;
  quasar::lm *v6;
  double *v7;
  double *i;
  _BYTE v10[16];

  *(_QWORD *)a1 = &off_1E5D3A710;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 8), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v5 = (quasar::lm *)std::vector<double>::__init_with_size[abi:ne180100]<double *,double *>((_QWORD *)(a1 + 32), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
  if (*(_QWORD *)(a1 + 40) == *(_QWORD *)(a1 + 32))
  {
    quasar::lm::LogMessage::LogMessage(v10, 5, "Interpolate", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 117);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
  }
  else
  {
    v6 = (quasar::lm *)quasar::lm::nullstream(v5);
  }
  v7 = *(double **)(a1 + 32);
  for (i = *(double **)(a1 + 40); v7 != i; ++v7)
  {
    if (*v7 > 0.0)
    {
      v6 = (quasar::lm *)quasar::lm::nullstream(v6);
    }
    else
    {
      quasar::lm::LogMessage::LogMessage(v10, 5, "Interpolate", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 119);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v10);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v10);
    }
  }
  return a1;
}

void sub_1ADD15514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  uint64_t v9;
  void **v10;
  void *v12;

  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  v12 = *v10;
  if (*v10)
  {
    *(_QWORD *)(v9 + 40) = v12;
    operator delete(v12);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

Ngram *quasar::lm::srilm::initializeBasicNgramLM(uint64_t a1, Vocab *a2, unsigned int a3)
{
  const char *v6;
  Ngram *v7;
  quasar::lm *v8;
  quasar::lm *v9;
  _QWORD *Featurizer;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  const std::locale::facet *v16;
  _BYTE v18[16];
  _BYTE v19[104];
  std::locale v20;

  v6 = (const char *)a1;
  if (*(char *)(a1 + 23) < 0)
    v6 = *(const char **)a1;
  File::File((File *)v19, v6, "r", 1);
  v7 = (Ngram *)operator new();
  v8 = Ngram::Ngram(v7, a2, a3);
  quasar::lm::nullstream(v8);
  v9 = (quasar::lm *)(*(uint64_t (**)(Ngram *, _BYTE *, uint64_t))(*(_QWORD *)v7 + 240))(v7, v19, 1);
  if ((_DWORD)v9)
  {
    quasar::lm::nullstream(v9);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v18, 5, "initializeBasicNgramLM", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 130);
    Featurizer = (_QWORD *)quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v18);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(Featurizer, (uint64_t)"format error in mix-lm file ", 28);
    v12 = *(char *)(a1 + 23);
    if (v12 >= 0)
      v13 = a1;
    else
      v13 = *(_QWORD *)a1;
    if (v12 >= 0)
      v14 = *(unsigned __int8 *)(a1 + 23);
    else
      v14 = *(_QWORD *)(a1 + 8);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, v13, v14);
    std::ios_base::getloc((const std::ios_base *)((char *)v15 + *(_QWORD *)(*v15 - 24)));
    v16 = std::locale::use_facet(&v20, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v16->__vftable[2].~facet_0)(v16, 10);
    std::locale::~locale(&v20);
    std::ostream::put();
    std::ostream::flush();
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v18);
  }
  File::~File((File *)v19);
  return v7;
}

void sub_1ADD156E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  File::~File((File *)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::lm::srilm::Interpolate::operator()(uint64_t a1, uint64_t a2)
{
  quasar::lm *v4;
  quasar::lm *v5;
  uint64_t v6;
  double v7;
  unint64_t i;
  quasar::lm *v9;
  unint64_t v10;
  double v11;
  _QWORD *v12;
  double v13;
  uint64_t v14;
  _BYTE v16[16];

  v4 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  if ((_DWORD)v4)
  {
    quasar::lm::nullstream(v4);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 138);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  v5 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = *(_QWORD *)v5;
  v7 = **(double **)(a1 + 32);
  if (v7 > 0.0)
  {
    quasar::lm::nullstream(v5);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 148);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  for (i = 1; ; ++i)
  {
    v9 = (quasar::lm *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v10 = (uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3;
    if (!(_DWORD)v9)
      break;
    if (v10 <= i)
    {
      quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 163);
      quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
      quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
    }
    else
    {
      quasar::lm::nullstream(v9);
    }
    v11 = *(double *)(*(_QWORD *)(a1 + 32) + 8 * i);
    v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v13 = v7 + v11;
    v14 = *v12;
    (*(void (**)(uint64_t, _QWORD, double))(*(_QWORD *)v6 + 392))(v6, *v12, v7 / v13);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v7 = v13;
  }
  if (v10 == i)
  {
    quasar::lm::nullstream(v9);
  }
  else
  {
    quasar::lm::LogMessage::LogMessage(v16, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 173);
    quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v16);
    quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v16);
  }
  return v6;
}

void sub_1ADD1594C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::srilm::CreateLazyLoadedNgramModelStream(__int128 **a1, uint64_t a2, int a3)
{
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  memset(&v11, 0, sizeof(v11));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v11, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  v12 = a2;
  v13 = a3;
  v16 = 0;
  v6 = (char *)operator new(0x30uLL);
  *(_QWORD *)v6 = off_1E5D3E5E8;
  *((_QWORD *)v6 + 2) = 0;
  *((_QWORD *)v6 + 3) = 0;
  *((_QWORD *)v6 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v6 + 8), (__int128 *)v11.__r_.__value_.__l.__data_, (__int128 *)v11.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11.__r_.__value_.__l.__size_ - v11.__r_.__value_.__r.__words[0]) >> 3));
  *((_QWORD *)v6 + 4) = v12;
  *((_DWORD *)v6 + 10) = v13;
  v16 = v6;
  v7 = quasar::lm::referenceVectorToObjectStream<std::string,Ngram>((uint64_t)a1, (uint64_t)v15);
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
    goto LABEL_5;
  }
  if (v16)
  {
    v9 = 5;
LABEL_5:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  v14 = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v14);
  return v7;
}

void sub_1ADD15B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v19;
  char *v21;
  uint64_t v22;

  v21 = a19;
  if (a19 == v19)
  {
    v22 = 4;
    v21 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_6:
  a15 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  _Unwind_Resume(a1);
}

_QWORD *quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD v10[3];
  _QWORD *v11;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)operator new();
  v12[0] = &unk_1E5D3E538;
  v12[1] = a1;
  v13 = v12;
  v10[0] = &unk_1E5D3E4E0;
  v11 = v10;
  quasar::lm::Generator<Ngram>::Generator(v4, a2, (uint64_t)v12, (uint64_t)v10);
  v5 = v11;
  if (v11 == v10)
  {
    v6 = 4;
    v5 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v13;
  if (v13 == v12)
  {
    v8 = 4;
    v7 = v12;
    goto LABEL_10;
  }
  if (v13)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return v4;
}

void sub_1ADD15CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  uint64_t v17;
  char *v18;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;

  v20 = a13;
  if (a13 == v18)
  {
    v21 = 4;
    v20 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  v22 = a17;
  if (a17 == &a14)
  {
    v23 = 4;
    v22 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_11:
  MEMORY[0x1AF44D190](v17, 0x10A1C4014ADDB9CLL);
  _Unwind_Resume(a1);
}

void quasar::lm::srilm::VocabIterator::~VocabIterator(void **this)
{
  *this = off_1E5D3A738;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
}

{
  *this = off_1E5D3A738;
  if (*((char *)this + 71) < 0)
    operator delete(this[6]);
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)this);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_pointer<Vocab  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_pointer<Vocab  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<Vocab  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else
    return 0;
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3E538;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3E538;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - **(_QWORD **)(a1 + 8)) >> 3) != *a2;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(long long)#1}>,BOOL ()(long long)>::target_type()
{
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E5D3E4E0;
  return result;
}

void std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E5D3E4E0;
}

uint64_t std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1},std::allocator<quasar::lm::Generator<Ngram> * quasar::lm::referenceVectorToObjectStream<std::string,Ngram>(std::vector<std::string> const&,std::function<Ngram* ()(long long)>)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

_QWORD *quasar::lm::Generator<Ngram>::Generator(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  *a1 = &unk_1E5D3A900;
  v7 = (uint64_t)(a1 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), a2);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v7, a3);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 9), a4);
  a1[13] = 0;
  a1[14] = 0;
  return a1;
}

void sub_1ADD16094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v4 = v3;
  v6 = *(_QWORD **)(v1 + 64);
  if (v6 == v4)
  {
    v7 = v4;
    v8 = 4;
  }
  else
  {
    if (!v6)
      goto LABEL_6;
    v8 = 5;
    v7 = *(_QWORD **)(v1 + 64);
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = *(_QWORD **)(v1 + 32);
  if (v9 == v2)
  {
    v10 = 4;
    v9 = v2;
  }
  else
  {
    if (!v9)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::lm::Generator<Ngram>::~Generator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3A900;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
    goto LABEL_15;
  }
  if (v7)
  {
    v8 = 5;
LABEL_15:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  return a1;
}

void quasar::lm::Generator<Ngram>::~Generator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = &unk_1E5D3A900;
  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[8];
  if (v5 == a1 + 5)
  {
    v6 = 4;
    v5 = a1 + 5;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[4];
  if (v7 == a1 + 1)
  {
    v8 = 4;
    v7 = a1 + 1;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  JUMPOUT(0x1AF44D190);
}

_QWORD *quasar::lm::Generator<Ngram>::next(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1[13];
  a1[13] = v2 + 1;
  v5 = v2;
  v3 = a1[4];
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  a1[14] = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v5);
  return a1 + 14;
}

uint64_t quasar::lm::Generator<Ngram>::has_next(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  FstCheck(*(_QWORD *)(a1 + 104) >= 0, "(current_idx_) >= (0)", "../libquasar/liblm/include/lm/streams_liblm.h");
  v4 = *(_QWORD *)(a1 + 104);
  v2 = *(_QWORD *)(a1 + 64);
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v4);
}

uint64_t quasar::lm::Generator<Ngram>::reset(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[12];
  if (!v2)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  a1[13] = 0;
  a1[14] = 0;
  return result;
}

uint64_t std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::~__func(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_1E5D3E5E8;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(_QWORD *)a1 = off_1E5D3E5E8;
  v3 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x1AF44D190](a1, 0x10A1C409957A1C6);
}

char *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::__clone(uint64_t a1)
{
  char *v2;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = off_1E5D3E5E8;
  *((_QWORD *)v2 + 2) = 0;
  *((_QWORD *)v2 + 3) = 0;
  *((_QWORD *)v2 + 1) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v2 + 8), *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  *((_QWORD *)v2 + 4) = *(_QWORD *)(a1 + 32);
  *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 40);
  return v2;
}

void sub_1ADD1649C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::__clone(uint64_t a1, uint64_t a2)
{
  std::string *result;
  uint64_t v5;

  *(_QWORD *)a2 = off_1E5D3E5E8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
  result = std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a2 + 8), *(__int128 **)(a1 + 8), *(__int128 **)(a1 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3));
  v5 = *(_QWORD *)(a1 + 32);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 32) = v5;
  return result;
}

void std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::destroy(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 8);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::destroy_deallocate(void **a1)
{
  void **v2;

  v2 = a1 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  operator delete(a1);
}

Ngram *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::operator()(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  __int128 v4;
  Ngram *v5;
  Ngram *v6;
  _BYTE v8[16];
  std::string v9;
  std::string v10;

  v3 = *(_QWORD *)(a1 + 8) + 24 * *a2;
  if (*(char *)(v3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v10, *(const std::string::value_type **)v3, *(_QWORD *)(v3 + 8));
  }
  else
  {
    v4 = *(_OWORD *)v3;
    v10.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 16);
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v4;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v9 = v10;
  v5 = quasar::lm::srilm::initializeBasicNgramLM((uint64_t)&v9, *(Vocab **)(a1 + 32), *(_DWORD *)(a1 + 40));
  v6 = v5;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v9.__r_.__value_.__l.__data_);
    if (v6)
      goto LABEL_9;
  }
  else if (v5)
  {
LABEL_9:
    quasar::lm::nullstream(v5);
    goto LABEL_12;
  }
  quasar::lm::LogMessage::LogMessage(v8, 5, "operator()", "/Library/Caches/com.apple.xbs/Sources/EmbeddedAcousticRecognition/libquasar/liblm/src/impl/srilm.cpp", 186);
  quasar::rescoring::AdapterModel::getFeaturizer((quasar::rescoring::AdapterModel *)v8);
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)v8);
LABEL_12:
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1ADD16674(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  quasar::lm::LogMessage::~LogMessage((quasar::lm::LogMessage *)&a9);
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0,std::allocator<quasar::lm::srilm::CreateLazyLoadedNgramModelStream(std::vector<std::string> const&,Vocab *,int)::$_0>,Ngram * ()(long long)>::target_type()
{
}

uint64_t kaldi::RoundUpToNearestPowerOfTwo(kaldi *this)
{
  unsigned int v1;
  unsigned int v2;

  v1 = ((_DWORD)this - 1) | (((_DWORD)this - 1) >> 1) | ((((_DWORD)this - 1) | (((_DWORD)this - 1) >> 1)) >> 2);
  v2 = v1 | (v1 >> 4) | ((v1 | (v1 >> 4)) >> 8);
  return (v2 | HIWORD(v2)) + 1;
}

uint64_t kaldi::Srand(kaldi *this)
{
  unsigned int v1;

  v1 = this;
  pthread_mutex_lock(&kaldi::_RandMutex);
  kaldi::_RandSeed = v1;
  srand(v1);
  kaldi::_SrandCalled = 1;
  return pthread_mutex_unlock(&kaldi::_RandMutex);
}

uint64_t kaldi::Rand(unsigned int *a1)
{
  uint64_t v2;

  if (a1)
    return rand_r(a1);
  pthread_mutex_lock(&kaldi::_RandMutex);
  if ((kaldi::_SrandCalled & 1) == 0)
  {
    kaldi::_RandSeed = 1;
    srand(1u);
    kaldi::_SrandCalled = 1;
  }
  v2 = rand_r((unsigned int *)&kaldi::_RandSeed);
  pthread_mutex_unlock(&kaldi::_RandMutex);
  return v2;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::wstring>,std::wstring*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::~__func()
{
  JUMPOUT(0x1AF44D190);
}

_QWORD *std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &unk_1E5D3FD48;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &unk_1E5D3FD48;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::operator()(uint64_t a1)
{
  return (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) >> 31;
}

uint64_t std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1},std::allocator<quasar::tennessee::Collation<std::string_view,std::string_view>::GetLessThanComparator(void)::{lambda(std::string_view const&,std::string_view const&)#1}>,BOOL ()(std::string_view const&,std::string_view const&)>::target_type()
{
}

_QWORD *quasar::tennessee::DirectSortedIndex<long long,std::string_view>::DirectSortedIndex(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v10 = *a2;
  *a2 = 0;
  v17 = v10;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v20, a5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v18, a6);
  quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::SortedIndex(a1, &v17, (uint64_t)v20, (uint64_t)v18);
  v11 = v19;
  if (v19 == v18)
  {
    v12 = 4;
    v11 = v18;
  }
  else
  {
    if (!v19)
      goto LABEL_6;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_6:
  v13 = v21;
  if (v21 == v20)
  {
    v14 = 4;
    v13 = v20;
  }
  else
  {
    if (!v21)
      goto LABEL_11;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_11:
  v15 = v17;
  v17 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  *a1 = &unk_1E5D3C440;
  a1[10] = a3;
  a1[11] = a4;
  return a1;
}

void sub_1ADD16A20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v21 + 8 * v22))();
LABEL_11:
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::SortedIndex(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = *a2;
  *a2 = 0;
  *a1 = &unk_1E5D3C340;
  a1[1] = v6;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 2), a3);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 6), a4);
  return a1;
}

void sub_1ADD16B10(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)v1[5];
  if (v4 == v2)
  {
    v5 = v2;
    v6 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v6 = 5;
    v5 = (_QWORD *)v1[5];
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v1[1];
  *v1 = &unk_1E5D3CA48;
  v1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::DirectSortedIndex<long long,std::string_view>::~DirectSortedIndex(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &unk_1E5D3C340;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = a1[1];
  *a1 = &unk_1E5D3CA48;
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void quasar::tennessee::DirectSortedIndex<long long,std::string_view>::~DirectSortedIndex(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &unk_1E5D3C340;
  v2 = a1 + 6;
  v3 = (_QWORD *)a1[9];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[5];
  if (v5 == a1 + 2)
  {
    v6 = 4;
    v5 = a1 + 2;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = a1[1];
  *a1 = &unk_1E5D3CA48;
  a1[1] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  JUMPOUT(0x1AF44D190);
}

uint64_t quasar::tennessee::Index<long long,std::string_view>::FindMatches@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  uint64_t result;

  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  v8[2] = 0;
  *v8 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 24))(a1, a2, a3, v8);
  *a4 = v8;
  return result;
}

void sub_1ADD16D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::Index<long long,std::string_view>::FindMatches(_QWORD *a1, uint64_t a2, int a3)
{
  uint64_t v3;

  v3 = 40;
  if (a3)
    v3 = 48;
  return (*(uint64_t (**)(void))(*a1 + v3))();
}

uint64_t quasar::tennessee::Index<long long,std::string_view>::FindExactMatches@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  uint64_t result;

  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  v6[2] = 0;
  *v6 = 0;
  result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)a1 + 40))(a1, a2, v6);
  *a3 = v6;
  return result;
}

void sub_1ADD16E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  std::default_delete<std::vector<long long>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::FindExactMatches(_QWORD **a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[24];
  _BYTE *v41;
  _BYTE v42[24];
  _BYTE *v43;
  void *v44;
  _BYTE v45[24];
  _BYTE *v46;
  _BYTE v47[24];
  _BYTE *v48;
  uint64_t v49;
  _QWORD v50[3];
  _QWORD *v51;
  _QWORD v52[3];
  _QWORD *v53;
  void *v54;
  _QWORD v55[3];
  _QWORD *v56;
  _QWORD v57[3];
  _QWORD *v58;
  _BYTE v59[24];
  _BYTE *v60;
  _BYTE v61[24];
  _BYTE *v62;
  void *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v38);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[9])(&v37, a1);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v61, (uint64_t)(a1 + 2));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v59, (uint64_t)(a1 + 6));
  v6 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 16))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v38, &v37, (uint64_t)v61, (uint64_t)v59, v6, a2, 1, &v63);
  v7 = v60;
  if (v60 == v59)
  {
    v8 = 4;
    v7 = v59;
  }
  else
  {
    if (!v60)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v62;
  if (v62 == v61)
  {
    v10 = 4;
    v9 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  if (!v73)
    return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v63);
  v11 = (uint64_t)v65;
  v54 = v63;
  v12 = v55;
  if (!v65)
    goto LABEL_15;
  if (v65 != &v64)
  {
    v11 = (*(uint64_t (**)(uint64_t *))(*v65 + 16))(v65);
LABEL_15:
    v56 = (_QWORD *)v11;
    goto LABEL_17;
  }
  v56 = v55;
  (*(void (**)(uint64_t *, _QWORD *))(*v65 + 24))(v65, v55);
LABEL_17:
  v13 = v57;
  v14 = (uint64_t)v67;
  if (!v67)
  {
LABEL_20:
    v58 = (_QWORD *)v14;
    goto LABEL_22;
  }
  if (v67 != &v66)
  {
    v14 = (*(uint64_t (**)(uint64_t *))(*v67 + 16))(v67);
    goto LABEL_20;
  }
  v58 = v57;
  (*(void (**)(uint64_t *, _QWORD *))(*v67 + 24))(v67, v57);
LABEL_22:
  v15 = (uint64_t)v70;
  v49 = v68;
  v16 = v50;
  if (!v70)
  {
LABEL_25:
    v51 = (_QWORD *)v15;
    goto LABEL_27;
  }
  if (v70 != &v69)
  {
    v15 = (*(uint64_t (**)(uint64_t *))(*v70 + 16))(v70);
    goto LABEL_25;
  }
  v51 = v50;
  (*(void (**)(uint64_t *, _QWORD *))(*v70 + 24))(v70, v50);
LABEL_27:
  v17 = v52;
  v18 = (uint64_t)v72;
  if (!v72)
  {
LABEL_30:
    v53 = (_QWORD *)v18;
    goto LABEL_32;
  }
  if (v72 != &v71)
  {
    v18 = (*(uint64_t (**)(uint64_t *))(*v72 + 16))(v72);
    goto LABEL_30;
  }
  v53 = v52;
  (*(void (**)(uint64_t *, _QWORD *))(*v72 + 24))(v72, v52);
LABEL_32:
  v19 = *(char **)(a3 + 8);
  v20 = (uint64_t)v56;
  v44 = v54;
  v21 = v45;
  if (!v56)
  {
LABEL_35:
    v46 = (_BYTE *)v20;
    goto LABEL_37;
  }
  if (v56 != v55)
  {
    v20 = (*(uint64_t (**)(void))(*v56 + 16))();
    goto LABEL_35;
  }
  v46 = v45;
  (*(void (**)(_QWORD *, _BYTE *))(v55[0] + 24))(v55, v45);
LABEL_37:
  v22 = v47;
  v23 = (uint64_t)v58;
  if (!v58)
  {
LABEL_40:
    v48 = (_BYTE *)v23;
    goto LABEL_42;
  }
  if (v58 != v57)
  {
    v23 = (*(uint64_t (**)(void))(*v58 + 16))();
    goto LABEL_40;
  }
  v48 = v47;
  (*(void (**)(_QWORD *, _BYTE *))(v57[0] + 24))(v57, v47);
LABEL_42:
  v24 = (uint64_t)v51;
  v39 = v49;
  v25 = v40;
  if (!v51)
  {
LABEL_45:
    v41 = (_BYTE *)v24;
    goto LABEL_47;
  }
  if (v51 != v50)
  {
    v24 = (*(uint64_t (**)(void))(*v51 + 16))();
    goto LABEL_45;
  }
  v41 = v40;
  (*(void (**)(_QWORD *, _BYTE *))(v50[0] + 24))(v50, v40);
LABEL_47:
  v26 = v42;
  v27 = (uint64_t)v53;
  if (!v53)
  {
LABEL_50:
    v43 = (_BYTE *)v27;
    goto LABEL_52;
  }
  if (v53 != v52)
  {
    v27 = (*(uint64_t (**)(void))(*v53 + 16))();
    goto LABEL_50;
  }
  v43 = v42;
  (*(void (**)(_QWORD *, _BYTE *))(v52[0] + 24))(v52, v42);
LABEL_52:
  std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, v19, &v44, &v39);
  if (v43 == v42)
  {
    v28 = 4;
  }
  else
  {
    if (!v43)
      goto LABEL_57;
    v28 = 5;
    v26 = v43;
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v28))(v26);
LABEL_57:
  if (v41 == v40)
  {
    v29 = 4;
  }
  else
  {
    if (!v41)
      goto LABEL_62;
    v29 = 5;
    v25 = v41;
  }
  (*(void (**)(_QWORD *))(*v25 + 8 * v29))(v25);
LABEL_62:
  if (v48 == v47)
  {
    v30 = 4;
  }
  else
  {
    if (!v48)
      goto LABEL_67;
    v30 = 5;
    v22 = v48;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v30))(v22);
LABEL_67:
  if (v46 == v45)
  {
    v31 = 4;
  }
  else
  {
    if (!v46)
      goto LABEL_72;
    v31 = 5;
    v21 = v46;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v31))(v21);
LABEL_72:
  if (v53 == v52)
  {
    v32 = 4;
  }
  else
  {
    if (!v53)
      goto LABEL_77;
    v32 = 5;
    v17 = v53;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v32))(v17);
LABEL_77:
  if (v51 == v50)
  {
    v33 = 4;
  }
  else
  {
    if (!v51)
      goto LABEL_82;
    v33 = 5;
    v16 = v51;
  }
  (*(void (**)(_QWORD *))(*v16 + 8 * v33))(v16);
LABEL_82:
  if (v58 == v57)
  {
    v34 = 4;
    goto LABEL_86;
  }
  if (v58)
  {
    v34 = 5;
    v13 = v58;
LABEL_86:
    (*(void (**)(_QWORD *))(*v13 + 8 * v34))(v13);
  }
  if (v56 == v55)
  {
    v35 = 4;
    goto LABEL_91;
  }
  if (v56)
  {
    v35 = 5;
    v12 = v56;
LABEL_91:
    (*(void (**)(_QWORD *))(*v12 + 8 * v35))(v12);
  }
  return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v63);
}

void sub_1ADD17380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _QWORD *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38)
{
  _QWORD *v38;
  uint64_t v39;
  uint64_t v41;

  if (a15 == v38)
  {
    v41 = 4;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v41 = 5;
    v38 = a15;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v41))(v38);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a20);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a29);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a38);
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100](v39 - 256);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::FindPrefixMatches(_QWORD **a1, __int128 *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  void *v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  _BYTE v37[24];
  _BYTE *v38;
  _BYTE v39[24];
  _BYTE *v40;
  void *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v26);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[9])(&v25, a1);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v39, (uint64_t)(a1 + 2));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v37, (uint64_t)(a1 + 6));
  v6 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 24))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v26, &v25, (uint64_t)v39, (uint64_t)v37, v6, a2, 1, &v41);
  v7 = v38;
  if (v38 == v37)
  {
    v8 = 4;
    v7 = v37;
  }
  else
  {
    if (!v38)
      goto LABEL_6;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_6:
  v9 = v40;
  if (v40 == v39)
  {
    v10 = 4;
    v9 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_11;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_11:
  if (!v51)
    return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v41);
  v11 = *(char **)(a3 + 8);
  v12 = (uint64_t)v43;
  v32 = v41;
  v13 = v33;
  if (!v43)
    goto LABEL_15;
  if (v43 != &v42)
  {
    v12 = (*(uint64_t (**)(void))(*v43 + 16))();
LABEL_15:
    v34 = (_BYTE *)v12;
    goto LABEL_17;
  }
  v34 = v33;
  (*(void (**)(void))(*v43 + 24))();
LABEL_17:
  v14 = v35;
  v15 = (uint64_t)v45;
  if (!v45)
  {
LABEL_20:
    v36 = (_BYTE *)v15;
    goto LABEL_22;
  }
  if (v45 != &v44)
  {
    v15 = (*(uint64_t (**)(void))(*v45 + 16))();
    goto LABEL_20;
  }
  v36 = v35;
  (*(void (**)(void))(*v45 + 24))();
LABEL_22:
  v16 = (uint64_t)v48;
  v27 = v46;
  v17 = v28;
  if (!v48)
  {
LABEL_25:
    v29 = (_BYTE *)v16;
    goto LABEL_27;
  }
  if (v48 != &v47)
  {
    v16 = (*(uint64_t (**)(void))(*v48 + 16))();
    goto LABEL_25;
  }
  v29 = v28;
  (*(void (**)(void))(*v48 + 24))();
LABEL_27:
  v18 = v30;
  v19 = (uint64_t)v50;
  if (!v50)
  {
LABEL_30:
    v31 = (_BYTE *)v19;
    goto LABEL_32;
  }
  if (v50 != &v49)
  {
    v19 = (*(uint64_t (**)(void))(*v50 + 16))();
    goto LABEL_30;
  }
  v31 = v30;
  (*(void (**)(void))(*v50 + 24))();
LABEL_32:
  std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, v11, &v32, &v27);
  if (v31 == v30)
  {
    v20 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_37;
    v20 = 5;
    v18 = v31;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v20))(v18);
LABEL_37:
  if (v29 == v28)
  {
    v21 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_42;
    v21 = 5;
    v17 = v29;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v21))(v17);
LABEL_42:
  if (v36 == v35)
  {
    v22 = 4;
    goto LABEL_46;
  }
  if (v36)
  {
    v22 = 5;
    v14 = v36;
LABEL_46:
    (*(void (**)(_QWORD *))(*v14 + 8 * v22))(v14);
  }
  if (v34 == v33)
  {
    v23 = 4;
    goto LABEL_51;
  }
  if (v34)
  {
    v23 = 5;
    v13 = v34;
LABEL_51:
    (*(void (**)(_QWORD *))(*v13 + 8 * v23))(v13);
  }
  return std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v41);
}

void sub_1ADD17884(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  _QWORD *v38;
  uint64_t v40;

  if (a16 == v38)
  {
    v40 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v40 = 5;
    v38 = a16;
  }
  (*(void (**)(_QWORD *))(*v38 + 8 * v40))(v38);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a21);
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t quasar::tennessee::SortedIndex<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::IsPrefix(_QWORD **a1, __int128 *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[160];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  ((void (*)(uint64_t *__return_ptr))(*a1)[8])(&v12);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[9])(&v11, a1);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a1 + 2));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 6));
  v4 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 24))(a1[1]);
  quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v12, &v11, (uint64_t)v15, (uint64_t)v13, v4, a2, 0, v17);
  v5 = v14;
  if (v14 == v13)
  {
    v6 = 4;
    v5 = v13;
  }
  else
  {
    if (!v14)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  v7 = v16;
  if (v16 == v15)
  {
    v8 = 4;
    v7 = v15;
    goto LABEL_10;
  }
  if (v16)
  {
    v8 = 5;
LABEL_10:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  v9 = v17[152];
  std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)v17);
  return v9;
}

void sub_1ADD17ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  char *v20;
  uint64_t v21;

  v20 = a19;
  if (a19 == &a16)
  {
    v21 = 4;
    v20 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::DirectSortedIndex<long long,std::string_view>::BeginSorted@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 80);
  return result;
}

uint64_t quasar::tennessee::DirectSortedIndex<long long,std::string_view>::EndSorted@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 88);
  return result;
}

_QWORD *quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, int a7@<W6>, _BYTE *a8@<X8>)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD v63[2];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  _QWORD *v69;
  _BYTE v70[24];
  _BYTE *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;
  _BYTE v77[24];
  _BYTE *v78;
  _BYTE v79[24];
  _BYTE *v80;
  uint64_t v81;
  _QWORD v82[3];
  _QWORD *v83;
  _BYTE v84[24];
  _BYTE *v85;
  _BYTE v86[24];
  _BYTE *v87;
  uint64_t v88;
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;
  _BYTE v92[24];
  _BYTE *v93;
  _BYTE v94[24];
  _BYTE *v95;
  _BYTE v96[24];
  _BYTE *v97;
  uint64_t v98;
  _BYTE v99[24];
  _BYTE *v100;
  _BYTE v101[24];
  _BYTE *v102;
  uint64_t v103;
  _BYTE v104[24];
  _BYTE *v105;
  uint64_t v106;
  _BYTE v107[24];
  _BYTE *v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  v65 = *a1;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v101, a3);
  quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(&v65, (uint64_t)v101, &v103);
  v64 = *a2;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v96, a3);
  quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>(&v64, (uint64_t)v96, &v98);
  std::lower_bound[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>(&v103, &v98, a6, a5, &v106);
  v15 = v100;
  if (v100 == v99)
  {
    v16 = 4;
    v15 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_6:
  v17 = v97;
  if (v97 == v96)
  {
    v18 = 4;
    v17 = v96;
  }
  else
  {
    if (!v97)
      goto LABEL_11;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_11:
  v19 = v105;
  if (v105 == v104)
  {
    v20 = 4;
    v19 = v104;
  }
  else
  {
    if (!v105)
      goto LABEL_16;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_16:
  v21 = v102;
  if (v102 == v101)
  {
    v22 = 4;
    v21 = v101;
    goto LABEL_20;
  }
  if (v102)
  {
    v22 = 5;
LABEL_20:
    (*(void (**)(void))(*v21 + 8 * v22))();
  }
  if (v106 == *a2)
    goto LABEL_24;
  v91 = v106;
  if (!v108)
    std::__throw_bad_function_call[abi:ne180100]();
  v67 = (*(uint64_t (**)(_BYTE *, uint64_t *))(*(_QWORD *)v108 + 48))(v108, &v91);
  v68[0] = v23;
  if ((*(unsigned int (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)a5 + 16))(a5, &v67, a6))
  {
LABEL_24:
    *a8 = 0;
    a8[152] = 0;
    goto LABEL_25;
  }
  v26 = (uint64_t)v108;
  v88 = v106;
  v27 = v89;
  if (!v108)
    goto LABEL_34;
  if (v108 != v107)
  {
    v26 = (*(uint64_t (**)(void))(*(_QWORD *)v108 + 16))();
LABEL_34:
    v90 = (_BYTE *)v26;
    goto LABEL_36;
  }
  v90 = v89;
  (*(void (**)(void))(*(_QWORD *)v108 + 24))();
LABEL_36:
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v86, a4);
  quasar::tennessee::internal::CreateIterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v88, (uint64_t)v86, &v91);
  v28 = v87;
  if (v87 == v86)
  {
    v29 = 4;
    v28 = v86;
  }
  else
  {
    if (!v87)
      goto LABEL_41;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_41:
  if (v90 == v89)
  {
    v30 = 4;
    goto LABEL_45;
  }
  if (v90)
  {
    v30 = 5;
    v27 = v90;
LABEL_45:
    (*(void (**)(_QWORD *))(*v27 + 8 * v30))(v27);
  }
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+(&v91, 1, &v81);
  if (!a7)
    goto LABEL_76;
  v31 = v68;
  while (1)
  {
    v32 = (uint64_t)v83;
    v67 = v81;
    if (!v83)
      goto LABEL_51;
    if (v83 != v82)
    {
      v32 = (*(uint64_t (**)(void))(*v83 + 16))();
LABEL_51:
      v69 = (_QWORD *)v32;
      goto LABEL_53;
    }
    v69 = v68;
    (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v68);
LABEL_53:
    if (v67 == *a2)
      break;
    v66 = quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator*(&v81);
    v33 = *(_QWORD *)(a3 + 24);
    if (!v33)
      std::__throw_bad_function_call[abi:ne180100]();
    v63[0] = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v33 + 48))(v33, &v66);
    v63[1] = v34;
    v35 = (*(uint64_t (**)(uint64_t, _QWORD *, __int128 *))(*(_QWORD *)a5 + 16))(a5, v63, a6);
    v36 = v69;
    if (v69 == v68)
    {
      v36 = v68;
      v37 = 4;
    }
    else
    {
      if (!v69)
        goto LABEL_60;
      v37 = 5;
    }
    (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_60:
    if (v35)
      goto LABEL_76;
    quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(&v81, &v76);
    v38 = v80;
    if (v80 == v79)
    {
      v38 = v79;
      v39 = 4;
      goto LABEL_65;
    }
    if (v80)
    {
      v39 = 5;
LABEL_65:
      (*(void (**)(void))(*v38 + 8 * v39))();
    }
    v40 = v78;
    if (v78 == v77)
    {
      v40 = v77;
      v41 = 4;
LABEL_70:
      (*(void (**)(void))(*v40 + 8 * v41))();
    }
    else if (v78)
    {
      v41 = 5;
      goto LABEL_70;
    }
  }
  if (v69 == v68)
  {
    v42 = 4;
LABEL_75:
    (*(void (**)(_QWORD *))(*v31 + 8 * v42))(v31);
  }
  else if (v69)
  {
    v42 = 5;
    v31 = v69;
    goto LABEL_75;
  }
LABEL_76:
  LOBYTE(v63[0]) = 0;
  v67 = v81;
  v43 = v82;
  if (v83)
  {
    v44 = v68;
    if (v83 == v82)
    {
      v69 = v68;
      (*(void (**)(_QWORD *, _QWORD *))(v82[0] + 24))(v82, v68);
      v45 = v69;
    }
    else
    {
      v45 = (_QWORD *)(*(uint64_t (**)(void))(*v83 + 16))();
      v69 = v45;
    }
    v46 = v67 == *a2;
    if (v45 == v68)
    {
      v47 = 4;
LABEL_85:
      (*(void (**)(_QWORD *))(*v44 + 8 * v47))(v44);
    }
    else if (v45)
    {
      v47 = 5;
      v44 = v45;
      goto LABEL_85;
    }
  }
  else
  {
    v46 = v81 == *a2;
  }
  LOBYTE(v63[0]) = v46;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6quasar9tennessee8internal8IteratorINS_17basic_string_viewIcNS_11char_traitsIcEEEExNS6_IxSA_N5boost9iterators17counting_iteratorIxNSB_11use_defaultESE_EEEEEESH_bEEC2B8ne180100IJLm0ELm1ELm2EEJSH_SH_bEJEJEJRSH_SK_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_((uint64_t)&v67, &v91, &v81, v63);
  std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::__tuple_impl((uint64_t)a8, (uint64_t)&v67);
  a8[152] = 1;
  v48 = v75;
  if (v75 == v74)
  {
    v49 = 4;
    v48 = v74;
LABEL_90:
    (*(void (**)(void))(*v48 + 8 * v49))();
  }
  else if (v75)
  {
    v49 = 5;
    goto LABEL_90;
  }
  v50 = v73;
  if (v73 == v72)
  {
    v51 = 4;
    v50 = v72;
LABEL_95:
    (*(void (**)(void))(*v50 + 8 * v51))();
  }
  else if (v73)
  {
    v51 = 5;
    goto LABEL_95;
  }
  v52 = v71;
  if (v71 == v70)
  {
    v53 = 4;
    v52 = v70;
LABEL_100:
    (*(void (**)(void))(*v52 + 8 * v53))();
  }
  else if (v71)
  {
    v53 = 5;
    goto LABEL_100;
  }
  v54 = v69;
  if (v69 == v68)
  {
    v55 = 4;
    v54 = v68;
LABEL_105:
    (*(void (**)(void))(*v54 + 8 * v55))();
  }
  else if (v69)
  {
    v55 = 5;
    goto LABEL_105;
  }
  v56 = v85;
  if (v85 == v84)
  {
    v57 = 4;
    v56 = v84;
LABEL_110:
    (*(void (**)(void))(*v56 + 8 * v57))();
  }
  else if (v85)
  {
    v57 = 5;
    goto LABEL_110;
  }
  if (v83 == v82)
  {
    v58 = 4;
LABEL_115:
    (*(void (**)(_QWORD *))(*v43 + 8 * v58))(v43);
  }
  else if (v83)
  {
    v58 = 5;
    v43 = v83;
    goto LABEL_115;
  }
  v59 = v95;
  if (v95 == v94)
  {
    v60 = 4;
    v59 = v94;
LABEL_120:
    (*(void (**)(void))(*v59 + 8 * v60))();
  }
  else if (v95)
  {
    v60 = 5;
    goto LABEL_120;
  }
  v61 = v93;
  if (v93 == v92)
  {
    v62 = 4;
    v61 = v92;
LABEL_125:
    (*(void (**)(void))(*v61 + 8 * v62))();
  }
  else if (v93)
  {
    v62 = 5;
    goto LABEL_125;
  }
LABEL_25:
  result = v108;
  if (v108 == v107)
  {
    v25 = 4;
    result = v107;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
  }
  else if (v108)
  {
    v25 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v25))();
  }
  return result;
}

void sub_1ADD18288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61)
{
  uint64_t v61;
  _QWORD *v63;
  uint64_t v64;

  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a43);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a61);
  v63 = *(_QWORD **)(v61 - 104);
  if (v63 == (_QWORD *)(v61 - 128))
  {
    v64 = 4;
    v63 = (_QWORD *)(v61 - 128);
  }
  else
  {
    if (!v63)
      goto LABEL_6;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_6:
  _Unwind_Resume(a1);
}

char *std::vector<long long>::insert<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(uint64_t a1, char *a2, void **a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _BYTE v34[24];
  _BYTE *v35;
  _BYTE v36[24];
  _BYTE *v37;
  void *v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)(a3 + 1);
  v48 = (uint64_t)*a3;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)(a3 + 1));
  v9 = (uint64_t)(a3 + 5);
  v32 = std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)&v51, (uint64_t)(a3 + 5));
  v10 = (uint64_t)(a4 + 1);
  v43 = *a4;
  v11 = v44;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v44, (uint64_t)(a4 + 1));
  v12 = (uint64_t)(a4 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v46, (uint64_t)(a4 + 5));
  v38 = *a3;
  v13 = v39;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v39, v8);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v41, v9);
  v33 = *a4;
  v14 = v34;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v34, v10);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v36, v12);
  v15 = std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>((uint64_t *)&v38, &v33);
  v16 = std::vector<long long>::__insert_with_size[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(a1, a2, (void **)&v48, &v43, v15);
  v17 = v37;
  if (v37 == v36)
  {
    v18 = 4;
    v17 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_6:
  if (v35 == v34)
  {
    v19 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_11;
    v19 = 5;
    v14 = v35;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v19))(v14);
LABEL_11:
  v20 = v42;
  if (v42 == v41)
  {
    v21 = 4;
    v20 = v41;
  }
  else
  {
    if (!v42)
      goto LABEL_16;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_16:
  if (v40 == v39)
  {
    v22 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_21;
    v22 = 5;
    v13 = v40;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v22))(v13);
LABEL_21:
  v23 = v47;
  if (v47 == v46)
  {
    v26 = 4;
    v23 = v46;
    v25 = (_QWORD *)v32;
    v24 = v49;
  }
  else
  {
    v25 = (_QWORD *)v32;
    v24 = v49;
    if (!v47)
      goto LABEL_26;
    v26 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v26))();
LABEL_26:
  if (v45 == v44)
  {
    v27 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_31;
    v27 = 5;
    v11 = v45;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v27))(v11);
LABEL_31:
  v28 = v52;
  if (v52 == v25)
  {
    v29 = 4;
    v28 = v25;
  }
  else
  {
    if (!v52)
      goto LABEL_36;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_36:
  if (v50 == v49)
  {
    v30 = 4;
    goto LABEL_40;
  }
  if (v50)
  {
    v30 = 5;
    v24 = v50;
LABEL_40:
    (*(void (**)(_QWORD *))(*v24 + 8 * v30))(v24);
  }
  return v16;
}

void sub_1ADD18768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;

  if (a17 == v31)
  {
    v34 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v34 = 5;
    v31 = a17;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v34))(v31);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a22);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a31);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((_QWORD *)(v32 - 168));
  _Unwind_Resume(a1);
}

_QWORD *quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 5;
  v3 = (_QWORD *)a1[8];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t std::lower_bound[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[24];
  _BYTE *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v13 = a4;
  v17 = *a1;
  v8 = v18;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v18, (uint64_t)(a1 + 1));
  v14 = *a2;
  v9 = v15;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a2 + 1));
  result = std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>(&v17, &v14, a3, &v13, a5);
  if (v16 == v15)
  {
    v11 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_6;
    v11 = 5;
    v9 = v16;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v9 + 8 * v11))(v9);
LABEL_6:
  if (v19 == v18)
  {
    v12 = 4;
  }
  else
  {
    if (!v19)
      return result;
    v12 = 5;
    v8 = v19;
  }
  return (*(uint64_t (**)(_QWORD *))(*v8 + 8 * v12))(v8);
}

void sub_1ADD18A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _QWORD *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,_QWORD *a21)
{
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  if (a16 == v22)
  {
    v24 = v22;
    v25 = 4;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v25 = 5;
    v24 = a16;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_6:
  if (a21 == v21)
  {
    v26 = 4;
  }
  else
  {
    if (!a21)
      goto LABEL_11;
    v26 = 5;
    v21 = a21;
  }
  (*(void (**)(_QWORD *))(*v21 + 8 * v26))(v21);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::internal::CreateIterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = *a1;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  *a3 = v4;
  result = v8;
  if (!v8)
  {
    a3[4] = 0;
    return result;
  }
  if (v8 == v7)
  {
    a3[4] = a3 + 1;
    (*(void (**)(_QWORD *))(v7[0] + 24))(v7);
  }
  else
  {
    a3[4] = (*(uint64_t (**)(void))(*v8 + 16))();
  }
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_1ADD18B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator*(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *a1;
  v1 = a1[4];
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v1 + 48))(v1, &v3);
}

_QWORD *quasar::tennessee::internal::CreateIterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v11 = *a1;
  v5 = v12;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(a1 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v9, a2);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(a3, &v11, (uint64_t)v9);
  result = v10;
  if (v10 == v9)
  {
    v7 = 4;
    result = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v7 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
LABEL_6:
  if (v13 == v12)
  {
    v8 = 4;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
    v5 = v13;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8 * v8))(v5);
}

void sub_1ADD18D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, _QWORD *a17)
{
  _QWORD *v17;
  uint64_t *v18;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a12;
  if (a12 == v18)
  {
    v21 = 4;
    v20 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  if (a17 == v17)
  {
    v22 = 4;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
    v17 = a17;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v22))(v17);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator+(a1, a2, &v11);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a1 + 5));
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(a3, &v11, (uint64_t)v9);
  v5 = v10;
  if (v10 == v9)
  {
    v6 = 4;
    v5 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_6:
  result = v13;
  if (v13 == v12)
  {
    v8 = 4;
    result = v12;
  }
  else
  {
    if (!v13)
      return result;
    v8 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v8))();
}

void sub_1ADD18E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t *a17)
{
  uint64_t *v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;

  v19 = a12;
  if (a12 == v17)
  {
    v20 = 4;
    v19 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_6:
  v21 = a17;
  if (a17 == &a14)
  {
    v22 = 4;
    v21 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_11;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator*(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];

  v5[0] = quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator*(a1);
  v5[1] = v2;
  v3 = a1[8];
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v3 + 48))(v3, v5);
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  ++*a1;
  v4 = (uint64_t)(a1 + 1);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 1));
  v5 = v9;
  if (v9 == v8)
  {
    v6 = 4;
    v5 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v6 = 5;
LABEL_5:
    (*(void (**)(_QWORD *))(*v5 + 8 * v6))(v5);
  }
  *a2 = *a1;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), v4);
  return std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a2 + 5), (uint64_t)(a1 + 5));
}

void sub_1ADD18FEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = a1 + 14;
  v3 = (_QWORD *)a1[17];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[13];
  if (v5 == a1 + 10)
  {
    v6 = 4;
    v5 = a1 + 10;
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  v7 = (_QWORD *)a1[8];
  if (v7 == a1 + 5)
  {
    v8 = 4;
    v7 = a1 + 5;
  }
  else
  {
    if (!v7)
      goto LABEL_16;
    v8 = 5;
  }
  (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_16:
  v9 = (_QWORD *)a1[4];
  if (v9 == a1 + 1)
  {
    v10 = 4;
    v9 = a1 + 1;
    goto LABEL_20;
  }
  if (v9)
  {
    v10 = 5;
LABEL_20:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::optional<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>> quasar::tennessee::internal::FindMatches<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryIdToEntryFn,quasar::tennessee::SortedIndex<long long,std::string_view,std::vector<long long>::const_iterator>::EntryToEntryIdFn,quasar::tennessee::Comparator<std::string_view,quasar::tennessee::CollationInterfaceTypeHelper<std::string_view>::type> const&,std::string_view const&,BOOL)::{lambda(std::string_view,std::string_view)#1}>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[3];
  _QWORD *v30;
  uint64_t v31;
  _BYTE v32[24];
  _BYTE *v33;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 1;
  v34 = *a1;
  v11 = v35;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v35, (uint64_t)(a1 + 1));
  v31 = *a2;
  v12 = v32;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v32, (uint64_t)(a2 + 1));
  v13 = std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v34, &v31);
  if (v33 == v32)
  {
    v14 = 4;
  }
  else
  {
    if (!v33)
      goto LABEL_6;
    v14 = 5;
    v12 = v33;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_6:
  if (v36 == v35)
  {
    v15 = 4;
  }
  else
  {
    if (!v36)
      goto LABEL_11;
    v15 = 5;
    v11 = v36;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v15))(v11);
LABEL_11:
  if (v13)
  {
    while (1)
    {
      v28 = *a1;
      std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v29, (uint64_t)v10);
      v16 = v13 >> 1;
      std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v28, v13 >> 1);
      v25 = v28;
      if (!v30)
        std::__throw_bad_function_call[abi:ne180100]();
      v25 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v30 + 48))(v30, &v25);
      v26[0] = v17;
      v24 = *a3;
      if (((*(uint64_t (**)(_QWORD, uint64_t *, __int128 *))(*(_QWORD *)*a4 + 16))(*a4, &v25, &v24) & 0x80000000) != 0)
        break;
LABEL_25:
      v21 = v30;
      if (v30 == v29)
      {
        v21 = v29;
        v22 = 4;
        goto LABEL_29;
      }
      if (v30)
      {
        v22 = 5;
LABEL_29:
        (*(void (**)(void))(*v21 + 8 * v22))();
      }
      v13 = v16;
      if (!v16)
        goto LABEL_31;
    }
    v18 = (uint64_t)v30;
    v25 = ++v28;
    if (v30)
    {
      if (v30 == v29)
      {
        v27 = v26;
        (*(void (**)(_QWORD *, _QWORD *))(v29[0] + 24))(v29, v26);
LABEL_19:
        *a1 = v25;
        std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](v10, (uint64_t)v26);
        v19 = v27;
        if (v27 == v26)
        {
          v19 = v26;
          v20 = 4;
        }
        else
        {
          if (!v27)
          {
LABEL_24:
            v16 = v13 + ~v16;
            goto LABEL_25;
          }
          v20 = 5;
        }
        (*(void (**)(void))(*v19 + 8 * v20))();
        goto LABEL_24;
      }
      v18 = (*(uint64_t (**)(void))(*v30 + 16))();
    }
    v27 = (_QWORD *)v18;
    goto LABEL_19;
  }
LABEL_31:
  *a5 = *a1;
  return std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a5 + 1), (uint64_t)v10);
}

void sub_1ADD193A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,_QWORD *a26)
{
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;

  if (a26 == v27)
  {
    v30 = 4;
  }
  else
  {
    if (!a26)
      goto LABEL_6;
    v30 = 5;
    v27 = a26;
  }
  (*(void (**)(_QWORD *))(*v27 + 8 * v30))(v27);
LABEL_6:
  v31 = *(_QWORD **)(v28 - 96);
  if (v31 == v26)
  {
    v32 = 4;
  }
  else
  {
    if (!v31)
      goto LABEL_11;
    v32 = 5;
    v26 = *(_QWORD **)(v28 - 96);
  }
  (*(void (**)(_QWORD *))(*v26 + 8 * v32))(v26);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v12 = *a1;
  v3 = v13;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v13, (uint64_t)(a1 + 1));
  v9 = *a2;
  v4 = v10;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a2 + 1));
  v5 = std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v12, &v9);
  if (v11 == v10)
  {
    v6 = 4;
  }
  else
  {
    if (!v11)
      goto LABEL_6;
    v6 = 5;
    v4 = v11;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v6))(v4);
LABEL_6:
  if (v14 == v13)
  {
    v7 = 4;
    goto LABEL_10;
  }
  if (v14)
  {
    v7 = 5;
    v3 = v14;
LABEL_10:
    (*(void (**)(_QWORD *))(*v3 + 8 * v7))(v3);
  }
  return v5;
}

void sub_1ADD19548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, _QWORD *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, _QWORD *a19)
{
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;

  if (a14 == v20)
  {
    v22 = 4;
  }
  else
  {
    if (!a14)
      goto LABEL_6;
    v22 = 5;
    v20 = a14;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v22))(v20);
LABEL_6:
  if (a19 == v19)
  {
    v23 = 4;
  }
  else
  {
    if (!a19)
      goto LABEL_11;
    v23 = 5;
    v19 = a19;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v23))(v19);
LABEL_11:
  _Unwind_Resume(exception_object);
}

uint64_t std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v16 = *a1;
  v3 = v17;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a1 + 1));
  v13 = *a2;
  v4 = v14;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v14, (uint64_t)(a2 + 1));
  v5 = v16;
  v19 = v16;
  if (!v18)
  {
    v8 = v13;
    goto LABEL_11;
  }
  v6 = v20;
  if (v18 == v17)
  {
    v21 = v20;
    (*(void (**)(_QWORD *, _BYTE *))(v17[0] + 24))(v17, v20);
    v7 = v21;
  }
  else
  {
    v7 = (_BYTE *)(*(uint64_t (**)(void))(*v18 + 16))();
    v21 = v7;
  }
  v8 = v13;
  v5 = v19;
  if (v7 == v20)
  {
    v9 = 4;
  }
  else
  {
    if (!v7)
      goto LABEL_11;
    v9 = 5;
    v6 = v7;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v9))(v6);
LABEL_11:
  if (v15 == v14)
  {
    v10 = 4;
  }
  else
  {
    if (!v15)
      goto LABEL_16;
    v10 = 5;
    v4 = v15;
  }
  (*(void (**)(_QWORD *))(*v4 + 8 * v10))(v4);
LABEL_16:
  if (v18 == v17)
  {
    v11 = 4;
    goto LABEL_20;
  }
  if (v18)
  {
    v11 = 5;
    v3 = v18;
LABEL_20:
    (*(void (**)(_QWORD *))(*v3 + 8 * v11))(v3);
  }
  return v8 - v5;
}

void sub_1ADD1974C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v21;
  uint64_t v22;

  if (a13 == v19)
  {
    v21 = 4;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v21 = 5;
    v19 = a13;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v21))(v19);
LABEL_6:
  if (a18 == v18)
  {
    v22 = 4;
  }
  else
  {
    if (!a18)
      goto LABEL_11;
    v22 = 5;
    v18 = a18;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v22))(v18);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(_QWORD *a1, int a2)
{
  _QWORD *result;
  uint64_t v3;
  _BYTE v4[24];
  _BYTE *v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  *a1 += a2;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v4, (uint64_t)(a1 + 1));
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8 * v3))(result);
}

uint64_t std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

_QWORD *quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::Iterator(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = *a2;
  v5 = (uint64_t)(a1 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v5, a3);
  return a1;
}

void sub_1ADD1991C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 32);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>::operator+@<X0>(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 1));
  *a3 = v5 + a2;
  result = v9;
  if (!v9)
  {
    a3[4] = 0;
    return result;
  }
  if (v9 == v8)
  {
    a3[4] = a3 + 1;
    (*(void (**)(_QWORD *))(v8[0] + 24))(v8);
  }
  else
  {
    a3[4] = (*(uint64_t (**)(void))(*v9 + 16))();
  }
  result = v9;
  if (v9 == v8)
  {
    v7 = 4;
    result = v8;
  }
  else
  {
    if (!v9)
      return result;
    v7 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v7))();
}

void sub_1ADD19A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJN6quasar9tennessee8internal8IteratorINS_17basic_string_viewIcNS_11char_traitsIcEEEExNS6_IxSA_N5boost9iterators17counting_iteratorIxNSB_11use_defaultESE_EEEEEESH_bEEC2B8ne180100IJLm0ELm1ELm2EEJSH_SH_bEJEJEJRSH_SK_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSO_IJDpT2_EEEDpOT3_(uint64_t a1, _QWORD *a2, _QWORD *a3, _BYTE *a4)
{
  _QWORD *v7;

  v7 = std::__tuple_leaf<0ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>((_QWORD *)a1, a2);
  std::__tuple_leaf<1ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(v7 + 9, a3);
  *(_BYTE *)(a1 + 144) = *a4;
  return a1;
}

void sub_1ADD19AD4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__tuple_leaf<0ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = (uint64_t)(a1 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v4, (uint64_t)(a2 + 5));
  return a1;
}

void sub_1ADD19B3C(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 32);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__tuple_leaf<1ul,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>::__tuple_leaf[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>&,void>(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = (uint64_t)(a1 + 5);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100](v4, (uint64_t)(a2 + 5));
  return a1;
}

void sub_1ADD19BD0(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;

  v3 = v2;
  v5 = *(_QWORD **)(v3 + 32);
  if (v5 == v1)
  {
    v6 = 4;
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v6 = 5;
    v1 = v5;
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v6))(v1);
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::__tuple_impl<std::__tuple_indices<0ul,1ul,2ul>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::__tuple_impl(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](a1 + 8, a2 + 8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100](a1 + 80, a2 + 80);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](a1 + 112, a2 + 112);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  return a1;
}

uint64_t std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

char *std::vector<long long>::__insert_with_size[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t a1, char *a2, void **a3, uint64_t *a4, uint64_t a5)
{
  char *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  _QWORD *v20;
  _QWORD *v21;
  char **v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  _BYTE v63[24];
  _BYTE *v64;
  _BYTE v65[24];
  _BYTE *v66;
  void *v67;
  _BYTE v68[24];
  _BYTE *v69;
  _BYTE v70[24];
  _BYTE *v71;
  void *v72;
  _BYTE v73[24];
  _BYTE *v74;
  _BYTE v75[24];
  _BYTE *v76;
  uint64_t v77;
  _BYTE v78[24];
  _BYTE *v79;
  _BYTE v80[24];
  _BYTE *v81;
  void *v82;
  _BYTE v83[24];
  _BYTE *v84;
  _BYTE v85[24];
  _BYTE *v86;
  void *v87;
  _BYTE v88[24];
  _BYTE *v89;
  _BYTE v90[24];
  _BYTE *v91;
  void *v92;
  char *v93;
  char *v94;
  char *v95;
  char **v96;
  _QWORD v97[3];
  _QWORD *v98;
  uint64_t v99;

  v5 = a2;
  v99 = *MEMORY[0x1E0C80C00];
  if (a5 < 1)
    return v5;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 <= (uint64_t)(v11 - v12) >> 3)
  {
    v87 = *a3;
    v20 = v88;
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v88, (uint64_t)(a3 + 1));
    v21 = v90;
    v61 = (uint64_t)(a3 + 5);
    std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v90, (uint64_t)(a3 + 5));
    std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v87, a5);
    v92 = v87;
    std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)&v93, (uint64_t)v88);
    std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v97, (uint64_t)v90);
    if (v91 == v90)
    {
      v23 = 4;
      v22 = &v93;
    }
    else
    {
      v22 = &v93;
      if (!v91)
        goto LABEL_20;
      v23 = 5;
      v21 = v91;
    }
    (*(void (**)(_QWORD *))(*v21 + 8 * v23))(v21);
LABEL_20:
    if (v89 == v88)
    {
      v27 = 4;
    }
    else
    {
      if (!v89)
        goto LABEL_25;
      v27 = 5;
      v20 = v89;
    }
    (*(void (**)(_QWORD *))(*v20 + 8 * v27))(v20);
LABEL_25:
    v28 = *(char **)(a1 + 8);
    v29 = v28 - v5;
    if (a5 <= (v28 - v5) >> 3)
    {
      v31 = v97;
      goto LABEL_70;
    }
    v92 = *a3;
    std::function<std::string_view ()(long long)>::operator=(&v93, (uint64_t)(a3 + 1));
    std::function<long long ()(std::string_view)>::operator=(v97, v61);
    std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v92, (uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v5) >> 3);
    v30 = (uint64_t)v96;
    v82 = v92;
    if (v96)
    {
      if (v96 == &v93)
      {
        v84 = v83;
        (*((void (**)(char **))v93 + 3))(&v93);
LABEL_43:
        v33 = v85;
        v34 = (uint64_t)v98;
        if (v98)
        {
          if (v98 == v97)
          {
            v86 = v85;
            (*(void (**)(_QWORD *, _BYTE *))(v97[0] + 24))(v97, v85);
LABEL_48:
            v60 = v29;
            v77 = *a4;
            v35 = v78;
            std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v78, (uint64_t)(a4 + 1));
            std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v80, (uint64_t)(a4 + 5));
            std::vector<long long>::__construct_at_end<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(a1, (uint64_t *)&v82, &v77);
            v36 = v83;
            v37 = v81;
            if (v81 == v80)
            {
              v38 = 4;
              v37 = v80;
              v22 = &v93;
            }
            else
            {
              v22 = &v93;
              if (!v81)
                goto LABEL_53;
              v38 = 5;
            }
            (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_53:
            if (v79 == v78)
            {
              v39 = 4;
            }
            else
            {
              if (!v79)
                goto LABEL_58;
              v39 = 5;
              v35 = v79;
            }
            (*(void (**)(_QWORD *))(*v35 + 8 * v39))(v35);
LABEL_58:
            if (v86 == v85)
            {
              v41 = 4;
              v40 = v60;
            }
            else
            {
              v40 = v60;
              if (!v86)
                goto LABEL_63;
              v41 = 5;
              v33 = v86;
            }
            (*(void (**)(_QWORD *))(*v33 + 8 * v41))(v33);
LABEL_63:
            if (v84 == v83)
            {
              v42 = 4;
              v31 = v97;
            }
            else
            {
              v31 = v97;
              if (!v84)
              {
LABEL_68:
                if (v40 < 1)
                  goto LABEL_105;
                v28 = *(char **)(a1 + 8);
LABEL_70:
                v43 = &v5[8 * a5];
                v44 = &v28[-8 * a5];
                v45 = v28;
                if ((unint64_t)v44 < v12)
                {
                  v45 = v28;
                  do
                  {
                    v46 = *(_QWORD *)v44;
                    v44 += 8;
                    *(_QWORD *)v45 = v46;
                    v45 += 8;
                  }
                  while ((unint64_t)v44 < v12);
                }
                *(_QWORD *)(a1 + 8) = v45;
                if (v28 != v43)
                  memmove(&v28[-8 * ((v28 - v43) >> 3)], v5, v28 - v43);
                v72 = *a3;
                v47 = v73;
                std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)(a3 + 1));
                std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v75, v61);
                v48 = (uint64_t)v96;
                v67 = v92;
                v49 = v68;
                if (v96)
                {
                  if (v96 == &v93)
                  {
                    v69 = v68;
                    (*((void (**)(char **, _BYTE *))v93 + 3))(&v93, v68);
LABEL_80:
                    v50 = v70;
                    v51 = (uint64_t)v98;
                    if (v98)
                    {
                      if (v98 == v97)
                      {
                        v71 = v70;
                        (*(void (**)(_QWORD *, _BYTE *))(v97[0] + 24))(v97, v70);
LABEL_85:
                        std::copy[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>((uint64_t *)&v72, (uint64_t *)&v67, (uint64_t *)v5);
                        if (v71 == v70)
                        {
                          v52 = 4;
                        }
                        else
                        {
                          if (!v71)
                            goto LABEL_90;
                          v52 = 5;
                          v50 = v71;
                        }
                        (*(void (**)(_QWORD *))(*v50 + 8 * v52))(v50);
LABEL_90:
                        if (v69 == v68)
                        {
                          v53 = 4;
                        }
                        else
                        {
                          if (!v69)
                            goto LABEL_95;
                          v53 = 5;
                          v49 = v69;
                        }
                        (*(void (**)(_QWORD *))(*v49 + 8 * v53))(v49);
LABEL_95:
                        v54 = v76;
                        if (v76 == v75)
                        {
                          v55 = 4;
                          v54 = v75;
                        }
                        else
                        {
                          if (!v76)
                            goto LABEL_100;
                          v55 = 5;
                        }
                        (*(void (**)(void))(*v54 + 8 * v55))();
LABEL_100:
                        if (v74 == v73)
                        {
                          v56 = 4;
                        }
                        else
                        {
                          if (!v74)
                            goto LABEL_105;
                          v56 = 5;
                          v47 = v74;
                        }
                        (*(void (**)(_QWORD *))(*v47 + 8 * v56))(v47);
LABEL_105:
                        if (v98 == v97)
                        {
                          v57 = 4;
                        }
                        else
                        {
                          if (!v98)
                            goto LABEL_110;
                          v57 = 5;
                          v31 = v98;
                        }
                        (*(void (**)(_QWORD *))(*v31 + 8 * v57))(v31);
LABEL_110:
                        if (v96 == &v93)
                        {
                          v58 = 4;
                        }
                        else
                        {
                          if (!v96)
                            return v5;
                          v58 = 5;
                          v22 = v96;
                        }
                        (*(void (**)(char **))&(*v22)[8 * v58])(v22);
                        return v5;
                      }
                      v51 = (*(uint64_t (**)(void))(*v98 + 16))();
                    }
                    v71 = (_BYTE *)v51;
                    goto LABEL_85;
                  }
                  v48 = (*((uint64_t (**)(void))*v96 + 2))();
                }
                v69 = (_BYTE *)v48;
                goto LABEL_80;
              }
              v42 = 5;
              v36 = v84;
            }
            (*(void (**)(_QWORD *))(*v36 + 8 * v42))(v36);
            goto LABEL_68;
          }
          v34 = (*(uint64_t (**)(void))(*v98 + 16))();
        }
        v86 = (_BYTE *)v34;
        goto LABEL_48;
      }
      v30 = (*((uint64_t (**)(void))*v96 + 2))();
    }
    v84 = (_BYTE *)v30;
    goto LABEL_43;
  }
  v13 = *(_BYTE **)a1;
  v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
  if (v14 >> 61)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v15 = (a2 - v13) >> 3;
  v16 = v10 - (_QWORD)v13;
  if (v16 >> 2 > v14)
    v14 = v16 >> 2;
  if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
    v17 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v17 = v14;
  v96 = (char **)v9;
  if (v17)
    v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
  else
    v18 = 0;
  v92 = v18;
  v93 = &v18[8 * v15];
  v94 = v93;
  v95 = &v18[8 * v17];
  v62 = *a3;
  v24 = v63;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v63, (uint64_t)(a3 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v65, (uint64_t)(a3 + 5));
  std::__split_buffer<long long>::__construct_at_end_with_size<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v92, (uint64_t *)&v62, a5);
  v25 = v66;
  if (v66 == v65)
  {
    v26 = 4;
    v25 = v65;
  }
  else
  {
    if (!v66)
      goto LABEL_33;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_33:
  if (v64 == v63)
  {
    v32 = 4;
    goto LABEL_37;
  }
  if (v64)
  {
    v32 = 5;
    v24 = v64;
LABEL_37:
    (*(void (**)(_QWORD *))(*v24 + 8 * v32))(v24);
  }
  v5 = std::vector<long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&v92, v5);
  if (v94 != v93)
    v94 += (v93 - v94 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (v92)
    operator delete(v92);
  return v5;
}

void sub_1ADD1A3D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, _QWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,_QWORD *a56)
{
  uint64_t v56;
  uint64_t v58;

  if (a56 == a12)
  {
    v58 = 4;
  }
  else
  {
    if (!a56)
      goto LABEL_6;
    v58 = 5;
    a12 = a56;
  }
  (*(void (**)(_QWORD *))(*a12 + 8 * v58))(a12);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((_QWORD *)(v56 - 168));
  _Unwind_Resume(a1);
}

uint64_t std::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;
  _QWORD v26[3];
  _QWORD *v27;
  _QWORD v28[3];
  _QWORD *v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v25 = *a1;
  v4 = v26;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)(a1 + 1));
  v5 = v28;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)(a1 + 5));
  v20 = *a2;
  v6 = v21;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)(a2 + 5));
  v7 = (uint64_t)v27;
  v30 = v25;
  v8 = v31;
  if (!v27)
    goto LABEL_4;
  if (v27 != v26)
  {
    v7 = (*(uint64_t (**)(_QWORD *))(*v27 + 16))(v27);
LABEL_4:
    v32 = (_BYTE *)v7;
    goto LABEL_6;
  }
  v32 = v31;
  (*(void (**)(_QWORD *, _BYTE *))(v26[0] + 24))(v26, v31);
LABEL_6:
  v9 = v33;
  v10 = (uint64_t)v29;
  if (!v29)
  {
LABEL_9:
    v34 = (_BYTE *)v10;
    goto LABEL_11;
  }
  if (v29 != v28)
  {
    v10 = (*(uint64_t (**)(_QWORD *))(*v29 + 16))(v29);
    goto LABEL_9;
  }
  v34 = v33;
  (*(void (**)(_QWORD *, _BYTE *))(v28[0] + 24))(v28, v33);
LABEL_11:
  v11 = quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator-(&v20, &v30);
  if (v34 == v33)
  {
    v12 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_16;
    v12 = 5;
    v9 = v34;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_16:
  if (v32 == v31)
  {
    v13 = 4;
  }
  else
  {
    if (!v32)
      goto LABEL_21;
    v13 = 5;
    v8 = v32;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v13))(v8);
LABEL_21:
  v14 = v24;
  if (v24 == v23)
  {
    v15 = 4;
    v14 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(_QWORD *))(*v14 + 8 * v15))(v14);
LABEL_26:
  if (v22 == v21)
  {
    v16 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_31;
    v16 = 5;
    v6 = v22;
  }
  (*(void (**)(_QWORD *))(*v6 + 8 * v16))(v6);
LABEL_31:
  if (v29 == v28)
  {
    v17 = 4;
  }
  else
  {
    if (!v29)
      goto LABEL_36;
    v17 = 5;
    v5 = v29;
  }
  (*(void (**)(_QWORD *))(*v5 + 8 * v17))(v5);
LABEL_36:
  if (v27 == v26)
  {
    v18 = 4;
    goto LABEL_40;
  }
  if (v27)
  {
    v18 = 5;
    v4 = v27;
LABEL_40:
    (*(void (**)(_QWORD *))(*v4 + 8 * v18))(v4);
  }
  return v11;
}

void sub_1ADD1A858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,_QWORD *a31)
{
  _QWORD *v31;
  uint64_t v33;

  if (a31 == v31)
  {
    v33 = 4;
  }
  else
  {
    if (!a31)
      goto LABEL_6;
    v33 = 5;
    v31 = a31;
  }
  (*(void (**)(_QWORD *))(*v31 + 8 * v33))(v31);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a9);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a18);
  _Unwind_Resume(a1);
}

void sub_1ADD1A8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22)
{
  _QWORD *v22;
  uint64_t v23;

  if (a22 == v22)
  {
    v23 = 4;
  }
  else
  {
    if (!a22)
      goto LABEL_6;
    v23 = 5;
    v22 = a22;
  }
  (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
LABEL_6:
  JUMPOUT(0x1ADD1A8F4);
}

void sub_1ADD1A934()
{
  JUMPOUT(0x1ADD1A8F4);
}

_QWORD *std::vector<long long>::__construct_at_end<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v6 = *(uint64_t **)(a1 + 8);
  v21 = *a2;
  v7 = v22;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v24, (uint64_t)(a2 + 5));
  v16 = *a3;
  v8 = v17;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a3 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a3 + 5));
  v9 = std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(a1 + 16, &v21, &v16, v6);
  v10 = v20;
  if (v20 == v19)
  {
    v11 = 4;
    v10 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  if (v18 == v17)
  {
    v12 = 4;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v12 = 5;
    v8 = v18;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v12))(v8);
LABEL_11:
  result = v25;
  if (v25 == v24)
  {
    v14 = 4;
    result = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v14 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v14))();
LABEL_16:
  if (v23 == v22)
  {
    v15 = 4;
    goto LABEL_20;
  }
  if (v23)
  {
    v15 = 5;
    v7 = v23;
LABEL_20:
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v15))(v7);
  }
  *(_QWORD *)(a1 + 8) = v9;
  return result;
}

void sub_1ADD1AAD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(va1);
  *(_QWORD *)(v2 + 8) = v3;
  _Unwind_Resume(a1);
}

uint64_t std::copy[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[24];
  _BYTE *v22;
  _BYTE v23[24];
  _BYTE *v24;
  uint64_t v25;
  _BYTE v26[24];
  _BYTE *v27;
  _BYTE v28[24];
  _BYTE *v29;
  uint64_t v30;
  _BYTE v31[24];
  _BYTE *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v25 = *a1;
  v6 = v26;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v26, (uint64_t)(a1 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v28, (uint64_t)(a1 + 5));
  v20 = *a2;
  v7 = v21;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v21, (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)(a2 + 5));
  std::__copy[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v25, &v20, a3, &v30);
  v8 = v34;
  v9 = v35;
  if (v34 == v33)
  {
    v10 = 4;
    v8 = v33;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v10 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v10))();
LABEL_6:
  v11 = v32;
  if (v32 == v31)
  {
    v12 = 4;
    v11 = v31;
  }
  else
  {
    if (!v32)
      goto LABEL_11;
    v12 = 5;
  }
  (*(void (**)(void))(*v11 + 8 * v12))();
LABEL_11:
  v13 = v24;
  if (v24 == v23)
  {
    v14 = 4;
    v13 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  if (v22 == v21)
  {
    v15 = 4;
  }
  else
  {
    if (!v22)
      goto LABEL_21;
    v15 = 5;
    v7 = v22;
  }
  (*(void (**)(_QWORD *))(*v7 + 8 * v15))(v7);
LABEL_21:
  v16 = v29;
  if (v29 == v28)
  {
    v17 = 4;
    v16 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_26;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_26:
  if (v27 == v26)
  {
    v18 = 4;
    goto LABEL_30;
  }
  if (v27)
  {
    v18 = 5;
    v6 = v27;
LABEL_30:
    (*(void (**)(_QWORD *))(*v6 + 8 * v18))(v6);
  }
  return v9;
}

void sub_1ADD1AD78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(va1);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<long long>::__construct_at_end_with_size<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(_QWORD *result, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  _BYTE v14[24];
  _BYTE *v15;
  uint64_t v16;

  v3 = result;
  v16 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)result[2];
  if (a3)
  {
    v6 = &v4[a3];
    v7 = 8 * a3;
    while (1)
    {
      *v4 = quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator*(a2);
      quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a2, &v11);
      v8 = v15;
      if (v15 == v14)
      {
        v8 = v14;
        v9 = 4;
      }
      else
      {
        if (!v15)
          goto LABEL_8;
        v9 = 5;
      }
      (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_8:
      result = v13;
      if (v13 == v12)
      {
        result = v12;
        v10 = 4;
        goto LABEL_12;
      }
      if (v13)
      {
        v10 = 5;
LABEL_12:
        result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
      }
      ++v4;
      v7 -= 8;
      if (!v7)
      {
        v4 = v6;
        break;
      }
    }
  }
  v3[2] = v4;
  return result;
}

void sub_1ADD1AF24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2 + 8;
  _Unwind_Resume(a1);
}

_QWORD *std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(_QWORD *a1, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+=(a1, a2, &v6);
  v2 = v10;
  if (v10 == v9)
  {
    v3 = 4;
    v2 = v9;
  }
  else
  {
    if (!v10)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator+=@<X0>(_QWORD *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE v9[24];
  _BYTE *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  *a1 += a2;
  v5 = (uint64_t)(a1 + 1);
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v9, (uint64_t)(a1 + 1));
  v6 = v10;
  if (v10 == v9)
  {
    v7 = 4;
    v6 = v9;
    goto LABEL_5;
  }
  if (v10)
  {
    v7 = 5;
LABEL_5:
    (*(void (**)(_QWORD *))(*v6 + 8 * v7))(v6);
  }
  *a3 = *a1;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), v5);
  return std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)(a3 + 5), (uint64_t)(a1 + 5));
}

void sub_1ADD1B0C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v1 + 32);
  if (v4 == v2)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v2 = *(_QWORD **)(v1 + 32);
  }
  (*(void (**)(_QWORD *))(*v2 + 8 * v5))(v2);
LABEL_6:
  _Unwind_Resume(exception_object);
}

_QWORD *std::function<long long ()(std::string_view)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<long long ()(std::string_view)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::function<std::string_view ()(long long)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<std::string_view ()(long long)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

_QWORD *std::__function::__value_func<std::string_view ()(long long)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADD1B3A0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__function::__value_func<long long ()(std::string_view)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1ADD1B514(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::__uninitialized_allocator_copy[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _BYTE v39[24];
  _BYTE *v40;
  _BYTE v41[24];
  _BYTE *v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  _BYTE v46[24];
  _BYTE *v47;
  uint64_t v48;
  _BYTE v49[24];
  _BYTE *v50;
  _BYTE v51[24];
  _BYTE *v52;
  uint64_t v53;
  _BYTE v54[24];
  _BYTE *v55;
  _BYTE v56[24];
  _BYTE *v57;
  uint64_t v58;
  _QWORD v59[3];
  _QWORD *v60;
  _QWORD v61[3];
  _QWORD *v62;
  uint64_t v63;
  _BYTE v64[24];
  _BYTE *v65;
  _BYTE v66[24];
  _BYTE *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v53 = *a2;
  v8 = v54;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v54, (uint64_t)(a2 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v56, (uint64_t)(a2 + 5));
  v48 = *a3;
  v9 = v49;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v49, (uint64_t)(a3 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v51, (uint64_t)(a3 + 5));
  std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v53, &v48, &v58);
  v10 = v52;
  if (v52 == v51)
  {
    v11 = 4;
    v10 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  if (v50 == v49)
  {
    v12 = 4;
  }
  else
  {
    if (!v50)
      goto LABEL_11;
    v12 = 5;
    v9 = v50;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_11:
  v13 = v57;
  if (v57 == v56)
  {
    v14 = 4;
    v13 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_16;
    v14 = 5;
  }
  (*(void (**)(void))(*v13 + 8 * v14))();
LABEL_16:
  if (v55 == v54)
  {
    v15 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_21;
    v15 = 5;
    v8 = v55;
  }
  (*(void (**)(_QWORD *))(*v8 + 8 * v15))(v8);
LABEL_21:
  v16 = (uint64_t)v60;
  v43 = v58;
  v17 = v44;
  v18 = v59;
  if (!v60)
  {
LABEL_24:
    v45 = (_BYTE *)v16;
    goto LABEL_26;
  }
  if (v60 != v59)
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*v60 + 16))(v60);
    goto LABEL_24;
  }
  v45 = v44;
  (*(void (**)(_QWORD *, _BYTE *))(v59[0] + 24))(v59, v44);
LABEL_26:
  v19 = v46;
  v20 = v61;
  v21 = (uint64_t)v62;
  if (!v62)
  {
LABEL_29:
    v47 = (_BYTE *)v21;
    goto LABEL_31;
  }
  if (v62 != v61)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v62 + 16))(v62);
    goto LABEL_29;
  }
  v47 = v46;
  (*(void (**)(_QWORD *, _BYTE *))(v61[0] + 24))(v61, v46);
LABEL_31:
  v22 = (uint64_t)v65;
  v38 = v63;
  v23 = v39;
  if (!v65)
  {
LABEL_34:
    v40 = (_BYTE *)v22;
    goto LABEL_36;
  }
  if (v65 != v64)
  {
    v22 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v65 + 16))(v65);
    goto LABEL_34;
  }
  v40 = v39;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v65 + 24))(v65, v39);
LABEL_36:
  v24 = v41;
  v25 = (uint64_t)v67;
  if (!v67)
  {
LABEL_39:
    v42 = (_BYTE *)v25;
    goto LABEL_41;
  }
  if (v67 != v66)
  {
    v25 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v67 + 16))(v67);
    goto LABEL_39;
  }
  v42 = v41;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v67 + 24))(v67, v41);
LABEL_41:
  v26 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(a1, &v43, &v38, a4);
  if (v42 == v41)
  {
    v27 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_46;
    v27 = 5;
    v24 = v42;
  }
  (*(void (**)(_QWORD *))(*v24 + 8 * v27))(v24);
LABEL_46:
  if (v40 == v39)
  {
    v28 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_51;
    v28 = 5;
    v23 = v40;
  }
  (*(void (**)(_QWORD *))(*v23 + 8 * v28))(v23);
LABEL_51:
  if (v47 == v46)
  {
    v29 = 4;
  }
  else
  {
    if (!v47)
      goto LABEL_56;
    v29 = 5;
    v19 = v47;
  }
  (*(void (**)(_QWORD *))(*v19 + 8 * v29))(v19);
LABEL_56:
  if (v45 == v44)
  {
    v30 = 4;
  }
  else
  {
    if (!v45)
      goto LABEL_61;
    v30 = 5;
    v17 = v45;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v30))(v17);
LABEL_61:
  v31 = v67;
  if (v67 == v66)
  {
    v32 = 4;
    v31 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_66;
    v32 = 5;
  }
  (*(void (**)(void))(*v31 + 8 * v32))();
LABEL_66:
  v33 = v65;
  if (v65 == v64)
  {
    v34 = 4;
    v33 = v64;
  }
  else
  {
    if (!v65)
      goto LABEL_71;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_71:
  if (v62 == v61)
  {
    v35 = 4;
  }
  else
  {
    if (!v62)
      goto LABEL_76;
    v35 = 5;
    v20 = v62;
  }
  (*(void (**)(_QWORD *))(*v20 + 8 * v35))(v20);
LABEL_76:
  if (v60 == v59)
  {
    v36 = 4;
    goto LABEL_80;
  }
  if (v60)
  {
    v36 = 5;
    v18 = v60;
LABEL_80:
    (*(void (**)(_QWORD *))(*v18 + 8 * v36))(v18);
  }
  return v26;
}

void sub_1ADD1B994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v14;
  va_list va;

  va_start(va, a11);
  if (a7 == v11)
  {
    v14 = 4;
  }
  else
  {
    if (!a7)
      goto LABEL_6;
    v14 = 5;
    v11 = a7;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v14))(v11);
LABEL_6:
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(va);
  std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple((_QWORD *)(v12 - 232));
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE *v39;
  _BYTE v40[24];
  _BYTE *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)(a1 + 5);
  v32 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v35, v5);
  std::__unwrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>,0>(&v32, &v37);
  v22 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v23, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v25, (uint64_t)(a2 + 5));
  std::__unwrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>,0>(&v22, &v27);
  std::pair<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>::pair[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(a3, &v37, &v27);
  v6 = v31;
  if (v31 == v30)
  {
    v7 = 4;
    v6 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v29;
  if (v29 == v28)
  {
    v9 = 4;
    v8 = v28;
  }
  else
  {
    if (!v29)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v26;
  if (v26 == v25)
  {
    v11 = 4;
    v10 = v25;
  }
  else
  {
    if (!v26)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  v12 = v24;
  if (v24 == v23)
  {
    v13 = 4;
    v12 = v23;
  }
  else
  {
    if (!v24)
      goto LABEL_21;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_21:
  v14 = v41;
  if (v41 == v40)
  {
    v15 = 4;
    v14 = v40;
  }
  else
  {
    if (!v41)
      goto LABEL_26;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_26:
  v16 = v39;
  if (v39 == v38)
  {
    v17 = 4;
    v16 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_31;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_31:
  v18 = v36;
  if (v36 == v35)
  {
    v19 = 4;
    v18 = v35;
  }
  else
  {
    if (!v36)
      goto LABEL_36;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_36:
  result = v34;
  if (v34 == v33)
  {
    v21 = 4;
    result = v33;
  }
  else
  {
    if (!v34)
      return result;
    v21 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v21))();
}

void sub_1ADD1BD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;

  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a19);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a10);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((_QWORD *)(v28 - 144));
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a28);
  _Unwind_Resume(a1);
}

uint64_t *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<long long>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t *a4)
{
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE *v14;
  _BYTE v15[24];
  _BYTE *v16;
  uint64_t i;

  for (i = *MEMORY[0x1E0C80C00]; *a2 != *a3; ++a4)
  {
    *a4 = quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator*(a2);
    quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a2, &v12);
    v7 = v16;
    if (v16 == v15)
    {
      v7 = v15;
      v8 = 4;
    }
    else
    {
      if (!v16)
        goto LABEL_7;
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
LABEL_7:
    v9 = v14;
    if (v14 == v13)
    {
      v9 = v13;
      v10 = 4;
      goto LABEL_11;
    }
    if (v14)
    {
      v10 = 5;
LABEL_11:
      (*(void (**)(void))(*v9 + 8 * v10))();
    }
  }
  return a4;
}

uint64_t std::__unwrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>,0>@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];
  _BYTE *v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v9 = *a1;
  v4 = v10;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v10, (uint64_t)(a1 + 1));
  v5 = v12;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)(a1 + 5));
  *a2 = v9;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), (uint64_t)v10);
  result = std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a2 + 5), (uint64_t)v12);
  if (v13 == v12)
  {
    v7 = 4;
  }
  else
  {
    if (!v13)
      goto LABEL_6;
    v7 = 5;
    v5 = v13;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v5 + 8 * v7))(v5);
LABEL_6:
  if (v11 == v10)
  {
    v8 = 4;
  }
  else
  {
    if (!v11)
      return result;
    v8 = 5;
    v4 = v11;
  }
  return (*(uint64_t (**)(_QWORD *))(*v4 + 8 * v8))(v4);
}

void sub_1ADD1BF84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13)
{
  _QWORD *v13;
  uint64_t v15;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a13 == v13)
  {
    v15 = 4;
  }
  else
  {
    if (!a13)
      goto LABEL_8;
    v15 = 5;
    v13 = a13;
  }
  (*(void (**)(_QWORD *))(*v13 + 8 * v15))(v13);
LABEL_8:
  __clang_call_terminate(exception_object);
}

_QWORD *std::pair<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>::pair[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  *a1 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  a1[9] = *a3;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a1 + 10), (uint64_t)(a3 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a1 + 14), (uint64_t)(a3 + 5));
  return a1;
}

_QWORD *std::__copy[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t)(a1 + 5);
  v21 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v24, v7);
  v16 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a2 + 5));
  std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v21, &v16, a3, a4);
  v8 = v20;
  if (v20 == v19)
  {
    v9 = 4;
    v8 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = v25;
  if (v25 == v24)
  {
    v13 = 4;
    v12 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  result = v23;
  if (v23 == v22)
  {
    v15 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_1ADD1C1D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::__dispatch_copy_or_move[abi:ne180100]<std::_ClassicAlgPolicy,std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _BYTE *v18;
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;
  _BYTE v22[24];
  _BYTE *v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v7 = (uint64_t)(a1 + 5);
  v21 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v22, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v24, v7);
  v16 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v19, (uint64_t)(a2 + 5));
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *,0>(&v21, &v16, a3, a4);
  v8 = v20;
  if (v20 == v19)
  {
    v9 = 4;
    v8 = v19;
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_6:
  v10 = v18;
  if (v18 == v17)
  {
    v11 = 4;
    v10 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_11;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_11:
  v12 = v25;
  if (v25 == v24)
  {
    v13 = 4;
    v12 = v24;
  }
  else
  {
    if (!v25)
      goto LABEL_16;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_16:
  result = v23;
  if (v23 == v22)
  {
    v15 = 4;
    result = v22;
  }
  else
  {
    if (!v23)
      return result;
    v15 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v15))();
}

void sub_1ADD1C380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator((uint64_t *)va1);
  _Unwind_Resume(a1);
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *,0>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *result;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  _BYTE *v52;
  _BYTE v53[24];
  _BYTE *v54;
  uint64_t v55;
  _BYTE v56[24];
  _BYTE *v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;
  _BYTE v66[24];
  _BYTE *v67;
  _BYTE v68[24];
  _BYTE *v69;
  uint64_t v70;
  _BYTE v71[24];
  _BYTE *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;
  _BYTE v76[24];
  _BYTE *v77;
  _BYTE v78[24];
  _BYTE *v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[24];
  _BYTE *v83;
  _BYTE v84[24];
  _BYTE *v85;
  uint64_t v86;
  _BYTE v87[24];
  _BYTE *v88;
  _BYTE v89[24];
  _BYTE *v90;
  uint64_t v91;
  _BYTE v92[24];
  _BYTE *v93;
  _BYTE v94[24];
  _BYTE *v95;
  uint64_t v96;
  _BYTE v97[24];
  _BYTE *v98;
  _BYTE v99[24];
  _BYTE *v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t)(a1 + 1);
  v86 = *a1;
  v9 = v87;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v87, (uint64_t)(a1 + 1));
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v89, (uint64_t)(a1 + 5));
  v81 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v82, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v84, (uint64_t)(a2 + 5));
  std::__unwrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v86, &v81, &v91);
  v10 = v85;
  if (v85 == v84)
  {
    v11 = 4;
    v10 = v84;
  }
  else
  {
    if (!v85)
      goto LABEL_6;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_6:
  v12 = v83;
  if (v83 == v82)
  {
    v13 = 4;
    v12 = v82;
  }
  else
  {
    if (!v83)
      goto LABEL_11;
    v13 = 5;
  }
  (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_11:
  v14 = v90;
  if (v90 == v89)
  {
    v15 = 4;
    v14 = v89;
  }
  else
  {
    if (!v90)
      goto LABEL_16;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_16:
  if (v88 == v87)
  {
    v16 = 4;
  }
  else
  {
    if (!v88)
      goto LABEL_21;
    v16 = 5;
    v9 = v88;
  }
  (*(void (**)(_QWORD *))(*v9 + 8 * v16))(v9);
LABEL_21:
  v70 = v91;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v71, (uint64_t)v92);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v73, (uint64_t)v94);
  v65 = v96;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v66, (uint64_t)v97);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v68, (uint64_t)v99);
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>(&v70, &v65, a3, &v75);
  v17 = v69;
  if (v69 == v68)
  {
    v18 = 4;
    v17 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_26;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_26:
  v19 = v67;
  if (v67 == v66)
  {
    v20 = 4;
    v19 = v66;
  }
  else
  {
    if (!v67)
      goto LABEL_31;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_31:
  v21 = v74;
  if (v74 == v73)
  {
    v22 = 4;
    v21 = v73;
  }
  else
  {
    if (!v74)
      goto LABEL_36;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_36:
  v23 = v72;
  if (v72 == v71)
  {
    v24 = 4;
    v23 = v71;
  }
  else
  {
    if (!v72)
      goto LABEL_41;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_41:
  v55 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v56, v8);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v58, (uint64_t)(a1 + 5));
  v50 = v75;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v51, (uint64_t)v76);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v53, (uint64_t)v78);
  std::__rewrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>(&v55, &v50, &v60);
  v25 = v80;
  *a4 = v60;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)v61);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a4 + 5), (uint64_t)v63);
  a4[9] = v25;
  v26 = v64;
  if (v64 == v63)
  {
    v27 = 4;
    v26 = v63;
  }
  else
  {
    if (!v64)
      goto LABEL_46;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_46:
  v28 = v62;
  if (v62 == v61)
  {
    v29 = 4;
    v28 = v61;
  }
  else
  {
    if (!v62)
      goto LABEL_51;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
LABEL_51:
  v30 = v54;
  if (v54 == v53)
  {
    v31 = 4;
    v30 = v53;
  }
  else
  {
    if (!v54)
      goto LABEL_56;
    v31 = 5;
  }
  (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_56:
  v32 = v52;
  if (v52 == v51)
  {
    v33 = 4;
    v32 = v51;
  }
  else
  {
    if (!v52)
      goto LABEL_61;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_61:
  v34 = v59;
  if (v59 == v58)
  {
    v35 = 4;
    v34 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_66;
    v35 = 5;
  }
  (*(void (**)(void))(*v34 + 8 * v35))();
LABEL_66:
  v36 = v57;
  if (v57 == v56)
  {
    v37 = 4;
    v36 = v56;
  }
  else
  {
    if (!v57)
      goto LABEL_71;
    v37 = 5;
  }
  (*(void (**)(void))(*v36 + 8 * v37))();
LABEL_71:
  v38 = v79;
  if (v79 == v78)
  {
    v39 = 4;
    v38 = v78;
  }
  else
  {
    if (!v79)
      goto LABEL_76;
    v39 = 5;
  }
  (*(void (**)(void))(*v38 + 8 * v39))();
LABEL_76:
  v40 = v77;
  if (v77 == v76)
  {
    v41 = 4;
    v40 = v76;
  }
  else
  {
    if (!v77)
      goto LABEL_81;
    v41 = 5;
  }
  (*(void (**)(void))(*v40 + 8 * v41))();
LABEL_81:
  v42 = v100;
  if (v100 == v99)
  {
    v43 = 4;
    v42 = v99;
  }
  else
  {
    if (!v100)
      goto LABEL_86;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_86:
  v44 = v98;
  if (v98 == v97)
  {
    v45 = 4;
    v44 = v97;
  }
  else
  {
    if (!v98)
      goto LABEL_91;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_91:
  v46 = v95;
  if (v95 == v94)
  {
    v47 = 4;
    v46 = v94;
  }
  else
  {
    if (!v95)
      goto LABEL_96;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_96:
  result = v93;
  if (v93 == v92)
  {
    v49 = 4;
    result = v92;
  }
  else
  {
    if (!v93)
      return result;
    v49 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v49))();
}

void sub_1ADD1C93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  uint64_t v59;

  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a14);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a23);
  quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::~Iterator(&a59);
  std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>::~tuple((_QWORD *)(v59 - 240));
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,long long *>@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t i;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  for (i = *a1; *a1 != *a2; i = *a1)
  {
    *a3 = quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator*(a1);
    quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator++(a1, &v14);
    v9 = v18;
    if (v18 == v17)
    {
      v9 = v17;
      v10 = 4;
    }
    else
    {
      if (!v18)
        goto LABEL_7;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_7:
    v11 = v16;
    if (v16 == v15)
    {
      v11 = v15;
      v12 = 4;
      goto LABEL_11;
    }
    if (v16)
    {
      v12 = 5;
LABEL_11:
      (*(void (**)(void))(*v11 + 8 * v12))();
    }
    ++a3;
  }
  *a4 = i;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a4 + 1), (uint64_t)(a1 + 1));
  result = std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a4 + 5), (uint64_t)(a1 + 5));
  a4[9] = (uint64_t)a3;
  return result;
}

_QWORD *std::__rewrap_range[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)(a1 + 5);
  v19 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v22, v5);
  v14 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a2 + 5));
  std::__rewrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>>(&v19, &v14, a3);
  v6 = v18;
  if (v18 == v17)
  {
    v7 = 4;
    v6 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v23;
  if (v23 == v22)
  {
    v11 = 4;
    v10 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  result = v21;
  if (v21 == v20)
  {
    v13 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

_QWORD *std::__rewrap_iter[abi:ne180100]<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,std::__unwrap_iter_impl<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,false>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  _BYTE v22[24];
  _BYTE *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = (uint64_t)(a1 + 5);
  v19 = *a1;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v20, (uint64_t)(a1 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v22, v5);
  v14 = *a2;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)v15, (uint64_t)(a2 + 1));
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)v17, (uint64_t)(a2 + 5));
  *a3 = v14;
  std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a3 + 1), (uint64_t)v15);
  std::__function::__value_func<long long ()(std::string_view)>::__value_func[abi:ne180100]((uint64_t)(a3 + 5), (uint64_t)v17);
  v6 = v18;
  if (v18 == v17)
  {
    v7 = 4;
    v6 = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  v8 = v16;
  if (v16 == v15)
  {
    v9 = 4;
    v8 = v15;
  }
  else
  {
    if (!v16)
      goto LABEL_11;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_11:
  v10 = v23;
  if (v23 == v22)
  {
    v11 = 4;
    v10 = v22;
  }
  else
  {
    if (!v23)
      goto LABEL_16;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_16:
  result = v21;
  if (v21 == v20)
  {
    v13 = 4;
    result = v20;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v13))();
}

uint64_t quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>::operator-(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v7 = *a2;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a2 + 1));
  v3 = *a1;
  v4 = v9;
  if (v9 == v8)
  {
    v5 = 4;
    v4 = v8;
    goto LABEL_5;
  }
  if (v9)
  {
    v5 = 5;
LABEL_5:
    (*(void (**)(void))(*v4 + 8 * v5))();
  }
  return v3 - v7;
}

uint64_t std::__optional_destruct_base<std::tuple<quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,quasar::tennessee::internal::Iterator<std::string_view,long long,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>,BOOL>,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  if (!*(_BYTE *)(a1 + 152))
    return a1;
  v2 = *(_QWORD **)(a1 + 136);
  if (v2 == (_QWORD *)(a1 + 112))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_7;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_7:
  v4 = *(_QWORD **)(a1 + 104);
  if (v4 == (_QWORD *)(a1 + 80))
  {
    v5 = 4;
    v4 = (_QWORD *)(a1 + 80);
  }
  else
  {
    if (!v4)
      goto LABEL_12;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_12:
  v6 = *(_QWORD **)(a1 + 64);
  if (v6 == (_QWORD *)(a1 + 40))
  {
    v7 = 4;
    v6 = (_QWORD *)(a1 + 40);
    goto LABEL_16;
  }
  if (v6)
  {
    v7 = 5;
LABEL_16:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  v8 = *(_QWORD **)(a1 + 32);
  if (v8 == (_QWORD *)(a1 + 8))
  {
    v9 = 4;
    v8 = (_QWORD *)(a1 + 8);
    goto LABEL_21;
  }
  if (v8)
  {
    v9 = 5;
LABEL_21:
    (*(void (**)(void))(*v8 + 8 * v9))();
  }
  return a1;
}

uint64_t std::__lower_bound[abi:ne180100]<std::_ClassicAlgPolicy,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>,std::string_view,std::__identity,std::function<BOOL ()(std::string_view const&,std::string_view const&)>>@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;
  _BYTE v36[24];
  _BYTE *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v10 = a1 + 1;
  v35 = *a1;
  v11 = v36;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v36, (uint64_t)(a1 + 1));
  v32 = *a2;
  v12 = v33;
  std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v33, (uint64_t)(a2 + 1));
  v13 = std::_IterOps<std::_ClassicAlgPolicy>::distance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v35, &v32);
  if (v34 == v33)
  {
    v14 = 4;
  }
  else
  {
    if (!v34)
      goto LABEL_6;
    v14 = 5;
    v12 = v34;
  }
  (*(void (**)(_QWORD *))(*v12 + 8 * v14))(v12);
LABEL_6:
  if (v37 == v36)
  {
    v15 = 4;
  }
  else
  {
    if (!v37)
      goto LABEL_11;
    v15 = 5;
    v11 = v37;
  }
  (*(void (**)(_QWORD *))(*v11 + 8 * v15))(v11);
LABEL_11:
  if (v13)
  {
    while (1)
    {
      v29 = *a1;
      std::__function::__value_func<float ()(float,float)>::__value_func[abi:ne180100]((uint64_t)v30, (uint64_t)v10);
      v16 = v13 >> 1;
      std::__advance[abi:ne180100]<quasar::tennessee::internal::Iterator<long long,std::string_view,boost::iterators::counting_iterator<long long,boost::use_default,boost::use_default>>>(&v29, v13 >> 1);
      v25 = v29;
      if (!v31
        || (v26 = (*(uint64_t (**)(_QWORD *, uint64_t *))(*v31 + 48))(v31, &v25),
            v27[0] = v17,
            (v18 = *(_QWORD *)(a4 + 24)) == 0))
      {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v18 + 48))(v18, &v26, a3))
        break;
LABEL_26:
      v22 = v31;
      if (v31 == v30)
      {
        v22 = v30;
        v23 = 4;
        goto LABEL_30;
      }
      if (v31)
      {
        v23 = 5;
LABEL_30:
        (*(void (**)(_QWORD *))(*v22 + 8 * v23))(v22);
      }
      v13 = v16;
      if (!v16)
        goto LABEL_32;
    }
    v19 = (uint64_t)v31;
    v26 = ++v29;
    if (v31)
    {
      if (v31 == v30)
      {
        v28 = v27;
        (*(void (**)(_QWORD *, _QWORD *))(v30[0] + 24))(v30, v27);
LABEL_20:
        *a1 = v26;
        std::__function::__value_func<void ()(void *)>::operator=[abi:ne180100](v10, (uint64_t)v27);
        v20 = v28;
        if (v28 == v27)
        {
          v20 = v27;
          v21 = 4;
        }
        else
        {
          if (!v28)
          {
LABEL_25:
            v16 = v13 + ~v16;
            goto LABEL_26;
          }
          v21 = 5;
        }
        (*(void (**)(_QWORD *))(*v20 + 8 * v21))(v20);
        goto LABEL_25;
      }
      v19 = (*(uint64_t (**)(_QWORD *))(*v31 + 16))(v31);
    }
    v28 = (_QWORD *)v19;
    goto LABEL_20;
  }
LABEL_32:
  *a5 = *a1;
  return std::__function::__value_func<std::string_view ()(long long)>::__value_func[abi:ne180100]((uint64_t)(a5 + 1), (uint64_t)v10);
}

void sub_1ADD1D234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,_QWORD *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,_QWORD *a29)
{
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v32;
  uint64_t v33;

  if (a24 == v30)
  {
    v32 = 4;
  }
  else
  {
    if (!a24)
      goto LABEL_6;
    v32 = 5;
    v30 = a24;
  }
  (*(void (**)(_QWORD *))(*v30 + 8 * v32))(v30);
LABEL_6:
  if (a29 == v29)
  {
    v33 = 4;
  }
  else
  {
    if (!a29)
      goto LABEL_11;
    v33 = 5;
    v29 = a29;
  }
  (*(void (**)(_QWORD *))(*v29 + 8 * v33))(v29);
LABEL_11:
  _Unwind_Resume(exception_object);
}

void quasar::EndPointer::createEndPointer(quasar::EndPointer *this@<X0>, const quasar::EndPointDecoderConfig *a2@<X1>, const kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig *a3@<X2>, const quasar::EndPointModelConfig *a4@<X3>, char a5@<W4>, uint64_t *a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a6 = 0;
  v10 = *((unsigned __int8 *)a3 + 23);
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a3 + 1);
  if (!v10)
  {
    v11 = *((unsigned __int8 *)this + 63);
    if ((v11 & 0x80u) != 0)
      v11 = *((_QWORD *)this + 6);
    if (!v11 || (a4 & 1) == 0)
      goto LABEL_11;
LABEL_10:
    v12 = operator new();
    quasar::NnetEndPointer::NnetEndPointer(v12, (uint64_t)this, (uint64_t)a3, a5);
    *a6 = v12;
    return;
  }
  if ((_DWORD)a4)
    goto LABEL_10;
LABEL_11:
  std::make_unique[abi:ne180100]<quasar::BasicEndPointer,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,quasar::EndPointDecoderConfig const&>(a2, this, &v13);
  *a6 = v13;
}

void sub_1ADD1D3A4(_Unwind_Exception *exception_object)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(exception_object);
}

void std::make_unique[abi:ne180100]<quasar::BasicEndPointer,kaldi::quasar::OnlineLatticeBiglmFasterDecoderConfig const&,quasar::EndPointDecoderConfig const&>(_OWORD *a1@<X0>, const quasar::EndPointDecoderConfig *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _BYTE v10[16];
  void *v11;
  char v12;
  void *v13;
  char v14;
  void *__p;
  char v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void **v19;

  v6 = operator new();
  quasar::EndPointDecoderConfig::EndPointDecoderConfig((quasar::EndPointDecoderConfig *)v10, a2);
  quasar::BasicEndPointer::BasicEndPointer(v6, a1, (const quasar::EndPointDecoderConfig *)v10);
  *a3 = v6;
  v7 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v19 = (void **)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v16 < 0)
    operator delete(__p);
  if (v14 < 0)
    operator delete(v13);
  if (v12 < 0)
    operator delete(v11);
}

void sub_1ADD1D4C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig((void **)va);
  MEMORY[0x1AF44D190](v2, 0x10B3C407EB90683);
  _Unwind_Resume(a1);
}

void quasar::EndPointDecoderConfig::init(quasar::EndPointDecoderConfig *this)
{
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  _QWORD *v6;
  int v7;
  char *v8;
  uint64_t v9;
  void *__p[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  if (*((char *)this + 63) < 0)
  {
    if (!*((_QWORD *)this + 6))
      return;
  }
  else if (!*((_BYTE *)this + 63))
  {
    return;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN5kaldi5nnet14NnetENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
  v2 = (uint64_t *)((char *)this + 128);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 128, (__int128 *)__p);
  v3 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v4 = (unint64_t *)((char *)__p[1] + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (*((_BYTE *)this + 88))
  {
    fst::FstReadOptions::FstReadOptions(__p, (char *)this + 40, 0, 0, 0);
    LODWORD(v13) = 2;
    kaldi::nnet1::Nnet::ReadMapped(*v2, (uint64_t)__p);
    if (SBYTE7(v11) < 0)
      operator delete(__p[0]);
  }
  else
  {
    kaldi::nnet1::Nnet::Read(*v2, (uint64_t)this + 40);
  }
  if (quasar::gLogLevel >= 4)
  {
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Read endpoint model file =", 26);
    v7 = *((char *)this + 63);
    if (v7 >= 0)
      v8 = (char *)this + 40;
    else
      v8 = (char *)*((_QWORD *)this + 5);
    if (v7 >= 0)
      v9 = *((unsigned __int8 *)this + 63);
    else
      v9 = *((_QWORD *)this + 6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v8, v9);
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
  }
  if (*((char *)this + 87) < 0)
  {
    if (*((_QWORD *)this + 9))
      goto LABEL_24;
LABEL_27:
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "endpoint-feature-list cannot be empty");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  if (!*((_BYTE *)this + 87))
    goto LABEL_27;
LABEL_24:
  kaldi::SplitStringToVector((const std::string *)((char *)this + 64), ",", 0, (uint64_t)this + 104);
}

void sub_1ADD1D6F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::EndPointer::featuresToJsonString(int a1, quasar *a2, quasar *a3, quasar *a4, uint64_t *a5, unsigned int **a6, quasar *a7, quasar *a8, float a9, float a10, float a11, float a12, float a13, quasar *a14)
{
  quasar *v26;
  quasar *v27;
  unsigned int *v28;
  unsigned int *v29;
  quasar *v30;
  std::vector<std::string>::pointer end;
  __int128 v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  __int128 v38;
  std::string *v39;
  quasar *v40;
  quasar *v41;
  quasar *v42;
  std::string::size_type v43;
  std::string v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void *v50;
  char v51;
  uint64_t v52;
  uint64_t v53[2];
  void *v54[2];
  char v55;
  std::vector<std::string> __p;
  _BYTE v57[64];
  std::__split_buffer<std::string> __v;

  quasar::PTree::PTree((quasar::PTree *)v57);
  std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_NUM_OF_WORDS_STR[0]);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(a2);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a2);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_NUM_TRAILING_SIL_STR[0]);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(a3);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a3);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::string::basic_string[abi:ne180100]<0>(&__v, "num-frames");
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(a4);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a4);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v26 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_EOS_LIKELIHOOD_STR[0]);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(v26, a9);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], a9);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v27 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(v27, a10);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], a10);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  if (*a5 != a5[1])
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "sequence-of-words");
    v54[0] = " ";
    v54[1] = (void *)1;
    quasar::join<std::vector<std::string>>(a5, (uint64_t *)v54);
    quasar::PTree::PTree(&v44, &__p);
    quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
    quasar::PTree::~PTree((quasar::PTree *)&v44);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0)
      operator delete(__p.__begin_);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
  v28 = *a6;
  v29 = a6[1];
  if (*a6 != v29)
  {
    v30 = a7;
    memset(&__p, 0, sizeof(__p));
    do
    {
      std::to_string(&v44, *v28);
      end = __p.__end_;
      if (__p.__end_ >= __p.__end_cap_.__value_)
      {
        v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
        v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v34)
          v34 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555)
          v35 = 0xAAAAAAAAAAAAAAALL;
        else
          v35 = v34;
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
        if (v35)
          v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&__p.__end_cap_, v35);
        else
          v36 = 0;
        v37 = v36 + v33;
        __v.__first_ = v36;
        __v.__begin_ = v37;
        __v.__end_cap_.__value_ = &v36[v35];
        v38 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        v37->__r_.__value_.__r.__words[2] = v44.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v38;
        memset(&v44, 0, sizeof(v44));
        __v.__end_ = v37 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
        v39 = __p.__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        __p.__end_ = v39;
        if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v44.__r_.__value_.__l.__data_);
      }
      else
      {
        v32 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
        __p.__end_->__r_.__value_.__r.__words[2] = v44.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v32;
        __p.__end_ = end + 1;
      }
      ++v28;
    }
    while (v28 != v29);
    std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_PAUSE_COUNTS_STR[0]);
    v53[0] = (uint64_t)" ";
    v53[1] = 1;
    quasar::join<std::vector<std::string>>((uint64_t *)&__p, v53);
    quasar::PTree::PTree(&v44, v54);
    a7 = v30;
    quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
    quasar::PTree::~PTree((quasar::PTree *)&v44);
    if (v55 < 0)
      operator delete(v54[0]);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v44);
  }
  std::string::basic_string[abi:ne180100]<0>(&__v, "num-input-label-words");
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(a7);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a7);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::string::basic_string[abi:ne180100]<0>(&__v, "stream-conf");
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(a8);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a8);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v40 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, quasar::EP_SILENCE_POSTERIOR_STR[0]);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(v40, a11);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], a11);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType((quasar *)a14);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], (int)a14);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v41 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(v41, a12);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], a12);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  v42 = (quasar *)std::string::basic_string[abi:ne180100]<0>(&__v, (char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR);
  LODWORD(v44.__r_.__value_.__l.__data_) = quasar::getType(v42, a13);
  std::to_string((std::string *)&v44.__r_.__value_.__r.__words[1], a13);
  v46 = 0;
  v47 = 0;
  v48 = 0;
  v49 = 1;
  quasar::PTree::putChild((uint64_t)v57, (uint64_t)&__v, (uint64_t)&v44, 1);
  quasar::PTree::~PTree((quasar::PTree *)&v44);
  if (SHIBYTE(__v.__end_) < 0)
    operator delete(__v.__first_);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v44);
  quasar::PTree::writeJson((quasar::PTreeHelper *)v57, &v44.__r_.__value_.__r.__words[2], 1);
  std::stringbuf::str();
  v44.__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F50];
  v43 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(std::string::size_type *)((char *)v44.__r_.__value_.__r.__words + *(_QWORD *)(v44.__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v44.__r_.__value_.__r.__words[2] = v43;
  v45 = MEMORY[0x1E0DE4FB8] + 16;
  if (v51 < 0)
    operator delete(v50);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1AF44D094](&v52);
  quasar::PTree::~PTree((quasar::PTree *)v57);
}

void sub_1ADD1DF1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;
  void *v46;
  void *v47;
  _QWORD *v48;
  const char *v49;
  size_t v50;

  quasar::PTree::~PTree((quasar::PTree *)&a11);
  if (a37 < 0)
    operator delete(__p);
  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));
  *(_QWORD *)&a11 = &a38;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  quasar::PTree::~PTree((quasar::PTree *)(v43 - 240));
  if (a2 == 1)
  {
    v46 = __cxa_begin_catch(a1);
    if (quasar::gLogLevel >= 2)
    {
      v47 = v46;
      a26 = 0u;
      a27 = 0u;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a11);
      v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a11, (uint64_t)"Writing to json string failed. ", 31);
      v49 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v47 + 16))(v47);
      v50 = strlen(v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)v49, v50);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a11);
    }
    __cxa_end_catch();
    std::string::basic_string[abi:ne180100]<0>(a10, "");
    JUMPOUT(0x1ADD1DEE4);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::BasicEndPointer::BasicEndPointer(uint64_t a1, _OWORD *a2, const quasar::EndPointDecoderConfig *a3)
{
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  int *v12;
  int *v13;

  *(_QWORD *)a1 = &off_1E5D35880;
  v5 = *a2;
  *(_OWORD *)(a1 + 24) = a2[1];
  *(_OWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  v8 = a2[4];
  *(_OWORD *)(a1 + 88) = a2[5];
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  v9 = a2[6];
  v10 = a2[7];
  v11 = a2[8];
  *(_OWORD *)(a1 + 152) = a2[9];
  *(_OWORD *)(a1 + 136) = v11;
  *(_OWORD *)(a1 + 120) = v10;
  *(_OWORD *)(a1 + 104) = v9;
  v12 = (int *)(a2 + 7);
  quasar::EndPointDecoderConfig::EndPointDecoderConfig((quasar::EndPointDecoderConfig *)(a1 + 168), a3);
  *(_QWORD *)(a1 + 312) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  if (*((_BYTE *)a2 + 144))
    v13 = (int *)a2 + 39;
  else
    v13 = v12;
  quasar::MovingAverage::init((quasar::MovingAverage *)(a1 + 312), *v13);
  return a1;
}

void sub_1ADD1E288(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;

  std::deque<int>::~deque[abi:ne180100](v2);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v1);
  _Unwind_Resume(a1);
}

BOOL quasar::BasicEndPointer::evalEndPoint(uint64_t a1, double a2, float a3, float a4, uint64_t a5, int a6, int a7, int a8)
{
  _BOOL8 v13;
  int v14;
  int v15;
  int v16;

  if (a3 >= 0.0 && *(_BYTE *)(a1 + 176) != 0)
    return *(float *)(a1 + 172) < a3;
  quasar::MovingAverage::add((quasar::MovingAverage *)(a1 + 312), a4);
  if (a6 <= 0)
  {
    v13 = 0;
    if (a7 < 1 || *(_DWORD *)(a1 + 128) > a8)
      return v13;
  }
  else if (a7 < 1)
  {
    return 0;
  }
  if (*(_BYTE *)(a1 + 152))
  {
    v14 = (int)(float)(expf((float)(*(float *)(a1 + 156) * (float)(*(_DWORD *)(a1 + 124) - a8)) / (float)*(int *)(a1 + 124))
                     * (float)*(int *)(a1 + 120));
    v15 = *(_DWORD *)(a1 + 164);
    if (v15 >= v14)
    {
      if (*(_DWORD *)(a1 + 160) <= v14)
        v15 = v14;
      else
        v15 = *(_DWORD *)(a1 + 160);
    }
    quasar::MovingAverage::resize(a1 + 312, v15);
  }
  else
  {
    v15 = *(_DWORD *)(a1 + 120);
    v16 = *(_DWORD *)(a1 + 124);
    if (v16 <= a8)
      v15 = v15 * v16 / a8;
  }
  v13 = v15 <= a7;
  if (*(_BYTE *)(a1 + 144)
    && quasar::MovingAverage::getAverage((quasar::MovingAverage *)(a1 + 312)) < *(float *)(a1 + 148))
  {
    return 0;
  }
  return v13;
}

uint64_t quasar::BasicEndPointer::info(quasar::BasicEndPointer *this)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  _QWORD v6[11];
  char v7;
  uint64_t v8;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"BasicEndPointer inter-utt-sil=", 30);
  v1 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v1, (uint64_t)", max-utt-length=", 17);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)", max-utt-sil=", 14);
  std::ostream::operator<<();
  std::stringbuf::str();
  v5[0] = *MEMORY[0x1E0DE4F50];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v5 + *(_QWORD *)(v5[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v6[0] = v3;
  v6[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v7 < 0)
    operator delete((void *)v6[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v8);
}

void sub_1ADD1E4D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::BasicEndPointer::reportEndPoint(quasar::BasicEndPointer *this)
{
  return 0;
}

uint64_t quasar::BasicEndPointer::status(quasar::BasicEndPointer *this)
{
  return 100;
}

uint64_t quasar::BasicEndPointer::pausesAsBool(quasar::BasicEndPointer *this)
{
  return 0;
}

void quasar::NnetEndPointer::initFeatureSeq(quasar::NnetEndPointer *this)
{
  uint64_t v1;
  unint64_t v3;
  int **v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t *v9;
  size_t v10;
  char *v11;
  size_t v12;
  uint64_t *v13;
  char *v14;
  size_t v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  unint64_t v19;
  int *v20;
  int v21;
  int *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v34;
  char *v35;
  size_t v36;
  unint64_t v37;
  uint64_t *v38;
  char *v39;
  size_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  BOOL v47;
  char *v49;
  size_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  _DWORD *v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  int v67;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v78;
  const void *v79;
  size_t v80;
  unint64_t v81;
  uint64_t *v82;
  const void *v83;
  size_t v84;
  unint64_t v85;
  uint64_t *v86;
  unint64_t v87;
  int v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  quasar::NnetEndPointer *v102;
  char *v103;
  std::string v104;
  _OWORD v105[18];

  v1 = *((_QWORD *)this + 19);
  if (*((_QWORD *)this + 20) != v1)
  {
    v3 = 0;
    v4 = (int **)((char *)this + 192);
    v103 = (char *)this + 208;
    do
    {
      v5 = (_QWORD *)(v1 + 24 * v3);
      v6 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
      v7 = v6;
      v8 = *((unsigned __int8 *)v5 + 23);
      if ((v8 & 0x80) != 0)
      {
        v10 = v5[1];
        if (v6 != v10)
        {
          v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
          v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
          goto LABEL_18;
        }
        if (v6 == -1)
LABEL_266:
          std::string::__throw_out_of_range[abi:ne180100]();
        v9 = (uint64_t *)*v5;
      }
      else
      {
        if (v6 != v8)
        {
          v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
          v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
LABEL_14:
          if (v12 == v8 && !memcmp(v5, v11, v8))
            goto LABEL_26;
LABEL_22:
          v13 = v5;
          if ((_DWORD)v8 != 10)
          {
            v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
            v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
LABEL_52:
            v10 = v8;
            v34 = v5;
            if (v15 != v8)
            {
              v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
              v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
LABEL_63:
              v10 = v8;
              v38 = v5;
              if (v36 != v8)
              {
                v39 = quasar::EP_PAUSE_COUNTS_STR[0];
                v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
LABEL_74:
                if (v40 == v8 && !memcmp(v5, v39, v8))
                  goto LABEL_103;
LABEL_93:
                v46 = v5;
                if ((_DWORD)v8 != 11)
                {
                  if ((_DWORD)v8 == 21)
                  {
                    v47 = *v5 == 0x75706E692D6D756ELL && v5[1] == 0x2D6C6562616C2D74;
                    if (v47 && *(_QWORD *)((char *)v5 + 13) == 0x7364726F772D6C65)
                      goto LABEL_161;
                  }
LABEL_102:
                  v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
                  v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
                  goto LABEL_183;
                }
                goto LABEL_178;
              }
              goto LABEL_72;
            }
            goto LABEL_61;
          }
          goto LABEL_47;
        }
        v9 = v5;
        if (v7 == -1)
          goto LABEL_266;
      }
      if (!memcmp(v9, quasar::EP_NUM_OF_WORDS_STR[0], v7))
      {
        v17 = (_DWORD *)*((_QWORD *)this + 25);
        v16 = *((_QWORD *)this + 26);
        if ((unint64_t)v17 >= v16)
        {
          v22 = *v4;
          v23 = v17 - *v4;
          v24 = v23 + 1;
          if ((unint64_t)(v23 + 1) >> 62)
            goto LABEL_267;
          v25 = v16 - (_QWORD)v22;
          if (v25 >> 1 > v24)
            v24 = v25 >> 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v24;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v17 = (_DWORD *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v23];
          *(_DWORD *)v58 = 0;
          v59 = v58 + 4;
          while (v17 != v22)
          {
            v60 = *--v17;
            *((_DWORD *)v58 - 1) = v60;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        *v17 = 0;
        v18 = v17 + 1;
        goto LABEL_210;
      }
      v11 = quasar::EP_NUM_TRAILING_SIL_STR[0];
      v12 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
      if ((v8 & 0x80) == 0)
        goto LABEL_14;
      v10 = v5[1];
LABEL_18:
      if (v12 == v10)
      {
        if (v10 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        if (!memcmp((const void *)*v5, v11, v10))
        {
LABEL_26:
          v20 = (int *)*((_QWORD *)this + 25);
          v19 = *((_QWORD *)this + 26);
          if ((unint64_t)v20 < v19)
          {
            v21 = 1;
            goto LABEL_209;
          }
          v22 = *v4;
          v28 = v20 - *v4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 62)
            goto LABEL_267;
          v30 = v19 - (_QWORD)v22;
          if (v30 >> 1 > v29)
            v29 = v30 >> 1;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v29;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v28];
          *(_DWORD *)v58 = 1;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v64 = *--v20;
            *((_DWORD *)v58 - 1) = v64;
            v58 -= 4;
          }
LABEL_261:
          *((_QWORD *)this + 24) = v58;
          *((_QWORD *)this + 25) = v59;
          *((_QWORD *)this + 26) = &v27[4 * v26];
          if (v22)
            operator delete(v22);
LABEL_263:
          *((_QWORD *)this + 25) = v59;
          goto LABEL_264;
        }
        if ((v8 & 0x80) == 0)
          goto LABEL_22;
        v10 = v5[1];
      }
      if (v10 != 10)
      {
        v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
        v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
        goto LABEL_58;
      }
      v13 = (uint64_t *)*v5;
LABEL_47:
      v31 = *v13;
      v32 = *((unsigned __int16 *)v13 + 4);
      if (v31 == 0x6D6172662D6D756ELL && v32 == 29541)
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v37 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v37)
        {
          v22 = *v4;
          v43 = v20 - *v4;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            goto LABEL_267;
          v45 = v37 - (_QWORD)v22;
          if (v45 >> 1 > v44)
            v44 = v45 >> 1;
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v44;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v43];
          *(_DWORD *)v58 = 2;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v65 = *--v20;
            *((_DWORD *)v58 - 1) = v65;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 2;
        goto LABEL_209;
      }
      v14 = quasar::EP_EOS_LIKELIHOOD_STR[0];
      v15 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
      if ((v8 & 0x80) == 0)
        goto LABEL_52;
      v10 = v5[1];
LABEL_58:
      if (v15 != v10)
      {
        v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
        v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
        goto LABEL_69;
      }
      if (v10 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v34 = (uint64_t *)*v5;
LABEL_61:
      if (!memcmp(v34, v14, v10))
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v41 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v41)
        {
          v22 = *v4;
          v52 = v20 - *v4;
          v53 = v52 + 1;
          if ((unint64_t)(v52 + 1) >> 62)
            goto LABEL_267;
          v54 = v41 - (_QWORD)v22;
          if (v54 >> 1 > v53)
            v53 = v54 >> 1;
          if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v53;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v52];
          *(_DWORD *)v58 = 3;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v66 = *--v20;
            *((_DWORD *)v58 - 1) = v66;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 3;
        goto LABEL_209;
      }
      v35 = quasar::EP_ACOUSTIC_EP_SCORE_STR[0];
      v36 = strlen(quasar::EP_ACOUSTIC_EP_SCORE_STR[0]);
      if ((v8 & 0x80) == 0)
        goto LABEL_63;
      v10 = v5[1];
LABEL_69:
      if (v36 != v10)
      {
        v39 = quasar::EP_PAUSE_COUNTS_STR[0];
        v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
        goto LABEL_89;
      }
      if (v10 == -1)
        std::string::__throw_out_of_range[abi:ne180100]();
      v38 = (uint64_t *)*v5;
LABEL_72:
      if (!memcmp(v38, v35, v10))
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v42 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v42)
        {
          v22 = *v4;
          v55 = v20 - *v4;
          v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 62)
            goto LABEL_267;
          v57 = v42 - (_QWORD)v22;
          if (v57 >> 1 > v56)
            v56 = v57 >> 1;
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v56;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v55];
          *(_DWORD *)v58 = 4;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v67 = *--v20;
            *((_DWORD *)v58 - 1) = v67;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 4;
        goto LABEL_209;
      }
      v39 = quasar::EP_PAUSE_COUNTS_STR[0];
      v40 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
      if ((v8 & 0x80) == 0)
        goto LABEL_74;
      v10 = v5[1];
LABEL_89:
      if (v40 == v10)
      {
        if (v10 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        if (!memcmp((const void *)*v5, v39, v10))
        {
LABEL_103:
          v20 = (int *)*((_QWORD *)this + 25);
          v51 = *((_QWORD *)this + 26);
          if ((unint64_t)v20 >= v51)
          {
            v22 = *v4;
            v61 = v20 - *v4;
            v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 62)
              goto LABEL_267;
            v63 = v51 - (_QWORD)v22;
            if (v63 >> 1 > v62)
              v62 = v63 >> 1;
            if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL)
              v26 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v26 = v62;
            if (v26)
            {
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
              v22 = (int *)*((_QWORD *)this + 24);
              v20 = (int *)*((_QWORD *)this + 25);
            }
            else
            {
              v27 = 0;
            }
            v58 = &v27[4 * v61];
            *(_DWORD *)v58 = 5;
            v59 = v58 + 4;
            while (v20 != v22)
            {
              v74 = *--v20;
              *((_DWORD *)v58 - 1) = v74;
              v58 -= 4;
            }
            goto LABEL_261;
          }
          v21 = 5;
          goto LABEL_209;
        }
        if ((v8 & 0x80) == 0)
          goto LABEL_93;
        v10 = v5[1];
      }
      if (v10 != 21)
        goto LABEL_176;
      if (*(_QWORD *)*v5 == 0x75706E692D6D756ELL
        && *(_QWORD *)(*v5 + 8) == 0x2D6C6562616C2D74
        && *(_QWORD *)(*v5 + 13) == 0x7364726F772D6C65)
      {
LABEL_161:
        v20 = (int *)*((_QWORD *)this + 25);
        v70 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v70)
        {
          v22 = *v4;
          v71 = v20 - *v4;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            goto LABEL_267;
          v73 = v70 - (_QWORD)v22;
          if (v73 >> 1 > v72)
            v72 = v73 >> 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v72;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v71];
          *(_DWORD *)v58 = 6;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v98 = *--v20;
            *((_DWORD *)v58 - 1) = v98;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 6;
        goto LABEL_209;
      }
      if ((v8 & 0x80) != 0)
      {
        v10 = v5[1];
LABEL_176:
        if (v10 != 11)
        {
          v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
          v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
LABEL_189:
          if (v50 != v10)
          {
            v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
            v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
            goto LABEL_200;
          }
          if (v10 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v78 = (uint64_t *)*v5;
          goto LABEL_192;
        }
        v46 = (uint64_t *)*v5;
        goto LABEL_178;
      }
      v46 = v5;
      if ((_DWORD)v8 != 11)
        goto LABEL_102;
LABEL_178:
      v75 = *v46;
      v76 = *(uint64_t *)((char *)v46 + 3);
      if (v75 == 0x632D6D6165727473 && v76 == 0x666E6F632D6D6165)
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v81 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v81)
        {
          v22 = *v4;
          v92 = v20 - *v4;
          v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62)
            goto LABEL_267;
          v94 = v81 - (_QWORD)v22;
          if (v94 >> 1 > v93)
            v93 = v94 >> 1;
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v93;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v92];
          *(_DWORD *)v58 = 7;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v100 = *--v20;
            *((_DWORD *)v58 - 1) = v100;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 7;
        goto LABEL_209;
      }
      v49 = quasar::EP_SILENCE_POSTERIOR_STR[0];
      v50 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
      if ((v8 & 0x80) != 0)
      {
        v10 = v5[1];
        goto LABEL_189;
      }
LABEL_183:
      v10 = v8;
      v78 = v5;
      if (v50 != v8)
      {
        v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
        v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
        goto LABEL_194;
      }
LABEL_192:
      if (!memcmp(v78, v49, v10))
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v85 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v85)
        {
          v22 = *v4;
          v89 = v20 - *v4;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62)
            goto LABEL_267;
          v91 = v85 - (_QWORD)v22;
          if (v91 >> 1 > v90)
            v90 = v91 >> 1;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v90;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v89];
          *(_DWORD *)v58 = 8;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v99 = *--v20;
            *((_DWORD *)v58 - 1) = v99;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 8;
        goto LABEL_209;
      }
      v79 = (const void *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR;
      v80 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
      if ((v8 & 0x80) != 0)
      {
        v10 = v5[1];
LABEL_200:
        if (v80 != v10)
        {
          v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
          v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
LABEL_213:
          if (v84 != v10)
            goto LABEL_217;
          if (v10 == -1)
            std::string::__throw_out_of_range[abi:ne180100]();
          v86 = (uint64_t *)*v5;
          v8 = v10;
          goto LABEL_216;
        }
        if (v10 == -1)
          std::string::__throw_out_of_range[abi:ne180100]();
        v82 = (uint64_t *)*v5;
        goto LABEL_203;
      }
LABEL_194:
      v10 = v8;
      v82 = v5;
      if (v80 != v8)
      {
        v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
        v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
        goto LABEL_205;
      }
LABEL_203:
      if (!memcmp(v82, v79, v10))
      {
        v20 = (int *)*((_QWORD *)this + 25);
        v87 = *((_QWORD *)this + 26);
        if ((unint64_t)v20 >= v87)
        {
          v22 = *v4;
          v95 = v20 - *v4;
          v96 = v95 + 1;
          if ((unint64_t)(v95 + 1) >> 62)
LABEL_267:
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v97 = v87 - (_QWORD)v22;
          if (v97 >> 1 > v96)
            v96 = v97 >> 1;
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFFCLL)
            v26 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v26 = v96;
          if (v26)
          {
            v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v103, v26);
            v22 = (int *)*((_QWORD *)this + 24);
            v20 = (int *)*((_QWORD *)this + 25);
          }
          else
          {
            v27 = 0;
          }
          v58 = &v27[4 * v95];
          *(_DWORD *)v58 = 9;
          v59 = v58 + 4;
          while (v20 != v22)
          {
            v101 = *--v20;
            *((_DWORD *)v58 - 1) = v101;
            v58 -= 4;
          }
          goto LABEL_261;
        }
        v21 = 9;
LABEL_209:
        *v20 = v21;
        v18 = v20 + 1;
LABEL_210:
        v59 = v18;
        goto LABEL_263;
      }
      v83 = (const void *)quasar::EP_SPG_SILENCE_POSTERIOR_STR;
      v84 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
      if ((v8 & 0x80) != 0)
      {
        v10 = v5[1];
        goto LABEL_213;
      }
LABEL_205:
      v86 = v5;
      if (v84 != v8)
        goto LABEL_217;
LABEL_216:
      if (memcmp(v86, v83, v8))
      {
LABEL_217:
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5, (char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR))
        {
          memset(v105, 0, 272);
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v105);
          v102 = (quasar::NnetEndPointer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v105, (uint64_t)"Feature unknown, features allowed are: ", 39);
          quasar::NnetEndPointer::allowedFeatures((uint64_t *)&v104, v102);
          std::operator<<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v102, (uint64_t)&v104);
          std::string::~string(&v104);
          quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v105);
        }
        v88 = 11;
        goto LABEL_219;
      }
      v88 = 10;
LABEL_219:
      LODWORD(v105[0]) = v88;
      std::vector<int>::push_back[abi:ne180100]((uint64_t)v4, v105);
LABEL_264:
      ++v3;
      v1 = *((_QWORD *)this + 19);
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 20) - v1) >> 3) > v3);
  }
}

void sub_1ADD1F138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&a16);
}

uint64_t quasar::NnetEndPointer::allowedFeatures(quasar::NnetEndPointer *this)
{
  size_t v1;
  _QWORD *v2;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  _QWORD v30[11];
  char v31;
  uint64_t v32;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v30);
  v1 = strlen(quasar::EP_NUM_OF_WORDS_STR[0]);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)quasar::EP_NUM_OF_WORDS_STR[0], v1);
  v3 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" ", 1);
  v4 = strlen(quasar::EP_NUM_TRAILING_SIL_STR[0]);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)quasar::EP_NUM_TRAILING_SIL_STR[0], v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" ", 1);
  v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"num-frames", 10);
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
  v9 = strlen(quasar::EP_EOS_LIKELIHOOD_STR[0]);
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)quasar::EP_EOS_LIKELIHOOD_STR[0], v9);
  v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" ", 1);
  v12 = strlen(quasar::EP_PAUSE_COUNTS_STR[0]);
  v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)quasar::EP_PAUSE_COUNTS_STR[0], v12);
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" ", 1);
  v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"num-input-label-words", 21);
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" ", 1);
  v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"stream-conf", 11);
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" ", 1);
  v19 = strlen(quasar::EP_SILENCE_POSTERIOR_STR[0]);
  v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)quasar::EP_SILENCE_POSTERIOR_STR[0], v19);
  v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)" ", 1);
  v22 = strlen((const char *)quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, quasar::EP_SPG_SILENCE_FRAMES_COUNT_STR, v22);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" ", 1);
  v25 = strlen((const char *)quasar::EP_SPG_SILENCE_POSTERIOR_STR);
  v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, quasar::EP_SPG_SILENCE_POSTERIOR_STR, v25);
  v27 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)" ", 1);
  v28 = strlen((const char *)quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, quasar::EP_SPG_SILENCE_PROBABILITY_RAW_STR, v28);
  std::stringbuf::str();
  v30[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v30 + *(_QWORD *)(v30[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v30[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v31 < 0)
    operator delete((void *)v30[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v32);
}

void sub_1ADD1F410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::NnetEndPointer::computeFeats(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, unsigned int **a5@<X4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, float **a9@<X8>, float a10@<S0>, float a11@<S1>, float a12@<S2>, float a13@<S3>)
{
  uint64_t v14;
  _QWORD *v22;
  float v23;
  unint64_t v24;
  float v25;
  float v26;
  float v27;
  unint64_t v28;
  float *v29;
  float *v30;
  unint64_t v31;
  float *v32;
  unsigned int *v33;
  unsigned int *v34;
  float *v35;
  float v36;
  float *v37;
  float *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  float *v44;
  int v45;
  unint64_t v46;
  float *v47;
  float v48;
  unint64_t v49;
  float *v50;
  unint64_t v51;
  float *v52;
  unint64_t v53;
  float *v54;
  unint64_t v55;
  unint64_t v56;
  float *v57;
  unint64_t v58;
  float *v59;
  unint64_t v60;
  float *v61;
  float *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  float *v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  float v106;
  float v107;
  float v108;
  _OWORD v110[18];

  *a9 = 0;
  a9[1] = 0;
  a9[2] = 0;
  v14 = *(_QWORD *)(a1 + 192);
  if (*(_QWORD *)(a1 + 200) != v14)
  {
    v22 = a9 + 2;
    v107 = (float)a7;
    v108 = (float)a8;
    v106 = (float)a6;
    v23 = expf(-a10);
    v24 = 0;
    v25 = (float)a4;
    v26 = (float)a3;
    v27 = (float)a2;
    while (2)
    {
      switch(*(_DWORD *)(v14 + 4 * v24))
      {
        case 0:
          v29 = a9[1];
          v28 = (unint64_t)a9[2];
          if ((unint64_t)v29 < v28)
          {
            *v29 = v27;
            v30 = v29 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v74 = v29 - *a9;
          v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v76 = v28 - (_QWORD)v62;
          if (v76 >> 1 > v75)
            v75 = v76 >> 1;
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v75;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v29 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v74];
          *v95 = v27;
          v61 = v95 + 1;
          while (v29 != v62)
          {
            v99 = *((_DWORD *)v29-- - 1);
            *((_DWORD *)v95-- - 1) = v99;
          }
          goto LABEL_168;
        case 1:
          v54 = a9[1];
          v53 = (unint64_t)a9[2];
          if ((unint64_t)v54 < v53)
          {
            *v54 = v26;
            v30 = v54 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v80 = v54 - *a9;
          v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v82 = v53 - (_QWORD)v62;
          if (v82 >> 1 > v81)
            v81 = v82 >> 1;
          if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v81;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v54 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v80];
          *v95 = v26;
          v61 = v95 + 1;
          while (v54 != v62)
          {
            v101 = *((_DWORD *)v54-- - 1);
            *((_DWORD *)v95-- - 1) = v101;
          }
          goto LABEL_168;
        case 2:
          v52 = a9[1];
          v51 = (unint64_t)a9[2];
          if ((unint64_t)v52 < v51)
          {
            *v52 = v25;
            v30 = v52 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v77 = v52 - *a9;
          v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v79 = v51 - (_QWORD)v62;
          if (v79 >> 1 > v78)
            v78 = v79 >> 1;
          if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v78;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v52 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v77];
          *v95 = v25;
          v61 = v95 + 1;
          while (v52 != v62)
          {
            v100 = *((_DWORD *)v52-- - 1);
            *((_DWORD *)v95-- - 1) = v100;
          }
          goto LABEL_168;
        case 3:
          v50 = a9[1];
          v49 = (unint64_t)a9[2];
          if ((unint64_t)v50 < v49)
          {
            *v50 = v23;
            v30 = v50 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v71 = v50 - *a9;
          v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v73 = v49 - (_QWORD)v62;
          if (v73 >> 1 > v72)
            v72 = v73 >> 1;
          if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v72;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v50 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v71];
          *v95 = v23;
          v61 = v95 + 1;
          while (v50 != v62)
          {
            v98 = *((_DWORD *)v50-- - 1);
            *((_DWORD *)v95-- - 1) = v98;
          }
          goto LABEL_168;
        case 5:
          v33 = *a5;
          v34 = a5[1];
          if (*a5 != v34)
          {
            v35 = a9[1];
            do
            {
              v36 = (float)*v33;
              if ((unint64_t)v35 >= *v22)
              {
                v38 = *a9;
                v39 = v35 - *a9;
                v40 = v39 + 1;
                if ((unint64_t)(v39 + 1) >> 62)
                  std::vector<int>::__throw_length_error[abi:ne180100]();
                v41 = *v22 - (_QWORD)v38;
                if (v41 >> 1 > v40)
                  v40 = v41 >> 1;
                if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL)
                  v42 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v42 = v40;
                if (v42)
                {
                  v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v42);
                  v38 = *a9;
                  v35 = a9[1];
                }
                else
                {
                  v43 = 0;
                }
                v44 = (float *)&v43[4 * v39];
                *v44 = v36;
                v37 = v44 + 1;
                while (v35 != v38)
                {
                  v45 = *((_DWORD *)v35-- - 1);
                  *((_DWORD *)v44-- - 1) = v45;
                }
                *a9 = v44;
                a9[1] = v37;
                a9[2] = (float *)&v43[4 * v42];
                if (v38)
                  operator delete(v38);
              }
              else
              {
                *v35 = v36;
                v37 = v35 + 1;
              }
              a9[1] = v37;
              ++v33;
              v35 = v37;
            }
            while (v33 != v34);
          }
          goto LABEL_171;
        case 6:
          v47 = a9[1];
          v46 = (unint64_t)a9[2];
          if ((unint64_t)v47 < v46)
          {
            v48 = v106;
            goto LABEL_44;
          }
          v62 = *a9;
          v68 = v47 - *a9;
          v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v70 = v46 - (_QWORD)v62;
          if (v70 >> 1 > v69)
            v69 = v70 >> 1;
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v69;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v47 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v68];
          *v95 = v106;
          v61 = v95 + 1;
          while (v47 != v62)
          {
            v97 = *((_DWORD *)v47-- - 1);
            *((_DWORD *)v95-- - 1) = v97;
          }
          goto LABEL_168;
        case 7:
          v47 = a9[1];
          v55 = (unint64_t)a9[2];
          if ((unint64_t)v47 < v55)
          {
            v48 = v107;
            goto LABEL_44;
          }
          v62 = *a9;
          v83 = v47 - *a9;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v85 = v55 - (_QWORD)v62;
          if (v85 >> 1 > v84)
            v84 = v85 >> 1;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v84;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v47 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v83];
          *v95 = v107;
          v61 = v95 + 1;
          while (v47 != v62)
          {
            v102 = *((_DWORD *)v47-- - 1);
            *((_DWORD *)v95-- - 1) = v102;
          }
          goto LABEL_168;
        case 8:
          v57 = a9[1];
          v56 = (unint64_t)a9[2];
          if ((unint64_t)v57 < v56)
          {
            *v57 = a11;
            v30 = v57 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v86 = v57 - *a9;
          v87 = v86 + 1;
          if ((unint64_t)(v86 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v88 = v56 - (_QWORD)v62;
          if (v88 >> 1 > v87)
            v87 = v88 >> 1;
          if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v87;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v57 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v86];
          *v95 = a11;
          v61 = v95 + 1;
          while (v57 != v62)
          {
            v103 = *((_DWORD *)v57-- - 1);
            *((_DWORD *)v95-- - 1) = v103;
          }
          goto LABEL_168;
        case 9:
          v47 = a9[1];
          v60 = (unint64_t)a9[2];
          if ((unint64_t)v47 >= v60)
          {
            v62 = *a9;
            v92 = v47 - *a9;
            v93 = v92 + 1;
            if ((unint64_t)(v92 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v94 = v60 - (_QWORD)v62;
            if (v94 >> 1 > v93)
              v93 = v94 >> 1;
            if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v93;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
              v62 = *a9;
              v47 = a9[1];
            }
            else
            {
              v67 = 0;
            }
            v95 = (float *)&v67[4 * v92];
            *v95 = v108;
            v61 = v95 + 1;
            while (v47 != v62)
            {
              v105 = *((_DWORD *)v47-- - 1);
              *((_DWORD *)v95-- - 1) = v105;
            }
            goto LABEL_168;
          }
          v48 = v108;
LABEL_44:
          *v47 = v48;
          v30 = v47 + 1;
          goto LABEL_45;
        case 0xA:
          v59 = a9[1];
          v58 = (unint64_t)a9[2];
          if ((unint64_t)v59 < v58)
          {
            *v59 = a12;
            v30 = v59 + 1;
            goto LABEL_45;
          }
          v62 = *a9;
          v89 = v59 - *a9;
          v90 = v89 + 1;
          if ((unint64_t)(v89 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v91 = v58 - (_QWORD)v62;
          if (v91 >> 1 > v90)
            v90 = v91 >> 1;
          if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL)
            v66 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v66 = v90;
          if (v66)
          {
            v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
            v62 = *a9;
            v59 = a9[1];
          }
          else
          {
            v67 = 0;
          }
          v95 = (float *)&v67[4 * v89];
          *v95 = a12;
          v61 = v95 + 1;
          while (v59 != v62)
          {
            v104 = *((_DWORD *)v59-- - 1);
            *((_DWORD *)v95-- - 1) = v104;
          }
          goto LABEL_168;
        case 0xB:
          v32 = a9[1];
          v31 = (unint64_t)a9[2];
          if ((unint64_t)v32 >= v31)
          {
            v62 = *a9;
            v63 = v32 - *a9;
            v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v65 = v31 - (_QWORD)v62;
            if (v65 >> 1 > v64)
              v64 = v65 >> 1;
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL)
              v66 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v66 = v64;
            if (v66)
            {
              v67 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)(a9 + 2), v66);
              v62 = *a9;
              v32 = a9[1];
            }
            else
            {
              v67 = 0;
            }
            v95 = (float *)&v67[4 * v63];
            *v95 = a13;
            v61 = v95 + 1;
            while (v32 != v62)
            {
              v96 = *((_DWORD *)v32-- - 1);
              *((_DWORD *)v95-- - 1) = v96;
            }
LABEL_168:
            *a9 = v95;
            a9[1] = v61;
            a9[2] = (float *)&v67[4 * v66];
            if (v62)
              operator delete(v62);
          }
          else
          {
            *v32 = a13;
            v30 = v32 + 1;
LABEL_45:
            v61 = v30;
          }
          a9[1] = v61;
LABEL_171:
          ++v24;
          v14 = *(_QWORD *)(a1 + 192);
          if (v24 >= (*(_QWORD *)(a1 + 200) - v14) >> 2)
            return;
          continue;
        default:
          if (quasar::gLogLevel >= 5)
          {
            memset(v110, 0, 272);
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v110);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v110, (uint64_t)"Feature type unknown. Ignoring feature ..", 41);
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v110);
          }
          goto LABEL_171;
      }
    }
  }
}

void sub_1ADD1FC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t quasar::NnetEndPointer::NnetEndPointer(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  quasar::NnetEndPointer *v37;
  void *p_p;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  void *__p;
  uint64_t v44;
  int64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;

  *(_QWORD *)a1 = &off_1E5D352E0;
  quasar::EndPointDecoderConfig::EndPointDecoderConfig((quasar::EndPointDecoderConfig *)(a1 + 8), (const quasar::EndPointDecoderConfig *)a2);
  *(_OWORD *)(a1 + 152) = 0u;
  v8 = a1 + 152;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 209) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_DWORD *)(a1 + 280) = -1;
  *(_BYTE *)(a1 + 284) = a4;
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (!v9)
  {
    v10 = *(unsigned __int8 *)(a2 + 63);
    if ((v10 & 0x80u) != 0)
      v10 = *(_QWORD *)(a2 + 48);
    if (!v10)
    {
      v61 = 0uLL;
      v62 = 0uLL;
      v59 = 0uLL;
      v60 = 0uLL;
      v57 = 0uLL;
      v58 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      v46 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"NNet model file for endpointing cannot be empty when use-nnet-endpointer is set", 79);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
    }
  }
  v11 = *(std::string **)(a3 + 24);
  v12 = *(__int128 **)(a3 + 32);
  if (v11 == (std::string *)v12)
  {
    v13 = *(unsigned __int8 *)(a2 + 87);
    if ((v13 & 0x80u) != 0)
      v13 = *(_QWORD *)(a2 + 72);
    if (!v13)
    {
      v61 = 0uLL;
      v62 = 0uLL;
      v59 = 0uLL;
      v60 = 0uLL;
      v57 = 0uLL;
      v58 = 0uLL;
      v55 = 0uLL;
      v56 = 0uLL;
      v53 = 0uLL;
      v54 = 0uLL;
      v51 = 0uLL;
      v52 = 0uLL;
      v49 = 0uLL;
      v50 = 0uLL;
      v47 = 0uLL;
      v48 = 0uLL;
      v46 = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      v37 = (quasar::NnetEndPointer *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Empty feature list (endpoint.feature-list). Specify features from: ", 67);
      quasar::NnetEndPointer::allowedFeatures((uint64_t *)&__p, v37);
      if (v45 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v45 >= 0)
        v39 = HIBYTE(v45);
      else
        v39 = v44;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)p_p, v39);
      if (SHIBYTE(v45) < 0)
        operator delete(__p);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
    }
  }
  v14 = *(unsigned __int8 *)(a2 + 63);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a2 + 48);
  if (v14)
  {
    if (v8 != a2 + 104)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 152), *(std::string **)(a2 + 104), *(__int128 **)(a2 + 112), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104)) >> 3));
    v15 = (uint64_t *)(a2 + 128);
  }
  else
  {
    if (v8 != a3 + 24)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 152), v11, v12, 0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v11) >> 3));
    v15 = (uint64_t *)(a3 + 48);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 176), v15);
  quasar::NnetEndPointer::initFeatureSeq((quasar::NnetEndPointer *)a1);
  __p = 0;
  v44 = 0;
  v45 = 0;
  v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, 1uLL);
  v18 = (unint64_t)&v16[4 * v17];
  *(_DWORD *)v16 = *(_DWORD *)(a2 + 4);
  v19 = v16 + 4;
  __p = v16;
  v45 = v18;
  v44 = (uint64_t)(v16 + 4);
  if ((unint64_t)(v16 + 4) >= v18)
  {
    v21 = (char *)__p;
    v22 = (v19 - (_BYTE *)__p) >> 2;
    v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v24 = v18 - (_QWORD)__p;
    if (v24 >> 1 > v23)
      v23 = v24 >> 1;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
      v25 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v25 = v23;
    if (v25)
    {
      v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v45, v25);
      v21 = (char *)__p;
      v19 = (char *)v44;
    }
    else
    {
      v26 = 0;
    }
    v27 = &v26[4 * v22];
    v28 = &v26[4 * v25];
    *(_DWORD *)v27 = *(_DWORD *)a2;
    v20 = (uint64_t)(v27 + 4);
    while (v19 != v21)
    {
      v29 = *((_DWORD *)v19 - 1);
      v19 -= 4;
      *((_DWORD *)v27 - 1) = v29;
      v27 -= 4;
    }
    __p = v27;
    v44 = v20;
    v45 = (int64_t)v28;
    if (v21)
      operator delete(v21);
  }
  else
  {
    *((_DWORD *)v16 + 1) = *(_DWORD *)a2;
    v20 = (uint64_t)(v16 + 8);
  }
  v44 = v20;
  v41 = 0;
  v42 = 0;
  v40 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v40, __p, v20, (v20 - (uint64_t)__p) >> 2);
  quasar::NnetEndPointer::prepareEPStatus((_QWORD *)a1, (float **)&v40);
  if (v40)
  {
    v41 = v40;
    operator delete(v40);
  }
  v30 = *(unsigned __int8 *)(a2 + 39);
  if ((v30 & 0x80u) != 0)
    v30 = *(_QWORD *)(a2 + 24);
  if (v30 && (kaldi::SplitStringToIntegers<int>(a2 + 16, ",", 0, (std::vector<unsigned int> *)(a1 + 256)) & 1) == 0)
  {
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v46 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
    v33 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Invalid pause-threshold-list string ", 36);
    v34 = *(char *)(a2 + 39);
    if (v34 >= 0)
      v35 = a2 + 16;
    else
      v35 = *(_QWORD *)(a2 + 16);
    if (v34 >= 0)
      v36 = *(unsigned __int8 *)(a2 + 39);
    else
      v36 = *(_QWORD *)(a2 + 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v33, v35, v36);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
  }
  if (*(_BYTE *)(a2 + 96))
  {
    v31 = *(unsigned __int8 *)(a2 + 39);
    if ((v31 & 0x80u) != 0)
      v31 = *(_QWORD *)(a2 + 24);
    if (!v31)
    {
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v47 = 0u;
      v48 = 0u;
      v46 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"pause-threshold-list should not be empty if pauses-as-BOOL is set", 65);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v46);
    }
  }
  if (__p)
  {
    v44 = (uint64_t)__p;
    operator delete(__p);
  }
  return a1;
}

void sub_1ADD201AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x1ADD201D0);
}

void sub_1ADD201C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  void **v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void *v13;
  void *v14;
  void *v15;
  va_list va;

  va_start(va, a7);
  v13 = *v10;
  if (*v10)
  {
    v8[33] = v13;
    operator delete(v13);
  }
  v14 = *v11;
  if (*v11)
  {
    v8[30] = v14;
    operator delete(v14);
  }
  v15 = (void *)v8[24];
  if (v15)
  {
    v8[25] = v15;
    operator delete(v15);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v9);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v7);
  _Unwind_Resume(a1);
}

void sub_1ADD201CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void **a15)
{
  void **v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;

  if (__p)
    operator delete(__p);
  v21 = *v18;
  if (*v18)
  {
    v16[33] = v21;
    operator delete(v21);
  }
  v22 = *v19;
  if (*v19)
  {
    v16[30] = v22;
    operator delete(v22);
  }
  v23 = (void *)v16[24];
  if (v23)
  {
    v16[25] = v23;
    operator delete(v23);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v17);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a15);
  quasar::EndPointDecoderConfig::~EndPointDecoderConfig(v15);
  _Unwind_Resume(a1);
}

void quasar::NnetEndPointer::prepareEPStatus(_QWORD *a1, float **a2)
{
  float *v4;
  float *v5;
  unint64_t v6;
  char **v7;
  uint64_t v8;
  float *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unint64_t *v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char v23;

  v4 = *a2;
  v5 = a2[1];
  v6 = 126 - 2 * __clz(v5 - v4);
  v7 = (char **)(a1 + 29);
  a1[30] = a1[29];
  if (v5 == v4)
    v8 = 0;
  else
    v8 = v6;
  std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v4, v5, (uint64_t)&v23, v8, 1);
  v9 = *a2;
  if (a2[1] != *a2)
  {
    v10 = 0;
    v11 = a1 + 31;
    v12 = (unint64_t *)a1[30];
    do
    {
      v13 = (100 - 10 * v10) | ((unint64_t)LODWORD(v9[v10]) << 32);
      if ((unint64_t)v12 >= *v11)
      {
        v14 = ((char *)v12 - *v7) >> 3;
        if ((unint64_t)(v14 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v15 = *v11 - (_QWORD)*v7;
        v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1))
          v16 = v14 + 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 31), v17);
        else
          v18 = 0;
        v19 = (unint64_t *)&v18[8 * v14];
        *v19 = v13;
        v12 = v19 + 1;
        v21 = (char *)a1[29];
        v20 = (char *)a1[30];
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = *v7;
        }
        a1[29] = v19;
        a1[30] = v12;
        a1[31] = &v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v12++ = v13;
      }
      a1[30] = v12;
      ++v10;
      v9 = *a2;
    }
    while (v10 < a2[1] - *a2);
  }
}

uint64_t quasar::NnetEndPointer::evalEndPoint(uint64_t a1, _DWORD *a2, int a3, int a4, int a5, _QWORD *a6, unsigned int **a7, int a8, float a9, double a10, float a11, float a12, float a13, int a14, int a15, _DWORD *a16, int a17)
{
  float *v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  float *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  float *v33;
  int v34;
  BOOL v35;
  int v36;
  int v37;
  int v39;
  BOOL v40;
  _QWORD *v42;
  int32x2_t v43;
  __int128 v44;
  __int128 v45;
  char v46;
  _QWORD v47[5];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  float *v65;
  float *v66;

  *(_BYTE *)(a1 + 224) = 0;
  if (a6[1] == *a6)
    return 0;
  if (a15 * a4 >= *(_DWORD *)(a1 + 100))
    return 1;
  quasar::NnetEndPointer::computeFeats(a1, a3, a4, a5, a7, a8, a14, a17, &v65, a9, a11, a12, a13);
  v22 = v65;
  v21 = v66;
  if ((int)kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 176)) != v21 - v22)
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Feature dim=", 12);
    v42 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v42, (uint64_t)" does not match model dim=", 26);
    kaldi::nnet1::Nnet::InputDim(*(kaldi::nnet1::Nnet **)(a1 + 176));
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v48);
  }
  kaldi::Matrix<float>::Matrix((uint64_t)v47, 1, (unint64_t)((char *)v66 - (char *)v65) >> 2, 0, 0);
  v23 = v65;
  if (v66 != v65)
  {
    v24 = 0;
    v25 = v66 - v65;
    v26 = v47[0];
    if (v25 <= 1)
      v25 = 1;
    do
    {
      *(float *)(v26 + 4 * v24) = v23[v24];
      ++v24;
    }
    while (v25 != v24);
  }
  v44 = 0u;
  v45 = 0u;
  v43 = (int32x2_t)&unk_1E5D34170;
  v46 = 0;
  v27 = *(uint64_t **)(a1 + 176);
  kaldi::CuMatrix<float>::CuMatrix<float>(&v48, v47, 111, 0);
  kaldi::nnet1::Nnet::Feedforward(v27, (uint64_t)&v48, &v43, -1, 0);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v48);
  if (HIDWORD(v44) != 1 && DWORD2(v44) != 1)
  {
    if (quasar::gLogLevel >= 1)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Nnet output for endpointing is incorrect", 40);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v48);
    }
LABEL_23:
    v34 = 0;
LABEL_24:
    v35 = v34 > *(_DWORD *)(a1 + 220);
    goto LABEL_25;
  }
  if (quasar::gLogLevel >= 6)
  {
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v53 = 0u;
    v54 = 0u;
    v51 = 0u;
    v52 = 0u;
    v49 = 0u;
    v50 = 0u;
    v48 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
    kaldi::MatrixBase<float>::Write(v47, &v48, 0, 0);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)", ep-nnet-value=", 16);
    std::ostream::operator<<();
    quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)&v48);
  }
  v29 = (float *)v44;
  *a2 = *(_DWORD *)v44;
  v30 = *(_QWORD *)(a1 + 232);
  v31 = *(_QWORD *)(a1 + 240) - v30;
  if (!v31)
    goto LABEL_23;
  v32 = v31 >> 3;
  if (v32 <= 1)
    v32 = 1;
  v33 = (float *)(v30 + 4);
  while (*v33 == -2147500000.0 || *v29 < *v33)
  {
    v33 += 2;
    if (!--v32)
      goto LABEL_23;
  }
  v34 = *((_DWORD *)v33 - 1);
  if (v34 != 100)
    goto LABEL_24;
  v35 = 0;
LABEL_25:
  *(_BYTE *)(a1 + 224) = v35;
  *(_DWORD *)(a1 + 220) = v34;
  *(float *)(a1 + 216) = a9;
  v36 = *(_DWORD *)(a1 + 280);
  if (v36 < 0)
  {
    *a16 = v36;
    goto LABEL_33;
  }
  v37 = *(_DWORD *)(a1 + 108) / a15 + v36;
  *a16 = v36;
  if (v37 < 1 || v37 > a5)
  {
LABEL_33:
    v39 = **(_DWORD **)(a1 + 232);
    if (*(_BYTE *)(a1 + 284))
      v40 = 0;
    else
      v40 = v34 == v39;
    v28 = v40;
    if (*(_BYTE *)(a1 + 284))
    {
      if (v34 == v39)
      {
        v28 = 0;
        if (*(_DWORD *)(a1 + 280) == -1)
          *(_DWORD *)(a1 + 280) = a5;
      }
    }
    goto LABEL_43;
  }
  v28 = 1;
LABEL_43:
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v43);
  kaldi::Matrix<float>::~Matrix((uint64_t)v47);
  if (v65)
  {
    v66 = v65;
    operator delete(v65);
  }
  return v28;
}

void sub_1ADD207FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  JUMPOUT(0x1ADD20810);
}

void sub_1ADD2080C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  kaldi::Matrix<float>::~Matrix((uint64_t)va1);
  v4 = *(void **)(v2 - 104);
  if (v4)
  {
    *(_QWORD *)(v2 - 96) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::NnetEndPointer::info(quasar::NnetEndPointer *this)
{
  uint64_t v1;
  _QWORD v3[2];
  _QWORD v4[11];
  char v5;
  uint64_t v6;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"NnetEndPointer endpoint-threshold=", 34);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x1E0DE4F50];
  v1 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v3 + *(_QWORD *)(v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v4[0] = v1;
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v6);
}

void sub_1ADD2090C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::NnetEndPointer::reportEndPoint(quasar::NnetEndPointer *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t quasar::NnetEndPointer::status(quasar::NnetEndPointer *this)
{
  return *((unsigned int *)this + 55);
}

void quasar::NnetEndPointer::computePauseCounts(uint64_t a1, unsigned int **a2, std::vector<unsigned int> *this)
{
  unsigned int *v6;
  unsigned int *v7;
  _DWORD *v8;
  unsigned int *v9;
  unint64_t v10;
  std::vector<unsigned int>::pointer begin;
  unint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  int v15;

  this->__end_ = this->__begin_;
  std::vector<int>::resize(this, (uint64_t)(*(_QWORD *)(a1 + 264) - *(_QWORD *)(a1 + 256)) >> 2);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v9 = *(unsigned int **)(a1 + 256);
    v8 = *(_DWORD **)(a1 + 264);
    v10 = v8 - v9;
    if (v10 <= 1)
      v10 = 1;
    do
    {
      if (v8 != v9)
      {
        begin = this->__begin_;
        v12 = v10;
        v13 = v9;
        do
        {
          v14 = *v13++;
          if (*v6 >= v14)
          {
            if (*(_BYTE *)(a1 + 104))
              v15 = 1;
            else
              v15 = *begin + 1;
            *begin = v15;
          }
          ++begin;
          --v12;
        }
        while (v12);
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

uint64_t quasar::NnetEndPointer::pausesAsBool(quasar::NnetEndPointer *this)
{
  return *((unsigned __int8 *)this + 104);
}

void quasar::BasicEndPointer::~BasicEndPointer(quasar::BasicEndPointer *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E5D35880;
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 41);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  v2 = (void **)((char *)this + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
}

{
  void **v2;

  *(_QWORD *)this = &off_1E5D35880;
  std::deque<int>::~deque[abi:ne180100]((_QWORD *)this + 41);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 296);
  v2 = (void **)((char *)this + 272);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 255) < 0)
    operator delete(*((void **)this + 29));
  if (*((char *)this + 231) < 0)
    operator delete(*((void **)this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(*((void **)this + 23));
  MEMORY[0x1AF44D190](this, 0x10B3C407EB90683);
}

void quasar::NnetEndPointer::~NnetEndPointer(quasar::NnetEndPointer *this)
{
  quasar::NnetEndPointer::~NnetEndPointer(this);
  JUMPOUT(0x1AF44D190);
}

{
  void *v2;
  void *v3;
  void *v4;
  void **v5;

  *(_QWORD *)this = &off_1E5D352E0;
  v2 = (void *)*((_QWORD *)this + 32);
  if (v2)
  {
    *((_QWORD *)this + 33) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 29);
  if (v3)
  {
    *((_QWORD *)this + 30) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 24);
  if (v4)
  {
    *((_QWORD *)this + 25) = v4;
    operator delete(v4);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  v5 = (void **)((char *)this + 152);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  v5 = (void **)((char *)this + 112);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

quasar::EndPointDecoderConfig *quasar::EndPointDecoderConfig::EndPointDecoderConfig(quasar::EndPointDecoderConfig *this, const quasar::EndPointDecoderConfig *a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v4 = *(_QWORD *)a2;
  *((_BYTE *)this + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)this = v4;
  if (*((char *)a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 1);
    *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
    *((_OWORD *)this + 1) = v5;
  }
  if (*((char *)a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 40), *((const std::string::value_type **)a2 + 5), *((_QWORD *)a2 + 6));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 40);
    *((_QWORD *)this + 7) = *((_QWORD *)a2 + 7);
    *(_OWORD *)((char *)this + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 64), *((const std::string::value_type **)a2 + 8), *((_QWORD *)a2 + 9));
  }
  else
  {
    v7 = *((_OWORD *)a2 + 4);
    *((_QWORD *)this + 10) = *((_QWORD *)a2 + 10);
    *((_OWORD *)this + 4) = v7;
  }
  v8 = *(_OWORD *)((char *)a2 + 88);
  *((_QWORD *)this + 13) = 0;
  *(_OWORD *)((char *)this + 88) = v8;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 104), *((__int128 **)a2 + 13), *((__int128 **)a2 + 14), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3));
  v9 = *((_QWORD *)a2 + 17);
  *((_QWORD *)this + 16) = *((_QWORD *)a2 + 16);
  *((_QWORD *)this + 17) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  return this;
}

void sub_1ADD20C64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

float *std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(float *result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  float *v15;
  float v16;
  float *v17;
  char v18;
  BOOL v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  int v28;
  float v29;
  float v30;
  int v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  int v41;
  float v42;
  int v43;
  float v44;
  float v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  int v51;
  float v52;
  float v53;
  float v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float *v61;
  BOOL v63;
  uint64_t v64;
  float *v65;
  float v66;
  float v67;
  uint64_t v68;
  float *v69;
  float v70;
  float v71;
  float *v72;

  v8 = result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 > *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        v22 = v9[1];
        v23 = *(a2 - 1);
        if (v22 <= v23)
          v24 = *((_DWORD *)a2 - 1);
        else
          v24 = *((_DWORD *)v9 + 1);
        if (v22 > v23)
          v22 = *(a2 - 1);
        *(a2 - 1) = v22;
        *((_DWORD *)v9 + 1) = v24;
        v25 = *(a2 - 1);
        if (v25 <= *v9)
          v26 = *v9;
        else
          v26 = *(a2 - 1);
        if (v25 > *v9)
          v25 = *v9;
        *(a2 - 1) = v25;
        v28 = *(_DWORD *)v9;
        v27 = v9[1];
        if (v26 <= v27)
        {
          v28 = *((_DWORD *)v9 + 1);
          v27 = v26;
        }
        *(_DWORD *)v9 = v28;
        v9[1] = v27;
        return result;
      case 4uLL:
        v30 = v9[1];
        v29 = v9[2];
        if (*v9 <= v29)
          v31 = *((_DWORD *)v9 + 2);
        else
          v31 = *(_DWORD *)v9;
        if (*v9 <= v29)
          v29 = *v9;
        v9[2] = v29;
        *(_DWORD *)v9 = v31;
        v32 = *(a2 - 1);
        if (v30 <= v32)
          v33 = *(a2 - 1);
        else
          v33 = v30;
        if (v30 <= v32)
          v32 = v30;
        *(a2 - 1) = v32;
        v34 = *v9;
        if (*v9 <= v33)
          v35 = v33;
        else
          v35 = *v9;
        if (*v9 > v33)
          v34 = v33;
        *v9 = v35;
        v9[1] = v34;
        v36 = v9[2];
        v37 = *(a2 - 1);
        if (v36 <= v37)
          v38 = *(a2 - 1);
        else
          v38 = v9[2];
        if (v36 > v37)
          v36 = *(a2 - 1);
        *(a2 - 1) = v36;
        v39 = v9[1];
        if (v39 <= v38)
          v40 = v38;
        else
          v40 = v9[1];
        if (v39 > v38)
          v39 = v38;
        v9[1] = v40;
        v9[2] = v39;
        return result;
      case 5uLL:
        v41 = *(_DWORD *)v9;
        v42 = v9[1];
        if (*v9 <= v42)
          v43 = *((_DWORD *)v9 + 1);
        else
          v43 = *(_DWORD *)v9;
        if (*v9 > v42)
          v41 = *((_DWORD *)v9 + 1);
        *(_DWORD *)v9 = v43;
        *((_DWORD *)v9 + 1) = v41;
        v44 = v9[3];
        v45 = *(a2 - 1);
        if (v44 <= v45)
          v46 = *((_DWORD *)a2 - 1);
        else
          v46 = *((_DWORD *)v9 + 3);
        if (v44 > v45)
          v44 = *(a2 - 1);
        *(a2 - 1) = v44;
        *((_DWORD *)v9 + 3) = v46;
        v47 = *(a2 - 1);
        v48 = v9[2];
        if (v47 <= v48)
          v49 = v9[2];
        else
          v49 = *(a2 - 1);
        if (v47 > v48)
          v47 = v9[2];
        *(a2 - 1) = v47;
        v51 = *((_DWORD *)v9 + 2);
        v50 = v9[3];
        v52 = v9[1];
        if (v49 <= v50)
        {
          v51 = *((_DWORD *)v9 + 3);
          v50 = v49;
        }
        *((_DWORD *)v9 + 2) = v51;
        v9[3] = v50;
        v53 = *(a2 - 1);
        if (v52 <= v53)
          v54 = *(a2 - 1);
        else
          v54 = v52;
        if (v52 <= v53)
          v53 = v52;
        *(a2 - 1) = v53;
        v55 = *(_DWORD *)v9;
        v57 = v9[2];
        v56 = v9[3];
        if (v56 <= *v9)
          v58 = *v9;
        else
          v58 = v9[3];
        if (v56 > *v9)
          v56 = *v9;
        if (v58 <= v57)
        {
          v55 = *((_DWORD *)v9 + 2);
          v57 = v58;
        }
        if (v56 <= v54)
          v59 = v54;
        else
          v59 = v56;
        if (v56 > v54)
          v56 = v54;
        if (v59 <= v57)
          v54 = v57;
        *(_DWORD *)v9 = v55;
        v9[1] = v54;
        if (v59 <= v57)
          v60 = v59;
        else
          v60 = v57;
        v9[2] = v60;
        v9[3] = v56;
        return result;
      default:
        if (v12 > 95)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x201)
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, &v9[v13 >> 1], a2 - 1);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 1, v15 - 1, a2 - 2);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9 + 2, &v9[v14 + 1], a2 - 3);
            std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) <= *v9)
          {
            result = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
            v9 = result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v9, v17);
          v9 = v17 + 1;
          result = (float *)std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = (float *)std::__introsort<std::_ClassicAlgPolicy,std::greater<float> &,float *,false>(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v61 = v9 + 1;
        v63 = v9 == a2 || v61 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v63)
          {
            v64 = 0;
            v65 = v9;
            do
            {
              v67 = *v65;
              v66 = v65[1];
              v65 = v61;
              if (v66 > v67)
              {
                v68 = v64;
                while (1)
                {
                  *(float *)((char *)v9 + v68 + 4) = v67;
                  if (!v68)
                    break;
                  v67 = *(float *)((char *)v9 + v68 - 4);
                  v68 -= 4;
                  if (v66 <= v67)
                  {
                    v69 = (float *)((char *)v9 + v68 + 4);
                    goto LABEL_117;
                  }
                }
                v69 = v9;
LABEL_117:
                *v69 = v66;
              }
              v61 = v65 + 1;
              v64 += 4;
            }
            while (v65 + 1 != a2);
          }
        }
        else if (!v63)
        {
          do
          {
            v71 = *v8;
            v70 = v8[1];
            v8 = v61;
            if (v70 > v71)
            {
              v72 = v61;
              do
              {
                *v72 = v71;
                v71 = *(v72 - 2);
                --v72;
              }
              while (v70 > v71);
              *v72 = v70;
            }
            ++v61;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 > *a1)
  {
    if (v5 > v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 <= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 > v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 <= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  float v2;
  float *v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;

  v2 = *a1;
  if (*a1 <= *(a2 - 1))
  {
    v5 = a1 + 1;
    do
    {
      v3 = v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 <= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 <= v4);
  }
  if (v3 < a2)
  {
    do
      v6 = *--a2;
    while (v2 > v6);
  }
  if (v3 < a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 <= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 > v10);
    }
    while (v3 < a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

float *std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,float *,std::greater<float> &>(float *a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float *v5;
  float *v6;
  float v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  float v12;
  float v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 > v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 <= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 <= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 > v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 <= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(float *a1, float *a2)
{
  _BOOL8 v2;
  float v3;
  float v4;
  float *v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float *v12;
  int v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  int v32;
  float v33;
  float v34;
  float v35;
  float v36;
  int v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;

  v2 = 1;
  switch(a2 - a1)
  {
    case 0:
    case 1:
      return v2;
    case 2:
      v3 = *(a2 - 1);
      v4 = *a1;
      if (v3 > *a1)
      {
        *a1 = v3;
        *(a2 - 1) = v4;
      }
      break;
    case 3:
      v20 = a1[1];
      v21 = *(a2 - 1);
      if (v20 <= v21)
        v22 = *((_DWORD *)a2 - 1);
      else
        v22 = *((_DWORD *)a1 + 1);
      if (v20 > v21)
        v20 = *(a2 - 1);
      *(a2 - 1) = v20;
      *((_DWORD *)a1 + 1) = v22;
      v23 = *(a2 - 1);
      if (v23 <= *a1)
        v24 = *a1;
      else
        v24 = *(a2 - 1);
      if (v23 > *a1)
        v23 = *a1;
      *(a2 - 1) = v23;
      v26 = *a1;
      v25 = a1[1];
      if (v24 <= v25)
      {
        v26 = a1[1];
        v25 = v24;
      }
      *a1 = v26;
      a1[1] = v25;
      break;
    case 4:
      v48 = a1[1];
      v47 = a1[2];
      if (*a1 <= v47)
        v49 = a1[2];
      else
        v49 = *a1;
      if (*a1 <= v47)
        v47 = *a1;
      a1[2] = v47;
      *a1 = v49;
      v50 = *(a2 - 1);
      if (v48 <= v50)
        v51 = *(a2 - 1);
      else
        v51 = v48;
      if (v48 <= v50)
        v50 = v48;
      *(a2 - 1) = v50;
      v52 = *a1;
      if (*a1 <= v51)
        v53 = v51;
      else
        v53 = *a1;
      if (*a1 > v51)
        v52 = v51;
      *a1 = v53;
      a1[1] = v52;
      v54 = a1[2];
      v55 = *(a2 - 1);
      if (v54 <= v55)
        v56 = *(a2 - 1);
      else
        v56 = a1[2];
      if (v54 > v55)
        v54 = *(a2 - 1);
      *(a2 - 1) = v54;
      v57 = a1[1];
      if (v57 <= v56)
        v58 = v56;
      else
        v58 = a1[1];
      if (v57 > v56)
        v57 = v56;
      a1[1] = v58;
      a1[2] = v57;
      break;
    case 5:
      v27 = *a1;
      v28 = a1[1];
      if (*a1 <= v28)
        v29 = a1[1];
      else
        v29 = *a1;
      if (*a1 > v28)
        v27 = a1[1];
      *a1 = v29;
      a1[1] = v27;
      v30 = a1[3];
      v31 = *(a2 - 1);
      if (v30 <= v31)
        v32 = *((_DWORD *)a2 - 1);
      else
        v32 = *((_DWORD *)a1 + 3);
      if (v30 > v31)
        v30 = *(a2 - 1);
      *(a2 - 1) = v30;
      *((_DWORD *)a1 + 3) = v32;
      v33 = *(a2 - 1);
      v34 = a1[2];
      if (v33 <= v34)
        v35 = a1[2];
      else
        v35 = *(a2 - 1);
      if (v33 > v34)
        v33 = a1[2];
      *(a2 - 1) = v33;
      v37 = *((_DWORD *)a1 + 2);
      v36 = a1[3];
      v38 = a1[1];
      if (v35 <= v36)
      {
        v37 = *((_DWORD *)a1 + 3);
        v36 = v35;
      }
      *((_DWORD *)a1 + 2) = v37;
      a1[3] = v36;
      v39 = *(a2 - 1);
      if (v38 <= v39)
        v40 = *(a2 - 1);
      else
        v40 = v38;
      if (v38 <= v39)
        v39 = v38;
      *(a2 - 1) = v39;
      v41 = *a1;
      v43 = a1[2];
      v42 = a1[3];
      if (v42 <= *a1)
        v44 = *a1;
      else
        v44 = a1[3];
      if (v42 > *a1)
        v42 = *a1;
      if (v44 <= v43)
      {
        v41 = a1[2];
        v43 = v44;
      }
      if (v42 <= v40)
        v45 = v40;
      else
        v45 = v42;
      if (v42 > v40)
        v42 = v40;
      if (v45 <= v43)
        v40 = v43;
      *a1 = v41;
      a1[1] = v40;
      if (v45 <= v43)
        v46 = v45;
      else
        v46 = v43;
      a1[2] = v46;
      a1[3] = v42;
      break;
    default:
      v5 = a1 + 2;
      v6 = a1[2];
      v8 = *a1;
      v7 = a1[1];
      if (v7 <= v6)
        v9 = a1[2];
      else
        v9 = a1[1];
      if (v7 <= v6)
        v6 = a1[1];
      if (v6 <= v8)
        v10 = *a1;
      else
        v10 = v6;
      if (v6 > v8)
        v6 = *a1;
      *v5 = v6;
      if (v10 <= v9)
        v11 = v9;
      else
        v11 = v8;
      if (v10 > v9)
        v10 = v9;
      *a1 = v11;
      a1[1] = v10;
      v12 = a1 + 3;
      if (a1 + 3 == a2)
      {
LABEL_29:
        v2 = 1;
      }
      else
      {
        v13 = 0;
        v14 = 12;
        while (1)
        {
          v15 = *v12;
          v16 = *v5;
          if (*v12 > *v5)
          {
            v17 = v14;
            while (1)
            {
              *(float *)((char *)a1 + v17) = v16;
              v18 = v17 - 4;
              if (v17 == 4)
                break;
              v16 = *(float *)((char *)a1 + v17 - 8);
              v17 -= 4;
              if (v15 <= v16)
              {
                v19 = (float *)((char *)a1 + v18);
                goto LABEL_27;
              }
            }
            v19 = a1;
LABEL_27:
            *v19 = v15;
            if (++v13 == 8)
              break;
          }
          v5 = v12;
          v14 += 4;
          if (++v12 == a2)
            goto LABEL_29;
        }
        v2 = v12 + 1 == a2;
      }
      break;
  }
  return v2;
}

float *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *,float *>(float *a1, float *a2, float *a3, uint64_t a4)
{
  float *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  float *v12;
  float *v13;
  float *v14;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float *v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  float *v25;
  float v26;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 > *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 5)
    {
      v16 = (unint64_t)v8 >> 2;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = v19;
          v19 += v17 + 1;
          v21 = 2 * v17;
          v17 = (2 * v17) | 1;
          v22 = v21 + 2;
          if (v22 < v16 && *v19 > v19[1])
          {
            ++v19;
            v17 = v22;
          }
          *v20 = *v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v19 != --v6)
        {
          *v19 = *v6;
          *v6 = v18;
          v23 = (char *)v19 - (char *)a1 + 4;
          if (v23 < 5)
            continue;
          v24 = (((unint64_t)v23 >> 2) - 2) >> 1;
          v25 = &a1[v24];
          v26 = *v25;
          v18 = *v19;
          if (*v25 <= *v19)
            continue;
          do
          {
            *v19 = v26;
            v19 = v25;
            if (!v24)
              break;
            v24 = (v24 - 1) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
          }
          while (*v25 > v18);
        }
        *v19 = v18;
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::greater<float> &,float *>(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  uint64_t v13;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 2)
    {
      v6 = v4 >> 1;
      v7 = (v4 >> 1) + 1;
      v8 = (float *)(result + 4 * v7);
      v9 = v6 + 2;
      if (v9 < a3 && *v8 > v8[1])
      {
        ++v8;
        v7 = v9;
      }
      v10 = *v8;
      v11 = *a4;
      if (*v8 <= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = 2 * v7;
          v7 = (2 * v7) | 1;
          v8 = (float *)(result + 4 * v7);
          v13 = v12 + 2;
          if (v13 < a3 && *v8 > v8[1])
          {
            ++v8;
            v7 = v13;
          }
          v10 = *v8;
        }
        while (*v8 <= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

void sub_1ADD219C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD21B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1ADD21DF4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8(uint64_t a1)
{

}

void sub_1ADD220A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL arabicToRoman(unint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int *v8;

  v2 = a1 - 3000;
  if (a1 - 3000 >= 0xFFFFFFFFFFFFF449)
  {
    v4 = a1;
    v5 = 0;
    v6 = 1000;
    do
    {
      if (v6 <= v4)
      {
        v7 = 0;
        v8 = (int *)(&arabicToRoman(unsigned long,TBuffer<wchar_t> &)::pppszRomanTable[9 * (3 - v5)])[v4 / v6 - 1];
        while (v8[v7++])
          ;
        TBuffer<wchar_t>::insert(a2, *(_QWORD *)(a2 + 16), v8, v7 - 1);
      }
      v4 %= v6;
      ++v5;
      v6 /= 0xAuLL;
    }
    while (v5 != 4);
  }
  return v2 < 0xFFFFFFFFFFFFF449;
}

BOOL romanToArabic(__int32 *a1, _QWORD *a2)
{
  __int32 v3;
  __int32 *v4;
  BOOL v5;
  __int32 *v6;
  unint64_t v7;
  __int32 v8;
  __int32 *v9;
  unint64_t v10;
  uint64_t v11;

  *a2 = 0;
  v3 = *a1;
  if (*a1)
  {
    v4 = a1;
    v5 = 0;
    while (1)
    {
      v6 = wcschr(dword_1AE173810, v3);
      if (!v6)
        return 1;
      if ((unint64_t)((char *)v6 - (char *)dword_1AE173810) <= 0x18)
        v7 = v6 - dword_1AE173810;
      else
        v7 = v6 - dword_1AE173810 - 7;
      v8 = v4[1];
      if (!v8)
        goto LABEL_19;
      v9 = wcschr(dword_1AE173810, v8);
      if (!v9)
        return 1;
      v10 = (unint64_t)((char *)v9 - (char *)dword_1AE173810) <= 0x18
          ? v9 - dword_1AE173810
          : v9 - dword_1AE173810 - 7;
      if (v5 && v10 > v7)
        return 1;
      v5 = v7 == v10;
      if ((v7 & 1) != 0)
      {
        if (v10 >= v7)
          return 1;
      }
      else if (v10 > v7 + 2)
      {
        return 1;
      }
      if (v10 > v7)
      {
        v11 = romanToArabic(wchar_t const*,unsigned long &)::pNums[v10]
            - romanToArabic(wchar_t const*,unsigned long &)::pNums[v7]
            + *a2;
        *a2 = v11;
        v4 += 2;
      }
      else
      {
LABEL_19:
        v11 = *a2 + romanToArabic(wchar_t const*,unsigned long &)::pNums[v7];
        *a2 = v11;
        ++v4;
      }
      v3 = *v4;
      if (!*v4)
        return v11 == 0;
    }
  }
  else
  {
    v11 = 0;
    return v11 == 0;
  }
}

char *getNextToken(char *a1, uint64_t a2, char *a3)
{
  char v6;
  char *v7;
  int v8;
  char *v9;
  int v11;

  TBuffer<char>::resize(a2, 0);
  if (!a1)
    return 0;
  v6 = *a1;
  if (!*a1)
    return 0;
  v7 = a1;
  while (strchr(a3, v6))
  {
    v8 = *++a1;
    v6 = v8;
    ++v7;
    if (!v8)
      return 0;
  }
  v9 = a1;
  do
  {
    if (strchr(a3, v6))
      break;
    v11 = *++v9;
    v6 = v11;
  }
  while (v11);
  TBuffer<char>::resize(a2, 0);
  TBuffer<char>::insert(a2, 0, a1, v9 - v7);
  return v9;
}

int *getNextToken(int *a1, uint64_t a2, __int32 *a3)
{
  __int32 v6;
  int *v7;
  __int32 v8;
  __int32 v9;
  int *v10;
  __int32 v11;

  TBuffer<wchar_t>::resize(a2, 0);
  if (!a1)
    return 0;
  v6 = *a1;
  if (!*a1)
    return 0;
  v7 = a1;
  while (wcschr(a3, v6))
  {
    v8 = a1[1];
    ++a1;
    v6 = v8;
    ++v7;
    if (!v8)
      return 0;
  }
  v9 = *a1;
  if (!*a1)
    return 0;
  v10 = a1;
  do
  {
    if (wcschr(a3, v9))
      break;
    v11 = v10[1];
    ++v10;
    v9 = v11;
  }
  while (v11);
  TBuffer<wchar_t>::resize(a2, 0);
  TBuffer<wchar_t>::insert(a2, 0, a1, v10 - v7);
  return v10;
}

uint64_t slashEscape(uint64_t result, uint64_t a2)
{
  int *i;
  int v4;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  int v9;

  for (i = (int *)result; ; ++i)
  {
    v4 = *i;
    if (*i > 12)
    {
      switch(v4)
      {
        case 13:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_1AE173864;
          goto LABEL_13;
        case 34:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_1AE17387C;
          goto LABEL_13;
        case 92:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = (int *)&unk_1AE173870;
LABEL_13:
          v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_1AE17384C;
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = (int *)&unk_1AE173858;
      goto LABEL_13;
    }
    if (!v4)
      break;
LABEL_16:
    v9 = *i;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    v8 = 1;
LABEL_14:
    result = TBuffer<wchar_t>::insert(v6, v5, v7, v8);
  }
  return result;
}

{
  _BYTE *i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;

  for (i = (_BYTE *)result; ; ++i)
  {
    v4 = *i;
    if (v4 > 0xC)
    {
      switch(v4)
      {
        case 0xDu:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\r";
          goto LABEL_13;
        case 0x22u:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\\"";
          goto LABEL_13;
        case 0x5Cu:
          v5 = *(_QWORD *)(a2 + 16);
          v6 = a2;
          v7 = "\\\\";
LABEL_13:
          v8 = 2;
          goto LABEL_14;
      }
      goto LABEL_16;
    }
    if (v4 == 9)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "\\t";
      goto LABEL_13;
    }
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "\\n";
      goto LABEL_13;
    }
    if (!*i)
      break;
LABEL_16:
    v9 = v4;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    v8 = 1;
LABEL_14:
    result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  return result;
}

uint64_t tildeEscape(uint64_t result, uint64_t a2)
{
  _BYTE *i;
  unsigned int v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  char v9;

  for (i = (_BYTE *)result; ; ++i)
  {
    v4 = *i;
    if (v4 <= 0x1F)
      break;
    if (v4 != 32)
    {
      if (v4 == 95)
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = a2;
        v7 = "~_";
        goto LABEL_16;
      }
      if (v4 == 126)
      {
        v5 = *(_QWORD *)(a2 + 16);
        v6 = a2;
        v7 = "~~";
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    v5 = *(_QWORD *)(a2 + 16);
    v6 = a2;
    v7 = "_";
LABEL_19:
    v8 = 1;
LABEL_20:
    result = TBuffer<char>::insert(v6, v5, v7, v8);
  }
  if (*i > 9u)
  {
    if (v4 == 10)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "~n";
      goto LABEL_16;
    }
    if (v4 == 13)
    {
      v5 = *(_QWORD *)(a2 + 16);
      v6 = a2;
      v7 = "~r";
LABEL_16:
      v8 = 2;
      goto LABEL_20;
    }
    goto LABEL_18;
  }
  if (v4 == 9)
  {
    v5 = *(_QWORD *)(a2 + 16);
    v6 = a2;
    v7 = "~t";
    goto LABEL_16;
  }
  if (*i)
  {
LABEL_18:
    v9 = v4;
    v5 = *(_QWORD *)(a2 + 16);
    v7 = &v9;
    v6 = a2;
    goto LABEL_19;
  }
  return result;
}

quasar::Geography *quasar::Geography::Geography(quasar::Geography *this)
{
  *(_DWORD *)this = 0;
  quasar::GeoMemoriesConfig::GeoMemoriesConfig((_BYTE *)this + 4);
  *((_QWORD *)this + 8) = 0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_QWORD *)this + 7) = (char *)this + 64;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_QWORD *)this + 10) = (char *)this + 88;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 120) = 0;
  return this;
}

BOOL quasar::Geography::wasConfigLoaded(quasar::Geography *this)
{
  return *(_DWORD *)this != 0;
}

void quasar::Geography::loadFromFile(quasar::Geography *a1, __int128 *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  quasar::ModelLoader *v9;
  std::__shared_weak_count *v10;
  int v11[17];

  quasar::PTree::PTree((quasar::PTree *)v11);
  quasar::PTree::readJsonFromFile((uint64_t)v11, a2);
  _ZNSt3__115allocate_sharedB8ne180100IN6quasar11ModelLoaderENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
  quasar::Geography::loadFromJson(a1, v11, (uint64_t)a2, v9, 0, a3);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  quasar::PTree::~PTree((quasar::PTree *)v11);
}

void sub_1ADD22960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  quasar::PTree::~PTree((quasar::PTree *)va1);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadFromJson(quasar::Geography *a1, int *a2, uint64_t a3, quasar::ModelLoader *a4, int a5, uint64_t a6)
{
  _QWORD *v12;
  const std::locale::facet *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  std::string v32;
  std::string v33;
  char v34;
  std::locale v35;

  v31 = *a2;
  if (*((char *)a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&v32, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  else
    v32 = *(std::string *)(a2 + 2);
  memset(&v33, 0, sizeof(v33));
  std::vector<std::pair<std::string,quasar::PTree>>::__init_with_size[abi:ne180100]<std::pair<std::string,quasar::PTree>*,std::pair<std::string,quasar::PTree>*>(&v33, *((_QWORD *)a2 + 4), *((_QWORD *)a2 + 5), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3));
  v34 = *((_BYTE *)a2 + 56);
  quasar::Geography::loadAndEraseFromJson(a1, (quasar::PTree *)&v31, a3, a4, a5, a6);
  if (!quasar::PTree::empty((quasar::PTree *)&v31))
  {
    if (quasar::gLogLevel >= 5)
    {
      v29 = 0u;
      v30 = 0u;
      v27 = 0u;
      v28 = 0u;
      v25 = 0u;
      v26 = 0u;
      v23 = 0u;
      v24 = 0u;
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v14 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Geo config file loaded but some parts of config JSON have never been used", 73);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v14);
      if (quasar::gLogLevel >= 5)
      {
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v14 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v14);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v14, (uint64_t)"Dumping unused parts of geo config JSON ...", 43);
        std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
        v13 = std::locale::use_facet(&v35, MEMORY[0x1E0DE4A90]);
        ((void (*)(const std::locale::facet *, uint64_t))v13->__vftable[2].~facet_0)(v13, 10);
        std::locale::~locale(&v35);
        std::ostream::put();
        std::ostream::flush();
        quasar::PTree::writeJson((quasar::PTreeHelper *)&v31, v12, 1);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v14);
      }
    }
    *((_BYTE *)a1 + 120) = 1;
  }
  quasar::PTree::~PTree((quasar::PTree *)&v31);
}

void sub_1ADD22BA4(_Unwind_Exception *a1)
{
  uint64_t v1;

  quasar::PTree::~PTree((quasar::PTree *)(v1 - 136));
  _Unwind_Resume(a1);
}

void quasar::Geography::loadFromFile(quasar::Geography *a1, __int128 *a2, quasar::ModelLoader *a3, uint64_t a4)
{
  int v8[68];

  quasar::PTree::PTree((quasar::PTree *)v8);
  quasar::PTree::readJsonFromFile((uint64_t)v8, a2);
  quasar::Geography::loadFromJson(a1, v8, (uint64_t)a2, a3, 1, a4);
  quasar::PTree::~PTree((quasar::PTree *)v8);
}

void sub_1ADD22C74(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25)
{
  void *v26;
  void *v27;
  _QWORD *v28;
  const char *v29;
  size_t v30;

  v26 = __cxa_begin_catch(a1);
  if (a2 == 2)
  {
    if (quasar::gLogLevel >= 1)
    {
      v27 = v26;
      a24 = 0u;
      a25 = 0u;
      a22 = 0u;
      a23 = 0u;
      a20 = 0u;
      a21 = 0u;
      a18 = 0u;
      a19 = 0u;
      a16 = 0u;
      a17 = 0u;
      a14 = 0u;
      a15 = 0u;
      a12 = 0u;
      a13 = 0u;
      a10 = 0u;
      a11 = 0u;
      a9 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
      v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"GeoLM: Error while loading geo-config.json file: ", 49);
      v29 = (const char *)(*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
      v30 = strlen(v29);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
      quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
    }
  }
  else if (quasar::gLogLevel >= 1)
  {
    a24 = 0u;
    a25 = 0u;
    a22 = 0u;
    a23 = 0u;
    a20 = 0u;
    a21 = 0u;
    a18 = 0u;
    a19 = 0u;
    a16 = 0u;
    a17 = 0u;
    a14 = 0u;
    a15 = 0u;
    a12 = 0u;
    a13 = 0u;
    a10 = 0u;
    a11 = 0u;
    a9 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&a9, (uint64_t)"GeoLM: Unknown exception while reading geo-config.json", 54);
    quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADD22C5CLL);
}

void sub_1ADD22D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a9);
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void quasar::Geography::loadAndEraseFromJson(quasar::Geography *a1, quasar::PTree *a2, uint64_t a3, quasar::ModelLoader *a4, int a5, uint64_t a6)
{
  quasar::filesystem::Path *v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v17[17];
  _QWORD v18[3];
  char v19;
  _QWORD v20[3];
  char v21;

  v12 = (quasar::filesystem::Path *)quasar::filesystem::Path::Path(v20, (__int128 *)a3);
  quasar::filesystem::Path::parent_path(v12, v18);
  quasar::Geography::loadGeoConfigVersion(a1, a2);
  quasar::Geography::loadCacheRegionId(a1, a2);
  quasar::Geography::loadPlaceholderList(a1, a2);
  quasar::Geography::loadRegions(a1, a2, a4, a5, (quasar::filesystem::Path *)v18);
  quasar::Geography::loadRegionsBitmap(a1, (uint64_t)a2, (uint64_t)v18, a6);
  if (quasar::gLogLevel >= 3)
  {
    memset(v17, 0, sizeof(v17));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v17);
    v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"Finished loading geography from ", 32);
    v14 = *(char *)(a3 + 23);
    if (v14 >= 0)
      v15 = a3;
    else
      v15 = *(_QWORD *)a3;
    if (v14 >= 0)
      v16 = *(unsigned __int8 *)(a3 + 23);
    else
      v16 = *(_QWORD *)(a3 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)v17);
  }
  v18[0] = &unk_1E5D343A0;
  if (v19 < 0)
    operator delete((void *)v18[1]);
  v20[0] = &unk_1E5D343A0;
  if (v21 < 0)
    operator delete((void *)v20[1]);
}

void sub_1ADD22F34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 128) = &unk_1E5D343A0;
  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  *(_QWORD *)(v1 - 96) = &unk_1E5D343A0;
  if (*(char *)(v1 - 65) < 0)
    operator delete(*(void **)(v1 - 88));
  _Unwind_Resume(exception_object);
}

uint64_t quasar::Geography::loadGeoConfigVersion(quasar::Geography *this, quasar::PTree *a2)
{
  int v4;
  _DWORD *v5;
  uint64_t result;
  void *__p[2];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;

  std::string::basic_string[abi:ne180100]<0>(__p, "geo-config-version");
  v4 = quasar::PTree::getAndEraseInt<int>((uint64_t)a2, (__int128 *)__p);
  if (SBYTE7(v8) < 0)
    operator delete(__p[0]);
  if ((v4 - 1) >= 4)
  {
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    v8 = 0u;
    v9 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Unsupported geo config version ", 31);
    std::ostream::operator<<();
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  *(_DWORD *)this = v4;
  v5 = (_DWORD *)operator new();
  quasar::GeoVersionChecker::GeoVersionChecker(v5, *(_DWORD *)this);
  result = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = v5;
  if (result)
    return MEMORY[0x1AF44D190](result, 0x1000C4052888210);
  return result;
}

void sub_1ADD230B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  MEMORY[0x1AF44D190](v15, 0x1000C4052888210);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadCacheRegionId(quasar::Geography *this, quasar::PTree *a2)
{
  unsigned __int16 BoolOptional;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(__p, "cache-region-id-enabled");
  BoolOptional = quasar::PTree::getBoolOptional((uint64_t)a2, (uint64_t)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  if (BoolOptional >= 0x100u)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "cache-region-id-enabled");
    quasar::PTree::erase((uint64_t)a2, (unsigned __int8 *)__p);
    if (v6 < 0)
      operator delete(__p[0]);
    *((_BYTE *)this + 4) = BoolOptional;
  }
}

void sub_1ADD23190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::Geography::loadPlaceholderList(quasar::Geography *this, quasar::PTree *a2)
{
  uint64_t ChildOptional;
  uint64_t v5;
  _DWORD *v6;
  std::string *v7;
  __int128 v8;
  void *v9[2];
  char v10;
  void *__p[2];
  char v12;
  std::string v13;
  __int128 v14;
  std::string::size_type v15;
  void **v16;

  std::string::basic_string[abi:ne180100]<0>(&v14, "region-dependent-variable-list");
  ChildOptional = quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)&v14);
  v5 = ChildOptional;
  if (SHIBYTE(v15) < 0)
  {
    operator delete((void *)v14);
    if (!v5)
      return;
  }
  else if (!ChildOptional)
  {
    return;
  }
  v6 = (_DWORD *)*((_QWORD *)this + 1);
  std::string::basic_string[abi:ne180100]<0>(&v13, "region-dependent-variable-list");
  v7 = std::string::append(&v13, " field not allowed");
  v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v15 = v7->__r_.__value_.__r.__words[2];
  v14 = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::GeoVersionChecker::enforceVersion(v6, (uint64_t)&v14, 4, 4, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    operator delete((void *)v14);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(__p, "region-dependent-variable-list");
  quasar::PTree::getAndEraseString((uint64_t)a2, (__int128 *)__p, &v13);
  std::string::basic_string[abi:ne180100]<0>(v9, " ,");
  quasar::splitStringSimple((uint64_t)&v13, (uint64_t *)v9, (uint64_t *)&v14);
  std::vector<std::string>::__vdeallocate((std::vector<std::wstring> *)((char *)this + 128));
  *((_OWORD *)this + 8) = v14;
  *((_QWORD *)this + 18) = v15;
  v15 = 0;
  v14 = 0uLL;
  v16 = (void **)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v16);
  if (v10 < 0)
    operator delete(v9[0]);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(__p[0]);
}

void sub_1ADD23350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

void quasar::Geography::loadRegions(quasar::Geography *this, quasar::PTree *a2, quasar::ModelLoader *a3, int a4, quasar::filesystem::Path *a5)
{
  quasar::PTree *ChildOptional;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *PlaceholderToFileMap;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  std::string *v21;
  std::string::size_type v22;
  uint64_t *BitmapRegion;
  uint64_t v24;
  kaldi::quasar::Vocab *v25;
  kaldi::quasar::Vocab **v26;
  int v27;
  BOOL v28;
  kaldi::quasar::Vocab **v29;
  _QWORD *v30;
  uint64_t *v31;
  std::string *v32;
  __int128 v33;
  std::string *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unsigned __int8 *v38;
  std::string *i;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  std::string *v45;
  std::string::size_type size;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  std::string *v50;
  std::string::size_type v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  std::string::size_type v57;
  _QWORD *v58;
  _QWORD *v59;
  std::string *v60;
  std::string::size_type v61;
  _QWORD *v62;
  _QWORD *v63;
  quasar::PTree *v64;
  kaldi::quasar::Vocab **v65;
  int v68;
  void *__p[2];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  std::string v86;
  __int128 v87;
  std::string v88;
  unsigned __int8 *v89;
  std::string *v90;
  unint64_t v91;

  std::string::basic_string[abi:ne180100]<0>(__p, "regions");
  ChildOptional = (quasar::PTree *)quasar::PTree::getChildOptional((uint64_t)a2, (uint64_t)__p);
  if (SBYTE7(v70) < 0)
    operator delete(__p[0]);
  if (ChildOptional)
  {
    v64 = a2;
    v89 = 0;
    v90 = 0;
    v91 = 0;
    v9 = quasar::PTree::begin(ChildOptional);
    v10 = quasar::PTree::end(ChildOptional);
    if (v9 != v10)
    {
      v65 = (kaldi::quasar::Vocab **)((char *)this + 64);
      v11 = (_QWORD *)((char *)this + 16);
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)v9, *(_QWORD *)(v9 + 8));
        }
        else
        {
          v12 = *(_OWORD *)v9;
          v88.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
          *(_OWORD *)&v88.__r_.__value_.__l.__data_ = v12;
        }
        _ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeoRegionENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v87);
        quasar::GeoRegion::loadAndEraseFromJson(v87, (uint64_t)&v88, (quasar::PTree *)(v9 + 24), *((_DWORD **)this + 1));
        v13 = v11;
        if (*(int *)this >= 4)
        {
          PlaceholderToFileMap = (_QWORD *)quasar::GeoRegion::getPlaceholderToFileMap((quasar::GeoRegion *)v87);
          v16 = PlaceholderToFileMap + 1;
          v15 = (_QWORD *)*PlaceholderToFileMap;
          if ((_QWORD *)*PlaceholderToFileMap != PlaceholderToFileMap + 1)
          {
            do
            {
              if (*((char *)v15 + 55) < 0)
                std::string::__init_copy_ctor_external(&v86, (const std::string::value_type *)v15[4], v15[5]);
              else
                v86 = *(std::string *)(v15 + 4);
              if (quasar::isPlaceholder((unsigned __int8 *)&v86)
                && std::__find_impl[abi:ne180100]<std::string *,std::string *,std::string,std::__identity>(*((_QWORD *)this + 16), *((_QWORD *)this + 17), (unsigned __int8 **)&v86) == *((_QWORD *)this + 17))
              {
                v84 = 0u;
                v85 = 0u;
                v82 = 0u;
                v83 = 0u;
                v80 = 0u;
                v81 = 0u;
                v78 = 0u;
                v79 = 0u;
                v77 = 0u;
                v75 = 0u;
                v76 = 0u;
                v73 = 0u;
                v74 = 0u;
                v71 = 0u;
                v72 = 0u;
                *(_OWORD *)__p = 0u;
                v70 = 0u;
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                v44 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Placeholder ", 12);
                if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v45 = &v86;
                else
                  v45 = (std::string *)v86.__r_.__value_.__r.__words[0];
                if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  size = HIBYTE(v86.__r_.__value_.__r.__words[2]);
                else
                  size = v86.__r_.__value_.__l.__size_;
                v47 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)v45, size);
                v48 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v47, (uint64_t)" not in ", 8);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v48, (uint64_t)"region-dependent-variable-list", 30);
                quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
              }
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v86.__r_.__value_.__l.__data_);
              v17 = (_QWORD *)v15[1];
              if (v17)
              {
                do
                {
                  v18 = v17;
                  v17 = (_QWORD *)*v17;
                }
                while (v17);
              }
              else
              {
                do
                {
                  v18 = (_QWORD *)v15[2];
                  v19 = *v18 == (_QWORD)v15;
                  v15 = v18;
                }
                while (!v19);
              }
              v15 = v18;
            }
            while (v18 != v16);
          }
        }
        v11 = v13;
        if (a4 && !quasar::GeoRegion::loadModels((quasar::GeoRegion *)v87, a3, a5))
          goto LABEL_77;
        if (*(_QWORD *)quasar::GeoRegion::getCircleRegion((quasar::GeoRegion *)v87))
        {
          std::vector<std::shared_ptr<quasar::FeatureExtractor>>::push_back[abi:ne180100]((char **)this + 4, &v87);
          if (quasar::gLogLevel < 3)
            goto LABEL_69;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          *(_OWORD *)__p = 0u;
          v70 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded circle geoRegion=\"", 25);
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v88;
          else
            v21 = (std::string *)v88.__r_.__value_.__r.__words[0];
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
          else
            v22 = v88.__r_.__value_.__l.__size_;
        }
        else
        {
          if (!*(_QWORD *)quasar::GeoRegion::getBitmapRegion((quasar::GeoRegion *)v87))
          {
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v77 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            *(_OWORD *)__p = 0u;
            v70 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v49 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Internal error. At this point geoRegion=", 40);
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v50 = &v88;
            else
              v50 = (std::string *)v88.__r_.__value_.__r.__words[0];
            if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
            else
              v51 = v88.__r_.__value_.__l.__size_;
            v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v49, (uint64_t)v50, v51);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)" must have either bitmap or circle info", 39);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          v68 = 0;
          BitmapRegion = (uint64_t *)quasar::GeoRegion::getBitmapRegion((quasar::GeoRegion *)v87);
          v68 = fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::Start(*BitmapRegion);
          kaldi::quasar::Vocab::OOvWord((kaldi::quasar::Vocab *)v87, (std::string *)__p);
          if (SBYTE7(v70) < 0)
          {
            if (__p[1] != (void *)8)
            {
              operator delete(__p[0]);
LABEL_51:
              v25 = *v65;
              if (*v65)
              {
                v26 = (kaldi::quasar::Vocab **)((char *)this + 64);
                do
                {
                  v27 = *((_DWORD *)v25 + 8);
                  v28 = v27 < v68;
                  if (v27 >= v68)
                    v29 = (kaldi::quasar::Vocab **)v25;
                  else
                    v29 = (kaldi::quasar::Vocab **)((char *)v25 + 8);
                  if (!v28)
                    v26 = (kaldi::quasar::Vocab **)v25;
                  v25 = *v29;
                }
                while (*v29);
                if (v26 != v65 && v68 >= *((_DWORD *)v26 + 8))
                {
                  v84 = 0u;
                  v85 = 0u;
                  v82 = 0u;
                  v83 = 0u;
                  v80 = 0u;
                  v81 = 0u;
                  v78 = 0u;
                  v79 = 0u;
                  v77 = 0u;
                  v75 = 0u;
                  v76 = 0u;
                  v73 = 0u;
                  v74 = 0u;
                  v71 = 0u;
                  v72 = 0u;
                  *(_OWORD *)__p = 0u;
                  v70 = 0u;
                  kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
                  v53 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Same ", 5);
                  v54 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)"bitmap-color", 12);
                  v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)" in region ", 11);
                  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v56 = &v88;
                  else
                    v56 = (std::string *)v88.__r_.__value_.__r.__words[0];
                  if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v57 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
                  else
                    v57 = v88.__r_.__value_.__l.__size_;
                  v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)v56, v57);
                  v59 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)" and ", 5);
                  kaldi::quasar::Vocab::OOvWord(v26[5], &v86);
                  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v60 = &v86;
                  else
                    v60 = (std::string *)v86.__r_.__value_.__r.__words[0];
                  if ((v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v61 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
                  else
                    v61 = v86.__r_.__value_.__l.__size_;
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v59, (uint64_t)v60, v61);
                  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v86.__r_.__value_.__l.__data_);
                  quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
                }
              }
              std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::__emplace_unique_key_args<int,int &,std::shared_ptr<quasar::GeoRegion>&>((uint64_t **)this + 7, &v68, &v68, &v87);
              if (quasar::gLogLevel < 3)
                goto LABEL_69;
              v84 = 0u;
              v85 = 0u;
              v82 = 0u;
              v83 = 0u;
              v80 = 0u;
              v81 = 0u;
              v78 = 0u;
              v79 = 0u;
              v77 = 0u;
              v75 = 0u;
              v76 = 0u;
              v73 = 0u;
              v74 = 0u;
              v71 = 0u;
              v72 = 0u;
              *(_OWORD *)__p = 0u;
              v70 = 0u;
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
              v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded bitmap geoRegion=\"", 25);
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v21 = &v88;
              else
                v21 = (std::string *)v88.__r_.__value_.__r.__words[0];
              if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
              else
                v22 = v88.__r_.__value_.__l.__size_;
              goto LABEL_68;
            }
            v24 = *(_QWORD *)__p[0];
            operator delete(__p[0]);
            v19 = v24 == 0x6D6C72657473616DLL;
            v11 = v13;
            if (!v19)
              goto LABEL_51;
          }
          else if (SBYTE7(v70) != 8 || __p[0] != (void *)0x6D6C72657473616DLL)
          {
            goto LABEL_51;
          }
          if (*v11)
          {
            v84 = 0u;
            v85 = 0u;
            v82 = 0u;
            v83 = 0u;
            v80 = 0u;
            v81 = 0u;
            v78 = 0u;
            v79 = 0u;
            v77 = 0u;
            v75 = 0u;
            v76 = 0u;
            v73 = 0u;
            v74 = 0u;
            v71 = 0u;
            v72 = 0u;
            *(_OWORD *)__p = 0u;
            v70 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Multiple default region ", 24);
            v63 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)"masterlm", 8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v63, (uint64_t)" in geo-config", 14);
            quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
          }
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v11, (uint64_t *)&v87);
          if (quasar::gLogLevel < 3)
            goto LABEL_69;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          v80 = 0u;
          v81 = 0u;
          v78 = 0u;
          v79 = 0u;
          v77 = 0u;
          v75 = 0u;
          v76 = 0u;
          v73 = 0u;
          v74 = 0u;
          v71 = 0u;
          v72 = 0u;
          *(_OWORD *)__p = 0u;
          v70 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          v20 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded default geoRegion=\"", 26);
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v21 = &v88;
          else
            v21 = (std::string *)v88.__r_.__value_.__r.__words[0];
          if ((v88.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = HIBYTE(v88.__r_.__value_.__r.__words[2]);
          else
            v22 = v88.__r_.__value_.__l.__size_;
        }
LABEL_68:
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)v21, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"\"", 1);
        quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
LABEL_69:
        v86.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
        v31 = std::__tree<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 10, (const void **)&v88.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)&v86);
        std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v31 + 7, (uint64_t *)&v87);
        if (quasar::PTree::empty((quasar::PTree *)(v9 + 24)))
        {
          v32 = v90;
          if ((unint64_t)v90 >= v91)
          {
            v34 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v89, (__int128 *)&v88);
          }
          else
          {
            if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
            {
              std::string::__init_copy_ctor_external(v90, v88.__r_.__value_.__l.__data_, v88.__r_.__value_.__l.__size_);
            }
            else
            {
              v33 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
              v90->__r_.__value_.__r.__words[2] = v88.__r_.__value_.__r.__words[2];
              *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
            }
            v34 = v32 + 1;
          }
          v90 = v34;
        }
LABEL_77:
        v35 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
        if (*((_QWORD *)&v87 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v87 + 1) + 8);
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v88.__r_.__value_.__l.__data_);
        v9 += 88;
      }
      while (v9 != v10);
    }
    v38 = v89;
    for (i = v90; v38 != (unsigned __int8 *)i; v38 += 24)
      quasar::PTree::erase((uint64_t)ChildOptional, v38);
    if (quasar::PTree::empty(ChildOptional))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "regions");
      quasar::PTree::erase((uint64_t)v64, (unsigned __int8 *)__p);
      if (SBYTE7(v70) < 0)
        operator delete(__p[0]);
    }
    __p[0] = &v89;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
  v40 = *((_QWORD *)this + 2);
  if (*(int *)this < 4)
  {
    if (v40)
    {
      v84 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0u;
      v80 = 0u;
      v81 = 0u;
      v78 = 0u;
      v79 = 0u;
      v77 = 0u;
      v75 = 0u;
      v76 = 0u;
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      *(_OWORD *)__p = 0u;
      v70 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Default region is not part of geo-config but given in main-config file.");
LABEL_129:
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
    }
  }
  else if (!v40)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    *(_OWORD *)__p = 0u;
    v70 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Default region ", 15);
    v42 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)"masterlm", 8);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, " missing in geo-config.");
    goto LABEL_129;
  }
  if (quasar::gLogLevel >= 3)
  {
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v77 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    *(_OWORD *)__p = 0u;
    v70 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Loaded geoCircleRegions=", 24);
    v43 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" geoBitmapRegions=", 18);
    std::ostream::operator<<();
    quasar::QuasarProdInfoMessage::~QuasarProdInfoMessage((quasar::QuasarProdInfoMessage *)__p);
  }
}

void sub_1ADD23EA4()
{
  JUMPOUT(0x1ADD23EC4);
}

void sub_1ADD23EB0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v4;

  if (*(char *)(v2 - 169) < 0)
    operator delete(*(void **)(v1 + 272));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v2 - 160);
  if (*(char *)(v2 - 121) < 0)
    operator delete(*(void **)(v1 + 320));
  v4 = (void **)(v2 - 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  _Unwind_Resume(a1);
}

void quasar::Geography::loadRegionsBitmap(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ChildOptional;
  quasar::PTree *v9;
  _DWORD *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  void *v33[2];
  char v34;

  std::string::basic_string[abi:ne180100]<0>(__p, "regions-bitmap");
  ChildOptional = quasar::PTree::getChildOptional(a2, (uint64_t)__p);
  v9 = (quasar::PTree *)ChildOptional;
  if (SBYTE7(v17) < 0)
  {
    operator delete(__p[0]);
    if (v9)
      goto LABEL_3;
  }
  else if (ChildOptional)
  {
LABEL_3:
    v10 = (_DWORD *)a1[1];
    std::string::basic_string[abi:ne180100]<0>(__p, "The regions-bitmap section is not available");
    std::string::basic_string[abi:ne180100]<0>(v33, "");
    quasar::GeoVersionChecker::enforceVersion(v10, (uint64_t)__p, 2, 4, (uint64_t)v33);
    if (v34 < 0)
      operator delete(v33[0]);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    _ZNSt3__115allocate_sharedB8ne180100IN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(__p);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)(a1 + 13), (__int128 *)__p);
    v11 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v12 = (unint64_t *)((char *)__p[1] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    quasar::RegionsBitmapData::loadAndEraseFromJson(a1[13], (uint64_t)v9, a3, a4);
    if (quasar::PTree::empty(v9))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "regions-bitmap");
      quasar::PTree::erase(a2, (unsigned __int8 *)__p);
      if (SBYTE7(v17) < 0)
        operator delete(__p[0]);
    }
    return;
  }
  if (a1[9] && quasar::gLogLevel >= 2)
  {
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"The config file contains some bitmap regions but the ", 53);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"regions-bitmap", 14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)" field is missing", 17);
    quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)__p);
  }
}

void sub_1ADD240FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13, uint64_t a14, __int128 a15, __int128 a16, __int128 a17, __int128 a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,__int128 a23,__int128 a24,__int128 a25,__int128 a26,__int128 a27,__int128 a28,__int128 a29)
{
  if (a13 < 0)
    operator delete((void *)__p);
  _Unwind_Resume(exception_object);
}

void quasar::Geography::addRegionContext(uint64_t a1, std::vector<std::string> *a2, kaldi::quasar::Vocab *this, uint64_t a4)
{
  std::string *v8;
  std::string *value;
  std::vector<std::string>::pointer end;
  __int128 v11;
  std::vector<std::string>::pointer begin;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  std::string *v20;
  int v21;
  const void ***RegionalFstLmMap;
  const void ***v23;
  const void **v24;
  char v25;
  _QWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  std::string *v32;
  std::string::size_type size;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  const void **v38;
  const void ***v39;
  BOOL v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  std::string v58;
  std::string v59;

  v8 = (std::string *)&a2[2];
  kaldi::quasar::Vocab::OOvWord(this, &v59);
  quasar::GeoMemories::rememberLastRegionId(v8, &v59, (_BYTE *)(a1 + 4));
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v59.__r_.__value_.__l.__data_);
  kaldi::quasar::Vocab::OOvWord(this, &v58);
  value = a2[3].__end_cap_.__value_;
  end = a2[3].__end_;
  if (end >= value)
  {
    begin = a2[3].__begin_;
    v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3);
    v14 = v13 + 1;
    if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x555555555555555)
      v16 = 0xAAAAAAAAAAAAAAALL;
    else
      v16 = v14;
    *(_QWORD *)&v43 = (char *)a2 + 88;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&a2[3].__end_cap_, v16);
    else
      v17 = 0;
    v18 = &v17[24 * v13];
    *(_QWORD *)&v41 = v17;
    *((_QWORD *)&v41 + 1) = v18;
    *((_QWORD *)&v42 + 1) = &v17[24 * v16];
    v19 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    *((_QWORD *)v18 + 2) = *((_QWORD *)&v58.__r_.__value_.__l + 2);
    *(_OWORD *)v18 = v19;
    memset(&v58, 0, sizeof(v58));
    *(_QWORD *)&v42 = v18 + 24;
    std::vector<std::string>::__swap_out_circular_buffer(a2 + 3, (std::__split_buffer<std::string> *)&v41);
    v20 = a2[3].__end_;
    std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&v41);
    v21 = SHIBYTE(v58.__r_.__value_.__r.__words[2]);
    a2[3].__end_ = v20;
    if (v21 < 0)
      operator delete(v58.__r_.__value_.__l.__data_);
  }
  else
  {
    v11 = *(_OWORD *)&v58.__r_.__value_.__l.__data_;
    end->__r_.__value_.__r.__words[2] = v58.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v11;
    a2[3].__end_ = end + 1;
  }
  RegionalFstLmMap = (const void ***)quasar::GeoRegion::getRegionalFstLmMap(this);
  v23 = RegionalFstLmMap + 1;
  v24 = *RegionalFstLmMap;
  if (*RegionalFstLmMap != (const void **)(RegionalFstLmMap + 1))
  {
    do
    {
      std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>((uint64_t **)a2, v24 + 4, (__int128 *)v24 + 2);
      if ((v25 & 1) != 0 && quasar::gLogLevel >= 5)
      {
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v42 = 0u;
        v43 = 0u;
        v41 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
        v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)"Geo ClassLM template=", 21);
        v27 = *((char *)v24 + 55);
        if (v27 >= 0)
          v28 = (uint64_t)(v24 + 4);
        else
          v28 = (uint64_t)v24[4];
        if (v27 >= 0)
          v29 = *((unsigned __int8 *)v24 + 55);
        else
          v29 = (uint64_t)v24[5];
        v30 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, v28, v29);
        v31 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)" assigned to FST from geoRegion=", 32);
        kaldi::quasar::Vocab::OOvWord(this, &v58);
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v32 = &v58;
        else
          v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v58.__r_.__value_.__r.__words[2]);
        else
          size = v58.__r_.__value_.__l.__size_;
        v34 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, size);
        v35 = *(char *)(a4 + 23);
        if (v35 >= 0)
          v36 = a4;
        else
          v36 = *(_QWORD *)a4;
        if (v35 >= 0)
          v37 = *(unsigned __int8 *)(a4 + 23);
        else
          v37 = *(_QWORD *)(a4 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, v36, v37);
        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v58.__r_.__value_.__l.__data_);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v41);
      }
      v38 = (const void **)v24[1];
      if (v38)
      {
        do
        {
          v39 = (const void ***)v38;
          v38 = (const void **)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (const void ***)v24[2];
          v40 = *v39 == v24;
          v24 = (const void **)v39;
        }
        while (!v40);
      }
      v24 = (const void **)v39;
    }
    while (v39 != v23);
  }
}

void sub_1ADD24580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&a9);
  if (*(char *)(v9 - 113) < 0)
    operator delete(*(void **)(v9 - 136));
  _Unwind_Resume(a1);
}

uint64_t quasar::Geography::getGeoMemoriesConfig(quasar::Geography *this)
{
  return (uint64_t)this + 4;
}

void quasar::Geography::addBitmapRegionContext(uint64_t a1, std::vector<std::string> *a2, quasar::Location *a3)
{
  quasar::RegionsBitmapData *v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  kaldi::quasar::Vocab *v12;
  void *__p[2];
  char v14;

  v4 = *(quasar::RegionsBitmapData **)(a1 + 104);
  if (v4)
  {
    v6 = quasar::RegionsBitmapData::lookupBitmapColorForLocation(v4, a3);
    if (v6 >= 1)
    {
      v7 = *(_QWORD *)(a1 + 64);
      if (v7)
      {
        v8 = a1 + 64;
        do
        {
          v9 = *(_DWORD *)(v7 + 32);
          v10 = v9 < v6;
          if (v9 >= v6)
            v11 = (uint64_t *)v7;
          else
            v11 = (uint64_t *)(v7 + 8);
          if (!v10)
            v8 = v7;
          v7 = *v11;
        }
        while (*v11);
        if (v8 != a1 + 64 && v6 >= *(_DWORD *)(v8 + 32))
        {
          v12 = *(kaldi::quasar::Vocab **)(v8 + 40);
          std::string::basic_string[abi:ne180100]<0>(__p, " based on regions bitmap");
          quasar::Geography::addRegionContext(a1, a2, v12, (uint64_t)__p);
          if (v14 < 0)
            operator delete(__p[0]);
        }
      }
    }
  }
}

void sub_1ADD246B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void quasar::Geography::getGeoContext(uint64_t a1@<X0>, quasar::Location *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, std::vector<std::string> **a5@<X8>)
{
  char *v10;
  std::vector<std::string> *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  kaldi::quasar::Vocab *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  kaldi::quasar::Vocab *v22;
  kaldi::quasar::Vocab *v23;
  std::__shared_weak_count *v24;
  void *__p[2];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;

  v10 = (char *)operator new(0x78uLL);
  *((_QWORD *)v10 + 2) = 0;
  *(_QWORD *)v10 = &unk_1E5D452A8;
  *((_QWORD *)v10 + 1) = 0;
  *((_QWORD *)v10 + 8) = 0;
  *((_QWORD *)v10 + 7) = 0;
  *((_QWORD *)v10 + 5) = 0;
  *((_QWORD *)v10 + 6) = v10 + 56;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  a5[1] = (std::vector<std::string> *)v10;
  *((_QWORD *)v10 + 4) = 0;
  *((_QWORD *)v10 + 3) = v10 + 32;
  v11 = (std::vector<std::string> *)(v10 + 24);
  *a5 = (std::vector<std::string> *)(v10 + 24);
  v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0)
    v12 = *(_QWORD *)(a4 + 8);
  if (v12)
  {
    if (quasar::gLogLevel >= 5)
    {
      v40 = 0uLL;
      v41 = 0uLL;
      v38 = 0uLL;
      v39 = 0uLL;
      v36 = 0uLL;
      v37 = 0uLL;
      v34 = 0uLL;
      v35 = 0uLL;
      v32 = 0uLL;
      v33 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v28 = 0uLL;
      v29 = 0uLL;
      v26 = 0uLL;
      v27 = 0uLL;
      *(_OWORD *)__p = 0uLL;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      v13 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Using regionId ", 15);
      v14 = *(char *)(a4 + 23);
      if (v14 >= 0)
        v15 = a4;
      else
        v15 = *(_QWORD *)a4;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a4 + 23);
      else
        v16 = *(_QWORD *)(a4 + 8);
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" instead of location", 20);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)__p);
    }
    quasar::Geography::resolveRegionId(a1, a4, &v23);
    v18 = v23;
    if (v23)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, " based on known region id");
      quasar::Geography::addRegionContext(a1, v11, v18, (uint64_t)__p);
      if (SBYTE7(v26) < 0)
        operator delete(__p[0]);
    }
    v19 = v24;
    if (v24)
    {
      p_shared_owners = (unint64_t *)&v24->__shared_owners_;
      do
        v21 = __ldaxr(p_shared_owners);
      while (__stlxr(v21 - 1, p_shared_owners));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v11 = *a5;
  }
  else if (quasar::Location::isUnknown(a2))
  {
    quasar::Geography::addContextForUnknownLocation(a1, v11, a2, a3);
  }
  else
  {
    quasar::Geography::addContextForKnownLocation(a1, v11, a2);
  }
  if (v11[3].__begin_ == v11[3].__end_ && *(int *)a1 >= 4)
  {
    v22 = *(kaldi::quasar::Vocab **)(a1 + 16);
    std::string::basic_string[abi:ne180100]<0>(__p, " based on default region");
    quasar::Geography::addRegionContext(a1, v11, v22, (uint64_t)__p);
    if (SBYTE7(v26) < 0)
      operator delete(__p[0]);
  }
}

void sub_1ADD2491C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v16);
  _Unwind_Resume(a1);
}

void quasar::Geography::resolveRegionId(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  int v11;
  const void *v12;
  uint64_t v13;
  _OWORD v14[17];

  v6 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::find<std::string>(a1 + 80, (const void **)a2);
  if (a1 + 88 == v6)
  {
    if (quasar::gLogLevel >= 5)
    {
      memset(v14, 0, sizeof(v14));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Cannot resolve regionId=", 24);
      v11 = *(char *)(a2 + 23);
      if (v11 >= 0)
        v12 = (const void *)a2;
      else
        v12 = *(const void **)a2;
      if (v11 >= 0)
        v13 = *(unsigned __int8 *)(a2 + 23);
      else
        v13 = *(_QWORD *)(a2 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, v13);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v14);
    }
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    v7 = *(_QWORD *)(v6 + 64);
    *a3 = *(_QWORD *)(v6 + 56);
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
}

void sub_1ADD24A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::Geography::addContextForUnknownLocation(uint64_t a1, std::vector<std::string> *a2, quasar::Location *this, uint64_t a4)
{
  std::runtime_error *exception;
  std::string *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  std::string v28;

  if (!quasar::Location::isUnknown(this))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    quasar::Location::toString((uint64_t *)&v28, this);
    v9 = std::string::insert(&v28, 0, "Internal error, unknown location expected but got ");
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    *(_QWORD *)&v12 = *((_QWORD *)&v9->__r_.__value_.__l + 2);
    v11 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v11);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (quasar::Location::isDenied(this))
  {
    if (quasar::gLogLevel >= 5)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Access to geo location denied", 29);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v11);
    }
  }
  else if (quasar::Location::isUndefined(this))
  {
    quasar::Geography::addContextFromOldMemories(a1, a2, a4);
  }
}

void sub_1ADD24BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&__p);
  _Unwind_Resume(a1);
}

void quasar::Geography::addContextForKnownLocation(uint64_t a1, std::vector<std::string> *a2, quasar::Location *this)
{
  _QWORD *v6;
  std::runtime_error *exception;
  quasar::Location *v8;
  std::runtime_error *v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  std::string v29;

  if (quasar::Location::isUnknown(this))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v8 = this;
    v9 = exception;
    quasar::Location::toString((uint64_t *)&v29, v8);
    v10 = std::string::insert(&v29, 0, "Internal error, known location expected but got ");
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    *(_QWORD *)&v13 = *((_QWORD *)&v10->__r_.__value_.__l + 2);
    v12 = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v9, (const std::string *)&v12);
    __cxa_throw(v9, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (quasar::gLogLevel >= 5)
  {
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v12 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Computing geo context for ", 26);
    quasar::operator<<(v6, (double *)this);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v12);
  }
  quasar::Geography::addBitmapRegionContext(a1, a2, this);
  quasar::Geography::addCircleRegionsContext(a1, a2, this);
}

void sub_1ADD24D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;
  uint64_t v16;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v16 - 33) < 0)
  {
    operator delete(*(void **)(v16 - 56));
    if ((v15 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v14);
  goto LABEL_8;
}

void quasar::Geography::addCircleRegionsContext(uint64_t a1, std::vector<std::string> *a2, quasar::Location *a3)
{
  uint64_t v5;
  unint64_t v7;
  quasar::GeoRegion *v8;
  quasar::CircleRegion **CircleRegion;
  void *v10;
  double DistanceKm;
  quasar::CircleRegion **v12;
  double *v13;
  double *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  double *v21;
  double *v22;
  char *v23;
  _QWORD *v24;
  std::string *p_p;
  std::string::size_type size;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  int *v31;
  int *v32;
  kaldi::quasar::Vocab *v33;
  std::string __p;
  void *v35[2];
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  double *v52;
  double *v53;
  double *v54;

  v52 = 0;
  v53 = 0;
  v54 = 0;
  v5 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) == v5)
  {
    v28 = 0;
    v27 = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = *(quasar::GeoRegion **)(v5 + 16 * v7);
      CircleRegion = (quasar::CircleRegion **)quasar::GeoRegion::getCircleRegion(v8);
      v35[0] = COERCE_VOID_(quasar::CircleRegion::getLocation(*CircleRegion));
      v35[1] = v10;
      DistanceKm = quasar::Location::getDistanceKm(a3, (const quasar::Location *)v35);
      v12 = (quasar::CircleRegion **)quasar::GeoRegion::getCircleRegion(v8);
      if (DistanceKm <= quasar::CircleRegion::getMaxRadiusKm(*v12))
      {
        v13 = v53;
        if (v53 >= v54)
        {
          v15 = ((char *)v53 - (char *)v52) >> 4;
          v16 = v15 + 1;
          if ((unint64_t)(v15 + 1) >> 60)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v17 = (char *)v54 - (char *)v52;
          if (v54 - v52 > v16)
            v16 = v17 >> 3;
          if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF0)
            v18 = 0xFFFFFFFFFFFFFFFLL;
          else
            v18 = v16;
          if (v18)
            v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v54, v18);
          else
            v19 = 0;
          v20 = &v19[16 * v15];
          *(double *)v20 = DistanceKm;
          *((_QWORD *)v20 + 1) = v7;
          v22 = v52;
          v21 = v53;
          v23 = v20;
          if (v53 != v52)
          {
            do
            {
              *((_OWORD *)v23 - 1) = *((_OWORD *)v21 - 1);
              v23 -= 16;
              v21 -= 2;
            }
            while (v21 != v22);
            v21 = v52;
          }
          v14 = (double *)(v20 + 16);
          v52 = (double *)v23;
          v53 = (double *)(v20 + 16);
          v54 = (double *)&v19[16 * v18];
          if (v21)
            operator delete(v21);
        }
        else
        {
          *v53 = DistanceKm;
          *((_QWORD *)v13 + 1) = v7;
          v14 = v13 + 2;
        }
        v53 = v14;
        if (quasar::gLogLevel >= 5)
        {
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          v42 = 0u;
          v43 = 0u;
          v40 = 0u;
          v41 = 0u;
          v38 = 0u;
          v39 = 0u;
          v36 = 0u;
          v37 = 0u;
          *(_OWORD *)v35 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v35);
          v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Location is within max radius of geoRegion=", 43);
          kaldi::quasar::Vocab::OOvWord(v8, &__p);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_p = &__p;
          else
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            size = __p.__r_.__value_.__l.__size_;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)p_p, size);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v35);
        }
      }
      ++v7;
      v5 = *(_QWORD *)(a1 + 32);
    }
    while (v7 < (*(_QWORD *)(a1 + 40) - v5) >> 4);
    v27 = (uint64_t)v52;
    v28 = (unint64_t)v53;
  }
  v29 = 126 - 2 * __clz((uint64_t)(v28 - v27) >> 4);
  if (v28 == v27)
    v30 = 0;
  else
    v30 = v29;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::pair<double,int> *,false>(v27, v28, (uint64_t)v35, v30, 1);
  v31 = (int *)v52;
  v32 = (int *)v53;
  if (v52 != v53)
  {
    do
    {
      v33 = *(kaldi::quasar::Vocab **)(*(_QWORD *)(a1 + 32) + 16 * v31[2]);
      std::string::basic_string[abi:ne180100]<0>(v35, " based on circle regions");
      quasar::Geography::addRegionContext(a1, a2, v33, (uint64_t)v35);
      if (SBYTE7(v36) < 0)
        operator delete(v35[0]);
      v31 += 4;
    }
    while (v31 != v32);
    v31 = (int *)v52;
  }
  if (v31)
  {
    v53 = (double *)v31;
    operator delete(v31);
  }
}

void sub_1ADD25100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void *v23;

  v23 = *(void **)(v21 - 136);
  if (v23)
  {
    *(_QWORD *)(v21 - 128) = v23;
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void quasar::Geography::addContextFromOldMemories(uint64_t a1, std::vector<std::string> *a2, uint64_t a3)
{
  kaldi::quasar::Vocab *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  kaldi::quasar::Vocab *v11;
  std::__shared_weak_count *v12;
  std::string v13;

  quasar::GeoMemories::recallLastRegionId(a3, (_BYTE *)(a1 + 4), &v13);
  quasar::Geography::resolveRegionId(a1, (uint64_t)&v13, &v11);
  v5 = v11;
  if (v11)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, " based on cached region id");
    quasar::Geography::addRegionContext(a1, a2, v5, (uint64_t)__p);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  v6 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1ADD2524C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar9GeoRegionENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xB8uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar9GeoRegionENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADD252C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar9GeoRegionENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45270;
  a1[1] = 0;
  quasar::GeoRegion::GeoRegion((quasar::GeoRegion *)(a1 + 3));
  return a1;
}

void sub_1ADD25310(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::GeoRegion>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45270;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::GeoRegion>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45270;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::GeoRegion>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t **std::__tree<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::__map_value_compare<int,std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::shared_ptr<quasar::GeoRegion>>>>::__emplace_unique_key_args<int,int &,std::shared_ptr<quasar::GeoRegion>&>(uint64_t **a1, int *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  int v11;
  int v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD v18[2];
  char v19;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    v11 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v12 = *((_DWORD *)v7 + 8);
        if (v11 >= v12)
          break;
        v7 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_9;
      }
      if (v12 >= v11)
        return v10;
      v7 = v10[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    v13 = operator new(0x38uLL);
    v18[1] = v8;
    v13[8] = *a3;
    v14 = a4[1];
    *((_QWORD *)v13 + 5) = *a4;
    *((_QWORD *)v13 + 6) = v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    v19 = 1;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v9, (uint64_t *)v13);
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<quasar::MultiAudioBuffer::BufferId,std::shared_ptr<quasar::RecogAudioBuffer>>,void *>>>>::reset[abi:ne180100]((uint64_t)v18, 0);
  }
  return (uint64_t **)v13;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x60uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADD254B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN6quasar17RegionsBitmapDataENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D430F8;
  a1[1] = 0;
  quasar::RegionsBitmapData::RegionsBitmapData(a1 + 3);
  return a1;
}

void sub_1ADD25504(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D430F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D430F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::RegionsBitmapData>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::RegionsBitmapData>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::RegionsBitmapData>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](a2 + 56);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<quasar::RegionalLmPlug<std::shared_ptr<fst::Fst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>>> const&>(uint64_t **a1, const void **a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v9[3];
  uint64_t v10;

  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_equal<std::string>((uint64_t)a1, &v10, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a3, (uint64_t)v9);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v10, v7, v9[0]);
    v6 = v9[0];
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D452A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D452A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::Geography::GeoContext>::__on_zero_shared(uint64_t a1)
{
  char v1;

  std::allocator<quasar::Geography::GeoContext>::destroy[abi:ne180100]((uint64_t)&v1, a1 + 24);
}

void std::allocator<quasar::Geography::GeoContext>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void **v3;

  v3 = (void **)(a2 + 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2 + 24, *(_QWORD **)(a2 + 32));
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(a2, *(_QWORD **)(a2 + 8));
}

_QWORD *quasar::StructuredPredictionOptions::options@<X0>(quasar::StructuredPredictionOptions *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  _QWORD *result;

  v4 = (char *)this + 1728;
  v5 = *(_QWORD *)(*((_QWORD *)this + 216) - 24);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x78uLL);
  a2[2] = result + 15;
  *result = (char *)this + 16;
  result[1] = (char *)this + 176;
  result[2] = (char *)this + 336;
  result[3] = (char *)this + 496;
  result[4] = (char *)this + 656;
  result[5] = (char *)this + 816;
  result[6] = (char *)this + 976;
  result[7] = (char *)this + 1136;
  result[8] = (char *)this + 1296;
  result[9] = (char *)this + 1440;
  result[10] = (char *)this + 1584;
  result[11] = &v4[v5];
  result[12] = (char *)this + 1880;
  result[13] = (char *)this + 2040;
  result[14] = (char *)this + 2184;
  *a2 = result;
  a2[1] = result + 15;
  return result;
}

void quasar::recomputeAlignment(uint64_t *a1)
{
  uint64_t v2;
  kaldi::quasar::TranslationUtil::NbestElement *v3;
  kaldi::quasar::TranslationUtil::NbestElement *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  float *v14;
  float *v15;
  float *v16;
  float *v17;
  float v18;
  float *v19;
  float v20;
  float v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 __src;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[28];
  uint64_t v46;
  kaldi::quasar::TranslationUtil::NbestElement *v47;
  unint64_t v48;

  v46 = 0;
  v47 = 0;
  v48 = 0;
  v2 = *a1;
  v31 = a1[1];
  if (*a1 != v31)
  {
    do
    {
      kaldi::quasar::TranslationUtil::NbestElement::NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      v3 = v47;
      if ((unint64_t)v47 >= v48)
      {
        v4 = (kaldi::quasar::TranslationUtil::NbestElement *)std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement>(&v46, (const kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      }
      else
      {
        kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v47, (const kaldi::quasar::TranslationUtil::NbestElement *)&__src);
        v4 = (kaldi::quasar::TranslationUtil::NbestElement *)((char *)v3 + 272);
      }
      v47 = v4;
      kaldi::quasar::TranslationUtil::NbestElement::~NbestElement((kaldi::quasar::TranslationUtil::NbestElement *)&__src);
      v5 = *(_QWORD *)(v2 + 136);
      v6 = *(_QWORD *)(v2 + 144);
      if (v5 != v6)
      {
        v7 = (uint64_t *)((char *)v47 - 272);
        v8 = (uint64_t *)((char *)v47 - 264);
        v9 = (_QWORD *)((char *)v47 - 256);
        do
        {
          __src = 0uLL;
          v33 = 0;
          v34 = 0u;
          v35 = 0u;
          v36 = 0u;
          v37 = 0u;
          v38 = 0u;
          v39 = 0u;
          v40 = 0u;
          v41 = 0u;
          v42 = 0u;
          v43 = 0u;
          v44 = 0u;
          memset(v45, 0, sizeof(v45));
          v10 = *v8;
          if ((unint64_t)*v8 >= *v9)
          {
            v11 = std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(v7, &__src);
          }
          else
          {
            std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)v9, *v8, &__src);
            v11 = v10 + 240;
            *v8 = v10 + 240;
          }
          *v8 = v11;
          kaldi::quasar::TranslationUtil::PathElement::~PathElement((kaldi::quasar::TranslationUtil::PathElement *)&__src);
          v12 = *v8;
          v13 = (char *)(*v8 - 104);
          if (v13 != (char *)(v5 + 104))
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>(v13, *(char **)(v5 + 104), *(_QWORD *)(v5 + 112), (uint64_t)(*(_QWORD *)(v5 + 112) - *(_QWORD *)(v5 + 104)) >> 2);
          v14 = *(float **)(v5 + 104);
          v15 = *(float **)(v5 + 112);
          if (v14 == v15)
          {
            v17 = *(float **)(v5 + 104);
          }
          else
          {
            v16 = v14 + 1;
            v17 = *(float **)(v5 + 104);
            if (v14 + 1 != v15)
            {
              v18 = *v14;
              v17 = *(float **)(v5 + 104);
              v19 = v14 + 1;
              do
              {
                v20 = *v19++;
                v21 = v20;
                if (v18 < v20)
                {
                  v18 = v21;
                  v17 = v16;
                }
                v16 = v19;
              }
              while (v19 != v15);
            }
          }
          LODWORD(__src) = (unint64_t)((char *)v17 - (char *)v14) >> 2;
          std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v12 - 152), (char *)&__src, (uint64_t)&__src + 4, 1uLL);
          v5 += 136;
        }
        while (v5 != v6);
      }
      v2 += 200;
    }
    while (v2 != v31);
  }
  kaldi::quasar::TranslationUtil::ComputeBackwardAlignments((uint64_t)&v46);
  kaldi::quasar::TranslationUtil::MergeAlignments((uint64_t)&v46);
  v22 = *a1;
  v23 = a1[1];
  if (v23 != *a1)
  {
    v24 = 0;
    do
    {
      v25 = *(_QWORD *)(v22 + 200 * v24 + 136);
      if (*(_QWORD *)(v22 + 200 * v24 + 144) != v25)
      {
        v26 = 0;
        v27 = 0;
        v28 = 32;
        do
        {
          v29 = *(_QWORD *)(v46 + 272 * v24) + v26;
          if (v29 + 88 != v25 + v28)
          {
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)(v25 + v28), *(char **)(v29 + 88), *(_QWORD *)(v29 + 96), (uint64_t)(*(_QWORD *)(v29 + 96) - *(_QWORD *)(v29 + 88)) >> 2);
            v22 = *a1;
          }
          ++v27;
          v30 = v22 + 200 * v24;
          v25 = *(_QWORD *)(v30 + 136);
          v26 += 240;
          v28 += 136;
        }
        while (0xF0F0F0F0F0F0F0F1 * ((*(_QWORD *)(v30 + 144) - v25) >> 3) > v27);
        v23 = a1[1];
      }
      ++v24;
    }
    while (0x8F5C28F5C28F5C29 * ((v23 - v22) >> 3) > v24);
  }
  *(_QWORD *)&__src = &v46;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100]((void ***)&__src);
}

void sub_1ADD25A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  uint64_t v11;

  a11 = (void **)(v11 - 112);
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__destroy_vector::operator()[abi:ne180100](&a11);
  _Unwind_Resume(a1);
}

uint64_t quasar::manyToOneAssignments(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v3 = (_QWORD *)*a1;
  v1 = a1 + 1;
  v2 = v3;
  if (v3 == v1)
    return 6;
  while (*((_DWORD *)v2 + 8) != 5)
  {
    v4 = (_QWORD *)v2[1];
    if (v4)
    {
      do
      {
        v5 = v4;
        v4 = (_QWORD *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        v5 = (_QWORD *)v2[2];
        v6 = *v5 == (_QWORD)v2;
        v2 = v5;
      }
      while (!v6);
    }
    v2 = v5;
    if (v5 == v1)
      return 6;
  }
  return 5;
}

void quasar::computeTokenCharMapping(quasar *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  quasar::PTree *Child;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  int v21;
  int v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t *v42;
  _QWORD *v43[2];
  uint64_t *v44;
  _QWORD *v45[2];

  v45[0] = 0;
  v45[1] = 0;
  v43[1] = 0;
  v44 = (uint64_t *)v45;
  v42 = (uint64_t *)v43;
  v43[0] = 0;
  v4 = quasar::MetaInfo::get((quasar *)((char *)this + 192));
  v41 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "tokenizer output");
  Child = (quasar::PTree *)quasar::PTree::getChild(v4, (__int128 *)__p);
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  v6 = quasar::PTree::begin(Child);
  v7 = quasar::PTree::end(Child);
  if (v6 == v7)
  {
    v21 = v41;
  }
  else
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "start");
      v8 = quasar::PTree::getInt<int>(v6 + 24, (__int128 *)__p);
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      std::string::basic_string[abi:ne180100]<0>(__p, "length");
      v9 = quasar::PTree::getInt<int>(v6 + 24, (__int128 *)__p);
      if (SBYTE7(v25) < 0)
        operator delete(__p[0]);
      __p[0] = &v41;
      v10 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v44, &v41, (uint64_t)&std::piecewise_construct, (_DWORD **)__p);
      *((_DWORD *)v10 + 8) = v8;
      *((_DWORD *)v10 + 9) = v9 + v8 - 1;
      if (quasar::gLogLevel >= 6)
      {
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v32 = 0u;
        v30 = 0u;
        v31 = 0u;
        v28 = 0u;
        v29 = 0u;
        v26 = 0u;
        v27 = 0u;
        *(_OWORD *)__p = 0u;
        v25 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Token character range: ", 23);
        v11 = (_QWORD *)std::ostream::operator<<();
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)": ", 2);
        v13 = *((_QWORD *)this + 17) + 136 * v41;
        v14 = *(char *)(v13 + 23);
        if (v14 >= 0)
          v15 = *((_QWORD *)this + 17) + 136 * v41;
        else
          v15 = *(_QWORD *)v13;
        if (v14 >= 0)
          v16 = *(unsigned __int8 *)(v13 + 23);
        else
          v16 = *(_QWORD *)(v13 + 8);
        v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v15, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)" - (", 4);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)", ", 2);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)")", 1);
        quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
      }
      v23 = v8;
      if (v9 >= 1)
      {
        do
        {
          v20 = v41;
          __p[0] = &v23;
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v42, &v23, (uint64_t)&std::piecewise_construct, (unsigned int **)__p)+ 8) = v20;
          ++v23;
        }
        while (v23 < v9 + v8);
      }
      v21 = ++v41;
      v6 += 88;
    }
    while (v6 != v7);
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3) != v21)
  {
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v32 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    *(_OWORD *)__p = 0u;
    v25 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Inconsistent tokenizer output lengths!", 38);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_3mapIiNS_4pairIiiEENS_4lessIiEENS_9allocatorINS4_IKiS5_EEEEEENS3_IiiS7_NS8_INS4_IS9_iEEEEEEEEC2B8ne180100IJLm0ELm1EEJSC_SF_EJEJEJRSC_RSF_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSL_IJDpT2_EEEDpOT3_(a2, (uint64_t)&v44, (uint64_t)&v42);
  std::__tree<int>::destroy((uint64_t)&v42, v43[0]);
  std::__tree<int>::destroy((uint64_t)&v44, v45[0]);
}

void sub_1ADD25EA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  uint64_t v17;

  std::__tree<int>::destroy(v17 - 152, *(_QWORD **)(v16 + 288));
  std::__tree<int>::destroy(v17 - 128, *(_QWORD **)(v16 + 312));
  _Unwind_Resume(a1);
}

void quasar::computeTokenSpmMapping(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  void **v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  unint64_t v16;
  int v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  BOOL v30;
  int v31;
  int v32;
  int v33;
  void *v35[2];
  uint64_t v36;
  char v37;
  int v38;
  void *__p[2];
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;

  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  v38 = 0;
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 != v5)
  {
    v7 = (int *)(a3 + 8);
    do
    {
      v8 = *(char *)(a2 + 23);
      if (v8 >= 0)
        v9 = (_QWORD *)a2;
      else
        v9 = *(_QWORD **)a2;
      if (v8 >= 0)
        v10 = *(unsigned __int8 *)(a2 + 23);
      else
        v10 = *(_QWORD *)(a2 + 8);
      quasar::utf8::codepointsCtr(v9, v10, 0, *(_DWORD *)(v4 + 128), (unint64_t)v35);
      if (v37)
      {
        v11 = (int)v35[0];
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v35;
        v40 = v36;
        v35[0] = 0;
        v35[1] = 0;
        v36 = 0;
        if (quasar::gLogLevel >= 1)
        {
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          if (v40 >= 0)
            v12 = __p;
          else
            v12 = (void **)__p[0];
          if (v40 >= 0)
            v13 = HIBYTE(v40);
          else
            v13 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v12, v13);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
        }
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
        v11 = 0;
        if (!v37 && SHIBYTE(v36) < 0)
        {
          operator delete(v35[0]);
          v11 = 0;
        }
      }
      v14 = *(char *)(a2 + 23);
      if (v14 >= 0)
        v15 = (_QWORD *)a2;
      else
        v15 = *(_QWORD **)a2;
      if (v14 >= 0)
        v16 = *(unsigned __int8 *)(a2 + 23);
      else
        v16 = *(_QWORD *)(a2 + 8);
      quasar::utf8::codepointsCtr(v15, v16, 0, *(_DWORD *)(v4 + 132), (unint64_t)v35);
      if (v37)
      {
        v17 = (int)v35[0];
      }
      else
      {
        *(_OWORD *)__p = *(_OWORD *)v35;
        v40 = v36;
        v35[0] = 0;
        v35[1] = 0;
        v36 = 0;
        if (quasar::gLogLevel >= 1)
        {
          v56 = 0u;
          v57 = 0u;
          v54 = 0u;
          v55 = 0u;
          v52 = 0u;
          v53 = 0u;
          v50 = 0u;
          v51 = 0u;
          v48 = 0u;
          v49 = 0u;
          v46 = 0u;
          v47 = 0u;
          v45 = 0u;
          v43 = 0u;
          v44 = 0u;
          v41 = 0u;
          v42 = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v41);
          if (v40 >= 0)
            v18 = __p;
          else
            v18 = (void **)__p[0];
          if (v40 >= 0)
            v19 = HIBYTE(v40);
          else
            v19 = (uint64_t)__p[1];
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v41, (uint64_t)v18, v19);
          quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&v41);
        }
        if (SHIBYTE(v40) < 0)
          operator delete(__p[0]);
        v17 = 0;
        if (!v37 && SHIBYTE(v36) < 0)
        {
          operator delete(v35[0]);
          v17 = 0;
        }
      }
      *((_QWORD *)&v41 + 1) = 0;
      *(_QWORD *)&v42 = 0;
      *(_QWORD *)&v41 = (char *)&v41 + 8;
      if (v11 < v17)
      {
        do
        {
          v20 = *(_QWORD *)v7;
          if (*(_QWORD *)v7)
          {
            v21 = v7;
            do
            {
              v22 = *(_DWORD *)(v20 + 28);
              v23 = v22 < v11;
              if (v22 >= v11)
                v24 = (uint64_t *)v20;
              else
                v24 = (uint64_t *)(v20 + 8);
              if (!v23)
                v21 = (int *)v20;
              v20 = *v24;
            }
            while (*v24);
            if (v21 != v7 && v11 >= v21[7])
            {
              v35[0] = v21 + 8;
              v25 = std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v41, v21 + 8, (uint64_t)&std::piecewise_construct, (unsigned int **)v35);
              ++*((_DWORD *)v25 + 8);
            }
          }
          ++v11;
        }
        while (v11 != v17);
        if ((_QWORD)v42)
        {
          v26 = (char *)v41;
          v27 = (char *)&v41 + 8;
          if ((__int128 *)v41 != (__int128 *)((char *)&v41 + 8))
          {
LABEL_60:
            v27 = v26;
            while (1)
            {
              v28 = (char *)*((_QWORD *)v26 + 1);
              v29 = v26;
              if (v28)
              {
                do
                {
                  v26 = v28;
                  v28 = *(char **)v28;
                }
                while (v28);
              }
              else
              {
                do
                {
                  v26 = (char *)*((_QWORD *)v29 + 2);
                  v30 = *(_QWORD *)v26 == (_QWORD)v29;
                  v29 = v26;
                }
                while (!v30);
              }
              if (v26 == (char *)&v41 + 8)
                break;
              v31 = *((_DWORD *)v27 + 7);
              v32 = *((_DWORD *)v26 + 7);
              if (v31 < v32 || v32 >= v31 && *((_DWORD *)v27 + 8) < *((_DWORD *)v26 + 8))
                goto LABEL_60;
            }
          }
          v33 = *((_DWORD *)v27 + 7);
          v35[0] = &v38;
          *((_DWORD *)std::__tree<std::__value_type<int,float>,std::__map_value_compare<int,std::__value_type<int,float>,std::less<int>,true>,std::allocator<std::__value_type<int,float>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)a4, &v38, (uint64_t)&std::piecewise_construct, (unsigned int **)v35)+ 8) = v33;
        }
      }
      ++v38;
      std::__tree<int>::destroy((uint64_t)&v41, *((_QWORD **)&v41 + 1));
      v4 += 136;
    }
    while (v4 != v5);
  }
}

void sub_1ADD262C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)&a25);
  if (a23 < 0)
    operator delete(__p);
  if (!a16 && a15 < 0)
    operator delete(a10);
  std::__tree<int>::destroy(a9, *(_QWORD **)(a9 + 8));
  _Unwind_Resume(a1);
}

void quasar::findStructureTags(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  char *v12;
  int64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44[20];
  int v45;
  uint64_t v46[20];
  int v47;
  uint64_t v48[20];
  int v49;
  uint64_t v50[20];
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v42 = a1;
  v43 = a2;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  quasar::OptionValue<std::string>::OptionValue(v44, a3 + 16);
  v45 = 0;
  quasar::OptionValue<std::string>::OptionValue(v46, a3 + 176);
  v47 = 1;
  quasar::OptionValue<std::string>::OptionValue(v48, a3 + 336);
  v49 = 2;
  quasar::OptionValue<std::string>::OptionValue(v50, a3 + 496);
  v6 = 0;
  v51 = 3;
  v7 = v44;
  do
  {
    v8 = 0;
    v41 = v6;
    v9 = &v44[21 * v6 + 20];
    while (1)
    {
      v10 = quasar::OptionValue<std::string>::value(v7);
      v11 = *(char *)(v10 + 23);
      v12 = v11 >= 0 ? (char *)v10 : *(char **)v10;
      v13 = v11 >= 0 ? *(unsigned __int8 *)(v10 + 23) : *(_QWORD *)(v10 + 8);
      v14 = std::string_view::find[abi:ne180100](&v42, v12, v13, v8);
      if (v14 == -1)
        break;
      v15 = quasar::OptionValue<std::string>::value(v7);
      if (v43 < v14)
        std::__throw_out_of_range[abi:ne180100]("string_view::substr");
      v16 = *(unsigned __int8 *)(v15 + 23);
      if ((v16 & 0x80u) != 0)
        v16 = *(_QWORD *)(v15 + 8);
      v17 = v42 + v14;
      if (v43 - v14 >= v16)
        v18 = v16;
      else
        v18 = v43 - v14;
      v19 = *(_DWORD *)v9;
      v21 = a4[1];
      v20 = a4[2];
      if (v21 >= v20)
      {
        v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v21 - *a4) >> 3);
        v24 = v23 + 1;
        if (v23 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - *a4) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x555555555555555)
          v26 = 0xAAAAAAAAAAAAAAALL;
        else
          v26 = v24;
        if (v26)
          v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a4 + 2), v26);
        else
          v27 = 0;
        v28 = &v27[24 * v23];
        *(_DWORD *)v28 = v14;
        *((_DWORD *)v28 + 1) = v19;
        *((_QWORD *)v28 + 1) = v17;
        *((_QWORD *)v28 + 2) = v18;
        v30 = (char *)*a4;
        v29 = (char *)a4[1];
        v31 = (uint64_t)v28;
        if (v29 != (char *)*a4)
        {
          do
          {
            v32 = *(_OWORD *)(v29 - 24);
            *(_QWORD *)(v31 - 8) = *((_QWORD *)v29 - 1);
            *(_OWORD *)(v31 - 24) = v32;
            v31 -= 24;
            v29 -= 24;
          }
          while (v29 != v30);
          v29 = (char *)*a4;
        }
        v22 = (uint64_t)(v28 + 24);
        *a4 = v31;
        a4[1] = (uint64_t)(v28 + 24);
        a4[2] = (uint64_t)&v27[24 * v26];
        if (v29)
          operator delete(v29);
      }
      else
      {
        *(_DWORD *)v21 = v14;
        *(_DWORD *)(v21 + 4) = v19;
        v22 = v21 + 24;
        *(_QWORD *)(v21 + 8) = v17;
        *(_QWORD *)(v21 + 16) = v18;
      }
      a4[1] = v22;
      v33 = quasar::OptionValue<std::string>::value(v7);
      LODWORD(v34) = *(unsigned __int8 *)(v33 + 23);
      if ((v34 & 0x80u) != 0)
        v34 = *(_QWORD *)(v33 + 8);
      v8 = v34 + v14;
    }
    v6 = v41 + 1;
    v7 = &v44[21 * v41 + 21];
  }
  while (v41 != 3);
  v35 = 84;
  do
  {
    v36 = &v44[v35];
    v44[v35 - 21] = (uint64_t)&unk_1E5D347F0;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v44[v35 - 4], (_QWORD *)v44[v35 - 3]);
    if (*((char *)&v44[v35 - 5] - 1) < 0)
      operator delete((void *)*(v36 - 8));
    *(v36 - 21) = (uint64_t)&unk_1E5D359C0;
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)(v36 - 10));
    if (*((char *)v36 - 89) < 0)
      operator delete((void *)v44[v35 - 14]);
    v37 = &v44[v35];
    if (*((char *)&v44[v35 - 14] - 1) < 0)
      operator delete((void *)*(v37 - 17));
    if (*((char *)v37 - 137) < 0)
      operator delete((void *)v44[v35 - 20]);
    v35 -= 21;
  }
  while (v35 * 8);
  v38 = (char *)a4[1];
  v39 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-*a4] >> 3));
  if (v38 == (char *)*a4)
    v40 = 0;
  else
    v40 = v39;
  std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(*a4, v38, (uint64_t)v44, v40, 1);
}

void sub_1ADD266EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::string_view::find[abi:ne180100](uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void quasar::computeSourceAlignments(int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  int *v6;
  int *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  float **v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  _QWORD *v22;
  unint64_t v23;
  unsigned int v24;
  float *v25;
  float *v26;
  float v27;
  uint64_t v28;
  float *v29;
  float v30;
  float v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  uint64_t *v37;
  _QWORD *v38;
  int v39;
  _QWORD *v40;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t *v61;
  _QWORD *v62[2];
  uint64_t *v63;
  _QWORD *v64[3];

  v64[0] = 0;
  v64[1] = 0;
  v62[1] = 0;
  v63 = (uint64_t *)v64;
  v61 = (uint64_t *)v62;
  v62[0] = 0;
  v7 = *a1;
  v6 = a1[1];
  if (*a1 != v6)
  {
    v9 = (_QWORD *)(a4 + 2184);
    v10 = (_QWORD *)(a4 + 1296);
    v11 = (_QWORD *)(a3 + 8);
    while (1)
    {
      v12 = *v7;
      v60 = -1;
      v13 = *(_QWORD *)(a2 + 136);
      v14 = (float **)(v13 + 136 * v12 + 104);
      v15 = *(_DWORD *)quasar::OptionValue<int>::value(v9);
      if (v15 < a5)
        a5 = v15;
      v16 = v13 + 136 * v12;
      v18 = *(_QWORD *)(v16 + 112);
      v17 = (_QWORD *)(v16 + 112);
      v19 = *v14;
      v20 = v18 - (_QWORD)*v14;
      if (a5 > (unint64_t)(v20 >> 2) && quasar::gLogLevel >= 2)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Inconsistent soft alignment length! Soft alignment length: ", 59);
        v22 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)" - numSourceSpm: ", 17);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v43);
        v19 = *v14;
        v20 = *v17 - (_QWORD)*v14;
      }
      v23 = (unint64_t)v20 >> 2;
      if (a5 >= (int)v23)
        v24 = v23;
      else
        v24 = a5;
      v25 = v19;
      if (v24 >= 2)
      {
        v26 = v19 + 1;
        v27 = *v19;
        v28 = 4 * (int)v24 - 4;
        v25 = v19;
        v29 = v19 + 1;
        do
        {
          v30 = *v29++;
          v31 = v30;
          if (v27 < v30)
          {
            v27 = v31;
            v25 = v26;
          }
          v26 = v29;
          v28 -= 4;
        }
        while (v28);
      }
      v60 = (unint64_t)((char *)v25 - (char *)v19) >> 2;
      if (quasar::gLogLevel >= 5)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Aligning middle tag at pos ", 27);
        v32 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)" to source spm ", 15);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v61, &v60, &v60);
      if (!*(_BYTE *)quasar::OptionValue<BOOL>::value(v10))
        goto LABEL_35;
      v33 = *v11;
      if (*v11)
      {
        v34 = v11;
        do
        {
          v35 = *(_DWORD *)(v33 + 28);
          v36 = v35 < v60;
          if (v35 >= v60)
            v37 = (uint64_t *)v33;
          else
            v37 = (uint64_t *)(v33 + 8);
          if (!v36)
            v34 = (_QWORD *)v33;
          v33 = *v37;
        }
        while (*v37);
        if (v34 != v11 && v60 >= *((_DWORD *)v34 + 7))
          break;
      }
      if (quasar::gLogLevel >= 5)
      {
        v58 = 0u;
        v59 = 0u;
        v56 = 0u;
        v57 = 0u;
        v54 = 0u;
        v55 = 0u;
        v52 = 0u;
        v53 = 0u;
        v50 = 0u;
        v51 = 0u;
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v44 = 0u;
        v45 = 0u;
        v43 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Source SPM at pos", 17);
        v38 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v38, (uint64_t)" does not map to any source token.", 34);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
      }
LABEL_38:
      if (++v7 == v6)
        goto LABEL_39;
    }
    v39 = *((_DWORD *)v34 + 8);
    v60 = v39;
    if (quasar::gLogLevel >= 5)
    {
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      v52 = 0u;
      v53 = 0u;
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v46 = 0u;
      v47 = 0u;
      v44 = 0u;
      v45 = 0u;
      v43 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v43);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v43, (uint64_t)"Aligning middle tag at pos ", 27);
      v40 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" to source token ", 17);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v43);
LABEL_35:
      v39 = v60;
    }
    if (v39 != -1)
      std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v63, &v60, &v60);
    goto LABEL_38;
  }
LABEL_39:
  std::set<int>::set[abi:ne180100](a6, (uint64_t)&v63);
  std::set<int>::set[abi:ne180100](a6 + 3, (uint64_t)&v61);
  std::__tree<int>::destroy((uint64_t)&v61, v62[0]);
  std::__tree<int>::destroy((uint64_t)&v63, v64[0]);
}

void sub_1ADD26C74(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  std::__tree<int>::destroy(v2 - 136, *(_QWORD **)(v2 - 128));
  std::__tree<int>::destroy(v2 - 112, *(_QWORD **)(v2 - 104));
  _Unwind_Resume(a1);
}

void quasar::parseAllSegments(unsigned int **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t *a8@<X8>)
{
  uint64_t *i;
  int v9;
  unsigned int *v10;
  int *v11;
  signed int v12;
  int v13;
  unsigned int v14;
  char *v15;
  const void *v16;
  unint64_t v17;
  int *v19;
  _DWORD *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  const void *v25;
  int *v26;
  int v27;
  unsigned int *v28;
  unsigned int *v29;
  unsigned int *v30;
  int *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  int *v37;
  int *v38;
  int v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  int *v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  unint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t j;
  unsigned int v60;
  BOOL v61;
  unsigned int v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v71;
  int v75;
  unsigned int v76;
  _QWORD **v77;
  _QWORD *v78[2];
  _QWORD **v79;
  _QWORD *v80[2];
  __int128 v81;
  void *__p[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  int *v98;
  int *v99;
  _QWORD v100[2];

  i = a8;
  *a8 = 0;
  a8[1] = 0;
  a8[2] = 0;
  v9 = -252645135 * ((*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3);
  v10 = *a1;
  v11 = &quasar::gLogLevel;
  if (*a1 != a1[1])
  {
    v12 = 0;
    v13 = 0;
    v75 = 7;
    v71 = (uint64_t)(a8 + 2);
    while (1)
    {
      v14 = v10[1];
      v16 = (const void *)*((_QWORD *)v10 + 1);
      v15 = (char *)*((_QWORD *)v10 + 2);
      v76 = *v10;
      LODWORD(v17) = *v10 - v12;
      if ((int)*v10 > v12 || (*v10 | v12) == 0)
      {
        *(_QWORD *)&v81 = __PAIR64__(v75, v12);
        if (a5 < v12)
          std::__throw_out_of_range[abi:ne180100]("string_view::substr");
        v19 = v11;
        if (a5 - v12 >= (int)v17)
          v17 = (int)v17;
        else
          v17 = a5 - v12;
        *((_QWORD *)&v81 + 1) = a4 + v12;
        __p[0] = (void *)v17;
        v20 = operator new(4uLL);
        __p[1] = v20;
        *v20 = v13;
        *(_QWORD *)&v83 = v20 + 1;
        *((_QWORD *)&v83 + 1) = v20 + 1;
        *((_QWORD *)&v84 + 1) = 0;
        *(_QWORD *)&v85 = 0;
        *(_QWORD *)&v84 = (char *)&v84 + 8;
        v86 = 0uLL;
        *((_QWORD *)&v85 + 1) = &v86;
        v21 = i[1];
        if (v21 >= i[2])
        {
          v22 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
        }
        else
        {
          std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(v71, i[1], (uint64_t)&v81);
          v22 = v21 + 96;
        }
        v11 = v19;
        i[1] = v22;
        std::__tree<int>::destroy((uint64_t)&v85 + 8, (_QWORD *)v86);
        std::__tree<int>::destroy((uint64_t)&v84, *((_QWORD **)&v84 + 1));
        if (__p[1])
        {
          *(void **)&v83 = __p[1];
          operator delete(__p[1]);
        }
      }
      v98 = 0;
      v99 = 0;
      v100[0] = 0;
      if (v13 >= v9)
      {
LABEL_111:
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        *(_OWORD *)__p = 0u;
        v83 = 0u;
        v81 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)&v81);
      }
      v23 = *(_QWORD *)(a2 + 136) + 136 * v13;
      while (1)
      {
        if (*(char *)(v23 + 23) < 0)
        {
          v25 = *(const void **)v23;
          v24 = *(char **)(v23 + 8);
        }
        else
        {
          v24 = (char *)*(unsigned __int8 *)(v23 + 23);
          v25 = (const void *)v23;
        }
        if (v24 == v15 && !memcmp(v25, v16, (size_t)v15))
          break;
        ++v13;
        v23 += 136;
        if (v9 == v13)
          goto LABEL_111;
      }
      if (v75 == 5)
      {
        if (v14 != 2)
        {
LABEL_58:
          if (*v11 < 5)
          {
            v26 = 0;
            v14 = 8;
          }
          else
          {
            v96 = 0u;
            v97 = 0u;
            v94 = 0u;
            v95 = 0u;
            v92 = 0u;
            v93 = 0u;
            v90 = 0u;
            v91 = 0u;
            v88 = 0u;
            v89 = 0u;
            v86 = 0u;
            v87 = 0u;
            v84 = 0u;
            v85 = 0u;
            *(_OWORD *)__p = 0u;
            v83 = 0u;
            v81 = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
            v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Ignoring unexpected ", 20);
            v41 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)v16, (uint64_t)v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v41, (uint64_t)" at position ", 13);
            std::ostream::operator<<();
            quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v81);
            v14 = 8;
            v26 = v99;
          }
          goto LABEL_62;
        }
        v28 = v10 + 6;
        if (v10 + 6 == a1[1] || (v29 = v10 + 7, v10[7] != 2))
        {
          v26 = 0;
          v75 = 6;
          v14 = 2;
          goto LABEL_62;
        }
        v26 = 0;
        v14 = 2;
        v30 = v10;
        while (1)
        {
          v10 = v28;
          if (&v15[v76] != (char *)(int)v30[6])
          {
            v75 = 6;
            v10 = v30;
            goto LABEL_62;
          }
          if ((unint64_t)v26 >= v100[0])
          {
            v31 = v98;
            v32 = v26 - v98;
            v33 = v32 + 1;
            if ((unint64_t)(v32 + 1) >> 62)
              goto LABEL_112;
            v34 = v100[0] - (_QWORD)v98;
            if ((uint64_t)(v100[0] - (_QWORD)v98) >> 1 > v33)
              v33 = v34 >> 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL)
              v35 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v35 = v33;
            if (v35)
            {
              v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v35);
              v31 = v98;
              v26 = v99;
            }
            else
            {
              v36 = 0;
            }
            v37 = (int *)&v36[4 * v32];
            *v37 = v13;
            v38 = v37 + 1;
            while (v26 != v31)
            {
              v39 = *--v26;
              *--v37 = v39;
            }
            v98 = v37;
            v99 = v38;
            v100[0] = &v36[4 * v35];
            if (v31)
              operator delete(v31);
            v26 = v38;
          }
          else
          {
            *v26++ = v13;
          }
          v99 = v26;
          v28 = v10 + 6;
          v76 = *v10;
          ++v13;
          v14 = *v29;
          v16 = (const void *)*((_QWORD *)v30 + 4);
          v15 = (char *)*((_QWORD *)v30 + 5);
          if (v10 + 6 == a1[1])
            break;
          v29 = v10 + 7;
          v75 = 6;
          v30 = v10;
          if (v10[7] != 2)
            goto LABEL_62;
        }
        v27 = 6;
      }
      else if (v75 == 6)
      {
        if (v14 != 3)
          goto LABEL_58;
        v26 = 0;
        v27 = 7;
      }
      else
      {
        if (v14 >= 2)
          goto LABEL_58;
        v26 = 0;
        v27 = 5;
      }
      v75 = v27;
LABEL_62:
      if ((unint64_t)v26 >= v100[0])
      {
        v43 = v98;
        v44 = v26 - v98;
        v45 = v44 + 1;
        if ((unint64_t)(v44 + 1) >> 62)
LABEL_112:
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v46 = v100[0] - (_QWORD)v98;
        if ((uint64_t)(v100[0] - (_QWORD)v98) >> 1 > v45)
          v45 = v46 >> 1;
        if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v45;
        if (v47)
        {
          v48 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)v100, v47);
          v43 = v98;
          v26 = v99;
        }
        else
        {
          v48 = 0;
        }
        v49 = (int *)&v48[4 * v44];
        *v49 = v13;
        v42 = (uint64_t)(v49 + 1);
        for (i = a8; v26 != v43; --v49)
        {
          v50 = *--v26;
          *(v49 - 1) = v50;
        }
        v98 = v49;
        v99 = (int *)v42;
        v100[0] = &v48[4 * v47];
        if (v43)
          operator delete(v43);
      }
      else
      {
        *v26 = v13;
        v42 = (uint64_t)(v26 + 1);
        i = a8;
      }
      v99 = (int *)v42;
      if (v14 == 2)
      {
        quasar::computeSourceAlignments(&v98, a2, a3, a6, a7, (uint64_t *)&v77);
        v42 = (uint64_t)v99;
      }
      else
      {
        v78[0] = 0;
        v78[1] = 0;
        v80[0] = 0;
        v80[1] = 0;
        v77 = v78;
        v79 = v80;
      }
      *(_QWORD *)&v81 = __PAIR64__(v14, v76);
      *((_QWORD *)&v81 + 1) = v16;
      __p[0] = v15;
      v83 = 0uLL;
      __p[1] = 0;
      std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p[1], v98, v42, (v42 - (uint64_t)v98) >> 2);
      std::set<int>::set[abi:ne180100]((uint64_t *)&v84, (uint64_t)&v77);
      std::set<int>::set[abi:ne180100]((uint64_t *)&v85 + 1, (uint64_t)&v79);
      v51 = i[1];
      if (v51 >= i[2])
      {
        v52 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
      }
      else
      {
        std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(v71, i[1], (uint64_t)&v81);
        v52 = v51 + 96;
      }
      i[1] = v52;
      std::__tree<int>::destroy((uint64_t)&v85 + 8, (_QWORD *)v86);
      std::__tree<int>::destroy((uint64_t)&v84, *((_QWORD **)&v84 + 1));
      if (__p[1])
      {
        *(void **)&v83 = __p[1];
        operator delete(__p[1]);
      }
      std::__tree<int>::destroy((uint64_t)&v79, v80[0]);
      std::__tree<int>::destroy((uint64_t)&v77, v78[0]);
      if (v98)
      {
        v99 = v98;
        operator delete(v98);
      }
      v12 = v76 + (_DWORD)v15;
      ++v13;
      v10 += 6;
      if (v10 == a1[1])
        goto LABEL_92;
    }
  }
  v13 = 0;
  v12 = 0;
  v75 = 7;
LABEL_92:
  if (a5 > v12)
  {
    *(_QWORD *)&v81 = __PAIR64__(v75, v12);
    *((_QWORD *)&v81 + 1) = a4 + v12;
    __p[0] = (void *)(a5 - v12);
    v53 = operator new(4uLL);
    __p[1] = v53;
    *v53 = v13;
    *(_QWORD *)&v83 = v53 + 1;
    *((_QWORD *)&v83 + 1) = v53 + 1;
    *((_QWORD *)&v84 + 1) = 0;
    *(_QWORD *)&v85 = 0;
    *(_QWORD *)&v84 = (char *)&v84 + 8;
    v86 = 0uLL;
    *((_QWORD *)&v85 + 1) = &v86;
    v54 = i[1];
    if (v54 >= i[2])
    {
      v55 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
    }
    else
    {
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(i + 2), i[1], (uint64_t)&v81);
      v55 = v54 + 96;
    }
    i[1] = v55;
    std::__tree<int>::destroy((uint64_t)&v85 + 8, (_QWORD *)v86);
    std::__tree<int>::destroy((uint64_t)&v84, *((_QWORD **)&v84 + 1));
    if (__p[1])
    {
      *(void **)&v83 = __p[1];
      operator delete(__p[1]);
    }
  }
  if (v75 == 6)
  {
    *(_QWORD *)&v81 = 0x4FFFFFFFFLL;
    *((_QWORD *)&v81 + 1) = "";
    __p[0] = 0;
    v56 = operator new(4uLL);
    __p[1] = v56;
    *v56 = v9;
    *(_QWORD *)&v83 = v56 + 1;
    *((_QWORD *)&v83 + 1) = v56 + 1;
    *((_QWORD *)&v84 + 1) = 0;
    *(_QWORD *)&v85 = 0;
    *(_QWORD *)&v84 = (char *)&v84 + 8;
    v86 = 0uLL;
    *((_QWORD *)&v85 + 1) = &v86;
    v57 = i[1];
    if (v57 >= i[2])
    {
      v58 = std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(i, (uint64_t)&v81);
    }
    else
    {
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(i + 2), i[1], (uint64_t)&v81);
      v58 = v57 + 96;
    }
    i[1] = v58;
    std::__tree<int>::destroy((uint64_t)&v85 + 8, (_QWORD *)v86);
    std::__tree<int>::destroy((uint64_t)&v84, *((_QWORD **)&v84 + 1));
    if (__p[1])
    {
      *(void **)&v83 = __p[1];
      operator delete(__p[1]);
    }
  }
  for (j = i[1]; j != *i; j -= 96)
  {
    v60 = *(_DWORD *)(j - 92);
    v61 = v60 >= 3;
    v62 = v60 - 3;
    if (v61)
    {
      if (v62 <= 1)
        return;
    }
    else
    {
      *(_DWORD *)(j - 92) = 8;
      std::__tree<int>::destroy(j - 48, *(_QWORD **)(j - 40));
      *(_QWORD *)(j - 48) = j - 40;
      *(_QWORD *)(j - 40) = 0;
      v63 = *(_QWORD **)(j - 16);
      *(_QWORD *)(j - 32) = 0;
      std::__tree<int>::destroy(j - 24, v63);
      *(_QWORD *)(j - 24) = j - 16;
      *(_QWORD *)(j - 16) = 0;
      *(_QWORD *)(j - 8) = 0;
      if (*v11 >= 5)
      {
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        v92 = 0u;
        v93 = 0u;
        v90 = 0u;
        v91 = 0u;
        v88 = 0u;
        v89 = 0u;
        v86 = 0u;
        v87 = 0u;
        v84 = 0u;
        v85 = 0u;
        *(_OWORD *)__p = 0u;
        v83 = 0u;
        v81 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v81);
        v64 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v81, (uint64_t)"Ignoring trailing unmatched ", 28);
        v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v64, *(_QWORD *)(j - 88), *(_QWORD *)(j - 80));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)" at position ", 13);
        std::ostream::operator<<();
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v81);
      }
    }
  }
}

void quasar::Segment::~Segment(quasar::Segment *this)
{
  void *v2;

  std::__tree<int>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  std::__tree<int>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
}

void quasar::SourceAlignments::~SourceAlignments(quasar::SourceAlignments *this)
{
  std::__tree<int>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  std::__tree<int>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

void quasar::extendExpansions(uint64_t *a1, uint64_t a2, __int128 **a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v12;
  _QWORD *v13;
  uint64_t **v14;
  char v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  int v27;
  uint64_t *v28[3];

  v7 = *(_QWORD **)a2;
  v6 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v6)
  {
    v12 = (uint64_t)(a3 + 3);
    v24 = (uint64_t)(a1 + 2);
    do
    {
      std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)v28, v12);
      v13 = (_QWORD *)*v7;
      if ((_QWORD *)*v7 != v7 + 1)
      {
        do
        {
          v26 = *(_QWORD *)((char *)v13 + 28);
          v27 = *((_DWORD *)v13 + 9);
          v14 = std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,int const&,quasar::Expansion::SegmentTypeData&>(v28, (int *)&v26, &v26, (unint64_t *)((char *)&v26 + 4));
          if (!v15)
            *((_DWORD *)v14 + 8) = HIDWORD(v26);
          v16 = (_QWORD *)v13[1];
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = (_QWORD *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (_QWORD *)v13[2];
              v18 = *v17 == (_QWORD)v13;
              v13 = v17;
            }
            while (!v18);
          }
          v13 = v17;
        }
        while (v17 != v7 + 1);
      }
      v19 = a1[1];
      if (v19 >= a1[2])
      {
        v20 = std::vector<quasar::Expansion>::__emplace_back_slow_path<std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(a1, a3, (uint64_t)v28);
      }
      else
      {
        std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(v24, a1[1], a3, (uint64_t)v28);
        v20 = v19 + 48;
        a1[1] = v20;
      }
      a1[1] = v20;
      v21 = (uint64_t *)(v20 - 48);
      v26 = __PAIR64__(a6, a5);
      v22 = *(_QWORD *)(v20 - 40);
      if (v22 >= *(_QWORD *)(v20 - 32))
      {
        v23 = std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string const&,std::pair<int,int>>(v21, a4, (uint64_t *)&v26);
      }
      else
      {
        std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string const&,std::pair<int,int>>((uint64_t)v21, a4, (uint64_t *)&v26);
        v23 = v22 + 32;
      }
      *(_QWORD *)(v20 - 40) = v23;
      std::__tree<int>::destroy((uint64_t)v28, v28[1]);
      v7 += 3;
    }
    while (v7 != v6);
  }
}

void sub_1ADD27934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, _QWORD *a15)
{
  std::__tree<int>::destroy((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t quasar::markAssignmentAsReversed(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v1 = *(_QWORD **)result;
  v2 = *(_QWORD **)(result + 8);
  if (*(_QWORD **)result != v2)
  {
    do
    {
      v3 = (_QWORD *)*v1;
      if ((_QWORD *)*v1 != v1 + 1)
      {
        do
        {
          *((_BYTE *)v3 + 36) = 1;
          v4 = (_QWORD *)v3[1];
          if (v4)
          {
            do
            {
              v5 = v4;
              v4 = (_QWORD *)*v4;
            }
            while (v4);
          }
          else
          {
            do
            {
              v5 = (_QWORD *)v3[2];
              v6 = *v5 == (_QWORD)v3;
              v3 = v5;
            }
            while (!v6);
          }
          v3 = v5;
        }
        while (v5 != v1 + 1);
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void quasar::computeExpansions(__int128 **a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, std::string **a4@<X8>)
{
  std::string *v5;
  __int128 *v6;
  __int128 v7;
  __int128 **v8;
  __int128 **v9;
  __int128 *v10;
  __int128 v11;
  int v12;
  unsigned int v13;
  std::string::size_type v14;
  char v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  __int128 **v19;
  unint64_t *v20;
  size_t v21;
  const void *v22;
  void **p_dst;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  __int128 **v40;
  int *v41;
  __int128 *v42;
  int v43;
  std::string *v44;
  __int128 **v45;
  uint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  char *v51;
  char *v52;
  _QWORD *v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  int *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t **v61;
  int v62;
  int *v63;
  int *v64;
  BOOL v65;
  unint64_t v66;
  uint64_t v67;
  __int128 **v68;
  __int128 **v69;
  unint64_t v70;
  _QWORD *v71;
  __int128 **v72;
  _QWORD *v73;
  int v74;
  __int128 **v75;
  __int128 *v76;
  int v77;
  BOOL v78;
  __int128 *v79;
  _QWORD *v80;
  _QWORD *v81;
  char *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  unint64_t v87;
  __int128 ***v89;
  unsigned int v90;
  unsigned int v91;
  unsigned int v92;
  __int128 v95;
  unint64_t v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t v99;
  __int128 v100;
  __int128 **v101;
  void *v102[2];
  uint64_t v103;
  std::string v104;
  void *v105;
  _DWORD *v106;
  uint64_t v107;
  void **__dst;
  __int128 v109;
  std::string v110;
  _BYTE __src[24];
  void *v112;
  char *v113;
  uint64_t v114;
  uint64_t *v115;
  int v116[4];
  uint64_t v117[3];
  __int128 *v118;
  void *__p[2];
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  uint64_t v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v120 = 0;
  v121 = 0u;
  *(_OWORD *)__p = 0u;
  *((_QWORD *)&v120 + 1) = &v121;
  a4[2] = 0;
  *a4 = 0;
  a4[1] = 0;
  __src[8] = 0;
  v5 = (std::string *)operator new(0x30uLL);
  *a4 = v5;
  a4[1] = v5;
  a4[2] = v5 + 2;
  v89 = (__int128 ***)a4;
  a4[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion>,quasar::Expansion const*,quasar::Expansion const*,quasar::Expansion*>((uint64_t)(a4 + 2), (__int128 **)__p, (__int128 **)&v122, v5);
  std::__tree<int>::destroy((uint64_t)&v120 + 8, (_QWORD *)v121);
  *(_QWORD *)__src = __p;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)__src);
  v6 = *a1;
  if (*a1 >= a1[1])
    return;
  do
  {
    v7 = *v6;
    *(_QWORD *)&__src[16] = *((_QWORD *)v6 + 2);
    *(_OWORD *)__src = v7;
    v113 = 0;
    v114 = 0;
    v112 = 0;
    std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v112, *((const void **)v6 + 3), *((_QWORD *)v6 + 4), (uint64_t)(*((_QWORD *)v6 + 4) - *((_QWORD *)v6 + 3)) >> 2);
    std::set<int>::set[abi:ne180100]((uint64_t *)&v115, (uint64_t)(v6 + 3));
    std::set<int>::set[abi:ne180100](v117, (uint64_t)v6 + 72);
    v8 = *v89;
    v9 = v89[1];
    while (v8 != v9)
    {
      v10 = v8[1];
      if (*v8 != v10 && *((_DWORD *)v10 - 1) == (_DWORD)a3)
      {
        if (*((char *)v10 - 9) < 0)
        {
          std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)v10 - 4), *((_QWORD *)v10 - 3));
        }
        else
        {
          v11 = *(v10 - 2);
          v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v10 - 2);
          *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v11;
        }
        v12 = *((_DWORD *)v10 - 2);
        v13 = *(_DWORD *)v112;
        __p[0] = (void *)v110.__r_.__value_.__l.__size_;
        v14 = v110.__r_.__value_.__r.__words[0];
        *(void **)((char *)__p + 7) = *(void **)((char *)&v110.__r_.__value_.__r.__words[1] + 7);
        v15 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
        memset(&v110, 0, sizeof(v110));
        v16 = v8[1];
        if (*((char *)v16 - 9) < 0)
          operator delete(*((void **)v16 - 4));
        *((_QWORD *)v16 - 4) = v14;
        *((void **)v16 - 3) = __p[0];
        *(void **)((char *)v16 - 17) = *(void **)((char *)__p + 7);
        *((_BYTE *)v16 - 9) = v15;
        *((_DWORD *)v16 - 2) = v12;
        *((_DWORD *)v16 - 1) = v13;
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
      }
      v8 += 6;
    }
    v17 = v6 + 6;
    v18 = *(unsigned int *)&__src[4];
    if ((*(_DWORD *)&__src[4] - 5) < 3)
    {
      v19 = v89[1];
      if (*v89 != v19)
      {
        v20 = (unint64_t *)(*v89 + 2);
        do
        {
          v21 = *(_QWORD *)&__src[16];
          if (*(_QWORD *)&__src[16] >= 0x7FFFFFFFFFFFFFF8uLL)
            std::string::__throw_length_error[abi:ne180100]();
          v22 = *(const void **)&__src[8];
          if (*(_QWORD *)&__src[16] >= 0x17uLL)
          {
            v24 = (*(_QWORD *)&__src[16] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(_QWORD *)&__src[16] | 7) != 0x17)
              v24 = *(_QWORD *)&__src[16] | 7;
            v25 = v24 + 1;
            p_dst = (void **)operator new(v24 + 1);
            *(_QWORD *)&v109 = v21;
            *((_QWORD *)&v109 + 1) = v25 | 0x8000000000000000;
            __dst = p_dst;
          }
          else
          {
            HIBYTE(v109) = __src[16];
            p_dst = (void **)&__dst;
            if (!*(_QWORD *)&__src[16])
              goto LABEL_25;
          }
          memmove(p_dst, v22, v21);
LABEL_25:
          *((_BYTE *)p_dst + v21) = 0;
          v26 = (a3 << 32) | *(unsigned int *)v112;
          v27 = __dst;
          *(_QWORD *)&v136 = v109;
          *(_QWORD *)((char *)&v136 + 7) = *(_QWORD *)((char *)&v109 + 7);
          v28 = HIBYTE(v109);
          v109 = 0uLL;
          __dst = 0;
          v29 = *(v20 - 1);
          if (v29 >= *v20)
          {
            v30 = *(v20 - 2);
            v31 = (uint64_t)(v29 - v30) >> 5;
            v32 = v31 + 1;
            if ((unint64_t)(v31 + 1) >> 59)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v33 = *v20 - v30;
            if (v33 >> 4 > v32)
              v32 = v33 >> 4;
            if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0)
              v34 = 0x7FFFFFFFFFFFFFFLL;
            else
              v34 = v32;
            *(_QWORD *)&v121 = v20;
            v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>((uint64_t)v20, v34);
            v36 = &v35[32 * v31];
            __p[0] = v35;
            __p[1] = v36;
            *((_QWORD *)&v120 + 1) = &v35[32 * v37];
            *(_QWORD *)v36 = v27;
            *((_QWORD *)v36 + 1) = v136;
            *(_QWORD *)(v36 + 15) = *(_QWORD *)((char *)&v136 + 7);
            v36[23] = v28;
            *((_QWORD *)v36 + 3) = v26;
            *(_QWORD *)&v120 = v36 + 32;
            std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer((uint64_t *)v20 - 2, __p);
            v38 = *(v20 - 1);
            std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)__p);
            v39 = SHIBYTE(v109);
            *(v20 - 1) = v38;
            if (v39 < 0)
              operator delete(__dst);
          }
          else
          {
            *(_QWORD *)v29 = v27;
            *(_QWORD *)(v29 + 8) = v136;
            *(_QWORD *)(v29 + 15) = *(_QWORD *)((char *)&v136 + 7);
            *(_BYTE *)(v29 + 23) = v28;
            *(_QWORD *)(v29 + 24) = v26;
            *(v20 - 1) = v29 + 32;
          }
          v40 = (__int128 **)(v20 + 4);
          v20 += 6;
        }
        while (v40 != v19);
      }
LABEL_63:
      v6 = v17;
      goto LABEL_130;
    }
    if (*(_DWORD *)&__src[4] > 1u)
    {
      if (*(_DWORD *)&__src[4] == 8)
      {
        v49 = quasar::gLogLevel;
        if (quasar::gLogLevel >= 6)
        {
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Discarding spurious structure tag at position: ", 47);
          v50 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v50, (uint64_t)" (spm pos: ", 11);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
          v49 = quasar::gLogLevel;
        }
        v51 = (char *)v112;
        v52 = v113;
        while (v51 != v52)
        {
          if (v49 >= 6)
          {
            v134 = 0u;
            v135 = 0u;
            v132 = 0u;
            v133 = 0u;
            v130 = 0u;
            v131 = 0u;
            v128 = 0u;
            v129 = 0u;
            v126 = 0u;
            v127 = 0u;
            v124 = 0u;
            v125 = 0u;
            v122 = 0u;
            v123 = 0u;
            v120 = 0u;
            v121 = 0u;
            *(_OWORD *)__p = 0u;
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
            v53 = (_QWORD *)std::ostream::operator<<();
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" ", 1);
            quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
            v49 = quasar::gLogLevel;
          }
          v51 += 4;
        }
        if (v49 > 5)
        {
          v134 = 0u;
          v135 = 0u;
          v132 = 0u;
          v133 = 0u;
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)")", 1);
          quasar::QuasarTraceMessage::~QuasarTraceMessage((quasar::QuasarTraceMessage *)__p);
        }
      }
      goto LABEL_63;
    }
    v90 = *(_DWORD *)v112;
    *((_QWORD *)&v136 + 1) = 0;
    v137 = 0;
    *(_QWORD *)&v136 = (char *)&v136 + 8;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    memset(&v104, 0, sizeof(v104));
    v102[0] = 0;
    v102[1] = 0;
    v41 = (int *)v6 + 38;
    v103 = 0;
    do
    {
      if (v17 == a1[1])
      {
        v134 = 0u;
        v135 = 0u;
        v132 = 0u;
        v133 = 0u;
        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v122 = 0u;
        v123 = 0u;
        v120 = 0u;
        v121 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Logic error!", 12);
        quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
      }
      v42 = v17;
      *(_DWORD *)__src = *(_DWORD *)v17;
      v43 = *((_DWORD *)v17 + 1);
      *(_DWORD *)&__src[4] = v43;
      *(_OWORD *)&__src[8] = *(__int128 *)((char *)v17 + 8);
      if (__src != (_BYTE *)v17)
      {
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v112, *((char **)v17 + 3), *((_QWORD *)v17 + 4), (uint64_t)(*((_QWORD *)v17 + 4) - *((_QWORD *)v17 + 3)) >> 2);
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&v115, *((int **)v17 + 6), v41);
        v43 = *(_DWORD *)&__src[4];
      }
      if (v43 == 2)
      {
        std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t **)&v136, (int *)v115, v116);
        std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v105, (char *)v112, (uint64_t)v113, (v113 - (_BYTE *)v112) >> 2);
      }
      else
      {
        if (v43 == 5)
        {
          v44 = &v104;
        }
        else
        {
          if (v43 != 6)
            goto LABEL_49;
          v44 = (std::string *)v102;
        }
        std::string::append(v44, *(const std::string::value_type **)&__src[8], *(std::string::size_type *)&__src[16]);
      }
LABEL_49:
      v41 += 24;
      v17 += 6;
    }
    while ((*(_DWORD *)&__src[4] - 5) < 0xFFFFFFFE);
    if (a2)
    {
      v45 = v89[1];
      v46 = (uint64_t *)(v45 - 6);
      LODWORD(__p[0]) = v90 + 1;
      HIDWORD(__p[0]) = *(_DWORD *)v105;
      v47 = (unint64_t)*(v45 - 5);
      if (v47 >= (unint64_t)*(v45 - 4))
      {
        v48 = std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string &,std::pair<int,int>>(v46, (uint64_t)&v104, (uint64_t *)__p);
      }
      else
      {
        std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string &,std::pair<int,int>>((uint64_t)v46, (uint64_t)&v104, (uint64_t *)__p);
        v48 = v47 + 32;
      }
      *(v45 - 5) = (__int128 *)v48;
    }
    else
    {
      v92 = *(_DWORD *)v112;
      v100 = 0uLL;
      v101 = 0;
      v54 = v137;
      v97 = 0;
      v98 = 0;
      v99 = 0;
      if ((_DWORD)v137 != 31)
      {
        v55 = 0;
        if (1 << v137 <= 1)
          v56 = 1;
        else
          v56 = 1 << v137;
        do
        {
          v57 = v18;
          boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset<int>(__p, v54, v55);
          *((_QWORD *)&v95 + 1) = 0;
          v96 = 0;
          *(_QWORD *)&v95 = (char *)&v95 + 8;
          v58 = (int *)v136;
          if ((__int128 *)v136 != (__int128 *)((char *)&v136 + 8))
          {
            v59 = 0;
            do
            {
              v60 = *(_QWORD *)((char *)__p[0] + ((v59 >> 3) & 0x1FFFFFFFFFFFFFF8));
              v118 = (__int128 *)(v58 + 7);
              v61 = std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t **)&v95, v58 + 7, (uint64_t)&std::piecewise_construct, (_DWORD **)&v118);
              if (((v60 >> v59) & 1) != 0)
                v62 = 5;
              else
                v62 = 6;
              *((_DWORD *)v61 + 8) = v62;
              *((_BYTE *)v61 + 36) = 0;
              v63 = (int *)*((_QWORD *)v58 + 1);
              if (v63)
              {
                do
                {
                  v64 = v63;
                  v63 = *(int **)v63;
                }
                while (v63);
              }
              else
              {
                do
                {
                  v64 = (int *)*((_QWORD *)v58 + 2);
                  v65 = *(_QWORD *)v64 == (_QWORD)v58;
                  v58 = v64;
                }
                while (!v65);
              }
              ++v59;
              v58 = v64;
            }
            while (v64 != (int *)((char *)&v136 + 8));
          }
          v66 = v98;
          if (v98 >= v99)
          {
            v67 = std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)&v97, (uint64_t)&v95);
            v18 = v57;
          }
          else
          {
            std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](v98, (uint64_t)&v95);
            v18 = v57;
            v67 = v66 + 24;
          }
          v98 = v67;
          std::__tree<int>::destroy((uint64_t)&v95, *((_QWORD **)&v95 + 1));
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          ++v55;
        }
        while (v55 != v56);
      }
      v69 = *v89;
      v68 = v89[1];
      if (*v89 != v68)
      {
        v91 = v90 + 1;
        do
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v120 = 0;
          v95 = 0uLL;
          v96 = 0;
          v71 = v97;
          v70 = v98;
          if (v97 != (_QWORD *)v98)
          {
            v72 = v69 + 4;
            do
            {
              v73 = (_QWORD *)*v71;
              if ((_QWORD *)*v71 == v71 + 1)
              {
LABEL_107:
                if (quasar::manyToOneAssignments(v71) == 5)
                {
                  v82 = (char *)__p[1];
                  if (__p[1] >= (void *)v120)
                  {
                    v83 = (void *)std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)__p, (uint64_t)v71);
                  }
                  else
                  {
                    std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)__p[1], (uint64_t)v71);
                    v83 = v82 + 24;
                  }
                  __p[1] = v83;
                }
                else
                {
                  v84 = *((_QWORD *)&v95 + 1);
                  if (*((_QWORD *)&v95 + 1) >= v96)
                  {
                    v85 = std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>((uint64_t *)&v95, (uint64_t)v71);
                  }
                  else
                  {
                    std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](*((uint64_t *)&v95 + 1), (uint64_t)v71);
                    v85 = v84 + 24;
                  }
                  *((_QWORD *)&v95 + 1) = v85;
                }
              }
              else
              {
                while (1)
                {
                  if (*v72)
                  {
                    v74 = *((_DWORD *)v73 + 7);
                    v75 = v69 + 4;
                    v76 = *v72;
                    do
                    {
                      v77 = *((_DWORD *)v76 + 7);
                      v78 = v77 < v74;
                      if (v77 >= v74)
                        v79 = v76;
                      else
                        v79 = (__int128 *)((char *)v76 + 8);
                      if (!v78)
                        v75 = (__int128 **)v76;
                      v76 = *(__int128 **)v79;
                    }
                    while (*(_QWORD *)v79);
                    if (v75 != v72 && v74 >= *((_DWORD *)v75 + 7) && *((_DWORD *)v75 + 8) != *((_DWORD *)v73 + 8))
                      break;
                  }
                  v80 = (_QWORD *)v73[1];
                  if (v80)
                  {
                    do
                    {
                      v81 = v80;
                      v80 = (_QWORD *)*v80;
                    }
                    while (v80);
                  }
                  else
                  {
                    do
                    {
                      v81 = (_QWORD *)v73[2];
                      v65 = *v81 == (_QWORD)v73;
                      v73 = v81;
                    }
                    while (!v65);
                  }
                  v73 = v81;
                  if (v81 == v71 + 1)
                    goto LABEL_107;
                }
              }
              v71 += 3;
            }
            while (v71 != (_QWORD *)v70);
          }
          if ((_DWORD)v18 == 1)
          {
            quasar::markAssignmentAsReversed((uint64_t)__p);
            quasar::markAssignmentAsReversed((uint64_t)&v95);
            v86 = *(_OWORD *)__p;
            *(_OWORD *)__p = v95;
            v95 = v86;
            v87 = v120;
            *(_QWORD *)&v120 = v96;
            v96 = v87;
          }
          quasar::extendExpansions((uint64_t *)&v100, (uint64_t)__p, v69, (uint64_t)&v104, v91, *(_DWORD *)v105);
          quasar::extendExpansions((uint64_t *)&v100, (uint64_t)&v95, v69, (uint64_t)v102, *(v106 - 1) + 1, v92);
          v118 = &v95;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v118);
          *(_QWORD *)&v95 = __p;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v95);
          v69 += 6;
        }
        while (v69 != v68);
      }
      std::vector<quasar::Expansion>::__vdeallocate((uint64_t)v89);
      *(_OWORD *)v89 = v100;
      v89[2] = v101;
      v101 = 0;
      v100 = 0uLL;
      __p[0] = &v97;
      std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
      __p[0] = &v100;
      std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    }
    if (SHIBYTE(v103) < 0)
      operator delete(v102[0]);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (v105)
    {
      v106 = v105;
      operator delete(v105);
    }
    v6 = v42 + 6;
    std::__tree<int>::destroy((uint64_t)&v136, *((_QWORD **)&v136 + 1));
LABEL_130:
    std::__tree<int>::destroy((uint64_t)v117, (_QWORD *)v117[1]);
    std::__tree<int>::destroy((uint64_t)&v115, *(_QWORD **)v116);
    if (v112)
    {
      v113 = (char *)v112;
      operator delete(v112);
    }
  }
  while (v6 < a1[1]);
}

void sub_1ADD285C8(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x1ADD28734);
}

void sub_1ADD285F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,uint64_t a57,uint64_t a58,_QWORD *a59,uint64_t a60,uint64_t a61,_QWORD *a62,uint64_t a63)
{
  char a66;

  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)&a66);
  if (a47 < 0)
    operator delete(__p);
  std::__tree<int>::destroy(a13, a62);
  std::__tree<int>::destroy(a17, a59);
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  a52 = a10;
  std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100](&a52);
  _Unwind_Resume(a1);
}

void sub_1ADD28630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,uint64_t a54,uint64_t a55,_QWORD *a56,uint64_t a57,uint64_t a58,_QWORD *a59)
{
  std::__tree<int>::destroy(a13, a59);
  std::__tree<int>::destroy(a17, a56);
  if (__p)
  {
    a53 = (uint64_t)__p;
    operator delete(__p);
  }
  a49 = a10;
  std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100]((void ***)&a49);
  _Unwind_Resume(a1);
}

void sub_1ADD28638()
{
  JUMPOUT(0x1ADD2865CLL);
}

void sub_1ADD28644()
{
  JUMPOUT(0x1ADD2865CLL);
}

void sub_1ADD28650(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46)
{
  uint64_t v46;

  if (a38 < 0)
    operator delete(__p);
  if (a44 < 0)
    operator delete(a39);
  if (a45)
    operator delete(a45);
  std::__tree<int>::destroy(v46 - 128, *(_QWORD **)(v46 - 120));
  JUMPOUT(0x1ADD286FCLL);
}

void sub_1ADD28658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void ***a62,char a63)
{
  a62 = &a23;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a62);
  a23 = (void **)&a63;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](&a23);
  JUMPOUT(0x1ADD286A0);
}

void quasar::Expansion::~Expansion(quasar::Expansion *this)
{
  void **v2;

  std::__tree<int>::destroy((uint64_t)this + 24, *((_QWORD **)this + 4));
  v2 = (void **)this;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::putPhraseWithAllDefaultsFirst(uint64_t **a1, uint64_t **a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25[25];

  v6 = *a1;
  v7 = a1[1];
  if (*a1 != v7)
  {
    while (1)
    {
      v10 = quasar::MetaInfo::structuredPrediction(v6 + 24, a3, a4);
      if (v10)
        break;
LABEL_22:
      v6 += 25;
      if (v6 == v7)
      {
        v6 = v7;
        goto LABEL_24;
      }
    }
    v11 = *(_QWORD *)(v10 + 32);
    v12 = *(_QWORD *)(v10 + 40);
    while (v11 != v12)
    {
      v13 = *(unsigned __int8 *)(v11 + 23);
      if ((v13 & 0x80u) == 0)
        v14 = *(unsigned __int8 *)(v11 + 23);
      else
        v14 = *(_QWORD *)(v11 + 8);
      v15 = *(unsigned __int8 *)(v11 + 47);
      v16 = (char)v15;
      if ((v15 & 0x80u) != 0)
        v15 = *(_QWORD *)(v11 + 32);
      if (v14 != v15)
        goto LABEL_22;
      if (v16 >= 0)
        v17 = (unsigned __int8 *)(v11 + 24);
      else
        v17 = *(unsigned __int8 **)(v11 + 24);
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v11, v17, *(_QWORD *)(v11 + 8)))
          goto LABEL_22;
      }
      else if (*(_BYTE *)(v11 + 23))
      {
        v18 = 0;
        while (*(unsigned __int8 *)(v11 + v18) == v17[v18])
        {
          if (v13 == ++v18)
            goto LABEL_21;
        }
        goto LABEL_22;
      }
LABEL_21:
      v11 += 80;
    }
  }
LABEL_24:
  v20 = *a1;
  v19 = a1[1];
  v21 = (char *)v6 - (char *)*a1;
  if (v21)
    v22 = v6 == v19;
  else
    v22 = 1;
  if (!v22)
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v25, v6);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v6, v20);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v20, v25);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v25);
    v23 = *a2;
    v24 = &(*a2)[v21 >> 3];
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((uint64_t)v25, v23);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v23, v24);
    quasar::TranslationPhraseInternal::operator=((uint64_t)v24, v25);
    quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v25);
  }
}

void sub_1ADD28914(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)va);
  _Unwind_Resume(a1);
}

void quasar::StructuredPredictionBlock::processBody(quasar::StructuredPredictionBlock *this)
{
  quasar::StructuredPredictionBlock *v1;
  quasar::ProcessingInput *v2;
  _QWORD *Value;
  quasar::TranslationPhraseInternal **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  const quasar::TranslationPhraseInternal **v16;
  uint64_t v17;
  uint64_t v18;
  const quasar::TranslationPhraseInternal **v19;
  quasar **v20;
  _QWORD *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  quasar::ProcessingInput *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t *v28;
  quasar::TranslationPhraseInternal *v29;
  uint64_t v30;
  void *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  __int128 *v38;
  __int128 *v39;
  int *v40;
  int *v41;
  uint64_t *v42;
  int *v43;
  int *v44;
  BOOL v45;
  uint64_t *v46;
  uint64_t *v47;
  int v48;
  unint64_t v49;
  quasar::TranslationPhraseInternal *v50;
  quasar::TranslationPhraseInternal *v51;
  quasar::TranslationPhraseInternal *v52;
  quasar::TranslationPhraseInternal *v53;
  uint64_t v54;
  uint64_t j;
  std::string::size_type v56;
  std::string::size_type size;
  __int128 v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  quasar::TranslationPhraseInternal *v63;
  const quasar::TranslationTokenInternal *v64;
  unint64_t v65;
  uint64_t v66;
  std::string::pointer data;
  std::string::size_type *p_size;
  _BYTE *v69;
  _QWORD *v70;
  _QWORD **v71;
  _QWORD *v72;
  _QWORD **v73;
  int v74;
  _QWORD *v75;
  _QWORD *v76;
  int v78;
  int v79;
  int v80;
  _QWORD **v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD **v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  int v92;
  void *v93;
  char *v94;
  int64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  int v99;
  void *v100;
  uint64_t v101;
  char *v102;
  int v103;
  unsigned int v104;
  int v105;
  std::string *p_str;
  std::string::size_type v107;
  std::string *v108;
  std::string::size_type v109;
  std::string *v110;
  std::string::size_type v111;
  std::string *v112;
  std::string::size_type v113;
  uint64_t **v114;
  std::string::size_type v115;
  _QWORD *v116;
  uint64_t v117;
  __int128 v118;
  _QWORD *v119;
  uint64_t v120;
  __int128 v121;
  _QWORD *v122;
  const std::string *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  quasar::TranslationPhraseInternal *v128;
  uint64_t v129;
  __int128 v130;
  unint64_t v131;
  __int128 v132;
  __int128 *v133;
  __int128 *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  quasar::TranslationPhraseInternal *v144;
  quasar::TranslationPhraseInternal *v145;
  uint64_t *v146;
  uint64_t *v147;
  std::string::size_type v148;
  unint64_t v149;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  char *v154;
  size_t v155;
  std::string *v156;
  char *v157;
  uint64_t v158;
  _QWORD *v159;
  quasar::ProcessingInput *v160;
  quasar::ProcessingInput *v161;
  _QWORD *v162;
  _QWORD *v163;
  int v164;
  _QWORD *v165;
  _QWORD *v166;
  unint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  char *v170;
  void *v171;
  uint64_t v172;
  void *v173;
  std::string *v174;
  quasar::TranslationPhraseInternal *v175;
  quasar::TranslationPhraseInternal *v176;
  quasar::StructuredPredictionBlock *v177;
  void *v178;
  std::string *i;
  _QWORD *v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  _QWORD *v185;
  char v186;
  void *v187;
  std::string v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char v192;
  std::string v193[2];
  __int128 v194;
  uint64_t v195;
  _QWORD v196[3];
  std::string v197;
  std::string v198;
  int v199;
  __int128 v200;
  unint64_t v201;
  std::string v202;
  std::string v203;
  __int16 v204;
  void *v205;
  void *v206;
  uint64_t v207;
  uint64_t v208;
  int v209;
  __n128 v210;
  uint64_t v211;
  unint64_t v212;
  uint64_t v213;
  int v214;
  __int128 v215;
  unint64_t v216;
  void *__p[2];
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  void *v222[2];
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  std::string *v234;
  std::string *v235;
  int *v236;
  _QWORD *v237;
  uint64_t v238;
  __int128 *v239;
  __int128 *v240;
  void *v241[2];
  char v242;
  uint64_t v243;
  quasar::TranslationPhraseInternal *v244;
  unint64_t v245;
  uint64_t *v246;
  quasar::TranslationPhraseInternal *v247;
  unint64_t v248;
  uint64_t *v249;
  quasar::TranslationPhraseInternal *v250;
  unint64_t v251;
  uint64_t *v252;
  _QWORD *v253;
  unint64_t v254;
  uint64_t *v255;
  _QWORD *v256;
  uint64_t v257;
  _QWORD **v258;
  _QWORD *v259;
  uint64_t v260;
  std::string __str;
  std::string v262[8];
  std::string v263[5];
  uint64_t v264;
  uint64_t v265;
  _BYTE v266[32];
  void *v267[2];
  __int128 v268;
  void *v269[2];
  __int128 v270;
  void *v271[2];
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  uint64_t v282;

  v1 = this;
  v282 = *MEMORY[0x1E0C80C00];
  v2 = (quasar::StructuredPredictionBlock *)((char *)this + 2400);
  Value = (_QWORD *)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)this + 2400));
  if (*Value == Value[1])
    return;
  v4 = (quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue(v2);
  if (quasar::TranslationPhraseInternal::isFromPhrasebook(*v4))
  {
    if (quasar::gLogLevel >= 4)
    {
      v232 = 0u;
      v233 = 0u;
      v230 = 0u;
      v231 = 0u;
      v228 = 0u;
      v229 = 0u;
      v226 = 0u;
      v227 = 0u;
      v224 = 0u;
      v225 = 0u;
      *(_OWORD *)v222 = 0u;
      v223 = 0u;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Translation is from phrasebook: passthru inputs to outputs", 58);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v5 = *(_QWORD *)(*(_QWORD *)v1 - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "spm");
    v6 = quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2512));
    quasar::ProcessingBlock::send((uint64_t)v1 + v5, (const void **)__p, v6, 1);
    if (SBYTE7(v218) < 0)
      operator delete(__p[0]);
    v7 = *(_QWORD *)(*(_QWORD *)v1 - 24);
    std::string::basic_string[abi:ne180100]<0>(__p, "source");
    v8 = quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2344));
    quasar::ProcessingBlock::send((uint64_t)v1 + v7, (const void **)__p, v8, 1);
    if (SBYTE7(v218) < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)(*(_QWORD *)v1 - 24);
    v10 = quasar::ProcessingInput::getValue(v2);
    quasar::ProcessingBlock::send((uint64_t)v1 + v9, v10, 0);
    return;
  }
  v11 = (_QWORD *)quasar::ProcessingInput::getValue(v2);
  v12 = v11[1] - *v11;
  v160 = (quasar::StructuredPredictionBlock *)((char *)v1 + 2512);
  v13 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2512));
  if (v12 != v13[1] - *v13)
  {
    v232 = 0u;
    v233 = 0u;
    v230 = 0u;
    v231 = 0u;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v224 = 0u;
    v225 = 0u;
    *(_OWORD *)v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Sentencepiece encoded target and (target) input must have same size!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v14 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2456));
  if (*v14 == v14[1])
  {
    v232 = 0u;
    v233 = 0u;
    v230 = 0u;
    v231 = 0u;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v224 = 0u;
    v225 = 0u;
    *(_OWORD *)v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Sentencepiece encoded source input can not be empty!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v15 = (_QWORD *)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2344));
  if (*v15 == v15[1])
  {
    v232 = 0u;
    v233 = 0u;
    v230 = 0u;
    v231 = 0u;
    v228 = 0u;
    v229 = 0u;
    v226 = 0u;
    v227 = 0u;
    v224 = 0u;
    v225 = 0u;
    *(_OWORD *)v222 = 0u;
    v223 = 0u;
    v220 = 0u;
    v221 = 0u;
    v218 = 0u;
    v219 = 0u;
    *(_OWORD *)__p = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, "Source input can not be empty!");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)__p);
  }
  v16 = (const quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2456));
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v263, *v16);
  v17 = v265;
  v18 = v264;
  v19 = (const quasar::TranslationPhraseInternal **)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2344));
  quasar::TranslationPhraseInternal::TranslationPhraseInternal(v262, *v19);
  v161 = v2;
  quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&__str, (quasar::TranslationPhraseInternal *)v262);
  v260 = 0;
  v259 = 0;
  v258 = &v259;
  v257 = 0;
  v256 = 0;
  v255 = (uint64_t *)&v256;
  v185 = (_QWORD *)((char *)v1 + 1304);
  if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)v1 + 163))
  {
    *(_OWORD *)&v266[8] = 0uLL;
    *(_QWORD *)v266 = &v266[8];
    v20 = (quasar **)quasar::ProcessingInput::getValue((quasar::StructuredPredictionBlock *)((char *)v1 + 2568));
    quasar::computeTokenCharMapping(*v20, (uint64_t)__p);
    std::__tree<int>::destroy((uint64_t)&v255, v256);
    v255 = (uint64_t *)__p[0];
    v256 = __p[1];
    v257 = v218;
    if ((_QWORD)v218)
    {
      *((_QWORD *)__p[1] + 2) = &v256;
      __p[0] = &__p[1];
      __p[1] = 0;
      *(_QWORD *)&v218 = 0;
    }
    else
    {
      v255 = (uint64_t *)&v256;
    }
    std::__tree<int>::destroy((uint64_t)v266, *(_QWORD **)&v266[8]);
    v21 = (_QWORD *)v219;
    *(_OWORD *)v266 = __PAIR128__(v219, *((unint64_t *)&v218 + 1));
    *(_QWORD *)&v266[16] = *((_QWORD *)&v219 + 1);
    if (*((_QWORD *)&v219 + 1))
    {
      *(_QWORD *)(v219 + 16) = &v266[8];
      *((_QWORD *)&v218 + 1) = &v219;
      v219 = 0uLL;
      v21 = 0;
    }
    else
    {
      *(_QWORD *)v266 = &v266[8];
    }
    std::__tree<int>::destroy((uint64_t)&v218 + 8, v21);
    std::__tree<int>::destroy((uint64_t)__p, (_QWORD *)__p[1]);
    quasar::computeTokenSpmMapping((uint64_t)v263, (uint64_t)&__str, (uint64_t)v266, (uint64_t)__p);
    std::__tree<int>::destroy((uint64_t)&v258, v259);
    v22 = __p[1];
    v258 = (_QWORD **)__p[0];
    v259 = __p[1];
    v260 = v218;
    if ((_QWORD)v218)
    {
      *((_QWORD *)__p[1] + 2) = &v259;
      __p[0] = &__p[1];
      __p[1] = 0;
      *(_QWORD *)&v218 = 0;
      v22 = 0;
    }
    else
    {
      v258 = &v259;
    }
    std::__tree<int>::destroy((uint64_t)__p, v22);
    std::__tree<int>::destroy((uint64_t)v266, *(_QWORD **)&v266[8]);
  }
  v23 = 0;
  v186 = 0;
  v164 = -252645135 * ((unint64_t)(v17 - v18) >> 3);
  v24 = (uint64_t)v1 + 8;
  v254 = 0;
  v253 = 0;
  v252 = (uint64_t *)&v253;
  v250 = 0;
  v249 = 0;
  v251 = 0;
  v162 = (_QWORD *)((char *)v1 + 1448);
  v163 = (_QWORD *)((char *)v1 + 1592);
  v159 = (_QWORD *)((char *)v1 + 1736);
  v247 = 0;
  v246 = 0;
  v180 = (_QWORD *)((char *)v1 + 664);
  v181 = (_QWORD *)((char *)v1 + 824);
  v248 = 0;
  v168 = (_QWORD *)((char *)v1 + 984);
  v244 = 0;
  v243 = 0;
  v245 = 0;
  v166 = (_QWORD *)((char *)v1 + 1144);
  v165 = (_QWORD *)((char *)v1 + 2048);
  v173 = (void *)*MEMORY[0x1E0DE4F50];
  v171 = *(void **)(MEMORY[0x1E0DE4F50] + 64);
  v172 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  v169 = MEMORY[0x1E0DE4FB8] + 16;
  v170 = (char *)v1 + 8;
  v25 = v161;
  v177 = v1;
  while (1)
  {
    v26 = (_QWORD *)quasar::ProcessingInput::getValue(v25);
    if (0x8F5C28F5C28F5C29 * ((uint64_t)(v26[1] - *v26) >> 3) <= v23)
      break;
    v27 = *(_QWORD *)quasar::ProcessingInput::getValue(v25);
    v28 = (uint64_t *)quasar::ProcessingInput::getValue(v160);
    v29 = (quasar::TranslationPhraseInternal *)(v27 + 200 * v23);
    v30 = *v28;
    v176 = v29;
    quasar::TranslationPhraseInternal::convertTokensToString((uint64_t *)&v187, v29);
    if (v188.__r_.__value_.__s.__data_[15] >= 0)
      v31 = &v187;
    else
      v31 = v187;
    if (v188.__r_.__value_.__s.__data_[15] >= 0)
      v32 = v188.__r_.__value_.__s.__data_[15];
    else
      v32 = v188.__r_.__value_.__r.__words[0];
    v33 = v23;
    v34 = v30 + 200 * v23;
    v35 = *(_QWORD *)(v34 + 136);
    v37 = *(_QWORD *)(v34 + 144);
    v36 = (_QWORD *)(v34 + 136);
    v182 = v35;
    quasar::findStructureTags((uint64_t)v31, v32, v24, (uint64_t *)v241);
    v167 = v33;
    v175 = (quasar::TranslationPhraseInternal *)(v30 + 200 * v33);
    quasar::parseAllSegments((unsigned int **)v241, (uint64_t)v175, (uint64_t)&v258, (uint64_t)v31, v32, v24, v164, (uint64_t *)&v239);
    v237 = 0;
    v238 = 0;
    v236 = (int *)&v237;
    v38 = v239;
    v39 = v240;
    if (v239 != v240)
    {
      v40 = (int *)v239 + 14;
      do
      {
        if (*((_DWORD *)v38 + 1) == 2)
          std::set<int>::insert[abi:ne180100]<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>((uint64_t *)&v236, *((int **)v38 + 6), v40);
        v38 += 6;
        v40 += 24;
      }
      while (v38 != v39);
    }
    if (!v33)
    {
      std::__tree<int>::__assign_multi<std::__tree_const_iterator<int,std::__tree_node<int,void *> *,long>>(&v252, v236, (int *)&v237);
LABEL_58:
      v48 = 0;
      goto LABEL_59;
    }
    if (v238 == v254)
    {
      v41 = v236;
      if (v236 == (int *)&v237)
        goto LABEL_58;
      v42 = v252;
      while (v41[7] == *((_DWORD *)v42 + 7))
      {
        v43 = (int *)*((_QWORD *)v41 + 1);
        v44 = v41;
        if (v43)
        {
          do
          {
            v41 = v43;
            v43 = *(int **)v43;
          }
          while (v43);
        }
        else
        {
          do
          {
            v41 = (int *)*((_QWORD *)v44 + 2);
            v45 = *(_QWORD *)v41 == (_QWORD)v44;
            v44 = v41;
          }
          while (!v45);
        }
        v46 = (uint64_t *)v42[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (uint64_t *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (uint64_t *)v42[2];
            v45 = *v47 == (_QWORD)v42;
            v42 = v47;
          }
          while (!v45);
        }
        v42 = v47;
        if (v41 == (int *)&v237)
          goto LABEL_58;
      }
    }
    if (quasar::gLogLevel >= 4)
    {
      v232 = 0u;
      v233 = 0u;
      v230 = 0u;
      v231 = 0u;
      v228 = 0u;
      v229 = 0u;
      v226 = 0u;
      v227 = 0u;
      v224 = 0u;
      v225 = 0u;
      *(_OWORD *)v222 = 0u;
      v223 = 0u;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      *(_OWORD *)__p = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Structured expansion disabled: mismatch with first-best output structure", 72);
      quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
    }
    v48 = 1;
LABEL_59:
    if (*(_DWORD *)quasar::OptionValue<int>::value(v163) != -1)
    {
      v49 = v254;
      if (v49 > *(int *)quasar::OptionValue<int>::value(v163))
      {
        if (quasar::gLogLevel >= 4)
        {
          v232 = 0u;
          v233 = 0u;
          v230 = 0u;
          v231 = 0u;
          v228 = 0u;
          v229 = 0u;
          v226 = 0u;
          v227 = 0u;
          v224 = 0u;
          v225 = 0u;
          *(_OWORD *)v222 = 0u;
          v223 = 0u;
          v220 = 0u;
          v221 = 0u;
          v218 = 0u;
          v219 = 0u;
          *(_OWORD *)__p = 0u;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Structured expansion disabled: too many prediction structures", 61);
          quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
        }
        v48 = 1;
      }
    }
    if (*(_DWORD *)quasar::OptionValue<int>::value(v162) != -1
      && *(_DWORD *)quasar::OptionValue<int>::value(v162) < v164)
    {
      if (quasar::gLogLevel >= 4)
      {
        v232 = 0u;
        v233 = 0u;
        v230 = 0u;
        v231 = 0u;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v224 = 0u;
        v225 = 0u;
        *(_OWORD *)v222 = 0u;
        v223 = 0u;
        v220 = 0u;
        v221 = 0u;
        v218 = 0u;
        v219 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Structured expansion disabled: source input too long", 52);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v48 = 1;
    }
    if (*(_BYTE *)quasar::OptionValue<BOOL>::value((_QWORD *)((char *)v159 + *(_QWORD *)(*v159 - 24))))
    {
      if (quasar::gLogLevel >= 4)
      {
        v232 = 0u;
        v233 = 0u;
        v230 = 0u;
        v231 = 0u;
        v228 = 0u;
        v229 = 0u;
        v226 = 0u;
        v227 = 0u;
        v224 = 0u;
        v225 = 0u;
        *(_OWORD *)v222 = 0u;
        v223 = 0u;
        v220 = 0u;
        v221 = 0u;
        v218 = 0u;
        v219 = 0u;
        *(_OWORD *)__p = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Structured expansion disabled: option is set", 44);
        quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)__p);
      }
      v48 = 1;
    }
    quasar::computeExpansions(&v239, v48, -252645135 * ((unint64_t)(v37 - v182) >> 3), &v234);
    v186 |= 0xAAAAAAAAAAAAAAABLL * (((char *)v235 - (char *)v234) >> 4) > 1;
    v174 = v235;
    for (i = v234; i != v174; i += 2)
    {
      v50 = v250;
      if ((unint64_t)v250 >= v251)
      {
        v51 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v249, v176);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v250, v176);
        v51 = (quasar::TranslationPhraseInternal *)((char *)v50 + 200);
      }
      v250 = v51;
      v52 = v247;
      if ((unint64_t)v247 >= v248)
      {
        v53 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>((uint64_t *)&v246, v175);
      }
      else
      {
        quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v247, v175);
        v53 = (quasar::TranslationPhraseInternal *)((char *)v52 + 200);
      }
      v247 = v53;
      v54 = *((_QWORD *)v53 - 8);
      for (j = *((_QWORD *)v53 - 7);
            j != v54;
            std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100]((uint64_t)v53 - 48, j))
      {
        j -= 136;
      }
      *((_QWORD *)v53 - 7) = v54;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)__p);
      v56 = i->__r_.__value_.__r.__words[0];
      size = i->__r_.__value_.__l.__size_;
      while (v56 != size)
      {
        if (*(char *)(v56 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v266, *(const std::string::value_type **)v56, *(_QWORD *)(v56 + 8));
        }
        else
        {
          v58 = *(_OWORD *)v56;
          *(_QWORD *)&v266[16] = *(_QWORD *)(v56 + 16);
          *(_OWORD *)v266 = v58;
        }
        *(_QWORD *)&v266[24] = *(_QWORD *)(v56 + 24);
        if (v266[23] >= 0)
          v59 = v266;
        else
          v59 = *(_BYTE **)v266;
        if (v266[23] >= 0)
          v60 = v266[23];
        else
          v60 = *(_QWORD *)&v266[8];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v218, (uint64_t)v59, v60);
        v61 = *(int *)&v266[24];
        if (*(int *)&v266[24] < *(int *)&v266[28])
        {
          v62 = 136 * *(int *)&v266[24];
          do
          {
            v63 = v247;
            v64 = (const quasar::TranslationTokenInternal *)(*v36 + v62);
            v65 = *((_QWORD *)v247 - 7);
            if (v65 >= *((_QWORD *)v247 - 6))
            {
              v66 = std::vector<quasar::TranslationTokenInternal>::__push_back_slow_path<quasar::TranslationTokenInternal const&>((uint64_t *)v247 - 8, v64);
            }
            else
            {
              quasar::TranslationTokenInternal::TranslationTokenInternal(*((std::string **)v247 - 7), v64);
              v66 = v65 + 136;
              *((_QWORD *)v63 - 7) = v65 + 136;
            }
            *((_QWORD *)v63 - 7) = v66;
            ++v61;
            v62 += 136;
          }
          while (v61 < *(int *)&v266[28]);
        }
        if ((v266[23] & 0x80000000) != 0)
          operator delete(*(void **)v266);
        v56 += 32;
      }
      v215 = 0uLL;
      v216 = 0;
      data = i[1].__r_.__value_.__l.__data_;
      p_size = &i[1].__r_.__value_.__l.__size_;
      if (data != (std::string::pointer)&i[1].__r_.__value_.__r.__words[1])
      {
        do
        {
          v213 = *(_QWORD *)(data + 28);
          v214 = *((_DWORD *)data + 9);
          v69 = (_BYTE *)quasar::OptionValue<BOOL>::value(v185);
          v70 = v256;
          if (*v69)
            goto LABEL_113;
          v80 = v213;
          if (!v256)
            goto LABEL_131;
          v81 = &v256;
          v82 = v256;
          do
          {
            v83 = v82;
            v84 = v81;
            v85 = *((_DWORD *)v82 + 7);
            if (v85 >= (int)v213)
              v81 = (_QWORD **)v82;
            else
              ++v82;
            v82 = (_QWORD *)*v82;
          }
          while (v82);
          if (v81 == &v256)
            goto LABEL_131;
          if (v85 < (int)v213)
            v83 = v84;
          if ((int)v213 >= *((_DWORD *)v83 + 7))
          {
LABEL_113:
            if (!v256)
              goto LABEL_114;
            v71 = &v256;
            do
            {
              v72 = v70;
              v73 = v71;
              v74 = *((_DWORD *)v70 + 7);
              v75 = v70 + 1;
              if (v74 >= (int)v213)
              {
                v75 = v72;
                v71 = (_QWORD **)v72;
              }
              v70 = (_QWORD *)*v75;
            }
            while (v70);
            if (v71 == &v256 || (v74 >= (int)v213 ? (v76 = v72) : (v76 = v73), (int)v213 < *((_DWORD *)v76 + 7)))
LABEL_114:
              v71 = &v256;
            if (v71 == &v256 && quasar::gLogLevel >= 2)
            {
              v281 = 0u;
              v280 = 0u;
              v279 = 0u;
              v278 = 0u;
              v277 = 0u;
              v276 = 0u;
              v275 = 0u;
              v274 = 0u;
              v273 = 0u;
              v272 = 0u;
              *(_OWORD *)v271 = 0u;
              v270 = 0u;
              *(_OWORD *)v269 = 0u;
              v268 = 0u;
              *(_OWORD *)v267 = 0u;
              memset(v266, 0, sizeof(v266));
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v266);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)"Token not found in char ranges: ", 32);
              std::ostream::operator<<();
              quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)v266);
            }
            *(_QWORD *)v266 = &v213;
            v78 = *((_DWORD *)std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v255, (int *)&v213, (uint64_t)&std::piecewise_construct, (_DWORD **)v266)+ 8);
            *(_QWORD *)v266 = &v213;
            v79 = *((_DWORD *)std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v255, (int *)&v213, (uint64_t)&std::piecewise_construct, (_DWORD **)v266)+ 9);
          }
          else
          {
LABEL_131:
            v86 = v264;
            v87 = v264 + 136 * (int)v213;
            v88 = *(_DWORD *)(v87 + 128);
            quasar::TranslationTokenInternal::strippedText((std::string *)v87, (std::string *)v266);
            v90 = v86 + 136 * v80;
            v89 = (_QWORD *)(v90 + 72);
            LODWORD(v90) = *(char *)(v90 + 95);
            if ((v90 & 0x80000000) != 0)
            {
              v91 = v89;
              v89 = (_QWORD *)*v89;
              v90 = v91[1];
            }
            else
            {
              v90 = v90;
            }
            v92 = v266[23];
            v93 = *(void **)v266;
            if (v266[23] >= 0)
              v94 = v266;
            else
              v94 = *(char **)v266;
            if (v266[23] >= 0)
              v95 = v266[23];
            else
              v95 = *(_QWORD *)&v266[8];
            if (v95)
            {
              v96 = (char *)v89 + v90;
              if (v90 >= v95)
              {
                v178 = *(void **)v266;
                v99 = *v94;
                v100 = v89;
                do
                {
                  v101 = v90 - v95;
                  if (v101 == -1)
                    break;
                  v102 = (char *)memchr(v100, v99, v101 + 1);
                  if (!v102)
                    break;
                  v97 = v102;
                  if (!memcmp(v102, v94, v95))
                    goto LABEL_150;
                  v100 = v97 + 1;
                  v90 = v96 - (v97 + 1);
                }
                while (v90 >= v95);
                v97 = v96;
LABEL_150:
                v1 = v177;
                v93 = v178;
              }
              else
              {
                v97 = (char *)v89 + v90;
              }
              if (v97 == v96)
                v98 = -1;
              else
                v98 = v97 - (char *)v89;
            }
            else
            {
              v98 = 0;
            }
            if (v92 < 0)
              operator delete(v93);
            if (v98 == -1)
              v103 = 0;
            else
              v103 = v98;
            v104 = v103 + v88;
            v105 = *(_DWORD *)(v264 + 136 * (int)v213 + 132);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_str = &__str;
            else
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v107 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v107 = __str.__r_.__value_.__l.__size_;
            quasar::utf8::codepointsCtr(p_str, v107, 0, v104, (unint64_t)&v203);
            if ((_BYTE)v204)
            {
              v78 = (int)v203.__r_.__value_.__l.__data_;
              v184 = v184 & 0xFFFFFFFF00000000 | LODWORD(v203.__r_.__value_.__l.__data_);
            }
            else
            {
              v193[0] = v203;
              memset(&v203, 0, sizeof(v203));
              if (quasar::gLogLevel >= 1)
              {
                v281 = 0u;
                v280 = 0u;
                v279 = 0u;
                v278 = 0u;
                v277 = 0u;
                v276 = 0u;
                v275 = 0u;
                v274 = 0u;
                v273 = 0u;
                v272 = 0u;
                *(_OWORD *)v271 = 0u;
                v270 = 0u;
                *(_OWORD *)v269 = 0u;
                v268 = 0u;
                *(_OWORD *)v267 = 0u;
                memset(v266, 0, sizeof(v266));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v266);
                if ((v193[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v108 = v193;
                else
                  v108 = (std::string *)v193[0].__r_.__value_.__r.__words[0];
                if ((v193[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v109 = HIBYTE(v193[0].__r_.__value_.__r.__words[2]);
                else
                  v109 = v193[0].__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)v108, v109);
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v266);
              }
              if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v193[0].__r_.__value_.__l.__data_);
              v78 = 0;
              v184 &= 0xFFFFFFFF00000000;
              if (!(_BYTE)v204 && SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v203.__r_.__value_.__l.__data_);
                v78 = 0;
              }
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &__str;
            else
              v110 = (std::string *)__str.__r_.__value_.__r.__words[0];
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v111 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            else
              v111 = __str.__r_.__value_.__l.__size_;
            quasar::utf8::codepointsCtr(v110, v111, v104, v105, (unint64_t)&v203);
            if ((_BYTE)v204)
            {
              p_size = &i[1].__r_.__value_.__l.__size_;
              v183 = v183 & 0xFFFFFFFF00000000 | LODWORD(v203.__r_.__value_.__l.__data_);
              v79 = v78 + LODWORD(v203.__r_.__value_.__l.__data_) - 1;
            }
            else
            {
              v193[0] = v203;
              memset(&v203, 0, sizeof(v203));
              p_size = &i[1].__r_.__value_.__l.__size_;
              if (quasar::gLogLevel >= 1)
              {
                v281 = 0u;
                v280 = 0u;
                v279 = 0u;
                v278 = 0u;
                v277 = 0u;
                v276 = 0u;
                v275 = 0u;
                v274 = 0u;
                v273 = 0u;
                v272 = 0u;
                *(_OWORD *)v271 = 0u;
                v270 = 0u;
                *(_OWORD *)v269 = 0u;
                v268 = 0u;
                *(_OWORD *)v267 = 0u;
                memset(v266, 0, sizeof(v266));
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v266);
                if ((v193[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v112 = v193;
                else
                  v112 = (std::string *)v193[0].__r_.__value_.__r.__words[0];
                if ((v193[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v113 = HIBYTE(v193[0].__r_.__value_.__r.__words[2]);
                else
                  v113 = v193[0].__r_.__value_.__l.__size_;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v266, (uint64_t)v112, v113);
                quasar::QuasarErrorMessage::~QuasarErrorMessage((quasar::QuasarErrorMessage *)v266);
              }
              if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v193[0].__r_.__value_.__l.__data_);
              v79 = v78 - 1;
              v183 &= 0xFFFFFFFF00000000;
              if (!(_BYTE)v204 && SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v203.__r_.__value_.__l.__data_);
            }
            *(_QWORD *)v266 = &v213;
            v114 = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(&v255, (int *)&v213, (uint64_t)&std::piecewise_construct, (_DWORD **)v266);
            *((_DWORD *)v114 + 8) = v78;
            *((_DWORD *)v114 + 9) = v79;
          }
          if ((v186 & 1) != 0)
          {
            v115 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v115 = __str.__r_.__value_.__l.__size_;
            if (v115 && (v78 & 0x80000000) == 0 && v79 >= v78 && v115 >= v79)
            {
              if (HIDWORD(v213) == 5)
                v116 = v180;
              else
                v116 = v181;
              v117 = quasar::OptionValue<std::string>::value(v116);
              if (*(char *)(v117 + 23) < 0)
              {
                std::string::__init_copy_ctor_external((std::string *)v266, *(const std::string::value_type **)v117, *(_QWORD *)(v117 + 8));
              }
              else
              {
                v118 = *(_OWORD *)v117;
                *(_QWORD *)&v266[16] = *(_QWORD *)(v117 + 16);
                *(_OWORD *)v266 = v118;
              }
              if ((_BYTE)v214)
                v119 = v181;
              else
                v119 = v180;
              v120 = quasar::OptionValue<std::string>::value(v119);
              if (*(char *)(v120 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v203, *(const std::string::value_type **)v120, *(_QWORD *)(v120 + 8));
              }
              else
              {
                v121 = *(_OWORD *)v120;
                v203.__r_.__value_.__r.__words[2] = *(_QWORD *)(v120 + 16);
                *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v121;
              }
              quasar::utf8::substr(&__str, v78, v79 - v78 + 1, v193);
              v122 = (_QWORD *)*((_QWORD *)v1 + 328);
              if (v122 && quasar::WordSet::containsWord(v122, (uint64_t)v193))
              {
                v123 = (const std::string *)quasar::OptionValue<std::string>::value(v168);
                std::string::operator=(&v203, v123);
              }
              v212 = __PAIR64__(v79, v78);
              v210 = 0uLL;
              v211 = 0;
              v124 = *((_QWORD *)&v215 + 1);
              if (*((_QWORD *)&v215 + 1) >= v216)
              {
                v125 = std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>((uint64_t *)&v215, (uint64_t)v266, (uint64_t)&v203, (uint64_t *)&v212, &v210);
              }
              else
              {
                std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>((uint64_t)&v216, *((uint64_t *)&v215 + 1), (uint64_t)v266, (uint64_t)&v203, (uint64_t *)&v212, &v210);
                v125 = v124 + 80;
              }
              *((_QWORD *)&v215 + 1) = v125;
              if (v210.n128_u64[0])
              {
                v210.n128_u64[1] = v210.n128_u64[0];
                operator delete((void *)v210.n128_u64[0]);
              }
              if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v193[0].__r_.__value_.__l.__data_);
              if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v203.__r_.__value_.__l.__data_);
              if ((v266[23] & 0x80000000) != 0)
                operator delete(*(void **)v266);
            }
          }
          v126 = (char *)*((_QWORD *)data + 1);
          if (v126)
          {
            do
            {
              v127 = v126;
              v126 = *(char **)v126;
            }
            while (v126);
          }
          else
          {
            do
            {
              v127 = (char *)*((_QWORD *)data + 2);
              v45 = *(_QWORD *)v127 == (_QWORD)data;
              data = v127;
            }
            while (!v45);
          }
          data = v127;
        }
        while (v127 != (char *)p_size);
      }
      std::stringbuf::str();
      v203 = v202;
      memset(&v202, 0, sizeof(v202));
      v204 = 0;
      v206 = 0;
      v207 = 0;
      v205 = 0;
      v208 = 3212836864;
      v209 = -1;
      quasar::TranslationTokenInternal::TranslationTokenInternal((std::string *)v266, (const quasar::TranslationToken *)&v203);
      std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*>((uint64_t)v250 - 64, (quasar::TranslationTokenInternal *)v266, (quasar::TranslationTokenInternal *)((char *)&v273 + 8), 1uLL);
      if (v271[1])
      {
        *(void **)&v272 = v271[1];
        operator delete(v271[1]);
      }
      v24 = (uint64_t)v170;
      if (SHIBYTE(v270) < 0)
        operator delete(v269[1]);
      if (v267[0])
      {
        v267[1] = v267[0];
        operator delete(v267[0]);
      }
      if ((v266[23] & 0x80000000) != 0)
        operator delete(*(void **)v266);
      if (v205)
      {
        v206 = v205;
        operator delete(v205);
      }
      if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v203.__r_.__value_.__l.__data_);
      if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v202.__r_.__value_.__l.__data_);
      if ((v186 & 1) != 0 && (_QWORD)v215 != *((_QWORD *)&v215 + 1))
      {
        v128 = v250;
        v129 = quasar::OptionValue<std::string>::value(v166);
        if (*(char *)(v129 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v197, *(const std::string::value_type **)v129, *(_QWORD *)(v129 + 8));
        }
        else
        {
          v130 = *(_OWORD *)v129;
          v197.__r_.__value_.__r.__words[2] = *(_QWORD *)(v129 + 16);
          *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v130;
        }
        v131 = v216;
        v132 = v215;
        v216 = 0;
        v215 = 0uLL;
        v198 = v197;
        memset(&v197, 0, sizeof(v197));
        v199 = v167;
        v200 = v132;
        v201 = v131;
        memset(v196, 0, sizeof(v196));
        quasar::MetaInfo::setStructuredPrediction((quasar::MetaInfo::Impl **)v128 - 1, (uint64_t)&v198);
        *(_QWORD *)v266 = &v200;
        std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)v266);
        if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v198.__r_.__value_.__l.__data_);
        *(_QWORD *)v266 = v196;
        std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)v266);
        if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v197.__r_.__value_.__l.__data_);
        if (*(_BYTE *)quasar::OptionValue<BOOL>::value(v165))
        {
          memset(v266, 0, 24);
          v133 = v239;
          v134 = v240;
          if (v239 == v240)
          {
            v138 = 0;
            v135 = 0;
            v137 = 0;
          }
          else
          {
            v135 = 0;
            do
            {
              if (*((_DWORD *)v133 + 1) == 2)
              {
                v136 = (uint64_t)v133 + 72;
                if ((unint64_t)v135 >= *(_QWORD *)&v266[16])
                {
                  v135 = (uint64_t *)std::vector<std::set<int>>::__emplace_back_slow_path<std::set<int> const&>((uint64_t *)v266, v136);
                }
                else
                {
                  std::set<int>::set[abi:ne180100](v135, v136);
                  v135 += 3;
                }
                *(_QWORD *)&v266[8] = v135;
              }
              v133 += 6;
            }
            while (v133 != v134);
            v137 = *(_QWORD *)v266;
            v138 = *(_QWORD *)&v266[16];
          }
          *(_QWORD *)&v194 = v137;
          *((_QWORD *)&v194 + 1) = v135;
          v195 = v138;
          memset(v266, 0, 24);
          quasar::MetaInfo::setStructurePredictionToSourceTokenAlignments((uint64_t *)v250 - 1, (uint64_t)"gender", 6, &v194);
          v203.__r_.__value_.__r.__words[0] = (std::string::size_type)&v194;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
          v203.__r_.__value_.__r.__words[0] = (std::string::size_type)v266;
          std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v203);
        }
      }
      *(_QWORD *)v266 = &v215;
      std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__destroy_vector::operator()[abi:ne180100]((void ***)v266);
      __p[0] = v173;
      *(void **)((char *)__p + *((_QWORD *)v173 - 3)) = v171;
      *(_QWORD *)&v218 = v172;
      *((_QWORD *)&v218 + 1) = v169;
      if (SHIBYTE(v223) < 0)
        operator delete(v222[1]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](&v225);
    }
    __p[0] = &v234;
    std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    std::__tree<int>::destroy((uint64_t)&v236, v237);
    __p[0] = &v239;
    std::vector<quasar::Segment>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
    if (v241[0])
    {
      v241[1] = v241[0];
      operator delete(v241[0]);
    }
    v25 = v161;
    if (v188.__r_.__value_.__s.__data_[15] < 0)
      operator delete(v187);
    v23 = v167 + 1;
  }
  v139 = quasar::OptionValue<std::string>::value(v166);
  v140 = *(char *)(v139 + 23);
  if (v140 >= 0)
    v141 = v139;
  else
    v141 = *(_QWORD *)v139;
  if (v140 >= 0)
    v142 = *(unsigned __int8 *)(v139 + 23);
  else
    v142 = *(_QWORD *)(v139 + 8);
  quasar::putPhraseWithAllDefaultsFirst(&v249, &v246, v141, v142);
  quasar::recomputeAlignment((uint64_t *)&v246);
  v143 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "spm");
  quasar::ProcessingBlock::send((uint64_t)v1 + v143, (const void **)__p, (uint64_t)&v246, 1);
  if (SBYTE7(v218) < 0)
    operator delete(__p[0]);
  v144 = v244;
  if ((unint64_t)v244 >= v245)
  {
    v145 = (quasar::TranslationPhraseInternal *)std::vector<quasar::TranslationPhraseInternal>::__push_back_slow_path<quasar::TranslationPhraseInternal const&>(&v243, (const quasar::TranslationPhraseInternal *)v262);
  }
  else
  {
    quasar::TranslationPhraseInternal::TranslationPhraseInternal((std::string *)v244, (const quasar::TranslationPhraseInternal *)v262);
    v145 = (quasar::TranslationPhraseInternal *)((char *)v144 + 200);
  }
  v244 = v145;
  if ((v186 & 1) != 0)
  {
    quasar::PTree::PTree((quasar::PTree *)__p);
    quasar::PTree::PTree((quasar::PTree *)v266);
    quasar::PTree::PTree((quasar::PTree *)&v203);
    v146 = v252;
    if (v252 != (uint64_t *)&v253)
    {
      do
      {
        LODWORD(v239) = *((_DWORD *)v146 + 7);
        v147 = std::map<int,std::pair<int,int>>::at((uint64_t)&v255, (int *)&v239);
        v148 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v148 = __str.__r_.__value_.__l.__size_;
        if (v148)
        {
          v149 = *v147;
          if ((*v147 & 0x80000000) == 0 && SHIDWORD(v149) >= (int)v149 && v148 >= HIDWORD(v149))
          {
            quasar::PTree::PTree((quasar::PTree *)v193);
            std::string::basic_string[abi:ne180100]<0>(v241, "source.start");
            LODWORD(v187) = quasar::getType((quasar *)v149);
            std::to_string(&v188, v149);
            v189 = 0;
            v190 = 0;
            v191 = 0;
            v192 = 1;
            quasar::PTree::putChild((uint64_t)v193, (uint64_t)v241, (uint64_t)&v187, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v187);
            if (v242 < 0)
              operator delete(v241[0]);
            std::string::basic_string[abi:ne180100]<0>(v241, "source.end");
            LODWORD(v187) = quasar::getType((quasar *)HIDWORD(v149));
            std::to_string(&v188, SHIDWORD(v149));
            v189 = 0;
            v190 = 0;
            v191 = 0;
            v192 = 1;
            quasar::PTree::putChild((uint64_t)v193, (uint64_t)v241, (uint64_t)&v187, 1);
            quasar::PTree::~PTree((quasar::PTree *)&v187);
            if (v242 < 0)
              operator delete(v241[0]);
            quasar::PTree::addChild((quasar::PTree *)&v203, (const quasar::PTree *)v193);
            quasar::PTree::~PTree((quasar::PTree *)v193);
          }
        }
        v151 = (uint64_t *)v146[1];
        if (v151)
        {
          do
          {
            v152 = v151;
            v151 = (uint64_t *)*v151;
          }
          while (v151);
        }
        else
        {
          do
          {
            v152 = (uint64_t *)v146[2];
            v45 = *v152 == (_QWORD)v146;
            v146 = v152;
          }
          while (!v45);
        }
        v146 = v152;
      }
      while (v152 != (uint64_t *)&v253);
    }
    std::string::basic_string[abi:ne180100]<0>(v193, "spans");
    quasar::PTree::putChild((uint64_t)__p, (uint64_t)v193, (uint64_t)&v203, 1);
    if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193[0].__r_.__value_.__l.__data_);
    v153 = quasar::OptionValue<std::string>::value(v166);
    v154 = (char *)v153;
    if (*(char *)(v153 + 23) >= 0)
      v155 = *(unsigned __int8 *)(v153 + 23);
    else
      v155 = *(_QWORD *)(v153 + 8);
    std::string::basic_string[abi:ne180100]((uint64_t)v193, v155 + 13);
    if ((v193[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v156 = v193;
    else
      v156 = (std::string *)v193[0].__r_.__value_.__r.__words[0];
    if (v155)
    {
      if (v154[23] >= 0)
        v157 = v154;
      else
        v157 = *(char **)v154;
      memmove(v156, v157, v155);
    }
    strcpy((char *)v156 + v155, "_alternatives");
    quasar::PTree::putChild((uint64_t)v266, (uint64_t)v193, (uint64_t)__p, 1);
    if (SHIBYTE(v193[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193[0].__r_.__value_.__l.__data_);
    quasar::MetaInfo::update((quasar::MetaInfo::Impl **)v244 - 1, (const quasar::PTree *)v266);
    quasar::PTree::~PTree((quasar::PTree *)&v203);
    quasar::PTree::~PTree((quasar::PTree *)v266);
    quasar::PTree::~PTree((quasar::PTree *)__p);
  }
  v158 = *(_QWORD *)(*(_QWORD *)v1 - 24);
  std::string::basic_string[abi:ne180100]<0>(__p, "source");
  quasar::ProcessingBlock::send((uint64_t)v1 + v158, (const void **)__p, (uint64_t)&v243, 1);
  if (SBYTE7(v218) < 0)
    operator delete(__p[0]);
  quasar::ProcessingBlock::send((uint64_t)v1 + *(_QWORD *)(*(_QWORD *)v1 - 24), (uint64_t)&v249, 0);
  __p[0] = &v243;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v246;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  __p[0] = &v249;
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  std::__tree<int>::destroy((uint64_t)&v252, v253);
  std::__tree<int>::destroy((uint64_t)&v255, v256);
  std::__tree<int>::destroy((uint64_t)&v258, v259);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v262);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)v263);
}

void sub_1ADD2A3B4(_Unwind_Exception *a1)
{
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x250]);
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x6A0]);
  quasar::PTree::~PTree((quasar::PTree *)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x468];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x480];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  STACK[0x2F0] = (unint64_t)&STACK[0x498];
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2F0]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4B0], (_QWORD *)STACK[0x4B8]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4C8], (_QWORD *)STACK[0x4D0]);
  std::__tree<int>::destroy((uint64_t)&STACK[0x4E0], (_QWORD *)STACK[0x4E8]);
  if (SLOBYTE(STACK[0x50F]) < 0)
    operator delete((void *)STACK[0x4F8]);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x510]);
  quasar::TranslationPhraseInternal::~TranslationPhraseInternal((quasar::TranslationPhraseInternal *)&STACK[0x5D8]);
  _Unwind_Resume(a1);
}

uint64_t *std::map<int,std::pair<int,int>>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 7);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 4;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void `non-virtual thunk to'quasar::StructuredPredictionBlock::processBody(quasar::StructuredPredictionBlock *this)
{
  quasar::StructuredPredictionBlock::processBody((quasar::StructuredPredictionBlock *)((char *)this - 2336));
}

uint64_t quasar::StructuredPredictionBlock::minConfigVersion(quasar::StructuredPredictionBlock *this)
{
  return 249;
}

uint64_t `virtual thunk to'quasar::StructuredPredictionBlock::minConfigVersion(quasar::StructuredPredictionBlock *this)
{
  return 249;
}

void quasar::StructuredPredictionBlock::init(quasar::StructuredPredictionBlock *this)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v2 = quasar::OptionValue<std::string>::value((_QWORD *)this + 236);
  v3 = *(unsigned __int8 *)(v2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(v2 + 8);
  if (v3)
  {
    quasar::WordSetFileFactory::get((unsigned __int8 *)v2, (std::string::size_type *)&v7);
    std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100]((uint64_t)this + 2624, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void `virtual thunk to'quasar::StructuredPredictionBlock::init(quasar::StructuredPredictionBlock *this)
{
  quasar::StructuredPredictionBlock::init((quasar::StructuredPredictionBlock *)((char *)this
                                                                              + *(_QWORD *)(*(_QWORD *)this - 88)));
}

void quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::setContextProvider(uint64_t a1, uint64_t *a2)
{
  void (***v3)(uint64_t **__return_ptr);
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t *v15;
  uint64_t *v16;

  v3 = (void (***)(uint64_t **__return_ptr))(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 8))(a1);
  (**v3)(&v15);
  v4 = v15;
  v5 = v16;
  if (v15 != v16)
  {
    do
    {
      v6 = *v4;
      v7 = a2[1];
      v13 = *a2;
      v14 = (std::__shared_weak_count *)v7;
      if (v7)
      {
        v8 = (unint64_t *)(v7 + 8);
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      quasar::OptionValueBase::setContextProvider(v6, &v13);
      v10 = v14;
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v4 = v15;
  }
  if (v4)
  {
    v16 = v4;
    operator delete(v4);
  }
}

void sub_1ADD2AA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::getOptions(uint64_t a1)
{
  return a1 + 8;
}

void `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::setContextProvider(_QWORD *a1, uint64_t *a2)
{
  quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::setContextProvider((uint64_t)a1 + *(_QWORD *)(*a1 - 72), a2);
}

uint64_t `virtual thunk to'quasar::ConfiguredProcessingBlock<quasar::StructuredPredictionOptions>::getOptions(_QWORD *a1)
{
  return (uint64_t)a1 + *(_QWORD *)(*a1 - 104) + 8;
}

void quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2640));
}

{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2640));
  JUMPOUT(0x1AF44D190);
}

const char *quasar::StructuredPredictionBlock::blockType(quasar::StructuredPredictionBlock *this)
{
  return "StructuredPredictionBlock";
}

_QWORD *quasar::StructuredPredictionBlock::inputs@<X0>(quasar::StructuredPredictionBlock *this@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  _QWORD *result;
  _QWORD *v6;

  v4 = *(unsigned __int8 *)quasar::OptionValue<BOOL>::value((_QWORD *)this + 163);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (v4)
  {
    result = operator new(0x28uLL);
    *a2 = result;
    v6 = result + 5;
    a2[2] = result + 5;
    *result = (char *)this + 2344;
    result[1] = (char *)this + 2400;
    result[2] = (char *)this + 2456;
    result[3] = (char *)this + 2512;
    result[4] = (char *)this + 2568;
  }
  else
  {
    result = operator new(0x20uLL);
    *a2 = result;
    v6 = result + 4;
    a2[2] = result + 4;
    *result = (char *)this + 2344;
    result[1] = (char *)this + 2400;
    result[2] = (char *)this + 2456;
    result[3] = (char *)this + 2512;
  }
  a2[1] = v6;
  return result;
}

_QWORD *`non-virtual thunk to'quasar::StructuredPredictionBlock::inputs@<X0>(quasar::StructuredPredictionBlock *this@<X0>, _QWORD *a2@<X8>)
{
  return quasar::StructuredPredictionBlock::inputs((quasar::StructuredPredictionBlock *)((char *)this - 2336), a2);
}

void `non-virtual thunk to'quasar::StructuredPredictionBlock::~StructuredPredictionBlock(char **this)
{
  quasar::ProcessingBlock::~ProcessingBlock(this + 38);
}

{
  quasar::ProcessingBlock::~ProcessingBlock(this + 38);
  JUMPOUT(0x1AF44D190);
}

void `virtual thunk to'quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this)
{
  uint64_t v1;

  quasar::ProcessingBlock::~ProcessingBlock((char **)(v1 + 2640));
}

{
  char **v1;

  v1 = (char **)((char *)this + *(_QWORD *)(*(_QWORD *)this - 24));
  quasar::ProcessingBlock::~ProcessingBlock(v1 + 330);
  JUMPOUT(0x1AF44D190);
}

const char *`virtual thunk to'quasar::StructuredPredictionBlock::blockType(quasar::StructuredPredictionBlock *this)
{
  return "StructuredPredictionBlock";
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1EEEEJNS_3mapIiNS_4pairIiiEENS_4lessIiEENS_9allocatorINS4_IKiS5_EEEEEENS3_IiiS7_NS8_INS4_IS9_iEEEEEEEEC2B8ne180100IJLm0ELm1EEJSC_SF_EJEJEJRSC_RSF_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSL_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = std::map<int,std::pair<int,int>>::map[abi:ne180100](a1, a2);
  std::map<int,int>::map[abi:ne180100]((uint64_t *)(v5 + 24), a3);
  return a1;
}

void sub_1ADD2AD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t std::map<int,std::pair<int,int>>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADD2AD6C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>(char *result, int *a2, int *a3)
{
  int *v4;
  uint64_t **v5;
  uint64_t *v6;
  int *v7;
  int *v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t *)(result + 8);
    do
    {
      result = std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(v5, v6, v4 + 7, (uint64_t)(v4 + 7));
      v7 = (int *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (int *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *std::__tree<std::__value_type<int,std::pair<int,int>>,std::__map_value_compare<int,std::__value_type<int,std::pair<int,int>>,std::less<int>,true>,std::allocator<std::__value_type<int,std::pair<int,int>>>>::__emplace_hint_unique_key_args<int,std::pair<int const,std::pair<int,int>> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t *v6;
  char *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t *v11;

  v6 = std::__tree<std::__value_type<quasar::PronType,int>,std::__map_value_compare<quasar::PronType,std::__value_type<quasar::PronType,int>,std::less<quasar::PronType>,true>,std::allocator<std::__value_type<quasar::PronType,int>>>::__find_equal<quasar::PronType>(a1, a2, &v11, &v10, a3);
  v7 = (char *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (char *)operator new(0x28uLL);
    *(_QWORD *)(v7 + 28) = *(_QWORD *)a4;
    *((_DWORD *)v7 + 9) = *(_DWORD *)(a4 + 8);
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *quasar::OptionValue<std::string>::OptionValue(uint64_t *a1, uint64_t a2)
{
  quasar::OptionValueBase *v4;
  __int128 v5;

  v4 = quasar::OptionValueBase::OptionValueBase((quasar::OptionValueBase *)a1, (const quasar::OptionValueBase *)a2);
  *(_QWORD *)v4 = &unk_1E5D347F0;
  if (*(char *)(a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v4 + 104), *(const std::string::value_type **)(a2 + 104), *(_QWORD *)(a2 + 112));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 104);
    *((_QWORD *)v4 + 15) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)((char *)v4 + 104) = v5;
  }
  a1[16] = *(_QWORD *)(a2 + 128);
  std::map<std::string,std::string>::map[abi:ne180100](a1 + 17, (const void ***)(a2 + 136));
  return a1;
}

void sub_1ADD2AF18(_Unwind_Exception *a1)
{
  uint64_t v1;

  *(_QWORD *)v1 = &unk_1E5D359C0;
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v1 + 88);
  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

quasar::OptionValueBase *quasar::OptionValueBase::OptionValueBase(quasar::OptionValueBase *this, const quasar::OptionValueBase *a2)
{
  __int128 v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)this = &unk_1E5D359C0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  v6 = (std::string *)((char *)this + 56);
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  *((_DWORD *)this + 20) = *((_DWORD *)a2 + 20);
  v8 = *((_QWORD *)a2 + 12);
  *((_QWORD *)this + 11) = *((_QWORD *)a2 + 11);
  *((_QWORD *)this + 12) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  return this;
}

void sub_1ADD2B074(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1ADD2B0E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

void quasar::StructuredPredictionBlock::~StructuredPredictionBlock(quasar::StructuredPredictionBlock *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[5];
  *((_QWORD *)this + 292) = a2[6];
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 2624);
  v6 = (void **)((char *)this + 2600);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2591) < 0)
    operator delete(*((void **)this + 321));
  v6 = (void **)((char *)this + 2544);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2535) < 0)
    operator delete(*((void **)this + 314));
  v6 = (void **)((char *)this + 2488);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2479) < 0)
    operator delete(*((void **)this + 307));
  v6 = (void **)((char *)this + 2432);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2423) < 0)
    operator delete(*((void **)this + 300));
  v6 = (void **)((char *)this + 2376);
  std::vector<quasar::TranslationPhraseInternal>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 2367) < 0)
    operator delete(*((void **)this + 293));
  v5 = a2[1];
  *(_QWORD *)this = v5;
  *(_QWORD *)((char *)this + *(_QWORD *)(v5 - 24)) = a2[2];
  quasar::StructuredPredictionOptions::~StructuredPredictionOptions((quasar::StructuredPredictionBlock *)((char *)this + 8));
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::NbestElement>(uint64_t *a1, const kaldi::quasar::TranslationUtil::NbestElement *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  kaldi::quasar::TranslationUtil::NbestElement *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xF0F0F0F0F0F0F0F1 * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0xF0F0F0F0F0F0F0)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xF0F0F0F0F0F0F0F1 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x78787878787878)
    v9 = 0xF0F0F0F0F0F0F0;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::NbestElement>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (kaldi::quasar::TranslationUtil::NbestElement *)&v10[272 * v4];
  v16 = &v10[272 * v9];
  kaldi::quasar::TranslationUtil::NbestElement::NbestElement(v14, a2);
  v15 = (char *)v14 + 272;
  std::vector<kaldi::quasar::TranslationUtil::NbestElement>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1ADD2B2F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::NbestElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<kaldi::quasar::TranslationUtil::PathElement>::__push_back_slow_path<kaldi::quasar::TranslationUtil::PathElement>(uint64_t *a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x111111111111111)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4) > v4)
    v4 = 0xDDDDDDDDDDDDDDDELL * ((a1[2] - *a1) >> 4);
  if (0xEEEEEEEEEEEEEEEFLL * ((a1[2] - *a1) >> 4) >= 0x88888888888888)
    v6 = 0x111111111111111;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::quasar::TranslationUtil::PathElement>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[240 * v3];
  v13 = &v7[240 * v6];
  std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 240;
  std::vector<kaldi::quasar::TranslationUtil::PathElement>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)&v10);
  return v8;
}

void sub_1ADD2B404(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::quasar::TranslationUtil::PathElement>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<kaldi::quasar::TranslationUtil::PathElement>::construct[abi:ne180100]<kaldi::quasar::TranslationUtil::PathElement,kaldi::quasar::TranslationUtil::PathElement>(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v3;
  __int128 v4;
  __n128 result;

  v3 = *a3;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)a2 = v3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a2 + 24) = *((_DWORD *)a3 + 6);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_OWORD *)(a2 + 32) = a3[2];
  *(_QWORD *)(a2 + 48) = *((_QWORD *)a3 + 6);
  *((_QWORD *)a3 + 4) = 0;
  *((_QWORD *)a3 + 5) = 0;
  *((_QWORD *)a3 + 6) = 0;
  v4 = *(__int128 *)((char *)a3 + 56);
  *(_QWORD *)(a2 + 72) = *((_QWORD *)a3 + 9);
  *(_OWORD *)(a2 + 56) = v4;
  *((_QWORD *)a3 + 8) = 0;
  *((_QWORD *)a3 + 9) = 0;
  *((_QWORD *)a3 + 7) = 0;
  *(_QWORD *)(a2 + 80) = *((_QWORD *)a3 + 10);
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_OWORD *)(a2 + 88) = *(__int128 *)((char *)a3 + 88);
  *(_QWORD *)(a2 + 104) = *((_QWORD *)a3 + 13);
  *((_QWORD *)a3 + 11) = 0;
  *((_QWORD *)a3 + 12) = 0;
  *((_QWORD *)a3 + 13) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = 0;
  *(_OWORD *)(a2 + 112) = a3[7];
  *(_QWORD *)(a2 + 128) = *((_QWORD *)a3 + 16);
  *((_QWORD *)a3 + 14) = 0;
  *((_QWORD *)a3 + 15) = 0;
  *((_QWORD *)a3 + 16) = 0;
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_OWORD *)(a2 + 136) = *(__int128 *)((char *)a3 + 136);
  *(_QWORD *)(a2 + 152) = *((_QWORD *)a3 + 19);
  *((_QWORD *)a3 + 17) = 0;
  *((_QWORD *)a3 + 18) = 0;
  *((_QWORD *)a3 + 19) = 0;
  *(_QWORD *)(a2 + 160) = 0;
  *(_QWORD *)(a2 + 168) = 0;
  *(_QWORD *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = a3[10];
  *(_QWORD *)(a2 + 176) = *((_QWORD *)a3 + 22);
  *((_QWORD *)a3 + 20) = 0;
  *((_QWORD *)a3 + 21) = 0;
  *((_QWORD *)a3 + 22) = 0;
  *(_QWORD *)(a2 + 184) = 0;
  *(_QWORD *)(a2 + 192) = 0;
  *(_QWORD *)(a2 + 200) = 0;
  *(_OWORD *)(a2 + 184) = *(__int128 *)((char *)a3 + 184);
  *(_QWORD *)(a2 + 200) = *((_QWORD *)a3 + 25);
  *((_QWORD *)a3 + 23) = 0;
  *((_QWORD *)a3 + 24) = 0;
  *((_QWORD *)a3 + 25) = 0;
  *(_QWORD *)(a2 + 208) = 0;
  *(_QWORD *)(a2 + 216) = 0;
  *(_QWORD *)(a2 + 224) = 0;
  result = (__n128)a3[13];
  *(__n128 *)(a2 + 208) = result;
  *(_QWORD *)(a2 + 224) = *((_QWORD *)a3 + 28);
  *((_QWORD *)a3 + 26) = 0;
  *((_QWORD *)a3 + 27) = 0;
  *((_QWORD *)a3 + 28) = 0;
  *(_DWORD *)(a2 + 232) = *((_DWORD *)a3 + 58);
  return result;
}

void std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,false>(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, char a5)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  char *v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  __int128 v27;

uint64_t std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  _DWORD *v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  _BYTE v13[24];
  char v14;
  uint64_t v15;
  uint64_t v16;

  if ((_DWORD *)result != a2)
  {
    v15 = v2;
    v16 = v3;
    v5 = (_QWORD *)result;
    v6 = (_DWORD *)(result + 24);
    if ((_DWORD *)(result + 24) != a2)
    {
      v7 = 0;
      v8 = (_DWORD *)result;
      do
      {
        v9 = v8;
        v8 = v6;
        result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v13, v6, v9);
        if ((_DWORD)result)
        {
          *(_OWORD *)v13 = *(_OWORD *)v8;
          *(_QWORD *)&v13[16] = *((_QWORD *)v8 + 2);
          v10 = v7;
          while (1)
          {
            v11 = (char *)v5 + v10;
            *((_QWORD *)v11 + 3) = *(_QWORD *)((char *)v5 + v10);
            *((_OWORD *)v11 + 2) = *(_OWORD *)((char *)v5 + v10 + 8);
            if (!v10)
              break;
            v10 -= 24;
            result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v14, v13, (_QWORD *)((char *)v5 + v10));
            if ((result & 1) == 0)
            {
              v12 = (_QWORD *)((char *)v5 + v10 + 24);
              goto LABEL_10;
            }
          }
          v12 = v5;
LABEL_10:
          *v12 = *(_QWORD *)v13;
          *(_OWORD *)(v11 + 8) = *(_OWORD *)&v13[8];
        }
        v6 = v8 + 6;
        v7 += 24;
      }
      while (v8 + 6 != a2);
    }
  }
  return result;
}

uint64_t std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t result, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _BYTE v10[24];
  char v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD *)result != a2)
  {
    v12 = v2;
    v13 = v3;
    v5 = (_DWORD *)result;
    v6 = (_DWORD *)(result + 24);
    if ((_DWORD *)(result + 24) != a2)
    {
      v7 = result - 24;
      do
      {
        v8 = v5;
        v5 = v6;
        result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v10, v6, v8);
        if ((_DWORD)result)
        {
          *(_OWORD *)v10 = *(_OWORD *)v5;
          *(_QWORD *)&v10[16] = *((_QWORD *)v5 + 2);
          v9 = v7;
          do
          {
            *(_QWORD *)(v9 + 48) = *(_QWORD *)(v9 + 24);
            *(_OWORD *)(v9 + 56) = *(_OWORD *)(v9 + 32);
            result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, v10, (_DWORD *)v9);
            v9 -= 24;
          }
          while ((result & 1) != 0);
          *(_QWORD *)(v9 + 48) = *(_QWORD *)v10;
          *(_OWORD *)(v9 + 56) = *(_OWORD *)&v10[8];
        }
        v6 = v5 + 6;
        v7 += 24;
      }
      while (v5 + 6 != a2);
    }
  }
  return result;
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  int v6;
  __int128 *v7;
  int v8;
  int v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[17];

  if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a2, a1) & 1) == 0)
  {
    result = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2);
    if (!(_DWORD)result)
      return result;
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    v13 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v13;
    if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a2, a1))return 1;
    v14 = *a1;
    *a1 = *a2;
    *a2 = v14;
    v15 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v15;
    return 2;
  }
  v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2);
  v7 = (__int128 *)(a1 + 1);
  v9 = *(_DWORD *)a1;
  v8 = *((_DWORD *)a1 + 1);
  if (!v6)
  {
    *a1 = *a2;
    *(_DWORD *)a2 = v9;
    *((_DWORD *)a2 + 1) = v8;
    v16 = *v7;
    *v7 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = v16;
    if (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v19, a3, a2))return 1;
    v17 = *a2;
    *a2 = *a3;
    *a3 = v17;
    v18 = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a2 + 1) = *(_OWORD *)(a3 + 1);
    *(_OWORD *)(a3 + 1) = v18;
    return 2;
  }
  *a1 = *a3;
  *(_DWORD *)a3 = v9;
  *((_DWORD *)a3 + 1) = v8;
  v10 = *v7;
  *v7 = *(_OWORD *)(a3 + 1);
  *(_OWORD *)(a3 + 1) = v10;
  return 1;
}

_DWORD *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _BYTE v9[24];
  __int128 v10;

  v2 = a2;
  *(_OWORD *)v9 = *(_OWORD *)a1;
  *(_QWORD *)&v9[16] = *(_QWORD *)(a1 + 16);
  if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)(a2 - 24)) & 1) != 0)
  {
    v4 = (_DWORD *)a1;
    do
      v4 += 6;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v4) & 1) == 0);
  }
  else
  {
    v5 = (_DWORD *)(a1 + 24);
    do
    {
      v4 = v5;
      if ((unint64_t)v5 >= v2)
        break;
      v6 = std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v5);
      v5 = v4 + 6;
    }
    while (!v6);
  }
  if ((unint64_t)v4 < v2)
  {
    do
      v2 -= 24;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)v2) & 1) != 0);
  }
  while ((unint64_t)v4 < v2)
  {
    v7 = *(_QWORD *)v4;
    *(_QWORD *)v4 = *(_QWORD *)v2;
    *(_QWORD *)v2 = v7;
    v10 = *(_OWORD *)(v4 + 2);
    *(_OWORD *)(v4 + 2) = *(_OWORD *)(v2 + 8);
    *(_OWORD *)(v2 + 8) = v10;
    do
      v4 += 6;
    while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, v4));
    do
      v2 -= 24;
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v10, v9, (_DWORD *)v2) & 1) != 0);
  }
  if (v4 - 6 != (_DWORD *)a1)
  {
    *(_QWORD *)a1 = *((_QWORD *)v4 - 3);
    *(_OWORD *)(a1 + 8) = *((_OWORD *)v4 - 1);
  }
  *((_QWORD *)v4 - 3) = *(_QWORD *)v9;
  *((_OWORD *)v4 - 1) = *(_OWORD *)&v9[8];
  return v4;
}

double std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,std::tuple<int,quasar::SegmentType,std::string_view> *,std::__less<void,void> &>(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  double result;
  _BYTE v10[24];
  __int128 v11;

  v4 = 0;
  *(_OWORD *)v10 = *(_OWORD *)a1;
  *(_QWORD *)&v10[16] = *(_QWORD *)(a1 + 16);
  do
    v4 += 24;
  while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, (_DWORD *)(v4 + a1), v10) & 1) != 0);
  v5 = a1 + v4;
  if (v4 == 24)
  {
    do
    {
      if (v5 >= (unint64_t)a2)
        break;
      a2 -= 6;
    }
    while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, a2, v10) & 1) == 0);
  }
  else
  {
    do
      a2 -= 6;
    while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, a2, v10));
  }
  v6 = a1 + v4;
  if (v5 < (unint64_t)a2)
  {
    v7 = a2;
    do
    {
      v8 = *(_QWORD *)v6;
      *(_QWORD *)v6 = *(_QWORD *)v7;
      *(_QWORD *)v7 = v8;
      v11 = *(_OWORD *)(v6 + 8);
      *(_OWORD *)(v6 + 8) = *(_OWORD *)(v7 + 2);
      *(_OWORD *)(v7 + 2) = v11;
      do
        v6 += 24;
      while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, (_DWORD *)v6, v10) & 1) != 0);
      do
        v7 -= 6;
      while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v11, v7, v10));
    }
    while (v6 < (unint64_t)v7);
  }
  if (v6 - 24 != a1)
  {
    *(_QWORD *)a1 = *(_QWORD *)(v6 - 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v6 - 16);
  }
  *(_QWORD *)(v6 - 24) = *(_QWORD *)v10;
  result = *(double *)&v10[8];
  *(_OWORD *)(v6 - 16) = *(_OWORD *)&v10[8];
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _BYTE v15[48];
  char v16;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v15, (_DWORD *)(a2 - 24), (_DWORD *)a1))
      {
        v6 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)(a2 - 24);
        *(_QWORD *)(a2 - 24) = v6;
        v7 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v7;
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 24));
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a1 + 24, a1 + 48, a1 + 72, a2 - 24);
      return 1;
    default:
      v8 = (_DWORD *)(a1 + 48);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)(a1 + 24), (uint64_t *)(a1 + 48));
      v9 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v15, (_DWORD *)v9, v8))
    {
      *(_OWORD *)v15 = *(_OWORD *)v9;
      *(_QWORD *)&v15[16] = *(_QWORD *)(v9 + 16);
      v12 = v10;
      while (1)
      {
        v13 = a1 + v12;
        *(_QWORD *)(v13 + 72) = *(_QWORD *)(a1 + v12 + 48);
        *(_OWORD *)(v13 + 80) = *(_OWORD *)(a1 + v12 + 56);
        if (v12 == -48)
          break;
        v12 -= 24;
        if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v16, v15, (_DWORD *)(v13 + 24)) & 1) == 0)
        {
          v14 = (_QWORD *)(a1 + v12 + 72);
          goto LABEL_12;
        }
      }
      v14 = (_QWORD *)a1;
LABEL_12:
      *v14 = *(_QWORD *)v15;
      *(_OWORD *)(v13 + 56) = *(_OWORD *)&v15[8];
      if (++v11 == 8)
        return v9 + 24 == a2;
    }
    v8 = (_DWORD *)v9;
    v10 += 24;
    v9 += 24;
    if (v9 == a2)
      return 1;
  }
}

uint64_t std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v3;
  int v4;
  char v6;

  if (*a2 < *a3)
    return 1;
  if (*a3 < *a2)
    return 0;
  v3 = a2[1];
  v4 = a3[1];
  if (v3 < v4)
    return 1;
  if (v4 >= v3)
    return std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v6, (uint64_t)a2, (uint64_t)a3);
  else
    return 0;
}

uint64_t std::__tuple_less<1ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;

  v3 = *(const void **)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(const void **)(a3 + 8);
  v6 = *(_QWORD *)(a3 + 16);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 16);
  v8 = memcmp(v3, v5, v7);
  if (v8)
  {
    if (v8 < 0)
      return 1;
  }
  else if (v4 < v6)
  {
    return 1;
  }
  return 0;
}

__n128 std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[17];

  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>((uint64_t *)a1, (uint64_t *)a2, (uint64_t *)a3);
  if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a4, (_DWORD *)a3))
  {
    v9 = *(_QWORD *)a3;
    *(_QWORD *)a3 = *(_QWORD *)a4;
    *(_QWORD *)a4 = v9;
    v10 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = v10;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a3, (_DWORD *)a2))
    {
      v11 = *(_QWORD *)a2;
      *(_QWORD *)a2 = *(_QWORD *)a3;
      *(_QWORD *)a3 = v11;
      v12 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = v12;
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v14, (_DWORD *)a2, (_DWORD *)a1))
      {
        v13 = *(_QWORD *)a1;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *(_QWORD *)a2 = v13;
        result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

__n128 std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _BYTE v18[17];

  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a2, a3, a4);
  if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a5, (_DWORD *)a4))
  {
    v11 = *(_QWORD *)a4;
    *(_QWORD *)a4 = *(_QWORD *)a5;
    *(_QWORD *)a5 = v11;
    v12 = *(_OWORD *)(a4 + 8);
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(a5 + 8);
    *(_OWORD *)(a5 + 8) = v12;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a4, (_DWORD *)a3))
    {
      v13 = *(_QWORD *)a3;
      *(_QWORD *)a3 = *(_QWORD *)a4;
      *(_QWORD *)a4 = v13;
      v14 = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
      *(_OWORD *)(a4 + 8) = v14;
      if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a3, (_DWORD *)a2))
      {
        v15 = *(_QWORD *)a2;
        *(_QWORD *)a2 = *(_QWORD *)a3;
        *(_QWORD *)a3 = v15;
        v16 = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
        *(_OWORD *)(a3 + 8) = v16;
        if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)a2, (_DWORD *)a1))
        {
          v17 = *(_QWORD *)a1;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)a2 = v17;
          result = *(__n128 *)(a1 + 8);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(__n128 *)(a2 + 8) = result;
        }
      }
    }
  }
  return result;
}

uint64_t *std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _OWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  int64_t v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  __int128 v25;

  if ((uint64_t *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 24;
    if ((uint64_t)a2 - a1 >= 25)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = a1 + 24 * v10;
      do
      {
        std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v9, v12);
        v12 -= 24;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = (_OWORD *)(a1 + 8);
      v15 = a2;
      do
      {
        if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v25, v15, (_DWORD *)a1))
        {
          v16 = *v15;
          *v15 = *(_QWORD *)a1;
          *(_QWORD *)a1 = v16;
          v17 = *(_OWORD *)(v15 + 1);
          *(_OWORD *)(v15 + 1) = *v14;
          *v14 = v17;
          std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v9, a1);
        }
        v15 += 3;
      }
      while (v15 != a3);
      v13 = a3;
    }
    if (v8 >= 25)
    {
      v18 = v8 / 0x18uLL;
      v19 = a2 - 3;
      do
      {
        v21 = *(_DWORD *)a1;
        v20 = *(_DWORD *)(a1 + 4);
        v25 = *(_OWORD *)(a1 + 8);
        v22 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, a4, v18);
        if (v19 == (uint64_t *)v22)
        {
          *(_DWORD *)v22 = v21;
          *(_DWORD *)(v22 + 4) = v20;
          *(_OWORD *)(v22 + 8) = v25;
        }
        else
        {
          *(_QWORD *)v22 = *v19;
          *(_OWORD *)(v22 + 8) = *(_OWORD *)(v19 + 1);
          *(_DWORD *)v19 = v21;
          *((_DWORD *)v19 + 1) = v20;
          *(_OWORD *)(v19 + 1) = v25;
          std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(a1, v22 + 24, a4, 0xAAAAAAAAAAAAAAABLL * ((v22 + 24 - a1) >> 3));
        }
        v19 -= 3;
      }
      while (v18-- > 2);
    }
    return v13;
  }
  return a3;
}

double std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];
  char v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v20 = v4;
    v21 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a4 - a1) >> 3)))
    {
      v11 = (0x5555555555555556 * ((a4 - a1) >> 3)) | 1;
      v12 = a1 + 24 * v11;
      v13 = 0x5555555555555556 * ((a4 - a1) >> 3) + 2;
      if (v13 < a3
        && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)(a1 + 24 * v11), (_DWORD *)(v12 + 24)))
      {
        v12 += 24;
        v11 = v13;
      }
      if ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v18, (_DWORD *)v12, (_DWORD *)v7) & 1) == 0)
      {
        *(_OWORD *)v18 = *(_OWORD *)v7;
        *(_QWORD *)&v18[16] = *(_QWORD *)(v7 + 16);
        do
        {
          v15 = v12;
          *(_QWORD *)v7 = *(_QWORD *)v12;
          *(_OWORD *)(v7 + 8) = *(_OWORD *)(v12 + 8);
          if (v9 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = a1 + 24 * v16;
          v17 = 2 * v11 + 2;
          if (v17 < a3)
          {
            if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v19, (_DWORD *)(a1 + 24 * v16), (_DWORD *)(v12 + 24)))
            {
              v12 += 24;
              v16 = v17;
            }
          }
          v7 = v15;
          v11 = v16;
        }
        while (!std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v19, (_DWORD *)v12, v18));
        *(_QWORD *)v15 = *(_QWORD *)v18;
        result = *(double *)&v18[8];
        *(_OWORD *)(v15 + 8) = *(_OWORD *)&v18[8];
      }
    }
  }
  return result;
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v5 = 0;
  v6 = a3 - 2;
  if (a3 < 2)
    v6 = a3 - 1;
  v7 = v6 >> 1;
  do
  {
    v8 = a1 + 24 * v5 + 24;
    v9 = (2 * v5) | 1;
    v10 = 2 * v5 + 2;
    if (v10 < a3
      && std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v12, (_DWORD *)(a1 + 24 * v5 + 24), (_DWORD *)(a1 + 24 * v5 + 48)))
    {
      v8 += 24;
      v9 = v10;
    }
    *(_QWORD *)a1 = *(_QWORD *)v8;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 + 8);
    a1 = v8;
    v5 = v9;
  }
  while (v9 <= v7);
  return v8;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::tuple<int,quasar::SegmentType,std::string_view> *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  _BYTE v12[24];
  char v13;
  uint64_t v14;
  uint64_t v15;

  if (a4 >= 2)
  {
    v14 = v4;
    v15 = v5;
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = a1 + 24 * v7;
    v9 = a2 - 24;
    if (std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)v12, (_DWORD *)v8, (_DWORD *)(a2 - 24)))
    {
      *(_OWORD *)v12 = *(_OWORD *)v9;
      *(_QWORD *)&v12[16] = *(_QWORD *)(v9 + 16);
      do
      {
        v11 = v8;
        *(_QWORD *)v9 = *(_QWORD *)v8;
        *(_OWORD *)(v9 + 8) = *(_OWORD *)(v8 + 8);
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = a1 + 24 * v7;
        v9 = v11;
      }
      while ((std::__tuple_less<3ul>::operator()[abi:ne180100]<std::tuple<int,quasar::SegmentType,std::string_view>,std::tuple<int,quasar::SegmentType,std::string_view>>((uint64_t)&v13, (_DWORD *)v8, v12) & 1) != 0);
      *(_QWORD *)v11 = *(_QWORD *)v12;
      result = *(double *)&v12[8];
      *(_OWORD *)(v11 + 8) = *(_OWORD *)&v12[8];
    }
  }
  return result;
}

void std::vector<quasar::Segment>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::allocator<quasar::Segment>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<quasar::Segment>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;

  std::__tree<int>::destroy(a2 + 72, *(_QWORD **)(a2 + 80));
  std::__tree<int>::destroy(a2 + 48, *(_QWORD **)(a2 + 56));
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(_QWORD *)(a2 + 32) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<quasar::Segment>::__push_back_slow_path<quasar::Segment>(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[96 * v3];
  v13 = &v7[96 * v6];
  std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>((uint64_t)(a1 + 2), (uint64_t)v11, a2);
  v12 = v11 + 96;
  std::vector<quasar::Segment>::__swap_out_circular_buffer(a1, &v10);
  v8 = a1[1];
  std::__split_buffer<quasar::Segment>::~__split_buffer(&v10);
  return v8;
}

void sub_1ADD2C8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Segment>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a3 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a3 + 40);
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a3 + 48);
  v4 = (_QWORD *)(a3 + 56);
  v5 = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a2 + 56) = v5;
  v6 = a2 + 56;
  v7 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 64) = v7;
  if (v7)
  {
    *(_QWORD *)(v5 + 16) = v6;
    *(_QWORD *)(a3 + 48) = v4;
    *v4 = 0;
    *(_QWORD *)(a3 + 64) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v6;
  }
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a3 + 72);
  v8 = (_QWORD *)(a3 + 80);
  v9 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a2 + 80) = v9;
  v10 = a2 + 80;
  v11 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a2 + 88) = v11;
  if (v11)
  {
    *(_QWORD *)(v9 + 16) = v10;
    *(_QWORD *)(a3 + 72) = v8;
    *v8 = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 72) = v10;
  }
}

uint64_t std::vector<quasar::Segment>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>,std::reverse_iterator<quasar::Segment*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 96;
      std::allocator<quasar::Segment>::construct[abi:ne180100]<quasar::Segment,quasar::Segment>(a1, v7 - 96, v9);
      v7 = *((_QWORD *)&v16 + 1) - 96;
      *((_QWORD *)&v16 + 1) -= 96;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Segment>,std::reverse_iterator<quasar::Segment*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator<quasar::Segment>::destroy[abi:ne180100](v3, v1);
      v1 += 96;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<quasar::Segment>::~__split_buffer(void **a1)
{
  std::__split_buffer<quasar::Segment>::clear[abi:ne180100](a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<quasar::Segment>::clear[abi:ne180100](_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<quasar::Segment>::destroy[abi:ne180100](v4, i - 96);
  }
}

uint64_t std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100](uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)a1 = a1 + 8;
  std::map<int,std::pair<int,int>>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<int,std::pair<int,int>>,std::__tree_node<std::__value_type<int,std::pair<int,int>>,void *> *,long>>>((char *)a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1ADD2CC0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,int const&,quasar::Expansion::SegmentTypeData&>(uint64_t **a1, int *a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t **v10;
  int v11;
  _DWORD *v12;

  v8 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    v9 = *a2;
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = *((_DWORD *)v7 + 7);
        if (v9 >= v11)
          break;
        v7 = *v10;
        v8 = v10;
        if (!*v10)
          goto LABEL_10;
      }
      if (v11 >= v9)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v8 = v10 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v10 = a1 + 1;
LABEL_10:
    v12 = operator new(0x28uLL);
    v12[7] = *a3;
    *((_QWORD *)v12 + 4) = *a4;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v10, v8, (uint64_t *)v12);
    return (uint64_t **)v12;
  }
  return v10;
}

uint64_t std::vector<quasar::Expansion>::__emplace_back_slow_path<std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(uint64_t *a1, __int128 **a2, uint64_t a3)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t *v16;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v5)
    v5 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v8 = 0x555555555555555;
  else
    v8 = v5;
  v16 = a1 + 2;
  if (v8)
    v9 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>((uint64_t)(a1 + 2), v8);
  else
    v9 = 0;
  v12 = v9;
  v13 = &v9[48 * v4];
  v15 = &v9[48 * v8];
  std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>((uint64_t)(a1 + 2), (uint64_t)v13, a2, a3);
  v14 = v13 + 48;
  std::vector<quasar::Expansion>::__swap_out_circular_buffer(a1, &v12);
  v10 = a1[1];
  std::__split_buffer<quasar::Expansion>::~__split_buffer((uint64_t)&v12);
  return v10;
}

void sub_1ADD2CDF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::Expansion>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,std::vector<quasar::Expansion::SegmentData> const&,std::map<int,quasar::Expansion::SegmentTypeData> &>(uint64_t a1, uint64_t a2, __int128 **a3, uint64_t a4)
{
  std::string::size_type v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  std::string v14;
  std::string *v15;

  memset(&v14, 0, sizeof(v14));
  std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(&v14, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)&v11, a4);
  *(_OWORD *)a2 = *(_OWORD *)&v14.__r_.__value_.__l.__data_;
  v6 = v14.__r_.__value_.__r.__words[2];
  memset(&v14, 0, sizeof(v14));
  v8 = v11;
  v7 = v12;
  *(_QWORD *)(a2 + 16) = v6;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v7;
  v9 = a2 + 32;
  v10 = v13;
  *(_QWORD *)(a2 + 40) = v13;
  if (v10)
  {
    v7[2] = v9;
    v11 = &v12;
    v12 = 0;
    v13 = 0;
    v7 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 24) = v9;
  }
  std::__tree<int>::destroy((uint64_t)&v11, v7);
  v15 = &v14;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
}

void sub_1ADD2CEC8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 - 40) = v1;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 40));
  _Unwind_Resume(a1);
}

std::string *std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::TextTokenizer::Token>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_1ADD2CF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  std::string *v8;
  _QWORD v10[3];
  char v11;
  std::string *v12;
  std::string *v13;

  v4 = this;
  v12 = this;
  v13 = this;
  v10[0] = a1;
  v10[1] = &v12;
  v10[2] = &v13;
  v11 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v8 = v13;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
        v8 = v4;
      }
      v4[1].__r_.__value_.__r.__words[0] = *((_QWORD *)v6 + 3);
      v6 += 2;
      v4 = (std::string *)((char *)v8 + 32);
      v13 = (std::string *)((char *)v8 + 32);
    }
    while (v6 != a3);
  }
  v11 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v10);
  return v4;
}

void sub_1ADD2D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,quasar::Expansion::SegmentData*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,quasar::TextTokenizer::Token*>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::vector<quasar::Expansion>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  v14 = 0;
  if (a3 == a5)
  {
    v11 = a6;
  }
  else
  {
    v9 = a3;
    do
    {
      v9 -= 48;
      std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion>(a1, (_QWORD *)(v7 - 48), v9);
      v7 = *((_QWORD *)&v16 + 1) - 48;
      *((_QWORD *)&v16 + 1) -= 48;
    }
    while (v9 != a5);
    v11 = v16;
  }
  v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

void std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  a2[3] = *(_QWORD *)(a3 + 24);
  v3 = (_QWORD *)(a3 + 32);
  v4 = *(_QWORD *)(a3 + 32);
  a2[4] = v4;
  v5 = a2 + 4;
  v6 = *(_QWORD *)(a3 + 40);
  a2[5] = v6;
  if (v6)
  {
    *(_QWORD *)(v4 + 16) = v5;
    *(_QWORD *)(a3 + 24) = v3;
    *v3 = 0;
    *(_QWORD *)(a3 + 40) = 0;
  }
  else
  {
    a2[3] = v5;
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v2 = v1[1];
  v14 = v3;
  v15 = v2;
  v16 = v3;
  v17 = v2;
  v4 = *a1;
  v5 = (uint64_t *)a1[1];
  v7 = *v5;
  v6 = v5[1];
  v9 = v7;
  v10 = v6;
  v11 = v7;
  v12 = v6;
  std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>>(v4, (uint64_t)v13, (uint64_t)v8);
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>,std::reverse_iterator<std::reverse_iterator<quasar::Expansion*>>>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  void **v6;

  for (i = *(_QWORD *)(a2 + 32); i != *(_QWORD *)(a3 + 32); *(_QWORD *)(a2 + 32) = i)
  {
    std::__tree<int>::destroy(i + 24, *(_QWORD **)(i + 32));
    v6 = (void **)i;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
    i = *(_QWORD *)(a2 + 32) + 48;
  }
}

uint64_t std::__split_buffer<quasar::Expansion>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<quasar::Expansion>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<quasar::Expansion>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t i;
  void **v5;
  void **v6;

  for (i = *(_QWORD *)(a1 + 16); i != a2; i = *(_QWORD *)(a1 + 16))
  {
    v5 = (void **)(i - 48);
    *(_QWORD *)(a1 + 16) = i - 48;
    std::__tree<int>::destroy(i - 24, *(_QWORD **)(i - 16));
    v6 = v5;
    std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
  }
}

double std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string const&,std::pair<int,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  std::string::size_type v8;
  std::string v9;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v6 = *a3;
  result = *(double *)&v9.__r_.__value_.__l.__data_;
  v8 = v9.__r_.__value_.__r.__words[2];
  *(_OWORD *)v5 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1ADD2D414(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string const&,std::pair<int,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;
  std::string v23;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v22 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (char *)&v12[4 * v5];
  v19[0] = v12;
  v19[1] = v13;
  v20 = v13;
  v21 = (char *)&v12[4 * v11];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v14 = v20;
  }
  else
  {
    v23 = *(std::string *)a2;
    v14 = (char *)&v12[4 * v5];
  }
  v15 = *a3;
  v16 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 2) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  *(_OWORD *)v13 = v16;
  v12[4 * v5 + 3] = v15;
  v20 = v14 + 32;
  std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1ADD2D538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>,std::reverse_iterator<quasar::Expansion::SegmentData*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_OWORD *)(a3 - 32);
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 - 16);
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 - 8);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
      a3 -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion::SegmentData>,std::reverse_iterator<quasar::Expansion::SegmentData*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TextTokenizer::Token>,std::reverse_iterator<quasar::TextTokenizer::Token*>>::operator()[abi:ne180100](a1);
  return a1;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::Expansion>,quasar::Expansion const*,quasar::Expansion const*,quasar::Expansion*>(uint64_t a1, __int128 **a2, __int128 **a3, std::string *a4)
{
  std::string *v4;
  __int128 **v6;
  _QWORD v9[3];
  char v10;
  std::string *v11;
  std::string *v12;

  v4 = a4;
  v11 = a4;
  v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion const&>(a1, v4, v6);
      v6 += 6;
      v4 = v12 + 2;
      v12 += 2;
    }
    while (v6 != a3);
  }
  v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,quasar::Expansion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1ADD2D730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,quasar::Expansion*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::allocator<quasar::Expansion>::construct[abi:ne180100]<quasar::Expansion,quasar::Expansion const&>(uint64_t a1, std::string *a2, __int128 **a3)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<quasar::Expansion::SegmentData>::__init_with_size[abi:ne180100]<quasar::Expansion::SegmentData*,quasar::Expansion::SegmentData*>(a2, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 5);
  return std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)&a2[1], (uint64_t)(a3 + 3));
}

void sub_1ADD2D794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::Expansion>,quasar::Expansion*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(*(_QWORD *)a1, **(_QWORD **)(a1 + 16), **(void ****)(a1 + 16), **(_QWORD **)(a1 + 8), **(void ****)(a1 + 8));
  return a1;
}

void std::__allocator_destroy[abi:ne180100]<std::allocator<quasar::Expansion>,std::reverse_iterator<quasar::Expansion*>,std::reverse_iterator<quasar::Expansion*>>(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5)
{
  void **v5;
  void **v6;
  void **v8;
  void **v9[5];

  if (a3 != a5)
  {
    v9[3] = v5;
    v9[4] = v6;
    do
    {
      v8 = a3 - 6;
      std::__tree<int>::destroy((uint64_t)(a3 - 3), *(a3 - 2));
      v9[0] = v8;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](v9);
      a3 = v8;
    }
    while (v8 != a5);
  }
}

void std::vector<quasar::Expansion>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, (void **)*v2);
    operator delete(**a1);
  }
}

void std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 6;
      std::__tree<int>::destroy((uint64_t)(v4 - 3), *(v4 - 2));
      v6 = v5;
      std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

double std::vector<quasar::Expansion::SegmentData>::__construct_one_at_end[abi:ne180100]<std::string &,std::pair<int,int>>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  double result;
  std::string::size_type v8;
  std::string v9;

  v5 = *(_QWORD *)(a1 + 8);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  v6 = *a3;
  result = *(double *)&v9.__r_.__value_.__l.__data_;
  v8 = v9.__r_.__value_.__r.__words[2];
  *(_OWORD *)v5 = *(_OWORD *)&v9.__r_.__value_.__l.__data_;
  *(_QWORD *)(v5 + 16) = v8;
  *(_QWORD *)(v5 + 24) = v6;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1ADD2D96C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<quasar::Expansion::SegmentData>::__emplace_back_slow_path<std::string &,std::pair<int,int>>(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  _QWORD v19[2];
  char *v20;
  char *v21;
  uint64_t *v22;
  std::string v23;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v22 = a1 + 2;
  if (v11)
    v12 = std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v9, v11);
  else
    v12 = 0;
  v13 = (char *)&v12[4 * v5];
  v19[0] = v12;
  v19[1] = v13;
  v20 = v13;
  v21 = (char *)&v12[4 * v11];
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    v14 = v20;
  }
  else
  {
    v23 = *(std::string *)a2;
    v14 = (char *)&v12[4 * v5];
  }
  v15 = *a3;
  v16 = *(_OWORD *)&v23.__r_.__value_.__l.__data_;
  *((_QWORD *)v13 + 2) = *((_QWORD *)&v23.__r_.__value_.__l + 2);
  *(_OWORD *)v13 = v16;
  v12[4 * v5 + 3] = v15;
  v20 = v14 + 32;
  std::vector<quasar::Expansion::SegmentData>::__swap_out_circular_buffer(a1, v19);
  v17 = a1[1];
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)v19);
  return v17;
}

void sub_1ADD2DA90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::TextTokenizer::Token>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 24;
        std::__tree<int>::destroy((uint64_t)(v4 - 24), *((_QWORD **)v4 - 2));
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_OWORD *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset<int>(_OWORD *a1, int a2, int a3)
{
  *a1 = 0u;
  a1[1] = 0u;
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long((uint64_t)a1, a2, a3);
  return a1;
}

void sub_1ADD2DB50(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((a2 & 0x3F) != 0)
    v6 = (a2 >> 6) + 1;
  else
    v6 = a2 >> 6;
  std::vector<unsigned long>::resize(a1, v6);
  *(_QWORD *)(a1 + 24) = a2;
  v7 = -1;
  if (a2 < 0x40)
    v7 = ~(-1 << a2);
  v8 = v7 & a3;
  if (v8)
    **(_QWORD **)a1 = v8;
}

uint64_t **std::__tree<std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::__map_value_compare<int,std::__value_type<int,quasar::Expansion::SegmentTypeData>,std::less<int>,true>,std::allocator<std::__value_type<int,quasar::Expansion::SegmentTypeData>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_QWORD *)v11 + 4) = 5;
    std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__push_back_slow_path<std::map<int,quasar::Expansion::SegmentTypeData> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[24 * v4];
  v16 = &v10[24 * v9];
  std::map<int,quasar::Expansion::SegmentTypeData>::map[abi:ne180100]((uint64_t)v14, a2);
  v15 = v14 + 24;
  std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADD2DD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::map<int,quasar::Expansion::SegmentTypeData>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    std::__tree<int>::destroy(v1, *(_QWORD **)(v1 + 8));
    v1 += 24;
  }
}

void **std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__tree<int>::destroy(i - 24, *(_QWORD **)(i - 16));
  }
}

void std::vector<quasar::Expansion>::__vdeallocate(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    std::vector<quasar::Expansion>::__base_destruct_at_end[abi:ne180100](a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t quasar::TranslationPhraseInternal::TranslationPhraseInternal(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int16 v6;
  __int128 v7;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(a1 + 32) = a2[4];
  a2[2] = 0;
  a2[3] = 0;
  a2[4] = 0;
  v4 = *(_OWORD *)(a2 + 5);
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_OWORD *)(a1 + 40) = v4;
  a2[6] = 0;
  a2[7] = 0;
  a2[5] = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a2 + 88))
  {
    v5 = *((_OWORD *)a2 + 4);
    *(_QWORD *)(a1 + 80) = a2[10];
    *(_OWORD *)(a1 + 64) = v5;
    a2[9] = 0;
    a2[10] = 0;
    a2[8] = 0;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (*((_BYTE *)a2 + 120))
  {
    *(_QWORD *)(a1 + 96) = 0;
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_QWORD *)(a1 + 112) = a2[14];
    a2[12] = 0;
    a2[13] = 0;
    a2[14] = 0;
    *(_BYTE *)(a1 + 120) = 1;
  }
  v6 = *((_WORD *)a2 + 64);
  *(_QWORD *)(a1 + 136) = 0;
  *(_WORD *)(a1 + 128) = v6;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_QWORD *)(a1 + 152) = a2[19];
  a2[17] = 0;
  a2[18] = 0;
  a2[19] = 0;
  *(_QWORD *)(a1 + 160) = a2[20];
  v7 = *(_OWORD *)(a2 + 21);
  *(_QWORD *)(a1 + 184) = a2[23];
  *(_OWORD *)(a1 + 168) = v7;
  a2[22] = 0;
  a2[23] = 0;
  a2[21] = 0;
  quasar::MetaInfo::MetaInfo((_QWORD *)(a1 + 192), a2 + 24);
  return a1;
}

void sub_1ADD2E23C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  char *v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (v2[191] < 0)
    operator delete(*v3);
  std::vector<quasar::TranslationTokenInternal>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  quasar::TranslationPhrase::~TranslationPhrase((quasar::TranslationPhrase *)v2);
  _Unwind_Resume(a1);
}

__n128 std::__optional_storage_base<std::vector<quasar::AlternativeSelectionSpan>,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<std::vector<quasar::AlternativeSelectionSpan>,false>>(uint64_t a1, __n128 *a2)
{
  __n128 result;
  void **v5;

  if (*(unsigned __int8 *)(a1 + 24) == a2[1].n128_u8[8])
  {
    if (*(_BYTE *)(a1 + 24))
    {
      std::vector<quasar::AlternativeSelectionSpan>::__vdeallocate((void **)a1);
      result = *a2;
      *(__n128 *)a1 = *a2;
      *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
      a2->n128_u64[0] = 0;
      a2->n128_u64[1] = 0;
      a2[1].n128_u64[0] = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v5 = (void **)a1;
    std::vector<quasar::AlternativeSelectionSpan>::__destroy_vector::operator()[abi:ne180100](&v5);
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    result = *a2;
    *(__n128 *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  return result;
}

uint64_t std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__emplace_back_slow_path<std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, __n128 *a5)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  void *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t *v20;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  v7 = v6 + 1;
  if (v6 + 1 > 0x333333333333333)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  if (0x999999999999999ALL * ((a1[2] - *a1) >> 4) > v7)
    v7 = 0x999999999999999ALL * ((a1[2] - *a1) >> 4);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 4) >= 0x199999999999999)
    v12 = 0x333333333333333;
  else
    v12 = v7;
  v20 = a1 + 2;
  if (v12)
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::MetaInfo::StructuredPrediction::Span>>((uint64_t)(a1 + 2), v12);
  else
    v13 = 0;
  v16 = v13;
  v17 = &v13[80 * v6];
  v19 = &v13[80 * v12];
  std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>((uint64_t)(a1 + 2), (uint64_t)v17, a2, a3, a4, a5);
  v18 = v17 + 80;
  std::vector<quasar::MetaInfo::StructuredPrediction::Span>::__swap_out_circular_buffer(a1, &v16);
  v14 = a1[1];
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer(&v16);
  return v14;
}

void sub_1ADD2E42C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<quasar::MetaInfo::StructuredPrediction::Span>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

__n128 std::allocator<quasar::MetaInfo::StructuredPrediction::Span>::construct[abi:ne180100]<quasar::MetaInfo::StructuredPrediction::Span,std::string const&,std::string&,quasar::MetaInfo::StructuredPrediction::Span::Range,std::vector<quasar::MetaInfo::StructuredPrediction::Span::Range>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, __n128 *a6)
{
  uint64_t v10;
  unint64_t v11;
  __n128 result;
  std::string v13;
  std::string v14;

  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v14 = *(std::string *)a3;
  if (*(char *)(a4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v13, *(const std::string::value_type **)a4, *(_QWORD *)(a4 + 8));
  else
    v13 = *(std::string *)a4;
  v10 = *a5;
  v11 = a6[1].n128_u64[0];
  result = *a6;
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  *(std::string *)a2 = v14;
  *(std::string *)(a2 + 24) = v13;
  *(_QWORD *)(a2 + 48) = v10;
  *(__n128 *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 72) = v11;
  return result;
}

void sub_1ADD2E504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<quasar::TranslationTokenInternal>::__assign_with_size[abi:ne180100]<quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, unint64_t a4)
{
  uint64_t v8;
  void *v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  quasar::TranslationTokenInternal *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;

  v8 = a1 + 16;
  v9 = *(void **)a1;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<quasar::TranslationTokenInternal>::__vdeallocate((void **)a1);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0xF0F0F0F0F0F0F0)
      v11 = 0x1E1E1E1E1E1E1E1;
    else
      v11 = v10;
    std::vector<quasar::TranslationTokenInternal>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(v8, a2, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (quasar::TranslationTokenInternal *)((char *)a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v17, (uint64_t)a2, (uint64_t)v13, (uint64_t)v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(v8, v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *,quasar::TranslationTokenInternal *>((uint64_t)&v18, (uint64_t)a2, (uint64_t)a3, (uint64_t)v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      v16 -= 136;
      std::allocator<quasar::TranslationTokenInternal>::destroy[abi:ne180100](v8, v16);
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1ADD2E690(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1ADD2E698(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal const*,quasar::TranslationTokenInternal*>(uint64_t a1, quasar::TranslationTokenInternal *a2, quasar::TranslationTokenInternal *a3, std::string *this)
{
  std::string *v4;
  const quasar::TranslationTokenInternal *v6;
  _QWORD v8[3];
  char v9;
  std::string *v10;
  std::string *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::TranslationTokenInternal::TranslationTokenInternal(v4, v6);
      v6 = (const quasar::TranslationTokenInternal *)((char *)v6 + 136);
      v4 = (std::string *)((char *)v11 + 136);
      v11 = (std::string *)((char *)v11 + 136);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADD2E72C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::TranslationTokenInternal>,quasar::TranslationTokenInternal*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<int>>::__emplace_back_slow_path<std::set<int> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (uint64_t *)&v10[24 * v4];
  v16 = &v10[24 * v9];
  std::set<int>::set[abi:ne180100](v14, a2);
  v15 = v14 + 3;
  std::vector<std::set<int>>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer(&v13);
  return v11;
}

void sub_1ADD2E830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::map<int,quasar::Expansion::SegmentTypeData>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::set<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>,std::reverse_iterator<std::set<int>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 == a5)
  {
    v14 = a6;
  }
  else
  {
    v8 = a3;
    do
    {
      v9 = *(_QWORD *)(v8 - 24);
      v8 -= 24;
      *(_QWORD *)(v7 - 24) = v9;
      v10 = (_QWORD *)(a3 - 16);
      v11 = *(_QWORD *)(a3 - 16);
      *(_QWORD *)(v7 - 16) = v11;
      v12 = v7 - 16;
      v13 = *(_QWORD *)(a3 - 8);
      *(_QWORD *)(v7 - 8) = v13;
      if (v13)
      {
        *(_QWORD *)(v11 + 16) = v12;
        *(_QWORD *)(a3 - 24) = v10;
        *v10 = 0;
        *(_QWORD *)(a3 - 8) = 0;
      }
      else
      {
        *(_QWORD *)(v7 - 24) = v12;
      }
      v7 = *((_QWORD *)&v19 + 1) - 24;
      *((_QWORD *)&v19 + 1) -= 24;
      a3 = v8;
    }
    while (v8 != a5);
    v14 = v19;
  }
  v17 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v16);
  return v14;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::set<int>>,std::reverse_iterator<std::set<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::map<int,quasar::Expansion::SegmentTypeData>>,std::reverse_iterator<std::map<int,quasar::Expansion::SegmentTypeData>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void quasar::makeVoiceCommandActiveSetCompilation(quasar *this@<X0>, _QWORD *a2@<X8>)
{
  quasar *v4;
  void *v5;
  void *v6;
  id v7;
  void *__p[2];
  char v9;
  _OWORD v10[2];
  int v11;

  v4 = this;
  memset(v10, 0, sizeof(v10));
  v11 = 1065353216;
  -[quasar suites](v4, "suites");
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  quasar::convertToVoiceCommandActiveSetCompilationSuiteSet(v5, (uint64_t)v10);

  -[quasar resourceBaseURL](v4, "resourceBaseURL");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v6, "path");
  v7 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v7, "UTF8String"));
  quasar::VoiceCommandActiveSetCompilation::makeVoiceCommandActiveSetCompilation((uint64_t)v10, (const void **)__p, a2);
  if (v9 < 0)
    operator delete(__p[0]);

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::~__hash_table((uint64_t)v10);
}

void sub_1ADD2EA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;

  if (a15 < 0)
    operator delete(__p);

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::~__hash_table((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void quasar::convertToVoiceCommandActiveSetCompilationSuiteSet(void *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t j;
  id v12;
  int v13;
  int v14;
  id v15;
  id v16;
  uint64_t v17;
  uint64_t v19;
  void *v20;
  id obj;
  uint64_t v22;
  id v23;
  void *__p[2];
  char v25;
  int v26;
  void *v27;
  char v28;
  _BYTE v29[40];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[2];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[2];
  int v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[128];
  _BYTE v48[128];
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  obj = a1;
  v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
  if (v2)
  {
    v19 = *(_QWORD *)v43;
    do
    {
      v22 = 0;
      v17 = v2;
      do
      {
        if (*(_QWORD *)v43 != v19)
          objc_enumerationMutation(obj);
        v3 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v22);
        memset(v40, 0, sizeof(v40));
        v41 = 1065353216;
        v36 = 0u;
        v37 = 0u;
        v38 = 0u;
        v39 = 0u;
        v20 = v3;
        objc_msgSend(v3, "commandSpecs", v17);
        v23 = (id)objc_claimAutoreleasedReturnValue();
        v4 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
        if (v4)
        {
          v5 = *(_QWORD *)v37;
          do
          {
            for (i = 0; i != v4; ++i)
            {
              if (*(_QWORD *)v37 != v5)
                objc_enumerationMutation(v23);
              v7 = *(void **)(*((_QWORD *)&v36 + 1) + 8 * i);
              memset(v34, 0, sizeof(v34));
              v35 = 1065353216;
              v30 = 0u;
              v31 = 0u;
              v32 = 0u;
              v33 = 0u;
              objc_msgSend(v7, "fstRelativePaths");
              v8 = (void *)objc_claimAutoreleasedReturnValue();
              v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v46, 16);
              if (v9)
              {
                v10 = *(_QWORD *)v31;
                do
                {
                  for (j = 0; j != v9; ++j)
                  {
                    if (*(_QWORD *)v31 != v10)
                      objc_enumerationMutation(v8);
                    std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(objc_retainAutorelease(*(id *)(*((_QWORD *)&v30 + 1) + 8 * j)), "UTF8String"));
                    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string>((uint64_t)v34, (unsigned __int8 *)__p, (uint64_t)__p);
                    if (v25 < 0)
                      operator delete(__p[0]);
                  }
                  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v30, v46, 16);
                }
                while (v9);
              }

              objc_msgSend(v7, "identifier");
              v12 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v12, "UTF8String"));
              v13 = objc_msgSend(v7, "valence");
              if ((v13 - 1) >= 3)
                v14 = 0;
              else
                v14 = v13;
              v26 = v14;
              objc_msgSend(v7, "fstSymbol");
              v15 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
              std::string::basic_string[abi:ne180100]<0>(&v27, (char *)objc_msgSend(v15, "UTF8String"));
              std::unordered_set<std::string>::unordered_set((uint64_t)v29, (uint64_t)v34);

              std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec const&>((uint64_t)v40, (uint64_t)__p, (__int128 *)__p);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v29);
              if (v28 < 0)
                operator delete(v27);
              if (v25 < 0)
                operator delete(__p[0]);
              std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)v34);
            }
            v4 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v36, v47, 16);
          }
          while (v4);
        }

        objc_msgSend(v20, "identifier");
        v16 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)objc_msgSend(v16, "UTF8String"));
        std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&v26, (uint64_t)v40);

        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(a2, (unsigned __int8 *)__p, (__int128 *)__p);
        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)&v26);
        if (v25 < 0)
          operator delete(__p[0]);
        std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table((uint64_t)v40);
        ++v22;
      }
      while (v22 != v17);
      v2 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v48, 16);
    }
    while (v2);
  }

}

void sub_1ADD2EE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{

  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__emplace_unique_key_args<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[3];

  v7 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v3 = v7;
      if (v7 >= v9)
        v3 = v7 % v9;
    }
    else
    {
      v3 = (v9 - 1) & v7;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if (quasar::VoiceCommandActiveSetCompilation::Suite::operator==(i + 16, a2))
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v14 >= v9)
              v14 %= v9;
          }
          else
          {
            v14 &= v9 - 1;
          }
          if (v14 != v3)
            break;
        }
      }
    }
  }
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::Suite const&>(a1, v8, a3, (uint64_t)v24);
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v9 || (float)(v16 * (float)v9) < v15)
  {
    v17 = 1;
    if (v9 >= 3)
      v17 = (v9 & (v9 - 1)) != 0;
    v18 = v17 | (2 * v9);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, v20);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v3 = v8 % v9;
      else
        v3 = v8;
    }
    else
    {
      v3 = (v9 - 1) & v8;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v22 >= v9)
          v22 %= v9;
      }
      else
      {
        v22 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (unsigned __int8 *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100]((uint64_t)v24, 0);
  return i;
}

void sub_1ADD2F1E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__construct_node_hash<quasar::VoiceCommandActiveSetCompilation::Suite const&>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char *v8;
  uint64_t result;

  v7 = a1 + 16;
  v8 = (char *)operator new(0x50uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = a2;
  result = std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(v7, (std::string *)(v8 + 16), a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1ADD2F254(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

BOOL quasar::VoiceCommandActiveSetCompilation::Suite::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  BOOL v12;
  BOOL v13;
  _BOOL8 v14;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v6 = v2 - 1;
  do
  {
    v8 = *a1++;
    v7 = v8;
    v10 = *a2++;
    v9 = v10;
    v12 = v6-- != 0;
    v13 = v7 == v9;
    v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>::construct[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite const&>(int a1, std::string *this, __int128 *a3)
{
  __int128 v5;

  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  return std::unordered_set<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::unordered_set((uint64_t)&this[1], (uint64_t)a3 + 24);
}

void sub_1ADD2F360(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void std::unique_ptr<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<quasar::VoiceCommandActiveSetCompilation::Suite,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>(uint64_t a1)
{
  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::CommandSpec,quasar::VoiceCommandActiveSetCompilation::CommandSpec::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::CommandSpec>,std::allocator<quasar::VoiceCommandActiveSetCompilation::CommandSpec>>::~__hash_table(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<quasar::VoiceCommandActiveSetCompilation::Suite,quasar::VoiceCommandActiveSetCompilation::Suite::hash,std::equal_to<quasar::VoiceCommandActiveSetCompilation::Suite>,std::allocator<quasar::VoiceCommandActiveSetCompilation::Suite>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<quasar::VoiceCommandActiveSetCompilation::Suite,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

BOOL quasar::RecogAudioBuffer::audioAvailableOrAudioEnd(quasar::RecogAudioBuffer *this, int a2)
{
  return *(_QWORD *)(*((_QWORD *)this + 28) + 32) >= (unint64_t)a2 || *((_BYTE *)this + 273) != 0;
}

uint64_t quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 96))(a1, a2, 0);
}

uint64_t `non-virtual thunk to'quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a1 - 16) + 96))(a1 - 16, a2, 0);
}

uint64_t quasar::RecogAudioBuffer::audioAheadOfBuffer(quasar::RecogAudioBuffer *this, unsigned int a2)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (*((_BYTE *)this + 275))
  {
    if (quasar::gLogLevel >= 5)
    {
      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      v9 = 0u;
      v10 = 0u;
      v7 = 0u;
      v8 = 0u;
      v6 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
      v2 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)" is waiting for followers so letting them proceed", 49);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v6);
    }
  }
  else
  {
    v3 = *((_DWORD *)this + 54);
    if (*((_DWORD *)this + 53) + v3 < a2)
    {
      if (*((_DWORD *)this + 55) != v3 || !*((_BYTE *)this + 273))
        return 0;
      if (quasar::gLogLevel >= 2)
      {
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        v9 = 0u;
        v10 = 0u;
        v7 = 0u;
        v8 = 0u;
        v6 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v6);
        v4 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" is exhausted even though follower buffer is ahead of ", 54);
        std::ostream::operator<<();
        quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v6);
      }
    }
  }
  return 1;
}

void sub_1ADD2F5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::setLeadBuffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  _OWORD v9[17];

  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = *(std::__shared_weak_count **)(a1 + 264);
  *(_QWORD *)(a1 + 256) = v5;
  *(_QWORD *)(a1 + 264) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  if (*a2 && (*(_DWORD *)(a1 + 216) || *(_DWORD *)(a1 + 220)))
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, "leadBuffer must not be changed to another buffer after audio is started");
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v9);
  }
}

BOOL quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::mutex *v9;
  char *v10;
  std::mutex *v11;
  unsigned int v12;
  std::__shared_weak_count *v13;
  unsigned int v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::mutex *v17;
  clockid_t v18;
  _BOOL8 v19;
  int v21;
  double v22;
  char v23;
  std::condition_variable *v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  clockid_t v28;
  uint64_t i;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  double *v38;
  std::mutex *v39;
  double *v41;
  unsigned int v42;
  _QWORD v43[3];
  int v44;
  quasar::RecogAudioBuffer *v45;
  std::__shared_weak_count *v46;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;

  v6 = *(std::__shared_weak_count **)(a1 + 264);
  if (!v6)
    goto LABEL_26;
  v7 = std::__shared_weak_count::lock(v6);
  v46 = v7;
  if (!v7)
    goto LABEL_26;
  v8 = *(_QWORD *)(a1 + 256);
  v45 = (quasar::RecogAudioBuffer *)v8;
  if (!v8)
  {
    v13 = v7;
LABEL_22:
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    goto LABEL_26;
  }
  v9 = (std::mutex *)(v8 + 24);
  std::mutex::lock((std::mutex *)(v8 + 24));
  v10 = (char *)v45 + 88;
  v11 = (std::mutex *)((char *)v45 + 24);
  if (*(uint64_t *)(a1 + 160) < 1)
  {
    if (*((_BYTE *)v45 + 275))
    {
LABEL_16:
      if (quasar::gLogLevel >= 5)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Leader is waiting for follower, not waiting", 43);
LABEL_20:
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v48);
      }
    }
    else
    {
      while (1)
      {
        std::mutex::lock((std::mutex *)(a1 + 24));
        v14 = *(_DWORD *)(a1 + 216);
        std::mutex::unlock((std::mutex *)(a1 + 24));
        if ((quasar::RecogAudioBuffer::audioAheadOfBuffer(v45, v14) & 1) != 0)
          break;
        std::condition_variable_any::wait<std::mutex>((uint64_t)v10, v11);
        if (*((_BYTE *)v45 + 275))
          goto LABEL_16;
      }
    }
  }
  else
  {
    v47 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *(_QWORD *)(a1 + 160);
    do
    {
      if (*((_BYTE *)v45 + 275))
      {
        if (quasar::gLogLevel < 5)
          goto LABEL_21;
        goto LABEL_19;
      }
      std::mutex::lock((std::mutex *)(a1 + 24));
      v12 = *(_DWORD *)(a1 + 216);
      std::mutex::unlock((std::mutex *)(a1 + 24));
      if ((quasar::RecogAudioBuffer::audioAheadOfBuffer(v45, v12) & 1) != 0)
        goto LABEL_21;
    }
    while (!std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>((uint64_t)v10, v11, &v47));
    if (*((_BYTE *)v45 + 275))
    {
      if (quasar::gLogLevel < 5)
        goto LABEL_21;
LABEL_19:
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Leader is waiting for follower, not waiting", 43);
      goto LABEL_20;
    }
    std::mutex::lock((std::mutex *)(a1 + 24));
    v42 = *(_DWORD *)(a1 + 216);
    std::mutex::unlock((std::mutex *)(a1 + 24));
    quasar::RecogAudioBuffer::audioAheadOfBuffer(v45, v42);
  }
LABEL_21:
  std::mutex::unlock(v9);
  v13 = v46;
  if (v46)
    goto LABEL_22;
LABEL_26:
  v17 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  if (*(_DWORD *)(a1 + 216) >= *(_DWORD *)(a1 + 220) && *(_BYTE *)(a1 + 273))
  {
    kaldi::Vector<float>::Resize((void **)a2, 0, 0);
    if (quasar::gLogLevel >= 5)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"No audio left, and endOfAudio set. Returning false.", 51);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v48);
    }
    v19 = 0;
  }
  else
  {
    if (*(_DWORD *)(a2 + 8) <= a3 || a3 <= 0)
      v21 = *(_DWORD *)(a2 + 8);
    else
      v21 = a3;
    v22 = 0.0;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 224) + 32) >= (unint64_t)v21 || *(_BYTE *)(a1 + 273))
    {
      v23 = 1;
    }
    else
    {
      v41 = *(double **)(a1 + 192);
      v23 = 0;
      v22 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v18) - *v41;
    }
    if (!*(_QWORD *)(a1 + 160) && quasar::gLogLevel >= 5)
    {
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v57 = 0u;
      v58 = 0u;
      v55 = 0u;
      v56 = 0u;
      v53 = 0u;
      v54 = 0u;
      v51 = 0u;
      v52 = 0u;
      v49 = 0u;
      v50 = 0u;
      v48 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Waiting for more audio or endOfAudio", 36);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v48);
    }
    v24 = (std::condition_variable *)(a1 + 88);
    v43[0] = quasar::RecogAudioBuffer::audioAvailableOrAudioEnd;
    v43[1] = 0;
    v43[2] = a1;
    v44 = v21;
    if ((quasar::RecogAudioBuffer::waitWithReadTimeOut<std::condition_variable_any,std::__bind<BOOL (quasar::RecogAudioBuffer::*)(int),quasar::RecogAudioBuffer*,unsigned int &>>(a1, a1 + 88, (std::mutex *)(a1 + 24), (uint64_t)v43) & 1) == 0)*(_BYTE *)(a1 + 273) = 1;
    v25 = *(_DWORD *)(*(_QWORD *)(a1 + 224) + 32);
    v26 = *(_DWORD *)(a2 + 8);
    if (v26 >= v25)
      v27 = v25;
    else
      v27 = v26;
    kaldi::Vector<float>::Resize((void **)a2, v27, 0);
    if ((_DWORD)v27)
    {
      for (i = 0; i != v27; ++i)
      {
        v30 = *(_QWORD **)(a1 + 224);
        v31 = v30[1];
        v32 = v30[2];
        if (v31 - v32 <= 0)
          v33 = -((v31 - *v30) >> 2);
        else
          v33 = 0;
        *(_DWORD *)(*(_QWORD *)a2 + 4 * i) = *(_DWORD *)(v32 + 4 * v33);
        v34 = v32 + 4;
        v30[2] = v34;
        if (v34 == v31)
          v30[2] = *v30;
        --v30[4];
      }
      if (quasar::gLogLevel > 4)
      {
        v63 = 0u;
        v64 = 0u;
        v61 = 0u;
        v62 = 0u;
        v59 = 0u;
        v60 = 0u;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v48 = 0u;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v48, (uint64_t)"Copied ", 7);
        v35 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" samples (", 10);
        v36 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"-", 1);
        v37 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)") into data", 11);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v48);
      }
      *(_DWORD *)(a1 + 216) += v27;
    }
    if ((v23 & 1) == 0)
    {
      v38 = *(double **)(a1 + 192);
      *(double *)(a1 + 312) = *(double *)(a1 + 312) + kaldi::Timer::GetSeconds((kaldi::Timer *)5, v28) - *v38 - v22;
    }
    if (*(_BYTE *)(a1 + 273))
      v19 = *(_DWORD *)(a1 + 216) < *(_DWORD *)(a1 + 220);
    else
      v19 = 1;
    v39 = *(std::mutex **)(a1 + 136);
    std::mutex::lock(v39);
    std::mutex::unlock(v39);
    std::condition_variable::notify_all(v24);
  }
  std::mutex::unlock(v17);
  return v19;
}

void sub_1ADD2FCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  std::mutex *v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)va1);
  std::mutex::unlock(v6);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t quasar::RecogAudioBuffer::waitWithReadTimeOut<std::condition_variable_any,std::__bind<BOOL (quasar::RecogAudioBuffer::*)(int),quasar::RecogAudioBuffer*,unsigned int &>>(uint64_t a1, uint64_t a2, std::mutex *a3, uint64_t a4)
{
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v13)(uint64_t, uint64_t);
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))a4;
  v7 = *(_QWORD *)(a4 + 8);
  v8 = *(_QWORD *)(a4 + 16);
  v9 = *(unsigned int *)(a4 + 24);
  if (*(uint64_t *)(a1 + 160) < 1)
  {
    while (1)
    {
      v13 = v6;
      if ((v7 & 1) != 0)
        v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 + (v7 >> 1)) + v6);
      if ((v13(v8 + (v7 >> 1), v9) & 1) != 0)
        break;
      std::condition_variable_any::wait<std::mutex>(a2, a3);
    }
  }
  else
  {
    v14 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *(_QWORD *)(a1 + 160);
    v10 = (_QWORD *)(v8 + (v7 >> 1));
    while (1)
    {
      v11 = v6;
      if ((v7 & 1) != 0)
        v11 = *(uint64_t (**)(uint64_t, uint64_t))(*v10 + v6);
      if ((v11((uint64_t)v10, v9) & 1) != 0)
        break;
      if (std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(a2, a3, &v14))
      {
        if ((v7 & 1) != 0)
          v6 = *(uint64_t (**)(uint64_t, uint64_t))(*v10 + v6);
        return v6((uint64_t)v10, v9);
      }
    }
  }
  return 1;
}

BOOL `non-virtual thunk to'quasar::RecogAudioBuffer::Read(uint64_t a1, uint64_t a2, int a3)
{
  return quasar::RecogAudioBuffer::Read(a1 - 16, a2, a3);
}

float quasar::RecogAudioBuffer::audioLeftSeconds(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  unint64_t v3;
  float v4;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  LODWORD(v3) = *((_DWORD *)this + 52);
  v4 = (double)*(unint64_t *)(*((_QWORD *)this + 28) + 32) / (double)v3;
  std::mutex::unlock(v2);
  return v4;
}

float quasar::RecogAudioBuffer::audioReadSeconds(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  unint64_t v3;
  unint64_t v4;
  float v5;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  LODWORD(v3) = *((_DWORD *)this + 54);
  LODWORD(v4) = *((_DWORD *)this + 52);
  v5 = (double)v3 / (double)v4;
  std::mutex::unlock(v2);
  return v5;
}

BOOL quasar::RecogAudioBuffer::HasReadAllFrames(quasar::RecogAudioBuffer *this)
{
  return (*(float (**)(quasar::RecogAudioBuffer *))(*(_QWORD *)this + 64))(this) <= 0.0;
}

BOOL `non-virtual thunk to'quasar::RecogAudioBuffer::HasReadAllFrames(quasar::RecogAudioBuffer *this)
{
  return (*(float (**)(char *))(*((_QWORD *)this - 2) + 64))((char *)this - 16) <= 0.0;
}

uint64_t quasar::RecogAudioBuffer::addAudio(quasar::RecogAudioBuffer *this, float *a2, unsigned int a3)
{
  std::mutex *v6;
  double *v7;
  clockid_t v8;
  double v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned int v23;
  unint64_t v24;
  int v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void **v36;
  unsigned int v37;
  float *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  float *v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  float *v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  std::mutex *v55;
  _QWORD *v56;
  _QWORD *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v7 = (double *)*((_QWORD *)this + 24);
  v9 = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v8) - *v7;
  v11 = (double *)*((_QWORD *)this + 36);
  v10 = *((_QWORD *)this + 37);
  if ((unint64_t)v11 >= v10)
  {
    v13 = (double *)*((_QWORD *)this + 35);
    v14 = ((char *)v11 - (char *)v13) >> 4;
    v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 3 > v15)
      v15 = v16 >> 3;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v15;
    if (v17)
    {
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)this + 296, v17);
      v13 = (double *)*((_QWORD *)this + 35);
      v11 = (double *)*((_QWORD *)this + 36);
    }
    else
    {
      v18 = 0;
    }
    v19 = &v18[16 * v14];
    v20 = &v18[16 * v17];
    *(double *)v19 = v9;
    *((_QWORD *)v19 + 1) = a3;
    v12 = (double *)(v19 + 16);
    if (v11 != v13)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v11 - 1);
        v19 -= 16;
        v11 -= 2;
      }
      while (v11 != v13);
      v13 = (double *)*((_QWORD *)this + 35);
    }
    *((_QWORD *)this + 35) = v19;
    *((_QWORD *)this + 36) = v12;
    *((_QWORD *)this + 37) = v20;
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v11 = v9;
    *((_QWORD *)v11 + 1) = a3;
    v12 = v11 + 2;
  }
  *((_QWORD *)this + 36) = v12;
  if (*((_BYTE *)this + 274))
  {
    v21 = 2;
    goto LABEL_23;
  }
  if (*((_BYTE *)this + 273))
  {
    v21 = 1;
    goto LABEL_23;
  }
  if (*((_BYTE *)this + 272))
  {
LABEL_22:
    v21 = 3;
    goto LABEL_23;
  }
  v23 = *((_DWORD *)this + 38);
  if ((v23 & 0x80000000) == 0 && *((_DWORD *)this + 55) >= v23)
  {
    *((_BYTE *)this + 272) = 1;
    if (quasar::gLogLevel >= 2)
    {
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Maximum buffer length ", 22);
      v56 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v56, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v58);
    }
    goto LABEL_22;
  }
  v24 = *((unsigned int *)this + 39);
  if ((v24 & 0x80000000) == 0 && *(_QWORD *)(*((_QWORD *)this + 28) + 32) >= v24)
  {
    *((_BYTE *)this + 272) = 1;
    if (quasar::gLogLevel >= 2)
    {
      v73 = 0u;
      v74 = 0u;
      v71 = 0u;
      v72 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v63 = 0u;
      v64 = 0u;
      v61 = 0u;
      v62 = 0u;
      v59 = 0u;
      v60 = 0u;
      v58 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Maximum ring size ", 18);
      v57 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)" has been reached. All additional audio will be dropped.", 56);
      quasar::QuasarWarnMessage::~QuasarWarnMessage((quasar::QuasarWarnMessage *)&v58);
    }
    goto LABEL_22;
  }
  v25 = a3;
  if ((v23 & 0x80000000) == 0)
  {
    v26 = v23 - *((_DWORD *)this + 55);
    if (v26 >= (int)a3)
      v25 = a3;
    else
      v25 = v26;
  }
  if ((v24 & 0x80000000) == 0)
  {
    v27 = v24 - *(_DWORD *)(*((_QWORD *)this + 28) + 32);
    if (v27 < v25)
      v25 = v27;
  }
  if (v25 < a3 && quasar::gLogLevel >= 4)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Clipped audio length ", 21);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" to ", 4);
    std::ostream::operator<<();
    quasar::QuasarInfoMessage::~QuasarInfoMessage((quasar::QuasarInfoMessage *)&v58);
  }
  v29 = *((_QWORD *)this + 28);
  v30 = *(_QWORD *)(v29 + 8) - *(_QWORD *)v29;
  v31 = *(_QWORD *)(v29 + 32) + v25;
  if (v31 > v30 >> 2)
  {
    v32 = v30 >> 1;
    if (v32 <= v31)
      v32 = *(_QWORD *)(v29 + 32) + v25;
    v33 = *((unsigned int *)this + 39);
    if (v32 >= v33)
      v34 = *((unsigned int *)this + 39);
    else
      v34 = v32;
    if ((v33 & 0x80000000) == 0)
      v35 = v34;
    else
      v35 = v32;
    boost::circular_buffer<float,std::allocator<float>>::set_capacity((char **)v29, v35);
  }
  if (*((_BYTE *)this + 320))
  {
    v36 = (void **)((char *)this + 232);
    v37 = (float)((float)*((unsigned int *)this + 52) * 5.0);
    v38 = (float *)*((_QWORD *)this + 30);
    v39 = ((unint64_t)v38 - *((_QWORD *)this + 29)) >> 2;
    if (v37 > v39)
    {
      v40 = v25 + (int)v39 <= v37 ? v25 : v37 - v39;
      if ((_DWORD)v40)
      {
        v41 = 0;
        v42 = (_QWORD *)((char *)this + 248);
        do
        {
          if ((unint64_t)v38 >= *v42)
          {
            v44 = (float *)*v36;
            v45 = ((char *)v38 - (_BYTE *)*v36) >> 2;
            v46 = v45 + 1;
            if ((unint64_t)(v45 + 1) >> 62)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v47 = *v42 - (_QWORD)v44;
            if (v47 >> 1 > v46)
              v46 = v47 >> 1;
            if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
              v48 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v48 = v46;
            if (v48)
            {
              v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)this + 248, v48);
              v44 = (float *)*((_QWORD *)this + 29);
              v38 = (float *)*((_QWORD *)this + 30);
            }
            else
            {
              v49 = 0;
            }
            v50 = (float *)&v49[4 * v45];
            *v50 = a2[v41];
            v43 = v50 + 1;
            while (v38 != v44)
            {
              v51 = *((_DWORD *)v38-- - 1);
              *((_DWORD *)v50-- - 1) = v51;
            }
            *((_QWORD *)this + 29) = v50;
            *((_QWORD *)this + 30) = v43;
            *((_QWORD *)this + 31) = &v49[4 * v48];
            if (v44)
              operator delete(v44);
          }
          else
          {
            *v38 = a2[v41];
            v43 = v38 + 1;
          }
          *((_QWORD *)this + 30) = v43;
          ++v41;
          v38 = v43;
        }
        while (v41 < v40);
      }
    }
  }
  if (v25 >= 1)
  {
    v52 = v25;
    do
    {
      boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(*((_QWORD **)this + 28), a2++);
      --v52;
    }
    while (v52);
  }
  if (quasar::gLogLevel > 4)
  {
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v58, (uint64_t)"Added ", 6);
    v53 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v53, (uint64_t)" samples: ", 10);
    v54 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)"-", 1);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v58);
  }
  *((_DWORD *)this + 55) += v25;
  v55 = (std::mutex *)*((_QWORD *)this + 17);
  std::mutex::lock(v55);
  std::mutex::unlock(v55);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  v21 = 0;
LABEL_23:
  std::mutex::unlock(v6);
  return v21;
}

void sub_1ADD30524(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<float,std::allocator<float>>::set_capacity(char **a1, unint64_t a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  int v12;
  char *v13;
  char *v14;
  _QWORD v15[2];

  if (a2 != (a1[1] - *a1) >> 2)
  {
    v4 = (char *)boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)a1, a2);
    v5 = (unint64_t)a1[4];
    if (v5)
      v6 = a1[2];
    else
      v6 = 0;
    if (v5 >= a2)
      v7 = a2;
    else
      v7 = (uint64_t)a1[4];
    v15[0] = a1;
    v15[1] = v6;
    v8 = (char *)boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(v15, v7)[1];
    v9 = v4;
    if (v6 != v8)
    {
      v10 = a1[1];
      v11 = a1[3];
      v9 = v4;
      do
      {
        v12 = *(_DWORD *)v6;
        v6 += 4;
        *(_DWORD *)v9 = v12;
        if (v6 == v10)
          v6 = *a1;
        if (v6 == v11)
          v6 = 0;
        v9 += 4;
      }
      while (v6 != v8);
    }
    boost::circular_buffer<float,std::allocator<float>>::destroy((uint64_t)a1);
    v13 = &v4[4 * a2];
    *a1 = v4;
    a1[1] = v13;
    if (v13 == v9)
      v14 = v4;
    else
      v14 = v9;
    a1[2] = v4;
    a1[3] = v14;
    a1[4] = (char *)((v9 - v4) >> 2);
  }
}

void sub_1ADD30684(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  if (v1)
    operator delete(v1);
  __cxa_rethrow();
}

void sub_1ADD3069C(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t quasar::RecogAudioBuffer::addAudio(quasar::RecogAudioBuffer *this, const __int16 *a2, uint64_t a3)
{
  float *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10[3];

  memset(v10, 0, sizeof(v10));
  kaldi::Vector<float>::Resize(v10, a3, 0);
  v6 = (float *)v10[0];
  if ((_DWORD)a3)
  {
    v7 = 0;
    do
    {
      v6[(int)v7] = (float)a2[v7];
      ++v7;
    }
    while ((_DWORD)a3 != (_DWORD)v7);
  }
  v8 = (*(uint64_t (**)(quasar::RecogAudioBuffer *, float *, uint64_t))(*(_QWORD *)this + 24))(this, v6, a3);
  kaldi::Vector<float>::Destroy((uint64_t)v10);
  return v8;
}

void sub_1ADD3074C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::endAudio(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  quasar::RecogAudioBuffer::endAudioWithoutLock(this);
  std::mutex::unlock(v2);
}

void sub_1ADD30798(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::endAudioWithoutLock(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  double *v3;
  clockid_t v4;
  uint64_t i;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;
  _OWORD v14[17];
  __int128 v15;
  _QWORD v16[8];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[160];

  if (!*((_BYTE *)this + 273))
  {
    if (quasar::gLogLevel >= 5)
    {
      v19 = 0u;
      memset(v20, 0, 144);
      v17 = 0u;
      v18 = 0u;
      memset(v16, 0, sizeof(v16));
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Signalling end of audio...", 26);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v15);
    }
    *((_BYTE *)this + 273) = 1;
    v2 = (std::mutex *)*((_QWORD *)this + 17);
    std::mutex::lock(v2);
    std::mutex::unlock(v2);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
    v3 = (double *)*((_QWORD *)this + 24);
    *((double *)this + 38) = kaldi::Timer::GetSeconds((kaldi::Timer *)5, v4) - *v3;
    if (quasar::gLogLevel >= 5)
    {
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"PacketsReceived=\"", 17);
      for (i = *((_QWORD *)this + 35); i != *((_QWORD *)this + 36); i += 16)
      {
        v6 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)":", 1);
        v7 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" ", 1);
      }
      if (quasar::gLogLevel > 4)
      {
        memset(v14, 0, sizeof(v14));
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::stringbuf::str();
        if ((v13 & 0x80u) == 0)
          v8 = __p;
        else
          v8 = (void **)__p[0];
        if ((v13 & 0x80u) == 0)
          v9 = v13;
        else
          v9 = (uint64_t)__p[1];
        v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)v8, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"\"", 1);
        if ((char)v13 < 0)
          operator delete(__p[0]);
        quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v14);
      }
      *(_QWORD *)&v15 = *MEMORY[0x1E0DE4F50];
      v11 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)&v16[-2] + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v16[0] = v11;
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v18) < 0)
        operator delete(*((void **)&v17 + 1));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1AF44D094](v20);
    }
  }
}

void sub_1ADD30A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a16);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::endAudioToLeadBuffer(quasar::RecogAudioBuffer *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  _QWORD *v13;
  std::mutex *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  *((_QWORD *)&v15 + 1) = v3;
  if (!v3)
    return;
  v4 = *((_QWORD *)this + 32);
  *(_QWORD *)&v15 = v4;
  if (!v4)
  {
    v7 = v3;
    v6 = 0;
    v5 = 0;
    goto LABEL_7;
  }
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_DWORD *)(v15 + 216);
  v6 = *(_DWORD *)(v15 + 220);
  std::mutex::unlock((std::mutex *)(v4 + 24));
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
LABEL_7:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
    {
      if (!v4)
        return;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      if (!v4)
        return;
    }
  }
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *((_DWORD *)this + 55) = v6;
  if (*((_DWORD *)this + 54) >= v5)
  {
    if (quasar::gLogLevel >= 5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Clipping audio buffer like other at ", 36);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" from ", 6);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v15);
      v6 = *((_DWORD *)this + 55);
    }
    *((_DWORD *)this + 54) = v6;
  }
  else
  {
    if (quasar::gLogLevel >= 5)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v15, (uint64_t)"Clipping audio buffer like other from ", 38);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" to ", 4);
      v11 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"; it was ", 9);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v15);
      v6 = *((_DWORD *)this + 55);
    }
    if (v5 >= v6)
      v12 = v6;
    else
      v12 = v5;
    *((_DWORD *)this + 55) = v12;
  }
  v14 = (std::mutex *)*((_QWORD *)this + 17);
  std::mutex::lock(v14);
  std::mutex::unlock(v14);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  quasar::RecogAudioBuffer::endAudioWithoutLock(this);
  std::mutex::unlock((std::mutex *)((char *)this + 24));
}

void sub_1ADD30CA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::synchronizeToLeadBuffer(quasar::RecogAudioBuffer *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::mutex *v4;
  uint64_t v5;
  int **v6;
  _QWORD *v7;
  std::mutex *v8;
  uint64_t *p_shared_owners;
  unint64_t v10;
  _OWORD v11[17];
  uint64_t v12;
  std::__shared_weak_count *v13;

  v12 = 0;
  v13 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (!v2 || (v13 = std::__shared_weak_count::lock(v2)) == 0 || (v3 = *((_QWORD *)this + 32), (v12 = v3) == 0))
  {
    memset(v11, 0, sizeof(v11));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"Cannot synchronize when lead buffer has been deallocated", 56);
    quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v11);
  }
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v4 = (std::mutex *)(v3 + 24);
  std::mutex::lock(v4);
  v5 = v12;
  *((_QWORD *)this + 27) = *(_QWORD *)(v12 + 216);
  v6 = *(int ***)(v5 + 224);
  v7 = (_QWORD *)operator new();
  boost::circular_buffer<float,std::allocator<float>>::circular_buffer(v7, v6);
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100]((uint64_t *)this + 28, (uint64_t)v7);
  if ((quasar::RecogAudioBuffer *)v5 == this)
  {
    *((_WORD *)this + 136) = *(_WORD *)(v5 + 272);
    *((_BYTE *)this + 274) = *(_BYTE *)(v5 + 274);
  }
  else
  {
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)this + 232, *(char **)(v5 + 232), *(_QWORD *)(v5 + 240), (uint64_t)(*(_QWORD *)(v5 + 240) - *(_QWORD *)(v5 + 232)) >> 2);
    *((_WORD *)this + 136) = *(_WORD *)(v5 + 272);
    *((_BYTE *)this + 274) = *(_BYTE *)(v5 + 274);
    std::vector<std::pair<double,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<double,unsigned long>*,std::pair<double,unsigned long>*>((_QWORD *)this + 35, *(__int128 **)(v5 + 280), *(__int128 **)(v5 + 288), (uint64_t)(*(_QWORD *)(v5 + 288) - *(_QWORD *)(v5 + 280)) >> 4);
  }
  *((_OWORD *)this + 19) = *(_OWORD *)(v5 + 304);
  v8 = (std::mutex *)*((_QWORD *)this + 17);
  std::mutex::lock(v8);
  std::mutex::unlock(v8);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v4);
  std::mutex::unlock((std::mutex *)((char *)this + 24));
  if (v13)
  {
    p_shared_owners = &v13->__shared_owners_;
    do
      v10 = __ldaxr((unint64_t *)p_shared_owners);
    while (__stlxr(v10 - 1, (unint64_t *)p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1ADD30EE0(_Unwind_Exception *a1)
{
  std::mutex *v1;
  std::mutex *v2;
  uint64_t v3;
  uint64_t v4;

  MEMORY[0x1AF44D190](v3, 0x1080C4082DC8E96);
  std::mutex::unlock(v2);
  std::mutex::unlock(v1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v4 - 80);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::setWaitingForFollowers(quasar::RecogAudioBuffer *this, int a2)
{
  std::mutex *v4;
  std::mutex *v5;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((unsigned __int8 *)this + 275) != a2)
  {
    *((_BYTE *)this + 275) = a2;
    v5 = (std::mutex *)*((_QWORD *)this + 17);
    std::mutex::lock(v5);
    std::mutex::unlock(v5);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  }
  std::mutex::unlock(v4);
}

void quasar::RecogAudioBuffer::triggerServerSideEndPointer(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  std::mutex *v3;
  _OWORD v4[17];

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (*((_BYTE *)this + 8) && !*((_BYTE *)this + 274))
  {
    quasar::RecogAudioBuffer::endAudioWithoutLock(this);
    *((_BYTE *)this + 274) = 1;
    *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
    if (quasar::gLogLevel >= 5)
    {
      memset(v4, 0, sizeof(v4));
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Server endpoint triggered so moving buffer marker to end of buffer.", 67);
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
    }
    v3 = (std::mutex *)*((_QWORD *)this + 17);
    std::mutex::lock(v3);
    std::mutex::unlock(v3);
    std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  }
  std::mutex::unlock(v2);
}

void sub_1ADD31090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::stopAudioDecoding(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  std::mutex *v3;
  _OWORD v4[17];

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  quasar::RecogAudioBuffer::endAudioWithoutLock(this);
  *((_BYTE *)this + 274) = 1;
  *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
  if (quasar::gLogLevel >= 5)
  {
    memset(v4, 0, sizeof(v4));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"Stop Audio Decoding called, so moving buffer marker to end of buffer.", 69);
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v4);
  }
  v3 = (std::mutex *)*((_QWORD *)this + 17);
  std::mutex::lock(v3);
  std::mutex::unlock(v3);
  std::condition_variable::notify_all((std::condition_variable *)((char *)this + 88));
  std::mutex::unlock(v2);
}

void sub_1ADD31194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::mutex *v9;

  quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&a9);
  std::mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::setServerSideEndPointing(quasar::RecogAudioBuffer *this, char a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *((_BYTE *)this + 8) = a2;
  std::mutex::unlock(v4);
}

void quasar::RecogAudioBuffer::stats(quasar::RecogAudioBuffer *this, double *a2, double *a3)
{
  std::mutex *v6;

  v6 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *a2 = *((double *)this + 38);
  *a3 = *((double *)this + 39);
  std::mutex::unlock(v6);
}

uint64_t quasar::RecogAudioBuffer::serverSideEndPointingEnabled(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  uint64_t v3;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v3 = *((unsigned __int8 *)this + 8);
  std::mutex::unlock(v2);
  return v3;
}

uint64_t quasar::RecogAudioBuffer::hasServerEndpointed(quasar::RecogAudioBuffer *this)
{
  return *((unsigned __int8 *)this + 274);
}

void quasar::RecogAudioBuffer::getRawAudioCache(quasar::RecogAudioBuffer *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 29), *((_QWORD *)this + 30), (uint64_t)(*((_QWORD *)this + 30) - *((_QWORD *)this + 29)) >> 2);
  std::mutex::unlock(v4);
}

void sub_1ADD312DC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::emptyAudioBuffer(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD v9[17];

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  if (quasar::gLogLevel >= 5)
  {
    memset(v9, 0, sizeof(v9));
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"emptyAudioBuffer: ring=", 23);
    v3 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)" bufferPos=", 11);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bufferLen=", 11);
    std::ostream::operator<<();
    quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)v9);
  }
  v5 = (_QWORD *)*((_QWORD *)this + 28);
  v6 = v5[4];
  v8 = v5[1];
  v7 = v5[2];
  if (v6 >= (v8 - v7) >> 2)
    v6 -= (v8 - *v5) >> 2;
  v5[2] = v7 + 4 * v6;
  v5[4] = 0;
  *((_DWORD *)this + 54) = *((_DWORD *)this + 55);
  std::mutex::unlock(v2);
}

void sub_1ADD31404(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::startCountingAudioDuration(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  *((_DWORD *)this + 81) = *((_DWORD *)this + 55);
  std::mutex::unlock(v2);
}

float quasar::RecogAudioBuffer::stopCountingAudioDuration(quasar::RecogAudioBuffer *this)
{
  std::mutex *v2;
  unint64_t v3;
  float v4;
  unsigned int v5;

  v2 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v4 = 0.0;
  v5 = *((_DWORD *)this + 55) - *((_DWORD *)this + 81);
  if (v5)
  {
    LODWORD(v3) = *((_DWORD *)this + 52);
    v4 = (double)v5 / (double)v3;
  }
  std::mutex::unlock(v2);
  return v4;
}

uint64_t quasar::RecogAudioBuffer::RecogAudioBuffer(uint64_t a1, unsigned int a2, int a3, int a4, char a5, __int128 *a6, _QWORD *a7, int a8, char a9, int a10)
{
  uint64_t v17;
  _QWORD *v18;
  int v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  char *v26;
  int v27;
  int v28;
  _OWORD v30[18];

  v17 = quasar::RecogAudioBufferBase::RecogAudioBufferBase(a1, a5);
  *(_QWORD *)(v17 + 16) = &unk_1E5D36258;
  *(_QWORD *)v17 = &off_1E5D361D8;
  *(_QWORD *)(v17 + 24) = 850045863;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 1018212795;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_QWORD *)(v17 + 128) = 0;
  v18 = operator new(0x58uLL);
  v18[3] = 850045863;
  *(_QWORD *)(a1 + 136) = v18 + 3;
  v18[2] = 0;
  *v18 = &unk_1E5D455F0;
  v18[1] = 0;
  *((_OWORD *)v18 + 2) = 0u;
  *((_OWORD *)v18 + 3) = 0u;
  *((_OWORD *)v18 + 4) = 0u;
  v18[10] = 0;
  *(_QWORD *)(a1 + 144) = v18;
  v19 = a3 * a2;
  if (a3 < 0)
    v19 = -1;
  v20 = a8 * a2;
  if (a8 < 0)
    v20 = -1;
  *(_DWORD *)(a1 + 152) = v19;
  *(_DWORD *)(a1 + 156) = v20;
  *(_QWORD *)(a1 + 160) = a4;
  if (*((char *)a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 168), *(const std::string::value_type **)a6, *((_QWORD *)a6 + 1));
  }
  else
  {
    v21 = *a6;
    *(_QWORD *)(a1 + 184) = *((_QWORD *)a6 + 2);
    *(_OWORD *)(a1 + 168) = v21;
  }
  *(_QWORD *)(a1 + 192) = *a7;
  v22 = a7[1];
  *(_QWORD *)(a1 + 200) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  *(_DWORD *)(a1 + 208) = a2;
  *(_DWORD *)(a1 + 212) = a10;
  *(_QWORD *)(a1 + 216) = 0;
  v25 = (_QWORD *)operator new();
  v25[4] = 0;
  v26 = (char *)boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)v25, a2);
  *v25 = v26;
  v25[1] = &v26[4 * a2];
  *(_OWORD *)(a1 + 232) = 0u;
  v25[2] = v26;
  v25[3] = v26;
  *(_QWORD *)(a1 + 224) = v25;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 260) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 320) = a9;
  *(_DWORD *)(a1 + 324) = 0;
  v27 = *(_DWORD *)(a1 + 152);
  if ((v27 & 0x80000000) == 0)
  {
    v28 = *(_DWORD *)(a1 + 156);
    if ((v28 & 0x80000000) == 0 && v28 > v27)
    {
      memset(v30, 0, 272);
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v30, (uint64_t)"It does not make sense for maxRingSizeSeconds (limit on the amount of unread audio queued in the buffer) to be greater than maxBufferLenReached (limit on the total amount of audio written to the buffer)", 202);
      quasar::QuasarExceptionMessage::~QuasarExceptionMessage((quasar::QuasarExceptionMessage *)v30);
    }
  }
  if (a9)
    std::vector<float>::reserve((void **)(a1 + 232), (unint64_t)(float)((float)a2 * 5.0));
  return a1;
}

{
  return quasar::RecogAudioBuffer::RecogAudioBuffer(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1ADD31740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, quasar::Bitmap *a10)
{
  quasar::Bitmap *v10;
  std::mutex *v11;
  std::condition_variable *v12;
  uint64_t v13;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v13);
  std::condition_variable::~condition_variable(v12);
  std::mutex::~mutex(v11);
  quasar::Bitmap::~Bitmap(a10);
  quasar::Bitmap::~Bitmap(v10);
  _Unwind_Resume(a1);
}

void quasar::RecogAudioBuffer::~RecogAudioBuffer(quasar::RecogAudioBuffer *this)
{
  quasar::Bitmap *v2;
  void *v3;
  std::__shared_weak_count *v4;
  void *v5;

  *(_QWORD *)this = &off_1E5D361D8;
  *((_QWORD *)this + 2) = &unk_1E5D36258;
  v2 = (quasar::RecogAudioBuffer *)((char *)this + 16);
  v3 = (void *)*((_QWORD *)this + 35);
  if (v3)
  {
    *((_QWORD *)this + 36) = v3;
    operator delete(v3);
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  v5 = (void *)*((_QWORD *)this + 29);
  if (v5)
  {
    *((_QWORD *)this + 30) = v5;
    operator delete(v5);
  }
  std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  if (*((char *)this + 191) < 0)
    operator delete(*((void **)this + 21));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  quasar::Bitmap::~Bitmap(v2);
  quasar::Bitmap::~Bitmap(this);
}

{
  quasar::RecogAudioBuffer::~RecogAudioBuffer(this);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'quasar::RecogAudioBuffer::~RecogAudioBuffer(quasar::RecogAudioBuffer *this)
{
  quasar::RecogAudioBuffer::~RecogAudioBuffer((quasar::RecogAudioBuffer *)((char *)this - 16));
}

{
  quasar::RecogAudioBuffer::~RecogAudioBuffer((quasar::RecogAudioBuffer *)((char *)this - 16));
  JUMPOUT(0x1AF44D190);
}

unint64_t quasar::RecogAudioBuffer::packetArrivalTimestampFromAudioTime(quasar::RecogAudioBuffer *this, float a2)
{
  std::mutex *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  float v11;
  unint64_t v13;
  mach_timebase_info info;

  v4 = (std::mutex *)((char *)this + 24);
  std::mutex::lock((std::mutex *)((char *)this + 24));
  v5 = *(_QWORD *)(*((_QWORD *)this + 24) + 32);
  mach_timebase_info(&info);
  v8 = *((_QWORD *)this + 35);
  v9 = *((_QWORD *)this + 36);
  if (v8 == v9)
  {
LABEL_9:
    v13 = 0;
  }
  else
  {
    LODWORD(v6) = info.numer;
    LODWORD(v7) = info.denom;
    v10 = 1000000000.0 / (double)v6 * (double)v7;
    v11 = 0.0;
    while (1)
    {
      v11 = v11 + (float)((float)*(unint64_t *)(v8 + 8) / (float)*((unsigned int *)this + 52));
      if (v11 >= a2 && v5 != 0)
        break;
      v8 += 16;
      if (v8 == v9)
        goto LABEL_9;
    }
    v13 = (unint64_t)((double)v5 + v10 * *(double *)v8);
  }
  std::mutex::unlock(v4);
  return v13;
}

void sub_1ADD319F8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL std::condition_variable_any::wait_until<std::mutex,std::chrono::steady_clock,std::chrono::duration<long long,std::ratio<1l,1000000000l>>>(uint64_t a1, std::mutex *a2, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a3)
{
  std::mutex *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::system_clock::time_point v12;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v13;
  _BOOL8 v14;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v15;
  unint64_t *v16;
  unint64_t v17;
  std::unique_lock<std::mutex> v19;
  std::mutex *v20;
  std::__shared_weak_count *v21;

  v6 = *(std::mutex **)(a1 + 48);
  v7 = *(std::__shared_weak_count **)(a1 + 56);
  v20 = v6;
  v21 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v19.__m_ = v6;
  v19.__owns_ = 1;
  std::mutex::lock(v6);
  std::mutex::unlock(a2);
  if (std::chrono::steady_clock::now().__d_.__rep_ >= *a3)
  {
    v14 = 1;
    goto LABEL_20;
  }
  v10 = *a3;
  v11.__d_.__rep_ = v10 - std::chrono::steady_clock::now().__d_.__rep_;
  if (v11.__d_.__rep_ >= 1)
  {
    std::chrono::steady_clock::now();
    v12.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v12.__d_.__rep_)
    {
      if (v12.__d_.__rep_ < 1)
      {
        if ((unint64_t)v12.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v13 = 0x8000000000000000;
          goto LABEL_17;
        }
      }
      else if ((unint64_t)v12.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v13 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_15;
      }
      v13 = 1000 * v12.__d_.__rep_;
    }
    else
    {
      v13 = 0;
    }
LABEL_15:
    if (v13 > (v11.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v15.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_18:
      std::condition_variable::__do_timed_wait((std::condition_variable *)a1, &v19, v15);
      std::chrono::steady_clock::now();
      goto LABEL_19;
    }
LABEL_17:
    v15.__d_.__rep_ = v13 + v11.__d_.__rep_;
    goto LABEL_18;
  }
LABEL_19:
  v14 = std::chrono::steady_clock::now().__d_.__rep_ >= *a3;
LABEL_20:
  std::unique_lock<std::mutex>::unlock(&v19);
  std::mutex::lock(a2);
  if (v19.__owns_)
    std::mutex::unlock(v19.__m_);
  if (v7)
  {
    v16 = (unint64_t *)&v7->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v14;
}

void sub_1ADD31BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::condition_variable_any::wait<std::mutex>(uint64_t a1, std::mutex *a2)
{
  std::mutex *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::unique_lock<std::mutex> v10;
  std::mutex *v11;
  std::__shared_weak_count *v12;

  v4 = *(std::mutex **)(a1 + 48);
  v5 = *(std::__shared_weak_count **)(a1 + 56);
  v11 = v4;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v10.__m_ = v4;
  v10.__owns_ = 1;
  std::mutex::lock(v4);
  std::mutex::unlock(a2);
  std::condition_variable::wait((std::condition_variable *)a1, &v10);
  std::unique_lock<std::mutex>::unlock(&v10);
  std::mutex::lock(a2);
  if (v10.__owns_)
    std::mutex::unlock(v10.__m_);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1ADD31C90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void *boost::circular_buffer<float,std::allocator<float>>::allocate(uint64_t a1, unint64_t a2)
{
  std::logic_error v3;

  if (a2 >> 62)
  {
    std::logic_error::logic_error(&v3, "circular_buffer");
    v3.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
    boost::throw_exception<std::length_error>(&v3);
  }
  if (a2)
    return operator new(4 * a2);
  else
    return 0;
}

void sub_1ADD31D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::logic_error a9)
{
  std::logic_error::~logic_error(&a9);
  _Unwind_Resume(a1);
}

void boost::throw_exception<std::length_error>(const std::logic_error *a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADD31D64(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E5D29898;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &unk_1E5D29730;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29760;
  *(_QWORD *)(a1 + 24) = &unk_1E5D29788;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::length_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E5D29898;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5020] + 16;
  *(_QWORD *)(v2 + 24) = &unk_1E5D29AE0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &unk_1E5D29730;
  *(_QWORD *)(v2 + 8) = &unk_1E5D29760;
  *(_QWORD *)(v2 + 24) = &unk_1E5D29788;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_1ADD31EEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::logic_error *v2;

  std::logic_error::~logic_error(v2);
  MEMORY[0x1AF44D190](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::length_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_1ADD31F6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 32));
  std::logic_error::~logic_error((std::logic_error *)(a1 + 8));
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(uint64_t a1)
{
  *(_QWORD *)(a1 + 16) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
}

{
  *(_QWORD *)(a1 + 16) = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr((uint64_t *)(a1 + 24));
  std::logic_error::~logic_error((std::logic_error *)a1);
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'boost::wrapexcept<std::length_error>::~wrapexcept(_QWORD *a1)
{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
}

{
  *a1 = &unk_1E5D29AE0;
  boost::exception_detail::refcount_ptr<boost::exception_detail::error_info_container>::~refcount_ptr(a1 + 1);
  std::logic_error::~logic_error((std::logic_error *)a1 - 1);
  JUMPOUT(0x1AF44D190);
}

uint64_t boost::wrapexcept<std::length_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E5D29898;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5020] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E5D29AE0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &unk_1E5D29730;
  *(_QWORD *)(a1 + 8) = &unk_1E5D29760;
  *(_QWORD *)(a1 + 24) = &unk_1E5D29788;
  return a1;
}

void sub_1ADD32194(_Unwind_Exception *a1)
{
  std::logic_error *v1;

  std::logic_error::~logic_error(v1);
  _Unwind_Resume(a1);
}

void boost::circular_buffer<float,std::allocator<float>>::destroy(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)a1;
  v6 = v3 - v2;
  v7 = (unint64_t)(v3 - (_QWORD)v5) >> 2;
  if (v4 < v6 >> 2)
    v7 = 0;
  *(_QWORD *)(a1 + 16) = v2 + 4 * (v4 - v7);
  if (v5)
    operator delete(v5);
}

_QWORD *boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 < 1)
  {
    if (a2 < 0)
      boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator-=((uint64_t)a1, -a2);
  }
  else
  {
    v3 = (_QWORD *)*a1;
    v4 = a1[1];
    v5 = *(_QWORD *)(*a1 + 8);
    if (a2 >= (v5 - v4) >> 2)
      a2 -= (v5 - *v3) >> 2;
    v6 = v4 + 4 * a2;
    if (v6 == v3[3])
      v7 = 0;
    else
      v7 = v6;
    a1[1] = v7;
  }
  return a1;
}

uint64_t boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator-=(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;

  if (a2 < 1)
  {
    if (a2 < 0)
      boost::cb_details::iterator<boost::circular_buffer<float,std::allocator<float>>,boost::cb_details::nonconst_traits<std::allocator<float>>>::operator+=(a1, -a2);
  }
  else
  {
    v4 = *(_QWORD **)a1;
    v3 = *(_QWORD *)(a1 + 8);
    if (!v3)
      v3 = v4[3];
    if (a2 > (v3 - *v4) >> 2)
      a2 -= (uint64_t)(v4[1] - *v4) >> 2;
    *(_QWORD *)(a1 + 8) = v3 - 4 * a2;
  }
  return a1;
}

_QWORD *boost::circular_buffer<float,std::allocator<float>>::push_back_impl<float const&>(_QWORD *result, _DWORD *a2)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;

  v2 = (_DWORD *)*result;
  v3 = (_DWORD *)result[1];
  v4 = result[4];
  if (v4 == ((uint64_t)v3 - *result) >> 2)
  {
    if (v3 != v2)
    {
      v5 = (_DWORD *)result[3];
      *v5 = *a2;
      v6 = v5 + 1;
      if (v6 != v3)
        v2 = v6;
      result[2] = v2;
      result[3] = v2;
    }
  }
  else
  {
    v7 = (_DWORD *)result[3];
    *v7 = *a2;
    v8 = v7 + 1;
    if (v8 != v3)
      v2 = v8;
    result[3] = v2;
    result[4] = v4 + 1;
  }
  return result;
}

_QWORD *boost::circular_buffer<float,std::allocator<float>>::circular_buffer(_QWORD *a1, int **a2)
{
  uint64_t v4;
  _DWORD *v5;
  int *v6;
  int *v7;
  int *v8;
  _DWORD *v9;
  int v10;
  _DWORD *v12;

  a1[4] = a2[4];
  v4 = (char *)a2[1] - (char *)*a2;
  v5 = boost::circular_buffer<float,std::allocator<float>>::allocate((uint64_t)a1, v4 >> 2);
  *a1 = v5;
  a1[1] = (char *)v5 + v4;
  a1[2] = v5;
  if (a2[4] && (v6 = a2[2]) != 0)
  {
    v7 = a2[1];
    v8 = a2[3];
    v9 = v5;
    do
    {
      v10 = *v6++;
      *v9++ = v10;
      if (v6 == v7)
        v6 = *a2;
    }
    while (v6 != v8 && v6 != 0);
  }
  else
  {
    v9 = v5;
  }
  if (v9 == (_DWORD *)((char *)v5 + v4))
    v12 = v5;
  else
    v12 = v9;
  a1[3] = v12;
  return a1;
}

uint64_t *std::unique_ptr<boost::circular_buffer<float,std::allocator<float>>>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    boost::circular_buffer<float,std::allocator<float>>::destroy(v2);
    JUMPOUT(0x1AF44D190);
  }
  return result;
}

char *std::vector<std::pair<double,unsigned long>>::__assign_with_size[abi:ne180100]<std::pair<double,unsigned long>*,std::pair<double,unsigned long>*>(_QWORD *a1, __int128 *a2, __int128 *a3, unint64_t a4)
{
  __int128 *v6;
  uint64_t v8;
  char *result;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  __int128 v16;
  char *v17;
  char *v18;
  unint64_t v19;
  __int128 *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = a1[2];
  result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    v18 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v18;
    v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_QWORD *)v25 = *(_QWORD *)v6;
          *((_QWORD *)v25 + 1) = *((_QWORD *)v6 + 1);
          v24 += 16;
          ++v6;
          v25 += 16;
        }
        while (v6 != a3);
      }
      v17 = (char *)(v24 - result);
      v12 = result;
    }
    else
    {
      v20 = &a2[v19];
      if (v12 != result)
      {
        do
        {
          *(_QWORD *)result = *(_QWORD *)v6;
          *((_QWORD *)result + 1) = *((_QWORD *)v6++ + 1);
          result += 16;
        }
        while (v6 != v20);
      }
      v21 = v12;
      if (v20 != a3)
      {
        v22 = v12;
        do
        {
          v23 = *v20++;
          *(_OWORD *)v22 = v23;
          v22 += 16;
          v21 += 16;
        }
        while (v20 != a3);
      }
      v17 = (char *)(v21 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    v14 = (char *)a1[1];
    v13 = a1 + 1;
    v12 = v14;
    v15 = v14;
    if (v6 != a3)
    {
      v15 = v12;
      do
      {
        v16 = *v6++;
        *(_OWORD *)v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    v17 = (char *)(v15 - v12);
  }
  *v13 = &v17[(_QWORD)v12];
  return result;
}

float *quasar::Token::DecodingSignals::DecodingSignals(float *this, float a2, float a3, float a4, float a5)
{
  *this = a2;
  this[1] = a3;
  this[2] = a4;
  this[3] = a5;
  return this;
}

float32x4_t quasar::Token::DecodingSignals::operator+=(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t result;

  result = vaddq_f32(*a2, *a1);
  *a1 = result;
  return result;
}

double quasar::Token::Token(quasar::Token *this)
{
  double result;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = -1;
  *(_QWORD *)((char *)this + 36) = 0;
  *(_QWORD *)((char *)this + 28) = 0;
  *((_WORD *)this + 22) = 1;
  result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_QWORD *)this + 20) = 0;
  *((_DWORD *)this + 42) = 4;
  *((_WORD *)this + 86) = 0;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_BYTE *)this + 200) = 0;
  *((_QWORD *)this + 24) = 0;
  *(_QWORD *)((char *)this + 204) = 0;
  *(_QWORD *)((char *)this + 212) = 0;
  return result;
}

std::string *quasar::Token::Token(std::string *this, __int128 *a2, int a3, int a4, int a5, std::string::value_type a6, std::string::value_type a7, __int128 *a8, float a9, __int128 *a10, __int128 **a11, char a12, __int128 *a13, char a14, char a15)
{
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v23 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v23;
  }
  LODWORD(this[1].__r_.__value_.__l.__data_) = -1;
  HIDWORD(this[1].__r_.__value_.__r.__words[0]) = a3;
  LODWORD(this[1].__r_.__value_.__r.__words[1]) = a4;
  HIDWORD(this[1].__r_.__value_.__r.__words[1]) = a5;
  *(float *)&this[1].__r_.__value_.__r.__words[2] = a9;
  this[1].__r_.__value_.__s.__data_[20] = a6;
  this[1].__r_.__value_.__s.__data_[21] = a7;
  if (*((char *)a8 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 2, *(const std::string::value_type **)a8, *((_QWORD *)a8 + 1));
  }
  else
  {
    v24 = *a8;
    this[2].__r_.__value_.__r.__words[2] = *((_QWORD *)a8 + 2);
    *(_OWORD *)&this[2].__r_.__value_.__l.__data_ = v24;
  }
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  this[3].__r_.__value_.__r.__words[2] = 0;
  if (*((char *)a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this + 4, *(const std::string::value_type **)a10, *((_QWORD *)a10 + 1));
  }
  else
  {
    v25 = *a10;
    this[4].__r_.__value_.__r.__words[2] = *((_QWORD *)a10 + 2);
    *(_OWORD *)&this[4].__r_.__value_.__l.__data_ = v25;
  }
  this[5].__r_.__value_.__r.__words[0] = 0;
  this[5].__r_.__value_.__l.__size_ = 0;
  this[5].__r_.__value_.__r.__words[2] = 0;
  std::vector<std::pair<std::string,float>>::__init_with_size[abi:ne180100]<std::pair<std::string,float>*,std::pair<std::string,float>*>(this + 5, *a11, a11[1], ((char *)a11[1] - (char *)*a11) >> 5);
  v26 = this + 6;
  if (*((char *)a13 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v26, *(const std::string::value_type **)a13, *((_QWORD *)a13 + 1));
  }
  else
  {
    v27 = *a13;
    this[6].__r_.__value_.__r.__words[2] = *((_QWORD *)a13 + 2);
    *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v27;
  }
  LODWORD(this[7].__r_.__value_.__l.__data_) = 4;
  this[7].__r_.__value_.__s.__data_[4] = a12;
  this[7].__r_.__value_.__s.__data_[5] = a14;
  this[7].__r_.__value_.__r.__words[2] = 0;
  this[8].__r_.__value_.__r.__words[0] = 0;
  this[7].__r_.__value_.__l.__size_ = 0;
  this[8].__r_.__value_.__s.__data_[8] = a15;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[2] + 4) = 0;
  *(std::string::size_type *)((char *)&this[8].__r_.__value_.__r.__words[1] + 4) = 0;
  return this;
}

{
  return quasar::Token::Token(this, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_1ADD3277C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  void **v14;

  v14 = v13;
  a10 = v14;
  std::vector<quasar::TextTokenizer::Token>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 119) < 0)
    operator delete(*v12);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (*(char *)(v10 + 71) < 0)
    operator delete(*v11);
  if (*(char *)(v10 + 23) < 0)
    operator delete(*(void **)v10);
  _Unwind_Resume(a1);
}

BOOL quasar::Token::isPrintable(quasar::Token *this)
{
  uint64_t v1;

  if ((*((char *)this + 23) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 23))
    {
      if (*((_BYTE *)this + 23) != 3)
        return 1;
      return *(_WORD *)this != 16188 || *((_BYTE *)this + 2) != 62;
    }
    return 0;
  }
  v1 = *((_QWORD *)this + 1);
  if (!v1)
    return 0;
  if (v1 != 3)
    return 1;
  this = *(quasar::Token **)this;
  return *(_WORD *)this != 16188 || *((_BYTE *)this + 2) != 62;
}

BOOL quasar::Token::isAutoPunctuation(quasar::Token *this)
{
  return *((_BYTE *)this + 172) || *((_BYTE *)this + 173) != 0;
}

uint64_t quasar::Token::trailingSilenceMilliseconds(quasar::Token *this)
{
  unsigned int v1;
  unsigned int v2;
  BOOL v3;
  unsigned int v4;

  v1 = *((_DWORD *)this + 8);
  v2 = *((_DWORD *)this + 9);
  v3 = v1 >= v2;
  v4 = v1 - v2;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t quasar::Token::operator==(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  if (*((_DWORD *)a1 + 6) == *((_DWORD *)v6 + 6)
    && *((_DWORD *)a1 + 7) == *((_DWORD *)v6 + 7)
    && *((_DWORD *)a1 + 8) == *((_DWORD *)v6 + 8)
    && *((_DWORD *)a1 + 9) == *((_DWORD *)v6 + 9)
    && *((float *)a1 + 10) == *((float *)v6 + 10)
    && a1[44] == v6[44]
    && a1[45] == v6[45]
    && std::operator==[abi:ne180100]<std::pair<std::string,float>,std::allocator<std::pair<std::string,float>>>((unsigned __int8 **)a1 + 15, (uint64_t)(v6 + 120))&& a1[172] == v6[172]&& quasar::VoiceCommandActiveSetCompilation::Suite::operator==(a1 + 144, v6 + 144)&& *((_DWORD *)a1 + 42) == *((_DWORD *)v6 + 42)&& a1[173] == v6[173]&& quasar::VoiceCommandActiveSetCompilation::Suite::operator==(a1 + 176, v6 + 176)&& *((float *)a1 + 51) == *((float *)v6 + 51)&& *((float *)a1 + 52) == *((float *)v6 + 52)&& *((float *)a1 + 53) == *((float *)v6 + 53)&& *((float *)a1 + 54) == *((float *)v6 + 54))
  {
    return std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>((unsigned __int8 **)a1 + 9, (uint64_t)(v6 + 72));
  }
  return 0;
}

BOOL std::operator==[abi:ne180100]<std::pair<std::string,float>,std::allocator<std::pair<std::string,float>>>(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  _BOOL8 result;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::__equal_to::operator()[abi:ne180100]<std::pair<std::string,float>,std::pair<std::string,float>>((uint64_t)&v6, v2, v4);
    if (!result)
      break;
    v2 += 32;
    v4 += 32;
  }
  while (v2 != v3);
  return result;
}

uint64_t std::operator==[abi:ne180100]<std::string,std::allocator<std::string>>(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t result;
  char v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(_QWORD *)(a2 + 8) - *(_QWORD *)a2)
    return 0;
  if (v2 == v3)
    return 1;
  do
  {
    result = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v6, v2, v4);
    if (!(_DWORD)result)
      break;
    v2 += 24;
    v4 += 24;
  }
  while (v2 != v3);
  return result;
}

void sub_1ADD32E28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t **quasar::Token::resetSpacing(uint64_t **result)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *result;
  v2 = result[1];
  if (*result != v2)
  {
    do
    {
      v4 = *v1;
      v3 = v1[1];
      if (*v1 != v3)
      {
        v5 = *v1;
        do
        {
          *(_WORD *)(v5 + 44) = 1;
          v5 += 224;
        }
        while (v5 != v3);
        if (v4 != v3)
          *(_BYTE *)(v3 - 180) = 0;
      }
      v1 += 3;
    }
    while (v1 != v2);
  }
  return result;
}

void quasar::Token::tokenNameWithCleanedMetadata(const std::string *a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  std::string __p;
  std::string v19;
  __int128 v20;

  *(_QWORD *)&v20 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "~w00");
  quasar::splitAndTrimNoEmpty(a1, (char *)&__p, &v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2 = v14;
  for (i = v15; v2 != i; v2 += 24)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\\");
    quasar::splitAndTrimNoEmpty((const std::string *)v2, (char *)&__p, &v12);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = v13;
    if (0xAAAAAAAAAAAAAAABLL * ((v13 - (uint64_t)v12) >> 3) >= 3)
    {
      if (*((char *)v12 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
        v4 = v13;
      }
      else
      {
        v5 = *v12;
        __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v12 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v5;
      }
      if (*(char *)(v4 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)(v4 - 24), *(_QWORD *)(v4 - 16));
      }
      else
      {
        v6 = *(_OWORD *)(v4 - 24);
        v19.__r_.__value_.__r.__words[2] = *(_QWORD *)(v4 - 8);
        *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v6;
      }
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v16 = (const char *)&v9;
      LOBYTE(v17) = 0;
      v9 = (std::string *)operator new(0x30uLL);
      v10 = v9;
      v11 = v9 + 2;
      v7 = 0;
      v10 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v11, (__int128 *)&__p, &v20, v9);
      do
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[v7 + 2]) < 0)
          operator delete(*(void **)((char *)&__p + v7 * 8 + 24));
        v7 -= 3;
      }
      while (v7 != -6);
      v16 = "\\";
      v17 = 1;
      quasar::join<std::vector<std::string>>((uint64_t *)&v9, (uint64_t *)&v16);
      if (*(char *)(v2 + 23) < 0)
        operator delete(*(void **)v2);
      v8 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(v2 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)v2 = v8;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v9;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"~w00";
  __p.__r_.__value_.__l.__size_ = 4;
  quasar::join<std::vector<std::string>>(&v14, (uint64_t *)&__p);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1ADD331DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,char *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  __p = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void quasar::Token::tokenNamesWithCleanedMetadata(const std::string **a1@<X0>, std::vector<std::string> *a2@<X8>)
{
  const std::string *v2;
  const std::string *v3;
  std::allocator<std::string> *p_end_cap;
  std::string *value;
  std::vector<std::string>::pointer end;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  void *__p[2];
  std::string::size_type v16;
  std::__split_buffer<std::string> __v;

  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    p_end_cap = (std::allocator<std::string> *)&a2->__end_cap_;
    do
    {
      quasar::Token::tokenNameWithCleanedMetadata(v2);
      end = a2->__end_;
      value = a2->__end_cap_.__value_;
      if (end >= value)
      {
        v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a2->__begin_) >> 3);
        v9 = v8 + 1;
        if (v8 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)a2->__begin_) >> 3);
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x555555555555555)
          v11 = 0xAAAAAAAAAAAAAAALL;
        else
          v11 = v9;
        __v.__end_cap_.__value_ = p_end_cap;
        if (v11)
          v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)p_end_cap, v11);
        else
          v12 = 0;
        v13 = v12 + v8;
        __v.__first_ = v12;
        __v.__begin_ = v13;
        __v.__end_cap_.__value_ = &v12[v11];
        v13->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        v16 = 0;
        *(_OWORD *)__p = 0uLL;
        __v.__end_ = v13 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(a2, &__v);
        v14 = a2->__end_;
        std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::wstring> *)&__v);
        a2->__end_ = v14;
      }
      else
      {
        end->__r_.__value_.__r.__words[2] = v16;
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
        a2->__end_ = end + 1;
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_1ADD33430(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, std::__split_buffer<std::wstring> *a7, uint64_t a8, void *__pa, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__pa);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

void quasar::Token::tokensWithCleanedMetadata(uint64_t **a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  std::vector<std::vector<quasar::Token>>::__init_with_size[abi:ne180100]<std::vector<quasar::Token>*,std::vector<quasar::Token>*>(a2, *a1, a1[1], 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1));
  v3 = *a2;
  v4 = a2[1];
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = v3[1];
    while (v5 != v6)
    {
      quasar::Token::tokenNameWithCleanedMetadata((const std::string *)v5);
      if (*(char *)(v5 + 23) < 0)
        operator delete(*(void **)v5);
      *(_QWORD *)(v5 + 16) = v8;
      *(_OWORD *)v5 = v7;
      v5 += 224;
    }
    v3 += 3;
  }
}

void sub_1ADD33520(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<quasar::Token>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

quasar::LeftContext *quasar::LeftContext::LeftContext(quasar::LeftContext *this, const quasar::LeftContext *a2)
{
  std::vector<std::wstring> *v4;
  std::vector<std::wstring> *v5;
  std::mutex *v6;

  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = (char *)this + 8;
  *(_OWORD *)((char *)this + 24) = 0u;
  v4 = (std::vector<std::wstring> *)((char *)this + 24);
  *((_QWORD *)this + 9) = 850045863;
  v5 = (std::vector<std::wstring> *)((char *)this + 48);
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v6 = (std::mutex *)((char *)a2 + 72);
  *((_QWORD *)this + 16) = 0;
  std::mutex::lock((std::mutex *)((char *)a2 + 72));
  if (this != a2)
  {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v4, *((std::string **)a2 + 3), *((__int128 **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(v5, *((std::string **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  }
  std::mutex::unlock(v6);
  return this;
}

void sub_1ADD33614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::mutex *v11;

  std::mutex::~mutex(v11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(v10, *(_QWORD **)(v10 + 8));
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForLM(__int128 **this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[3], this[4], 0xAAAAAAAAAAAAAAABLL * (((char *)this[4] - (char *)this[3]) >> 3));
  std::mutex::unlock(v4);
}

void sub_1ADD336C0(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForLM(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 + 24 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 24), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::mutex::unlock(v4);
}

void sub_1ADD33734(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForItn(__int128 **this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[6], this[7], 0xAAAAAAAAAAAAAAABLL * (((char *)this[7] - (char *)this[6]) >> 3));
  std::mutex::unlock(v4);
}

void sub_1ADD337A8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForItn(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 + 48 != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 48), *(std::string **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  std::mutex::unlock(v4);
}

void sub_1ADD3381C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::updateInterUtteranceLeftContext(uint64_t a1, __int128 **a2, unint64_t a3)
{
  std::mutex *v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  _QWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void **v28;

  v6 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  v7 = *a2;
  v8 = a2[1];
  if (*a2 == v8)
  {
    v9 = *(__int128 **)(a1 + 32);
  }
  else
  {
    v9 = *(__int128 **)(a1 + 32);
    do
    {
      if ((unint64_t)v9 >= *(_QWORD *)(a1 + 40))
      {
        v9 = (__int128 *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(a1 + 24), v7);
      }
      else
      {
        std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a1 + 24, v7);
        v9 = (__int128 *)((char *)v9 + 24);
      }
      *(_QWORD *)(a1 + 32) = v9;
      v7 += 14;
    }
    while (v7 != v8);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *(_QWORD *)(a1 + 24)) >> 3) > a3)
  {
    if (quasar::gLogLevel >= 5)
    {
      v26 = 0u;
      v27 = 0u;
      v24 = 0u;
      v25 = 0u;
      v22 = 0u;
      v23 = 0u;
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v12 = 0u;
      v13 = 0u;
      v11 = 0u;
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v11, (uint64_t)"Clipped too big left context: ", 30);
      v10 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)" words; limit is ", 17);
      std::ostream::operator<<();
      quasar::QuasarDebugMessage::~QuasarDebugMessage((quasar::QuasarDebugMessage *)&v11);
      v9 = *(__int128 **)(a1 + 32);
    }
    v11 = 0uLL;
    *(_QWORD *)&v12 = 0;
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string*>,std::__wrap_iter<std::string*>>((std::string *)&v11, (__int128 *)((char *)v9 - 24 * a3), v9, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(24 * a3) >> 3));
    if ((__int128 *)(a1 + 24) != &v11)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)(a1 + 24), (std::string *)v11, *((__int128 **)&v11 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v11 + 1) - v11) >> 3));
    v28 = (void **)&v11;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v28);
  }
  std::mutex::unlock(v6);
}

void sub_1ADD33A10(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::setLeftContextForDecoder(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;

  v4 = (std::mutex *)(a1 + 72);
  std::mutex::lock((std::mutex *)(a1 + 72));
  if (a1 != a2)
    std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>((uint64_t **)a1, *(__int128 **)a2, (__int128 *)(a2 + 8));
  std::mutex::unlock(v4);
}

void sub_1ADD33AA4(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void quasar::LeftContext::getLeftContextForDecoder(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 9);
  std::mutex::lock((std::mutex *)(this + 9));
  std::map<std::string,std::shared_ptr<void>>::map[abi:ne180100](a2, this);
  std::mutex::unlock(v4);
}

void sub_1ADD33AFC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

std::vector<std::wstring> *quasar::RightContext::RightContext(std::vector<std::wstring> *this, std::vector<std::wstring> *a2)
{
  std::mutex *v4;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  this[1].__begin_ = (std::vector<std::wstring>::pointer)850045863;
  *(_OWORD *)&this[1].__end_ = 0u;
  *(_OWORD *)&this[2].__begin_ = 0u;
  *(_OWORD *)&this[2].__end_cap_.__value_ = 0u;
  v4 = (std::mutex *)&a2[1];
  this[3].__end_ = 0;
  std::mutex::lock((std::mutex *)&a2[1]);
  if (this != a2)
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, (std::string *)a2->__begin_, (__int128 *)a2->__end_, 0xAAAAAAAAAAAAAAABLL * (((char *)a2->__end_ - (char *)a2->__begin_) >> 3));
  std::mutex::unlock(v4);
  return this;
}

void sub_1ADD33BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex *v10;
  std::mutex *v11;

  std::mutex::unlock(v11);
  std::mutex::~mutex(v10);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void quasar::RightContext::setRightContextForItn(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  __int128 *v5;
  unint64_t v6;
  std::string v7;
  std::string *v8;

  v4 = (std::mutex *)(a1 + 24);
  std::mutex::lock((std::mutex *)(a1 + 24));
  v5 = *(__int128 **)(a2 + 8);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a2) >> 3);
  if (v6 < 5)
  {
    if (a1 != a2)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a1, *(std::string **)a2, v5, v6);
  }
  else
  {
    memset(&v7, 0, sizeof(v7));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(&v7, v5 - 6, v5, 4uLL);
    if (&v7 != (std::string *)a1)
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::wstring> *)a1, (std::string *)v7.__r_.__value_.__l.__data_, (__int128 *)v7.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7.__r_.__value_.__l.__size_ - v7.__r_.__value_.__r.__words[0]) >> 3));
    v8 = &v7;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v8);
  }
  std::mutex::unlock(v4);
}

void sub_1ADD33CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex *v12;

  std::mutex::unlock(v12);
  _Unwind_Resume(a1);
}

void quasar::RightContext::getRightContextForItn(__int128 **this@<X0>, std::string *a2@<X8>)
{
  std::mutex *v4;

  v4 = (std::mutex *)(this + 3);
  std::mutex::lock((std::mutex *)(this + 3));
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, *this, this[1], 0xAAAAAAAAAAAAAAABLL * (((char *)this[1] - (char *)*this) >> 3));
  std::mutex::unlock(v4);
}

void sub_1ADD33D38(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t quasar::RunAsyncParams::RunAsyncParams(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)a1 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 16000;
  *(_WORD *)(a1 + 32) = 257;
  *(_DWORD *)(a1 + 34) = 0;
  *(_BYTE *)(a1 + 38) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 47) = 0;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 56), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 80), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 104), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 128), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 152), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 176), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 200), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 224), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 248), "");
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_BYTE *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = a1 + 352;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 368) = a1 + 376;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_QWORD *)(a1 + 440) = 850045863;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 512), "");
  *(_QWORD *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 560) = 850045863;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 610) = 0u;
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 648), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 672), "");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 696), "");
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 720) = 0u;
  quasar::LmeDataStreams::LmeDataStreams((quasar::LmeDataStreams *)(a1 + 744));
  *(_QWORD *)(a1 + 792) = 0;
  return a1;
}

void sub_1ADD33F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, uint64_t a18)
{
  uint64_t v18;
  quasar::LeftContext *v19;
  void **v20;
  quasar::RightContext *v21;
  uint64_t v22;
  void **v23;
  void **v24;
  void **v25;
  void **v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t *v29;
  unint64_t v30;

  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v27);
  if (*(char *)(v18 + 719) < 0)
    operator delete(*v26);
  if (*(char *)(v18 + 695) < 0)
    operator delete(*v24);
  if (*(char *)(v18 + 671) < 0)
    operator delete(*v23);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v22);
  quasar::RightContext::~RightContext(v21);
  if (*(char *)(v18 + 535) < 0)
    operator delete(*v20);
  quasar::LeftContext::~LeftContext(v19);
  std::__tree<std::string>::destroy(v18 + 344, *(char **)(v18 + 352));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18 + 320);
  a18 = v18 + 296;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  a18 = v18 + 272;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  if (*(char *)(v18 + 271) < 0)
    operator delete(*v25);
  if (*(char *)(v18 + 247) < 0)
    operator delete(*a10);
  if (*(char *)(v18 + 223) < 0)
    operator delete(*a11);
  if (*(char *)(v18 + 199) < 0)
    operator delete(*a12);
  if (*(char *)(v18 + 175) < 0)
    operator delete(*a13);
  if (*(char *)(v18 + 151) < 0)
    operator delete(*a14);
  if (*(char *)(v18 + 127) < 0)
    operator delete(*a15);
  if (*(char *)(v18 + 103) < 0)
    operator delete(*a16);
  if (*(char *)(v18 + 79) < 0)
    operator delete(*a17);
  v28 = *(unint64_t **)(v18 + 16);
  if (v28)
  {
    v29 = v28 + 1;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
      (*(void (**)(unint64_t *))(*v28 + 16))(v28);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

void sub_1ADD34160()
{
  JUMPOUT(0x1ADD340D4);
}

void sub_1ADD34168()
{
  JUMPOUT(0x1ADD340E8);
}

void sub_1ADD34170()
{
  JUMPOUT(0x1ADD340FCLL);
}

void sub_1ADD34178()
{
  JUMPOUT(0x1ADD34110);
}

void sub_1ADD34180()
{
  JUMPOUT(0x1ADD34124);
}

void quasar::RightContext::~RightContext(quasar::RightContext *this)
{
  void **v2;

  std::mutex::~mutex((std::mutex *)((char *)this + 24));
  v2 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void quasar::LeftContext::~LeftContext(quasar::LeftContext *this)
{
  void **v2;

  std::mutex::~mutex((std::mutex *)((char *)this + 72));
  v2 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this, *((_QWORD **)this + 1));
}

uint64_t quasar::RunAsyncParams::setLeftContext(uint64_t a1, uint64_t a2)
{
  quasar::LeftContext::setLeftContextForLM(a1 + 368, a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setLeftContextForDecoder(uint64_t a1, uint64_t a2)
{
  quasar::LeftContext::setLeftContextForDecoder(a1 + 368, a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setHighPriority(uint64_t this, char a2)
{
  *(_BYTE *)(this + 51) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setInputOrigin(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 224), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setRegionId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 248), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setEndpointStartMs(uint64_t this, uint64_t a2)
{
  *(_QWORD *)(this + 40) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEager(uint64_t this, char a2)
{
  *(_BYTE *)(this + 48) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setSkipEagerWrite(uint64_t this, char a2)
{
  *(_BYTE *)(this + 49) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEpExtraDelay(uint64_t this, char a2)
{
  *(_BYTE *)(this + 50) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setUtteranceDetection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 36) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setUtteranceConcatenation(uint64_t this, char a2)
{
  *(_BYTE *)(this + 37) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableEndPointCandidate(uint64_t this, char a2)
{
  *(_BYTE *)(this + 38) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setFarField(uint64_t this, char a2)
{
  *(_BYTE *)(this + 34) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableWhisperDetection(uint64_t this, char a2)
{
  *(_BYTE *)(this + 35) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setRefTranscription(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 176), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setBluetoothDeviceId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 200), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setBufferReadTimeOutMs(uint64_t this, int a2)
{
  *(_DWORD *)(this + 28) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDoServerSideEndPointing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 32) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setEnableNnetEndpointing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 33) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDisableAudioAnalyticsReporting(uint64_t this, char a2)
{
  *(_BYTE *)(this + 53) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setInterUtteranceLeftContext(uint64_t this, char a2)
{
  *(_BYTE *)(this + 54) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setDeviceId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 152), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setLanguage(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 56), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setTaskType(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 80), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setUserId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setSessionId(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 128), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setLmeDataStreams(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 792) = a2;
  return result;
}

uint64_t quasar::RunAsyncParams::setLocation(uint64_t a1, _QWORD *a2)
{
  unint64_t *v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*a2)
  {
    v4 = (unint64_t *)(*a2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(unint64_t **)(a1 + 16);
  if (v6)
  {
    v7 = v6 + 1;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
      (*(void (**)(unint64_t *))(*v6 + 16))(v6);
  }
  *(_QWORD *)(a1 + 16) = *a2;
  return a1;
}

uint64_t quasar::RunAsyncParams::setSamplingRate(uint64_t this, int a2)
{
  *(_DWORD *)(this + 24) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setExtraLmList(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;

  v3 = a1 + 272;
  if ((uint64_t **)v3 != a2)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

uint64_t quasar::RunAsyncParams::setScoreNbestExtraLmList(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;

  v3 = a1 + 296;
  if ((uint64_t **)v3 != a2)
    std::vector<std::shared_ptr<quasar::Decoder>>::__assign_with_size[abi:ne180100]<std::shared_ptr<quasar::Decoder>*,std::shared_ptr<quasar::Decoder>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  return a1;
}

uint64_t quasar::RunAsyncParams::setSpeakerCode(uint64_t a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 320), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setEnableSpeakerCodeTraining(uint64_t this, char a2)
{
  *(_BYTE *)(this + 52) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setScoreNbest(uint64_t this, char a2)
{
  *(_BYTE *)(this + 336) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setMuxIds(uint64_t a1, _QWORD *a2)
{
  uint64_t **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;

  v4 = (uint64_t **)(a1 + 344);
  v5 = a1 + 352;
  std::__tree<std::string>::destroy(a1 + 344, *(char **)(a1 + 352));
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_QWORD *)(a1 + 344) = v5;
  v8 = (_QWORD *)*a2;
  v6 = a2 + 1;
  v7 = v8;
  if (v8 != v6)
  {
    while ((*((char *)v7 + 55) & 0x80000000) == 0)
    {
      if (*((_BYTE *)v7 + 55))
        goto LABEL_4;
LABEL_5:
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
      if (v10 == v6)
        return a1;
    }
    if (!v7[5])
      goto LABEL_5;
LABEL_4:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (const void **)v7 + 4, (uint64_t)(v7 + 4));
    goto LABEL_5;
  }
  return a1;
}

uint64_t quasar::RunAsyncParams::setLeftContextForItn(uint64_t a1, uint64_t a2)
{
  quasar::LeftContext::setLeftContextForItn(a1 + 368, a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setEnableVoiceCommands(uint64_t this, char a2)
{
  *(_BYTE *)(this + 624) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setShouldGenerateVoiceCommandCandidates(uint64_t this, char a2)
{
  *(_BYTE *)(this + 625) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setVoiceCommandActiveSetCompilation(uint64_t a1, uint64_t *a2)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100]((_QWORD *)(a1 + 632), a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setRightContextForItn(uint64_t a1, uint64_t a2)
{
  quasar::RightContext::setRightContextForItn(a1 + 536, a2);
  return a1;
}

std::string *quasar::RunAsyncParams::setAneContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 27, a2);
  return a1;
}

std::string *quasar::RunAsyncParams::setCpuContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 28, a2);
  return a1;
}

std::string *quasar::RunAsyncParams::setGpuContext(std::string *a1, const std::string *a2)
{
  std::string::operator=(a1 + 29, a2);
  return a1;
}

uint64_t quasar::RunAsyncParams::setDisableContextualBiasing(uint64_t this, char a2)
{
  *(_BYTE *)(this + 736) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setIsLegacyVoiceCommandRequest(uint64_t this, char a2)
{
  *(_BYTE *)(this + 738) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::setAtypicalSpeech(uint64_t this, char a2)
{
  *(_BYTE *)(this + 739) = a2;
  return this;
}

uint64_t quasar::RunAsyncParams::getLmeDataStreams(quasar::RunAsyncParams *this)
{
  if (*((_QWORD *)this + 99))
    return *((_QWORD *)this + 99);
  else
    return (uint64_t)this + 744;
}

_QWORD *quasar::SpeechRecognizerBase::SpeechRecognizerBase(_QWORD *this)
{
  *this = off_1E5D37E40;
  return this;
}

const char *quasar::fingerprintDetectionResultString(int a1)
{
  const char *v1;

  v1 = "Unchecked";
  if (a1 == 2)
    v1 = "Detected";
  if (a1 == 1)
    return "Not Detected";
  else
    return v1;
}

void quasar::RunAsyncParams::~RunAsyncParams(quasar::RunAsyncParams *this)
{
  void *v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  void **v6;

  std::__tree<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::__map_value_compare<quasar::LmeDataFactoryBase::LmeType,std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>,std::less<quasar::LmeDataFactoryBase::LmeType>,true>,std::allocator<std::__value_type<quasar::LmeDataFactoryBase::LmeType,std::vector<std::shared_ptr<quasar::LmeContainer>>>>>::destroy((uint64_t)this + 768, *((char **)this + 97));
  v2 = (void *)*((_QWORD *)this + 93);
  if (v2)
  {
    *((_QWORD *)this + 94) = v2;
    operator delete(v2);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 720);
  if (*((char *)this + 719) < 0)
    operator delete(*((void **)this + 87));
  if (*((char *)this + 695) < 0)
    operator delete(*((void **)this + 84));
  if (*((char *)this + 671) < 0)
    operator delete(*((void **)this + 81));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 632);
  std::mutex::~mutex((std::mutex *)((char *)this + 560));
  v6 = (void **)((char *)this + 536);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  std::mutex::~mutex((std::mutex *)((char *)this + 440));
  v6 = (void **)((char *)this + 416);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 392);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy((uint64_t)this + 368, *((_QWORD **)this + 47));
  std::__tree<std::string>::destroy((uint64_t)this + 344, *((char **)this + 44));
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  v6 = (void **)((char *)this + 296);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)((char *)this + 272);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v6);
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  if (*((char *)this + 175) < 0)
    operator delete(*((void **)this + 19));
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  v3 = (unint64_t *)*((_QWORD *)this + 2);
  if (v3)
  {
    v4 = v3 + 1;
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
      (*(void (**)(unint64_t *))(*v3 + 16))(v3);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

BOOL std::__equal_to::operator()[abi:ne180100]<std::pair<std::string,float>,std::pair<std::string,float>>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  BOOL v18;
  BOOL v19;
  _BOOL4 v20;

  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) == 0)
    v7 = a2[23];
  else
    v7 = *((_QWORD *)a2 + 1);
  v8 = a3[23];
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a3 + 1);
  if (v7 == v8)
  {
    if (v9 >= 0)
      v10 = a3;
    else
      v10 = *(unsigned __int8 **)a3;
    if ((v5 & 0x80) != 0)
    {
      v20 = memcmp(*(const void **)a2, v10, v6) == 0;
    }
    else if ((_DWORD)v5)
    {
      v11 = v5 - 1;
      v12 = a2;
      do
      {
        v14 = *v12++;
        v13 = v14;
        v16 = *v10++;
        v15 = v16;
        v18 = v11-- != 0;
        v19 = v13 == v15;
        v20 = v13 == v15;
      }
      while (v19 && v18);
    }
    else
    {
      v20 = 1;
    }
  }
  else
  {
    v20 = 0;
  }
  return *((float *)a2 + 6) == *((float *)a3 + 6) && v20;
}

uint64_t **std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,std::shared_ptr<void>>,std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *> *,long>>(uint64_t **result, __int128 *a2, __int128 *a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  __int128 *v9;
  uint64_t **leaf_high;
  __int128 *v11;
  BOOL v12;
  __int128 *v13;
  __int128 *v14;
  uint64_t **v15;
  uint64_t *v16;
  const void **v17;
  uint64_t v18;

  v5 = result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1])
      v8 = (uint64_t *)v6[1];
    else
      v8 = v6;
    v15 = result;
    v16 = v8;
    v17 = (const void **)v8;
    if (v8)
    {
      v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](v8 + 7, (uint64_t *)v9 + 7);
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)v5, &v18, v17 + 4);
          std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(v5, v18, leaf_high, (uint64_t *)v17);
          v17 = (const void **)v16;
          if (v16)
            v16 = std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::_DetachedTreeCache::__detach_next((uint64_t)v16);
          v11 = (__int128 *)*((_QWORD *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              v11 = *(__int128 **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (__int128 *)*((_QWORD *)v9 + 2);
              v12 = *(_QWORD *)a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v12);
          }
          v8 = (uint64_t *)v17;
          if (v17)
            v12 = a2 == a3;
          else
            v12 = 1;
          v9 = a2;
        }
        while (!v12);
      }
    }
    result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      result = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<void>> const&>(v5, a2 + 2);
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = *(__int128 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (__int128 *)*((_QWORD *)a2 + 2);
          v12 = *(_QWORD *)v14 == (_QWORD)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_1ADD34BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(*(_QWORD *)a1, *(_QWORD **)(a1 + 16));
  v2 = *(_QWORD **)(a1 + 8);
  if (v2)
  {
    v3 = (_QWORD *)v2[2];
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = (_QWORD *)v3[2];
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<std::vector<std::unique_ptr<kaldi::quasar::ComputeEngineBufferItf>>>>>>::destroy(*(_QWORD *)a1, v2);
  }
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<void>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<void>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<void>>>>::__emplace_multi<std::pair<std::string const,std::shared_ptr<void>> const&>(uint64_t **a1, __int128 *a2)
{
  uint64_t **leaf_high;
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7[3];

  std::__tree<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<quasar::ProcessingBlock>>>>::__construct_node<std::pair<std::string const,std::shared_ptr<quasar::ProcessingBlock>> const&>((uint64_t)a1, a2, (uint64_t)v7);
  leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__find_leaf_high((uint64_t)a1, &v6, (const void **)v7[0] + 4);
  std::__tree<std::__value_type<std::string,double>,std::__map_value_compare<std::string,std::__value_type<std::string,double>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,double>>>::__insert_node_at(a1, v6, leaf_high, v7[0]);
  v4 = v7[0];
  v7[0] = 0;
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)v7, 0);
  return v4;
}

void sub_1ADD34CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<void>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable8BitComponentItf>(const void ***this)
{
  const void **i;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  for (i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v3)
      {
        v4 = v3;
        v5 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
        if (v5)
        {
          v6 = (const void *)v5;
          kaldi::nnet1::Component::Delete(v7, (kaldi::nnet1::Component *)1);
          *i = v6;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
}

uint64_t *kaldi::nnet1::Nnet::CheckDimensions(uint64_t *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t **v5;
  unint64_t v6;
  _QWORD *v7;
  kaldi::nnet1::Component *v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  kaldi::nnet1::Component *v14;
  std::string *v15;
  std::string::size_type v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  _QWORD v22[34];

  v2 = *this;
  v1 = this[1];
  if ((unint64_t)(v1 - *this) >= 9)
  {
    v3 = this;
    v4 = 0;
    while (1)
    {
      v5 = (uint64_t **)(v2 + 8 * v4);
      this = *v5;
      if (*((_DWORD *)*v5 + 3) != *((_DWORD *)v5[1] + 2))
        break;
      if (v4)
      {
        this = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*this + 24))(this);
        switch((_DWORD)this)
        {
          case 0x10C:
            goto LABEL_30;
          case 0x10E:
            goto LABEL_28;
          case 0x10F:
            goto LABEL_29;
        }
        v2 = *v3;
        v1 = v3[1];
      }
      v6 = v4 + 2;
      ++v4;
      if (v6 >= (v1 - v2) >> 3)
      {
        if ((unint64_t)(v1 - v2) <= 8)
          return this;
        this = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 - 8) + 24))(*(_QWORD *)(v1 - 8));
        switch((_DWORD)this)
        {
          case 0x10F:
LABEL_29:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The compressed word vec component can only be the first component");
            break;
          case 0x10E:
LABEL_28:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The word multivec component can only be the first component");
            break;
          case 0x10C:
LABEL_30:
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
            std::operator<<[abi:ne180100]<std::char_traits<char>>(v22, "The word vec component can only be the first component");
            break;
          default:
            return this;
        }
LABEL_31:
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v22);
      }
    }
    v19 = v4;
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v22);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)"Dimension mismatch between output/input of components ", 54);
    v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v3 + 8 * v19) + 24))(*(_QWORD *)(*v3 + 8 * v19));
    kaldi::nnet1::Component::TypeToMarker(v8, &v21);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v21;
    else
      v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    else
      size = v21.__r_.__value_.__l.__size_;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, size);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" and ", 5);
    v13 = *(_QWORD *)(*v3 + 8 * v19 + 8);
    v14 = (kaldi::nnet1::Component *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
    kaldi::nnet1::Component::TypeToMarker(v14, &v20);
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &v20;
    else
      v15 = (std::string *)v20.__r_.__value_.__r.__words[0];
    if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
    else
      v16 = v20.__r_.__value_.__l.__size_;
    v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)v15, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
    v18 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" <--> ", 6);
    std::ostream::operator<<();
    std::string::~string(&v20);
    std::string::~string(&v21);
    goto LABEL_31;
  }
  return this;
}

void sub_1ADD34FE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a23);
}

uint64_t *kaldi::nnet1::Nnet::QuantizeComponents<kaldi::nnet1::Quantizable16BitComponentItf>(const void ***this)
{
  const void **i;
  kaldi::nnet1::Quantizable8BitComponentItf *v3;
  kaldi::nnet1::Quantizable8BitComponentItf *v4;
  uint64_t v5;
  const void *v6;
  void *v7;

  for (i = *this; i != this[1]; ++i)
  {
    if (*i)
    {
      if (v3)
      {
        v4 = v3;
        v5 = kaldi::nnet1::Quantizable8BitComponentItf::CopyQuantized(v3);
        if (v5)
        {
          v6 = (const void *)v5;
          kaldi::nnet1::Component::Delete(v7, (kaldi::nnet1::Component *)1);
          *i = v6;
        }
      }
    }
  }
  return kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
}

void kaldi::nnet1::NnetTrainOptions::~NnetTrainOptions(kaldi::nnet1::NnetTrainOptions *this)
{
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::HistoryOptions::~HistoryOptions(kaldi::nnet1::HistoryOptions *this)
{
  JUMPOUT(0x1AF44D190);
}

void kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
  JUMPOUT(0x1AF44D190);
}

void `non-virtual thunk to'kaldi::nnet1::RecurrentNnetTrainOptions::~RecurrentNnetTrainOptions(kaldi::nnet1::RecurrentNnetTrainOptions *this)
{
  JUMPOUT(0x1AF44D190);
}

double kaldi::nnet1::NnetCorrPacker::NnetCorrPacker(kaldi::nnet1::NnetCorrPacker *this)
{
  double result;

  *(_DWORD *)this = 0;
  result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_QWORD *)this + 5) = -1082130432;
  return result;
}

uint64_t kaldi::nnet1::Nnet::GetComponent(kaldi::nnet1::Nnet *this, int a2)
{
  return *(_QWORD *)(*(_QWORD *)this + 8 * a2);
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::Nnet(kaldi::nnet1::Nnet *this, const kaldi::nnet1::Nnet *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  v4 = operator new();
  *(_QWORD *)v4 = &off_1E5D2D150;
  *(_OWORD *)(v4 + 8) = xmmword_1AE13F660;
  *(_DWORD *)(v4 + 24) = -1082130432;
  *(_QWORD *)(v4 + 28) = 0x100000003;
  *(_WORD *)(v4 + 36) = 0;
  *(_BYTE *)(v4 + 38) = 0;
  *((_QWORD *)this + 24) = &unk_1E5D341C8;
  *((_QWORD *)this + 18) = v4;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_QWORD *)this + 28) = &unk_1E5D341C8;
  *((_QWORD *)this + 30) = 0;
  *((_QWORD *)this + 31) = 0;
  *((_QWORD *)this + 29) = 0;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((_OWORD *)this + 17) = 0u;
  *((_OWORD *)this + 18) = 0u;
  *((_DWORD *)this + 76) = 0;
  *((_QWORD *)this + 43) = -1082130432;
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  v5 = *(_QWORD *)a2;
  if ((int)((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3) >= 1)
  {
    v6 = 0;
    do
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v6) + 16))(*(_QWORD *)(v5 + 8 * v6));
      v8 = v7;
      v10 = (uint64_t *)*((_QWORD *)this + 1);
      v9 = *((_QWORD *)this + 2);
      if ((unint64_t)v10 >= v9)
      {
        v12 = ((uint64_t)v10 - *(_QWORD *)this) >> 3;
        if ((unint64_t)(v12 + 1) >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v13 = v9 - *(_QWORD *)this;
        v14 = v13 >> 2;
        if (v13 >> 2 <= (unint64_t)(v12 + 1))
          v14 = v12 + 1;
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v12];
        *v17 = v8;
        v11 = v17 + 1;
        v19 = *(char **)this;
        v18 = (char *)*((_QWORD *)this + 1);
        if (v18 != *(char **)this)
        {
          do
          {
            v20 = *((_QWORD *)v18 - 1);
            v18 -= 8;
            *--v17 = v20;
          }
          while (v18 != v19);
          v18 = *(char **)this;
        }
        *(_QWORD *)this = v17;
        *((_QWORD *)this + 1) = v11;
        *((_QWORD *)this + 2) = &v16[8 * v15];
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v10 = v7;
        v11 = v10 + 1;
      }
      *((_QWORD *)this + 1) = v11;
      ++v6;
      v5 = *(_QWORD *)a2;
    }
    while (v6 < (int)((*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3));
  }
  kaldi::nnet1::Nnet::SetTrainOptions(this, *((const kaldi::nnet1::NnetTrainOptions **)a2 + 18), 1);
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return this;
}

void sub_1ADD353A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  uint64_t v12;
  void *v14;
  void *v15;
  void *v16;

  a12 = (void **)(v12 + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = a11;
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)(v12 + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&a12);
  v14 = *(void **)(v12 + 48);
  if (v14)
  {
    *(_QWORD *)(v12 + 56) = v14;
    operator delete(v14);
  }
  v15 = *(void **)(v12 + 24);
  if (v15)
  {
    *(_QWORD *)(v12 + 32) = v15;
    operator delete(v15);
  }
  v16 = *(void **)v12;
  if (*(_QWORD *)v12)
  {
    *(_QWORD *)(v12 + 8) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetTrainOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::NnetTrainOptions *lpsrc, int a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _QWORD *v12;
  void *v13;
  __int128 v14;
  _QWORD *v15;
  _QWORD v16[35];

  v6 = *(_QWORD *)this;
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v7 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v6 + 8 * v7) + 32))(*(_QWORD *)(v6 + 8 * v7)))
        (*(void (**)(_QWORD, const kaldi::nnet1::NnetTrainOptions *))(**(_QWORD **)(*(_QWORD *)this + 8 * v7)
                                                                               + 264))(*(_QWORD *)(*(_QWORD *)this + 8 * v7), lpsrc);
      ++v7;
      v6 = *(_QWORD *)this;
    }
    while (v7 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  v9 = *((_QWORD *)this + 18);
  if (!v8)
  {
    v14 = *(_OWORD *)((char *)lpsrc + 8);
    *(_OWORD *)(v9 + 23) = *(_OWORD *)((char *)lpsrc + 23);
    *(_OWORD *)(v9 + 8) = v14;
    if (!a3 || kaldi::g_kaldi_verbose_level < 2)
      goto LABEL_16;
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 2);
    v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"a regular trainer option. ", 26);
    kaldi::nnet1::operator<<(v15, *((_QWORD *)this + 18));
    goto LABEL_15;
  }
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = operator new();
  v11 = *(_OWORD *)(v8 + 23);
  *(_OWORD *)(v10 + 8) = *(_OWORD *)(v8 + 8);
  *(_OWORD *)(v10 + 23) = v11;
  *(_QWORD *)v10 = &off_1E5D305B8;
  *(_QWORD *)(v10 + 40) = &unk_1E5D305D8;
  *(_QWORD *)(v10 + 48) = *((_QWORD *)v8 + 6);
  *((_QWORD *)this + 18) = v10;
  if (a3 && kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16, 2);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"a recurrent trainer option. ", 28);
    kaldi::nnet1::operator<<(v12, (uint64_t)v13);
LABEL_15:
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v16);
  }
LABEL_16:
  if (a3)
  {
    kaldi::nnet1::Nnet::ResetInternalBuffers(this);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
}

void sub_1ADD35674(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::ResetBuffersAndStates(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2)
{
  kaldi::Input *v4;
  uint64_t *v5;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD v12[34];
  _BYTE v13[15];
  unsigned __int8 v14;

  v14 = 0;
  v4 = (kaldi::Input *)kaldi::Input::Input(v13, a2, &v14);
  v5 = (uint64_t *)kaldi::Input::Stream(v4);
  kaldi::nnet1::Nnet::Read((uint64_t **)a1, v5, v14, 0);
  kaldi::Input::Close((kaldi::Input *)v13);
  if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"The network '", 13);
    v8 = *(char *)(a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *(_QWORD *)a2;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a2 + 23);
    else
      v10 = *(_QWORD *)(a2 + 8);
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  kaldi::Input::~Input((kaldi::Input *)v13);
}

void sub_1ADD35790(_Unwind_Exception *a1)
{
  uint64_t v1;

  kaldi::Input::~Input((kaldi::Input *)(v1 - 48));
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::SetGradientNormalization(_QWORD *result, uint64_t a2, int a3, int a4, float a5)
{
  _QWORD *v7;
  const void **v8;
  char *v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;

  v7 = result;
  if (a3)
  {
    v8 = (const void **)result[3];
    if (v8 != (const void **)result[4])
    {
      do
      {
        v9 = (char *)*v8;
        if (*v8
        {
          result = (_QWORD *)kaldi::nnet1::ParallelComponent::SetGradientNormalization((uint64_t)v10, a2, 1, a5);
        }
        else
        {
          result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t, float))(*(_QWORD *)&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)]
                                                                               + 240))(&v9[*(_QWORD *)(*(_QWORD *)v9 - 24)], a2, a5);
        }
        ++v8;
      }
      while (v8 != (const void **)v7[4]);
    }
  }
  else
  {
    if (a4)
      v11 = -2;
    else
      v11 = -1;
    v12 = v11 + ((result[1] - *result) >> 3);
    if (v12 >= 0)
    {
      v13 = 0;
      v14 = (v12 + 1);
      do
      {
        result = *(_QWORD **)(*v7 + 8 * v13);
        if (result)
        {
          if (result)
            result = (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t, float))(*result + 240))(result, a2, a5);
        }
        ++v13;
      }
      while (v14 != v13);
    }
  }
  return result;
}

void kaldi::nnet1::Nnet::SetFreezeComponents(_QWORD *a1, int **a2)
{
  _QWORD *v4;
  unint64_t v5;
  int *v6;
  int *v7;
  int v8;
  uint64_t v9;
  int v10;

  v4 = a1 + 21;
  std::vector<BOOL>::resize((uint64_t)(a1 + 21), (uint64_t)(a1[1] - *a1) >> 3, 0);
  v5 = a1[22];
  if (v5)
  {
    v9 = a1[21];
    v10 = 0;
    std::__fill_n[abi:ne180100]<false,std::vector<BOOL>>((uint64_t)&v9, v5);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Freezing specified components (1-based):", 40);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v9);
  }
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = kaldi::g_kaldi_verbose_level;
    do
    {
      *(_QWORD *)(*v4 + (((unint64_t)(*v6 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << (*v6
                                                                                                - 1);
      if ((v8 & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
        std::ostream::operator<<();
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v9);
        v8 = kaldi::g_kaldi_verbose_level;
      }
      ++v6;
    }
    while (v6 != v7);
  }
}

void sub_1ADD35A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&a9);
  _Unwind_Resume(a1);
}

kaldi::nnet1::Nnet *kaldi::nnet1::Nnet::operator=(kaldi::nnet1::Nnet *this, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  if (a2 != (uint64_t *)this)
  {
    kaldi::nnet1::Nnet::Destroy(this);
    v4 = *a2;
    if ((int)((unint64_t)(a2[1] - *a2) >> 3) < 1)
    {
      *((_QWORD *)this + 1) = *(_QWORD *)this;
    }
    else
    {
      v5 = 0;
      do
      {
        v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v4 + 8 * v5) + 16))(*(_QWORD *)(v4 + 8 * v5));
        v7 = v6;
        v9 = (uint64_t *)*((_QWORD *)this + 1);
        v8 = *((_QWORD *)this + 2);
        if ((unint64_t)v9 >= v8)
        {
          v11 = ((uint64_t)v9 - *(_QWORD *)this) >> 3;
          if ((unint64_t)(v11 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v12 = v8 - *(_QWORD *)this;
          v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1))
            v13 = v11 + 1;
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v13;
          if (v14)
            v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v14);
          else
            v15 = 0;
          v16 = (uint64_t *)&v15[8 * v11];
          *v16 = v7;
          v10 = v16 + 1;
          v18 = *(char **)this;
          v17 = (char *)*((_QWORD *)this + 1);
          if (v17 != *(char **)this)
          {
            do
            {
              v19 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *--v16 = v19;
            }
            while (v17 != v18);
            v17 = *(char **)this;
          }
          *(_QWORD *)this = v16;
          *((_QWORD *)this + 1) = v10;
          *((_QWORD *)this + 2) = &v15[8 * v14];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v9 = v6;
          v10 = v9 + 1;
        }
        *((_QWORD *)this + 1) = v10;
        ++v5;
        v4 = *a2;
      }
      while (v5 < (int)((unint64_t)(a2[1] - *a2) >> 3));
    }
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)a2[18], 1);
    kaldi::nnet1::Nnet::ResetInternalBuffers(this);
    kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::Destroy(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;
  uint64_t v3;
  kaldi::CuWorkspace **v4;
  kaldi::CuWorkspace **v5;
  uint64_t result;

  v2 = *(_QWORD *)this;
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v3 = 0;
    do
    {
      kaldi::nnet1::Component::Delete(*(void **)(v2 + 8 * v3++), (kaldi::nnet1::Component *)1);
      v2 = *(_QWORD *)this;
    }
    while (v3 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  v4 = (kaldi::CuWorkspace **)*((_QWORD *)this + 44);
  v5 = (kaldi::CuWorkspace **)*((_QWORD *)this + 45);
  while (v4 != v5)
  {
    if (*v4)
    {
      kaldi::CuWorkspace::~CuWorkspace(*v4);
      MEMORY[0x1AF44D190]();
    }
    ++v4;
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, 0);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, 0);
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 352, 0);
  result = *((_QWORD *)this + 20);
  if (result)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    *((_QWORD *)this + 20) = 0;
  }
  return result;
}

void kaldi::nnet1::Nnet::~Nnet(kaldi::nnet1::Nnet *this)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void **v10;

  kaldi::nnet1::Nnet::Destroy(this);
  v2 = *((_QWORD *)this + 18);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = (void *)*((_QWORD *)this + 44);
  if (v3)
  {
    *((_QWORD *)this + 45) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 40);
  if (v4)
    free(v4);
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  *((_QWORD *)this + 41) = 0;
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v10 = (void **)((char *)this + 256);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  *((_QWORD *)this + 28) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 224);
  *((_QWORD *)this + 24) = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)this + 192);
  v6 = (void *)*((_QWORD *)this + 21);
  if (v6)
    operator delete(v6);
  v10 = (void **)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 96);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v10 = (void **)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::__destroy_vector::operator()[abi:ne180100](&v10);
  v7 = (void *)*((_QWORD *)this + 6);
  if (v7)
  {
    *((_QWORD *)this + 7) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 3);
  if (v8)
  {
    *((_QWORD *)this + 4) = v8;
    operator delete(v8);
  }
  v9 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v9;
    operator delete(v9);
  }
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;

  v4 = *(uint64_t **)(result + 48);
  if (v4 != *(uint64_t **)(result + 56))
  {
    v8 = result;
    do
    {
      v9 = *v4++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, a3, a4);
    }
    while (v4 != *(uint64_t **)(v8 + 56));
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::ResetHistoryStateIfExists(uint64_t this)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(this + 48);
  if (v1 != *(uint64_t **)(this + 56))
  {
    v2 = this;
    do
    {
      v3 = *v1++;
      this = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 32))(v3);
    }
    while (v1 != *(uint64_t **)(v2 + 56));
  }
  return this;
}

uint64_t kaldi::nnet1::Nnet::HistoryStateSize(kaldi::nnet1::Nnet *this)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v1 = (uint64_t *)*((_QWORD *)this + 6);
  if (v1 == *((uint64_t **)this + 7))
    return 0;
  LODWORD(v3) = 0;
  do
  {
    v4 = *v1++;
    v3 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4) + v3;
  }
  while (v1 != *((uint64_t **)this + 7));
  return v3;
}

uint64_t kaldi::nnet1::Nnet::GetHistoryState(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD v16[5];
  void *v17;
  __int128 v18;
  __int128 v19;
  char v20;

  v4 = *(char **)(result + 48);
  v3 = *(char **)(result + 56);
  if (v4 != v3)
  {
    if (v3 - v4 == 8)
    {
      return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)v4 + 40))(*(_QWORD *)v4, a2, a3);
    }
    else
    {
      v7 = result;
      LODWORD(v8) = 0;
      do
      {
        v10 = *(_QWORD *)v4;
        v4 += 8;
        v8 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) + v8;
      }
      while (v4 != *(char **)(v7 + 56));
      kaldi::CuMatrix<float>::Resize((int32x2_t *)a2, v9, v8, 1, 0);
      v19 = 0u;
      v18 = 0u;
      v17 = &unk_1E5D34170;
      v20 = 0;
      v11 = *(_QWORD **)(v7 + 48);
      if (v11 != *(_QWORD **)(v7 + 56))
      {
        v12 = 0;
        do
        {
          (*(void (**)(_QWORD, void **, uint64_t))(*(_QWORD *)*v11 + 40))(*v11, &v17, a3);
          v13 = *(_QWORD *)(a2 + 8) + 4 * v12;
          v14 = *(_DWORD *)(a2 + 28) - v12;
          v15 = *(_QWORD *)(a2 + 32);
          LODWORD(v16[2]) = DWORD2(v18);
          *(_QWORD *)((char *)&v16[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v16[3]) = v14;
          v16[4] = v15;
          v16[0] = &unk_1E5D29D40;
          v16[1] = v13;
          kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)v16, (uint64_t)&v17, 111);
          v16[0] = &unk_1E5D29D40;
          memset(&v16[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v16);
          v12 += DWORD2(v18);
          ++v11;
        }
        while (v11 != *(_QWORD **)(v7 + 56));
      }
      return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v17);
    }
  }
  return result;
}

void sub_1ADD36068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _OWORD *v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = v3 + 16;
  *v2 = 0u;
  v2[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)va);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::GetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;

  v5 = *(uint64_t **)(a1 + 48);
  v4 = *(uint64_t **)(a1 + 56);
  v6 = v4 - v5;
  if (v6)
  {
    if (v6 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v5 + 48))(*v5, a2, a3, a4);
    }
    else
    {
      if (v5 == v4)
      {
        v11 = 0;
      }
      else
      {
        LODWORD(v11) = 0;
        do
        {
          v12 = *v5++;
          v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12) + v11;
        }
        while (v5 != *(uint64_t **)(a1 + 56));
      }
      kaldi::CuVector<float>::Resize(a2, v11, 1);
      v18 = 0;
      v19 = 0;
      v17[0] = &unk_1E5D341C8;
      v17[1] = 0;
      v13 = *(_QWORD **)(a1 + 48);
      if (v13 != *(_QWORD **)(a1 + 56))
      {
        v14 = 0;
        do
        {
          (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)*v13 + 48))(*v13, v17, a3, a4);
          v15 = *(_QWORD *)(a2 + 8) + 4 * v14;
          v16[0] = &unk_1E5D29D70;
          v16[1] = v15;
          v16[3] = *(_QWORD *)(a2 + 24);
          v16[2] = v18;
          kaldi::CuVectorBase<float>::CopyFromVec(v16, (uint64_t)v17);
          v14 += v18;
          ++v13;
        }
        while (v13 != *(_QWORD **)(a1 + 56));
      }
      v17[0] = &unk_1E5D341C8;
      kaldi::CuVector<float>::Destroy((uint64_t)v17);
    }
  }
}

void sub_1ADD36210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::SetHistoryState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v19[34];

  v4 = *(uint64_t **)(a1 + 48);
  v3 = *(uint64_t **)(a1 + 56);
  v5 = v3 - v4;
  if (v5)
  {
    if (v5 == 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v4 + 56))(*v4, a2, a3);
    }
    else
    {
      if (v4 == v3)
      {
        v9 = 0;
        v4 = *(uint64_t **)(a1 + 56);
      }
      else
      {
        v9 = 0;
        do
        {
          v10 = *v4++;
          v9 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        }
        while (v4 != *(uint64_t **)(a1 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v9)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"the network has history size ", 29);
        v18 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
      }
      v11 = *(uint64_t **)(a1 + 48);
      if (v11 != v4)
      {
        v12 = 0;
        do
        {
          v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v11 + 16))(*v11);
          v14 = *v11;
          v15 = *(_QWORD *)(a2 + 8) + 4 * v12;
          v16 = *(_DWORD *)(a2 + 28) - v12;
          v17 = *(_QWORD *)(a2 + 32);
          LODWORD(v19[2]) = v13;
          *(_QWORD *)((char *)&v19[2] + 4) = *(_QWORD *)(a2 + 20);
          HIDWORD(v19[3]) = v16;
          v19[4] = v17;
          v19[0] = &unk_1E5D29D40;
          v19[1] = v15;
          (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v14 + 56))(v14, v19, a3);
          v19[0] = &unk_1E5D29D40;
          v12 += v13;
          memset(&v19[1], 0, 32);
          quasar::Bitmap::~Bitmap((quasar::Bitmap *)v19);
          ++v11;
        }
        while (v11 != *(uint64_t **)(a1 + 56));
      }
    }
  }
}

void sub_1ADD36400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  _OWORD *v9;
  uint64_t v10;

  a9 = v10 + 16;
  *v9 = 0u;
  v9[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::SetHistoryState(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v20[34];

  v5 = *(uint64_t **)(result + 48);
  v4 = *(uint64_t **)(result + 56);
  v6 = v4 - v5;
  if (v6)
  {
    if (v6 == 1)
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v5 + 64))(*v5, a2, a3, a4);
    }
    else
    {
      v10 = result;
      if (v5 == v4)
      {
        v11 = 0;
        v5 = *(uint64_t **)(result + 56);
      }
      else
      {
        v11 = 0;
        do
        {
          v12 = *v5++;
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 16))(v12);
          v11 += result;
        }
        while (v5 != *(uint64_t **)(v10 + 56));
      }
      if (*(_DWORD *)(a2 + 16) != v11)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v20);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"the network has history size ", 29);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)" , but the input history data has dimension ", 44);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v20);
      }
      v13 = *(uint64_t **)(v10 + 48);
      if (v13 != v5)
      {
        v14 = 0;
        do
        {
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*v13 + 16))(*v13);
          v16 = *v13++;
          v17 = v15 + v14;
          v18 = *(_QWORD *)(a2 + 8) + 4 * v14;
          v20[0] = &unk_1E5D29D70;
          v20[1] = v18;
          v20[3] = *(_QWORD *)(a2 + 24);
          v20[2] = v15;
          result = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v16, v20, a3, a4);
          v14 = v17;
        }
        while (v13 != *(uint64_t **)(v10 + 56));
      }
    }
  }
  return result;
}

uint64_t kaldi::nnet1::Nnet::SetInternalBoundary(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *(uint64_t **)(result + 24);
  if (v3 != *(uint64_t **)(result + 32))
  {
    v6 = result;
    do
    {
      v7 = *v3++;
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 96))(v7, a2, a3);
    }
    while (v3 != *(uint64_t **)(v6 + 32));
  }
  return result;
}

uint64_t kaldi::nnet1::ParallelComponent::SetGradientNormalization(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4;
  uint64_t v8;

  v4 = *(_QWORD *)(result + 184);
  if (v4 != *(_QWORD *)(result + 192))
  {
    v8 = result;
    do
    {
      result = kaldi::nnet1::Nnet::SetGradientNormalization(v4, a2, a3, 0, a4);
      v4 += 376;
    }
    while (v4 != *(_QWORD *)(v8 + 192));
  }
  return result;
}

int32x2_t *kaldi::nnet1::Nnet::Backpropagate(int32x2_t *result, int32x2_t *a2, int32x2_t *a3, uint64_t a4)
{
  int32x2_t v5;
  _DWORD **v6;
  unint64_t v7;
  unint64_t v8;
  const void ***v10;
  int32x2_t *v11;
  int32x2_t v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  int32x2_t *v17;
  int32x2_t *v18;
  int32x2_t *v19;
  int32x2_t *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x2_t *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t (*v30)(void);

  v6 = (_DWORD **)*result;
  v5 = result[1];
  v7 = *(_QWORD *)&v5 - *(_QWORD *)result;
  v8 = v7 >> 3;
  if ((v7 >> 3))
  {
    v10 = (const void ***)result;
    if (a3)
      v11 = a3;
    else
      v11 = a2;
    v12 = v11[4];
    v13 = a4;
    v14 = 24 * a4;
    v15 = *(int32x2_t **)(*(_QWORD *)&result[9] + v14 + 8);
    v16 = *(_QWORD *)(*(_QWORD *)&result[9] + v14);
    if ((int32x2_t *)v16 != v15)
    {
      v17 = *(int32x2_t **)(*(_QWORD *)&result[9] + 24 * a4);
      do
      {
        v17[4] = v12;
        v17 += 6;
      }
      while (v17 != v15);
    }
    v18 = *(int32x2_t **)(*(_QWORD *)&result[15] + 24 * a4 + 8);
    v19 = *(int32x2_t **)(*(_QWORD *)&result[15] + 24 * a4);
    if (v19 != v18)
    {
      v20 = *(int32x2_t **)(*(_QWORD *)&result[15] + 24 * a4);
      do
      {
        v20[4] = v12;
        v20 += 6;
      }
      while (v20 != v18);
    }
    if ((_DWORD)v8 == 1)
    {
      kaldi::nnet1::Component::Backpropagate(*v6, v16, v16 + 48, (uint64_t)a2, a3, a4);
      result = (int32x2_t *)(*(uint64_t (**)(const void *))(*(_QWORD *)**v10 + 32))(**v10);
      if (!(_DWORD)result)
        return result;
      goto LABEL_24;
    }
    v21 = (v7 << 29) - 0x100000000;
    kaldi::nnet1::Component::Backpropagate(*(_DWORD **)(*(_QWORD *)&v5 - 8), v16 + 48 * SHIDWORD(v21), v16 + 48 * (int)v8, (uint64_t)a2, &v19[6 * (int)(((v7 << 29) - 0x200000000) >> 32)], a4);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)((char *)*v10 + (v21 >> 29)) + 32))(*(const void **)((char *)*v10 + (v21 >> 29))))
    {
      (*(void (**)(void *, uint64_t, int32x2_t *, int32x2_t, uint64_t))(*(_QWORD *)v22 + 232))(v22, (uint64_t)v10[9][3 * v13] + 48 * SHIDWORD(v21), a2, v12, a4);
    }
    v23 = (v8 - 2);
    if ((int)v23 >= 1)
    {
      v24 = 48 * (v8 - 2);
      do
      {
        v25 = (uint64_t)v10[9][3 * v13] + v24;
        v26 = (int32x2_t *)v10[15][3 * v13];
        v27 = v23 - 1;
        kaldi::nnet1::Component::Backpropagate((*v10)[v23], v25, v25 + 48, (uint64_t)&v26[(unint64_t)v24 / 8], &v26[6 * (v23 - 1)], a4);
        if ((*(unsigned int (**)(const void *))(*(_QWORD *)(*v10)[v23] + 32))((*v10)[v23]))
        {
          (*(void (**)(void *, char *, char *, int32x2_t, uint64_t))(*(_QWORD *)v28 + 232))(v28, (char *)v10[9][3 * v13] + v24, (char *)v10[15][3 * v13] + v24, v12, a4);
        }
        v24 -= 48;
        --v23;
      }
      while ((unint64_t)(v27 + 1) > 1);
    }
    v29 = (uint64_t)v10[9][3 * v13];
    kaldi::nnet1::Component::Backpropagate(**v10, v29, v29 + 48, (uint64_t)v10[15][3 * v13], a3, a4);
    result = (int32x2_t *)(*(uint64_t (**)(const void *))(*(_QWORD *)**v10 + 32))(**v10);
    if ((_DWORD)result)
    {
LABEL_24:
      return (int32x2_t *)v30();
    }
  }
  else if (a3)
  {
    return kaldi::CuMatrix<float>::operator=(a3, a2);
  }
  return result;
}

void kaldi::nnet1::Nnet::Update(const void ***this, void *a2, uint64_t a3)
{
  const void **v3;
  const void **v4;
  unint64_t v8;
  _QWORD *v9;
  void *v10;
  _QWORD v11[36];

  v4 = *this;
  v3 = this[1];
  if (*this != v3)
  {
    v8 = 0;
    do
    {
      if (this[22] == (const void **)(v3 - *this)
        && ((*(unint64_t *)((char *)this[21] + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
      {
        if (kaldi::g_kaldi_verbose_level >= 2)
        {
          kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11, 2);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"freezing component ", 19);
          v9 = (_QWORD *)std::ostream::operator<<();
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" (1-based) in this Update", 25);
          kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v11);
        }
      }
      else if ((*(unsigned int (**)(const void *))(*(_QWORD *)*v4 + 32))(*v4))
      {
        (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)v10 + 256))(v10, a2, a3);
      }
      ++v4;
      ++v8;
      v3 = this[1];
    }
    while (v4 != v3);
  }
}

void sub_1ADD36B80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Feedforward(uint64_t *a1, uint64_t a2, int32x2_t *a3, int a4, int a5)
{
  unint64_t v7;
  int v8;
  int v9;
  BOOL v12;
  int32x2_t v13;
  int32x2_t *v14;
  _BOOL8 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  _DWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD v28[34];
  void **v29;

  v7 = (unint64_t)(a1[1] - *a1) >> 3;
  if (a4 == -1)
    v8 = (unint64_t)(a1[1] - *a1) >> 3;
  else
    v8 = a4;
  v9 = v8 + a5;
  if (v8 + a5 > (int)v7)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v28);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)"Components to propagate (startCompIdx=", 38);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)", num_comps=", 12);
    v25 = (_QWORD *)std::ostream::operator<<();
    v26 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)") must not be greater than ", 27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v26, (uint64_t)"#components in the network (", 28);
    v27 = (_QWORD *)std::ostream::operator<<();
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, ").");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v28);
  }
  if (v8)
    v12 = (_DWORD)v7 == 0;
  else
    v12 = 1;
  if (v12)
  {
    kaldi::CuMatrix<float>::Resize(a3, *(unsigned int *)(a2 + 20), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)a3, a2, 111);
  }
  else if (v8 == 1)
  {
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * a5), a2, a3, 0);
  }
  else
  {
    std::vector<kaldi::CuMatrix<float>>::vector(v28, 2uLL);
    v13 = a3[4];
    v14 = (int32x2_t *)v28[0];
    *(int32x2_t *)(v28[0] + 32) = v13;
    v14[10] = v13;
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * a5), a2, v14, 0);
    v15 = 0;
    v16 = a5;
    v17 = v9 - 2;
    if (a5 > v9 - 2)
      v17 = a5;
    v18 = v17;
    for (i = ((uint64_t)a5 << 32) + 0x100000000; ; i += 0x100000000)
    {
      v20 = *a1;
      v21 = v28[0] + 48 * v15;
      if (v18 == v16)
        break;
      v22 = ~v15;
      v15 = !v15;
      v23 = *(_DWORD **)(v20 + 8 * v16++ + 8);
      kaldi::nnet1::Component::Propagate(v23, v21, (int32x2_t *)(v28[0] + 48 * v22), 0);
    }
    kaldi::nnet1::Component::Propagate(*(_DWORD **)(v20 + (i >> 29)), v21, a3, 0);
    v29 = (void **)v28;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v29);
  }
}

_QWORD *kaldi::nnet1::Nnet::Feedforward(_QWORD *a1, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v5;
  _DWORD **v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD v19[34];

  v5 = a2;
  v7 = (_DWORD **)*a1;
  v8 = (a1[1] - *a1) >> 3;
  v9 = v8;
  if (a4 != -1)
  {
    if ((int)v8 < a4)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"Components to propagate to (", 28);
      v16 = (_QWORD *)std::ostream::operator<<();
      v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)") must not be greater than ", 27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"#components in the network (", 28);
      v18 = (_QWORD *)std::ostream::operator<<();
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v18, ").");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v19);
    }
    v9 = a4;
  }
  if (v9)
    v10 = (_DWORD)v8 == 0;
  else
    v10 = 1;
  if (v10)
  {
    kaldi::CuVector<float>::Resize((uint64_t)a3, *(unsigned int *)(a2 + 16), 1);
    return kaldi::CuVectorBase<float>::CopyFromVec(a3, v5);
  }
  else
  {
    v12 = (v9 - 1);
    if (v9 == 1)
    {
      v13 = *v7;
    }
    else
    {
      kaldi::nnet1::Component::Propagate(*v7, a2, a1[12]);
      if (v9 >= 3)
      {
        v14 = 1;
        do
        {
          kaldi::nnet1::Component::Propagate(*(_DWORD **)(*a1 + 8 * v14), a1[12] + 32 * !(v14 & 1), a1[12] + 32 * (v14 & 1));
          ++v14;
        }
        while (v12 != v14);
      }
      else
      {
        LODWORD(v12) = 1;
      }
      v13 = *(_DWORD **)(*a1 + 8 * v12);
      v15 = (v12 - 1) & 1;
      if ((int)v12 < 1)
        v15 = -v15;
      a2 = a1[12] + 32 * v15;
    }
    return (_QWORD *)kaldi::nnet1::Component::Propagate(v13, a2, (uint64_t)a3);
  }
}

uint64_t kaldi::nnet1::Component::Propagate(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v7;
  kaldi::nnet1::Component *v8;
  std::string *v9;
  std::string::size_type size;
  _QWORD *v11;
  _QWORD *v12;
  std::string v13;
  _QWORD v14[34];

  if (a1[2] != *(_DWORD *)(a2 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"Non-matching dims! ", 19);
    v8 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 24))(a1);
    kaldi::nnet1::Component::TypeToMarker(v8, &v13);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v11 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v9, size);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" input-dim : ", 13);
    v12 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" data : ", 8);
    std::ostream::operator<<();
    std::string::~string(&v13);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v14);
  }
  kaldi::CuVector<float>::Resize(a3, a1[3], 0);
  return (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, a3);
}

uint64_t kaldi::nnet1::Nnet::OutputDim(kaldi::nnet1::Nnet *this)
{
  return *(unsigned int *)(*(_QWORD *)(*((_QWORD *)this + 1) - 8) + 12);
}

uint64_t kaldi::nnet1::Nnet::InputDim(kaldi::nnet1::Nnet *this)
{
  return *(unsigned int *)(**(_QWORD **)this + 8);
}

_QWORD *kaldi::nnet1::Nnet::GetHistoricalComponents@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(a2, *((const void **)this + 6), *((_QWORD *)this + 7), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 3);
}

void kaldi::nnet1::Nnet::AppendComponent(kaldi::nnet1::Nnet *this, kaldi::nnet1::Component *a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;

  v4 = (_QWORD *)*((_QWORD *)this + 1);
  if (*((_QWORD *)this + 22) == ((uint64_t)v4 - *(_QWORD *)this) >> 3)
  {
    v17 = 0;
    std::vector<BOOL>::push_back((uint64_t)this + 168, &v17);
    v4 = (_QWORD *)*((_QWORD *)this + 1);
  }
  v5 = *((_QWORD *)this + 2);
  if ((unint64_t)v4 >= v5)
  {
    v7 = ((uint64_t)v4 - *(_QWORD *)this) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v8 = v5 - *(_QWORD *)this;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)this + 16, v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    *(_QWORD *)v12 = a2;
    v6 = v12 + 8;
    v15 = *(char **)this;
    v14 = (char *)*((_QWORD *)this + 1);
    if (v14 != *(char **)this)
    {
      do
      {
        v16 = *((_QWORD *)v14 - 1);
        v14 -= 8;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v14 = *(char **)this;
    }
    *(_QWORD *)this = v12;
    *((_QWORD *)this + 1) = v6;
    *((_QWORD *)this + 2) = v13;
    if (v14)
      operator delete(v14);
  }
  else
  {
    *v4 = a2;
    v6 = v4 + 1;
  }
  *((_QWORD *)this + 1) = v6;
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

void kaldi::nnet1::Nnet::RemoveComponent(kaldi::nnet1::Nnet *this, int a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  void **v19;
  void *v20;
  int64_t v21;
  _BYTE v22[16];
  uint64_t v23;
  int v24;

  v5 = *(_QWORD *)this;
  v4 = (void **)*((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 22);
  if (v6 == ((uint64_t)v4 - *(_QWORD *)this) >> 3)
  {
    v7 = *((_QWORD *)this + 21);
    v8 = a2 >> 6;
    if (a2 < 0)
      v8 = -(uint64_t)((63 - a2) >> 6);
    v9 = v7 + 8 * v8;
    v10 = a2 & 0x3F;
    v11 = v10 | (v8 << 6);
    v12 = v11 - 63;
    if (v11 < 63)
      v12 = v10 | (v8 << 6);
    v13 = v12 >> 6;
    v14 = v8 & 0x3FFFFFFFFFFFFFFLL;
    if (v11 < 0)
      v14 = v13;
    v15 = (unint64_t *)(v9 + (((unint64_t)(v10 + 1) >> 3) & 8));
    v16 = (v10 + 1) & 0x3F;
    v17 = v7 + 8 * (v6 >> 6);
    v18 = v6 & 0x3F;
    v23 = v7 + 8 * v14;
    v24 = v10;
    if ((_DWORD)v10 == v16)
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v23, (uint64_t)v22);
    else
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v23, (uint64_t)v22);
    --*((_QWORD *)this + 22);
    v5 = *(_QWORD *)this;
    v4 = (void **)*((_QWORD *)this + 1);
  }
  v19 = (void **)(v5 + 8 * a2);
  v20 = *v19;
  v21 = (char *)v4 - (char *)(v19 + 1);
  if (v4 != v19 + 1)
    memmove(v19, v19 + 1, (char *)v4 - (char *)(v19 + 1));
  *((_QWORD *)this + 1) = (char *)v19 + v21;
  kaldi::nnet1::Component::Delete(v20, (kaldi::nnet1::Component *)1);
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
}

uint64_t kaldi::nnet1::Nnet::ReleaseComponent(kaldi::nnet1::Nnet *this, int a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  _BYTE v23[16];
  uint64_t v24;
  int v25;

  v5 = *(_QWORD *)this;
  v4 = (char *)*((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 22);
  if (v6 == (uint64_t)&v4[-*(_QWORD *)this] >> 3)
  {
    v7 = *((_QWORD *)this + 21);
    v8 = a2 >> 6;
    if (a2 < 0)
      v8 = -(uint64_t)((63 - a2) >> 6);
    v9 = v7 + 8 * v8;
    v10 = a2 & 0x3F;
    v11 = v10 | (v8 << 6);
    v12 = v11 - 63;
    if (v11 < 63)
      v12 = v10 | (v8 << 6);
    v13 = v12 >> 6;
    v14 = v8 & 0x3FFFFFFFFFFFFFFLL;
    if (v11 < 0)
      v14 = v13;
    v15 = (unint64_t *)(v9 + (((unint64_t)(v10 + 1) >> 3) & 8));
    v16 = (v10 + 1) & 0x3F;
    v17 = v7 + 8 * (v6 >> 6);
    v18 = v6 & 0x3F;
    v24 = v7 + 8 * v14;
    v25 = v10;
    if ((_DWORD)v10 == v16)
      std::__copy_aligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v24, (uint64_t)v23);
    else
      std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>(v15, v16, v17, v18, (uint64_t)&v24, (uint64_t)v23);
    --*((_QWORD *)this + 22);
    v5 = *(_QWORD *)this;
    v4 = (char *)*((_QWORD *)this + 1);
  }
  v19 = (char *)(v5 + 8 * a2);
  v20 = *(_QWORD *)v19;
  v21 = v4 - (v19 + 8);
  if (v4 != v19 + 8)
    memmove(v19, v19 + 8, v4 - (v19 + 8));
  *((_QWORD *)this + 1) = &v19[v21];
  kaldi::nnet1::Nnet::ResetInternalBuffers(this);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(this);
  return v20;
}

uint64_t kaldi::nnet1::Nnet::GetParams(kaldi::nnet1::Nnet *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  void *v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = kaldi::nnet1::Nnet::NumParams(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) != *(_QWORD *)a1)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v6) + 32))(*(_QWORD *)(v5 + 8 * v6)))
      {
        if (!v8)
          __cxa_bad_cast();
        v14 = 0;
        v15 = 0;
        v16 = 0;
        (*(void (**)(void *, const void **))(*(_QWORD *)v8 + 184))(v8, &v14);
        v12 = 0;
        v13 = 0;
        v11 = (uint64_t)*a2 + 4 * v7;
        LODWORD(v12) = v15;
        kaldi::VectorBase<float>::CopyFromVec((uint64_t)&v11, &v14);
        v9 = v15;
        kaldi::Vector<float>::Destroy((uint64_t)&v14);
        v7 += v9;
      }
      ++v6;
      v5 = *(_QWORD *)a1;
    }
    while (v6 < (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3);
  }
  return kaldi::nnet1::Nnet::NumParams(a1);
}

void sub_1ADD37594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  kaldi::Vector<float>::Destroy((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::NumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0;
  v3 = 0;
  v4 = 0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
    {
      v4 = (*(unsigned int (**)(void *))(*(_QWORD *)v5 + 176))(v5) + v4;
    }
    ++v3;
    v1 = *(_QWORD *)this;
  }
  while (v3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  return v4;
}

uint64_t kaldi::nnet1::Nnet::SetParams(kaldi::nnet1::Nnet *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  int v6;
  void *v7;
  void *v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  kaldi::nnet1::Nnet::NumParams(a1);
  v4 = *(_QWORD *)a1;
  if (*((_QWORD *)a1 + 1) != *(_QWORD *)a1)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v4 + 8 * v5) + 32))(*(_QWORD *)(v4 + 8 * v5)))
      {
        if (!v7)
          __cxa_bad_cast();
        v8 = v7;
        v9 = (*(uint64_t (**)(void *))(*(_QWORD *)v7 + 176))(v7);
        v13 = 0;
        v14 = 0;
        v10 = v9 + v6;
        v12 = *a2 + 4 * v6;
        LODWORD(v13) = v9;
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v8 + 192))(v8, &v12);
        v6 = v10;
      }
      ++v5;
      v4 = *(_QWORD *)a1;
    }
    while (v5 < (uint64_t)(*((_QWORD *)a1 + 1) - *(_QWORD *)a1) >> 3);
  }
  return kaldi::nnet1::Nnet::NumParams(a1);
}

float kaldi::nnet1::Nnet::SumParams(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  unint64_t v3;
  float v4;
  void *v5;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) == *(_QWORD *)this)
    return 0.0;
  v3 = 0;
  v4 = 0.0;
  do
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
    {
      if (!v5)
        __cxa_bad_cast();
      v4 = v4 + (*(float (**)(void *))(*(_QWORD *)v5 + 208))(v5);
    }
    ++v3;
    v1 = *(_QWORD *)this;
  }
  while (v3 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  return v4;
}

void kaldi::nnet1::Nnet::ResetInternalBuffers(kaldi::nnet1::Nnet *this)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;

  v2 = (_QWORD *)((char *)this + 72);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 9, *(unsigned int *)(*((_QWORD *)this + 18) + 32));
  v3 = (_QWORD *)((char *)this + 120);
  std::vector<std::vector<kaldi::CuMatrix<float>>>::resize((uint64_t *)this + 15, *(int *)(*((_QWORD *)this + 18) + 32));
  v4 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  v5 = *(_DWORD *)(*((_QWORD *)this + 18) + 32);
  if ((int)(v4 >> 3) <= 0)
  {
    if (v5 >= 1)
    {
      v24 = 0;
      do
      {
        v25 = *v2 + 24 * v24;
        v28 = *(_QWORD **)(v25 + 8);
        v27 = (_QWORD *)(v25 + 8);
        v26 = v28;
        v29 = *(_QWORD **)(*v2 + 24 * v24);
        if (v28 != v29)
        {
          v30 = v26 - 6;
          v31 = v26 - 6;
          do
          {
            v32 = *v31;
            v31 -= 6;
            (*(void (**)(_QWORD *))(v32 + 16))(v30);
            v15 = v30 == v29;
            v30 = v31;
          }
          while (!v15);
        }
        *v27 = v29;
        v33 = *v3 + 24 * v24;
        v36 = *(_QWORD **)(v33 + 8);
        v35 = (_QWORD *)(v33 + 8);
        v34 = v36;
        v37 = *(_QWORD **)(*v3 + 24 * v24);
        if (v36 != v37)
        {
          v38 = v34 - 6;
          v39 = v34 - 6;
          do
          {
            v40 = *v39;
            v39 -= 6;
            (*(void (**)(_QWORD *))(v40 + 16))(v38);
            v15 = v38 == v37;
            v38 = v39;
          }
          while (!v15);
        }
        *v35 = v37;
        ++v24;
      }
      while (v24 < *(int *)(*((_QWORD *)this + 18) + 32));
    }
    v42 = (_QWORD *)*((_QWORD *)this + 12);
    v41 = (_QWORD *)*((_QWORD *)this + 13);
    if (v41 != v42)
    {
      v43 = v41 - 4;
      v44 = v41 - 4;
      do
      {
        v45 = *v44;
        v44 -= 4;
        (*(void (**)(_QWORD *))(v45 + 8))(v43);
        v15 = v43 == v42;
        v43 = v44;
      }
      while (!v15);
    }
    *((_QWORD *)this + 13) = v42;
  }
  else
  {
    if (v5 >= 1)
    {
      v6 = 0;
      do
      {
        v7 = *v2 + 24 * v6;
        v10 = *(_QWORD **)(v7 + 8);
        v9 = (_QWORD *)(v7 + 8);
        v8 = v10;
        v11 = *(_QWORD **)(*v2 + 24 * v6);
        if (v10 != v11)
        {
          v12 = v8 - 6;
          v13 = v8 - 6;
          do
          {
            v14 = *v13;
            v13 -= 6;
            (*(void (**)(_QWORD *))(v14 + 16))(v12);
            v15 = v12 == v11;
            v12 = v13;
          }
          while (!v15);
        }
        *v9 = v11;
        v16 = *v3 + 24 * v6;
        v19 = *(_QWORD **)(v16 + 8);
        v18 = (_QWORD *)(v16 + 8);
        v17 = v19;
        v20 = *(_QWORD **)(*v3 + 24 * v6);
        if (v19 != v20)
        {
          v21 = v17 - 6;
          v22 = v17 - 6;
          do
          {
            v23 = *v22;
            v22 -= 6;
            (*(void (**)(_QWORD *))(v23 + 16))(v21);
            v15 = v21 == v20;
            v21 = v22;
          }
          while (!v15);
        }
        *v18 = v20;
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((_QWORD *)this + 9) + 24 * v6), (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) + 0x100000000) >> 32);
        std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)(*((_QWORD *)this + 15) + 24 * v6++), (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) - 0x100000000) >> 32);
      }
      while (v6 < *(int *)(*((_QWORD *)this + 18) + 32));
      v4 = *((_QWORD *)this + 1) - *(_QWORD *)this;
    }
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 12, (uint64_t)((v4 << 29) + 0x100000000) >> 32);
  }
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::nnet1::Nnet::IsComponentFrozen(kaldi::nnet1::Nnet *this, int a2)
{
  if (*((_QWORD *)this + 22) <= (unint64_t)a2)
    return 0;
  else
    return (*(_QWORD *)(*((_QWORD *)this + 21) + (((unint64_t)a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> a2) & 1;
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  _BYTE v6[8];

  kaldi::Input::Input(v6, a2, 0);
  v5 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v6);
  kaldi::nnet1::Nnet::Init(a1, v5, a3);
  kaldi::Input::Close((kaldi::Input *)v6);
  kaldi::Input::~Input((kaldi::Input *)v6);
}

void sub_1ADD37BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::Input::~Input((kaldi::Input *)va);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet::Init(kaldi::nnet1::Nnet *a1, uint64_t *a2, uint64_t a3)
{
  std::locale::id *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  void **v9;
  uint64_t v10;
  size_t v11;
  std::string *v12;
  void **v13;
  kaldi::nnet1::Component *v14;
  std::string __p[11];
  void **v16;
  size_t v17;
  uint64_t v18;

  kaldi::ExpectToken(a2, 0, "<NnetProto>");
  v16 = 0;
  v17 = 0;
  v18 = 0;
  if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
  {
LABEL_26:
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Missing </NnetProto> at the end.", 32);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
  }
  v6 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (kaldi::PeekToken(a2, 0) != 47)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v7 = std::locale::use_facet((const std::locale *)__p, v6);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale((std::locale *)__p);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (uint64_t)&v16, v8);
    if (kaldi::g_kaldi_verbose_level >= 1)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p, 1);
      if (v18 >= 0)
        v9 = (void **)&v16;
      else
        v9 = v16;
      if (v18 >= 0)
        v10 = HIBYTE(v18);
      else
        v10 = v17;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v9, v10);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)__p);
    }
    if (v18 >= 0)
      v11 = HIBYTE(v18);
    else
      v11 = v17;
    std::string::basic_string[abi:ne180100]((uint64_t)__p, v11 + 1);
    if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v12 = __p;
    else
      v12 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
    if (v11)
    {
      if (v18 >= 0)
        v13 = (void **)&v16;
      else
        v13 = v16;
      memmove(v12, v13, v11);
    }
    *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 10;
    v14 = (kaldi::nnet1::Component *)kaldi::nnet1::Component::Init(__p, a3);
    kaldi::nnet1::Nnet::AppendComponent(a1, v14);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_26;
  }
  kaldi::ExpectToken(a2, 0, "</NnetProto>");
  kaldi::nnet1::Nnet::ResetInternalBuffers(a1);
  kaldi::nnet1::Nnet::ResetRecurrentFlag(a1);
  if (SHIBYTE(v18) < 0)
    operator delete(v16);
}

void sub_1ADD37E10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a9);
  JUMPOUT(0x1ADD37E54);
}

void sub_1ADD37E28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  JUMPOUT(0x1ADD37E54);
}

void sub_1ADD37E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  std::locale::~locale(&a9);
  JUMPOUT(0x1ADD37E54);
}

void sub_1ADD37E50(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 97) < 0)
    operator delete(*(void **)(v1 - 120));
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::Read(uint64_t **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD v25[34];

  v8 = kaldi::nnet1::Component::Read(a2, a3, a4);
  if (v8)
  {
    v9 = v8;
    v10 = a1 + 2;
    while (1)
    {
      v11 = a1[1];
      v12 = (char *)v11 - (char *)*a1;
      if ((int)((unint64_t)v12 >> 3) >= 1 && *(_DWORD *)(*(v11 - 1) + 12) != *(_DWORD *)(v9 + 8))
        break;
      if ((unint64_t)v11 >= *v10)
      {
        v14 = v12 >> 3;
        v15 = (v12 >> 3) + 1;
        if (v15 >> 61)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v16 = *v10 - (_QWORD)*a1;
        if (v16 >> 2 > v15)
          v15 = v16 >> 2;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
          v17 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)(a1 + 2), v17);
        else
          v18 = 0;
        v19 = (uint64_t *)&v18[8 * v14];
        *v19 = v9;
        v13 = v19 + 1;
        v21 = (char *)*a1;
        v20 = (char *)a1[1];
        if (v20 != (char *)*a1)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v19 = v22;
          }
          while (v20 != v21);
          v20 = (char *)*a1;
        }
        *a1 = v19;
        a1[1] = v13;
        a1[2] = (uint64_t *)&v18[8 * v17];
        if (v20)
          operator delete(v20);
      }
      else
      {
        *v11 = v9;
        v13 = v11 + 1;
      }
      a1[1] = v13;
      v9 = kaldi::nnet1::Component::Read(a2, a3, a4);
      if (!v9)
        goto LABEL_22;
    }
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, (uint64_t)"Dimensionality mismatch!", 24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)" Previous layer output:", 23);
    v24 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)" Current layer input:", 21);
    std::ostream::operator<<();
LABEL_27:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v25);
  }
LABEL_22:
  if ((int)((unint64_t)((char *)a1[1] - (char *)*a1) >> 3) <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v25);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v25, "Could not read any components");
    goto LABEL_27;
  }
  *((_DWORD *)a1[18] + 2) = 0;
  kaldi::nnet1::Nnet::ResetInternalBuffers((kaldi::nnet1::Nnet *)a1);
  kaldi::nnet1::Nnet::ResetRecurrentFlag((kaldi::nnet1::Nnet *)a1);
}

void kaldi::nnet1::Nnet::Read(uint64_t a1, uint64_t a2, int a3)
{
  void *__p[2];
  char v5;
  int v6;

  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    v6 = 2;
    kaldi::nnet1::Nnet::ReadMapped(a1, (uint64_t)__p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    kaldi::nnet1::Nnet::Read(a1, a2);
  }
}

void sub_1ADD380E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::ReadMapped(uint64_t a1, uint64_t a2)
{
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v10[34];

  if (*(_QWORD *)(a1 + 160))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v10, "Nnet already mapped from a file");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v10);
  }
  *(_QWORD *)(a1 + 160) = kaldi::ReadMapped<kaldi::nnet1::Nnet>(a2, (uint64_t **)a1);
  if (((*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) & 0x7FFFFFFF8) == 0 && kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"The mapped network '", 20);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = a2;
    else
      v7 = *(_QWORD *)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)"' is empty.", 11);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v10);
  }
}

void sub_1ADD381EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

fst::MappedFile *kaldi::ReadMapped<kaldi::nnet1::Nnet>(uint64_t a1, uint64_t **a2)
{
  uint64_t v4;
  fst::MappedFile *v5;
  uint64_t *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[15];
  unsigned __int8 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  _QWORD v27[35];

  v27[34] = *MEMORY[0x1E0C80C00];
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  if (!v17)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"Memory mapping failed. Not a valid Kaldi binary file: ", 54);
    v13 = *(char *)(a1 + 23);
    if (v13 >= 0)
      v14 = a1;
    else
      v14 = *(_QWORD *)a1;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(a1 + 23);
    else
      v15 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v4 = kaldi::Input::Stream((kaldi::Input *)v16);
  std::istream::seekg();
  std::istream::tellg();
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  std::istream::seekg();
  v5 = fst::MappedFile::Map(v4, a1, v27[16]);
  kaldi::Input::~Input((kaldi::Input *)v16);
  if (!v5)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v27, "Memory mapping failed. mapped_file_ is NULL");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v27);
  }
  v17 = 0;
  kaldi::Input::Input(v16, a1, &v17);
  v6 = (uint64_t *)kaldi::Input::Stream((kaldi::Input *)v16);
  kaldi::nnet1::Nnet::Read(a2, v6, v17, *((_QWORD *)v5 + 1));
  kaldi::Input::Close((kaldi::Input *)v16);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v27);
    v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v27, (uint64_t)"memory mapped file ", 19);
    v8 = *(char *)(a1 + 23);
    if (v8 >= 0)
      v9 = a1;
    else
      v9 = *(_QWORD *)a1;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 23);
    else
      v10 = *(_QWORD *)(a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, v9, v10);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v27);
  }
  kaldi::Input::~Input((kaldi::Input *)v16);
  return v5;
}

void sub_1ADD383F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::Input::~Input((kaldi::Input *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::Write(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  const std::locale::facet *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *result;
  const std::locale::facet *v12;
  std::locale v13;

  kaldi::nnet1::Nnet::CheckDimensions(a1);
  kaldi::WriteToken(a2, a3, "<Nnet>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v8 = std::locale::use_facet(&v13, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v8->__vftable[2].~facet_0)(v8, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    std::ostream::flush();
  }
  v9 = *a1;
  if ((int)((unint64_t)(a1[1] - *a1) >> 3) >= 1)
  {
    v10 = 0;
    do
    {
      kaldi::nnet1::Component::Write(*(_QWORD *)(v9 + 8 * v10++), a2, a3, a4);
      v9 = *a1;
    }
    while (v10 < (int)((unint64_t)(a1[1] - *a1) >> 3));
  }
  result = kaldi::WriteToken(a2, a3, "</Nnet>");
  if ((a3 & 1) == 0)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a2 + *(_QWORD *)(*a2 - 24)));
    v12 = std::locale::use_facet(&v13, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v12->__vftable[2].~facet_0)(v12, 10);
    std::locale::~locale(&v13);
    std::ostream::put();
    return (_QWORD *)std::ostream::flush();
  }
  return result;
}

void sub_1ADD3859C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::Info(kaldi::nnet1::Nnet *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *v4;
  const std::locale::facet *v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::locale::facet *v10;
  uint64_t v11;
  std::locale::id *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  kaldi::nnet1::Component *v16;
  std::string *v17;
  std::string::size_type size;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  void **v23;
  uint64_t v24;
  _QWORD *v25;
  const std::locale::facet *v26;
  void *__p[2];
  unsigned __int8 v29;
  std::string v30;
  _QWORD v31[11];
  char v32;
  uint64_t v33;
  std::locale v34;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"num-components ", 15);
  v2 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
  v3 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"input-dim ", 10);
  v4 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v4 + *(_QWORD *)(*v4 - 24)));
  v5 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"output-dim ", 11);
  v6 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
  v7 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"number-of-parameters ", 21);
  kaldi::nnet1::Nnet::NumParams(this);
  v8 = (_QWORD *)std::ostream::operator<<();
  v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" millions", 9);
  std::ios_base::getloc((const std::ios_base *)((char *)v9 + *(_QWORD *)(*v9 - 24)));
  v10 = std::locale::use_facet((const std::locale *)&v30, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 10);
  std::locale::~locale((std::locale *)&v30);
  std::ostream::put();
  std::ostream::flush();
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v11 = 0;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"component ", 10);
      v13 = v11 + 1;
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" : ", 3);
      v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11));
      kaldi::nnet1::Component::TypeToMarker(v16, &v30);
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v30;
      else
        v17 = (std::string *)v30.__r_.__value_.__r.__words[0];
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
      else
        size = v30.__r_.__value_.__l.__size_;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, size);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)", input-dim ", 12);
      v20 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)", output-dim ", 13);
      v21 = (_QWORD *)std::ostream::operator<<();
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)this + 8 * v11) + 64))(__p);
      if ((v29 & 0x80u) == 0)
        v23 = __p;
      else
        v23 = (void **)__p[0];
      if ((v29 & 0x80u) == 0)
        v24 = v29;
      else
        v24 = (uint64_t)__p[1];
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)v23, v24);
      std::ios_base::getloc((const std::ios_base *)((char *)v25 + *(_QWORD *)(*v25 - 24)));
      v26 = std::locale::use_facet(&v34, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
      std::locale::~locale(&v34);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v29 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      ++v11;
    }
    while (v13 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v31[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v32 < 0)
    operator delete((void *)v31[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v33);
}

void sub_1ADD38A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::locale::~locale(&a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoGradient@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v6;
  std::locale::id *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  kaldi::nnet1::Component *v11;
  std::string *v12;
  std::string::size_type size;
  _QWORD *v14;
  _QWORD *v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  const std::locale::facet *v19;
  void *__p[2];
  unsigned __int8 v22;
  std::string v23;
  _QWORD v24[11];
  char v25;
  uint64_t v26;
  std::locale v27;

  v3 = (uint64_t *)*((_QWORD *)this + 15);
  if (*((uint64_t **)this + 16) == v3)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  v4 = *v3;
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) == v4 || !(4 * *(_DWORD *)(v4 + 20) * *(_DWORD *)(v4 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### No gradient info");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"### Gradient stats :\n", 21);
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v6 = 0;
    v7 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)"Component ", 10);
      v8 = v6 + 1;
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)" : ", 3);
      v11 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v6) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v6));
      kaldi::nnet1::Component::TypeToMarker(v11, &v23);
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v12 = &v23;
      else
        v12 = (std::string *)v23.__r_.__value_.__r.__words[0];
      if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
      else
        size = v23.__r_.__value_.__l.__size_;
      v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v12, size);
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)", ", 2);
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)this + 8 * v6) + 72))(__p);
      if ((v22 & 0x80u) == 0)
        v16 = __p;
      else
        v16 = (void **)__p[0];
      if ((v22 & 0x80u) == 0)
        v17 = v22;
      else
        v17 = (uint64_t)__p[1];
      v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v16, v17);
      std::ios_base::getloc((const std::ios_base *)((char *)v18 + *(_QWORD *)(*v18 - 24)));
      v19 = std::locale::use_facet(&v27, v7);
      ((void (*)(const std::locale::facet *, uint64_t))v19->__vftable[2].~facet_0)(v19, 10);
      std::locale::~locale(&v27);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v22 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      ++v6;
    }
    while (v8 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v24[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v24 + *(_QWORD *)(v24[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v24[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v25 < 0)
    operator delete((void *)v24[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1AF44D094](&v26);
}

void sub_1ADD38D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale::id *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  kaldi::nnet1::Component *v16;
  std::string *v17;
  std::string::size_type v18;
  _QWORD *v19;
  void *locale;
  uint64_t v21;
  _QWORD *v22;
  const std::locale::facet *v23;
  void *v24;
  std::string *v25;
  uint64_t v26;
  void *v27;
  std::string *v28;
  uint64_t v29;
  std::locale v32;
  uint64_t v33;
  unsigned __int8 v34;
  std::string __p;
  _QWORD v36[11];
  char v37;
  uint64_t v38;
  std::locale v39;

  v2 = (uint64_t *)*((_QWORD *)this + 9);
  if (*((uint64_t **)this + 10) == v2)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  v3 = *v2;
  if (*(_QWORD *)(*((_QWORD *)this + 9) + 8) == v3 || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Forward propagation buffers not initialized");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v36);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"### Forward propagation buffer content, note in the parallel GPU training, this only includes the first subbatch content :\n", 123);
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[0] output of <Input> ", 22);
  kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 9));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)p_p, size);
  std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
  v9 = std::locale::use_facet(&v32, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
  std::locale::~locale(&v32);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v10 = 0;
    v11 = 48;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)"[", 1);
      v13 = v10 + 1;
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] output of ", 12);
      v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10));
      kaldi::nnet1::Component::TypeToMarker(v16, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &__p;
      else
        v17 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v18 = __p.__r_.__value_.__l.__size_;
      v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)v17, v18);
      kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 9) + v11);
      if ((v34 & 0x80u) == 0)
        locale = &v32;
      else
        locale = v32.__locale_;
      if ((v34 & 0x80u) == 0)
        v21 = v34;
      else
        v21 = v33;
      v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)locale, v21);
      std::ios_base::getloc((const std::ios_base *)((char *)v22 + *(_QWORD *)(*v22 - 24)));
      v23 = std::locale::use_facet(&v39, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v23->__vftable[2].~facet_0)(v23, 10);
      std::locale::~locale(&v39);
      std::ostream::put();
      std::ostream::flush();
      if ((char)v34 < 0)
        operator delete(v32.__locale_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10)) == 2055)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v24 + 248))(&__p);
        v25 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v25, v26);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v10) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v10)) == 274)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v27 + 280))(&__p);
        v28 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v29 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)v28, v29);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 48;
      ++v10;
    }
    while (v13 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v36[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v36[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v37 < 0)
    operator delete((void *)v36[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1AF44D094](&v38);
}

void sub_1ADD39208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

_QWORD *kaldi::nnet1::Nnet::InfoBackPropagate@<X0>(kaldi::nnet1::Nnet *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  std::string *v6;
  uint64_t v7;
  _QWORD *v8;
  const std::locale::facet *v9;
  uint64_t v10;
  uint64_t v11;
  std::locale::id *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  kaldi::nnet1::Component *v16;
  std::string *p_p;
  std::string::size_type size;
  std::string *v19;
  uint64_t v20;
  const std::locale::facet *v21;
  void *v22;
  std::string *v23;
  uint64_t v24;
  void *v25;
  std::string *v26;
  uint64_t v27;
  std::string __p;
  _QWORD v31[11];
  char v32;
  uint64_t v33;
  std::locale v34;

  v2 = (uint64_t *)*((_QWORD *)this + 15);
  if (*((uint64_t **)this + 16) == v2)
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  v3 = *v2;
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) == v3 || !(4 * *(_DWORD *)(v3 + 20) * *(_DWORD *)(v3 + 24)))
    return std::string::basic_string[abi:ne180100]<0>(a2, "### Backward propagation buffers not initialized");
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"### Backward propagation buffer content, Note in multi subbatch case, only the first subbatch is reported :\n", 108);
  if (*(_QWORD *)(*((_QWORD *)this + 15) + 8) != **((_QWORD **)this + 15))
  {
    v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[0] diff of <Input> ", 20);
    kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 15));
    v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    v7 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? HIBYTE(__p.__r_.__value_.__r.__words[2])
       : __p.__r_.__value_.__l.__size_;
    v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::ios_base::getloc((const std::ios_base *)((char *)v8 + *(_QWORD *)(*v8 - 24)));
    v9 = std::locale::use_facet(&v34, MEMORY[0x1E0DE4A90]);
    ((void (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
    std::locale::~locale(&v34);
    std::ostream::put();
    std::ostream::flush();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) >= 1)
  {
    v10 = 0;
    v11 = 0;
    v12 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)"[", 1);
      v13 = v11 + 1;
      v14 = (_QWORD *)std::ostream::operator<<();
      v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"] diff-output of ", 17);
      v16 = (kaldi::nnet1::Component *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11)
                                                                         + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11));
      kaldi::nnet1::Component::TypeToMarker(v16, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, size);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v11 < (((*((_QWORD *)this + 1) - *(_QWORD *)this) << 29) - 0x100000000) >> 32)
      {
        kaldi::nnet1::MomentStatistics<float>(**((_QWORD **)this + 15) + v10);
        v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v19, v20);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::ios_base::getloc((const std::ios_base *)((char *)v31 + *(_QWORD *)(v31[0] - 24)));
      v21 = std::locale::use_facet((const std::locale *)&__p, v12);
      ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
      std::locale::~locale((std::locale *)&__p);
      std::ostream::put();
      std::ostream::flush();
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11)) == 2055)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v22 + 256))(&__p);
        v23 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v23, v24);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)this + 8 * v11) + 24))(*(_QWORD *)(*(_QWORD *)this + 8 * v11)) == 274)
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v25 + 288))(&__p);
        v26 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &__p
            : (std::string *)__p.__r_.__value_.__r.__words[0];
        v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? HIBYTE(__p.__r_.__value_.__r.__words[2])
            : __p.__r_.__value_.__l.__size_;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v26, v27);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      v10 += 48;
      ++v11;
    }
    while (v13 < (int)((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3));
  }
  std::stringbuf::str();
  v31[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v31[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v32 < 0)
    operator delete((void *)v31[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1AF44D094](&v33);
}

void sub_1ADD396EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::ostringstream::~ostringstream((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::IsRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 152);
}

BOOL kaldi::nnet1::Nnet::HasHistory(kaldi::nnet1::Nnet *this)
{
  return *((_QWORD *)this + 6) != *((_QWORD *)this + 7);
}

uint64_t kaldi::nnet1::Nnet::IsBidirectionalRnn(kaldi::nnet1::Nnet *this)
{
  return *((unsigned __int8 *)this + 153);
}

void kaldi::nnet1::Nnet::CheckWeights(kaldi::nnet1::Nnet *this)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) - *(_QWORD *)this >= 9uLL)
  {
    v3 = 0;
    do
    {
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v1 + 8 * v3) + 32))(*(_QWORD *)(v1 + 8 * v3)))
        kaldi::nnet1::UpdatableComponent::CheckParams(*(kaldi::nnet1::UpdatableComponent **)(*(_QWORD *)this + 8 * v3));
      v1 = *(_QWORD *)this;
      v4 = v3 + 2;
      ++v3;
    }
    while (v4 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
}

void kaldi::nnet1::Nnet::ResetRecurrentFlag(kaldi::nnet1::Nnet *this)
{
  char **v1;
  uint64_t v2;
  char **v3;
  uint64_t v4;
  unint64_t v6;
  const void *v7;
  kaldi::nnet1::ParallelComponent *v8;
  kaldi::nnet1::ParallelComponent *v9;
  BOOL v10;
  void *v11;
  void *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  const void *v27;
  void *v28;
  const void *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  void *__p;
  char *v45;
  void *v46;
  char *v47;

  v1 = (char **)((char *)this + 24);
  v3 = (char **)((char *)this + 48);
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  *((_QWORD *)this + 7) = v2;
  *((_WORD *)this + 76) = 0;
  v4 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v6 = 0;
    v42 = (char *)this + 64;
    v43 = (char *)this + 40;
    while (1)
    {
      v7 = *(const void **)(v4 + 8 * v6);
      if (!v7)
        goto LABEL_38;
      if (!v8)
        break;
      v9 = v8;
      kaldi::nnet1::ParallelComponent::GetHistoricalComponents(v8, &v46);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v3, *((_QWORD *)this + 7), (char *)v46, v47, (v47 - (_BYTE *)v46) >> 3);
      if (*((_BYTE *)this + 153))
      {
        v10 = 1;
      }
      else
      {
        v16 = *((_QWORD *)v9 + 23);
        v17 = *((_QWORD *)v9 + 24);
        if (v16 == v17)
        {
          v10 = 0;
        }
        else
        {
          v10 = 0;
          do
          {
            v10 = v10 || *(_BYTE *)(v16 + 153) != 0;
            v16 += 376;
          }
          while (v16 != v17);
        }
      }
      *((_BYTE *)this + 153) = v10;
      kaldi::nnet1::ParallelComponent::GetRecurrentComponents(v9, &__p);
      std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)v1, *((_QWORD *)this + 4), (char *)__p, v45, (v45 - (_BYTE *)__p) >> 3);
      if (__p)
      {
        v45 = (char *)__p;
        operator delete(__p);
      }
      if (v46)
      {
        v47 = (char *)v46;
        operator delete(v46);
      }
LABEL_59:
      ++v6;
      v4 = *(_QWORD *)this;
      if (v6 >= (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3)
      {
        if (*((_QWORD *)this + 3) != *((_QWORD *)this + 4))
          *((_BYTE *)this + 152) = 1;
        return;
      }
    }
    if (v11)
    {
      v12 = v11;
      if ((*(int (**)(void *))(*(_QWORD *)v11 + 16))(v11) >= 1)
      {
        v14 = (_QWORD *)*((_QWORD *)this + 7);
        v13 = *((_QWORD *)this + 8);
        if ((unint64_t)v14 >= v13)
        {
          v18 = ((char *)v14 - *v3) >> 3;
          if ((unint64_t)(v18 + 1) >> 61)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v19 = v13 - (_QWORD)*v3;
          v20 = v19 >> 2;
          if (v19 >> 2 <= (unint64_t)(v18 + 1))
            v20 = v18 + 1;
          if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
            v21 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v21 = v20;
          if (v21)
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v42, v21);
          else
            v22 = 0;
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v12;
          v15 = v23 + 8;
          v25 = (char *)*((_QWORD *)this + 6);
          v24 = (char *)*((_QWORD *)this + 7);
          if (v24 != v25)
          {
            do
            {
              v26 = *((_QWORD *)v24 - 1);
              v24 -= 8;
              *((_QWORD *)v23 - 1) = v26;
              v23 -= 8;
            }
            while (v24 != v25);
            v24 = *v3;
          }
          *((_QWORD *)this + 6) = v23;
          *((_QWORD *)this + 7) = v15;
          *((_QWORD *)this + 8) = &v22[8 * v21];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *v14 = v12;
          v15 = v14 + 1;
        }
        *((_QWORD *)this + 7) = v15;
      }
    }
LABEL_38:
    v27 = *(const void **)(*(_QWORD *)this + 8 * v6);
    if (v27)
    {
      if (v28)
      {
        v29 = v28;
        if ((*(int (**)(void *))(*(_QWORD *)v28 + 16))(v28) >= 1)
        {
          v31 = (_QWORD *)*((_QWORD *)this + 4);
          v30 = *((_QWORD *)this + 5);
          if ((unint64_t)v31 >= v30)
          {
            v33 = ((char *)v31 - *v1) >> 3;
            if ((unint64_t)(v33 + 1) >> 61)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v34 = v30 - (_QWORD)*v1;
            v35 = v34 >> 2;
            if (v34 >> 2 <= (unint64_t)(v33 + 1))
              v35 = v33 + 1;
            if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
              v36 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v36 = v35;
            if (v36)
              v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>((uint64_t)v43, v36);
            else
              v37 = 0;
            v38 = &v37[8 * v33];
            *(_QWORD *)v38 = v29;
            v32 = v38 + 8;
            v40 = (char *)*((_QWORD *)this + 3);
            v39 = (char *)*((_QWORD *)this + 4);
            if (v39 != v40)
            {
              do
              {
                v41 = *((_QWORD *)v39 - 1);
                v39 -= 8;
                *((_QWORD *)v38 - 1) = v41;
                v38 -= 8;
              }
              while (v39 != v40);
              v39 = *v1;
            }
            *((_QWORD *)this + 3) = v38;
            *((_QWORD *)this + 4) = v32;
            *((_QWORD *)this + 5) = &v37[8 * v36];
            if (v39)
              operator delete(v39);
          }
          else
          {
            *v31 = v29;
            v32 = v31 + 1;
          }
          *((_QWORD *)this + 4) = v32;
          {
            *((_BYTE *)this + 153) = 1;
          }
        }
      }
    }
    goto LABEL_59;
  }
}

void sub_1ADD39B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetHistoricalComponents(kaldi::nnet1::ParallelComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  char *v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v2 != i; v2 += 376)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(&__p, *(const void **)(v2 + 48), *(_QWORD *)(v2 + 56), (uint64_t)(*(_QWORD *)(v2 + 56) - *(_QWORD *)(v2 + 48)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1ADD39C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::ParallelComponent::GetRecurrentComponents(kaldi::nnet1::ParallelComponent *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t i;
  void *__p;
  char *v6;
  uint64_t v7;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *((_QWORD *)this + 23);
  for (i = *((_QWORD *)this + 24); v2 != i; v2 += 376)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(&__p, *(const void **)(v2 + 24), *(_QWORD *)(v2 + 32), (uint64_t)(*(_QWORD *)(v2 + 32) - *(_QWORD *)(v2 + 24)) >> 3);
    std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>((uint64_t)a2, a2[1], (char *)__p, v6, (v6 - (_BYTE *)__p) >> 3);
    if (__p)
    {
      v6 = (char *)__p;
      operator delete(__p);
    }
  }
}

void sub_1ADD39D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void kaldi::nnet1::Nnet::ValidateNnet(kaldi::nnet1::Nnet *this)
{
  kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)this);
  kaldi::nnet1::Nnet::CheckWeights(this);
}

void kaldi::nnet1::Nnet::SetHistoryOptions(kaldi::nnet1::Nnet *this, const kaldi::nnet1::HistoryOptions *a2, int a3)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  int v11;
  void (**v12)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  _BYTE v13[31];
  void *v14;
  int v15;
  int v16;

  v6 = (uint64_t *)*((_QWORD *)this + 6);
  v7 = (uint64_t *)*((_QWORD *)this + 7);
  while (v6 != v7)
  {
    v8 = *v6++;
    (*(void (**)(uint64_t, const kaldi::nnet1::HistoryOptions *))(*(_QWORD *)v8 + 80))(v8, a2);
  }
  if (v9)
  {
    v10 = *(_OWORD *)(v9 + 8);
    *(_OWORD *)&v13[15] = *(_OWORD *)(v9 + 23);
    *(_OWORD *)v13 = v10;
    v12 = &off_1E5D305B8;
    v14 = &unk_1E5D305D8;
    v11 = *((_DWORD *)v9 + 13);
    v15 = *((_DWORD *)a2 + 2);
    v16 = v11;
    kaldi::nnet1::Nnet::SetTrainOptions(this, (const kaldi::nnet1::NnetTrainOptions *)&v12, a3);
  }
  else if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v12, (uint64_t)"Inconsistent return type: RecurrentBaseComponent::GetTrainOptions() can not be cast to RecurrentNnetTrainOptions", 112);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v12);
  }
}

void sub_1ADD39E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::Nnet::GetTrainOptions(kaldi::nnet1::Nnet *this)
{
  return *((_QWORD *)this + 18);
}

_QWORD *kaldi::nnet1::operator<<(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v3 = kaldi::nnet1::operator<<(a1, a2);
  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)", and Recurrent style components have additional configurations ", 64);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"num_sequences ", 14);
  std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"bptt_steps ", 11);
  v5 = (_QWORD *)std::ostream::operator<<();
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  return a1;
}

{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  const char *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;

  v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(a1, (uint64_t)"NnetTrainOptions : ", 19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"learn_rate ", 11);
  v5 = (_QWORD *)std::ostream::operator<<();
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"momentum ", 9);
  v7 = (_QWORD *)std::ostream::operator<<();
  v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"l2_penalty ", 11);
  v9 = (_QWORD *)std::ostream::operator<<();
  v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"l1_penalty ", 11);
  v11 = (_QWORD *)std::ostream::operator<<();
  v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"qtype_compact_grad ", 19);
  v13 = (_QWORD *)std::ostream::operator<<();
  v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"step_compact_grad ", 18);
  v15 = (_QWORD *)std::ostream::operator<<();
  v16 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)", ", 2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"num_subbatches ", 15);
  v17 = (_QWORD *)std::ostream::operator<<();
  v18 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)", ", 2);
  v19 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)"average_gradients ", 18);
  if (*(_BYTE *)(a2 + 36))
    v20 = "true";
  else
    v20 = "false";
  if (*(_BYTE *)(a2 + 36))
    v21 = 4;
  else
    v21 = 5;
  v22 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)v20, v21);
  v23 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v22, (uint64_t)", ", 2);
  v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v23, (uint64_t)"vectorize_weights ", 18);
  if (*(_BYTE *)(a2 + 37))
    v25 = "true";
  else
    v25 = "false";
  if (*(_BYTE *)(a2 + 37))
    v26 = 4;
  else
    v26 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)v25, v26);
  return a1;
}

void kaldi::nnet1::Nnet::SetWorkspaceSize(kaldi::nnet1::Nnet *this, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  kaldi::CuWorkspace *v11;
  unint64_t v12;
  kaldi::CuWorkspace *v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[34];

  if (a2 < 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v16, "workspace_size_bytes >= 0");
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v16);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v16, (uint64_t)"Set workspace of ", 17);
    v4 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)" bytes for ", 11);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" sub-batches", 12);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v16);
  }
  v7 = *((_QWORD *)this + 44);
  v6 = *((_QWORD *)this + 45);
  v8 = *(int *)(*((_QWORD *)this + 18) + 32);
  if (v8 != (v6 - v7) >> 3 && v6 != v7)
  {
    v10 = 0;
    do
    {
      v11 = *(kaldi::CuWorkspace **)(v7 + 8 * v10);
      if (v11)
      {
        kaldi::CuWorkspace::~CuWorkspace(v11);
        MEMORY[0x1AF44D190]();
        v7 = *((_QWORD *)this + 44);
        v6 = *((_QWORD *)this + 45);
      }
      ++v10;
    }
    while (v10 < (v6 - v7) >> 3);
    v8 = *(int *)(*((_QWORD *)this + 18) + 32);
  }
  std::vector<fst::QueueBase<int> *,std::allocator<fst::QueueBase<int> *>>::resize((uint64_t)this + 352, v8);
  if (*((_QWORD *)this + 45) != *((_QWORD *)this + 44))
  {
    v12 = 0;
    do
    {
      v13 = (kaldi::CuWorkspace *)operator new();
      kaldi::CuWorkspace::CuWorkspace(v13, a2);
      *(_QWORD *)(*((_QWORD *)this + 44) + 8 * v12++) = v13;
    }
    while (v12 < (uint64_t)(*((_QWORD *)this + 45) - *((_QWORD *)this + 44)) >> 3);
  }
  v14 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v15 = 0;
    do
    {
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(v14 + 8 * v15) + 136))(*(_QWORD *)(v14 + 8 * v15), (char *)this + 352);
      ++v15;
      v14 = *(_QWORD *)this;
    }
    while (v15 < (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3);
  }
}

void sub_1ADD3A298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

void kaldi::nnet1::Nnet::ComputeNnetDelta(uint64_t *a1@<X0>, const kaldi::nnet1::Nnet *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, kaldi::nnet1::Nnet *a5@<X8>)
{
  const kaldi::nnet1::Nnet *v6;
  uint64_t v8;
  unint64_t v9;
  const struct __class_type_info *v10;
  const void *v11;
  void *v12;
  void *v13;
  const struct __class_type_info *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  int v42;
  const kaldi::nnet1::Nnet *v43;
  void *__p;
  char *v47;
  char *v48;
  const float *v49[3];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = a2;
  kaldi::nnet1::Nnet::Nnet(a5, a2);
  v8 = *a1;
  if (a1[1] != *a1)
  {
    v9 = 0;
    v43 = v6;
    do
    {
      v11 = *(const void **)(*(_QWORD *)v6 + 8 * v9);
      if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(v8 + 8 * v9) + 32))(*(_QWORD *)(v8 + 8 * v9))
        && (*(unsigned int (**)(const void *))(*(_QWORD *)v11 + 32))(v11))
      {
        v50 = 0;
        v51 = 0;
        v52 = 0;
        memset(v49, 0, sizeof(v49));
        __p = 0;
        v47 = 0;
        v48 = 0;
        if (!v12)
          __cxa_bad_cast();
        v13 = v12;
        v14 = v10;
        if (!v15)
          __cxa_bad_cast();
        v16 = v15;
        v17 = (*(uint64_t (**)(const void *))(*(_QWORD *)v11 + 16))(v11);
        (*(void (**)(void *, uint64_t *))(*(_QWORD *)v13 + 184))(v13, &v50);
        (*(void (**)(void *, const float **))(*(_QWORD *)v16 + 184))(v16, v49);
        kaldi::VectorBase<float>::AddVec<float>((uint64_t)&v50, v49, -1.0);
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 192))(v17, &v50);
        kaldi::nnet1::Component::Delete(*(void **)(*(_QWORD *)a5 + 8 * v9), (kaldi::nnet1::Component *)1);
        *(_QWORD *)(*(_QWORD *)a5 + 8 * v9) = v17;
        kaldi::nnet1::Nnet::CheckDimensions((uint64_t *)a5);
        if ((int)v51 >= 1)
        {
          v18 = 0;
          v19 = v47;
          do
          {
            v20 = v50;
            if (v19 >= v48)
            {
              v22 = (char *)__p;
              v23 = (v19 - (_BYTE *)__p) >> 2;
              v24 = v23 + 1;
              if ((unint64_t)(v23 + 1) >> 62)
                std::vector<int>::__throw_length_error[abi:ne180100]();
              v25 = v48 - (_BYTE *)__p;
              if ((v48 - (_BYTE *)__p) >> 1 > v24)
                v24 = v25 >> 1;
              if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                v26 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v26 = v24;
              if (v26)
              {
                v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v48, v26);
                v22 = (char *)__p;
                v19 = v47;
              }
              else
              {
                v27 = 0;
              }
              v28 = &v27[4 * v23];
              *(_DWORD *)v28 = *(_DWORD *)(v20 + 4 * v18);
              v21 = v28 + 4;
              while (v19 != v22)
              {
                v29 = *((_DWORD *)v19 - 1);
                v19 -= 4;
                *((_DWORD *)v28 - 1) = v29;
                v28 -= 4;
              }
              __p = v28;
              v47 = v21;
              v48 = &v27[4 * v26];
              if (v22)
                operator delete(v22);
            }
            else
            {
              *(_DWORD *)v19 = *(_DWORD *)(v50 + 4 * v18);
              v21 = v19 + 4;
            }
            v47 = v21;
            ++v18;
            v19 = v21;
          }
          while (v18 < (int)v51);
        }
        v30 = a3[1];
        if (v30 >= a3[2])
        {
          v31 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(a3, (uint64_t)&__p);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)a3, (uint64_t)&__p);
          v31 = v30 + 24;
        }
        a3[1] = v31;
        v33 = *(_DWORD **)(a4 + 8);
        v32 = *(_QWORD *)(a4 + 16);
        v10 = v14;
        if ((unint64_t)v33 >= v32)
        {
          v35 = *(_DWORD **)a4;
          v36 = ((uint64_t)v33 - *(_QWORD *)a4) >> 2;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v38 = v32 - (_QWORD)v35;
          if (v38 >> 1 > v37)
            v37 = v38 >> 1;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
            v39 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a4 + 16, v39);
            v35 = *(_DWORD **)a4;
            v33 = *(_DWORD **)(a4 + 8);
            v10 = v14;
          }
          else
          {
            v40 = 0;
          }
          v41 = &v40[4 * v36];
          *(_DWORD *)v41 = v9;
          v34 = v41 + 4;
          while (v33 != v35)
          {
            v42 = *--v33;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *(_QWORD *)a4 = v41;
          *(_QWORD *)(a4 + 8) = v34;
          *(_QWORD *)(a4 + 16) = &v40[4 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v33 = v9;
          v34 = v33 + 1;
        }
        *(_QWORD *)(a4 + 8) = v34;
        if (__p)
        {
          v47 = (char *)__p;
          operator delete(__p);
        }
        kaldi::Vector<float>::Destroy((uint64_t)v49);
        v6 = v43;
        kaldi::Vector<float>::Destroy((uint64_t)&v50);
      }
      ++v9;
      v8 = *a1;
    }
    while (v9 < (a1[1] - *a1) >> 3);
  }
}

void sub_1ADD3A654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, kaldi::nnet1::Nnet *a13, void *__p, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (__p)
    operator delete(__p);
  kaldi::Vector<float>::Destroy((uint64_t)&a17);
  kaldi::Vector<float>::Destroy((uint64_t)&a20);
  kaldi::nnet1::Nnet::~Nnet(a13);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::DoBackProp(const kaldi::nnet1::NnetTrainOptions *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7, _QWORD *a8, float a9, uint64_t a10, uint64_t *a11, uint64_t a12, uint64_t a13)
{
  std::string *v20;
  std::vector<unsigned int>::pointer i;
  signed int v22;
  signed int v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  clockid_t v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int16 *v34;
  int v35;
  int v36;
  uint64_t v38;
  int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t ***v47;
  uint64_t v48;
  int32x2_t *v49;
  uint64_t v50;
  char *v51;
  float v52;
  float v53;
  unint64_t v54;
  float *v55;
  float *v56;
  float *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  float *v63;
  int v64;
  _QWORD *v65;
  _DWORD **v66;
  uint64_t v67;
  int v69;
  void **v70[47];
  void *v71[3];
  uint64_t **v72[3];
  void *__dst[3];
  _BYTE v74[40];
  _OWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  _OWORD v81[3];
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  int v86;
  void *__p[2];
  unsigned __int8 v88;
  uint64_t v89;
  _QWORD v90[4];
  void *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  int v95;
  _BYTE v96[32];
  uint64_t v97;
  int32x2_t v98;
  __int128 v99;
  __int128 v100;
  char v101;
  int32x2_t v102;
  __int128 v103;
  __int128 v104;
  char v105;
  int32x2_t v106;
  __int128 v107;
  __int128 v108;
  char v109;
  _BYTE v110[376];
  int32x2_t v111[47];
  uint64_t v112[47];
  std::vector<unsigned int> v113;
  unsigned __int16 *v114;
  uint64_t v115;
  unsigned __int8 v116;
  uint64_t v117;
  int v118;

  v117 = 0x157100008000;
  v118 = (int)a9;
  v20 = (std::string *)std::string::basic_string[abi:ne180100]<0>(&v114, "xent");
  if (*(char *)(a4 + 23) < 0)
  {
    if (!*(_QWORD *)(a4 + 8))
      goto LABEL_6;
    goto LABEL_5;
  }
  if (*(_BYTE *)(a4 + 23))
LABEL_5:
    std::string::operator=(v20, (const std::string *)a4);
LABEL_6:
  memset(&v113, 0, sizeof(v113));
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(_QWORD *)(a5 + 8))
      goto LABEL_21;
  }
  else if (!*(_BYTE *)(a5 + 23))
  {
    goto LABEL_21;
  }
  kaldi::SplitStringToIntegers<int>(a5, ":", 0, &v113);
  std::__sort<std::__less<int,int> &,int *>();
  if (v113.__begin_ != v113.__end_)
  {
    for (i = v113.__begin_ + 1; i != v113.__end_; ++i)
    {
      v23 = *(i - 1);
      v22 = *i;
      if (v22 <= v23)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v112);
        v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v112, (uint64_t)"Invalid set to freeze(non-unique components): --freeze-components ", 69);
        v25 = *(char *)(a5 + 23);
        if (v25 >= 0)
          v26 = a5;
        else
          v26 = *(_QWORD *)a5;
        if (v25 >= 0)
          v27 = *(unsigned __int8 *)(a5 + 23);
        else
          v27 = *(_QWORD *)(a5 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, v26, v27);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v112);
      }
    }
  }
LABEL_21:
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v112);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v111);
  kaldi::nnet1::Nnet::Read((uint64_t)v111, a10);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)v110, (const kaldi::nnet1::Nnet *)v111);
  if (*(char *)(a5 + 23) < 0)
  {
    if (!*(_QWORD *)(a5 + 8))
      goto LABEL_26;
    goto LABEL_25;
  }
  if (*(_BYTE *)(a5 + 23))
LABEL_25:
    kaldi::nnet1::Nnet::SetFreezeComponents(v111, (int **)&v113);
LABEL_26:
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet *)v111, a1, 1);
  if (*(float *)&a2 >= 0.0)
    kaldi::nnet1::Nnet::SetGradientNormalization(v111, HIDWORD(a2), a3 & 1, (a3 >> 8) & 1, *(float *)&a2);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Using workspace of size: ", 25);
    v28 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)" KBs", 4);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v70);
  }
  kaldi::nnet1::Nnet::SetWorkspaceSize((kaldi::nnet1::Nnet *)v111, 10485760);
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
    kaldi::nnet1::Nnet::Info((uint64_t *)__p, (kaldi::nnet1::Nnet *)v111);
    if ((v88 & 0x80u) == 0)
      v29 = __p;
    else
      v29 = (void **)__p[0];
    if ((v88 & 0x80u) == 0)
      v30 = v88;
    else
      v30 = (uint64_t)__p[1];
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)v29, v30);
    if ((char)v88 < 0)
      operator delete(__p[0]);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v70);
  }
  if ((char)v116 < 0)
  {
    if (v115 != 3)
    {
      if (v115 == 4 && *(_DWORD *)v114 == 1953391992)
        goto LABEL_44;
      goto LABEL_96;
    }
    v34 = v114;
  }
  else
  {
    if (v116 != 3)
    {
      if (v116 == 4 && (_DWORD)v114 == 1953391992)
      {
LABEL_44:
        v32 = operator new();
        *(_QWORD *)v32 = &off_1E5D31CE0;
        *(_QWORD *)(v32 + 120) = 0;
        *(_QWORD *)(v32 + 128) = 0;
        *(_QWORD *)(v32 + 136) = 0;
        *(_QWORD *)(v32 + 144) = 0;
        v33 = 0uLL;
        *(_OWORD *)(v32 + 8) = 0u;
        *(_OWORD *)(v32 + 24) = 0u;
        *(_OWORD *)(v32 + 40) = 0u;
        *(_OWORD *)(v32 + 56) = 0u;
        *(_OWORD *)(v32 + 72) = 0u;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_QWORD *)(v32 + 104) = 0;
        *(_QWORD *)(v32 + 112) = &unk_1E5D341C8;
        *(_QWORD *)(v32 + 152) = 0;
        *(_QWORD *)(v32 + 160) = 0;
        *(_OWORD *)(v32 + 176) = 0u;
        *(_OWORD *)(v32 + 192) = 0u;
        *(_QWORD *)(v32 + 168) = &unk_1E5D34170;
        *(_BYTE *)(v32 + 208) = 0;
        *(_OWORD *)(v32 + 224) = 0u;
        *(_OWORD *)(v32 + 240) = 0u;
        *(_QWORD *)(v32 + 216) = &unk_1E5D34170;
        *(_BYTE *)(v32 + 256) = 0;
        *(_QWORD *)(v32 + 280) = 0;
        *(_QWORD *)(v32 + 288) = 0;
        *(_QWORD *)(v32 + 264) = &unk_1E5D341C8;
        *(_QWORD *)(v32 + 272) = 0;
        *(_OWORD *)(v32 + 296) = 0u;
        *(_OWORD *)(v32 + 312) = 0u;
        *(_OWORD *)(v32 + 328) = 0u;
        *(_OWORD *)(v32 + 344) = 0u;
        *(_OWORD *)(v32 + 360) = 0u;
        *(_OWORD *)(v32 + 376) = 0u;
        *(_OWORD *)(v32 + 392) = 0u;
        *(_OWORD *)(v32 + 408) = 0u;
        *(_OWORD *)(v32 + 424) = 0u;
        *(_OWORD *)(v32 + 440) = 0u;
        *(_QWORD *)(v32 + 456) = 0;
        goto LABEL_57;
      }
LABEL_96:
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v70);
      v65 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"Unknown objective function code : ", 34);
      if ((v116 & 0x80u) == 0)
        v66 = (_DWORD **)&v114;
      else
        v66 = (_DWORD **)v114;
      if ((v116 & 0x80u) == 0)
        v67 = v116;
      else
        v67 = v115;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v65, (uint64_t)v66, v67);
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v70);
    }
    v34 = (unsigned __int16 *)&v114;
  }
  v35 = *v34;
  v36 = *((unsigned __int8 *)v34 + 2);
  if (v35 != 29549 || v36 != 101)
    goto LABEL_96;
  v32 = operator new();
  *(_QWORD *)v32 = &off_1E5D31AC8;
  *(_QWORD *)(v32 + 72) = 0;
  *(_QWORD *)(v32 + 80) = 0;
  v33 = 0uLL;
  *(_OWORD *)(v32 + 8) = 0u;
  *(_OWORD *)(v32 + 24) = 0u;
  *(_OWORD *)(v32 + 40) = 0u;
  *(_QWORD *)(v32 + 56) = 0;
  *(_QWORD *)(v32 + 64) = &unk_1E5D341C8;
  *(_OWORD *)(v32 + 104) = 0u;
  *(_OWORD *)(v32 + 120) = 0u;
  *(_QWORD *)(v32 + 88) = 0;
  *(_QWORD *)(v32 + 96) = &unk_1E5D34170;
  *(_BYTE *)(v32 + 136) = 0;
  *(_QWORD *)(v32 + 160) = 0;
  *(_QWORD *)(v32 + 168) = 0;
  *(_QWORD *)(v32 + 144) = &unk_1E5D341C8;
  *(_QWORD *)(v32 + 152) = 0;
  *(_QWORD *)(v32 + 176) = 0;
  *(_QWORD *)(v32 + 184) = 0;
  *(_QWORD *)(v32 + 192) = 0;
LABEL_57:
  v108 = v33;
  v107 = v33;
  v106 = (int32x2_t)&unk_1E5D34170;
  v109 = 0;
  v104 = v33;
  v103 = v33;
  v102 = (int32x2_t)&unk_1E5D34170;
  v105 = 0;
  v100 = v33;
  v99 = v33;
  v98 = (int32x2_t)&unk_1E5D34170;
  v101 = 0;
  v96[24] = 1;
  kaldi::Timer::Reset((kaldi::Timer *)v96, v31);
  v97 = 0;
  v38 = v117;
  v39 = v118;
  kaldi::nnet1::MatrixRandomizer::MatrixRandomizer((uint64_t)__p, &v117, -1, 1u, 0);
  memset(v81, 0, sizeof(v81));
  v82 = 0;
  v83 = v38;
  v85 = 1;
  v84 = v39;
  v86 = v39;
  memset(v75, 0, sizeof(v75));
  v76 = 0;
  v77 = v38;
  v79 = 1;
  v78 = v39;
  v80 = v39;
  if (a6 >= 1)
  {
    v69 = 0;
    do
    {
      v93 = 0;
      v82 = 0;
      v76 = 0;
      if (kaldi::g_kaldi_verbose_level >= 3)
      {
        kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v70, 3);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v70, (uint64_t)"At iteration ", 13);
        v40 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)" of ", 4);
        std::ostream::operator<<();
        kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v70);
      }
      v41 = *a7;
      if (a7[1] != *a7)
      {
        v42 = 0;
        do
        {
          kaldi::Matrix<float>::Matrix((uint64_t)v74, 1, (*(_QWORD *)(v41 + 24 * v42 + 8) - *(_QWORD *)(v41 + 24 * v42)) >> 2, 0, 0);
          v43 = (*(_QWORD *)(*a7 + 24 * v42 + 8) - *(_QWORD *)(*a7 + 24 * v42)) >> 2;
          memset(__dst, 0, sizeof(__dst));
          kaldi::Vector<float>::Resize(__dst, v43, 0);
          v44 = *a7 + 24 * v42;
          v45 = *(_BYTE **)v44;
          v46 = *(_BYTE **)(v44 + 8);
          if (v46 != v45)
            memmove(__dst[0], v45, v46 - v45);
          kaldi::MatrixBase<float>::CopyColsFromVec((uint64_t)v74, (uint64_t)__dst);
          v47 = (uint64_t ***)(*a8 + 24 * v42);
          memset(v72, 0, sizeof(v72));
          std::vector<std::vector<std::pair<int,float>>>::__init_with_size[abi:ne180100]<std::vector<std::pair<int,float>>*,std::vector<std::pair<int,float>>*>(v72, *v47, v47[1], 0xAAAAAAAAAAAAAAABLL * (v47[1] - *v47));
          memset(v71, 0, sizeof(v71));
          v48 = kaldi::MatrixBase<float>::NumRows((uint64_t)v74);
          kaldi::Vector<float>::Resize(v71, v48, 1);
          kaldi::VectorBase<float>::Set((uint64_t)v71, 1.0);
          kaldi::CuMatrix<float>::CuMatrix<float>(v70, v74, 111, 0);
          kaldi::nnet1::Nnet::Feedforward(v112, (uint64_t)v70, &v106, -1, 0);
          kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v70);
          kaldi::nnet1::MatrixRandomizer::AddData<kaldi::CuMatrix<float>>((int32x2_t *)__p, (uint64_t)&v106);
          kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::AddData((uint64_t)v75, v72);
          kaldi::nnet1::VectorRandomizer::AddData((void **)v81, (uint64_t)v71);
          if (0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3) - 1 == v42 || !(_DWORD)v93 && SHIDWORD(v93) >= v94)
          {
            while (HIDWORD(v93) - (int)v93 >= v95)
            {
              v49 = (int32x2_t *)kaldi::nnet1::MatrixRandomizer::Value((kaldi::nnet1::MatrixRandomizer *)__p, 0, 0);
              v50 = kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Value((uint64_t)v75);
              v51 = kaldi::nnet1::VectorRandomizer::Value((void **)v81);
              kaldi::nnet1::Nnet::Propagate<kaldi::CuSubMatrix<float>>((uint64_t *)v111, v49, &v102, 0);
              (*(void (**)(uint64_t, int32x2_t *, uint64_t, int32x2_t *, char *))(*(_QWORD *)v32 + 16))(v32, &v102, v50, &v98, v51);
              kaldi::CuVector<float>::CuVector(v70, v51, 0);
              kaldi::CuMatrixBase<float>::MulRowsVec((uint64_t)&v98, (uint64_t)v70);
              v70[0] = (void **)&unk_1E5D341C8;
              kaldi::CuVector<float>::Destroy((uint64_t)v70);
              kaldi::nnet1::Nnet::Backpropagate(v111, &v98, 0, 0);
              kaldi::nnet1::Nnet::Update((const void ***)v111, 0, 0xFFFFFFFFLL);
              kaldi::nnet1::MatrixRandomizer::Next((uint64_t)__p);
              kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Next((uint64_t)v75);
              kaldi::nnet1::StdVectorRandomizer<std::vector<std::pair<int,float>>>::Next((uint64_t)v81);
            }
          }
          kaldi::Vector<float>::Destroy((uint64_t)v71);
          v70[0] = (void **)v72;
          std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v70);
          kaldi::Vector<float>::Destroy((uint64_t)__dst);
          kaldi::Matrix<float>::~Matrix((uint64_t)v74);
          ++v42;
          v41 = *a7;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3) > v42);
      }
      v52 = (*(float (**)(uint64_t, _QWORD))(*(_QWORD *)v32 + 64))(v32, 0);
      v53 = v52;
      v55 = *(float **)(a12 + 8);
      v54 = *(_QWORD *)(a12 + 16);
      if ((unint64_t)v55 >= v54)
      {
        v57 = *(float **)a12;
        v58 = ((uint64_t)v55 - *(_QWORD *)a12) >> 2;
        v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v60 = v54 - (_QWORD)v57;
        if (v60 >> 1 > v59)
          v59 = v60 >> 1;
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL)
          v61 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v61 = v59;
        if (v61)
        {
          v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a12 + 16, v61);
          v57 = *(float **)a12;
          v55 = *(float **)(a12 + 8);
        }
        else
        {
          v62 = 0;
        }
        v63 = (float *)&v62[4 * v58];
        *v63 = v53;
        v56 = v63 + 1;
        while (v55 != v57)
        {
          v64 = *((_DWORD *)v55-- - 1);
          *((_DWORD *)v63-- - 1) = v64;
        }
        *(_QWORD *)a12 = v63;
        *(_QWORD *)(a12 + 8) = v56;
        *(_QWORD *)(a12 + 16) = &v62[4 * v61];
        if (v57)
          operator delete(v57);
      }
      else
      {
        *v55 = v52;
        v56 = v55 + 1;
      }
      *(_QWORD *)(a12 + 8) = v56;
      ++v69;
    }
    while (v69 != a6);
  }
  std::vector<std::vector<int>>::__clear[abi:ne180100](a11);
  kaldi::nnet1::Nnet::ComputeNnetDelta((uint64_t *)v111, (const kaldi::nnet1::Nnet *)v110, a11, a13, (kaldi::nnet1::Nnet *)v70);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v70);
  v70[0] = (void **)&v75[1] + 1;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v70);
  v70[0] = (void **)v75;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v70);
  kaldi::Vector<float>::Destroy((uint64_t)&v81[1] + 8);
  kaldi::Vector<float>::Destroy((uint64_t)v81);
  if (v91)
    free(v91);
  v91 = 0;
  v90[3] = 0;
  v92 = 0;
  v70[0] = (void **)v90;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](v70);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v89);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)__p);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v98);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v102);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v106);
  (*(void (**)(uint64_t))(*(_QWORD *)v32 + 88))(v32);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v110);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v111);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)v112);
  if (v113.__begin_)
  {
    v113.__end_ = v113.__begin_;
    operator delete(v113.__begin_);
  }
  if ((char)v116 < 0)
    operator delete(v114);
}

void sub_1ADD3B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;

  kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)&a12);
  a12 = (void **)&STACK[0x218];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a12);
  a12 = (void **)&STACK[0x200];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x268]);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x250]);
  if (STACK[0x320])
    free((void *)STACK[0x320]);
  STACK[0x320] = 0;
  STACK[0x318] = 0;
  STACK[0x328] = 0;
  a12 = (void **)&STACK[0x300];
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2D0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2A0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x378]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3A8]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3D8]);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x408]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x580]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x6F8]);
  v15 = *(void **)(v13 - 176);
  if (v15)
  {
    *(_QWORD *)(v13 - 168) = v15;
    operator delete(v15);
  }
  if (*(char *)(v13 - 129) < 0)
    operator delete(*(void **)(v13 - 152));
  _Unwind_Resume(a1);
}

void sub_1ADD3B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  void *v15;

  a12 = (uint64_t)&STACK[0x218];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  a12 = (uint64_t)&STACK[0x200];
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x268]);
  kaldi::Vector<float>::Destroy((uint64_t)&STACK[0x250]);
  if (STACK[0x320])
    free((void *)STACK[0x320]);
  STACK[0x320] = 0;
  STACK[0x318] = 0;
  STACK[0x328] = 0;
  a12 = (uint64_t)&STACK[0x300];
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2D0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x2A0]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x378]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3A8]);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&STACK[0x3D8]);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 88))(v12);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x408]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x580]);
  kaldi::nnet1::Nnet::~Nnet((kaldi::nnet1::Nnet *)&STACK[0x6F8]);
  v15 = *(void **)(v13 - 176);
  if (v15)
  {
    *(_QWORD *)(v13 - 168) = v15;
    operator delete(v15);
  }
  if (*(char *)(v13 - 129) < 0)
    operator delete(*(void **)(v13 - 152));
  _Unwind_Resume(a1);
}

void sub_1ADD3B1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a68;

  kaldi::Matrix<float>::~Matrix((uint64_t)&a68);
  JUMPOUT(0x1ADD3B24CLL);
}

void kaldi::nnet1::MatrixRandomizer::AddData<kaldi::CuMatrix<float>>(int32x2_t *a1, uint64_t a2)
{
  int v4;
  int v5;
  int32x2_t v6;
  __int32 v7;
  __int32 v8;
  int32x2_t v9;
  int v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int32x2_t v15;
  int32x2_t v16;
  __int32 v17;
  uint64_t v18;
  int v19;
  int32x2_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  __int128 v25;
  __int128 v26;

  if (!a1[2].i32[0])
  {
    kaldi::CuMatrix<float>::Resize(a1, (a1[19].i32[0] + 6000), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuMatrix<float>::Resize(a1 + 6, (a1[19].i32[0] + 6000), *(unsigned int *)(a2 + 16), 1, 0);
    kaldi::CuArray<int>::Resize((uint64_t)&a1[15], a1[19].i32[0] + 6000, 1);
  }
  v4 = a1[18].i32[0];
  v5 = a1[18].i32[1];
  if (v4 >= 1)
  {
    v5 -= v4;
    if (v5 >= 1)
    {
      v6 = a1[1];
      v7 = a1[3].i32[0];
      v8 = a1[3].i32[1];
      v9 = a1[4];
      DWORD2(v22) = a1[2].i32[0];
      HIDWORD(v22) = v5;
      *(_QWORD *)&v23 = __PAIR64__(v8, v7);
      *((int32x2_t *)&v23 + 1) = v9;
      v21 = &unk_1E5D29D40;
      *(int32x2_t *)&v22 = v6;
      v10 = v7 * v4;
      *((_QWORD *)&v25 + 1) = __PAIR64__(v5, DWORD2(v22));
      LODWORD(v26) = v7;
      DWORD1(v26) = v8 - v10;
      *((int32x2_t *)&v26 + 1) = v9;
      v24 = &unk_1E5D29D40;
      *(_QWORD *)&v25 = *(_QWORD *)&v6 + 4 * v10;
      kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v21, (uint64_t)&v24, 111);
      v24 = &unk_1E5D29D40;
      v25 = 0u;
      v26 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
      v21 = &unk_1E5D29D40;
      v22 = 0u;
      v23 = 0u;
      quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
    }
    a1[18].i32[0] = 0;
    a1[18].i32[1] = v5;
  }
  v11 = *(_DWORD *)(a2 + 20);
  if (a1[2].i32[1] < v11 + v5)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
      v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v21, (uint64_t)"we should have allocated enough space, instead we get in ", 57);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"this expensive copy/resize on GPU. buffer size ", 47);
      v13 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)" , current end ", 15);
      v14 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)" , incoming data size ", 22);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v21);
    }
    kaldi::CuMatrix<float>::CuMatrix(&v21, a1, 111);
    kaldi::CuMatrix<float>::Resize(a1, (a1[18].i32[1] + *(_DWORD *)(a2 + 20) + 1000), a1[2].u32[0], 1, 0);
    v15 = a1[1];
    v16 = a1[4];
    DWORD2(v25) = a1[2].i32[0];
    HIDWORD(v25) = HIDWORD(v22);
    *(int32x2_t *)&v26 = a1[3];
    *((int32x2_t *)&v26 + 1) = v16;
    v24 = &unk_1E5D29D40;
    *(int32x2_t *)&v25 = v15;
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v24, (uint64_t)&v21, 111);
    v24 = &unk_1E5D29D40;
    v25 = 0u;
    v26 = 0u;
    quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v24);
    kaldi::CuMatrix<float>::~CuMatrix((uint64_t)&v21);
    v5 = a1[18].i32[1];
    v11 = *(_DWORD *)(a2 + 20);
  }
  v17 = a1[3].i32[0];
  v18 = *(_QWORD *)&a1[1] + 4 * v17 * v5;
  v19 = a1[3].i32[1] - v17 * v5;
  v20 = a1[4];
  DWORD2(v22) = a1[2].i32[0];
  HIDWORD(v22) = v11;
  *(_QWORD *)&v23 = __PAIR64__(v19, v17);
  *((int32x2_t *)&v23 + 1) = v20;
  v21 = &unk_1E5D29D40;
  *(_QWORD *)&v22 = v18;
  kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)&v21, a2, 111);
  v21 = &unk_1E5D29D40;
  v22 = 0u;
  v23 = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&v21);
  a1[18].i32[1] += *(_DWORD *)(a2 + 20);
}

void sub_1ADD3B610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  _OWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  uint64_t v13;

  *(_QWORD *)(v13 - 104) = v11;
  *v12 = 0u;
  v12[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)(v13 - 104));
  a10 = v11;
  *v10 = 0u;
  v10[1] = 0u;
  quasar::Bitmap::~Bitmap((quasar::Bitmap *)&a10);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::EnsureCorrs(kaldi::nnet1::AffineTransform *this)
{
  int v2;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t i;
  int32x2_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int32x2_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if (!*((_BYTE *)this + 232))
  {
    v2 = *((_DWORD *)this + 61);
    v3 = *((_DWORD *)this + 20);
    if (v3 > 1)
      v4 = v3 + 1;
    else
      v4 = 1;
    v5 = (_QWORD *)((char *)this + 136);
    std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::resize((uint64_t)this + 136, v4);
    v6 = (_QWORD *)((char *)this + 160);
    std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::resize((uint64_t)this + 160, v4);
    std::vector<kaldi::CuMatrix<float>>::resize((uint64_t *)this + 23, v4);
    std::vector<kaldi::CuVector<float>>::resize((uint64_t *)this + 26, v4);
    if (v4 >= 1)
    {
      for (i = 0; i != v4; ++i)
      {
        v8 = (int32x2_t *)operator new();
        v9 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
        v10 = kaldi::nnet1::AffineTransform::Linearity(this);
        kaldi::CuMatrix<float>::CuMatrix(v8, v9, *(unsigned int *)(v10 + 16), 0, 0, 0);
        v11 = *(_QWORD *)(*v5 + 8 * i);
        *(_QWORD *)(*v5 + 8 * i) = v8;
        if (v11)
          (*(void (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11);
        v12 = (_QWORD *)operator new();
        v13 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
        *v12 = &unk_1E5D341C8;
        v12[1] = 0;
        v12[2] = 0;
        v12[3] = 0;
        kaldi::CuVector<float>::Resize((uint64_t)v12, v13, 0);
        v14 = *(_QWORD *)(*v6 + 8 * i);
        *(_QWORD *)(*v6 + 8 * i) = v12;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
        if ((v2 & 0xFFFFFFFE) == 2)
        {
          v15 = (int32x2_t *)(*((_QWORD *)this + 23) + 48 * i);
          v16 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
          v17 = kaldi::nnet1::AffineTransform::Linearity(this);
          kaldi::CuMatrix<float>::Resize(v15, v16, *(unsigned int *)(v17 + 16), 1, 0);
          v18 = *((_QWORD *)this + 26) + 32 * i;
          v19 = kaldi::nnet1::AffineTransform::Bias(this);
          kaldi::CuVector<float>::Resize(v18, *(unsigned int *)(v19 + 16), 1);
          if (*((_DWORD *)this + 61) == 3)
          {
            kaldi::CuMatrixBase<float>::Set(*((_QWORD *)this + 23) + 48 * i, 1.0);
            kaldi::CuVectorBase<float>::Set(*((_QWORD *)this + 26) + 32 * i, 1.0);
          }
        }
      }
    }
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 256), v4);
    if (*((float *)this + 63) > 0.0)
    {
      v20 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
      v21 = kaldi::nnet1::AffineTransform::Linearity(this);
      kaldi::CuMatrix<float>::Resize((int32x2_t *)this + 38, v20, *(unsigned int *)(v21 + 16), 1, 0);
    }
    *((_BYTE *)this + 232) = 1;
  }
}

void sub_1ADD3B910(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x1081C4072235B19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::LinearityCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 17);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 17);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 18) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "linearity_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::AffineTransform::BiasCorr(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 20);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[34];

  v2 = *((_QWORD *)this + 20);
  if (a2 >= (unint64_t)((*((_QWORD *)this + 21) - v2) >> 3))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_.size() > batch_idx");
    goto LABEL_6;
  }
  result = *(_QWORD *)(v2 + 8 * a2);
  if (!result)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v4);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v4, "bias_corr_[batch_idx]");
LABEL_6:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v4);
  }
  return result;
}

uint64_t kaldi::nnet1::MatrixRandomizer::MatrixRandomizer(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, uint64_t a5)
{
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[34];

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D34170;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = &unk_1E5D34170;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 152) = 0x157100008000;
  v8 = a1 + 152;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 160) = 256;
  *(_DWORD *)(a1 + 164) = a3;
  *(_DWORD *)(a1 + 168) = a4;
  *(_QWORD *)(a1 + 32) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a5;
  *(_QWORD *)(a1 + 136) = a5;
  *(_QWORD *)(a1 + 144) = 0;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"The GPU ID for the matrix randomizer is ", 40);
    std::ostream::operator<<();
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v11);
    a4 = *(_DWORD *)(a1 + 168);
  }
  v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)v8 = v9;
  *(_DWORD *)(a1 + 172) = *(_DWORD *)(a1 + 160) / (int)a4;
  std::vector<kaldi::CuSubMatrix<float>>::resize(v7, a4);
  return a1;
}

void sub_1ADD3BB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  _QWORD *v9;
  uint64_t v10;
  void *v12;

  v12 = (void *)v9[16];
  if (v12)
    free(v12);
  v9[15] = 0;
  v9[16] = 0;
  v9[17] = 0;
  std::vector<kaldi::CuSubMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  kaldi::CuMatrix<float>::~CuMatrix(v10);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v9);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<kaldi::CuSubMatrix<float>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;

  v2 = result;
  v3 = result[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<kaldi::CuSubMatrix<float>>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 40 * a2;
    if (v3 != v7)
    {
      v8 = (_QWORD *)(v3 - 40);
      v9 = (_QWORD *)(v3 - 40);
      do
      {
        v10 = *v9;
        v9 -= 5;
        result = (uint64_t *)(*(uint64_t (**)(_QWORD *))(v10 + 16))(v8);
        v11 = v8 == (_QWORD *)v7;
        v8 = v9;
      }
      while (!v11);
    }
    v2[1] = v7;
  }
  return result;
}

uint64_t std::vector<kaldi::CuSubMatrix<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      v14 = 40 * a2;
      v15 = (_OWORD *)(v7 + 8);
      do
      {
        *v15 = 0uLL;
        v15[1] = 0uLL;
        *((_QWORD *)v15 - 1) = &unk_1E5D29D40;
        v15 = (_OWORD *)((char *)v15 + 40);
        v14 -= 40;
      }
      while (v14);
    }
    else
    {
      v13 = *(_QWORD *)(result - 8);
    }
    a1[1] = v13;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v23 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::PronChoice>>(result, v11);
    else
      v12 = 0;
    v19 = v12;
    v20 = &v12[40 * v8];
    v22 = &v12[40 * v11];
    v16 = &v20[40 * a2];
    v17 = 40 * a2;
    v18 = v20 + 8;
    do
    {
      *v18 = 0uLL;
      v18[1] = 0uLL;
      *((_QWORD *)v18 - 1) = &unk_1E5D29D40;
      v18 = (_OWORD *)((char *)v18 + 40);
      v17 -= 40;
    }
    while (v17);
    v21 = v16;
    std::vector<kaldi::CuSubMatrix<float>>::__swap_out_circular_buffer(a1, &v19);
    return std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)&v19);
  }
  return result;
}

void sub_1ADD3BDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<kaldi::CuSubMatrix<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

char *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>,std::__wrap_iter<kaldi::nnet1::RecurrentBaseComponent **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 3);
    if (v14 >> 61)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 3;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 2 > v14)
      v14 = v16 >> 2;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8)
      v17 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[8 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[8 * v17];
    v29 = 8 * a5;
    v30 = &v28[8 * a5];
    do
    {
      v31 = *(_QWORD *)v7;
      v7 += 8;
      *(_QWORD *)v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<long long>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    v21 = &__src[8 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[8 * a5];
    v25 = &v23[-8 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_QWORD *)v25;
        v25 += 8;
        *(_QWORD *)v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[8 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_1ADD3BF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41C30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D41C30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<kaldi::nnet1::Nnet1InferenceNet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *kaldi::nnet1::Nnet1InferenceNet::Nnet1InferenceNet(_QWORD *a1, uint64_t a2, int a3, int a4, int a5)
{
  kaldi::nnet1::Nnet *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;
  int v19;
  int v20;

  *a1 = &off_1E5D2D448;
  v10 = (kaldi::nnet1::Nnet *)(a1 + 1);
  kaldi::nnet1::Nnet::Nnet((kaldi::nnet1::Nnet *)(a1 + 1));
  a1[49] = 0;
  a1[50] = 0;
  a1[51] = 0;
  if (a3)
  {
    fst::FstReadOptions::FstReadOptions(__p, a2, 0, 0, 0);
    v19 = 2;
    if (a5)
      v20 = 1065353216;
    kaldi::nnet1::Nnet::ReadMapped((uint64_t)v10, (uint64_t)__p);
    if (v18 < 0)
      operator delete(__p[0]);
  }
  else
  {
    kaldi::nnet1::Nnet::Read((uint64_t)v10, a2);
  }
  if (a4)
  {
    v11 = *(_QWORD *)(a1[1] + 8 * ((((a1[2] - a1[1]) << 29) - 0x100000000) >> 32));
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v11 + 24))(v11) == 513)
    {
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"Removing softmax from the nnet ", 31);
        v13 = *(char *)(a2 + 23);
        if (v13 >= 0)
          v14 = a2;
        else
          v14 = *(_QWORD *)a2;
        if (v13 >= 0)
          v15 = *(unsigned __int8 *)(a2 + 23);
        else
          v15 = *(_QWORD *)(a2 + 8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, v14, v15);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)__p);
      }
      kaldi::nnet1::Nnet::RemoveComponent(v10, ((a1[2] - a1[1]) >> 3) - 1);
    }
  }
  kaldi::nnet1::Nnet1InferenceNet::Init((kaldi::nnet1::Nnet1InferenceNet *)a1);
  return a1;
}

void sub_1ADD3C19C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  quasar::Bitmap *v14;
  kaldi::nnet1::Nnet *v15;
  void *v17;

  v17 = (void *)*((_QWORD *)v14 + 49);
  if (v17)
  {
    *((_QWORD *)v14 + 50) = v17;
    operator delete(v17);
  }
  kaldi::nnet1::Nnet::~Nnet(v15);
  quasar::Bitmap::~Bitmap(v14);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::Nnet1InferenceNet::Init(kaldi::nnet1::Nnet1InferenceNet *this)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void (**v11)(kaldi::nnet1::RecurrentNnetTrainOptions *__hidden);
  __int128 v12;
  int v13;
  uint64_t v14;
  __int16 v15;
  char v16;
  void *v17;
  uint64_t v18;

  v12 = xmmword_1AE13F660;
  v13 = -1082130432;
  v15 = 0;
  v16 = 0;
  v11 = &off_1E5D305B8;
  v17 = &unk_1E5D305D8;
  v14 = 0x100000003;
  v18 = 0x100000001;
  kaldi::nnet1::Nnet::SetTrainOptions((kaldi::nnet1::Nnet1InferenceNet *)((char *)this + 8), (const kaldi::nnet1::NnetTrainOptions *)&v11, 1);
  v2 = *((_QWORD *)this + 1);
  v3 = (unint64_t)(*((_QWORD *)this + 2) - v2) >> 3;
  *((_DWORD *)this + 96) = v3 - 1;
  if ((int)v3 <= 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"last_component_idx_ >= 0", 24);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v9);
  }
  *((_QWORD *)this + 52) = *(_QWORD *)(v2 + 8 * (v3 - 1));
  v9 = 0uLL;
  v10 = 0;
  std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(&v9, *((const void **)this + 4), *((_QWORD *)this + 5), (uint64_t)(*((_QWORD *)this + 5) - *((_QWORD *)this + 4)) >> 3);
  v4 = (void *)*((_QWORD *)this + 49);
  if (v4)
  {
    *((_QWORD *)this + 50) = v4;
    operator delete(v4);
  }
  *(_OWORD *)((char *)this + 392) = v9;
  *((_QWORD *)this + 51) = v10;
  v5 = *((_QWORD *)this + 1);
  v6 = *((_QWORD *)this + 2) - v5;
  if ((int)(v6 >> 3) >= 1)
  {
    v7 = 0;
    v8 = (v6 >> 3);
    do
      *(_BYTE *)(*(_QWORD *)(v5 + 8 * v7++) + 17) = 1;
    while (v8 != v7);
  }
}

_QWORD *std::vector<kaldi::CuMatrix<float>>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<fst::ReverseArc<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = v4 + 48 * a2;
    v6 = 48 * a2;
    do
    {
      *(_OWORD *)(v4 + 24) = 0uLL;
      *(_OWORD *)(v4 + 8) = 0uLL;
      *(_QWORD *)v4 = &unk_1E5D34170;
      *(_BYTE *)(v4 + 40) = 0;
      v4 += 48;
      v6 -= 48;
    }
    while (v6);
    a1[1] = v5;
  }
  return a1;
}

void sub_1ADD3C3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<kaldi::nnet1::RecurrentBaseComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::RecurrentBaseComponent **,kaldi::nnet1::RecurrentBaseComponent **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADD3C44C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<kaldi::nnet1::HistoricalComponent *>::__init_with_size[abi:ne180100]<kaldi::nnet1::HistoricalComponent **,kaldi::nnet1::HistoricalComponent **>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<kaldi::CuWorkspace *>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1ADD3C4C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t *std::__copy_unaligned[abi:ne180100]<std::vector<BOOL>,true>@<X0>(unint64_t *result@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  int v16;
  unint64_t v17;
  unint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;

  v6 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
  if (v6 <= 0)
  {
    v18 = *(unint64_t **)a5;
    v19 = *(_DWORD *)(a5 + 8);
  }
  else
  {
    if (a2)
    {
      v7 = a2;
      if (v6 >= (unint64_t)(64 - a2))
        v8 = 64 - a2;
      else
        v8 = a4 - (unint64_t)a2 + 8 * (a3 - (_QWORD)result);
      v6 -= v8;
      v9 = (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v8)) & (-1 << a2) & *result;
      v10 = *(unsigned int *)(a5 + 8);
      if (v8 >= (64 - v10))
        v11 = (64 - v10);
      else
        v11 = v8;
      v12 = *(unint64_t **)a5;
      v13 = v9 >> (a2 - v10);
      v14 = v10 >= a2;
      v16 = v10 - a2;
      v15 = v16 != 0 && v14;
      v17 = v9 << v16;
      if (!v15)
        v17 = v13;
      *v12 = **(_QWORD **)a5 & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v10 - v11)) & (-1 << v10)) | v17;
      v18 = (unint64_t *)((char *)v12 + (((v11 + v10) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v10 + (_BYTE)v11) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v20 = v8 - v11;
      if (v20 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v20) | (v9 >> (v11 + v7));
        *(_DWORD *)(a5 + 8) = v20;
        v19 = v20;
      }
      ++result;
    }
    else
    {
      v19 = *(_DWORD *)(a5 + 8);
      v18 = *(unint64_t **)a5;
    }
    v21 = 64 - v19;
    v22 = -1 << v19;
    if (v6 >= 64)
    {
      v23 = *v18;
      do
      {
        v24 = v6;
        v26 = *result++;
        v25 = v26;
        *v18 = v23 & ~v22 | (v26 << v19);
        v27 = v18[1];
        ++v18;
        v23 = v27 & v22 | (v25 >> v21);
        *v18 = v23;
        v6 = v24 - 64;
      }
      while (v24 > 0x7F);
      *(_QWORD *)a5 = v18;
    }
    if (v6 >= 1)
    {
      v28 = *result & (0xFFFFFFFFFFFFFFFFLL >> -(char)v6);
      if (v6 >= (unint64_t)v21)
        v29 = 64 - v19;
      else
        v29 = v6;
      *v18 = *v18 & ~((0xFFFFFFFFFFFFFFFFLL >> (v21 - v29)) & v22) | (v28 << v19);
      v18 = (unint64_t *)((char *)v18 + (((v29 + (unint64_t)v19) >> 3) & 0x3FFFFFF8));
      *(_QWORD *)a5 = v18;
      v19 = ((_BYTE)v19 + (_BYTE)v29) & 0x3F;
      *(_DWORD *)(a5 + 8) = v19;
      v30 = v6 - v29;
      if (v30 >= 1)
      {
        *v18 = *v18 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v30) | (v28 >> v29);
        *(_DWORD *)(a5 + 8) = v30;
        v19 = v30;
      }
    }
  }
  *(_QWORD *)a6 = v18;
  *(_DWORD *)(a6 + 8) = v19;
  return result;
}

void std::vector<std::vector<kaldi::CuMatrix<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(&v15);
  }
}

void sub_1ADD3C838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<kaldi::CuMatrix<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<kaldi::CuMatrix<float>>>,std::reverse_iterator<std::vector<kaldi::CuMatrix<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<kaldi::CuMatrix<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(v2, this);
  return v2;
}

void sub_1ADD3CAA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyQuantized8Bit((kaldi::nnet1::AffineTransform *)((char *)this - 88));
}

uint64_t kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(v2, this);
  return v2;
}

void sub_1ADD3CB10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40B6DC7CF1);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyQuantized16Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyQuantized16Bit((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

uint64_t kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  uint64_t v2;

  v2 = operator new();
  kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(v2, this);
  return v2;
}

void sub_1ADD3CB80(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10D1C40EF2100C4);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit(kaldi::nnet1::AffineTransform *this)
{
  return kaldi::nnet1::AffineTransform::CopyVectorwiseQuantized8Bit((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

void kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuMatrixBase<float>::AddVecToRows(a3, v8, 1.0, 0.0);
  v9 = *(_QWORD *)(a1 + 352);
  if (v9 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v9 + 48 * a4 + 20))
  {
    v11 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMat(a3, a2, CblasNoTrans, v11, CblasTrans, 1.0, 1.0);
  }
  else
  {
    v10 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a3, a2, CblasNoTrans, v10, CblasTrans, 1.0);
  }
  if (*(_BYTE *)(a1 + 128))
    kaldi::CuMatrixBase<float>::ApplySoftMaxPerRow(a3, a3);
}

float kaldi::nnet1::AffineTransform::PropagateFnc(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  float result;
  uint64_t v9;

  v6 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
  kaldi::CuVectorBase<float>::CopyFromVec(a3, v6);
  v7 = *(_QWORD *)(a1 + 352);
  if (v7 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v7 + 20))
  {
    v9 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
    kaldi::CuVectorBase<float>::AddMatVec((uint64_t)a3, v9, CblasNoTrans, a2, 1.0, 1.0);
  }
  else
  {
    kaldi::nnet1::Component::PropagateFnc(a1, a2, (uint64_t)a3);
  }
  if (*(_BYTE *)(a1 + 128))
    return kaldi::CuVectorBase<float>::ApplySoftMax((uint64_t)a3);
  return result;
}

void kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform(this);
  JUMPOUT(0x1AF44D190);
}

{
  quasar::Bitmap *v2;
  quasar::Bitmap *v3;
  quasar::Bitmap *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;

  *((_QWORD *)this + 11) = &unk_1E5D2C890;
  v2 = (kaldi::nnet1::AffineTransform *)((char *)this + 88);
  *((_QWORD *)this + 12) = &unk_1E5D2C8B8;
  v3 = (kaldi::nnet1::AffineTransform *)((char *)this + 96);
  *(_QWORD *)this = &off_1E5D2C750;
  *((_QWORD *)this + 13) = &unk_1E5D2C8E0;
  v4 = (kaldi::nnet1::AffineTransform *)((char *)this + 104);
  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator((void **)this + 47);
  v9 = (void **)((char *)this + 352);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)this + 304);
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v9 = (void **)((char *)this + 208);
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 184);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v9 = (void **)((char *)this + 136);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100](&v9);
  v7 = *((_QWORD *)this + 15);
  *((_QWORD *)this + 15) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  v8 = *((_QWORD *)this + 14);
  *((_QWORD *)this + 14) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  quasar::Bitmap::~Bitmap(v4);
  quasar::Bitmap::~Bitmap(v3);
  quasar::Bitmap::~Bitmap(v2);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(this);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::Copy(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform *v2;

  v2 = (kaldi::nnet1::AffineTransform *)operator new();
  kaldi::nnet1::AffineTransform::AffineTransform(v2, this);
  return v2;
}

void sub_1ADD3CDA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1AF44D190](v1, 0x10B1C409CA61EC0);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetType(kaldi::nnet1::AffineTransform *this)
{
  return 257;
}

uint64_t kaldi::nnet1::AffineTransform::CountZeroCorr(kaldi::nnet1::AffineTransform *this, int *a2, int *a3)
{
  int v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD v21[34];

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  v7 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  result = kaldi::nnet1::AffineTransform::Linearity(this);
  *a3 = v6 + *(_DWORD *)(result + 16) * v7;
  v9 = *((_QWORD *)this + 18) - *((_QWORD *)this + 17);
  if (v9)
  {
    v10 = *((_QWORD *)this + 21) - *((_QWORD *)this + 20);
    if (v10)
    {
      v11 = v9 >> 3;
      v12 = v10 >> 3;
      if (*((_DWORD *)this + 20) == 1)
        v13 = 0;
      else
        v13 = *((_DWORD *)this + 20);
      v14 = v12 - 1;
      if (v11 - 1 != v13 || v14 != v13)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)"Unexpected mismatch in indexes: ", 32);
        v19 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, (uint64_t)"  ", 2);
        v20 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v20, (uint64_t)"  ", 2);
        std::ostream::operator<<();
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v21);
      }
      v16 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v13);
      v17 = kaldi::CuMatrixBase<float>::CountZeros(v16);
      v18 = kaldi::nnet1::AffineTransform::BiasCorr(this, v13);
      result = kaldi::CuVectorBase<float>::CountZeros(v18);
      LODWORD(v9) = result + v17;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  *a2 = v9;
  return result;
}

void kaldi::nnet1::AffineTransform::VectorizeWeightsCorrs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  int v15;
  void *v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (*(_BYTE *)(a1 + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "Weights are already vectorized");
LABEL_32:
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v40);
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Performing vectorization of affine transform component", 54);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v40);
  }
  v8 = (uint64_t *)(a1 + 112);
  v9 = *(_DWORD *)(*(_QWORD *)(a1 + 112) + 16) * *(_DWORD *)(*(_QWORD *)(a1 + 112) + 20);
  v10 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16) + v9;
  if (v10 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "(nlinparams + bias_->Dim()) == NumParams()");
    goto LABEL_32;
  }
  kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 112), a2, (uint64_t *)&v40);
  v11 = (uint64_t)v40;
  v40 = 0;
  v12 = *v8;
  *v8 = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
    v13 = v40;
    v40 = 0;
    if (v13)
      (*(void (**)(void *))(*(_QWORD *)v13 + 24))(v13);
  }
  v14 = *(_QWORD *)(a3 + 8);
  v40 = &unk_1E5D29D70;
  v41 = v14;
  v43 = *(_QWORD *)(a3 + 24);
  v42 = v9;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v40, *(float *)(a1 + 236));
  v15 = *(_DWORD *)(a3 + 16) - v9;
  *(_QWORD *)(a3 + 8) += 4 * v9;
  *(_DWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(a1 + 120), a2, &v40);
  v16 = v40;
  v40 = 0;
  v17 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v16;
  if (v17)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 16))(v17);
    v18 = v40;
    v40 = 0;
    if (v18)
      (*(void (**)(void *))(*(_QWORD *)v18 + 16))(v18);
  }
  v19 = *(_DWORD *)(*(_QWORD *)(a1 + 120) + 16);
  v20 = *(_QWORD *)(a3 + 8);
  v40 = &unk_1E5D29D70;
  v41 = v20;
  v43 = *(_QWORD *)(a3 + 24);
  v42 = v19;
  kaldi::CuVectorBase<float>::Set((uint64_t)&v40, *(float *)(a1 + 240));
  v21 = *(int *)(*(_QWORD *)(a1 + 120) + 16);
  v22 = *(_DWORD *)(a3 + 16) - v21;
  *(_QWORD *)(a3 + 8) += 4 * v21;
  *(_DWORD *)(a3 + 16) = v22;
  *(_QWORD *)(a3 + 24) = 0;
  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  v23 = a4[1];
  v24 = (v23 - *a4) >> 5;
  if (v24 != (uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 3
    || v24 != (uint64_t)(*(_QWORD *)(a1 + 168) - *(_QWORD *)(a1 + 160)) >> 3)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "veccorrs->size() == linearity_corr_.size() && veccorrs->size() == bias_corr_.size()");
    goto LABEL_32;
  }
  if (v23 == *a4)
    goto LABEL_28;
  v25 = 0;
  do
  {
    v26 = *(_DWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, v25) + 20);
    v27 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * v25) + 16)
        + *(_DWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, v25) + 16) * v26;
    if (v27 != (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(&v40, "(LinearityCorr(ic).NumRows() * LinearityCorr(ic).NumCols() + bias_corr_[ic]->Dim()) == NumParams()");
      goto LABEL_32;
    }
    ++v25;
    v28 = *a4;
    v29 = a4[1];
  }
  while (v25 < (v29 - *a4) >> 5);
  if (v29 != v28)
  {
    v30 = 0;
    do
    {
      v31 = v28 + 32 * v30;
      kaldi::CuSubMatrix<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 136) + 8 * v30), v31, (uint64_t *)&v40);
      v32 = *(_QWORD *)(a1 + 136);
      v33 = v40;
      v40 = 0;
      v34 = *(_QWORD *)(v32 + 8 * v30);
      *(_QWORD *)(v32 + 8 * v30) = v33;
      if (v34)
        (*(void (**)(uint64_t))(*(_QWORD *)v34 + 24))(v34);
      v35 = v40;
      v40 = 0;
      if (v35)
        (*(void (**)(void *))(*(_QWORD *)v35 + 24))(v35);
      kaldi::CuSubVector<float>::CopyDataAndReplaceWithCuSub((uint64_t *)(*(_QWORD *)(a1 + 160) + 8 * v30), v31, &v40);
      v36 = *(_QWORD *)(a1 + 160);
      v37 = v40;
      v40 = 0;
      v38 = *(_QWORD *)(v36 + 8 * v30);
      *(_QWORD *)(v36 + 8 * v30) = v37;
      if (v38)
        (*(void (**)(uint64_t))(*(_QWORD *)v38 + 16))(v38);
      v39 = v40;
      v40 = 0;
      if (v39)
        (*(void (**)(void *))(*(_QWORD *)v39 + 16))(v39);
      ++v30;
      v28 = *a4;
    }
    while (v30 < (a4[1] - *a4) >> 5);
  }
LABEL_28:
  *(_BYTE *)(a1 + 16) = 1;
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v40);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v40, (uint64_t)"Done  vectorization of affine transform component", 49);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)&v40);
  }
}

void sub_1ADD3D324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&a9);
}

uint64_t kaldi::nnet1::AffineTransform::Info(kaldi::nnet1::AffineTransform *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  void *__p[2];
  unsigned __int8 v11;
  void *v12[2];
  unsigned __int8 v13;
  _QWORD v14[11];
  char v15;
  uint64_t v16;

  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v14);
  (*(void (**)(kaldi::nnet1::AffineTransform *, _QWORD *, _QWORD))(*(_QWORD *)this + 168))(this, v14, 0);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"\n linearity", 11);
  kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 14));
  if ((v13 & 0x80u) == 0)
    v3 = v12;
  else
    v3 = (void **)v12[0];
  if ((v13 & 0x80u) == 0)
    v4 = v13;
  else
    v4 = (uint64_t)v12[1];
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"\n bias", 6);
  kaldi::nnet1::MomentStatistics<float>(*((_QWORD *)this + 15));
  if ((v11 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v8 = v11;
  else
    v8 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
  if ((char)v11 < 0)
    operator delete(__p[0]);
  if ((char)v13 < 0)
    operator delete(v12[0]);
  std::stringbuf::str();
  v14[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v14 + *(_QWORD *)(v14[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v14[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v15 < 0)
    operator delete((void *)v14[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1AF44D094](&v16);
}

void sub_1ADD3D4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  std::ostringstream::~ostringstream((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InfoGradient(kaldi::nnet1::AffineTransform *this@<X0>, _QWORD *a2@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  void **v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void **v22;
  std::string::size_type v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  __int128 v27;
  void **v28;
  std::string::size_type v29;
  std::string *v30;
  __int128 v31;
  void *__p[2];
  unsigned __int8 v33;
  void *v34[2];
  unsigned __int8 v35;
  void *v36[2];
  unsigned __int8 v37;
  void *v38[2];
  unsigned __int8 v39;
  void *v40[2];
  unsigned __int8 v41;
  std::string v42;
  std::string v43;
  std::string v44;
  std::string v45;
  std::string v46;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string v50;

  if (*((_BYTE *)this + 232))
  {
    std::string::basic_string[abi:ne180100]<0>(&v42, "\n  linearity_grad");
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 17);
    if ((v41 & 0x80u) == 0)
      v4 = v40;
    else
      v4 = (void **)v40[0];
    if ((v41 & 0x80u) == 0)
      v5 = v41;
    else
      v5 = (std::string::size_type)v40[1];
    v6 = std::string::append(&v42, (const std::string::value_type *)v4, v5);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v43.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v43, ", lr-coef ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v44.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v44.__r_.__value_.__l.__data_ = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v39 & 0x80u) == 0)
      v10 = v38;
    else
      v10 = (void **)v38[0];
    if ((v39 & 0x80u) == 0)
      v11 = v39;
    else
      v11 = (std::string::size_type)v38[1];
    v12 = std::string::append(&v44, (const std::string::value_type *)v10, v11);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v45, ", max-norm ");
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v37 & 0x80u) == 0)
      v16 = v36;
    else
      v16 = (void **)v36[0];
    if ((v37 & 0x80u) == 0)
      v17 = v37;
    else
      v17 = (std::string::size_type)v36[1];
    v18 = std::string::append(&v46, (const std::string::value_type *)v16, v17);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v47.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v47.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    v20 = std::string::append(&v47, "\n  bias_grad");
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    v48.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::MomentStatistics<float>((_QWORD *)this + 20);
    if ((v35 & 0x80u) == 0)
      v22 = v34;
    else
      v22 = (void **)v34[0];
    if ((v35 & 0x80u) == 0)
      v23 = v35;
    else
      v23 = (std::string::size_type)v34[1];
    v24 = std::string::append(&v48, (const std::string::value_type *)v22, v23);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    v26 = std::string::append(&v49, ", lr-coef ");
    v27 = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v26->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v27;
    v26->__r_.__value_.__l.__size_ = 0;
    v26->__r_.__value_.__r.__words[2] = 0;
    v26->__r_.__value_.__r.__words[0] = 0;
    kaldi::nnet1::ToString<float>();
    if ((v33 & 0x80u) == 0)
      v28 = __p;
    else
      v28 = (void **)__p[0];
    if ((v33 & 0x80u) == 0)
      v29 = v33;
    else
      v29 = (std::string::size_type)__p[1];
    v30 = std::string::append(&v50, (const std::string::value_type *)v28, v29);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v30->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    if ((char)v33 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v50.__r_.__value_.__l.__data_);
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v49.__r_.__value_.__l.__data_);
    if ((char)v35 < 0)
      operator delete(v34[0]);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v47.__r_.__value_.__l.__data_);
    if ((char)v37 < 0)
      operator delete(v36[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if ((char)v39 < 0)
      operator delete(v38[0]);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if ((char)v41 < 0)
      operator delete(v40[0]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "\n  linearity_grad is uninitialized\n  bias_grad is uninitialized");
  }
}

void sub_1ADD3D868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  uint64_t v64;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v64 - 41) < 0)
    operator delete(*(void **)(v64 - 64));
  if (*(char *)(v64 - 73) < 0)
    operator delete(*(void **)(v64 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (*(char *)(v64 - 105) < 0)
    operator delete(*(void **)(v64 - 128));
  if (*(char *)(v64 - 137) < 0)
    operator delete(*(void **)(v64 - 160));
  if (a26 < 0)
    operator delete(a21);
  if (*(char *)(v64 - 169) < 0)
    operator delete(*(void **)(v64 - 192));
  if (a64 < 0)
    operator delete(a59);
  if (a32 < 0)
    operator delete(a27);
  if (a57 < 0)
    operator delete(a52);
  if (a50 < 0)
    operator delete(a45);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  _Unwind_Resume(a1);
}

void sub_1ADD3D994()
{
  JUMPOUT(0x1ADD3D93CLL);
}

void sub_1ADD3D99C()
{
  JUMPOUT(0x1ADD3D94CLL);
}

void sub_1ADD3D9A4()
{
  JUMPOUT(0x1ADD3D95CLL);
}

void sub_1ADD3D9AC()
{
  JUMPOUT(0x1ADD3D96CLL);
}

void sub_1ADD3D9B4()
{
  JUMPOUT(0x1ADD3D97CLL);
}

void kaldi::nnet1::AffineTransform::InitData(uint64_t a1, uint64_t *a2, kaldi::UniformRandomNumber *a3)
{
  void *v7;
  BOOL v11;
  float *v12;
  BOOL v14;
  BOOL v15;
  BOOL v21;
  void **v22;
  BOOL v23;
  BOOL v27;
  BOOL v29;
  BOOL v30;
  BOOL v34;
  void *v35;
  int v36;
  std::string *v38;
  int inited;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  float v54;
  float v55;
  uint64_t v56;
  void *v57;
  _QWORD *v58;
  void **v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  float *v63;
  uint64_t v64;
  uint64_t v65;
  int v66[4];
  int v67;
  _BYTE v68[16];
  uint64_t v69;
  void *__p;
  void *v71;
  void **v72[34];
  void *v73[3];
  int v74;
  std::string v75;
  std::string v76;
  int v77;
  float v78;
  int v79;

  v78 = 2.0;
  v79 = -1073741824;
  v77 = 1036831949;
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)2, &v76);
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &v75);
  v74 = -1;
  memset(v73, 0, sizeof(v73));
  while (1)
  {
    if ((*((_BYTE *)a2 + *(_QWORD *)(*a2 - 24) + 32) & 2) != 0)
      goto LABEL_158;
    kaldi::ReadToken(a2, 0, (uint64_t)v73);
    if ((SHIBYTE(v73[2]) & 0x80000000) == 0)
      break;
    v7 = v73[1];
    if (v73[1] == (void *)10)
    {
      if (*(_QWORD *)v73[0] == 0x61654D736169423CLL && *((_WORD *)v73[0] + 4) == 15982)
      {
LABEL_81:
        v12 = (float *)&v79;
LABEL_152:
        kaldi::ReadBasicType<float>(a2, 0, v12);
        goto LABEL_153;
      }
      v7 = v73[1];
    }
    else if (v73[1] == (void *)13
           && *(_QWORD *)v73[0] == 0x74536D617261503CLL
           && *(_QWORD *)((char *)v73[0] + 5) == 0x3E7665646474536DLL)
    {
LABEL_100:
      v12 = (float *)&v77;
      goto LABEL_152;
    }
    if (v7 == (void *)11)
    {
      if (*(_QWORD *)v73[0] == 0x6E6152736169423CLL && *(_QWORD *)((char *)v73[0] + 3) == 0x3E65676E61527361)
      {
LABEL_94:
        v12 = &v78;
        goto LABEL_152;
      }
      v7 = v73[1];
    }
    if (v7 == (void *)15)
    {
      v11 = *(_QWORD *)v73[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v73[0] + 7) == 0x3E66656F43657461;
      v12 = (float *)(a1 + 236);
      if (v11)
        goto LABEL_152;
      v7 = v73[1];
    }
    if (v7 == (void *)19)
    {
      v14 = *(_QWORD *)v73[0] == 0x61654C736169423CLL
         && *((_QWORD *)v73[0] + 1) == 0x6F43657461526E72
         && *(_QWORD *)((char *)v73[0] + 11) == 0x3E66656F43657461;
      v12 = (float *)(a1 + 240);
      if (v14)
        goto LABEL_152;
      v7 = v73[1];
    }
    if (v7 == (void *)9)
    {
      v15 = *(_QWORD *)v73[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v73[0] + 8) == 62;
      v12 = (float *)(a1 + 252);
      if (v15)
        goto LABEL_152;
      v7 = v73[1];
    }
    if (v7 == (void *)12)
    {
      if (*(_QWORD *)v73[0] == 0x536D6F646E61523CLL && *((_DWORD *)v73[0] + 2) == 1046766949)
        goto LABEL_116;
      v7 = v73[1];
    }
    if (v7 == (void *)19)
    {
      if (*(_QWORD *)v73[0] == 0x61725474696E493CLL
        && *((_QWORD *)v73[0] + 1) == 0x79546D726F66736ELL
        && *(_QWORD *)((char *)v73[0] + 11) == 0x3E657079546D726FLL)
      {
        goto LABEL_155;
      }
      v7 = v73[1];
    }
    if (v7 == (void *)18)
    {
      if (*(_QWORD *)v73[0] == 0x6E6569646172473CLL
        && *((_QWORD *)v73[0] + 1) == 0x7079546D726F4E74
        && *((_WORD *)v73[0] + 8) == 15973)
      {
LABEL_154:
        v38 = &v75;
LABEL_156:
        kaldi::ReadToken(a2, 0, (uint64_t)v38);
        goto LABEL_153;
      }
      v7 = v73[1];
    }
    if (v7 != (void *)9)
      goto LABEL_157;
    v21 = *(_QWORD *)v73[0] == 0x6461724778614D3CLL && *((_BYTE *)v73[0] + 8) == 62;
    v12 = (float *)(a1 + 248);
    if (v21)
      goto LABEL_152;
    if (v73[1] != (void *)9)
      goto LABEL_157;
    v22 = (void **)v73[0];
LABEL_146:
    v35 = *v22;
    v36 = *((unsigned __int8 *)v22 + 8);
    if (v35 != (void *)0x78616D74666F533CLL || v36 != 62)
      goto LABEL_157;
    *(_BYTE *)(a1 + 128) = 1;
LABEL_153:
    std::ws[abi:ne180100]<char,std::char_traits<char>>(a2);
  }
  switch(HIBYTE(v73[2]))
  {
    case 9:
      goto LABEL_117;
    case 0xA:
      if (v73[0] == (void *)0x61654D736169423CLL && LOWORD(v73[1]) == 15982)
        goto LABEL_81;
      goto LABEL_92;
    case 0xB:
      if (v73[0] == (void *)0x6E6152736169423CLL && *(void **)((char *)v73 + 3) == (void *)0x3E65676E61527361)
        goto LABEL_94;
LABEL_92:
      if (HIBYTE(v73[2]) != 9)
        goto LABEL_157;
      goto LABEL_117;
    case 0xC:
      goto LABEL_111;
    case 0xD:
      if (v73[0] != (void *)0x74536D617261503CLL || *(void **)((char *)v73 + 5) != (void *)0x3E7665646474536DLL)
        goto LABEL_157;
      goto LABEL_100;
    case 0xF:
      v23 = v73[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v73 + 7) == (void *)0x3E66656F43657461;
      v12 = (float *)(a1 + 236);
      if (v23)
        goto LABEL_152;
      goto LABEL_109;
    case 0x12:
      goto LABEL_133;
    case 0x13:
      v27 = v73[0] == (void *)0x61654C736169423CLL
         && v73[1] == (void *)0x6F43657461526E72
         && *(void **)((char *)&v73[1] + 3) == (void *)0x3E66656F43657461;
      v12 = (float *)(a1 + 240);
      if (v27)
        goto LABEL_152;
      if (HIBYTE(v73[2]) <= 0x11u)
      {
LABEL_109:
        if (HIBYTE(v73[2]) == 9)
        {
LABEL_117:
          v29 = v73[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v73[1]) == 62;
          v12 = (float *)(a1 + 252);
          if (v29)
            goto LABEL_152;
        }
        else
        {
          if (HIBYTE(v73[2]) != 12)
            goto LABEL_157;
LABEL_111:
          if (v73[0] == (void *)0x536D6F646E61523CLL && LODWORD(v73[1]) == 1046766949)
          {
LABEL_116:
            kaldi::ReadBasicType<int>(a2, 0, (uint64_t)&v74);
            goto LABEL_153;
          }
        }
LABEL_140:
        if (HIBYTE(v73[2]) != 9)
          goto LABEL_157;
        v34 = v73[0] == (void *)0x6461724778614D3CLL && LOBYTE(v73[1]) == 62;
        v12 = (float *)(a1 + 248);
        if (v34)
          goto LABEL_152;
        v22 = v73;
        goto LABEL_146;
      }
      if (HIBYTE(v73[2]) == 18)
      {
LABEL_133:
        if (v73[0] == (void *)0x6E6569646172473CLL && v73[1] == (void *)0x7079546D726F4E74 && LOWORD(v73[2]) == 15973)
          goto LABEL_154;
        goto LABEL_140;
      }
      if (HIBYTE(v73[2]) == 19)
      {
        v30 = v73[0] == (void *)0x61725474696E493CLL && v73[1] == (void *)0x79546D726F66736ELL;
        if (v30 && *(void **)((char *)&v73[1] + 3) == (void *)0x3E657079546D726FLL)
        {
LABEL_155:
          v38 = &v76;
          goto LABEL_156;
        }
      }
LABEL_157:
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v73, "</Component>"))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        v58 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Unknown token ", 14);
        if (SHIBYTE(v73[2]) >= 0)
          v59 = v73;
        else
          v59 = (void **)v73[0];
        if (SHIBYTE(v73[2]) >= 0)
          v60 = HIBYTE(v73[2]);
        else
          v60 = (uint64_t)v73[1];
        v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v58, (uint64_t)v59, v60);
        v62 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)", a typo in config?", 19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v62, (uint64_t)" (ParamStddev|BiasMean|BiasRange|LearnRateCoef|BiasLearnRateCoef|MaxNorm|InitTransformType|GradientNormType|MaxGrad|RandomSeed)", 127);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
LABEL_158:
      inited = kaldi::nnet1::Component::MarkerToMatrixInitType((kaldi::nnet1::Component *)&v76);
      *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)&v75);
      if (v74 >= 1)
        kaldi::UniformRandomNumber::SetRandomSeeds(a3, v74);
      kaldi::GaussRandomNumber::GaussRandomNumber((kaldi::GaussRandomNumber *)v68, a3);
      kaldi::Matrix<float>::Matrix((uint64_t)v66, *(unsigned int *)(a1 + 12), *(unsigned int *)(a1 + 8), 0, 0);
      v40 = *(_DWORD *)(a1 + 12);
      if (v40 < 1)
        goto LABEL_176;
      v41 = 0;
      LODWORD(v42) = *(_DWORD *)(a1 + 8);
      while (2)
      {
        if ((int)v42 < 1)
          goto LABEL_175;
        v43 = 0;
        while (2)
        {
          switch(inited)
          {
            case 0:
              if (v41 == v43)
                v45 = 1.0;
              else
                v45 = 0.0;
              goto LABEL_172;
            case 2:
              v46 = *(float *)&v77;
              kaldi::GaussRandomNumber::Rand((kaldi::GaussRandomNumber *)v68, 0);
              v45 = v46 * v47;
LABEL_172:
              *(float *)(*(_QWORD *)v66 + 4 * (int)v41 * v67 + 4 * v43) = v45;
              break;
            case 1:
              v44 = *(float *)&v77;
              v45 = (kaldi::UniformRandomNumber::RandUniform(a3, 0) + -0.5) * (float)(v44 + v44);
              goto LABEL_172;
          }
          ++v43;
          v42 = *(int *)(a1 + 8);
          if (v43 < v42)
            continue;
          break;
        }
        v40 = *(_DWORD *)(a1 + 12);
LABEL_175:
        if (++v41 < v40)
          continue;
        break;
      }
LABEL_176:
      v48 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 20);
      if (v48 != kaldi::MatrixBase<float>::NumRows((uint64_t)v66)
        || (v49 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1) + 16),
            v49 != kaldi::MatrixBase<float>::NumCols((uint64_t)v66)))
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Linearity().NumRows() == mat.NumRows() && Linearity().NumCols() == mat.NumCols()", 80);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      v50 = kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
      kaldi::CuMatrixBase<float>::CopyFromMat(v50, v66, 111);
      v51 = *(unsigned int *)(a1 + 12);
      v64 = 0;
      v65 = 0;
      v63 = 0;
      kaldi::Vector<float>::Resize((void **)&v63, v51, 0);
      if (*(int *)(a1 + 12) >= 1)
      {
        v52 = 0;
        do
        {
          v53 = *(float *)&v79;
          v54 = kaldi::UniformRandomNumber::RandUniform(a3, 0);
          v55 = v53 + (v54 + -0.5) * v78;
          v63[v52++] = v55;
        }
        while (v52 < *(int *)(a1 + 12));
      }
      v56 = kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
      if (*(_DWORD *)(v56 + 16) != (_DWORD)v64)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v72);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v72, (uint64_t)"Bias().Dim() == vec.Dim()", 25);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v72);
      }
      v57 = (void *)kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
      kaldi::CuVectorBase<float>::CopyFromVec<float>(v57, (uint64_t)&v63);
      kaldi::Vector<float>::Destroy((uint64_t)&v63);
      kaldi::Matrix<float>::~Matrix((uint64_t)v66);
      if (__p)
      {
        v71 = __p;
        operator delete(__p);
      }
      v72[0] = (void **)&v69;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v72);
      if (SHIBYTE(v73[2]) < 0)
        operator delete(v73[0]);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v76.__r_.__value_.__l.__data_);
      return;
    default:
      goto LABEL_157;
  }
}

void kaldi::nnet1::AffineTransform::WriteData(uint64_t *a1, _QWORD *a2, int a3, int a4)
{
  (*(void (**)(uint64_t *))(*a1 + 168))(a1);
  kaldi::CuMatrixBase<float>::Write(a1[14], a2, a3, a4);
  kaldi::CuVectorBase<float>::Write(a1[15], a2, a3);
}

void kaldi::nnet1::AffineTransform::BackpropagateFnc(kaldi::nnet1::AffineTransform *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = *((_QWORD *)this + 44);
  if (v8 == *((_QWORD *)this + 45) || !*(_DWORD *)(v8 + 48 * a6 + 20))
  {
    v10 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMat(a5, a4, CblasNoTrans, v10, CblasNoTrans, 1.0, 0.0);
  }
  else
  {
    v9 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(a5, a4, CblasNoTrans, v9, CblasNoTrans, 1.0);
  }
}

void kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD v12[4];

  kaldi::CuVectorBase<float>::Set(a4, *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 4 * a3));
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(v8 + 8) + 4 * *(_DWORD *)(v8 + 24) * a3;
  v10 = *(_DWORD *)(v8 + 16);
  v11 = *(_QWORD *)(v8 + 32);
  v12[0] = &unk_1E5D29D70;
  v12[1] = v9;
  v12[3] = v11;
  v12[2] = v10;
  kaldi::CuVectorBase<float>::AddMatVec(a4, a2, CblasNoTrans, (uint64_t)v12, 1.0, 1.0);
}

float kaldi::nnet1::AffineTransform::GetUnitOutputFnc(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  float v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD v9[4];

  v3 = *(_QWORD *)(a1 + 112);
  v4 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + 8) + 4 * a3);
  v5 = *(_QWORD *)(v3 + 8) + 4 * *(_DWORD *)(v3 + 24) * a3;
  v6 = *(_DWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 32);
  v9[0] = &unk_1E5D29D70;
  v9[1] = v5;
  v9[3] = v7;
  v9[2] = v6;
  return v4 + kaldi::VecVec<float>(a2, (uint64_t)v9);
}

uint64_t kaldi::nnet1::AffineTransform::ReadData(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BOOL v7;
  float *v8;
  void *v9;
  BOOL v10;
  BOOL v12;
  BOOL v13;
  BOOL v16;
  void **v17;
  BOOL v18;
  BOOL v19;
  BOOL v20;
  BOOL v23;
  void *v24;
  int v25;
  _QWORD *v28;
  void **v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v33;
  void *v34[4];

  while (kaldi::Peek(a2, a3) == 60)
  {
    memset(v34, 0, 24);
    kaldi::ReadToken(a2, a3, (uint64_t)v34);
    if (SHIBYTE(v34[2]) < 0)
    {
      v9 = v34[1];
      if (v34[1] == (void *)15)
      {
        v10 = *(_QWORD *)v34[0] == 0x61526E7261654C3CLL && *(_QWORD *)((char *)v34[0] + 7) == 0x3E66656F43657461;
        v8 = (float *)(a1 + 236);
        if (v10)
          goto LABEL_82;
      }
      if (v34[1] == (void *)19)
      {
        v12 = *(_QWORD *)v34[0] == 0x61654C736169423CLL
           && *((_QWORD *)v34[0] + 1) == 0x6F43657461526E72
           && *(_QWORD *)((char *)v34[0] + 11) == 0x3E66656F43657461;
        v8 = (float *)(a1 + 240);
        if (v12)
          goto LABEL_82;
        v9 = v34[1];
      }
      if (v9 == (void *)9)
      {
        v13 = *(_QWORD *)v34[0] == 0x6D726F4E78614D3CLL && *((_BYTE *)v34[0] + 8) == 62;
        v8 = (float *)(a1 + 252);
        if (v13)
          goto LABEL_82;
        v9 = v34[1];
      }
      if (v9 == (void *)18)
      {
        if (*(_QWORD *)v34[0] == 0x6E6569646172473CLL
          && *((_QWORD *)v34[0] + 1) == 0x7079546D726F4E74
          && *((_WORD *)v34[0] + 8) == 15973)
        {
LABEL_87:
          __p[0] = 0;
          __p[1] = 0;
          v33 = 0;
          kaldi::ReadToken(a2, a3, (uint64_t)__p);
          *(_DWORD *)(a1 + 244) = kaldi::nnet1::Component::MarkerToGradientNormType((kaldi::nnet1::Component *)__p);
          if (SHIBYTE(v33) < 0)
            operator delete(__p[0]);
          goto LABEL_83;
        }
        v9 = v34[1];
      }
      if (v9 != (void *)9)
        goto LABEL_90;
      v16 = *(_QWORD *)v34[0] == 0x6461724778614D3CLL && *((_BYTE *)v34[0] + 8) == 62;
      v8 = (float *)(a1 + 248);
      if (!v16)
      {
        if (v34[1] != (void *)9)
          goto LABEL_90;
        v17 = (void **)v34[0];
        goto LABEL_76;
      }
    }
    else if (HIBYTE(v34[2]) > 0x11u)
    {
      if (HIBYTE(v34[2]) == 18)
      {
        if (v34[0] == (void *)0x6E6569646172473CLL && v34[1] == (void *)0x7079546D726F4E74 && LOWORD(v34[2]) == 15973)
          goto LABEL_87;
LABEL_70:
        if (HIBYTE(v34[2]) != 9)
          goto LABEL_90;
        v23 = v34[0] == (void *)0x6461724778614D3CLL && LOBYTE(v34[1]) == 62;
        v8 = (float *)(a1 + 248);
        if (!v23)
        {
          v17 = v34;
LABEL_76:
          v24 = *v17;
          v25 = *((unsigned __int8 *)v17 + 8);
          if (v24 != (void *)0x78616D74666F533CLL || v25 != 62)
            goto LABEL_90;
          *(_BYTE *)(a1 + 128) = 1;
          goto LABEL_83;
        }
        goto LABEL_82;
      }
      if (HIBYTE(v34[2]) != 19
        || (v34[0] == (void *)0x61654C736169423CLL ? (v18 = v34[1] == (void *)0x6F43657461526E72) : (v18 = 0),
            v18 ? (v19 = *(void **)((char *)&v34[1] + 3) == (void *)0x3E66656F43657461) : (v19 = 0),
            v8 = (float *)(a1 + 240),
            !v19))
      {
LABEL_90:
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)__p);
        v28 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)"unrecognized config token ", 26);
        if (SHIBYTE(v34[2]) >= 0)
          v29 = v34;
        else
          v29 = (void **)v34[0];
        if (SHIBYTE(v34[2]) >= 0)
          v30 = HIBYTE(v34[2]);
        else
          v30 = (uint64_t)v34[1];
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v28, (uint64_t)v29, v30);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)__p);
      }
    }
    else if (HIBYTE(v34[2]) == 9)
    {
      v20 = v34[0] == (void *)0x6D726F4E78614D3CLL && LOBYTE(v34[1]) == 62;
      v8 = (float *)(a1 + 252);
      if (!v20)
        goto LABEL_70;
    }
    else
    {
      if (HIBYTE(v34[2]) != 15)
        goto LABEL_90;
      v7 = v34[0] == (void *)0x61526E7261654C3CLL && *(void **)((char *)v34 + 7) == (void *)0x3E66656F43657461;
      v8 = (float *)(a1 + 236);
      if (!v7)
        goto LABEL_90;
    }
LABEL_82:
    kaldi::ReadBasicType<float>(a2, a3, v8);
LABEL_83:
    if (SHIBYTE(v34[2]) < 0)
      operator delete(v34[0]);
  }
  (***(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t))(a1 + 112))(*(_QWORD *)(a1 + 112), a2, a3, a4);
  (***(void (****)(_QWORD, uint64_t *, uint64_t))(a1 + 120))(*(_QWORD *)(a1 + 120), a2, a3);
  *(_BYTE *)(a1 + 16) = 0;
  kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
  kaldi::nnet1::AffineTransform::Linearity((kaldi::nnet1::AffineTransform *)a1);
  return kaldi::nnet1::AffineTransform::Bias((kaldi::nnet1::AffineTransform *)a1);
}

void sub_1ADD3EB24()
{
  JUMPOUT(0x1ADD3EB2CLL);
}

_QWORD *kaldi::nnet1::AffineTransform::WriteConfig(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *result;
  std::string __p;

  kaldi::WriteToken(a2, a3, "<LearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<BiasLearnRateCoef>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<MaxNorm>");
  kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  kaldi::WriteToken(a2, a3, "<GradientNormType>");
  kaldi::nnet1::Component::TypeToMarker((kaldi::nnet1::Component *)*(unsigned int *)(a1 + 244), &__p);
  kaldi::WriteToken(a2, a3, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  kaldi::WriteToken(a2, a3, "<MaxGrad>");
  result = kaldi::WriteBasicType<float>((uint64_t)a2, a3);
  if (*(_BYTE *)(a1 + 128))
    return kaldi::WriteToken(a2, a3, "<Softmax>");
  return result;
}

void sub_1ADD3EC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::nnet1::AffineTransform::NumParams(kaldi::nnet1::AffineTransform *this)
{
  return (*(_DWORD *)(*((_QWORD *)this + 15) + 16)
                      + *(_DWORD *)(*((_QWORD *)this + 14) + 16) * *(_DWORD *)(*((_QWORD *)this + 14) + 20));
}

const void **kaldi::nnet1::AffineTransform::GetParams(_QWORD *a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a2, v4, 0);
  v5 = a1[14];
  v6 = *(_DWORD *)(v5 + 16) * *(_DWORD *)(v5 + 20);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2;
  LODWORD(v11) = v6;
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v10, v5);
  v7 = a1[15];
  v8 = *(_DWORD *)(v7 + 16);
  v11 = 0;
  v12 = 0;
  v10 = (char *)*a2 + 4 * v6;
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyToVec<float>((const void **)v7, (uint64_t)&v10);
}

void *kaldi::nnet1::AffineTransform::SetParams(kaldi::nnet1::AffineTransform *a1, char **a2)
{
  int v4;
  int v5;
  uint64_t v6;
  void *v7;
  int v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  (*(void (**)(kaldi::nnet1::AffineTransform *))(*(_QWORD *)a1 + 176))(a1);
  v4 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 20);
  v5 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Linearity(a1) + 16) * v4;
  v6 = kaldi::nnet1::AffineTransform::Linearity(a1);
  v11 = 0;
  v12 = 0;
  v10 = *a2;
  LODWORD(v11) = v5;
  kaldi::CuMatrixBase<float>::CopyRowsFromVec(v6, &v10);
  v7 = (void *)kaldi::nnet1::AffineTransform::Bias(a1);
  v8 = *(_DWORD *)(kaldi::nnet1::AffineTransform::Bias(a1) + 16);
  v11 = 0;
  v12 = 0;
  v10 = &(*a2)[4 * v5];
  LODWORD(v11) = v8;
  return kaldi::CuVectorBase<float>::CopyFromVec<float>(v7, (uint64_t)&v10);
}

float kaldi::nnet1::AffineTransform::GetNormalizedLearningRate(kaldi::nnet1::AffineTransform *this, int a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (!*((_BYTE *)this + 84))
    return *((float *)this + 14);
  v2 = *((_QWORD *)this + 35);
  v3 = *((_QWORD *)this + 36) - v2;
  if (!v3)
    return NAN;
  v4 = v3 >> 2;
  if ((int)v4 <= a2)
    return NAN;
  v5 = v4 - 1;
  if (a2 >= 0)
    v5 = a2;
  return *(float *)(v2 + 4 * v5);
}

float kaldi::nnet1::AffineTransform::SumParams(kaldi::nnet1::AffineTransform *this)
{
  float v2;

  v2 = kaldi::CuMatrixBase<float>::Sum(*((_QWORD *)this + 14));
  return v2 + kaldi::CuVectorBase<float>::Sum(*((_QWORD *)this + 15));
}

uint64_t kaldi::nnet1::AffineTransform::PerturbParams(kaldi::nnet1::AffineTransform *this, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  int32x2_t v11[6];

  v4 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Linearity(this) + 20);
  v5 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrix<float>::CuMatrix(v11, v4, *(unsigned int *)(v5 + 16), 1, 0, 0);
  kaldi::CuMatrixBase<float>::SetRandn((uint64_t)v11);
  v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  kaldi::CuMatrixBase<float>::AddMat(v6, (uint64_t)v11, 111, a2, 1.0);
  v7 = *(unsigned int *)(kaldi::nnet1::AffineTransform::Bias(this) + 16);
  v10[0] = &unk_1E5D341C8;
  memset(&v10[1], 0, 24);
  kaldi::CuVector<float>::Resize((uint64_t)v10, v7, 1);
  kaldi::CuVectorBase<float>::SetRandn((uint64_t)v10);
  v8 = kaldi::nnet1::AffineTransform::Bias(this);
  kaldi::CuVectorBase<float>::AddVec(v8, (uint64_t)v10, a2, 1.0);
  v10[0] = &unk_1E5D341C8;
  kaldi::CuVector<float>::Destroy((uint64_t)v10);
  return kaldi::CuMatrix<float>::~CuMatrix((uint64_t)v11);
}

void sub_1ADD3EF44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuMatrix<float>::~CuMatrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::AffineTransform::GetGradient(_QWORD *a1, uint64_t a2, uint64_t a3, void **a4)
{
  kaldi::nnet1::AffineTransform *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const void **v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;

  v8 = (kaldi::nnet1::AffineTransform *)(*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
  (*(void (**)(kaldi::nnet1::AffineTransform *, uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v8 + 232))(v8, a2, a3, 0, 0);
  LODWORD(a3) = *(_DWORD *)(a1[14] + 16) * *(_DWORD *)(a1[14] + 20);
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 176))(a1);
  kaldi::Vector<float>::Resize(a4, v9, 0);
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4;
  LODWORD(v15) = a3;
  v10 = kaldi::nnet1::AffineTransform::LinearityCorr(v8, 0);
  kaldi::VectorBase<float>::CopyRowsFromMat((void **)&v14, v10);
  v11 = *(_DWORD *)(a1[15] + 16);
  v15 = 0;
  v16 = 0;
  v14 = (char *)*a4 + 4 * (int)a3;
  LODWORD(v15) = v11;
  v12 = (const void **)kaldi::nnet1::AffineTransform::BiasCorr(v8, 0);
  kaldi::CuVectorBase<float>::CopyToVec<float>(v12, (uint64_t)&v14);
  return (*(uint64_t (**)(kaldi::nnet1::AffineTransform *))(*(_QWORD *)v8 + 8))(v8);
}

void kaldi::nnet1::AffineTransform::AccumGradients(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  kaldi::nnet1::AffineTransform::EnsureCorrs((kaldi::nnet1::AffineTransform *)a1);
  *(_QWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 32) = a4;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5) + 24) = a4;
  v10 = *(float *)(a1 + 60);
  *(_DWORD *)(*(_QWORD *)(a1 + 256) + 4 * a5) = *(_DWORD *)(a2 + 20);
  v11 = *(_QWORD *)(a1 + 352);
  if (v11 == *(_QWORD *)(a1 + 360) || !*(_DWORD *)(v11 + 48 * a5 + 20))
  {
    v13 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMat(v13, a3, CblasTrans, a2, CblasNoTrans, 1.0, v10);
  }
  else
  {
    v12 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    if (v10 == 0.0)
      kaldi::CuMatrixBase<float>::SetZero(v12);
    else
      kaldi::CuMatrixBase<float>::Scale(v12, v10);
    v14 = kaldi::nnet1::AffineTransform::LinearityCorr((kaldi::nnet1::AffineTransform *)a1, a5);
    kaldi::CuMatrixBase<float>::AddMatMatMasked(v14, a3, CblasTrans, a2, CblasNoTrans, 1.0);
  }
  v15 = kaldi::nnet1::AffineTransform::BiasCorr((kaldi::nnet1::AffineTransform *)a1, a5);
  kaldi::CuVectorBase<float>::AddRowSumMat(v15, a3, 1.0, v10);
}

uint64_t kaldi::nnet1::AffineTransform::SetGradientNormalization(uint64_t result, int a2, float a3)
{
  *(float *)(result + 248) = a3;
  *(_DWORD *)(result + 244) = a2;
  *(_BYTE *)(result + 232) = 0;
  return result;
}

void kaldi::nnet1::AffineTransform::NormalizeGradients(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  float v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = a2;
  v6 = *((_DWORD *)this + 61);
  if (v6 == 3)
  {
    if (a2 >= 0.0 && a2 <= 1.0)
    {
      v10 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v10, *((_QWORD *)this + 23) + 48 * a3, v4);
      v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::RmspropGradient(v11, *((_QWORD *)this + 26) + 32 * a3, v4);
    }
  }
  else if (v6 == 2)
  {
    if (a2 > 0.0)
    {
      v12 = a3;
      if (*((_BYTE *)this + 84))
        v4 = (float)*(int *)(*((_QWORD *)this + 32) + 4 * a3) * a2;
      v13 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v13, (int *)(*((_QWORD *)this + 23) + 48 * (int)v12), v4);
      v14 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
      kaldi::nnet1::UpdatableComponent::LimitL2NormGradient(v14, (_QWORD *)(*((_QWORD *)this + 26) + 32 * v12), v4);
    }
  }
  else if (v6 == 1 && a2 > 0.0)
  {
    if (*((_BYTE *)this + 84))
      v4 = (float)*(int *)(*((_QWORD *)this + 32) + 4 * a3) * a2;
    v7 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v7, v4);
    v8 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
    kaldi::nnet1::UpdatableComponent::ClipGradient(v8, v4);
  }
}

void kaldi::nnet1::AffineTransform::UpdateWeights(kaldi::nnet1::AffineTransform *this, void *a2, int a3)
{
  float v6;
  float v7;
  float v8;
  int v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int v23;
  uint64_t v24;
  int *v25;
  int v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE *v40;
  _QWORD v41[4];
  _QWORD v42[2];
  uint64_t v43;
  void *v44;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = *((float *)this + 16);
  v7 = *((float *)this + 17);
  v8 = *((float *)this + 18);
  v9 = *((_DWORD *)this + 19);
  *(_QWORD *)(kaldi::nnet1::AffineTransform::Linearity(this) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::Bias(this) + 24) = a2;
  if (a3 >= 0)
    v10 = a3;
  else
    v10 = *((_DWORD *)this + 20);
  if (*((_DWORD *)this + 20) == 1)
    v11 = 0;
  else
    v11 = v10;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::LinearityCorr(this, v11) + 32) = a2;
  *(_QWORD *)(kaldi::nnet1::AffineTransform::BiasCorr(this, v11) + 24) = a2;
  v12 = v11;
  *(_QWORD *)(*((_QWORD *)this + 23) + 48 * v11 + 32) = a2;
  *(_QWORD *)(*((_QWORD *)this + 26) + 32 * v11 + 24) = a2;
  if (v11 == *((_DWORD *)this + 20))
  {
    v13 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v11);
    v14 = kaldi::nnet1::AffineTransform::LinearityCorr(this, 0);
    kaldi::CuMatrixBase<float>::AddMat(v13, v14, 111, 1.0, 0.0);
    v15 = kaldi::nnet1::AffineTransform::BiasCorr(this, v12);
    v16 = kaldi::nnet1::AffineTransform::BiasCorr(this, 0);
    kaldi::CuVectorBase<float>::AddVec(v15, v16, 1.0, 0.0);
    if (*((int *)this + 20) > 1)
    {
      v17 = 1;
      do
      {
        v18 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v12);
        v19 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v17);
        kaldi::CuMatrixBase<float>::AddMat(v18, v19, 111, 1.0, 1.0);
        v20 = kaldi::nnet1::AffineTransform::BiasCorr(this, v12);
        v21 = kaldi::nnet1::AffineTransform::BiasCorr(this, v17);
        kaldi::CuVectorBase<float>::AddVec(v20, v21, 1.0, 1.0);
        ++v17;
      }
      while (v17 < *((_DWORD *)this + 20));
    }
    v22 = (int *)*((_QWORD *)this + 32);
    v22[v12] = 0;
    if ((int)v12 >= 1)
    {
      v23 = 0;
      v24 = v12;
      v25 = v22;
      do
      {
        v26 = *v25++;
        v23 += v26;
        v22[v12] = v23;
        --v24;
      }
      while (v24);
    }
  }
  v27 = *((float *)this + 14);
  if (*((_BYTE *)this + 84))
    v27 = v27 / (float)*(int *)(*((_QWORD *)this + 32) + 4 * v12);
  v28 = *((_QWORD *)this + 35);
  if (v12 >= (*((_QWORD *)this + 36) - v28) >> 2)
  {
    LODWORD(v42[0]) = 2143289344;
    std::vector<float>::resize((uint64_t)this + 280, (int)v12 + 1, v42);
    v28 = *((_QWORD *)this + 35);
  }
  *(float *)(v28 + 4 * v12) = v27;
  if (*((float *)this + 62) >= 0.0)
    (*(void (**)(kaldi::nnet1::AffineTransform *, unint64_t))(*(_QWORD *)this + 248))(this, v12);
  if (v6 != 0.0)
  {
    v29 = kaldi::nnet1::AffineTransform::Linearity(this);
    v30 = (float)-(float)(v27 * v6) * (float)*(int *)(*((_QWORD *)this + 32) + 4 * v12);
    v31 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::AddMat(v29, v31, 111, v30, 1.0);
  }
  if (v7 != 0.0)
  {
    v32 = kaldi::nnet1::AffineTransform::Linearity(this);
    v33 = kaldi::nnet1::AffineTransform::LinearityCorr(this, v12);
    kaldi::cu::RegularizeL1<float>(v32, v33, (float)(v7 * v27) * (float)*(int *)(*((_QWORD *)this + 32) + 4 * v12), v27);
  }
  if (v8 > 0.0)
  {
    if (*((int *)this + 20) >= 2)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v42);
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v42, "the multi batch gradient quantization does not work yet");
      kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v42);
    }
    if (*((_QWORD *)this + 48) == *((_QWORD *)this + 47))
      kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
    kaldi::nnet1::QuantizerResidualAggregator::Quantize((kaldi::nnet1::AffineTransform *)((char *)this + 376), v9, v8);
  }
  kaldi::nnet1::AffineTransform::ApplyCorr(this, v27, v12);
  if (*((float *)this + 63) > 0.0)
  {
    *((_QWORD *)this + 42) = a2;
    v34 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::CopyFromMat<float>((int *)this + 76, v34, 111);
    v35 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulElements((uint64_t)this + 304, v35);
    v36 = *((unsigned int *)this + 3);
    v43 = 0;
    v44 = 0;
    v42[0] = &unk_1E5D341C8;
    v42[1] = 0;
    kaldi::CuVector<float>::Resize((uint64_t)v42, v36, 0);
    v44 = a2;
    kaldi::CuVectorBase<float>::AddColSumMat((uint64_t)v42, (uint64_t)this + 304, 1.0, 0.0);
    kaldi::CuVectorBase<float>::ApplyPow((uint64_t)v42, 0.5);
    v41[0] = &unk_1E5D341C8;
    v41[1] = 0;
    v41[2] = 0;
    v41[3] = v44;
    kaldi::CuVector<float>::Resize((uint64_t)v41, v43, 1);
    kaldi::CuVectorBase<float>::CopyFromVec(v41, (uint64_t)v42);
    kaldi::CuVectorBase<float>::Scale((uint64_t)v41, 1.0 / *((float *)this + 63));
    kaldi::CuVectorBase<float>::ApplyFloor((uint64_t)v41, 1.0);
    kaldi::CuVectorBase<float>::InvertElements((uint64_t)v41);
    v37 = kaldi::nnet1::AffineTransform::Linearity(this);
    kaldi::CuMatrixBase<float>::MulRowsVec(v37, (uint64_t)v41);
    v38 = kaldi::nnet1::AffineTransform::Bias(this);
    kaldi::CuVectorBase<float>::ApplyMaxNorm(v38, *((float *)this + 63));
    v41[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v41);
    v42[0] = &unk_1E5D341C8;
    kaldi::CuVector<float>::Destroy((uint64_t)v42);
  }
  v39 = (_BYTE *)*((_QWORD *)this + 32);
  if ((_DWORD)v12 == *((_DWORD *)this + 20))
  {
    v40 = (_BYTE *)*((_QWORD *)this + 33);
    if (v39 != v40)
      bzero(v39, ((v40 - v39 - 4) & 0xFFFFFFFFFFFFFFFCLL) + 4);
  }
  else
  {
    *(_DWORD *)&v39[4 * v12] = 0;
  }
}

void sub_1ADD3F800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  kaldi::CuVector<float>::~CuVector((uint64_t *)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'kaldi::nnet1::AffineTransform::~AffineTransform(kaldi::nnet1::AffineTransform *this)
{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 88));
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 96));
  JUMPOUT(0x1AF44D190);
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
}

{
  kaldi::nnet1::AffineTransform::~AffineTransform((kaldi::nnet1::AffineTransform *)((char *)this - 104));
  JUMPOUT(0x1AF44D190);
}

kaldi::nnet1::AffineTransform *kaldi::nnet1::AffineTransform::AffineTransform(kaldi::nnet1::AffineTransform *this, const kaldi::nnet1::AffineTransform *a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32[35];

  *(_QWORD *)this = off_1E5D32508;
  v4 = *((_QWORD *)a2 + 1);
  *((_WORD *)this + 8) = *((_WORD *)a2 + 8);
  *((_QWORD *)this + 1) = v4;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<kaldi::CuWorkspace *>::__init_with_size[abi:ne180100]<kaldi::CuWorkspace **,kaldi::CuWorkspace **>((_QWORD *)this + 3, *((const void **)a2 + 3), *((_QWORD *)a2 + 4), (uint64_t)(*((_QWORD *)a2 + 4) - *((_QWORD *)a2 + 3)) >> 3);
  *(_QWORD *)this = off_1E5D2E4A0;
  *((_QWORD *)this + 6) = &off_1E5D2D150;
  v5 = *(_OWORD *)((char *)a2 + 56);
  *(_OWORD *)((char *)this + 71) = *(_OWORD *)((char *)a2 + 71);
  *(_OWORD *)((char *)this + 56) = v5;
  *((_QWORD *)this + 11) = &unk_1E5D2C890;
  *((_QWORD *)this + 12) = &unk_1E5D2C8B8;
  *((_QWORD *)this + 13) = &unk_1E5D2C8E0;
  *(_QWORD *)this = &off_1E5D2C750;
  *((_QWORD *)this + 14) = 0;
  v6 = (uint64_t *)((char *)this + 112);
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 128) = *((_BYTE *)a2 + 128);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::vector((_QWORD *)this + 17, (uint64_t)(*((_QWORD *)a2 + 18) - *((_QWORD *)a2 + 17)) >> 3);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::vector((_QWORD *)this + 20, (uint64_t)(*((_QWORD *)a2 + 21) - *((_QWORD *)a2 + 20)) >> 3);
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  *((_QWORD *)this + 25) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 23, *((_QWORD *)a2 + 23), *((_QWORD *)a2 + 24), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 24) - *((_QWORD *)a2 + 23)) >> 4));
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  std::vector<kaldi::CuVector<float>>::__init_with_size[abi:ne180100]<kaldi::CuVector<float>*,kaldi::CuVector<float>*>((_QWORD *)this + 26, *((_QWORD *)a2 + 26), *((_QWORD *)a2 + 27), (uint64_t)(*((_QWORD *)a2 + 27) - *((_QWORD *)a2 + 26)) >> 5);
  *((_BYTE *)this + 232) = *((_BYTE *)a2 + 232);
  *(_QWORD *)((char *)this + 236) = *(_QWORD *)((char *)a2 + 236);
  *((_DWORD *)this + 61) = *((_DWORD *)a2 + 61);
  *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
  *((_QWORD *)this + 33) = 0;
  *((_QWORD *)this + 34) = 0;
  *((_QWORD *)this + 32) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 32, *((const void **)a2 + 32), *((_QWORD *)a2 + 33), (uint64_t)(*((_QWORD *)a2 + 33) - *((_QWORD *)a2 + 32)) >> 2);
  *((_QWORD *)this + 35) = 0;
  *((_QWORD *)this + 36) = 0;
  *((_QWORD *)this + 37) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 35, *((const void **)a2 + 35), *((_QWORD *)a2 + 36), (uint64_t)(*((_QWORD *)a2 + 36) - *((_QWORD *)a2 + 35)) >> 2);
  kaldi::CuMatrix<float>::CuMatrix((char *)this + 304, (char *)a2 + 304, 111);
  *((_QWORD *)this + 44) = 0;
  *((_QWORD *)this + 45) = 0;
  *((_QWORD *)this + 46) = 0;
  std::vector<kaldi::CuMatrix<float>>::__init_with_size[abi:ne180100]<kaldi::CuMatrix<float>*,kaldi::CuMatrix<float>*>((_QWORD *)this + 44, *((_QWORD *)a2 + 44), *((_QWORD *)a2 + 45), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 45) - *((_QWORD *)a2 + 44)) >> 4));
  *((_QWORD *)this + 55) = 0;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  if (*((_BYTE *)this + 16))
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v32, (uint64_t)"deep copy constructor not implemented in the case of vectorized_weights.", 72);
    kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v32);
  }
  v7 = *((_QWORD *)a2 + 14);
  if (v7)
  {
    kaldi::NewCuSubOrMat<float>(v7, 0, v32);
    v8 = v32[0];
    v32[0] = 0;
    v9 = *v6;
    *v6 = v8;
    if (v9)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 24))(v9);
      v10 = v32[0];
      v32[0] = 0;
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  v11 = (_QWORD *)*((_QWORD *)a2 + 15);
  if (v11)
  {
    kaldi::NewCuSubOrVec<float>(v11, *((unsigned __int8 *)this + 16), v32);
    v12 = v32[0];
    v32[0] = 0;
    v13 = *((_QWORD *)this + 15);
    *((_QWORD *)this + 15) = v12;
    if (v13)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v14 = v32[0];
      v32[0] = 0;
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  v16 = *((_QWORD *)this + 17);
  v15 = *((_QWORD *)this + 18);
  if (v15 != v16)
  {
    v17 = 0;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)a2 + 17) + 8 * v17))
      {
        v18 = kaldi::nnet1::AffineTransform::LinearityCorr(a2, v17);
        kaldi::NewCuSubOrMat<float>(v18, *((unsigned __int8 *)this + 16), v32);
        v19 = *((_QWORD *)this + 17);
        v20 = v32[0];
        v32[0] = 0;
        v21 = *(_QWORD *)(v19 + 8 * v17);
        *(_QWORD *)(v19 + 8 * v17) = v20;
        if (v21)
          (*(void (**)(uint64_t))(*(_QWORD *)v21 + 24))(v21);
        v22 = v32[0];
        v32[0] = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 24))(v22);
        v16 = *((_QWORD *)this + 17);
        v15 = *((_QWORD *)this + 18);
      }
      ++v17;
    }
    while (v17 < (v15 - v16) >> 3);
  }
  v24 = *((_QWORD *)this + 20);
  v23 = *((_QWORD *)this + 21);
  if (v23 != v24)
  {
    v25 = 0;
    do
    {
      if (*(_QWORD *)(*((_QWORD *)a2 + 20) + 8 * v25))
      {
        v26 = (_QWORD *)kaldi::nnet1::AffineTransform::BiasCorr(a2, v25);
        kaldi::NewCuSubOrVec<float>(v26, *((unsigned __int8 *)this + 16), v32);
        v27 = *((_QWORD *)this + 20);
        v28 = v32[0];
        v32[0] = 0;
        v29 = *(_QWORD *)(v27 + 8 * v25);
        *(_QWORD *)(v27 + 8 * v25) = v28;
        if (v29)
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
        v30 = v32[0];
        v32[0] = 0;
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 16))(v30);
        v24 = *((_QWORD *)this + 20);
        v23 = *((_QWORD *)this + 21);
      }
      ++v25;
    }
    while (v25 < (v23 - v24) >> 3);
  }
  if (*((_QWORD *)a2 + 48) != *((_QWORD *)a2 + 47))
    kaldi::nnet1::AffineTransform::InitResidualAggregator(this, (kaldi::nnet1::AffineTransform *)((char *)this + 376));
  return this;
}

void sub_1ADD3FE10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, void **a12, quasar::Bitmap *a13, quasar::Bitmap *a14, quasar::Bitmap *a15, uint64_t a16)
{
  kaldi::nnet1::UpdatableComponent *v16;
  uint64_t *v17;
  void **v18;
  void *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  kaldi::nnet1::QuantizerResidualAggregator::~QuantizerResidualAggregator(v18);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  kaldi::CuMatrix<float>::~CuMatrix(a10);
  v20 = *a11;
  if (*a11)
  {
    *((_QWORD *)v16 + 36) = v20;
    operator delete(v20);
  }
  v21 = *a12;
  if (*a12)
  {
    *((_QWORD *)v16 + 33) = v21;
    operator delete(v21);
  }
  std::vector<kaldi::CuVector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<kaldi::CuMatrix<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuVectorBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  std::vector<std::unique_ptr<kaldi::CuMatrixBase<float>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  v22 = *((_QWORD *)v16 + 15);
  *((_QWORD *)v16 + 15) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
  v23 = *v17;
  *v17 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 24))(v23);
  quasar::Bitmap::~Bitmap(a13);
  quasar::Bitmap::~Bitmap(a14);
  quasar::Bitmap::~Bitmap(a15);
  kaldi::nnet1::UpdatableComponent::~UpdatableComponent(v16);
  _Unwind_Resume(a1);
}

void kaldi::nnet1::AffineTransform::InitResidualAggregator(kaldi::nnet1::AffineTransform *this, kaldi::nnet1::QuantizerResidualAggregator *a2)
{
  uint64_t v4;
  uint64_t v5;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v4 = kaldi::nnet1::AffineTransform::LinearityCorr(this, ((*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v4);
  v5 = kaldi::nnet1::AffineTransform::BiasCorr(this, ((*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3) - 1);
  kaldi::nnet1::QuantizerResidualAggregator::PushSetup((uint64_t *)a2, v5);
}

void kaldi::nnet1::AffineTransform::ApplyCorr(kaldi::nnet1::AffineTransform *this, float a2, int a3)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  uint64_t v11;

  kaldi::nnet1::AffineTransform::EnsureCorrs(this);
  v6 = kaldi::nnet1::AffineTransform::Linearity(this);
  v7 = -(float)(a2 * *((float *)this + 59));
  v8 = kaldi::nnet1::AffineTransform::LinearityCorr(this, a3);
  kaldi::CuMatrixBase<float>::AddMat(v6, v8, 111, v7, 1.0);
  v9 = kaldi::nnet1::AffineTransform::Bias(this);
  v10 = -(float)(a2 * *((float *)this + 60));
  v11 = kaldi::nnet1::AffineTransform::BiasCorr(this, a3);
  kaldi::CuVectorBase<float>::AddVec(v9, v11, v10, 1.0);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<signed char>::QuantizedAffineTransform(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D302B8;
  kaldi::QuantizedMatrix<signed char>::QuantizedMatrix(a1 + 48, a2[14]);
  kaldi::CuVector<float>::CuVector(a1 + 96, a2[15]);
  return a1;
}

void sub_1ADD401C0(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<signed char>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::QuantizedAffineTransform<short>::QuantizedAffineTransform(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D30378;
  kaldi::QuantizedMatrix<short>::QuantizedMatrix(a1 + 48, a2[14]);
  kaldi::CuVector<float>::CuVector(a1 + 96, a2[15]);
  return a1;
}

void sub_1ADD40250(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::QuantizedMatrixBase<short>::~QuantizedMatrixBase(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

uint64_t kaldi::nnet1::VectorwiseQuantizedAffineTransform<signed char>::VectorwiseQuantizedAffineTransform(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_WORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &unk_1E5D31948;
  kaldi::VectorwiseQuantizedMatrix<signed char>::VectorwiseQuantizedMatrix(a1 + 48, a2[14]);
  kaldi::CuVector<float>::CuVector(a1 + 88, a2[15]);
  return a1;
}

void sub_1ADD402E0(_Unwind_Exception *a1)
{
  kaldi::nnet1::Component *v1;
  uint64_t v2;

  kaldi::VectorwiseQuantizedMatrix<signed char>::~VectorwiseQuantizedMatrix(v2);
  kaldi::nnet1::Component::~Component(v1);
  _Unwind_Resume(a1);
}

void setInputFormatHelper(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  NSObject *v3;
  uint8_t v4[16];

  v2 = a2 - 1;
  if (v2 >= 4)
  {
    EarLmLogger();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1AD756000, v3, OS_LOG_TYPE_DEFAULT, "Input type not recognized", v4, 2u);
    }

  }
  else
  {
    quasar::LmData::setInputType(*a1, v2);
  }
}

void sub_1ADD40388(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  char v5;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    setInputFormatHelper(v5, (uint64_t)v3, v4);
  else
    setInputFormatHelper(v5, v4);
  JUMPOUT(0x1ADD40374);
}

id EarLmLogger(void)
{
  unsigned __int8 v0;
  id *v1;
  int v3;

  v1 = (id *)&unk_1EED8B000;
  if ((v0 & 1) == 0)
  {
    v1 = (id *)&unk_1EED8B000;
    if (v3)
    {
      EarLmLogger(void)::logger = (uint64_t)os_log_create("com.apple.siri", "quasar.lm");
      v1 = (id *)&unk_1EED8B000;
    }
  }
  return v1[191];
}

void sub_1ADD407F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (a2)
  {
    if (a18)
      (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
    v28 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD407A0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD40A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a15 < 0)
      operator delete(__p);
    if (a20 < 0)
      operator delete((void *)buf);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD40A04);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD40D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 __p, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a20 < 0)
      operator delete((void *)__p);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD40CB8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD40F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a20 < 0)
      operator delete((void *)buf);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD40EE0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD41130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 buf, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a14 < 0)
      operator delete(__p);
    if (a20 < 0)
      operator delete((void *)buf);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD410F4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD412F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;

  if (a2)
  {
    if (a13 < 0)
      operator delete((void *)__p);
    v15 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v17)
      {
        v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v18;
        _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v17)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD412C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD41484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1ADD415F4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int128 buf)
{
  void *v12;
  NSObject *v13;
  _BOOL4 v14;
  uint64_t v15;

  if (a2)
  {
    v12 = __cxa_begin_catch(a1);
    EarLmLogger();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v14)
      {
        v15 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 16))(v12);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v15;
        _os_log_impl(&dword_1AD756000, v13, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v14)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v13, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD415B4);
  }
  _Unwind_Resume(a1);
}

void sub_1ADD417F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;

  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    v11 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(_QWORD *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD417C0);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD419BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v10;
  NSObject *v11;
  _BOOL4 v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  uint32_t v16;

  if (!a2)
    _Unwind_Resume(exception_object);
  v10 = __cxa_begin_catch(exception_object);
  EarLmLogger();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
  {
    if (v12)
    {
      v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 16))(v10);
      LODWORD(a9) = 136315138;
      *(_QWORD *)((char *)&a9 + 4) = v13;
      v14 = "Internal C++ exception: %s";
      v15 = v11;
      v16 = 12;
LABEL_7:
      _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&a9, v16);
    }
  }
  else if (v12)
  {
    LOWORD(a9) = 0;
    v14 = "Internal unknown exception";
    v15 = v11;
    v16 = 2;
    goto LABEL_7;
  }

  __cxa_end_catch();
  JUMPOUT(0x1ADD41984);
}

void sub_1ADD41D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, __int128 __p,int a21,__int16 a22,char a23,char a24)
{
  void *v26;
  NSObject *v27;
  _BOOL4 v28;
  uint64_t v29;

  if (a2)
  {
    if (a24 < 0)
      operator delete((void *)__p);
    v26 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v27 = objc_claimAutoreleasedReturnValue();
    v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v28)
      {
        v29 = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 16))(v26);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v29;
        _os_log_impl(&dword_1AD756000, v27, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v28)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v27, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD41CB4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD4213C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;
  void *v27;
  NSObject *v28;
  _BOOL4 v29;
  uint64_t v30;

  if (a2)
  {
    if (a24)
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
    if (*(char *)(v24 - 57) < 0)
      operator delete(*(void **)(v24 - 80));
    v27 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v29)
      {
        v30 = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 16))(v27);
        *(_DWORD *)(v24 - 80) = 136315138;
        *(_QWORD *)(v24 - 76) = v30;
        _os_log_impl(&dword_1AD756000, v28, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v24 - 80), 0xCu);
      }
    }
    else if (v29)
    {
      *(_WORD *)(v24 - 80) = 0;
      _os_log_impl(&dword_1AD756000, v28, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v24 - 80), 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD420F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD425D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 buf, int a14, __int16 a15, char a16, char a17)
{
  void *v18;
  NSObject *v19;
  _BOOL4 v20;
  uint64_t v21;

  if (a2)
  {
    v18 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v19 = objc_claimAutoreleasedReturnValue();
    v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v20)
      {
        v21 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 16))(v18);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v21;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v20)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v19, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD42598);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD42718(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADD42708);
}

void sub_1ADD42810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD427D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD429A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD42970);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD42E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1ADD43108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1ADD4314C(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADD4313CLL);
}

void sub_1ADD43248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD43210);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD4352C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;

  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    v11 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(_QWORD *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD434F8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD43870(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1ADD43C18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD43DC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD43FB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int128 buf, int a12, __int16 a13, char a14, char a15)
{
  void *v16;
  NSObject *v17;
  _BOOL4 v18;
  uint64_t v19;

  if (a2)
  {
    v16 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v17 = objc_claimAutoreleasedReturnValue();
    v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v18)
      {
        v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 16))(v16);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v19;
        _os_log_impl(&dword_1AD756000, v17, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v18)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v17, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD43F48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD44250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, __int128 __p, int a16, __int16 a17, char a18, char a19)
{
  void *v19;
  void *v22;
  NSObject *v23;
  uint64_t v24;

  if (a19 < 0)
    operator delete((void *)__p);
  if (a2 == 1)
  {
    v22 = __cxa_begin_catch(a1);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
      LODWORD(__p) = 136315138;
      *(_QWORD *)((char *)&__p + 4) = v24;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD44218);
  }

  _Unwind_Resume(a1);
}

void sub_1ADD44720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD446E8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD44A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, __int128 __p, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a20 < 0)
      operator delete((void *)__p);
    if (a15 < 0)
      operator delete(a10);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v24)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD44A10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD44F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    v28 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD44CA8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD45370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    if (a19)
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
    if (*(char *)(v25 - 41) < 0)
      operator delete(*(void **)(v25 - 64));
    v28 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        *(_DWORD *)(v25 - 64) = 136315138;
        *(_QWORD *)(v25 - 60) = v31;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)(v25 - 64), 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v30)
      {
        *(_WORD *)(v25 - 64) = 0;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)(v25 - 64), 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD45338);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD45598(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD45564);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD458E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,__int128 __p,int a23,__int16 a24,char a25,char a26)
{
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (a2)
  {
    if (a26 < 0)
      operator delete((void *)__p);
    v28 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v31;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v30)
      {
        LOWORD(__p) = 0;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD4589CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD45FC0(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,__int128 buf)
{
  uint64_t v39;
  void *v42;
  NSObject *v43;
  _BOOL4 v44;
  uint64_t v45;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
    *(_QWORD *)(v39 - 224) = &a17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 224));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&buf);
    v42 = __cxa_begin_catch(a1);
    EarLmLogger();
    v43 = objc_claimAutoreleasedReturnValue();
    v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v44)
      {
        v45 = (*(uint64_t (**)(void *))(*(_QWORD *)v42 + 16))(v42);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v45;
        _os_log_impl(&dword_1AD756000, v43, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v44)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v43, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD45F54);
  }
  _Unwind_Resume(a1);
}

void sub_1ADD4674C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,__int128 buf)
{
  uint64_t v37;
  void *v40;
  NSObject *v41;
  _BOOL4 v42;
  uint64_t v43;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
    *(_QWORD *)(v37 - 224) = &a15;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v37 - 224));
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
    quasar::SystemConfig::~SystemConfig((quasar::SystemConfig *)&buf);
    v40 = __cxa_begin_catch(a1);
    EarLmLogger();
    v41 = objc_claimAutoreleasedReturnValue();
    v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v42)
      {
        v43 = (*(uint64_t (**)(void *))(*(_QWORD *)v40 + 16))(v40);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v43;
        _os_log_impl(&dword_1AD756000, v41, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v42)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v41, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD466E0);
  }
  _Unwind_Resume(a1);
}

void sub_1ADD46C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,__int128 buf,int a28,__int16 a29,char a30,char a31)
{
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;

  if (a2)
  {
    if (a21 < 0)
      operator delete(__p);
    if (a31 < 0)
      operator delete((void *)buf);
    v33 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v35)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD46B34);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD46F70(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, __int128 buf)
{
  void *v15;
  NSObject *v16;
  _BOOL4 v17;
  uint64_t v18;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
    quasar::PTree::~PTree((quasar::PTree *)&buf);
    v15 = __cxa_begin_catch(a1);
    EarLmLogger();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v17)
      {
        v18 = (*(uint64_t (**)(void *))(*(_QWORD *)v15 + 16))(v15);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v18;
        _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v17)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v16, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD46F10);
  }
  _Unwind_Resume(a1);
}

void sub_1ADD471CC(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADD471B0);
}

void sub_1ADD47228(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD4741C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, __int128 buf, int a16, __int16 a17, char a18, char a19)
{
  void *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    v21 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD473DCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD477CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,__int128 buf,int a28,__int16 a29,char a30,char a31)
{
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    v33 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD47780);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD47998(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADD47988);
}

void sub_1ADD47B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int128 buf, int a16, __int16 a17, char a18, char a19)
{
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;

  if (a2)
  {
    v20 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD47B20);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD47E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, __int128 buf, int a16, __int16 a17, char a18, char a19)
{
  void *v21;
  NSObject *v22;
  _BOOL4 v23;
  uint64_t v24;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
    v21 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v22 = objc_claimAutoreleasedReturnValue();
    v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v23)
      {
        v24 = (*(uint64_t (**)(void *))(*(_QWORD *)v21 + 16))(v21);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v24;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v23)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v22, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD47E08);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD481F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26,__int128 buf,int a28,__int16 a29,char a30,char a31)
{
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;

  if (a2)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
    v33 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD481ACLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD483C4(void *a1, int a2)
{
  void *v3;
  NSObject *v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = __cxa_begin_catch(a1);
  EarLmLogger();
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2 == 2)
    -[_EARPhoneticMatchBuilder buildGFsts].cold.1(v5, (uint64_t)v3);
  else
    -[_EARPhoneticMatchBuilder buildGFsts].cold.2(v5, v4, v6, v7, v8, v9, v10, v11);

  __cxa_end_catch();
  JUMPOUT(0x1ADD483B4);
}

void sub_1ADD484BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

_EAROovToken *_earOovToken(const quasar::AppLmData::Oov *a1)
{
  _EAROovToken *v2;
  const quasar::AppLmData::Oov *v3;
  void *v4;
  void *v5;
  _EAROovToken *v6;

  v2 = [_EAROovToken alloc];
  if (*((char *)a1 + 23) >= 0)
    v3 = a1;
  else
    v3 = *(const quasar::AppLmData::Oov **)a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v3);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  EARHelpers::ContainerToNSSet<std::set<std::string>>((_QWORD *)a1 + 3);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = -[_EAROovToken initWithOrthography:prons:frequency:](v2, "initWithOrthography:prons:frequency:", v4, v5, *((unsigned int *)a1 + 12));

  return v6;
}

void sub_1ADD485A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1ADD4879C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, __int128 buf, int a14, __int16 a15, char a16, char a17)
{
  void *v17;
  void *v20;
  NSObject *v21;
  _BOOL4 v22;
  uint64_t v23;

  if (a2)
  {

    *(_QWORD *)&buf = &a10;
    std::vector<quasar::AppLmData::Oov>::__destroy_vector::operator()[abi:ne180100]((void ***)&buf);
    v20 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v21 = objc_claimAutoreleasedReturnValue();
    v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v22)
      {
        v23 = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 16))(v20);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v23;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v22)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v21, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD48764);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD48CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,__int128 buf,int a23,__int16 a24,char a25,char a26)
{
  void *v28;
  NSObject *v29;
  _BOOL4 v30;
  uint64_t v31;

  if (a2)
  {
    if (a18)
      (*(void (**)(uint64_t))(*(_QWORD *)a18 + 8))(a18);
    v28 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v29 = objc_claimAutoreleasedReturnValue();
    v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v30)
      {
        v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 16))(v28);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v31;
        _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }
    }
    else if (v30)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_1AD756000, v29, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD48C54);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD48F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 __p, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a20 < 0)
      operator delete((void *)__p);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD48EF4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD49164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, __int128 __p, int a17, __int16 a18, char a19, char a20)
{
  void *v22;
  NSObject *v23;
  _BOOL4 v24;
  uint64_t v25;

  if (a2)
  {
    if (a20 < 0)
      operator delete((void *)__p);
    v22 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v23 = objc_claimAutoreleasedReturnValue();
    v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v24)
      {
        v25 = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 16))(v22);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v25;
        _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v24)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v23, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD49128);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD4933C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD49308);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD494E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1ADD495D4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, __int128 buf)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(a1);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v16)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD4959CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1ADD498E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,__int128 buf,int a29,__int16 a30,char a31,char a32)
{
  void *v33;
  NSObject *v34;
  _BOOL4 v35;
  uint64_t v36;

  if (a2)
  {
    v33 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v34 = objc_claimAutoreleasedReturnValue();
    v35 = os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v35)
      {
        v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v33 + 16))(v33);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v36;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v35)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v34, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD4989CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD49C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,__int128 buf,int a27,__int16 a28,char a29,char a30)
{
  void *v31;
  NSObject *v32;
  _BOOL4 v33;
  uint64_t v34;

  if (a2)
  {
    v31 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v33)
      {
        v34 = (*(uint64_t (**)(void *))(*(_QWORD *)v31 + 16))(v31);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v34;
        _os_log_impl(&dword_1AD756000, v32, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&buf, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v33)
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1AD756000, v32, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD49C08);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD49E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 __p, int a10, __int16 a11, char a12, char a13)
{
  void *v14;
  NSObject *v15;
  _BOOL4 v16;
  uint64_t v17;

  if (a2)
  {
    v14 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v15 = objc_claimAutoreleasedReturnValue();
    v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v16)
      {
        v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v14 + 16))(v14);
        LODWORD(__p) = 136315138;
        *(_QWORD *)((char *)&__p + 4) = v17;
        _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&__p, 0xCu);
      }
    }
    else if (v16)
    {
      LOWORD(__p) = 0;
      _os_log_impl(&dword_1AD756000, v15, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&__p, 2u);
    }

    __cxa_end_catch();
    JUMPOUT(0x1ADD49E48);
  }
  _Unwind_Resume(exception_object);
}

void sub_1ADD4A004(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1ADD4A0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9)
{
  void *v11;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;

  if (a2)
  {
    quasar::PTree::~PTree((quasar::PTree *)&a9);
    v11 = __cxa_begin_catch(exception_object);
    EarLmLogger();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if (a2 == 2)
    {
      if (v13)
      {
        v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 16))(v11);
        LODWORD(a9) = 136315138;
        *(_QWORD *)((char *)&a9 + 4) = v14;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal C++ exception: %s", (uint8_t *)&a9, 0xCu);
      }

      __cxa_end_catch();
    }
    else
    {
      if (v13)
      {
        LOWORD(a9) = 0;
        _os_log_impl(&dword_1AD756000, v12, OS_LOG_TYPE_DEFAULT, "Internal unknown exception", (uint8_t *)&a9, 2u);
      }

      __cxa_end_catch();
    }
    JUMPOUT(0x1ADD4A08CLL);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::PersonalizedLmData,std::allocator<quasar::PersonalizedLmData>,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, unsigned __int8 *a5@<X5>, unsigned __int8 *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x468uLL);
  result = std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,std::allocator<quasar::PersonalizedLmData>,0>(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1ADD4A2A8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL,std::allocator<quasar::PersonalizedLmData>,0>(_QWORD *a1, uint64_t a2, char *a3, uint64_t *a4, uint64_t a5, unsigned __int8 *a6, unsigned __int8 *a7)
{
  char v9;

  a1[2] = 0;
  *a1 = &unk_1E5D432F0;
  a1[1] = 0;
  std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>((int)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1ADD4A31C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::PersonalizedLmData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D432F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::PersonalizedLmData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D432F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::PersonalizedLmData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>(int a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5, uint64_t a6, unsigned __int8 *a7, unsigned __int8 *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  char v18;

  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  v14 = *a5;
  *a5 = 0;
  v16 = v14;
  quasar::PersonalizedLmData::PersonalizedLmData(a2, a3, __p, &v16, a6, *a7, *a8);
  v15 = v16;
  v16 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v18 < 0)
    operator delete(__p[0]);
}

void sub_1ADD4A430(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  if (a2)
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  std::allocator<quasar::PersonalizedLmData>::construct[abi:ne180100]<quasar::PersonalizedLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,BOOL,BOOL>((uint64_t)va);
  _Unwind_Resume(a1);
}

quasar::lm::TokenStringAndCount *std::vector<quasar::lm::TokenStringAndCount>::__init_with_size[abi:ne180100]<quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>(quasar::lm::TokenStringAndCount *result, quasar::lm::TokenStringAndCount *a2, quasar::lm::TokenStringAndCount *a3, unint64_t a4)
{
  quasar::lm::TokenStringAndCount *v6;

  if (a4)
  {
    v6 = result;
    std::vector<quasar::lm::TokenStringAndCount>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>((uint64_t)v6 + 16, a2, a3, *((quasar::lm::TokenStringAndCount **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1ADD4A4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<quasar::lm::TokenStringAndCount>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 57)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[128 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(a2 << 7);
}

quasar::lm::TokenStringAndCount *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*,quasar::lm::TokenStringAndCount*>(uint64_t a1, quasar::lm::TokenStringAndCount *a2, quasar::lm::TokenStringAndCount *a3, quasar::lm::TokenStringAndCount *this)
{
  quasar::lm::TokenStringAndCount *v4;
  const quasar::lm::TokenStringAndCount *v6;
  _QWORD v8[3];
  char v9;
  quasar::lm::TokenStringAndCount *v10;
  quasar::lm::TokenStringAndCount *v11;

  v4 = this;
  v10 = this;
  v11 = this;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      quasar::lm::TokenStringAndCount::TokenStringAndCount(v4, v6);
      v6 = (const quasar::lm::TokenStringAndCount *)((char *)v6 + 128);
      v4 = (quasar::lm::TokenStringAndCount *)((char *)v11 + 128);
      v11 = (quasar::lm::TokenStringAndCount *)((char *)v11 + 128);
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_1ADD4A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<quasar::lm::TokenStringAndCount>,quasar::lm::TokenStringAndCount*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 128;
      std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void **v5;

  v5 = (void **)(a2 + 104);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  v3 = *(void **)(a2 + 80);
  if (v3)
  {
    *(_QWORD *)(a2 + 88) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a2 + 56);
  if (v4)
  {
    *(_QWORD *)(a2 + 64) = v4;
    operator delete(v4);
  }
  v5 = (void **)(a2 + 32);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v5);
  if (*(char *)(a2 + 31) < 0)
    operator delete(*(void **)(a2 + 8));
}

void std::vector<quasar::lm::TokenStringAndCount>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        std::allocator<quasar::lm::TokenStringAndCount>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,std::allocator<quasar::NgramSrilmInterpolationConfig>,quasar::SystemConfig &,std::string,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0xC8uLL);
  result = std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::NgramSrilmInterpolationConfig>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1ADD4A7BC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__shared_ptr_emplace[abi:ne180100]<quasar::SystemConfig &,std::string,std::allocator<quasar::NgramSrilmInterpolationConfig>,0>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char v5;

  a1[2] = 0;
  *a1 = &unk_1E5D44828;
  a1[1] = 0;
  std::allocator<quasar::NgramSrilmInterpolationConfig>::construct[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,quasar::SystemConfig &,std::string>((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1ADD4A820(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D44828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::NgramSrilmInterpolationConfig>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::NgramSrilmInterpolationConfig>::construct[abi:ne180100]<quasar::NgramSrilmInterpolationConfig,quasar::SystemConfig &,std::string>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  quasar::NgramSrilmInterpolationConfig::NgramSrilmInterpolationConfig(a2, a3, a4, __p);
  if (v8 < 0)
    operator delete(__p[0]);
}

void sub_1ADD4A8F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmEvaluator,std::allocator<quasar::LmEvaluator>,std::string,std::string,std::string,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x100uLL);
  result = std::__shared_ptr_emplace<quasar::LmEvaluator>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,std::allocator<quasar::LmEvaluator>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADD4A96C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmEvaluator>::__shared_ptr_emplace[abi:ne180100]<std::string,std::string,std::string,std::allocator<quasar::LmEvaluator>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D424B8;
  a1[1] = 0;
  quasar::LmEvaluator::LmEvaluator(a1 + 3);
  return a1;
}

void sub_1ADD4A9B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D424B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D424B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LmEvaluator>::__on_zero_shared(uint64_t a1)
{
  quasar::LmEvaluator::~LmEvaluator((quasar::LmEvaluator *)(a1 + 24));
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmLoader2,std::allocator<quasar::LmLoader2>,char const(&)[1],void>@<X0>(char *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<quasar::LmLoader2>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1ADD4AA64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::allocator<quasar::LmLoader2>,0>(_QWORD *a1, char *__s)
{
  char v4;

  a1[2] = 0;
  *a1 = &unk_1E5D45350;
  a1[1] = 0;
  std::allocator<quasar::LmLoader2>::construct[abi:ne180100]<quasar::LmLoader2,char const(&)[1]>((int)&v4, (uint64_t)(a1 + 3), __s);
  return a1;
}

void sub_1ADD4AAC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45350;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45350;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

void std::__shared_ptr_emplace<quasar::LmLoader2>::__on_zero_shared(uint64_t a1)
{
  quasar::LmLoader2::~LmLoader2((quasar::LmLoader2 *)(a1 + 24));
}

void std::allocator<quasar::LmLoader2>::construct[abi:ne180100]<quasar::LmLoader2,char const(&)[1]>(int a1, uint64_t a2, char *__s)
{
  void *__p;
  char v5;

  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  quasar::LmLoader2::LmLoader2(a2);
  if (v5 < 0)
    operator delete(__p);
}

void sub_1ADD4AB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::LmLoader2,std::allocator<quasar::LmLoader2>,std::string,void>@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x80uLL);
  result = std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LmLoader2>,0>(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1ADD4ABD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::LmLoader2>::__shared_ptr_emplace[abi:ne180100]<std::string,std::allocator<quasar::LmLoader2>,0>(_QWORD *a1)
{
  a1[2] = 0;
  *a1 = &unk_1E5D45350;
  a1[1] = 0;
  quasar::LmLoader2::LmLoader2(a1 + 3);
  return a1;
}

void sub_1ADD4AC24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::allocate_shared[abi:ne180100]<quasar::AppLmData,std::allocator<quasar::AppLmData>,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,void>@<X0>(uint64_t a1@<X1>, char *a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x4B8uLL);
  result = std::__shared_ptr_emplace<quasar::AppLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,std::allocator<quasar::AppLmData>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1ADD4AC9C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<quasar::AppLmData>::__shared_ptr_emplace[abi:ne180100]<std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string,std::allocator<quasar::AppLmData>,0>(_QWORD *a1, uint64_t a2, char *a3, uint64_t *a4, uint64_t a5)
{
  char v7;

  a1[2] = 0;
  *a1 = &unk_1E5D45238;
  a1[1] = 0;
  std::allocator<quasar::AppLmData>::construct[abi:ne180100]<quasar::AppLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string>((int)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1ADD4AD08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<quasar::AppLmData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45238;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<quasar::AppLmData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E5D45238;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1AF44D190);
}

uint64_t std::__shared_ptr_emplace<quasar::AppLmData>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocator<quasar::AppLmData>::construct[abi:ne180100]<quasar::AppLmData,std::string,char const(&)[1],std::unique_ptr<quasar::TextTokenizer>,std::string>(int a1, uint64_t a2, uint64_t a3, char *__s, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *__p[2];
  char v14;
  uint64_t v15;
  void *v16[2];
  char v17;

  std::string::basic_string[abi:ne180100]<0>(v16, __s);
  v10 = *a5;
  *a5 = 0;
  v15 = v10;
  std::string::basic_string[abi:ne180100]<0>(__p, "\\unknown-first");
  v12 = 10000;
  quasar::AppLmData::AppLmData(a2, a3, v16, &v15, a6, __p, &v12);
  if (v14 < 0)
    operator delete(__p[0]);
  v11 = v15;
  v15 = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v17 < 0)
    operator delete(v16[0]);
}

void sub_1ADD4AE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a16)
    (*(void (**)(uint64_t))(*(_QWORD *)a16 + 8))(a16);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_1ADD4B010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::InterpolateLogScoresLinearly(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  unint64_t v6;
  float *v7;
  uint64_t v8;
  unint64_t v11;
  float v12;
  unint64_t v13;
  _QWORD *v14;
  float *v15;
  float v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  uint64_t v22;
  float *v23;
  uint64_t *v24;
  float *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  float v32;
  float v33;
  float *i;
  float v35;
  float v36;
  float v37;
  float *v38;
  float v39;
  float *v41;
  void *__p;
  float *v43;
  void *v44[35];

  v3 = *(uint64_t **)a1;
  v4 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (!v4)
    return 1;
  v6 = v4 / 24;
  v7 = *(float **)a2;
  if (v4 / 24 == (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
  {
    v8 = v3[1] - *v3;
    if (v8)
    {
      v11 = v8 >> 2;
      v12 = *v7;
      if (v6 >= 2)
      {
        v13 = v6 - 1;
        v14 = v3 + 4;
        v15 = v7 + 1;
        while (v11 == (uint64_t)(*v14 - *(v14 - 1)) >> 2)
        {
          v16 = *v15++;
          v12 = v12 + v16;
          v14 += 3;
          if (!--v13)
            goto LABEL_8;
        }
        if (kaldi::g_kaldi_verbose_level < -1)
          return 0;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"there are different number of items in each vector", 50);
        goto LABEL_40;
      }
LABEL_8:
      if (v12 != 1.0
        && (COERCE_INT(fabs(v12 + -1.0)) > 2139095039 || fabsf(v12 + -1.0) > (float)((float)(fabsf(v12) + 1.0) * 0.001)))
      {
        if (kaldi::g_kaldi_verbose_level < -1)
          return 0;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"weights should sum to one (i.e. not in log scale)", 49);
        goto LABEL_40;
      }
      std::vector<float>::vector(v44, v6);
      v17 = *(float **)a2;
      v18 = (float *)v44[0];
      if (v6 <= 1)
        v19 = 1;
      else
        v19 = v6;
      v20 = v19;
      do
      {
        v21 = *v17++;
        *v18++ = logf(v21);
        --v20;
      }
      while (v20);
      std::vector<float>::vector(&__p, v6);
      v22 = 0;
      v23 = (float *)v44[0];
      v24 = *(uint64_t **)a1;
      v26 = (float *)__p;
      v25 = v43;
      v27 = ((char *)v43 - (_BYTE *)__p) >> 2;
      v41 = (float *)((char *)__p + 4);
      v28 = *a3;
      if (v11 <= 1)
        v11 = 1;
      do
      {
        v29 = 0;
        v30 = v24;
        do
        {
          v31 = *v30;
          v30 += 3;
          v26[v29] = v23[v29] + *(float *)(v31 + 4 * v22);
          ++v29;
        }
        while (v19 != v29);
        if (v27)
        {
          if (v27 == 1)
          {
            v32 = *v26;
          }
          else
          {
            v33 = *v26;
            for (i = v41; i != v25; ++i)
            {
              v35 = *i;
              v36 = v35;
              if (v35 > v33)
                v33 = v36;
            }
            v37 = 0.0;
            if (v26 != v25)
            {
              v38 = v26;
              do
              {
                v39 = *v38 - v33;
                if (v39 >= -15.942)
                  v37 = v37 + expf(v39);
                ++v38;
              }
              while (v38 != v25);
            }
            v32 = v33 + logf(v37);
          }
        }
        else
        {
          v32 = -INFINITY;
        }
        *(float *)(v28 + 4 * v22++) = v32;
      }
      while (v22 != v11);
      if (__p)
      {
        v43 = (float *)__p;
        operator delete(__p);
      }
      if (v44[0])
      {
        v44[1] = v44[0];
        operator delete(v44[0]);
      }
    }
    return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)"there are different number of items in the weights list", 55);
LABEL_40:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v44);
  }
  return 0;
}

void sub_1ADD4B354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&__p);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::EstimateLinearWeights(uint64_t a1, float **a2, uint64_t a3, float a4)
{
  float *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  float *v12;
  uint64_t v13;
  _QWORD **v15;
  unint64_t v16;
  _QWORD *v17;
  double v18;
  float v19;
  float *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float *v27;
  uint64_t *v28;
  float *v29;
  uint64_t v30;
  float *v31;
  uint64_t v32;
  float v33;
  float *v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  _QWORD *v40;
  uint64_t v41;
  float *v42;
  uint64_t v43;
  float *v44;
  unint64_t v45;
  uint64_t v46;
  float *v47;
  uint64_t *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  float v55;
  float v56;
  float *i;
  float v58;
  float v59;
  float v60;
  float *v61;
  float v62;
  float *v63;
  float *v64;
  uint64_t v65;
  float v66;
  uint64_t v67;
  float *v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float *v73;
  float v74;
  float *v75;
  unint64_t v76;
  BOOL v77;
  uint64_t v78;
  unint64_t v79;
  float v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  float *v85;
  float *v86;
  float *v87;
  uint64_t v88;
  float *v89;
  int v90;
  _QWORD *v91;
  float *v92;
  float *v93;
  float v94;
  float **v96;
  unint64_t v97;
  _QWORD **v98;
  uint64_t v100;
  float *v101;
  float *v102;
  void *__p;
  float *v104;
  void *v105[3];
  _QWORD v106[3];
  void *v107;
  __int128 v108;
  void *v109;
  __int128 v110;
  void **v111[35];

  v4 = *a2;
  a2[1] = *a2;
  v6 = *(_QWORD **)a1;
  v5 = *(_QWORD **)(a1 + 8);
  v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
  if (!v7)
    return 1;
  v9 = v7 - 1;
  if (v7 == 1)
  {
    v10 = (uint64_t)(a2 + 2);
    v11 = (unint64_t)a2[2];
    if ((unint64_t)v4 >= v11)
    {
      v82 = v11 - (_QWORD)v4;
      v83 = v82 >> 1;
      if ((unint64_t)(v82 >> 1) <= 1)
        v83 = 1;
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
        v84 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v84 = v83;
      v85 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(v10, v84);
      v86 = *a2;
      v87 = a2[1];
      v89 = &v85[v88];
      *v85 = 1.0;
      v12 = v85 + 1;
      while (v87 != v86)
      {
        v90 = *((_DWORD *)v87-- - 1);
        *((_DWORD *)v85-- - 1) = v90;
      }
      *a2 = v85;
      a2[1] = v12;
      a2[2] = v89;
      if (v86)
        operator delete(v86);
    }
    else
    {
      *v4 = 1.0;
      v12 = v4 + 1;
    }
    a2[1] = v12;
    return 1;
  }
  v13 = v6[1] - *v6;
  if (!v13)
    return 1;
  v15 = (_QWORD **)a1;
  v16 = v13 >> 2;
  v17 = v6 + 4;
  do
  {
    if (v16 != (uint64_t)(*v17 - *(v17 - 1)) >> 2)
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"there are different number of items in each vector", 50);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
      }
      return 0;
    }
    v17 += 3;
    --v9;
  }
  while (v9);
  std::vector<float>::resize((uint64_t)a2, v7);
  std::vector<float>::vector(&v109, v7);
  std::vector<float>::vector(&v107, v7);
  v18 = log(1.0 / (double)v7);
  if (v5 != v6)
  {
    v19 = v18;
    v20 = (float *)v109;
    v21 = v7;
    do
    {
      *v20++ = v19;
      --v21;
    }
    while (v21);
  }
  std::vector<std::vector<float>>::vector(v106, v16);
  std::vector<float>::vector(v105, v16);
  v96 = a2;
  std::vector<float>::vector(&__p, v16);
  v22 = 0;
  v23 = v7;
  if (v16 <= 1)
    v16 = 1;
  v97 = v7;
  v98 = v15;
  while (v22 != a3)
  {
    v100 = v22;
    v24 = 0;
    v25 = v106[0];
    do
    {
      std::vector<float>::resize(v25 + 24 * v24, v7);
      v25 = v106[0];
      if (v5 == v6)
      {
        v29 = *(float **)(v106[0] + 24 * v24);
      }
      else
      {
        v26 = 0;
        v27 = (float *)v109;
        v28 = *v15;
        v29 = *(float **)(v106[0] + 24 * v24);
        do
        {
          v30 = *v28;
          v28 += 3;
          v29[v26] = v27[v26] + *(float *)(v30 + 4 * v24);
          ++v26;
        }
        while (v23 != v26);
      }
      v31 = *(float **)(v25 + 24 * v24 + 8);
      v32 = v31 - v29;
      if (v32)
      {
        if (v32 == 1)
        {
          v33 = *v29;
        }
        else
        {
          v34 = v29 + 1;
          v35 = *v29;
          while (v34 != v31)
          {
            v36 = *v34++;
            v37 = v36;
            if (v36 > v35)
              v35 = v37;
          }
          v38 = 0.0;
          while (v29 != v31)
          {
            v39 = *v29 - v35;
            if (v39 >= -15.942)
              v38 = v38 + expf(v39);
            ++v29;
          }
          v33 = v35 + logf(v38);
        }
      }
      else
      {
        v33 = -INFINITY;
      }
      *((float *)v105[0] + v24++) = v33;
    }
    while (v24 != v16);
    v40 = v6;
    v41 = 0;
    v42 = (float *)v105[0];
    v43 = v106[0];
    do
    {
      while (v5 == v6)
      {
        if (++v41 == v16)
          goto LABEL_63;
      }
      v44 = *(float **)(v43 + 24 * v41);
      v45 = v23;
      do
      {
        *v44 = *v44 - v42[v41];
        ++v44;
        --v45;
      }
      while (v45);
      ++v41;
    }
    while (v41 != v16);
    v46 = 0;
    v47 = (float *)v107;
    v48 = (uint64_t *)v106[0];
    v50 = (float *)__p;
    v49 = v104;
    v51 = ((char *)v104 - (_BYTE *)__p) >> 2;
    v101 = (float *)((char *)__p + 4);
    v102 = (float *)v107;
    do
    {
      v52 = 0;
      v53 = v48;
      do
      {
        v54 = *v53;
        v53 += 3;
        v50[v52++] = *(float *)(v54 + 4 * v46);
      }
      while (v16 != v52);
      if (v51)
      {
        if (v51 == 1)
        {
          v55 = *v50;
        }
        else
        {
          v56 = *v50;
          for (i = v101; i != v49; ++i)
          {
            v58 = *i;
            v59 = v58;
            if (v58 > v56)
              v56 = v59;
          }
          v60 = 0.0;
          if (v50 != v49)
          {
            v61 = v50;
            do
            {
              v62 = *v61 - v56;
              if (v62 >= -15.942)
                v60 = v60 + expf(v62);
              ++v61;
            }
            while (v61 != v49);
          }
          v55 = v56 + logf(v60);
          v47 = v102;
        }
      }
      else
      {
        v55 = -INFINITY;
      }
      v47[v46++] = v55;
    }
    while (v46 != v23);
LABEL_63:
    v64 = (float *)v107;
    v63 = (float *)v108;
    v65 = (uint64_t)(v108 - (_QWORD)v107) >> 2;
    if (v65)
    {
      if (v65 != 1)
      {
        v68 = (float *)((char *)v107 + 4);
        v69 = *(float *)v107;
        v6 = v40;
        if ((char *)v107 + 4 != (void *)v108)
        {
          do
          {
            v70 = *v68++;
            v71 = v70;
            if (v70 > v69)
              v69 = v71;
          }
          while (v68 != (float *)v108);
        }
        v7 = v97;
        v67 = v100;
        v72 = 0.0;
        if (v107 != (void *)v108)
        {
          v73 = (float *)v107;
          do
          {
            v74 = *v73 - v69;
            if (v74 >= -15.942)
              v72 = v72 + expf(v74);
            ++v73;
          }
          while (v73 != v63);
        }
        v66 = v69 + logf(v72);
        goto LABEL_78;
      }
      v66 = *(float *)v107;
    }
    else
    {
      v66 = -INFINITY;
    }
    v6 = v40;
    v7 = v97;
    v67 = v100;
LABEL_78:
    v75 = v64;
    v76 = v23;
    if (v5 != v6)
    {
      do
      {
        *v75 = *v75 - v66;
        ++v75;
        --v76;
      }
      while (v76);
    }
    v15 = v98;
    if (v5 == v6)
    {
      v77 = 0;
    }
    else if (vabds_f32(*v64, *(float *)v109) <= a4)
    {
      v78 = 1;
      do
      {
        v79 = v78;
        if (v23 == v78)
          break;
        v80 = vabds_f32(v64[v78], *((float *)v109 + v78));
        ++v78;
      }
      while (v80 <= a4);
      v77 = v79 < v7;
    }
    else
    {
      v77 = 1;
    }
    v22 = v67 + 1;
    v107 = v109;
    v81 = v110;
    v109 = v64;
    *(_QWORD *)&v110 = v63;
    *((_QWORD *)&v110 + 1) = *((_QWORD *)&v108 + 1);
    v108 = v81;
    if (!v77)
      break;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v111);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v111, (uint64_t)"linear weights converged after ", 31);
    v91 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v91, (uint64_t)" iterations", 11);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v111);
  }
  if (v5 != v6)
  {
    v92 = (float *)v109;
    v93 = *v96;
    do
    {
      v94 = *v92++;
      *v93++ = expf(v94);
      --v23;
    }
    while (v23);
  }
  if (__p)
  {
    v104 = (float *)__p;
    operator delete(__p);
  }
  if (v105[0])
  {
    v105[1] = v105[0];
    operator delete(v105[0]);
  }
  v111[0] = (void **)v106;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](v111);
  if (v107)
  {
    *(_QWORD *)&v108 = v107;
    operator delete(v107);
  }
  if (v109)
  {
    *(_QWORD *)&v110 = v109;
    operator delete(v109);
  }
  return 1;
}

void sub_1ADD4BA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a32);
  _Unwind_Resume(a1);
}

float kaldi::quasar::GetTotalCostFromLinearCompactLattice(_QWORD *a1, _BYTE *a2)
{
  uint64_t v4;
  float v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v9;
  void *__p;
  _BYTE *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  float v16;
  int v17;
  float v18;
  int v19;

  v4 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v5 = 0.0;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v9, a1, v4);
    v12 = v9;
    std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v13, (char *)__p, (uint64_t)v11, (v11 - (_BYTE *)__p) >> 2);
    v18 = *((float *)&v12 + 1);
    v19 = v12;
    v17 = 2139095040;
    v16 = INFINITY;
    v6 = *(float *)&v12 == INFINITY && v18 == v16 && v14 == v13;
    if (__p)
    {
      v11 = __p;
      operator delete(__p);
    }
    if (!v6)
    {
      *a2 = 1;
      v5 = v5 + *(float *)&v12;
      goto LABEL_15;
    }
    v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * (int)v4) + 48);
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1[1] + 64) + 8 * (int)v4) + 56) == v7)
      break;
    v5 = v5 + *(float *)(v7 + 8);
    v4 = *(unsigned int *)(v7 + 40);
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v9, (uint64_t)"Last state of linear clat is not a final state (perhaps text contains \\CS-xx-start without \\CS-xx-end?) LM score will not be accurate.", 134);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v9);
  }
  *a2 = 0;
LABEL_15:
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  return v5;
}

void sub_1ADD4BC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  v13 = *(void **)(v11 - 120);
  if (v13)
  {
    *(_QWORD *)(v11 - 112) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(a1);
}

void kaldi::quasar::ConvertLmeFsts(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  const void *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  __int128 v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  void *v58;
  std::__shared_weak_count *v59;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    while (1)
    {
      v5 = *(_DWORD *)(v2 + 24);
      if (!v5)
        break;
      v6 = a2[1];
      if (v6 >= a2[2])
      {
        v10 = std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__push_back_slow_path<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&>(a2, v2);
      }
      else
      {
        *(_DWORD *)v6 = *(_DWORD *)v2;
        *(_QWORD *)(v6 + 8) = *(_QWORD *)(v2 + 8);
        v7 = *(_QWORD *)(v2 + 16);
        *(_QWORD *)(v6 + 16) = v7;
        if (v7)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldxr(v8);
          while (__stxr(v9 + 1, v8));
          v5 = *(_DWORD *)(v2 + 24);
        }
        *(_DWORD *)(v6 + 24) = v5;
        v10 = v6 + 32;
      }
      a2[1] = v10;
LABEL_33:
      v2 += 32;
      if (v2 == v3)
        return;
    }
    v11 = *(const void **)(v2 + 8);
    if (v11
    {
      v13 = *(std::__shared_weak_count **)(v2 + 16);
      v58 = v12;
      v59 = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      v16 = *(_DWORD *)v2;
      fst::quasar::MergeTrieFst::CurrentUnigramFst((uint64_t)v12, &v53);
      v17 = *((_QWORD *)&v53 + 1);
      v54 = v53;
      v53 = 0uLL;
      v18 = *(_DWORD *)(v2 + 24);
      v55 = v16;
      v56 = v54;
      if (*((_QWORD *)&v54 + 1))
      {
        v19 = (unint64_t *)(v17 + 8);
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
      }
      v57 = v18;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v55);
      v21 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v22 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      if (*((_QWORD *)&v54 + 1))
      {
        v25 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_65;
      v28 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
    }
    else
    {
      v58 = 0;
      v59 = 0;
      v30 = *(std::__shared_weak_count **)(v2 + 16);
      v51 = *(_QWORD *)(v2 + 8);
      v52 = v30;
      if (v30)
      {
        v31 = (unint64_t *)&v30->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      kaldi::quasar::LmeFst::ConvertLmeFstForRescore(&v51, &v53);
      v33 = v52;
      if (v52)
      {
        v34 = (unint64_t *)&v52->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v36 = *(_DWORD *)v2;
      v37 = v53;
      v50 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (*((_QWORD *)&v53 + 1))
      {
        v38 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
        do
          v39 = __ldxr(v38);
        while (__stxr(v39 + 1, v38));
        v55 = v36;
        v56 = v37;
        do
          v40 = __ldxr(v38);
        while (__stxr(v40 + 1, v38));
      }
      else
      {
        v55 = *(_DWORD *)v2;
        v56 = (unint64_t)v53;
      }
      v57 = 0;
      std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](a2, (uint64_t)&v55);
      v41 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v42 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v43 = __ldaxr(v42);
        while (__stlxr(v43 - 1, v42));
        if (!v43)
        {
          ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
          std::__shared_weak_count::__release_weak(v41);
        }
      }
      if (v50)
      {
        v44 = (unint64_t *)&v50->__shared_owners_;
        do
          v45 = __ldaxr(v44);
        while (__stlxr(v45 - 1, v44));
        if (!v45)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
      if (!*((_QWORD *)&v53 + 1))
        goto LABEL_65;
      v46 = (unint64_t *)(*((_QWORD *)&v53 + 1) + 8);
      do
        v29 = __ldaxr(v46);
      while (__stlxr(v29 - 1, v46));
    }
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
LABEL_65:
    v47 = v59;
    if (v59)
    {
      v48 = (unint64_t *)&v59->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
    goto LABEL_33;
  }
}

void sub_1ADD4C078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  uint64_t v11;
  va_list va1;
  uint64_t v13;
  va_list va2;

  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v11 = va_arg(va2, _QWORD);
  v13 = va_arg(va2, _QWORD);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v5);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v6 - 80);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)va2);
  _Unwind_Resume(a1);
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v9 = (uint64_t)(v7 - *a1) >> 5;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 59)
      std::vector<int>::__throw_length_error[abi:ne180100]();
    v11 = v5 - *a1;
    if (v11 >> 4 > v10)
      v10 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(result, v12);
    v14 = &v13[32 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[32 * v15];
    *(_DWORD *)v14 = *(_DWORD *)a2;
    *(_OWORD *)(v14 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *((_DWORD *)v14 + 6) = *(_DWORD *)(a2 + 24);
    v16[2] = v14 + 32;
    std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v16);
    v8 = a1[1];
    result = std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *(_DWORD *)v7 = *(_DWORD *)a2;
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_DWORD *)(v7 + 24) = *(_DWORD *)(a2 + 24);
    v8 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v8;
  return result;
}

void sub_1ADD4C1EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void kaldi::quasar::GetBestInterpWeights(_QWORD **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  void **v9;
  void **v10;
  uint64_t v11;
  int v12;
  void *v13;
  void *v14;
  uint64_t v15;
  int32x2_t v16;
  void *__p;
  void *v18;
  uint64_t v19;
  void **v20;
  void **v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25[3];
  uint64_t v26[3];
  uint64_t v27;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  memset(v25, 0, sizeof(v25));
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>((char *)v25, *a1, a1[1], ((char *)a1[1] - (char *)*a1) >> 4);
  kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateLmWeightEstimator((uint64_t)v26, v25);
  v20 = (void **)v25;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v20);
  fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v23);
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v16 = vdup_n_s32(0x7F800000u);
  v18 = 0;
  v19 = 0;
  __p = 0;
  fst::ShortestPath<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2, (uint64_t)&v23, a3, 0, 0, (uint64_t *)&v16, -1, 0);
  if (__p)
  {
    v18 = __p;
    operator delete(__p);
  }
  fst::ConvertNbestToVector<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>((uint64_t)&v23, (uint64_t *)&v20);
  v9 = v20;
  v10 = v21;
  while (v9 != v10)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    fst::GetLinearSymbolSequence<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,int>((uint64_t)v9, 0, (uint64_t)&v13, 0, 0);
    kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ProcessOneSentence(v26, (uint64_t *)&v13);
    if (v13)
    {
      v14 = v13;
      operator delete(v13);
    }
    v9 += 2;
  }
  kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetBestWeights((uint64_t)v26, (float **)a5, a4, 20, 0.00097656);
  v13 = &v20;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  v23 = &unk_1E5D25800;
  v11 = v24;
  if (v24)
  {
    v12 = *(_DWORD *)(v24 + 56) - 1;
    *(_DWORD *)(v24 + 56) = v12;
    if (!v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
  v20 = (void **)&v27;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v20);
  v20 = (void **)v26;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v20);
}

void sub_1ADD4C3B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  int v25;
  void *v26;

  if (__p)
  {
    a15 = (uint64_t)__p;
    operator delete(__p);
  }
  a10 = &a17;
  std::vector<fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  a20 = &unk_1E5D25800;
  v24 = a21;
  if (a21)
  {
    v25 = *(_DWORD *)(a21 + 56) - 1;
    *(_DWORD *)(a21 + 56) = v25;
    if (!v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  }
  kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateLmWeightEstimator((void **)(v22 - 96));
  v26 = *(void **)v21;
  if (*(_QWORD *)v21)
  {
    *(_QWORD *)(v21 + 8) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::ProcessOneSentence(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *__p;
  char *v11;
  uint64_t v12;

  if (a2[1] == *a2)
    return 1;
  __p = 0;
  v11 = 0;
  v12 = 0;
  v3 = *a1;
  if (a1[1] == *a1)
    return 1;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  do
  {
    v8 = kaldi::quasar::CalculateSequenceScoresFromDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(*(_QWORD *)(v3 + v6), a2, &__p);
    if ((v8 & 1) == 0)
      break;
    std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float const*>,std::__wrap_iter<float const*>>(a1[3] + v5, *(_QWORD *)(a1[3] + v5 + 8), (char *)__p, v11, (v11 - (_BYTE *)__p) >> 2);
    ++v7;
    v3 = *a1;
    v6 += 16;
    v5 += 24;
  }
  while (v7 < (a1[1] - *a1) >> 4);
  if (__p)
  {
    v11 = (char *)__p;
    operator delete(__p);
  }
  return v8;
}

void sub_1ADD4C53C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::GetBestWeights(uint64_t a1, float **a2, int a3, uint64_t a4, float a5)
{
  _QWORD v6[34];

  if (!a3)
    return kaldi::quasar::EstimateLinearWeights(a1 + 24, a2, a4, a5);
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)"only linear weight estimation has been implemented now", 54);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v6);
  }
  return 0;
}

void sub_1ADD4C5D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  _Unwind_Resume(a1);
}

void **kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~InterpolateLmWeightEstimator(void **a1)
{
  void **v3;

  v3 = a1 + 3;
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = a1;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

uint64_t kaldi::quasar::DeterminizeCompactLattice(uint64_t a1)
{
  return kaldi::quasar::DeterminizeCompactLattice(a1, a1);
}

uint64_t kaldi::quasar::DeterminizeCompactLattice(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  int v11;
  _QWORD v12[34];
  uint64_t (**v13)(void **);
  uint64_t v14;

  fst::VectorFst<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::VectorState<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,std::allocator<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>>::VectorFst(&v13);
  fst::ConvertLattice<fst::LatticeWeightTpl<float>,int>(a1, (uint64_t)&v13, 1);
  if (v13[14]((void **)&v13))
  {
    v4 = v13[14]((void **)&v13);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
  }
  else
  {
    v5 = 0;
  }
  if (v13[15]((void **)&v13))
  {
    v6 = v13[15]((void **)&v13);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  else
  {
    v7 = 0;
  }
  fst::ArcMap<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::InvertMapper<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v13);
  ((void (*)(uint64_t (***)(void **), uint64_t))v13[35])(&v13, v7);
  ((void (*)(uint64_t (***)(void **), uint64_t))v13[36])(&v13, v5);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = fst::TopSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>((uint64_t)&v13);
  v9 = kaldi::g_kaldi_verbose_level < -1 || v8;
  if ((v9 & 1) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"fail to top-sort the rescored lattice", 37);
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  fst::ArcSort<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>,fst::ILabelCompare<fst::ArcTpl<fst::LatticeWeightTpl<float>,int>>>((uint64_t)&v13);
  fst::DeterminizeLattice<fst::LatticeWeightTpl<float>,int>((uint64_t)&v13, a2, -3313500160, -1, 0);
  fst::Connect<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>(a2);
  v13 = (uint64_t (**)(void **))&unk_1E5D25580;
  result = v14;
  if (v14)
  {
    v11 = *(_DWORD *)(v14 + 56) - 1;
    *(_DWORD *)(v14 + 56) = v11;
    if (!v11)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1ADD4C7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  _DWORD *v11;
  int v12;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a9);
  *(_QWORD *)(v9 - 48) = &unk_1E5D25580;
  v11 = *(_DWORD **)(v9 - 40);
  if (v11)
  {
    v12 = v11[14] - 1;
    v11[14] = v12;
    if (!v12)
      (*(void (**)(_DWORD *))(*(_QWORD *)v11 + 8))(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t fst::DeterminizeLattice<fst::LatticeWeightTpl<float>,int>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, _BYTE *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[288];

  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 280))(a2, v10);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 288))(a2, v11);
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer((uint64_t)v14, a1, a3, a4);
  v12 = fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Determinize((uint64_t)v14, a5);
  if ((v12 & 1) != 0)
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Output((uint64_t)v14, a2, 1);
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizer((uint64_t)v14);
  return v12;
}

void sub_1ADD4C91C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::~LatticeDeterminizer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LoadRescoreInterpedLMs(uint64_t *a1, uint64_t *a2, uint64_t a3, int a4, uint64_t **a5, uint64_t *a6, _QWORD *a7, __int32 **a8, float a9, uint64_t *a10, unsigned int a11, uint64_t a12, int a13, unsigned int a14, unint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v21;
  unint64_t v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  float *v33;
  float *v34;
  float *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  float *v41;
  int v42;
  uint64_t *v43;
  uint64_t *v44;
  char v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const void *v50;
  float *v51;
  float *v52;
  float *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  float *v59;
  int v60;
  uint64_t v61;
  float v62;
  float *v63;
  float *v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  float *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  float *v75;
  float *v76;
  float *v77;
  int *v78;
  int *v79;
  char v80;
  int v81;
  unint64_t v82;
  __int128 v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v97;
  _OWORD v99[2];
  int v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  _OWORD v104[3];
  float *v105;
  float *v106;
  char *v107;
  unsigned int *v108[3];
  int v109;

  v109 = a4;
  kaldi::quasar::ConvertLmeFsts(a6, (uint64_t *)v108);
  v97 = *a10;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  memset(v104, 0, sizeof(v104));
  v21 = *a1;
  if (a1[1] != *a1)
  {
    v22 = 0;
    do
    {
      v23 = *(_OWORD *)(v21 + 16 * v22);
      v103 = v23;
      if (*((_QWORD *)&v23 + 1))
      {
        v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
        LODWORD(v99[0]) = a11;
        *(_OWORD *)((char *)v99 + 8) = v23;
        do
          v26 = __ldxr(v24);
        while (__stxr(v26 + 1, v24));
      }
      else
      {
        LODWORD(v99[0]) = a11;
        *((_QWORD *)&v99[0] + 1) = v23;
        *(_QWORD *)&v99[1] = 0;
      }
      DWORD2(v99[1]) = -1;
      *((_QWORD *)&v101 + 1) = 0;
      v102 = 0;
      *(_QWORD *)&v101 = (char *)&v101 + 8;
      kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddBackoffFst(v104, (unsigned int *)v99, (uint64_t *)v108, 1, 0, a14, 0x20000uLL, (uint64_t)&v101);
      std::__tree<int>::destroy((uint64_t)&v101, *((_QWORD **)&v101 + 1));
      v27 = *(std::__shared_weak_count **)&v99[1];
      if (*(_QWORD *)&v99[1])
      {
        v28 = (unint64_t *)(*(_QWORD *)&v99[1] + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v30 = (std::__shared_weak_count *)*((_QWORD *)&v103 + 1);
      if (*((_QWORD *)&v103 + 1))
      {
        v31 = (unint64_t *)(*((_QWORD *)&v103 + 1) + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v33 = v106;
      if (v106 >= (float *)v107)
      {
        v35 = v105;
        v36 = v106 - v105;
        v37 = v36 + 1;
        if ((unint64_t)(v36 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v38 = v107 - (char *)v105;
        if ((v107 - (char *)v105) >> 1 > v37)
          v37 = v38 >> 1;
        if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
          v39 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v39 = v37;
        if (v39)
        {
          v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107, v39);
          v35 = v105;
          v33 = v106;
        }
        else
        {
          v40 = 0;
        }
        v41 = (float *)&v40[4 * v36];
        *v41 = 1.0;
        v34 = v41 + 1;
        while (v33 != v35)
        {
          v42 = *((_DWORD *)v33-- - 1);
          *((_DWORD *)v41-- - 1) = v42;
        }
        v105 = v41;
        v106 = v34;
        v107 = &v40[4 * v39];
        if (v35)
          operator delete(v35);
      }
      else
      {
        *v106 = 1.0;
        v34 = v33 + 1;
      }
      v106 = v34;
      ++v22;
      v21 = *a1;
    }
    while (v22 < (a1[1] - *a1) >> 4);
  }
  v43 = *a5;
  v44 = a5[1];
  if (*a5 == v44)
    goto LABEL_127;
  v45 = 0;
  v46 = *a5;
  do
  {
    v47 = *v46;
    v46 += 2;
    v45 |= *(_BYTE *)(v47 + 8) != 0;
  }
  while (v46 != v44);
  if ((v45 & 1) == 0)
  {
LABEL_127:
    v48 = *a2;
    if (a2[1] != *a2)
    {
      v49 = 0;
      do
      {
        v50 = *(const void **)(v48 + 16 * v49);
        *((_QWORD *)&v101 + 1) = 0;
        v102 = 0;
        *(_QWORD *)&v101 = (char *)&v101 + 8;
        memset(v99, 0, sizeof(v99));
        v100 = 1065353216;
        kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::AddNnlm(v104, v50, v108, a7, a8, (uint64_t)&v101, v97, 1u, a9, 0, a15, (uint64_t)v99);
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v99);
        std::__tree<int>::destroy((uint64_t)&v101, *((_QWORD **)&v101 + 1));
        v51 = v106;
        if (v106 >= (float *)v107)
        {
          v53 = v105;
          v54 = v106 - v105;
          v55 = v54 + 1;
          if ((unint64_t)(v54 + 1) >> 62)
            std::vector<int>::__throw_length_error[abi:ne180100]();
          v56 = v107 - (char *)v105;
          if ((v107 - (char *)v105) >> 1 > v55)
            v55 = v56 >> 1;
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL)
            v57 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v57 = v55;
          if (v57)
          {
            v58 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107, v57);
            v53 = v105;
            v51 = v106;
          }
          else
          {
            v58 = 0;
          }
          v59 = (float *)&v58[4 * v54];
          *v59 = 1.0;
          v52 = v59 + 1;
          while (v51 != v53)
          {
            v60 = *((_DWORD *)v51-- - 1);
            *((_DWORD *)v59-- - 1) = v60;
          }
          v105 = v59;
          v106 = v52;
          v107 = &v58[4 * v57];
          if (v53)
            operator delete(v53);
        }
        else
        {
          *v106 = 1.0;
          v52 = v51 + 1;
        }
        v106 = v52;
        ++v49;
        v48 = *a2;
      }
      while (v49 < (a2[1] - *a2) >> 4);
      v43 = *a5;
      v44 = a5[1];
    }
  }
  for (; v43 != v44; v43 += 2)
  {
    v61 = *v43;
    v62 = *(float *)(*v43 + 16);
    if (v62 > 0.0)
    {
      *((_QWORD *)&v99[0] + 1) = 0;
      *(_QWORD *)&v99[1] = 0;
      *(_QWORD *)&v99[0] = (char *)v99 + 8;
      (*(void (**)(uint64_t, _OWORD *, unsigned int **, _QWORD, uint64_t, uint64_t, _QWORD, _OWORD *, _QWORD *, unint64_t))(*(_QWORD *)v61 + 16))(v61, v104, v108, a11, 1, 1, a14, v99, a7, a15);
      std::__tree<int>::destroy((uint64_t)v99, *((_QWORD **)&v99[0] + 1));
      v63 = v106;
      if (v106 >= (float *)v107)
      {
        v65 = v105;
        v66 = v106 - v105;
        v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        v68 = v107 - (char *)v105;
        if ((v107 - (char *)v105) >> 1 > v67)
          v67 = v68 >> 1;
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL)
          v69 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v69 = v67;
        if (v69)
        {
          v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>((uint64_t)&v107, v69);
          v65 = v105;
          v63 = v106;
        }
        else
        {
          v70 = 0;
        }
        v71 = (float *)&v70[4 * v66];
        *v71 = v62;
        v64 = v71 + 1;
        while (v63 != v65)
        {
          v72 = *((_DWORD *)v63-- - 1);
          *((_DWORD *)v71-- - 1) = v72;
        }
        v105 = v71;
        v106 = v64;
        v107 = &v70[4 * v69];
        if (v65)
          operator delete(v65);
      }
      else
      {
        *v106 = v62;
        v64 = v63 + 1;
      }
      v106 = v64;
    }
  }
  v73 = *((_QWORD *)&v104[0] + 1);
  v74 = *(_QWORD *)&v104[0];
  if (*(_QWORD *)&v104[0] == *((_QWORD *)&v104[0] + 1))
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"no new LM defined", 17);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
    }
    goto LABEL_118;
  }
  v75 = *(float **)a3;
  v76 = *(float **)(a3 + 8);
  if (a16 && v75 == v76)
  {
    kaldi::quasar::GetBestInterpWeights((_QWORD **)v104, a16, a13, v109, (uint64_t)v99);
    v77 = *(float **)a3;
    if (*(_QWORD *)a3)
    {
      *(_QWORD *)(a3 + 8) = v77;
      operator delete(v77);
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
    }
    v78 = *(int **)&v99[0];
    *(_QWORD *)a3 = *(_QWORD *)&v99[0];
    v79 = (int *)*((_QWORD *)&v99[0] + 1);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)((char *)v99 + 8);
    if (v78 == v79)
      goto LABEL_90;
    v80 = 0;
    do
    {
      v81 = *v78++;
      v80 |= (v81 & 0x7FFFFFFFu) > 0x7F7FFFFF;
    }
    while (v78 != v79);
    if ((v80 & 1) != 0)
    {
LABEL_90:
      if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"failed to estimate the interpolation weights", 44);
        kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v99);
      }
LABEL_118:
      v92 = 0;
      goto LABEL_119;
    }
    if (!kaldi::quasar::LimitWeights(&v105, (float **)a3))
    {
      if (kaldi::g_kaldi_verbose_level >= -1)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"Failed to limit interp_weights2", 31);
        kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
      }
      goto LABEL_118;
    }
    v75 = *(float **)a3;
    v76 = *(float **)(a3 + 8);
    v73 = *((_QWORD *)&v104[0] + 1);
    v74 = *(_QWORD *)&v104[0];
  }
  if (v76 - v75 != (v73 - v74) >> 4)
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)"total number of new LMs is ", 27);
      v93 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v93, (uint64_t)" , but the number of interpolation weights is ", 46);
      std::ostream::operator<<();
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v99);
    }
    goto LABEL_118;
  }
  memset(v99, 0, 24);
  if (v76 != v75)
  {
    v82 = 0;
    do
    {
      v83 = *(_OWORD *)(*(_QWORD *)&v104[0] + 16 * v82);
      v101 = v83;
      if (*((_QWORD *)&v83 + 1))
      {
        v84 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      *(float *)&v102 = v75[v82];
      std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>>::push_back[abi:ne180100]((uint64_t *)v99, (uint64_t)&v101);
      v86 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
      if (*((_QWORD *)&v101 + 1))
      {
        v87 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
      }
      ++v82;
      v75 = *(float **)a3;
    }
    while (v82 < (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  }
  std::allocate_shared[abi:ne180100]<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,std::allocator<fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,std::vector<std::pair<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>,float>> &,fst::InterpolateDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::WeightType &,void>((uint64_t *)v99, &v109, &v101);
  std::shared_ptr<kaldi::quasar::CEAttnEncoderDecoder>::operator=[abi:ne180100](a17, &v101);
  v89 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v90 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
  *(_QWORD *)&v101 = v99;
  std::vector<quasar::AlternativeSelectionSpan::Alternative>::__destroy_vector::operator()[abi:ne180100]((void ***)&v101);
  v92 = 1;
LABEL_119:
  *(_QWORD *)&v99[0] = (char *)&v104[1] + 8;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
  *(_QWORD *)&v99[0] = v104;
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  *(_QWORD *)&v99[0] = v108;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v99);
  return v92;
}

void sub_1ADD4D198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  uint64_t v19;
  void *v21;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a19);
  kaldi::quasar::DeterministicOnDemandFstCreator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::~DeterministicOnDemandFstCreator((void **)(v19 - 208));
  v21 = *(void **)(v19 - 160);
  if (v21)
  {
    *(_QWORD *)(v19 - 152) = v21;
    operator delete(v21);
  }
  a19 = (void **)(v19 - 136);
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__destroy_vector::operator()[abi:ne180100](&a19);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::LimitWeights(float **a1, float **a2)
{
  _QWORD *v4;
  void *p_p;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  uint64_t v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float *v13;
  float *v14;
  int v15;
  float *v16;
  int v17;
  unint64_t v18;
  float v19;
  unint64_t v20;
  float *v21;
  float *v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  double v33;
  float v34;
  BOOL v35;
  _QWORD *v36;
  int v38;
  _QWORD *v39;
  void *v40;
  uint64_t v41;
  void *__p;
  uint64_t v43;
  unsigned __int8 v44;
  _QWORD v45[35];

  if (kaldi::g_kaldi_verbose_level >= 5)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
    v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"max_weights: ", 13);
    kaldi::JoinVectorToString<float>(a1, ",");
    if ((v44 & 0x80u) == 0)
      p_p = &__p;
    else
      p_p = __p;
    if ((v44 & 0x80u) == 0)
      v6 = v44;
    else
      v6 = v43;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)p_p, v6);
    if ((char)v44 < 0)
      operator delete(__p);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
    if (kaldi::g_kaldi_verbose_level >= 5)
    {
      kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
      v7 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Initial weights ", 16);
      kaldi::JoinVectorToString<float>(a2, ",");
      if ((v44 & 0x80u) == 0)
        v8 = &__p;
      else
        v8 = __p;
      if ((v44 & 0x80u) == 0)
        v9 = v44;
      else
        v9 = v43;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
      if ((char)v44 < 0)
        operator delete(__p);
      kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
    }
  }
  v10 = *a2;
  v11 = a2[1];
  v12 = (char *)v11 - (char *)*a2;
  v13 = *a1;
  v14 = a1[1];
  if (v12 == (char *)v14 - (char *)*a1)
  {
    if (v13 != v14)
    {
      v15 = 0;
      v16 = v13;
      do
      {
        if (*v16 <= 0.0)
        {
          if (kaldi::g_kaldi_verbose_level < -1)
            return 0;
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"LM should not have been added to DeterministicOnDemandFstCreator. max_weight <= 0: ", 83);
          std::ostream::operator<<();
          goto LABEL_55;
        }
        if (*v16 < 1.0)
          ++v15;
        ++v16;
      }
      while (v16 != v14);
      if (v15)
      {
        if (v15 != 1)
        {
          kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Unimplemented. num_effective_max_weights > 1: ", 46);
          std::ostream::operator<<();
          kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)v45);
        }
        if (v11 != v10)
        {
          v17 = 0;
          v18 = v12 >> 2;
          if (v18 <= 1)
            v18 = 1;
          v19 = 0.0;
          v20 = v18;
          v21 = *a2;
          v22 = v13;
          v23 = 0.0;
          do
          {
            v24 = *v21++;
            v25 = v24;
            v26 = *v22++;
            v27 = v25 - v26;
            v28 = v25 <= v26;
            if (v25 > v26)
              v29 = v27;
            else
              v29 = -0.0;
            v23 = v23 + v29;
            if (!v28)
              v25 = -0.0;
            v19 = v19 + v25;
            if (v28)
              ++v17;
            --v20;
          }
          while (v20);
          if (v23 > 0.001)
          {
            v30 = 0.0;
            do
            {
              v31 = *v10;
              v32 = *v13;
              if (*v10 <= *v13)
              {
                v33 = 1.0 / (double)v17;
                if (v19 >= 0.001)
                  v33 = (float)(v31 / v19);
                v34 = v33;
                v32 = v31 + (float)(v34 * v23);
              }
              *v10++ = v32;
              v30 = v30 + v32;
              ++v13;
              --v18;
            }
            while (v18);
            if (v30 == 1.0)
            {
LABEL_61:
              v38 = kaldi::g_kaldi_verbose_level;
            }
            else
            {
              v35 = COERCE_INT(fabs(v30 + -1.0)) <= 2139095039
                 && fabsf(v30 + -1.0) <= (float)((float)(fabsf(v30) + 1.0) * 0.001);
              v38 = kaldi::g_kaldi_verbose_level;
              if (!v35 && kaldi::g_kaldi_verbose_level >= -1)
              {
                kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"weights should sum to one (i.e. not in log scale)", 49);
                kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
                goto LABEL_61;
              }
            }
            if (v38 >= 5)
            {
              kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45, 5);
              v39 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Final weights: ", 15);
              kaldi::JoinVectorToString<float>(a2, ",");
              if ((v44 & 0x80u) == 0)
                v40 = &__p;
              else
                v40 = __p;
              if ((v44 & 0x80u) == 0)
                v41 = v44;
              else
                v41 = v43;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v40, v41);
              if ((char)v44 < 0)
                operator delete(__p);
              kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v45);
            }
          }
        }
      }
    }
    return 1;
  }
  else
  {
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v45, (uint64_t)"Total number of weights is ", 27);
      v36 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v36, (uint64_t)" , but the number of max weights is ", 36);
      std::ostream::operator<<();
LABEL_55:
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v45);
    }
    return 0;
  }
}

void sub_1ADD4D74C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  JUMPOUT(0x1ADD4D744);
}

uint64_t kaldi::quasar::RescoreLatticeWithLanguageModels(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t **a6, uint64_t *a7, _QWORD *a8, float a9, __int32 **a10, uint64_t *a11, unsigned int a12, uint64_t a13, uint64_t a14, float *a15, int a16, int a17, unsigned int **a18, int a19, char a20,int a21,unsigned int a22,unint64_t a23,int a24,_QWORD *a25)
{
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  char RescoreInterpedLMs;
  char v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  char v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  char v60;
  char v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  float TotalCostFromLinearCompactLattice;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  char v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  int v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  std::__shared_weak_count *v98;
  unint64_t *v99;
  unint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  char **v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  char **v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  _QWORD v124[2];
  std::__shared_weak_count *v125;
  std::__shared_weak_count *v126;
  _BYTE v127[40];
  void *__p;
  void *v129;
  uint64_t v130[2];
  uint64_t (***v131[34])(_QWORD);
  uint64_t v132[2];
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;

  v138 = 0;
  v139 = 0;
  v136 = 0;
  v137 = 0;
  v133 = 0;
  v134 = 0;
  v135 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v133, *(const void **)a13, *(_QWORD *)(a13 + 8), (uint64_t)(*(_QWORD *)(a13 + 8) - *(_QWORD *)a13) >> 2);
  v31 = (std::__shared_weak_count *)a11[1];
  v132[0] = *a11;
  v132[1] = (uint64_t)v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(p_shared_owners);
    while (__stxr(v33 + 1, p_shared_owners));
  }
  RescoreInterpedLMs = kaldi::quasar::LoadRescoreInterpedLMs(a2, a4, (uint64_t)&v133, a16, a6, a7, a8, a10, a9, v132, a12, v103, a19, a22, a23, (uint64_t)a1, (uint64_t)&v138);
  v35 = RescoreInterpedLMs;
  if (!v31)
    goto LABEL_8;
  v36 = (unint64_t *)&v31->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (v37)
  {
LABEL_8:
    if ((RescoreInterpedLMs & 1) != 0)
      goto LABEL_9;
LABEL_90:
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Failed to load rescore old LMs", 30);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v131);
    }
    goto LABEL_92;
  }
  ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
  std::__shared_weak_count::__release_weak(v31);
  if ((v35 & 1) == 0)
    goto LABEL_90;
LABEL_9:
  v38 = (std::__shared_weak_count *)a11[1];
  v130[0] = *a11;
  v130[1] = (uint64_t)v38;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  v41 = kaldi::quasar::LoadRescoreInterpedLMs(a3, a5, a14, a17, a6, a7, a8, a10, a9, v130, a12, v104, a19, a22, a23, (uint64_t)a1, (uint64_t)&v136);
  if (v38)
  {
    v42 = (unint64_t *)&v38->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v44 = (uint64_t)a25;
  if ((v41 & 1) != 0)
  {
    if (a25)
      std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a25, &v136);
    v122 = v138;
    v123 = v139;
    if (v139)
    {
      v45 = (unint64_t *)&v139->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v120 = v136;
    v121 = v137;
    if (v137)
    {
      v47 = (unint64_t *)&v137->__shared_owners_;
      do
        v48 = __ldxr(v47);
      while (__stxr(v48 + 1, v47));
    }
    v131[0] = (uint64_t (***)(_QWORD))0x3F800000BF800000;
    fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::ComposeDeterministicOnDemandFst((uint64_t)v124, &v122, &v120, v131);
    v49 = v121;
    if (v121)
    {
      v50 = (unint64_t *)&v121->__shared_owners_;
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    v52 = v123;
    if (v123)
    {
      v53 = (unint64_t *)&v123->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v131[0] = (uint64_t (***)(_QWORD))v124;
    std::allocate_shared[abi:ne180100]<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>,std::allocator<fst::LeftContextDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> *>>,fst::ComposeDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>> *,std::vector<int> const&,void>(v131, a18, &v118);
    v114 = v118;
    v115 = v119;
    if (v119)
    {
      v55 = (unint64_t *)&v119->__shared_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(&v116, &v114, a23);
    v57 = v115;
    if (v115)
    {
      v58 = (unint64_t *)&v115->__shared_owners_;
      do
        v59 = __ldaxr(v58);
      while (__stlxr(v59 - 1, v58));
      if (!v59)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    v112 = 0;
    v113 = 0;
    v60 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst((uint64_t)&v116, a21, a1, &v112, a24);
    v61 = v60;
    v62 = v113;
    if (!v113)
      goto LABEL_48;
    v63 = (unint64_t *)&v113->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
      if ((v61 & 1) != 0)
        goto LABEL_49;
    }
    else
    {
LABEL_48:
      if ((v60 & 1) != 0)
      {
LABEL_49:
        fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v116);
        v65 = v119;
        if (v119)
        {
          v66 = (unint64_t *)&v119->__shared_owners_;
          do
            v67 = __ldaxr(v66);
          while (__stlxr(v67 - 1, v66));
          if (!v67)
          {
            ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
            std::__shared_weak_count::__release_weak(v65);
          }
        }
        v124[0] = &unk_1E5D222B8;
        if (__p)
        {
          v129 = __p;
          operator delete(__p);
        }
        std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v127);
        v68 = v126;
        if (v126)
        {
          v69 = (unint64_t *)&v126->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
          }
        }
        v71 = v125;
        if (v125)
        {
          v72 = (unint64_t *)&v125->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
        if (a20)
          kaldi::quasar::DeterminizeCompactLattice((uint64_t)a1, (uint64_t)a1);
        if (*a15 <= 0.0)
          goto LABEL_137;
        fst::VectorFst<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,fst::VectorState<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>,std::allocator<fst::ArcTpl<fst::CompactLatticeWeightTpl<fst::LatticeWeightTpl<float>,int>,int>>>>::VectorFst(&v116);
        kaldi::CompactLatticeShortestPath(a1, (uint64_t)&v116, 0);
        if (((*(_QWORD *)(v117 + 72) - *(_QWORD *)(v117 + 64)) & 0x7FFFFFFF8) != 0)
        {
          LOBYTE(v118) = 0;
          TotalCostFromLinearCompactLattice = kaldi::quasar::GetTotalCostFromLinearCompactLattice(&v116, &v118);
          v110 = v136;
          v111 = v137;
          if (v137)
          {
            v75 = (unint64_t *)&v137->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::CacheDeterministicOnDemandFst(v124, &v110, a23);
          v77 = v111;
          if (v111)
          {
            v78 = (unint64_t *)&v111->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v108 = 0;
          v109 = 0;
          v80 = kaldi::RescoreCompactLatticeWithDeterministicOnDemandFst((uint64_t)v124, a21, &v116, &v108, a24);
          v81 = v109;
          if (v109)
          {
            v82 = (unint64_t *)&v109->__shared_owners_;
            do
              v83 = __ldaxr(v82);
            while (__stlxr(v83 - 1, v82));
            if (!v83)
            {
              ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
              std::__shared_weak_count::__release_weak(v81);
            }
          }
          if ((v80 & 1) != 0)
          {
            v84 = 0;
            *a15 = kaldi::quasar::GetTotalCostFromLinearCompactLattice(&v116, &v118) - TotalCostFromLinearCompactLattice;
          }
          else
          {
            if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
            {
              kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Failed to get new total LM score", 32);
              kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v131);
            }
            v84 = 1;
          }
          fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(v124);
        }
        else
        {
          if (kaldi::g_kaldi_verbose_level >= -1)
          {
            kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Failed to get a best path in the lattice", 40);
            kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
          }
          v84 = 1;
        }
        v116 = &unk_1E5D25800;
        v101 = v117;
        if (v117)
        {
          v102 = *(_DWORD *)(v117 + 56) - 1;
          *(_DWORD *)(v117 + 56) = v102;
          if (!v102)
            (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
        }
        if (!v84)
        {
LABEL_137:
          v44 = 1;
          goto LABEL_93;
        }
LABEL_92:
        v44 = 0;
        goto LABEL_93;
      }
    }
    if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"can not perform LM rescoring on the lattice", 43);
      kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v131);
    }
    fst::CacheDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>,fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~CacheDeterministicOnDemandFst(&v116);
    v92 = v119;
    if (v119)
    {
      v93 = (unint64_t *)&v119->__shared_owners_;
      do
        v94 = __ldaxr(v93);
      while (__stlxr(v94 - 1, v93));
      if (!v94)
      {
        ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
        std::__shared_weak_count::__release_weak(v92);
      }
    }
    v124[0] = &unk_1E5D222B8;
    if (__p)
    {
      v129 = __p;
      operator delete(__p);
    }
    std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v127);
    v95 = v126;
    if (v126)
    {
      v96 = (unint64_t *)&v126->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
        std::__shared_weak_count::__release_weak(v95);
      }
    }
    v98 = v125;
    if (v125)
    {
      v99 = (unint64_t *)&v125->__shared_owners_;
      do
        v100 = __ldaxr(v99);
      while (__stlxr(v100 - 1, v99));
      if (!v100)
      {
        ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
        std::__shared_weak_count::__release_weak(v98);
      }
    }
    goto LABEL_92;
  }
  if ((kaldi::g_kaldi_verbose_level & 0x80000000) == 0)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v131);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v131, (uint64_t)"Failed to load rescore new LMs", 30);
    kaldi::KaldiLogMessage::~KaldiLogMessage((kaldi::KaldiLogMessage *)v131);
  }
  if (a25)
  {
    std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::operator=[abi:ne180100](a25, &v138);
    goto LABEL_92;
  }
LABEL_93:
  if (v133)
  {
    v134 = v133;
    operator delete(v133);
  }
  v85 = v137;
  if (v137)
  {
    v86 = (unint64_t *)&v137->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  v88 = v139;
  if (v139)
  {
    v89 = (unint64_t *)&v139->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
      std::__shared_weak_count::__release_weak(v88);
    }
  }
  return v44;
}

void sub_1ADD4E024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,_DWORD *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;
  int v63;
  void *v64;

  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)&a61);
  if (a30)
  {
    v63 = a30[14] - 1;
    a30[14] = v63;
    if (!v63)
      (*(void (**)(_DWORD *))(*(_QWORD *)a30 + 8))(a30);
  }
  v64 = *(void **)(v61 - 160);
  if (v64)
  {
    *(_QWORD *)(v61 - 152) = v64;
    operator delete(v64);
  }
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v61 - 136);
  std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>::~shared_ptr[abi:ne180100](v61 - 120);
  _Unwind_Resume(a1);
}

uint64_t kaldi::JoinVectorToString<float>(_QWORD *a1, const char *a2)
{
  unint64_t v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  _QWORD v9[2];
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v9);
  if (a1[1] != *a1)
  {
    v4 = 0;
    do
    {
      std::ostream::operator<<();
      ++v4;
      v5 = a1[1] - *a1;
      if (v4 < v5 >> 2)
      {
        v6 = strlen(a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)a2, v6);
        v5 = a1[1] - *a1;
      }
    }
    while (v4 < v5 >> 2);
  }
  std::stringbuf::str();
  v9[0] = *MEMORY[0x1E0DE4F50];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v9 + *(_QWORD *)(v9[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v10[0] = v7;
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1AF44D094](&v12);
}

void sub_1ADD4E2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *result;
  v2 = result[1];
  v4 = a2[1];
  while (v2 != v3)
  {
    v5 = *(_DWORD *)(v2 - 32);
    v2 -= 32;
    *(_DWORD *)(v4 - 32) = v5;
    v4 -= 32;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(v2 + 8);
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
  }
  a2[1] = v4;
  v6 = *result;
  *result = v4;
  a2[1] = v6;
  v7 = result[1];
  result[1] = a2[2];
  a2[2] = v7;
  v8 = result[2];
  result[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__push_back_slow_path<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[5];

  v3 = *a1;
  v4 = (a1[1] - *a1) >> 5;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59)
    std::vector<int>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - v3;
  if (v8 >> 4 > v5)
    v5 = v8 >> 4;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
    v9 = 0x7FFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v17[4] = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<quasar::TextTokenizer::Token>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[32 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v17[3] = &v10[32 * v9];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 1) = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)v11 + 2) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *((_DWORD *)v11 + 6) = *(_DWORD *)(a2 + 24);
  v17[2] = v11 + 32;
  std::vector<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::__swap_out_circular_buffer(a1, v17);
  v15 = a1[1];
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)v17);
  return v15;
}

void sub_1ADD4E438(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<fst::FstWithLabel<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t kaldi::quasar::InterpolateLmWeightEstimator<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>::InterpolateLmWeightEstimator(uint64_t a1, _QWORD **a2)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>>::__init_with_size[abi:ne180100]<std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*,std::shared_ptr<fst::DeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>>*>((char *)a1, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<std::vector<float>>::resize((uint64_t *)(a1 + 24), (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4);
  return a1;
}

void sub_1ADD4E4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::shared_ptr<quasar::LmeContainer>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t kaldi::quasar::CalculateSequenceScoresFromDeterministicOnDemandFst<fst::ArcTpl<fst::TropicalWeightTpl<float>,int>>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD *v12;
  float v13[4];
  _QWORD v14[34];

  if ((**(unsigned int (***)(uint64_t))a1)(a1) != -1)
  {
    a3[1] = *a3;
    std::vector<float>::resize((uint64_t)a3, (a2[1] - *a2) >> 2);
    if (a2[1] != *a2)
    {
      v6 = (**(uint64_t (***)(uint64_t))a1)(a1);
      v7 = *a2;
      if (*a2 != a2[1])
      {
        v8 = 0;
        v9 = -1;
        while (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD, float *))(*(_QWORD *)a1 + 32))(a1, v6, *(unsigned int *)(v7 + v8), v13) & 1) != 0)
        {
          *(float *)(*a3 + v8) = -v13[2];
          v6 = LODWORD(v13[3]);
          ++v9;
          v8 += 4;
          if (v7 + v8 == a2[1])
            goto LABEL_11;
        }
        if (kaldi::g_kaldi_verbose_level < -1)
          return 0;
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"can not find label ", 19);
        v11 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)" from state ", 12);
        v12 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)" . Wrong LM input?", 18);
        goto LABEL_15;
      }
      v9 = -1;
LABEL_11:
      *(float *)(*a3 + 4 * v9) = *(float *)(*a3 + 4 * v9)
                               - (*(float (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v6);
    }
    return 1;
  }
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)"invalid deterministic on-demand FST", 35);
LABEL_15:
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v14);
  }
  return 0;
}

void sub_1ADD4E740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Determinize(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;

  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(a1);
  while (1)
  {
    v4 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(a1 + 168) == v4)
      break;
    v5 = *(_DWORD *)(v4 - 4);
    *(_QWORD *)(a1 + 176) = v4 - 4;
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessFinal(a1, v5);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ProcessTransitions(a1, v5);
    if (a2)
    {
      if (*a2)
        fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Debug((fst *)a1);
    }
    if ((fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(a1) & 1) == 0)
      return 0;
  }
  result = 1;
  *(_BYTE *)(a1 + 84) = 1;
  return result;
}

void sub_1ADD4E800(_Unwind_Exception *exception_object, int a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  const std::runtime_error *exception_ptr;
  va_list va;

  va_start(va, a2);
  if (a2 == 2)
  {
    __cxa_get_exception_ptr(exception_object);
    *(_QWORD *)(v3 - 64) = MEMORY[0x1E0DE5058] + 16;
    __cxa_begin_catch(exception_object);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va, (uint64_t)"Memory allocation error doing lattice determinization; using ",
        61);
      v5 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" bytes (max = ", 14);
      v6 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" (repo,arcs,elems) = (", 22);
      v7 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)",", 1);
      v8 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)")", 1);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
    }
    *(_BYTE *)(v2 + 84) = 0;
    std::bad_alloc::~bad_alloc((std::bad_alloc *)(v3 - 64));
  }
  else
  {
    if (a2 != 1)
      _Unwind_Resume(exception_object);
    exception_ptr = (const std::runtime_error *)__cxa_get_exception_ptr(exception_object);
    std::runtime_error::runtime_error((std::runtime_error *)(v3 - 64), exception_ptr);
    __cxa_begin_catch(exception_object);
    if (kaldi::g_kaldi_verbose_level >= -1)
    {
      kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((uint64_t *)va, (uint64_t)"Caught exception doing lattice determinization\n", 47);
      kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
    }
    *(_BYTE *)(v2 + 84) = 0;
    std::runtime_error::~runtime_error((std::runtime_error *)(v3 - 64));
  }
  __cxa_end_catch();
  JUMPOUT(0x1ADD4E7D8);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Output(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5;
  int v6;
  uint64_t v7;
  void **v8;
  char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void **v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  _BYTE *v20;
  uint64_t v21;
  std::vector<unsigned int> v22;
  __int128 v23;
  void *v24;
  void *v25;
  uint64_t v26;
  int v27;

  v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3);
  if (a3)
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::FreeMostMemory(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 176))(a2, 0xFFFFFFFFLL);
  if ((_DWORD)v5)
  {
    if ((int)v5 < 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
    }
    else
    {
      v6 = v5;
      do
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
        --v6;
      }
      while (v6);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 176))(a2, 0);
      v7 = 0;
      v12 = v5;
      do
      {
        v8 = (void **)(*(_QWORD *)(a1 + 24) + 24 * v7);
        v9 = (char *)*v8;
        v10 = (char *)v8[1];
        while (v9 != v10)
        {
          v24 = 0;
          v25 = 0;
          v26 = 0;
          memset(&v22, 0, sizeof(v22));
          fst::LatticeStringRepository<int>::ConvertToVector(a1 + 240, *((uint64_t **)v9 + 1), &v22);
          v18 = *(void ***)(v9 + 20);
          v20 = 0;
          v21 = 0;
          v19 = 0;
          std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&v19, v22.__begin_, (uint64_t)v22.__end_, v22.__end_ - v22.__begin_);
          if (*((_DWORD *)v9 + 4) == -1)
          {
            v14 = v18;
            v16 = 0;
            v17 = 0;
            __p = 0;
            std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(&__p, v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
            (*(void (**)(uint64_t, uint64_t, void ***))(*(_QWORD *)a2 + 184))(a2, v7, &v14);
            if (__p)
            {
              v16 = __p;
              operator delete(__p);
            }
          }
          else
          {
            v27 = *((_DWORD *)v9 + 4);
            LODWORD(v23) = *(_DWORD *)v9;
            DWORD1(v23) = v23;
            *((_QWORD *)&v23 + 1) = v18;
            std::vector<int>::__assign_with_size[abi:ne180100]<int *,int *>((char *)&v24, (char *)v19, (uint64_t)v20, (v20 - (_BYTE *)v19) >> 2);
            (*(void (**)(uint64_t, uint64_t, __int128 *))(*(_QWORD *)a2 + 208))(a2, v7, &v23);
          }
          if (v19)
          {
            v20 = v19;
            operator delete(v19);
          }
          if (v22.__begin_)
          {
            v22.__end_ = v22.__begin_;
            operator delete(v22.__begin_);
          }
          if (v24)
          {
            v25 = v24;
            operator delete(v24);
          }
          v9 += 32;
        }
        if (a3)
        {
          v11 = *v8;
          v8[1] = 0;
          v8[2] = 0;
          *v8 = 0;
          if (v11)
            operator delete(v11);
        }
        ++v7;
      }
      while (v7 != v12);
    }
    if ((a3 & 1) != 0)
    {
      v23 = *(_OWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v24 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 40) = 0;
      v18 = (void **)&v23;
      std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&v18);
    }
  }
}

void sub_1ADD4EC68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  if (a25)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;

  *(_QWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v7 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 88))(a2, 0);
  *(_DWORD *)(a1 + 80) = a3;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = a3;
  *(_DWORD *)(a1 + 72) = a4;
  *(_BYTE *)(a1 + 84) = 0;
  std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(a1 + 88, 3uLL, a1 + 76, (int *)(a1 + 80));
  std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(a1 + 128, 3uLL, a1 + 76, (int *)(a1 + 80));
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  fst::LatticeStringRepository<int>::LatticeStringRepository(a1 + 240);
  return a1;
}

void sub_1ADD4ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v16;
  void *v17;

  v16 = *(void **)(v10 + 216);
  if (v16)
  {
    *(_QWORD *)(v10 + 224) = v16;
    operator delete(v16);
  }
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::LatticeDeterminizer(v14, v13, v12, v10);
  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v11);
  a10 = (void **)(v10 + 24);
  std::vector<std::vector<int>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v17 = *(void **)v10;
  if (*(_QWORD *)v10)
  {
    *(_QWORD *)(v10 + 8) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,int,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,int>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5;

  v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADD4EE38(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::SubsetEqual,std::allocator<std::pair<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>> const* const,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>>::unordered_map(uint64_t a1, size_t a2, uint64_t a3, int *a4)
{
  int v5;

  v5 = *a4;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  *(_DWORD *)(a1 + 36) = v5;
  std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1, a2);
  return a1;
}

void sub_1ADD4EE84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::InitializeDeterminization(uint64_t a1)
{
  int v2;
  int v3;
  size_t v4;
  int v5;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _DWORD *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  int v38;
  void *__p;
  void *v40;
  uint64_t v41;
  uint64_t *v42;
  void *v43;
  char *v44;
  char *v45;

  if ((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 1, 0))
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 160))(*(_QWORD *)(a1 + 56));
    if (v2 >= 0)
      v3 = v2;
    else
      v3 = v2 + 1;
    v4 = (v3 >> 1) + 3;
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 88, v4);
    std::__hash_table<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::variant<kaldi::quasar::ShortlistDataInManyFiles::NotLoadedShortListDataOnDisk,std::shared_ptr<kaldi::quasar::ShortlistDataOnDisk>>>>>::__rehash<true>(a1 + 128, v4);
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  if (v5 != -1)
  {
    v6 = v5;
    v43 = 0;
    v44 = 0;
    v45 = 0;
    v7 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)&v45, 1uLL);
    v9 = (char *)&v7[3 * v8];
    *(_DWORD *)v7 = v6;
    v10 = (char *)(v7 + 3);
    v7[1] = 0;
    v7[2] = 0;
    v12 = (char *)v43;
    v11 = v44;
    if (v44 != v43)
    {
      do
      {
        *(_OWORD *)(v7 - 3) = *(_OWORD *)(v11 - 24);
        *(v7 - 1) = *((_QWORD *)v11 - 1);
        v7 -= 3;
        v11 -= 24;
      }
      while (v11 != v12);
      v11 = (char *)v43;
    }
    v43 = v7;
    v44 = v10;
    v45 = v9;
    if (v11)
      operator delete(v11);
    v44 = v10;
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(a1, (uint64_t *)&v43);
    fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::ConvertToMinimal(a1, (unsigned int **)&v43);
    v13 = operator new();
    *(_QWORD *)v13 = 0;
    *(_QWORD *)(v13 + 8) = 0;
    *(_QWORD *)(v13 + 16) = 0;
    std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::__init_with_size[abi:ne180100]<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*,fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element*>((char *)v13, (uint64_t)v43, (uint64_t)v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - (_BYTE *)v43) >> 3));
    v42 = (uint64_t *)v13;
    v14 = *(_QWORD *)(a1 + 16);
    v15 = *(uint64_t **)(a1 + 8);
    if ((unint64_t)v15 >= v14)
    {
      v17 = ((uint64_t)v15 - *(_QWORD *)a1) >> 3;
      if ((unint64_t)(v17 + 1) >> 61)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v18 = v14 - *(_QWORD *)a1;
      v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1))
        v19 = v17 + 1;
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v19;
      if (v20)
        v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<kaldi::CuWorkspace *>>(a1 + 16, v20);
      else
        v21 = 0;
      v22 = (uint64_t *)&v21[8 * v17];
      v23 = &v21[8 * v20];
      *v22 = v13;
      v16 = v22 + 1;
      v25 = *(char **)a1;
      v24 = *(char **)(a1 + 8);
      if (v24 != *(char **)a1)
      {
        do
        {
          v26 = *((_QWORD *)v24 - 1);
          v24 -= 8;
          *--v22 = v26;
        }
        while (v24 != v25);
        v24 = *(char **)a1;
      }
      *(_QWORD *)a1 = v22;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v23;
      if (v24)
        operator delete(v24);
    }
    else
    {
      *v15 = v13;
      v16 = v15 + 1;
    }
    *(_QWORD *)(a1 + 8) = v16;
    __p = 0;
    v40 = 0;
    v41 = 0;
    std::vector<std::vector<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::TempArc>>>::push_back[abi:ne180100]((uint64_t *)(a1 + 24), (uint64_t)&__p);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
    __p = &v42;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetEqual,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,int>>>::__emplace_unique_key_args<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*,std::piecewise_construct_t const&,std::tuple<std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>> const*&&>,std::tuple<>>(a1 + 88, &v42, (uint64_t)&std::piecewise_construct, (_QWORD **)&__p)+ 6) = 0;
    v27 = *(_QWORD *)(a1 + 184);
    v28 = *(char **)(a1 + 176);
    if ((unint64_t)v28 >= v27)
    {
      v30 = *(char **)(a1 + 168);
      v31 = (v28 - v30) >> 2;
      if ((unint64_t)(v31 + 1) >> 62)
        std::vector<int>::__throw_length_error[abi:ne180100]();
      v32 = v27 - (_QWORD)v30;
      v33 = (uint64_t)(v27 - (_QWORD)v30) >> 1;
      if (v33 <= v31 + 1)
        v33 = v31 + 1;
      if (v32 >= 0x7FFFFFFFFFFFFFFCLL)
        v34 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v34 = v33;
      if (v34)
      {
        v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<int>>(a1 + 184, v34);
        v30 = *(char **)(a1 + 168);
        v28 = *(char **)(a1 + 176);
      }
      else
      {
        v35 = 0;
      }
      v36 = &v35[4 * v31];
      v37 = &v35[4 * v34];
      *(_DWORD *)v36 = 0;
      v29 = v36 + 4;
      while (v28 != v30)
      {
        v38 = *((_DWORD *)v28 - 1);
        v28 -= 4;
        *((_DWORD *)v36 - 1) = v38;
        v36 -= 4;
      }
      *(_QWORD *)(a1 + 168) = v36;
      *(_QWORD *)(a1 + 176) = v29;
      *(_QWORD *)(a1 + 184) = v37;
      if (v30)
        operator delete(v30);
    }
    else
    {
      *(_DWORD *)v28 = 0;
      v29 = v28 + 4;
    }
    *(_QWORD *)(a1 + 176) = v29;
    if (v43)
    {
      v44 = (char *)v43;
      operator delete(v43);
    }
  }
}

void sub_1ADD4F1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Debug(fst *a1)
{
  _QWORD *v2;
  fst *v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  fst *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  _QWORD *v34;
  _QWORD *v35;
  fst *begin;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  _QWORD *v40;
  fst *v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v46;
  std::vector<unsigned int> __p;
  char *v48;
  char *v49;
  char *v50;
  _BYTE v51[32];
  uint64_t v52;
  char v53;

  v2 = (_QWORD *)fst::cerr(a1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)"Debug function called (probably SIGUSR1 caught).\n", 49);
  memset(v51, 0, sizeof(v51));
  v52 = 0x3A8000003F800000;
  std::__hash_table<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,std::__unordered_map_hasher<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,true>,std::__unordered_map_equal<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetEqual,fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::SubsetKey,false>,std::allocator<std::__hash_value_type<std::vector<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element,std::allocator<fst::DeterminizerStar<fst::ArcTpl<fst::LogWeightTpl<float>,int>>::Element>> const*,int>>>::swap((uint64_t)v51, (uint64_t)a1 + 88);
  v3 = (fst *)std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)v51);
  v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a1 + 4) - *((_QWORD *)a1 + 3)) >> 3);
  v5 = v4 - 2;
  if (v4 <= 2)
  {
    v6 = (_QWORD *)fst::cerr(v3);
    std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, "Nothing to trace back");
    exit(1);
  }
  v7 = (fst *)std::vector<int>::vector((std::vector<int> *)v51, v4 - 1, fst::kNoStateId);
  if (v5)
  {
    v8 = 0;
    v9 = *((_QWORD *)a1 + 3);
    do
    {
      v10 = (uint64_t *)(v9 + 24 * v8);
      v11 = *v10;
      v12 = v10[1] - *v10;
      if (v12)
      {
        v13 = v12 >> 5;
        v14 = *(_QWORD *)v51;
        if (v13 <= 1)
          v13 = 1;
        v15 = (int *)(v11 + 16);
        do
        {
          v17 = *v15;
          v15 += 8;
          v16 = v17;
          if (v5 >= v17 && v8 < v16)
            *(_DWORD *)(v14 + 4 * v16) = v8;
          --v13;
        }
        while (v13);
      }
      ++v8;
    }
    while (v8 != v5);
    v48 = 0;
    v49 = 0;
    v50 = 0;
    if ((v5 - 1) <= 0xFFFFFFFD)
    {
      v19 = 0;
      do
      {
        v20 = v5;
        LODWORD(v5) = *(_DWORD *)(*(_QWORD *)v51 + 4 * (int)v5);
        v21 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 24 * (int)v5);
        v22 = *(_QWORD *)(*((_QWORD *)a1 + 3) + 24 * (int)v5 + 8) - v21;
        if (v22)
        {
          v23 = v22 >> 5;
          if (v23 <= 1)
            v23 = 1;
          v24 = (uint64_t *)(v21 + 8);
          while (*((_DWORD *)v24 + 2) != v20)
          {
            v24 += 4;
            if (!--v23)
              goto LABEL_43;
          }
          v25 = *((_DWORD *)v24 - 2);
          v26 = *v24;
          if (v19 >= v50)
          {
            v27 = (v19 - v48) >> 4;
            if ((unint64_t)(v27 + 1) >> 60)
              std::vector<int>::__throw_length_error[abi:ne180100]();
            v28 = (v50 - v48) >> 3;
            if (v28 <= v27 + 1)
              v28 = v27 + 1;
            if ((unint64_t)(v50 - v48) >= 0x7FFFFFFFFFFFFFF0)
              v29 = 0xFFFFFFFFFFFFFFFLL;
            else
              v29 = v28;
            if (v29)
              v7 = (fst *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<int,unsigned long>>>((uint64_t)&v50, v29);
            else
              v7 = 0;
            v30 = (char *)v7 + 16 * v27;
            *(_DWORD *)v30 = v25;
            *((_QWORD *)v30 + 1) = v26;
            v32 = v48;
            v31 = v49;
            v33 = v30;
            if (v49 != v48)
            {
              do
              {
                *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                v33 -= 16;
                v31 -= 16;
              }
              while (v31 != v32);
              v31 = v48;
            }
            v19 = v30 + 16;
            v48 = v33;
            v49 = v30 + 16;
            v50 = (char *)v7 + 16 * v29;
            if (v31)
              operator delete(v31);
          }
          else
          {
            *(_DWORD *)v19 = v25;
            *((_QWORD *)v19 + 1) = v26;
            v19 += 16;
          }
          v49 = v19;
        }
LABEL_43:
        ;
      }
      while ((v5 - 1) < 0xFFFFFFFE);
    }
    if ((_DWORD)v5 == -1)
    {
      v34 = (_QWORD *)fst::cerr(v7);
      v7 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v34, (uint64_t)"Traceback did not reach start state (possibly debug-code error)", 63);
    }
  }
  else
  {
    v48 = 0;
    v49 = 0;
    v50 = 0;
  }
  v35 = (_QWORD *)fst::cerr(v7);
  begin = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)"Traceback below (or on standard error) in format ilabel (olabel olabel) ilabel (olabel) ...\n", 92);
  if (v49 - v48 >= 1)
  {
    v37 = (unint64_t)(v49 - v48) >> 4;
    v38 = (_DWORD)a1 + 240;
    do
    {
      fst::cerr(begin);
      v39 = (_QWORD *)std::ostream::operator<<();
      LOBYTE(__p.__begin_) = 32;
      v40 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)&__p, 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v40, (uint64_t)"( ", 2);
      memset(&__p, 0, sizeof(__p));
      fst::LatticeStringRepository<int>::ConvertToVector(v38, *(uint64_t **)&v48[16 * v37 - 8], &__p);
      if (__p.__end_ != __p.__begin_)
      {
        v42 = 0;
        do
        {
          fst::cerr(v41);
          v43 = (_QWORD *)std::ostream::operator<<();
          v53 = 32;
          v41 = (fst *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)&v53, 1);
          ++v42;
        }
        while (v42 < __p.__end_ - __p.__begin_);
      }
      v44 = (_QWORD *)fst::cerr(v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v44, (uint64_t)") ", 2);
      begin = (fst *)__p.__begin_;
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
    }
    while (v37-- > 1);
  }
  v46 = (_QWORD *)fst::cerr(begin);
  LOBYTE(__p.__begin_) = 10;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v46, (uint64_t)&__p, 1);
  exit(1);
}

void sub_1ADD4F5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  if (a15)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::CheckMemoryUsage(uint64_t a1)
{
  int v1;
  int v3;
  int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[35];

  v1 = *(_DWORD *)(a1 + 68);
  if (v1 < 1)
    return 1;
  v3 = 24 * *(_DWORD *)(a1 + 52) + 32 * *(_DWORD *)(a1 + 48);
  if (v3 + 32 * *(_DWORD *)(a1 + 272) <= v1)
    return 1;
  fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::RebuildRepository((uint64_t *)a1);
  v4 = *(_DWORD *)(a1 + 272);
  if (kaldi::g_kaldi_verbose_level >= 2)
  {
    kaldi::KaldiVlogMessage::KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12, 2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Rebuilt repository in determinize-lattice: repository shrank from ", 66);
    v5 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)" to ", 4);
    v6 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)" bytes (approximately)", 22);
    kaldi::KaldiVlogMessage::~KaldiVlogMessage((kaldi::KaldiVlogMessage *)v12);
  }
  if (v3 + 32 * v4 <= (int)((double)*(int *)(a1 + 68) * 0.8))
    return 1;
  if (kaldi::g_kaldi_verbose_level >= -1)
  {
    kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"Failure in determinize-lattice: size exceeds maximum ", 53);
    v7 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)" bytes; (repo,arcs,elems) = (",
      29);
    v8 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)",", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)",", 1);
    v10 = (_QWORD *)std::ostream::operator<<();
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)"), after rebuilding, repo size was ", 35);
    std::ostream::operator<<();
    kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)v12);
  }
  return 0;
}

void sub_1ADD4F7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  kaldi::KaldiWarnMessage::~KaldiWarnMessage((kaldi::KaldiWarnMessage *)va);
  _Unwind_Resume(a1);
}

uint64_t fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::EpsilonClosure(uint64_t a1, uint64_t *a2)
{
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  char v13;
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  char v18;
  __int128 *v19;
  uint64_t v20;
  int v21;
  float v22;
  float v23;
  int v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  char *v31;
  _OWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  _QWORD *v43;
  int v44[4];
  uint64_t v45;
  __int128 *v46;
  __int128 v47;
  _DWORD *v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  _QWORD v52[4];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  int v56;
  float v57;
  int v58;
  int *v59;

  v54 = 0u;
  v55 = 0u;
  v56 = 1065353216;
  v4 = (char *)*a2;
  if (a2[1] != *a2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = &v4[v5];
      LODWORD(v46) = *(_DWORD *)v7;
      v47 = *(_OWORD *)v7;
      v48 = (_DWORD *)*((_QWORD *)v7 + 2);
      std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::pair<int const,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element> const&>((uint64_t)&v54, (int *)&v46, (uint64_t)&v46);
      ++v6;
      v4 = (char *)*a2;
      v5 += 24;
    }
    while (v6 < 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3));
  }
  v8 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56), 0x10000000, 0);
  v53 = 0u;
  memset(v52, 0, sizeof(v52));
  v9 = *a2;
  if (*a2 == a2[1])
    goto LABEL_44;
  v10 = v8;
  do
  {
    std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, v9);
    v9 += 24;
  }
  while (v9 != a2[1]);
  v11 = *((_QWORD *)&v53 + 1);
  if (!*((_QWORD *)&v53 + 1))
    goto LABEL_44;
  v12 = 0;
  v13 = 0;
  do
  {
    v14 = *(_QWORD *)(v52[1] + 8 * ((unint64_t)v53 / 0xAA)) + 24 * ((unint64_t)v53 % 0xAA);
    v50 = *(_OWORD *)v14;
    v51 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)&v53 = v53 + 1;
    *((_QWORD *)&v53 + 1) = v11 - 1;
    if ((unint64_t)v53 >= 0x154)
    {
      operator delete(*(void **)v52[1]);
      v52[1] += 8;
      *(_QWORD *)&v53 = v53 - 170;
    }
    if ((v13 & 1) != 0)
    {
      v46 = &v50;
      v15 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v54, (int *)&v50, (uint64_t)&std::piecewise_construct, (_DWORD **)&v46);
      if (fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element::operator!=((uint64_t)(v15 + 3), (uint64_t)&v50))
      {
        v13 = 1;
        goto LABEL_43;
      }
    }
    v16 = *(_DWORD *)(a1 + 72);
    if (v16 >= 1)
    {
      if (v12 > v16)
      {
        kaldi::KaldiWarnMessage::KaldiWarnMessage((kaldi::KaldiWarnMessage *)&v46);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v46, (uint64_t)"Lattice determinization aborted since looped more than ", 55);
        v43 = (_QWORD *)std::ostream::operator<<();
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v43, (uint64_t)" times during epsilon closure.\n", 31);
        kaldi::KaldiErrorMessage::~KaldiErrorMessage((kaldi::KaldiErrorMessage *)&v46);
      }
      ++v12;
    }
    v17 = *(_QWORD *)(a1 + 56);
    v49 = 0;
    (*(void (**)(uint64_t, _QWORD, __int128 **))(*(_QWORD *)v17 + 136))(v17, v50, &v46);
    while (1)
    {
      if (!v46)
      {
        if (v49 >= *((_QWORD *)&v47 + 1))
          goto LABEL_41;
LABEL_23:
        v20 = v47 + 20 * v49;
        goto LABEL_24;
      }
      v18 = (*(uint64_t (**)(__int128 *))(*(_QWORD *)v46 + 24))(v46);
      v19 = v46;
      if ((v18 & 1) != 0)
        goto LABEL_39;
      if (!v46)
        goto LABEL_23;
      v20 = (*(uint64_t (**)(void))(*(_QWORD *)v46 + 32))();
LABEL_24:
      v21 = *(_DWORD *)v20;
      if ((v10 & 0x10000000) != 0)
      {
        if (v21)
          break;
      }
      if (!v21)
      {
        v44[0] = 0;
        v22 = *(float *)(v20 + 8);
        v23 = *(float *)(v20 + 12);
        *(float *)v44 = v22;
        *(float *)&v59 = v23;
        v58 = 2139095040;
        v57 = INFINITY;
        if (v22 != INFINITY || *(float *)&v59 != v57)
        {
          v44[0] = *(_DWORD *)(v20 + 16);
          *(float *)&v45 = *(float *)&v51 + v22;
          *((float *)&v45 + 1) = *((float *)&v51 + 1) + v23;
          v24 = *(_DWORD *)(v20 + 4);
          v25 = (uint64_t *)*((_QWORD *)&v50 + 1);
          if (v24)
            v25 = fst::LatticeStringRepository<int>::Successor((uint64_t **)(a1 + 240), *((uint64_t *)&v50 + 1), v24);
          *(_QWORD *)&v44[2] = v25;
          v26 = std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::find<int>(&v54, v44);
          v27 = v26;
          if (v26)
          {
            if (fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Compare(a1, (float *)&v45, *(uint64_t **)&v44[2], (float *)v26 + 10, (uint64_t *)v26[4]) == 1)
            {
              v27[4] = *(_QWORD *)&v44[2];
              v27[5] = v45;
              std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, (uint64_t)v44);
              v13 = 1;
            }
          }
          else
          {
            v59 = v44;
            v28 = std::__hash_table<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::__unordered_map_hasher<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&v54, v44, (uint64_t)&std::piecewise_construct, &v59);
            *(_OWORD *)(v28 + 3) = *(_OWORD *)v44;
            v28[5] = v45;
            std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::push_back(v52, (uint64_t)v44);
          }
        }
      }
      if (v46)
        (*(void (**)(__int128 *))(*(_QWORD *)v46 + 40))(v46);
      else
        ++v49;
    }
    v19 = v46;
LABEL_39:
    if (v19)
    {
      (*(void (**)(__int128 *))(*(_QWORD *)v19 + 8))(v19);
      goto LABEL_43;
    }
LABEL_41:
    if (v48)
      --*v48;
LABEL_43:
    v11 = *((_QWORD *)&v53 + 1);
  }
  while (*((_QWORD *)&v53 + 1));
LABEL_44:
  a2[1] = *a2;
  std::vector<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizerPruned<fst::LatticeWeightTpl<float>,int>::Element>>::reserve((void **)a2, *((unint64_t *)&v55 + 1));
  v29 = (_QWORD *)v55;
  if ((_QWORD)v55)
  {
    v30 = a2 + 2;
    v31 = (char *)a2[1];
    do
    {
      v32 = v29 + 3;
      if ((unint64_t)v31 >= *v30)
      {
        v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v31[-*a2] >> 3);
        v34 = v33 + 1;
        if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
          std::vector<int>::__throw_length_error[abi:ne180100]();
        if (0x5555555555555556 * ((*v30 - *a2) >> 3) > v34)
          v34 = 0x5555555555555556 * ((*v30 - *a2) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((*v30 - *a2) >> 3) >= 0x555555555555555)
          v35 = 0xAAAAAAAAAAAAAAALL;
        else
          v35 = v34;
        v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<int>>>((uint64_t)(a2 + 2), v35);
        v38 = &v36[24 * v33];
        *(_OWORD *)v38 = *v32;
        *((_QWORD *)v38 + 2) = v29[5];
        v40 = (char *)*a2;
        v39 = (char *)a2[1];
        v41 = v38;
        if (v39 != (char *)*a2)
        {
          do
          {
            *(_OWORD *)(v41 - 24) = *(_OWORD *)(v39 - 24);
            *((_QWORD *)v41 - 1) = *((_QWORD *)v39 - 1);
            v41 -= 24;
            v39 -= 24;
          }
          while (v39 != v40);
          v39 = (char *)*a2;
        }
        v31 = v38 + 24;
        *a2 = (uint64_t)v41;
        a2[1] = (uint64_t)(v38 + 24);
        a2[2] = (uint64_t)&v36[24 * v37];
        if (v39)
          operator delete(v39);
      }
      else
      {
        *(_OWORD *)v31 = *v32;
        *((_QWORD *)v31 + 2) = v29[5];
        v31 += 24;
      }
      a2[1] = (uint64_t)v31;
      v29 = (_QWORD *)*v29;
    }
    while (v29);
  }
  std::deque<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element,std::allocator<fst::LatticeDeterminizer<fst::LatticeWeightTpl<float>,int>::Element>>::~deque[abi:ne180100](v52);
  return std::__hash_table<int,std::hash<int>,std::equal_to<int>,std::allocator<int>>::~__hash_table((uint64_t)&v54);
}

